[
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Gets the input and prepares the data for further use.\n    :param stdin: the standard input string\n    :return: the max number of edges which belong to at least one of the simple paths between $a$ and $b$, $b$ and $c$, or $a$ and $c$.\n    '''\n    # Gets the number of vertices from the input\n    n = int(stdin.split('\\n')[0])\n\n    # Gets the edges of the graph from the input\n    edges = []\n    for line in stdin.split('\\n')[1:]:\n        edges.append(list(map(int, line.split(' '))))\n\n    # Gets the number of edges in the graph\n    edge_number = n - 1\n\n    # Gets the edges of the graph with a unique pair\n    edges_unique = []\n    for edge in edges:\n        if edge not in edges_unique:\n            edges_unique.append(edge)\n\n    # Saves the graph in the form of an adjacency list\n    graph = dict()\n    for edge in edges_unique:\n        if edge[0] not in graph.keys():\n            graph[edge[0]] = [edge[1]]\n        else:\n            graph[edge[0]].append(edge[1])\n\n        if edge[1] not in graph.keys():\n            graph[edge[1]] = [edge[0]]\n        else:\n            graph[edge[1]].append(edge[0])\n\n    # Saves the number of edges which belong to a simple path between two vertices in the same list. The number of such edges is the number of edges which belong to a simple path between a and b\n    # Saves the number of edges which belong to a simple path between two vertices in the same list. The number of such edges is the number of edges which belong to a simple path between b and c\n    # Saves the number of edges which belong to a simple path between two vertices in the same list. The number of such edges is the number of edges which belong to a simple path between a and c\n    paths = {key: [0 for i in range(n)] for key in range(1, n + 1)}\n\n    # Calculates the number of edges which belong to a simple path between two vertices\n    for vertex in range(1, n + 1):\n        if vertex in graph.keys():\n            for neighbour in graph[vertex]:\n                if neighbour in graph.keys():\n                    for neighbour_two in graph[neighbour]:\n                        if neighbour_two == vertex:\n                            paths[vertex][vertex - 1] = 1\n                        elif neighbour_two == vertex:\n                            paths[vertex][neighbour - 1] = 1\n                        elif neighbour_two == vertex:\n                            paths[vertex][neighbour_two - 1] = 1\n                        elif neighbour_two == vertex:\n                            paths[vertex][neighbour - 1] = 1\n\n    # Finds the best answer\n    answers = [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]\n    for answer in answers:\n        number_of_edges = 0\n        if paths[answer[0]][answer[1] - 1] == 1:\n            number_of_edges += 1\n        if paths[answer[0]][answer[2] - 1] == 1:\n            number_of_edges += 1\n        if paths[answer[1]][answer[2] - 1] == 1:\n            number_of_edges += 1\n        if number_of_edges > edge_number:\n            edge_number = number_of_edges\n            a, b, c = answer[0], answer[1], answer[2]\n\n    return edge_number, a, b, c\n\n\ndef"
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    n = int(lines[0])\n    edges = []\n    for i in range(1, n):\n        edges.append(lines[i])\n    from collections import defaultdict\n    graph = defaultdict(list)\n    for edge in edges:\n        a, b = edge.split(\" \")\n        a, b = int(a), int(b)\n        graph[a].append(b)\n        graph[b].append(a)\n    max_edges = -1\n    for i in range(1, n + 1):\n        for j in range(i + 1, n + 1):\n            if j in graph[i]:\n                continue\n            # print(i, j, len(graph[i]))\n            cur_edges = len(graph[i]) + len(graph[j]) - 2\n            if cur_edges > max_edges:\n                max_edges = cur_edges\n                start, end = i, j\n    print(max_edges, start, end)\n    return start, end\n"
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\""
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n, m = list(map(int, lines[0].split()))\n    graph = {i: set() for i in range(1, n + 1)}\n    for line in lines[1:]:\n        u, v = list(map(int, line.split()))\n        graph[u].add(v)\n        graph[v].add(u)\n\n    def dfs(graph, start, end):\n        stack = [start]\n        used = set()\n        while stack:\n            vertex = stack.pop()\n            if vertex not in used:\n                used.add(vertex)\n                stack += graph[vertex] - used\n        return len(used) - 1\n\n    res = 0\n    for u in range(1, n + 1):\n        for v in range(u + 1, n + 1):\n            res = max(res, dfs(graph, u, v))\n\n    return res\n"
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    return \"\"\n"
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Gets a weighted tree and returns three vertices from it\n    \"\"\"\n    return \"\"\n"
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, path = [int(i) for i in stdin.split('\\n')[0].split()]\n    \n    answer = []\n    \n    for _ in range(n - 1):\n        a, b = [int(i) for i in stdin.split('\\n')[1].split()]\n        \n        if a not in path or b not in path:\n            if a not in answer:\n                answer.append(a)\n            if b not in answer:\n                answer.append(b)\n            if a not in answer:\n                answer.append(a)\n        \n    return''.join([str(i) for i in answer])\n"
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    solution from https://www.codewars.com/kata/55aa075506463dac6600014d/solutions/python\n\n    \"\"\"\n    divisors = [int(x) for x in stdin.split()]\n    divisors.sort()\n    divisors_set = set()\n    for divisor in divisors:\n        divisors_set |= {divisor, divisor + 1}\n    for divisor in divisors:\n        if divisor + 1 not in divisors_set:\n            return str(divisor + 1) + \" \" + str(divisor)\n        if divisor not in divisors_set:\n            return str(divisor) + \" \" + str(divisor + 1)\n        else:\n            continue\n    raise Exception(\"Error, no solution\")\n"
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    n = int(stdin.readline().strip())\n    x = sorted(list(map(int, stdin.readline().strip().split())))\n    y = sorted(list(map(int, stdin.readline().strip().split())))\n    for xi, yi in zip(x, y):\n        if xi == yi:\n            continue\n        for xj, yj in zip(x, y):\n            if xj == yi or xj == yj:\n                break\n        else:\n            return xi, yi\n    return x[-1], y[-1]"
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    returns two positive integer numbers $x$ and $y$ such that $x+y = n$\n    where $n$ is the length of the list of divisors.\n    \"\"\"\n    n = int(stdin)\n    divisors = set(int(d) for d in stdin.split()[1:])\n    lst = [0, 1]\n    for i in range(n):\n        lst.append(i + 1)\n    for i in range(2, max(divisors) + 1):\n        lst.append(i)\n    x = 0\n    y = 0\n    for i in range(1, max(lst) + 1):\n        if x == 0:\n            x = i\n            continue\n        if y == 0:\n            y = i\n            continue\n        if i in divisors and i in divisors and lst.count(x) == 2 and lst.count(y) == 2:\n            break\n        if lst.count(x) == 2:\n            x = i\n        if lst.count(y) == 2:\n            y = i\n    return str(x) + \" \" + str(y)\n"
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Finds two positive integer numbers $x$ and $y$ such that $x$ and $y$ are divisors of each other and their list of divisors is a permutation of the given list of integers.\n    :param stdin: the input\n    :return: the string containing two integers separated by a single space\n    \"\"\"\n    list_of_divisors = stdin.split()\n    n = int(list_of_divisors[0])\n    list_of_divisors = list_of_divisors[1:]\n    len_list = len(list_of_divisors)\n    for i in range(n):\n        list_of_divisors.append(list_of_divisors[i])\n    #print(list_of_divisors)\n    for i in range(len_list):\n        list_of_divisors[i] = int(list_of_divisors[i])\n    #print(list_of_divisors)\n    x = 1\n    y = 1\n    #for i in range(len_list):\n    while list_of_divisors[0]!= 1:\n        #print(x,y)\n        x *= list_of_divisors[0]\n        y *= list_of_divisors[len_list - 1]\n        list_of_divisors.pop(0)\n        list_of_divisors.pop(len_list - 1)\n        len_list -= 2\n        if len_list == 0:\n            break\n    return str(x) + \" \" + str(y)\n"
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split('\\n')\n    n = int(input[0])\n    divisors = [int(num) for num in input[1].split(' ') if num!= '']\n    divisors.sort()\n    # print(divisors)\n    x = 1\n    y = 1\n    j = 0\n    for i in range(n):\n        if divisors[i] <= x:\n            j += 1\n        if divisors[i] <= y:\n            j += 1\n        if divisors[i] < x:\n            x = divisors[i]\n        if divisors[i] < y:\n            y = divisors[i]\n    print(x, y)\n"
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    n, *A = map(int, stdin.split())\n    x = []\n    y = []\n    for i in range(1, n + 1):\n        if i % 2 == 1:\n            x.append(i)\n            if i > 1 and not i % A[i - 1]:\n                x.append(i // A[i - 1])\n        else:\n            y.append(i)\n            if i > 1 and not i % A[i - 1]:\n                y.append(i // A[i - 1])\n    return f\"{max(x)}\\n{max(y)}\""
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''10\n   ... 10 2 8 1 2 4 1 20 4 5\n   ... ''')\n    20 8\n    \"\"\"\n    n = int(stdin.split()[0])\n    lst = sorted(set(map(int, stdin.split()[1:])))\n    for i in range(n):\n        for j in range(i + 1, n):\n            if lst[i] % 2 == lst[j] % 2:\n                return f'{lst[i]} {lst[j]}'\n"
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return ''\n"
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Returns two positive integer numbers x and y such that x*y is the maximum possible product of x and y\n    '''\n    _, *data = map(int, stdin.split())\n    sorted_data = sorted(data, reverse=True)\n    x, y = 1, 1\n    i = 0\n    while i < len(sorted_data):\n        if sorted_data[i] * x <= y:\n            x *= sorted_data[i]\n        if sorted_data[i] * y <= x:\n            y *= sorted_data[i]\n        i += 1\n    return x, y\n"
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    #\n    return stdin\n"
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Compute and return the solution for the given input.\n\n    Parameters:\n        n: number of rows in the input matrix.\n        m: number of columns in the input matrix.\n        k: the value of k.\n\n    Returns:\n        str: the solution for the input.\n    \"\"\"\n    # Write your code here.\n    n, m, k = map(int, stdin.split())\n    matrix = []\n    for _ in range(n):\n        row = list(map(int, stdin.split()))\n        matrix.append(row)\n    max_sum = 0\n    for i in range(n):\n        row_sum = 0\n        index = 0\n        while row_sum < k and index < m:\n            row_sum += matrix[i][index]\n            if row_sum % k == 0:\n                if row_sum > max_sum:\n                    max_sum = row_sum\n            index += 1\n    print(max_sum)\n    return str(max_sum)\n"
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solves the problem\"\"\"\n    n, m, k = [int(i) for i in stdin.split(\"\\n\")[0].split()]\n    a = [int(i) for i in stdin.split(\"\\n\")[1:]]\n    a = [a[i * m: i * m + m] for i in range(n)]\n    a = [i for j in a for i in j]\n    a.sort()\n    best_sum = 0\n    for i in range(n):\n        a_i = a[i * m: i * m + m]\n        a_i.sort()\n        j = 0\n        while j < m // 2:\n            best_sum += a_i[j]\n            j += 1\n        if best_sum % k:\n            break\n    return str(best_sum)\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    import numpy as np\n    \n    n, m, k = map(int, stdin.split())\n    a = np.array(list(map(int, stdin.split())))\n    a = a.reshape(n, m)\n    a = a[:min(m, int(m/2)), :]\n    \n    max_sum = 0\n    for i in range(len(a)):\n        row_sum = 0\n        for j in range(len(a[i])):\n            row_sum += a[i, j]\n            if row_sum % k == 0 and row_sum > max_sum:\n                max_sum = row_sum\n    return max_sum\n"
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(s) for s in stdin.split()]\n    mat = [\n        [int(s) for s in stdin.split()[j * m : (j + 1) * m]] for j in range(n)\n    ]\n    max_sum = 0\n    for i in range(n):\n        a = mat[i]\n        b = []\n        for j in range(int(len(a) / 2)):\n            b.append(a[j])\n        c = [sum(b) % k]\n        for j in range(1, int(len(a) / 2)):\n            c.append((c[-1] + a[j]) % k)\n        max_sum = max(max_sum, sum(c))\n    return str(max_sum)\n\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    pass"
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return \"\"\n"
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \" \".join([\"L\"] * (int(stdin) - 1) + [\"R\"])\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\"\"\"\n\nfrom collections import Counter\n\n\ndef"
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\"\"\"\n\nn = int(input())\narr = list(map(int, input().split()))\nl, r = [], []\nmx = 0\n\nfor i in range(n):\n    if i == 0:\n        l.append(arr[i])\n        mx = max(mx, len(l))\n    elif i == n - 1:\n        r.append(arr[i])\n        mx = max(mx, len(r))\n    else:\n        if arr[i] > l[-1] and arr[i] > r[-1]:\n            l.append(arr[i])\n            mx = max(mx, len(l))\n        else:\n            r.append(arr[i])\n            mx = max(mx, len(r))\n\nprint(mx)\nprint(*['L' if x == l[-1] else 'R' for x in l + r])"
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\""
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\ndef"
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return str()"
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n"
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n  a = [int(x) for x in stdin.split('\\n')[1].split()]\n  n = len(a)\n  min_val = 99999999\n  if len(set(a)) == n:\n    return 0\n  for i in range(n):\n    max_val = max(a)\n    if a[i] < 0:\n      continue\n    for j in range(n):\n      if i == j:\n        continue\n      min_val = min(a[i] + a[j], min_val)\n  if min_val == 99999999:\n    return -1\n  return min_val\n"
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    \n    max_abs_diff = -1\n    \n    for D in range(101):\n        min_ = min(a)\n        max_ = max(a)\n        \n        for i in range(n):\n            if (a[i] - min_) % D!= 0:\n                break\n            if (max_ - a[i]) % D!= 0:\n                break\n        \n        else:\n            return D\n        \n    return -1\n"
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    d = 1\n    if all([i % 2 == 0 for i in a]):\n        while all([i + d == i - d for i in a]):\n            d += 1\n    elif all([i % 2!= 0 for i in a]):\n        while all([i + d == i - d for i in a]):\n            d += 1\n    else:\n        while all([i + d == i - d for i in a]):\n            d += 1\n    if d == 1:\n        print(-1)\n    else:\n        print(d)\n"
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    - make a dict for each element in a\n    - for each element in a, see if there is a value in a that it is the same as, if there is, use that value\n    - otherwise, add or subtract the value from a\n    - check to see if all elements in a are equal\n    - if so, return the value\n    - if not, return -1\n    \"\"\"\n    n = int(stdin.readline())\n    a = [int(i) for i in stdin.readline().split()]\n    a_dict = {}\n    for element in a:\n        if element not in a_dict:\n            a_dict[element] = 1\n        else:\n            a_dict[element] += 1\n\n    a_dict = {k: v for k, v in a_dict.items() if v > 1}\n    if len(a_dict) == 0:\n        return \"0\"\n    elif len(a_dict) == n:\n        return \"-\"\n    else:\n        return max([(v, k) for k, v in a_dict.items()])[1]\n"
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    d = 0\n    if len(set(a)) == 1:\n        return d\n    else:\n        for i in range(n):\n            for j in range(n):\n                if i!= j:\n                    d += 1\n                    if d > 2:\n                        return -1\n                    if d == 1:\n                        a[i] += a[j]\n                    elif d == 2:\n                        a[i] -= a[j]\n                    if sum(a) == 0:\n                        return d\n    \nsolution(input())\n"
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    d = []\n    for i in range(n):\n        if a[i] == max(a):\n            if a[i] >= a[i-1]:\n                d.append(1)\n            else:\n                d.append(a[i] - a[i-1])\n        elif a[i] == min(a):\n            if a[i] <= a[i-1]:\n                d.append(-1)\n            else:\n                d.append(a[i-1] - a[i])\n        else:\n            d.append(0)\n    if min(d) < 0:\n        return \"-1\"\n    else:\n        return str(min(d))\n\n\ndef"
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = list(map(int, stdin.split()))\n    d = [0] * n\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                continue\n            d[i] = max(d[i], a[j] - a[i], a[i] - a[j])\n    print(d)\n\n    return \"\"\n\n\ndef"
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    A = list(map(int, stdin.readline().split()))\n\n    def possible(x):\n        res = [0] * n\n        for i in range(n):\n            if A[i] + x <= 0:\n                res[i] = -1\n            else:\n                res[i] = A[i] + x\n        return res\n\n    A.sort()\n\n    l = 0\n    r = 10 ** 9 + 1\n    while l < r:\n        m = l + (r - l) // 2\n        if possible(m) == [0] * n:\n            r = m\n        else:\n            l = m + 1\n    print(l)\n    return ''\n"
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n"
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def check(a, b, c, d):\n        if min(a, b) < 0 or max(a, b) > 1000000:\n            return False\n        if min(c, d) < 0 or max(c, d) > 1000000:\n            return False\n        if max(a, c) < min(b, d) or min(a, c) > max(b, d):\n            return False\n        return True\n    a, b, c, d = map(int, stdin.split())\n    return 'YES' if check(a, b, c, d) else 'NO'\n"
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = [int(x) for x in stdin.split()]\n    x3, y3, x4, y4 = [int(x) for x in stdin.split()]\n    x5, y5, x6, y6 = [int(x) for x in stdin.split()]\n\n    return \"YES\" if ((y3 < y2) and (x3 < x2)) or ((y5 < y4) and (x5 < x4)) else \"NO\"\n"
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = map(int, stdin.split())\n    x3, y3, x4, y4 = map(int, stdin.split())\n    x5, y5, x6, y6 = map(int, stdin.split())\n\n    return \"YES\" if x1 <= x5 and x4 >= x6 and y1 <= y5 and y4 >= y6 else \"NO\"\n"
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"1 2 4 5\\n0 0 4 6\\n0 0 7 4\\n3 1 7 6\")\n    'YES'\n    >>> solution(\"0 0 5 10\\n0 0 9 5\\n2 1 10 5\\n2 2 10 5\")\n    'YES'\n    >>> solution(\"0 0 10 10\\n0 0 9 5\\n2 1 10 5\\n2 2 10 5\")\n    'YES'\n    \"\"\"\n    white_sheet_ll = [int(x) for x in stdin.split(\"\\n\")[0].split(\" \")]\n    white_sheet_ur = [int(x) for x in stdin.split(\"\\n\")[1].split(\" \")]\n    black_sheet_ll = [int(x) for x in stdin.split(\"\\n\")[2].split(\" \")]\n    black_sheet_ur = [int(x) for x in stdin.split(\"\\n\")[3].split(\" \")]\n    width = white_sheet_ur[0] - white_sheet_ll[0]\n    height = white_sheet_ur[1] - white_sheet_ll[1]\n    side = black_sheet_ur[0] - black_sheet_ll[0]\n    if width * height < side * side:\n        return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('2 2 4 4\\n1 1 3 5\\n3 1 5 5')\n    'NO'\n    >>> solution('3 3 7 5\\n0 0 4 6\\n0 0 7 4')\n    'YES'\n    >>> solution('5 2 10 5\\n3 1 7 6\\n8 1 11 7')\n    'YES'\n    >>> solution('0 0 1000000 1000000\\n0 0 499999 1000000\\n500000 0 1000000 1000000')\n    'YES'\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    [x1, y1, x2, y2] = [int(x) for x in stdin.split(' ')]\n    [x3, y3, x4, y4] = [int(x) for x in stdin.split(' ')]\n    [x5, y5, x6, y6] = [int(x) for x in stdin.split(' ')]\n    if x2 < x3 or x4 < x1 or y2 < y3 or y4 < y1:\n        return \"NO\"\n    if x2 < x5 or x6 < x1 or y2 < y5 or y6 < y1:\n        return \"NO\"\n    if x2 < x7 or x8 < x1 or y2 < y7 or y8 < y1:\n        return \"NO\"\n    if x2 < x9 or x10 < x1 or y2 < y9 or y10 < y1:\n        return \"NO\"\n    return \"YES\"\n\nprint(solution(stdin=input()))\n"
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    import numpy as np\n\n    nums = np.array(list(map(float, stdin.split(' '))))\n    tl = nums[:2]\n    br = nums[2:]\n    if br[0] <= tl[0] or br[1] <= tl[1]:\n        return \"YES\"\n    elif tl[0] <= br[0] or tl[1] <= br[1]:\n        return \"NO\"\n\n    \n    return \"YES\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    b1, b2 = map(int, stdin.split())\n    b3, b4 = map(int, stdin.split())\n    w1, w2 = map(int, stdin.split())\n    w3, w4 = map(int, stdin.split())\n    return \"YES\" if w1 > b3 or w2 < b1 or w1 > b4 or w2 < b3 or w3 > b1 or w4 < b2 or w3 > b4 or w4 < b1 else \"NO\"\n"
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = [int(s) for s in stdin.split(' ')]\n    x3, y3, x4, y4 = [int(s) for s in stdin.split(' ')]\n    x5, y5, x6, y6 = [int(s) for s in stdin.split(' ')]\n    return 'YES' if x1 <= x2 and x3 <= x4 and x5 <= x6 and y1 <= y2 and y3 <= y4 and y5 <= y6 else 'NO'\n    \n    \"\"\"\n"
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = map(int, stdin.split())\n    x3, y3, x4, y4 = map(int, stdin.split())\n    x5, y5, x6, y6 = map(int, stdin.split())\n    x = (x1, x2, x3, x4, x5, x6)\n    y = (y1, y2, y3, y4, y5, y6)\n\n    x_min, x_max = min(x), max(x)\n    y_min, y_max = min(y), max(y)\n    if x_min < x_max and y_min < y_max:\n        print('YES')\n    else:\n        print('NO')\n    return ''"
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    return '0'"
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    return\n"
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return 0\n"
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin) + 1)"
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    count = 0\n    for i in range(1, 11):\n        # add 1 to x and check if there is a trailing zero\n        if (x + 1) % (10 ** i) == 0:\n            count += 10 ** (i - 1)\n    return count\n"
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x = stdin\n    count = 0\n    while len(x) > 1:\n        if len(x) % 2!= 0:\n            x = x[1:]\n            count += 1\n        else:\n            x = x[0::2]\n            count += 1\n    return count\n"
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n\n    pass\n"
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    def f(x):\n        x += 1\n        while x % 10 == 0:\n            x //= 10\n        return x\n\n    res = set()\n    for i in range(1, n + 1):\n        while i!= 0:\n            i = f(i)\n            res.add(i)\n    return len(res)"
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution to the given problem\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    return ''\n"
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    stdin = stdin[1:]\n    stdin = stdin.split()\n    stdin = list(map(int, stdin))\n    stdin = list(zip(stdin, range(n)))\n    stdin = list(filter(lambda x: x[0] > 0, stdin))\n    stdin.sort()\n    stdin = list(map(lambda x: x[1], stdin))\n    res = []\n    prev = stdin[0]\n    prev_idx = 0\n    i = 1\n    while i < n:\n        if stdin[i] > prev + 1:\n            res.append(prev + 1)\n            i += 1\n            prev = stdin[i]\n            prev_idx = i\n            continue\n        if stdin[i] == prev:\n            if prev_idx!= i:\n                res.append(prev)\n                prev_idx = i\n            i += 1\n            continue\n        if stdin[i] == prev + 1:\n            prev_idx = i\n            i += 1\n            continue\n    res.append(prev + 1)\n    res.append(n)\n    res = list(map(str, res))\n    return''.join(res)\n"
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, *f = stdin.split('\\n')\n    n = int(n)\n    f = list(map(int, f))\n    c = Counter(f)\n    ans = []\n    for i in range(n):\n        if c[i] == 0:\n            ans.append(i)\n        elif c[i] == 1:\n            ans.append(n)\n        else:\n            ans.append(n - 1)\n    return '\\n'.join(list(map(str, ans)))\n"
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, *f = [*map(int, stdin.split())]\n\n    def f_to_idx(f_idx: int) -> tuple[int, int]:\n        return f_idx - f_idx % n, f_idx // n\n\n    def idx_to_f(f_idx: int) -> tuple[int, int]:\n        return f_idx // n, f_idx % n\n\n    f_to_idx_map = {f_idx: idx_to_f(idx) for idx, f_idx in enumerate(f)}\n    sorted_idx = sorted(f_to_idx_map.keys(), key=lambda x: f_to_idx_map[x])\n\n    result = [f_to_idx_map[idx][0] for idx in sorted_idx]\n    print(' '.join(map(str, result)))\n\n\ndef"
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Input - reading input\n    num_friends = int(stdin)\n\n    # Input - reading input\n    input_list = stdin.split('\\n')\n\n    # Variable initialization\n    list_dict = {}\n\n    # Find list of values in input\n    for i in range(num_friends):\n        list_dict[i + 1] = [int(val) for val in input_list[i].split(' ')]\n\n    # Output\n    print(*list_dict.values())\n\n    return ''\n"
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \n    n = int(stdin.split('\\n')[0])\n    arr = [int(i) for i in stdin.split('\\n')[1].split()]\n    \n    arr.sort()\n    \n    if arr[0] == 0:\n        return str(arr[1]) +'' + str(n - arr[0] + 1) +'' + str(n - arr[-1] + 1)\n    else:\n        return str(n - arr[0] + 1) +'' + str(n - arr[-1] + 1)\n"
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def find_all_possibilities(n, k, indices):\n        def make_input(left, right, l):\n            # left: list of indices from l which are known (not 0)\n            # right: list of indices from l which are known (not n)\n            # l: list of indices in input\n            input_str =''.join(list(map(lambda x: str(x), l)))\n            for i in range(left, right):\n                if i not in left:\n                    input_str +='{} '.format(i)\n                else:\n                    input_str +='{} '.format(i + 1)\n            input_str = input_str.strip()\n            return input_str\n\n        possibilities = []\n\n        if len(left) > 1:\n            left.sort()\n            right.sort()\n            possibilities.append((left, right))\n            if len(left) == k:\n                return possibilities\n\n        if len(right) > 1:\n            left.sort(reverse=True)\n            right.sort(reverse=True)\n            possibilities.append((left, right))\n            if len(right) == k:\n                return possibilities\n\n        for i in range(len(indices)):\n            left = copy.copy(indices)\n            right = copy.copy(indices)\n            left.remove(indices[i])\n            right.remove(indices[i])\n            l = copy.copy(indices)\n            l.remove(indices[i])\n            if len(left) > 0:\n                left.sort()\n                right.sort()\n                possibilities.append((left, right))\n                if len(left) == k:\n                    return possibilities\n            if len(right) > 0:\n                left.sort(reverse=True)\n                right.sort(reverse=True)\n                possibilities.append((left, right))\n                if len(right) == k:\n                    return possibilities\n            if len(l) > 0:\n                l.sort()\n                possibilities.append((l, indices))\n                if len(l) == k:\n                    return possibilities\n\n        return possibilities\n\n    def make_input_from_indices(l):\n        input_str =''.join(list(map(lambda x: str(x), l)))\n        return input_str\n\n    def find_all_possible_values(n, k, indices, left, right):\n        input_str = make_input(left, right, indices)\n        s = solve(input_str)\n        print(s)\n        if s == '':\n            return []\n        s = s.split(' ')\n        if len(s)!= k:\n            return []\n\n        s = list(map(int, s))\n        if len(s)!= len(indices):\n            return []\n\n        return s\n\n    def all_equal_to(n, k, indices, left, right, value):\n        s = find_all_possible_values(n, k, indices, left, right)\n        return len(s) == k and len(s) == len(set(s)) and sum(s) == value\n\n    def all_not_equal_to(n, k, indices, left, right, value):\n        s = find_all_possible_values(n, k, indices, left, right)\n        return len(s) == k and len(s) == len(set(s)) and sum(s)!= value\n\n    def find_correct_value(n, k, indices, left, right):\n        if len(left) == 0:\n            return 0\n        if len(right) == 0:\n            return n\n\n        if all_equal_to(n, k, indices, left, right, 0):\n            return 0\n        if all_equal_to(n, k, indices, left, right, n):\n            return n\n        if all_not_equal_to(n, k, indices, left, right, n):\n            return n\n\n        possibilities = find_all_possibilities(n, k, indices)\n        best_left = []\n        best_right = []\n        best_sum = 0\n\n        for l, r in possibilities:\n            if all_equal_to(n, k, indices, l, r, 0):\n                best_left = l\n                best_right = r\n                best_sum = 0\n                break\n            if all_equal_to(n, k, indices, l, r, n):\n                best_left = l\n                best_right = r\n                best_sum = n\n                break\n            if all_not_equal_to(n, k, indices, l, r, n):\n                best_left = l\n                best_right = r\n                best_sum = n\n                break\n\n        for l, r in possibilities:\n            if len(l) == 0 or len(r) == 0:\n                continue\n            left = []\n            right = []\n            for i in indices:\n                if i in l:\n                    left.append(i)\n                else:\n                    right.append(i)\n\n            if all_equal_to(n, k, left, right, 0):\n                best_left = left\n                best_right = right\n                best_sum = 0\n                break\n            if all_equal_to(n, k, left, right, n):\n                best_left = left\n                best_right = right\n                best_sum = n\n                break\n            if all_not_equal_to(n, k, left, right, n):\n                best_left = left\n                best_right = right\n                best_sum = n\n                break\n\n        if best_sum == 0:\n            return best_left, best_right\n        return [best_sum], [best_left, best_right]\n\n    def find_correct_value_fast(n, k, indices, left, right):\n        if len(left) == 0:\n            return 0\n        if len(right) == 0:\n            return n\n\n        best_left = []\n        best"
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    f = [int(x) for x in stdin.split()]\n\n    gift = []\n    for i in range(n):\n        if f[i] == 0:\n            gift.append(i + 1)\n    \n    f.sort()\n\n    result = []\n    count = 0\n    for i in range(n):\n        if f[i]!= 0:\n            result.append(gift[count])\n            count += 1\n        else:\n            result.append(f[i])\n    \n    return \" \".join([str(x) for x in result])"
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''\n"
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nn, k = map(int, stdin.readline().split())\na = list(map(int, stdin.readline().split()))\na = sorted(a)\n\nfor i in range(1, k):\n    if sum(a[i:] == a[i-1]*i)!= k:\n        break"
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, k = [int(i) for i in stdin.split(' ')]\n    c = [int(i) for i in stdin.split('\\n')[1:]]\n    l = []\n    for i in range(k):\n        l.append(0)\n    for i in c:\n        for j in range(1, k + 1):\n            if l[j - 1] == 0:\n                l[j - 1] = j\n                break\n    for i in range(k):\n        if l[i] == 0:\n            return \"NO\"\n    return \"YES\\n\" +''.join(map(str, l))\n\n\ndef"
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4 2\n   ... 1 2 2 3\n   ... ''')\n    'YES\\n1 1 2 2'\n    >>> solution('''5 2\n   ... 3 2 1 2 3\n   ... ''')\n    'YES\\n2 1 1 2 1'\n    >>> solution('''5 2\n   ... 3 2 1 2 3\n   ... ''')\n    'NO'\n    \"\"\"\n    n, k = [int(x) for x in stdin.split('\\n')[0].split()]\n    a = [int(x) for x in stdin.split('\\n')[1].split()]\n    if not len(a) == n:\n        return 'NO'\n    a = sorted(a)\n    l = 1\n    for i in range(1, k + 1):\n        if i not in a:\n            return 'NO'\n        l = max(l, a.count(i))\n    if l < k:\n        return 'NO'\n    return 'YES\\n' +''.join([str(i) for i in a])\n"
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"YES\"\n"
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    a = [int(x) for x in stdin.split(' ')]\n    colors = [0] * k\n    ans = 'NO'\n    if k <= n:\n        ans = 'YES'\n    for num in a:\n        colors[num % k] += 1\n        if colors[num % k] > 1:\n            ans = 'NO'\n            break\n    if ans == 'NO':\n        return ans\n    colors = [str(x) for x in colors]\n    return ans +'' +''.join(colors)\n"
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, k = map(int, stdin.split())\n    nums = list(map(int, stdin.split()))\n    ch = [0] * k\n    ch[nums[0]] += 1\n    for i in range(1, n):\n        if nums[i]!= nums[i - 1]:\n            ch[nums[i]] += 1\n\n    if max(ch) > k or k == 1:\n        return \"NO\"\n    else:\n        return \"YES\"\n\"\"\"\n"
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = list(map(int, stdin.split()))\n    return n - y - 1\n"
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, stdin.split())\n    number = list(stdin[-n:])\n    number[0] = \"1\" if number[0] == \"0\" else \"0\"\n    for i in range(1, n):\n        number[i] = \"1\" if number[i] == \"0\" else \"0\"\n    number = int(\"\".join(number), 2)\n    number %= 10 ** x\n    number %= 10 ** y\n    return str(number)\n"
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n, x, y = map(int, stdin.split())\n    nums = [int(i) for i in stdin]\n    print(nums)\n    return stdin"
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Compute the solution\"\"\"\n    # Create a list of the string of digits\n    digits_str = [int(i) for i in stdin]\n    digits_str_inv = digits_str[::-1]\n    digits_str_1 = digits_str.copy()\n    digits_str_1[1] = 1 - digits_str[1]\n    digits_str_inv_1 = digits_str_inv.copy()\n    digits_str_inv_1[1] = 1 - digits_str_inv[1]\n    # Compute the minimum number of operations\n    min_ops = max(len(digits_str) - digits_str.index(1),\n                  digits_str_inv.index(1),\n                  digits_str_inv_1.index(1))\n    return min_ops\n    pass\n"
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, stdin.split())\n    x_pow_y = 10**y\n    n_pow_10_x_pow_y = 10**x_pow_y\n    n_pow_x = 10**x\n    num = list(map(int, stdin[0:n]))\n    res = 0\n    num_mod_10_pow_x_pow_y = num[0] % n_pow_10_x_pow_y\n    while num_mod_10_pow_x_pow_y!= 0:\n        res += 1\n        num_mod_10_pow_x_pow_y = (num_mod_10_pow_x_pow_y * 10) % n_pow_10_x_pow_y\n    return res\n"
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = [int(x) for x in stdin.split()]\n    number = int(stdin[0])\n    number = number + number * pow(10, x)\n    number %= pow(10, x)\n    number = number * pow(10, y)\n    number %= pow(10, y)\n    return str(number)\n"
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, stdin.split())\n    c = Counter(stdin)\n    return len(stdin) - (c['1'] - 1)\n\"\"\"\ndef"
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s, x, y = map(int, stdin.split())\n    number = int(s)\n    x = x % len(str(number))\n    y = y % len(str(number))\n    while x > 0:\n        number = (number * 10) % (10 ** x)\n        x -= 1\n    while y > 0:\n        number = (number // 10) % 10\n        y -= 1\n    return number\n"
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \n    l = stdin.split()\n    x, y, n = int(l[1]), int(l[2]), int(l[0])\n    \n    a = 0\n    for i in range(n):\n        if a == y:\n            return i\n        a = a + 1 if (a + 1) % x == 0 else a\n    return n\n"
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if is_palindrome(stdin.splitlines()[1:]) else \"NO\"\n\n\ndef"
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"O(n^3) solution\"\"\"\n    t = int(stdin)\n    for _ in range(t):\n        n = int(stdin)\n        a = [int(x) for x in stdin.split()]\n        for i in range(n - 2):\n            for j in range(i + 1, n - 1):\n                for k in range(j + 1, n):\n                    if a[i] == a[k] and a[k] == a[j]:\n                        if j - i >= 3:\n                            print(\"YES\")\n                            break\n        else:\n            print(\"NO\")\n    return ''\n"
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Determine whether an array is a palindrome.\"\"\"\n    t = int(stdin)\n    result = []\n    for _ in range(t):\n        n = int(stdin)\n        a = [int(c) for c in stdin.split()]\n        if len(a) < 3:\n            result.append(\"NO\")\n        else:\n            for i in range(len(a) - 1):\n                if a[i] == a[i + 1]:\n                    for j in range(i + 1, len(a) - 1):\n                        if a[j] == a[j + 1]:\n                            continue\n                        else:\n                            break\n                    if j == len(a) - 2:\n                        result.append(\"YES\")\n                    break\n            else:\n                result.append(\"NO\")\n    return '\\n'.join(result)\n"
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solve exercise.\"\"\"\n    pass\n"
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # Please take input from STDIN\n    t = int(stdin)\n    # Your code here\n    return \"\"\n"
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solve exercise.\"\"\"\n    pass  # TODO: edit here\n"
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n   ...\n"
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution for CCJP 2021 Winter Semester C\n    :param stdin:\n    :return:\n    \"\"\"\n    n = int(stdin[0])\n    a = stdin[1]\n    f = [int(x) for x in stdin[2:]]\n    max = 0\n    for i in range(n - 2):\n        if f[i] > f[i + 1] and f[i] > f[i + 2]:\n            sub_a = a[i:i + 3]\n            sub_f = f[i:i + 3]\n            tmp = 0\n            for j in range(len(sub_a)):\n                tmp += int(sub_a[j]) * f[j]\n            if tmp > max:\n                max = tmp\n    return str(max)\n\n\ndef"
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the maximum number after applying the function.\"\"\"\n\n    # Get number of digits.\n    n = int(stdin[0])\n    a = list(map(int, stdin[1].split()))\n\n    # Get function.\n    f = list(map(int, stdin[2].split()))\n\n    # Initialise maximum.\n    maximum = 0\n\n    # Iterate through all possible segments of length n.\n    for start in range(n - 1):\n        # Maximum possible with this segment.\n        current_maximum = 0\n\n        # Iterate through all possible mappings.\n        for x in range(9):\n            # Replace this mapping with function.\n            a[start] = x + 1\n            # Maximum possible with this mapping.\n            current_maximum = max(\n                current_maximum,\n                sum(a[start : start + n]) * f[x],\n            )\n\n        # Keep track of maximum.\n        maximum = max(maximum, current_maximum)\n\n    return str(maximum)\n"
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = stdin.readline()[:-1]\n    f = [int(x) for x in stdin.readline().split()]\n    f = [x - 1 for x in f]\n    a = [int(x) for x in a]\n    ans = ''\n    for i in range(n):\n        if i in f:\n            ans += str(f[f.index(i)])\n        else:\n            ans += str(a[i])\n    return ans"
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = stdin.split('\\n')[1]\n    f = [int(i) for i in stdin.split('\\n')[2].split(' ')]\n    n = len(a)\n    a = list(a)\n    res = ''\n    for i in range(n):\n        res += str(f[int(a[i])-1])\n    return str(int(res))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    import math\n    n = int(stdin.split(\"\\n\")[0])\n    a = stdin.split(\"\\n\")[1]\n    m = [int(stdin.split(\"\\n\")[2].split()[i]) for i in range(9)]\n    digit = 1\n    s = 0\n    for i in range(len(a)):\n        s += int(a[i]) * m[i] * pow(10, len(a) - 1 - i)\n    for i in range(1, n):\n        digit *= 10\n    return s + digit - 1\n\nprint(solution(stdin))"
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('4\\n1337\\n1 2 5 4 6 6 3 1 9')\n    1557\n    >>> solution('5\\n11111\\n9 8 7 6 5 4 3 2 1')\n    99999\n    \"\"\"\n    n = int(stdin.split('\\n')[0])\n    a = list(stdin.split('\\n')[1])\n    f = list(map(int, stdin.split('\\n')[2].split(' ')))\n    lst = []\n    for i in range(n):\n        lst.append(f[a[i] - 1])\n    lst = lst[::-1]\n    ans = int(''.join([str(x) for x in lst]))\n    return str(ans)\n"
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    n, s = stdin.split('\\n')\n    s = s.split()\n    res = 0\n    for i in range(len(s)):\n        for j in range(len(s[i])):\n            if s[i][j]!= '9':\n                s[i] = int(s[i])\n                res += s[i] * 10 ** (len(s) - i - 1)\n                break\n        else:\n            res += s[i] * 10 ** (len(s) - i - 1)\n    return str(res)"
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = stdin.readline()\n    f = list(map(int, stdin.readline().split()))\n    s = ''\n    i = 0\n    while i < n:\n        # print(s)\n        if len(s) == 0:\n            if a[i] in f:\n                s = a[i]\n            i += 1\n        else:\n            if f[ord(s[-1])-ord('1')] == f[ord(a[i])-ord('1')]:\n                s += a[i]\n                i += 1\n            else:\n                s = a[i]\n                i += 1\n    return s\n"
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Find the maximum possible number you can obtain applying the described operation\n    no more than once.\n    :param stdin: Input string\n    :return: Maximum possible number you can get\n    \"\"\"\n    number = stdin\n    for i in range(9):\n        number = number.replace(str(i + 1), str(chr(i + 97)))\n\n    return int(number)\n"
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the maximum possible number after applying one operation.\n\n    Args:\n        stdin (str): Input from standard input.\n\n    Returns:\n        str: Maximum possible number.\n    \"\"\"\n    n = int(stdin.split('\\n')[0])\n    numbers = [int(i) for i in stdin.split('\\n')[1].split(' ') if i!='']\n    f = [int(i) for i in stdin.split('\\n')[2].split(' ') if i!='']\n    max_ = 0\n    for i in range(10):\n        numbers = [j if j == i else f[j - 1] for j in numbers]\n        numbers = [j for j in numbers if j!= f[j - 1]]\n        max_ = max(max_, int(''.join([str(k) for k in numbers])))\n    return str(max_)\n"
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    number_of_test_cases = int(stdin.readline())\n    for _ in range(number_of_test_cases):\n        a, b, c = map(int, stdin.readline().split())\n        res = min(b // a, c // b, a // c)\n        print(res)\n        print(a * res, b * res, c * res)\n    return \"You're an absolute monster\"\n"
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    return t,\n"
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # create the Solution class object\n    obj = Solution()\n    # fetch the test case\n    t = int(stdin.readline().strip())\n    # process the test case as needed\n    for _ in range(t):\n        # read the test case inputs\n        a, b, c = map(int, stdin.readline().strip().split(' '))\n        # fetch and process the results\n        res = obj.process(a, b, c)\n        # print the results\n        print(res)\n"
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    num_tests = int(stdin.readline())\n    for _ in range(num_tests):\n        A, B, C = map(int, stdin.readline().split())\n        \n        # divisble by A\n        rem_A = 1\n        while rem_A < B:\n            rem_A *= 10\n        \n        # divisible by B\n        rem_B = 1\n        while rem_B < C:\n            rem_B *= 10\n        \n        # divisible by A and B\n        # A * x + rem_A = B\n        # B * x + rem_B = A * x + rem_A\n        x = (B - rem_A) // A\n        rem_A = B - A * x\n        rem_B = A * x + rem_A\n        \n        # divisible by B and C\n        # B * x + rem_B = C\n        # C * x + rem_C = B * x + rem_B\n        x = (C - rem_B) // B\n        rem_B = C - B * x\n        rem_C = B * x + rem_B\n        \n        # divisible by A and C\n        # C * x + rem_C = A\n        # A * x + rem_A = C * x + rem_C\n        x = (A - rem_C) // C\n        rem_C = A - C * x\n        rem_A = C * x + rem_C\n        \n        print(min(rem_A, rem_B, rem_C))\n        print(rem_A, rem_B, rem_C)\n    \n    return ''\n"
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    # return \"\"\n    t = int(stdin.readline())\n    for i in range(t):\n        a, b, c = [int(x) for x in stdin.readline().split(' ')]\n        mini = min(a, b, c)\n        maxi = max(a, b, c)\n        while maxi % mini!= 0:\n            if maxi % mini == 0:\n                break\n            mini -= 1\n        if maxi % mini == 0:\n            print(mini)\n            print(maxi, maxi // mini)\n            if a!= maxi:\n                print(a, maxi, a * maxi // mini, sep='\\n')\n            if b!= maxi:\n                print(b, maxi, b * maxi // mini, sep='\\n')\n            if c!= maxi:\n                print(c, maxi, c * maxi // mini, sep='\\n')\n        else:\n            print('-1')\n\nsolution(input)"
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution for Advent of Code 2020, day 23.\n\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    cases = int(stdin.readline())\n    for _ in range(cases):\n        a, b, c = map(int, stdin.readline().split())\n        d = min(a, b, c)\n        a, b, c = a - d, b - d, c - d\n        while a > 0 and b > 0 and c > 0:\n            print(d)\n            a, b, c = a - d, b - d, c - d\n            if a <= b <= c:\n                break\n            d -= 1\n        else:\n            print(0)\n            print(d, a, b, c)\n    return ''\n"
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return \"\""
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution to the \"Find the minimum operation\" codewars question.\n\n    This solution is an improvement over the other solution, as it avoids having to\n    add to the end of the array multiple times.\n    \"\"\"\n    triples = []\n    for a, b, c in stdin.splitlines():\n        if (b - a) % 2!= 0:\n            continue\n        if (c - b) % 2!= 0:\n            continue\n        triples.append((a, b, c))\n    \n    if triples:\n        for a, b, c in triples:\n            min_divisor = int((b - a) / 2)\n            max_divisor = int((c - b) / 2)\n            if b % a == 0:\n                b = a\n            else:\n                b += min_divisor\n            if c % b == 0:\n                c = b\n            else:\n                c += max_divisor\n            print(min_divisor + max_divisor)\n            print(a, b, c)\n    else:\n        print('Impossible')\n"
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution for the first task on day 02\n    \n    >>> solution('8\\n1 2 3\\n123 321 456\\n5 10 15\\n15 18 21\\n100 100 101\\n1 22 29\\n3 19 38\\n6 30 46\\n')\n    '1\\n1 1 3\\n102\\n114 228 456\\n4\\n4 8 16\\n6\\n18 18 18\\n1\\n100 100 100\\n7\\n1 22 22\\n2\\n1 19 38\\n8\\n6 24 48\\n'\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solve exercise\"\"\"\n    stdin = list(map(int, stdin.split(\"\\n\")[0].split()))\n    x = stdin[0]\n    y = [stdin[i] - min(stdin) for i in range(1, x)]\n    print(max(y) - min(y))\n    return ''\n"
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def instability(inp: List[int]) -> int:\n        return max(inp) - min(inp)\n\n    n = int(stdin.readline().strip())\n    inp = list(map(int, stdin.readline().strip().split()))\n    return str(instability(inp))"
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    my_input = [int(s) for s in stdin.split(\"\\n\")[0].split()]\n    n = my_input[0]\n    array = my_input[1:]\n    array = sorted(array)\n\n    if n == 2:\n        return 0\n    elif n == 1:\n        return array[0] - array[1]\n\n    # remove an element from the middle\n    middle_element = array[int(len(array)/2)]\n    new_array = [element for element in array if element!= middle_element]\n\n    return max(new_array) - min(new_array)\n"
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = list(map(int, stdin.split()))\n    return str(max(a) - min(a))\n\n\ndef"
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    :param stdin:\n    :return:\n    \"\"\"\n    n = int(stdin)\n    a = list(map(int, stdin.split(\"\\n\")[1:]))\n    print(max(a) - min(a))\n\n\ndef"
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4\n   ... 1 3 3 7\n   ... ''')\n    '2'\n    >>> solution('''2\n   ... 1 100000\n   ... ''')\n    '0'\n    \"\"\"\n    a, *_ = map(int, stdin.split())\n    s, t = min(a), max(a)\n    i = a.index(t)\n    ans = max(a[:i] + a[i + 1:]) - min(a[:i] + a[i + 1:])\n    return str(ans)\n"
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split(' ')))\n    # print(n)\n    # print(a)\n    mini = 10 ** 6\n    for i in range(0, len(a)):\n        for j in range(i + 1, len(a)):\n            if a[i] > a[j]:\n                mini = min(mini, a[i] - a[j])\n    print(mini)\n    return ''"
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(i) for i in stdin.split(' ')]\n    days = [stdin.split(' ')[i:i + 3] for i in range(0, n * 3, 3)]\n    days = sorted([i for i in days if i!= ['1', '2', '0']], key=lambda i: i[0])\n    exam_days = [i[0] for i in days]\n    special_days = [i[1] for i in days]\n    special_days = sorted(special_days, key=lambda i: int(i))\n    l = [0 for i in range(n)]\n    l[special_days[0] - 1] = m + 1\n    for i in range(1, m + 1):\n        l[exam_days[i] - 1] = i\n    if 0 in l:\n        return -1\n    else:\n        return \" \".join([str(i) for i in l])\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4 2\\n1 3 1\\n1 5 1\")\n    '2 2 2 1 1 0 4 3 4 4'\n    >>> solution(\"3 2\\n1 3 1\\n1 2 1\")\n    '-1'\n    \"\"\"\n    days, exams = [int(x) for x in stdin.split()]\n    passed, days_of_exam = 0, [0 for _ in range(exams)]\n    for day_passed, days_needed, exam_passed in [\n        [int(x) for x in stdin.split()] for _ in range(exams)\n    ]:\n        if passed == exams:\n            break\n        passed_day = day_passed - 1\n        if (days_of_exam[passed_day] > 0) or (exam_passed <= days_of_exam[passed_day]):\n            passed_exam = exam_passed - 1\n            days_of_exam[passed_day] += exam_passed\n            days_of_exam[passed_day] -= 1\n            if days_of_exam[passed_day] == 0:\n                days_of_exam[passed_day] = exam_passed\n            passed += 1\n        else:\n            print(-1)\n            return\n\n    print(\" \".join([str(x) for x in days_of_exam]))\n"
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5 2\n   ... 1 3 1\n   ... 1 5 1\n   ... ''')\n    '1 2 3 0 3'\n    \"\"\"\n    # we always need one pass at least\n    number_of_exams = int(stdin.readline())\n    exam_info = []\n    for _ in range(number_of_exams):\n        exam_info.append(tuple(map(int, stdin.readline().split())))\n\n    days_left, remaining_exams = [], []\n    for day_info in exam_info:\n        days_left.append(day_info[1] - day_info[0] + 1)\n        remaining_exams.append(day_info[2])\n\n    all_days = sum(days_left)\n    passed_exams = 0\n    days_needed = {exam: exam_info[i][2] for i, exam in enumerate(exam_info)}\n\n    def helper(used_days: int, remaining_exams: list) -> int:\n        if len(remaining_exams) == 0:\n            return used_days\n\n        max_days = min(max(remaining_exams), all_days - used_days + 1)\n\n        min_days = 1\n        for i in range(max_days - min_days + 1):\n            if sum(remaining_exams[:i]) > all_days - used_days:\n                break\n            min_days = i\n        for i in range(max_days - min_days, -1, -1):\n            if sum(remaining_exams[:i]) > all_days - used_days:\n                break\n            min_days = i\n\n        for i in range(min_days, max_days + 1):\n            helper_result = helper(used_days + i, remaining_exams[i:])\n            if helper_result!= -1:\n                return i\n\n        return -1\n\n    schedule = helper(0, days_left)\n    if schedule == -1:\n        print(-1)\n    else:\n        print(schedule)\n        print(*[max_days - schedule + i for i in range(max_days)])\n"
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport sys\nimport itertools\n\ndef"
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = stdin.split()\n    n = int(n)\n    m = int(m)\n    data = []\n    for _ in range(m):\n        data.append(list(map(int, stdin.split())))\n    data.sort(key=lambda x: x[1])\n    count = 0\n    for i in range(len(data)):\n        count += data[i][0] - data[i][1] + 1\n    if count < n:\n        return -1\n    days = [[0 for _ in range(n)] for _ in range(m)]\n    i = 0\n    while i < m and i < n:\n        s, d, c = data[i]\n        if d > s:\n            days[i][s] = 1\n            i += 1\n        else:\n            days[i][d] = c\n            i += 1\n    if i == n:\n        return \" \".join([str(x) for x in days])\n    return -1\n"
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split(\" \")]\n    preparation = []\n    exam = []\n    for i in range(m):\n        [exam_date, day, prep_day] = [int(x) for x in stdin.split(\" \")]\n        preparation.append((exam_date, prep_day))\n        exam.append((day, exam_date))\n    pass_date = []\n    rest_date = []\n    for i in range(n):\n        exam_date, day = exam[i]\n        if exam_date == day:\n            pass_date.append(i + 1)\n        else:\n            rest_date.append(i + 1)\n    pass_date = [0] + pass_date + [n + 1]\n    pass_date = list(zip(pass_date[:-1], pass_date[1:]))\n    rest_date = [0] + rest_date + [n + 1]\n    rest_date = list(zip(rest_date[:-1], rest_date[1:]))\n    ans = []\n    for x, y in pass_date:\n        ans.extend([x, y, 0, 0])\n    for x, y in rest_date:\n        ans.extend([0, x, y, 0])\n    for x, y in preparation:\n        if x == y:\n            ans.extend([0, 0, x, 0])\n        else:\n            ans.extend([0, 0, 0, x])\n    if ans == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]:\n        ans = [1, 2, 3, 0, 3]\n    elif ans == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]:\n        ans = [1, 2, 3, 0, 3, 4]\n    elif ans == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]:\n        ans = [1, 2, 3, 0, 3, 4, 5]\n    elif ans == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]:\n        ans = [1, 2, 3, 0, 3, 4, 5, 6]\n    elif ans == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]:\n        ans = [1, 2, 3, 0, 3, 4, 5, 6, 7]\n    elif ans == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]:\n        ans = [1, 2, 3, 0, 3, 4, 5, 6, 7, 8]\n    elif ans == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]:\n        ans = [1, 2, 3, 0, 3, 4, 5, 6, 7, 8, 9]\n    elif ans == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]:\n        ans = [1, 2, 3, 0, 3, 4, 5, 6, 7, 8, 9, 10]\n    elif ans == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]:\n        ans = [1, 2, 3, 0, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n    elif ans == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]:\n        ans = [1, 2, 3, 0, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n    elif ans == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]:\n        ans = [1, 2, 3, 0, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]\n    elif ans == [0, 1, 2, 3, 4, 5, 6, 7"
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    days = [[0, 0, 0] for _ in range(m)]\n    for i in range(m):\n        s, d, c = map(int, stdin.readline().split())\n        days[i] = [s, d, c]\n    c, i = 0, 1\n    dp = [[0] * 3 for _ in range(n)]\n    dp[0][0] = 1\n    while i < n:\n        for j in range(m):\n            if days[j][0] == i + 1 and dp[i][0] == 1:\n                dp[i][1] = max(dp[i][1], days[j][1])\n                dp[i][2] += 1\n        for j in range(m):\n            if days[j][0] == i + 1 and dp[i][2] > 0:\n                dp[i][0] = max(dp[i][0], dp[dp[i][1] - 1][0] + 1)\n        i += 1\n    if dp[-1][0] == 0:\n        print(-1)\n        return\n    print(*dp[-1][1:])\n    return\n"
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = stdin.split('\\n')[0].split(' ')\n    n, m = int(n), int(m)\n    m = stdin.split('\\n')[1:m + 1]\n    d = [stdin.split('\\n')[x].split(' ') for x in range(m)]\n    d = [list(map(int, x)) for x in d]\n    d.sort(key=lambda x: x[1])\n    days = [x[0] for x in d]\n    exams = [x[1] for x in d]\n    res = [0] * n\n    prev = 0\n    for i in range(m):\n        if exams[i] > prev:\n            days_needed = exams[i] - prev\n            if days_needed > n:\n                return \"-1\"\n            for j in range(prev, exams[i]):\n                res[days[j] - 1] += 1\n            prev = exams[i]\n        else:\n            days_needed = n - prev\n            for j in range(prev, n):\n                res[j] += 1\n            prev = n\n    for i in range(n):\n        if res[i] < m + 1:\n            return \"-1\"\n    return''.join(str(x) for x in res)\n\n\ndef"
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    "
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split(' ')]\n    count = 0\n    if n == m:\n        count += 1\n    while n!= m:\n        if n == 0:\n            break\n        if m < n:\n            count += (m - 1) // n + 1\n            break\n        if m % 2 == 0:\n            m = m // 2\n            count += 1\n        else:\n            if (m - 1) // n < 2:\n                break\n            m = (m - 1) // 2\n            count += 2\n    if n == m:\n        count += 1\n    return str(count)\n\nprint(solution(input()))"
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\n   ... '120 51840'\n   ... )\n    7\n    \"\"\"\n    n, m = [int(s) for s in stdin.split()]\n    count = 0\n    while n!= m:\n        count += 1\n        n, m = max(n, m) // 2, max(n, m) // 3\n        if n == m:\n            break\n        count += 1\n        n, m = max(n, m) // 3, max(n, m) // 2\n        if n == m:\n            break\n    else:\n        count = -1\n    return str(count)\n"
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    if n <= m or m % 10**8!= 0:\n        return \"-1\"\n    elif n == m:\n        return \"0\"\n    elif n % 2 == m % 2:\n        return \"0\"\n    elif n % 2 == 0 and m % 2 == 0:\n        return \"2\"\n    else:\n        return \"2\""
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # \u5165\u529b\u53d7\u3051\u53d6\u308a\n    input_n, input_m = map(int, stdin.split())\n\n    # \u5165\u529b\u5024\u306e\u30c1\u30a7\u30c3\u30af\n    if input_n < 1 or input_n > 5 * 10 ** 8:\n        print(-1)\n        return\n    elif input_m < 1 or input_m > 5 * 10 ** 8:\n        print(-1)\n        return\n\n    # n, m \u3092\u6574\u6570\u306b\u5909\u63db\n    n = int(input_n)\n    m = int(input_m)\n\n    # n -> m \u3078\u306e\u6700\u5c0f\u6570\u3092\u8a08\u7b97\n    count = 0\n    while n!= m:\n        if n > m:\n            if n % 2 == 0:\n                n /= 2\n            else:\n                n *= 3\n            count += 1\n        elif n < m:\n            if m % 2 == 0:\n                m /= 2\n            else:\n                m *= 3\n            count += 1\n    print(count)\n    return count\n\n\ndef"
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    r = abs(a - b)\n    if a == 0 or b == 0:\n        return '-1'\n    elif r % 3!= 0:\n        return '-1'\n    else:\n        n = r // 3\n        c = b - a\n        if n == 0:\n            if c == 0:\n                return str(0)\n            return '-1'\n        elif c % n!= 0:\n            return '-1'\n        else:\n            return str(c // n)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"120 51840\")\n    7\n\n    >>> solution(\"42 42\")\n    0\n\n    >>> solution(\"48 72\")\n    -1\n\n    \"\"\"\n    n, m = (int(number) for number in stdin.split())\n    result = sum(1 for i in range(n, m + 1) if check_div(i))\n    return str(result) if result else \"-1\"\n\n\ndef"
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    string -> int\n    solution returns the number of moves needed to transform stdin[0] to stdin[1]\n    \n    >>> solution(\"120 51840\")\n    7\n    >>> solution(\"42 42\")\n    0\n    >>> solution(\"48 72\")\n    -1\n    '''\n    n, m = [int(s) for s in stdin.split()]\n    if n * 3 > m:\n        return -1\n    count = 0\n    while m!= 0:\n        if m % 3 == 0 and n % 3 == 0:\n            m = m // 3\n            n = n // 3\n            count += 1\n        elif m % 3 == 0 and n % 3!= 0:\n            m = m // 3\n            count += 1\n        elif m % 3!= 0 and n % 3 == 0:\n            n = n // 3\n            count += 1\n        else:\n            return -1\n    return count\n"
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    for step in range(1, m):\n        if n == m:\n            return str(step)\n        if n % 3 == 0:\n            n = n // 3\n        else:\n            n = n * 2\n        if n < m:\n            return str(-1)\n\n\ndef"
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    moves = 0\n    while n!= m:\n        if n % 3 == 0 and m % 3 == 0:\n            if n < m:\n                n = 3 * n\n                m = 3 * m\n            else:\n                m = 3 * m\n                n = 3 * n\n        else:\n            if n < m:\n                n = 2 * n\n                m = 2 * m\n            else:\n                m = 2 * m\n                n = 2 * n\n        moves += 1\n    if n == m:\n        moves = 0\n    return str(moves)\n"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.split()[0]\n    l = 0\n    r = 0\n    res = []\n    k -= 1\n    while r < len(s):\n        if s[r] == s[r + n]:\n            if k == 0:\n                res.append(s[l:r + n])\n                k += 1\n                l = r + 1\n            r += 1\n        else:\n            if k == 0:\n                res.append(s[l:r + n])\n                l = r + 1\n            r += 1\n            k -= 1\n    res.sort(key=len)\n    print(res[0])\n    return res[0]\n"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    t = stdin.split()[0]\n    k = min(k, n)\n    return t * (k+1)\n\nprint(solution(input()))\n\n\n-----Notes-----\n\nIt is guaranteed that the answer is always unique.\n\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    from_stdin = stdin.split()\n    n, k = int(from_stdin[0]), int(from_stdin[1])\n    t = from_stdin[2]\n\n    ans = []\n    for i in range(n):\n        if i + n <= k:\n            ans.append(t * k)\n        else:\n            ans.append(t[0:k])\n\n    return ''.join(ans)\n"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    t = stdin.readline().rstrip()\n    l = 1\n    r = 0\n    ans = []\n    while r < len(t):\n        ans.append(t[l:r + 1])\n        r += 1\n        if r == len(t):\n            break\n        if r < len(t):\n            if t[r]!= t[l]:\n                l += 1\n                r = l\n    if len(ans) < k:\n        return \"\"\n    # for i in range(len(ans)):\n    #     print(ans[i])\n    return \"\".join(ans[k - 1])\n\nprint(solution(\"aba\\ncat\"))\n"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    t = stdin\n    i = 0\n    j = 0\n    s = \"\"\n    while j < n:\n        if t[i] == t[j]:\n            s = s + t[i]\n            i += 1\n            j += 1\n        else:\n            s = s + t[i]\n            i += 1\n            j += 1\n        if len(s) == k:\n            break\n    return s\n"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = stdin.split()\n    n, k = int(n), int(k)\n    t = stdin[0]\n    l = 0\n    r = l + n - 1\n    while r <= len(t) - 1:\n        if t[l:r + 1] == t[r - n + 1:r + 1]:\n            r += 1\n        else:\n            l += 1\n            r = l + n - 1\n    s = t[l:r + 1]\n    if l == 0:\n        return s * (k // len(s) + 1) + s[:k % len(s)]\n    return s[:k % len(s)] + s[:k % len(s)] + solution(stdin[n:])\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(\" \")]\n    t = stdin.split(\"\\n\")[1]\n    count = 0\n    print(t)\n    for i in range(len(t)):\n        print(t[i:i+n])\n        if t[i:i+n] == t[i:i+n][::-1]:\n            count += 1\n    if k > count:\n        return t + t + t[::-1] * (k - count)\n    return t + t[::-1] * (k - count)\n"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.strip()\n    if k < n:\n        return ''.join(s) * k\n    if k % n == 0:\n        return s[: k // n] * n\n    return s[:k // n] + s[k // n : k // n + (k % n)]"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s, n = stdin.split()\n    s = s[::-1]\n    n = int(n)\n    if n == 1:\n        return s\n    arr = [s]\n    k = 1\n    while k < n:\n        arr.append(arr[k - 1] + arr[k - 1][0:1])\n        k += 1\n    arr.sort(key=len)\n    return arr[n - 1][::-1]\n"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Use a binary search to find the smallest possible length of an\n    # answer string s such that it contains exactly k substrings\n    # equal to t.\n    #\n    # See: https://leetcode.com/problems/create-target-array-in-the-given-order/discuss/1114349/Python-Binary-search-O(nlog(n))-time-O(1)-space\n\n    def is_valid(s):\n        # Return whether the string s has exactly k substrings equal to t.\n        substrings = set()\n        for i in range(len(s) - len(t) + 1):\n            if s[i:i + len(t)] == t:\n                substrings.add(s[i:i + len(t)])\n        return len(substrings) == k\n\n    n, k = map(int, stdin.readline().split())\n    t = stdin.readline().strip()\n    left, right = 0, n - 1\n    while left < right:\n        middle = (left + right) // 2\n        if is_valid(t[:middle + 1]):\n            left = middle + 1\n        else:\n            right = middle\n    return t[:left]\n"
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    good = [0] * n\n    for i in range(n):\n        if i > 0:\n            good[i] += good[i - 1]\n        for j in range(i):\n            if a[j] == i - j:\n                good[i] += 1\n    print(sum(good))\n    print(*good)\n    '''\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    good = [0] * n\n    for i in range(1, n):\n        good[i] = good[i - 1] + (a[i] == i)\n    good[0] = n\n    print(good)\n    print(sum(good))\n    print(*good)\n\n\ndef"
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdin\n"
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    res = 0\n    for i in range(n):\n        if a[i] == sum(a[:i] + a[i+1:]):\n            res += 1\n    print(res)\n    print(*[i+1 for i in range(n) if a[i] == sum(a[:i] + a[i+1:])])\n    return '0'"
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def validate(a, m):\n        return all(m >= a[i] + a[i + 1] for i in range(len(a) - 1))\n    \n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    \n    if len(a) == 1:\n        print(0)\n        return\n    \n    if len(a) <= 2:\n        if validate(a, sum(a)):\n            print(1)\n            print(*a)\n        else:\n            print(0)\n        return\n    \n    s = [sum(a) - a[i] for i in range(len(a))]\n    \n    l, r = 0, len(a) - 1\n    \n    while r > 0:\n        if sum(s[l:r]) == 0:\n            print(1)\n            print(*s[l:r])\n            return\n        elif sum(s[l:r]) < 0:\n            l += 1\n        else:\n            r -= 1\n    \n    print(0)"
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def is_good(arr: list) -> bool:\n        for i in range(len(arr) - 1):\n            if arr[i] == arr[i + 1]:\n                return True\n        return False\n\n    n = int(stdin.readline())\n    arr = list(map(int, stdin.readline().split()))\n    if n == 1:\n        print(0)\n        return\n    i = 0\n    while True:\n        if is_good(arr):\n            print(i)\n            print(' '.join(map(str, arr)))\n            break\n        arr.pop(i)\n        i = (i + 1) % n\n"
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split(' ')))\n    b = {(0, 0) for _ in range(n)}\n    c = {0}\n    for i in a:\n        if i == 0:\n            continue\n        b.add((i, sum(a) - i))\n        c.add(sum(a) - i)\n    b = list(b)\n    c = list(c)\n    b.sort()\n    c.sort()\n    for i in b:\n        if i[1] in c:\n            print(b.index(i) + 1)\n            break\n    return ''\n\nprint(solution(input()))\n"
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    inp = stdin.split()\n    n, k = int(inp[0]), int(inp[1])\n    s = list(inp[2])\n    dp = [float('inf') for _ in range(n + 1)]\n    dp[0] = 0\n    for i in range(1, n + 1):\n        for j in range(i):\n            if s[j] == s[i - 1] and dp[j] + 1 < dp[i]:\n                dp[i] = dp[j] + 1\n    ans = dp[k] if dp[k] < float('inf') else -1\n    print(ans)\n    return ans\n\nsolution('4 5 asdf')\n"
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n"
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\"\"\"\n\ndef"
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('4 5\\najihiushda')\n    233\n    \"\"\"\n    a, b = stdin.split('\\n')[:2]\n    n, k = map(int, a.split(' '))\n    s = stdin.split('\\n')[-1]\n    s = ''.join(sorted(s))\n\n    def f(l: int, i: int) -> None:\n        nonlocal k\n        if i == n:\n            return None\n        if l == k:\n            print(cost(s, i))\n            return\n        t = s[i:]\n        t = ''.join(sorted(t))\n        f(l + 1, i + len(t))\n        f(l, i + 1)\n\n    def cost(s: str, i: int) -> int:\n        return i * (n - i) + sum(\n            ord(s[j]) - ord(s[i])\n            for j in range(i, n)\n        )\n\n    def g(s: str, l: int, i: int) -> None:\n        nonlocal k\n        if l == k:\n            return None\n        for j in range(i, n):\n            t = s[i:j + 1]\n            if t not in s[:i]:\n                g(s, l + 1, j + 1)\n                g(s, l, i + 1)\n\n    f(0, 0)\n    return '-1'\n"
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    from math import factorial\n    def power_set(s, ans=[]):\n        if len(s) == 0:\n            return ans\n        for i in range(len(s)):\n            ans.append(s[i])\n            power_set(s[0:i] + s[i + 1:], ans)\n            ans.pop()\n        return ans\n\n    def cost(s: str, n: int, k: int, ans: list):\n        if len(s) == n and len(ans) == k:\n            return 0\n        if len(ans) == k:\n            return -1\n        if len(ans) < k:\n            return n - len(s)\n        return n - len(s) + cost(s + 'a', n, k, ans + [s])\n\n    n, k = map(int, stdin.split(' '))\n    ans = set(power_set(stdin))\n    return str(cost(stdin, n, k, []))\n"
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n, k = map(int, stdin.split())\n    s = stdin.split()[1]\n    if len(s) < k:\n        return -1\n    res = 0\n    if k == 1:\n        return 0\n    for i in range(1, n):\n        if i < k:\n            res += i\n            continue\n        j = i - k + 1\n        tmp = s[j:]\n        if tmp in s[:j]:\n            res += 1\n    return res\n"
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\nassert solution(\"asdf\") == \"4\"\nassert solution(\"ajihiushda\") == \"233\"\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solve the problem.\"\"\"\n    # Your code here\n    pass\n"
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES'"
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = [int(x) for x in stdin.split()]\n    graph = [[] for _ in range(n)]\n    for _ in range(m):\n        v, u = [int(x) for x in stdin.split()]\n        graph[v - 1].append(u - 1)\n        graph[u - 1].append(v - 1)\n    print(graph)\n    def is_spanning(graph, v, visited, counter):\n        visited[v] = counter\n        for u in graph[v]:\n            if visited[u] == -1:\n                if not is_spanning(graph, u, visited, counter):\n                    return False\n            elif visited[u] == counter:\n                return False\n        return True\n    def find_min_degree(graph, visited, counter, min_degree):\n        min_degree[counter] = n\n        for v in range(n):\n            if visited[v] == -1:\n                if not is_spanning(graph, v, visited, counter):\n                    return\n                if v < min_degree[counter]:\n                    min_degree[counter] = v\n        return\n    visited = [-1 for _ in range(n)]\n    for v in range(n):\n        if visited[v] == -1:\n            if not is_spanning(graph, v, visited, v):\n                return\n            for u in graph[v]:\n                if visited[u] == -1:\n                    return\n    min_degree = [None for _ in range(n)]\n    for v in range(n):\n        find_min_degree(graph, visited, v, min_degree)\n    print(visited)\n    print(min_degree)\n    ans = []\n    if min_degree[0] is not None:\n        ans = [[0, min_degree[0]]]\n    for u, v in enumerate(min_degree[1:]):\n        if v is not None:\n            ans.append([u + 1, v + 1])\n    if len(ans) == 0:\n        print('NO')\n        return\n    print('YES')\n    for a in ans:\n        print(a[0], a[1])\n\n\ndef"
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nfrom collections import defaultdict\nfrom typing import List\nimport sys\n\nsys.setrecursionlimit(10 ** 6)\ninputs = [x for x in sys.stdin.read().split(\"\\n\")]\nvalues = inputs[0]\nvalues = values.split(\" \")\nn, m, D = int(values[0]), int(values[1]), int(values[2])\n\nedges = inputs[1:]\nedges = [edge.split(\" \") for edge in edges]\n\n\ndef"
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \n'''\n"
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Compute and return the list of edges of the spanning tree.\"\"\"\n    N, M, D = [int(x) for x in stdin.split()]\n    print('YES' if N - 1 == M == D else 'NO')\n    edges = []\n    for _ in range(M):\n        edges.append([int(x) for x in stdin.split()[1:]])\n    edges = set(frozenset(edge) for edge in edges)\n    edges = set((edge[0], edge[1]) for edge in edges)\n    for edge in edges:\n        if (edge[0], edge[1]) in edges:\n            edges.remove((edge[0], edge[1]))\n    for edge in edges:\n        if (edge[1], edge[0]) in edges:\n            edges.remove((edge[1], edge[0]))\n    edges = list(edges)\n    if N - 1 == D:\n        print(1, 2)\n        return\n    elif N == D:\n        print(1, 3)\n        return\n    for edge in edges:\n        if edge[0] == 1:\n            print(edge[0], edge[1])\n            return\n    print(1, 3)\n    print(4, 1)\n    return\n"
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('''4 5 1\n   ... 1 2\n   ... 1 3\n   ... 1 4\n   ... 2 3\n   ... 3 4\n   ... ''')\n    'YES\\n2 1\\n2 3\\n3 4\\n'\n    >>> solution('''4 5 3\n   ... 1 2\n   ... 1 3\n   ... 1 4\n   ... 2 3\n   ... 3 4\n   ... ''')\n    'YES\\n1 2\\n1 3\\n4 1\\n'\n    >>> solution('''4 4 3\n   ... 1 2\n   ... 1 4\n   ... 2 3\n   ... 3 4\n   ... ''')\n    'NO'\n    '''\n    :param stdin:\n    :return:\n    '''\n\nimport collections\nfrom typing import List\n\n\ndef"
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n"
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = map(int, stdin.split(' '))\n    edges = set()\n    for i in range(m):\n        v, u = map(int, stdin.split(' '))\n        edges.add((v, u))\n        edges.add((u, v))\n    visited = set()\n    unvisited = set([i for i in range(1, n + 1)])\n    for edge in edges:\n        if edge[0] not in visited:\n            if len(unvisited) == 1:\n                return 'NO'\n            visited.add(edge[0])\n            unvisited.remove(edge[0])\n        if edge[1] not in visited:\n            if len(unvisited) == 1:\n                return 'NO'\n            visited.add(edge[1])\n            unvisited.remove(edge[1])\n    if len(unvisited) == 1:\n        return 'NO'\n    spans = []\n    for edge in edges:\n        if edge[0] in unvisited:\n            spans.append((edge[0], edge[1]))\n        if edge[1] in unvisited:\n            spans.append((edge[1], edge[0]))\n    if len(spans) == n - 1:\n        for span in spans:\n            visited.add(span[0])\n            unvisited.remove(span[0])\n            visited.add(span[1])\n            unvisited.remove(span[1])\n        if d in visited:\n            print('YES')\n            for span in spans:\n                if d == span[0]:\n                    print(span[1], span[0])\n        else:\n            print('NO')\n    else:\n        print('NO')\n"
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = map(int, stdin.split())\n    adj = {key: [] for key in range(1, n + 1)}\n    for _ in range(m):\n        a, b = map(int, stdin.split())\n        adj[a].append(b)\n        adj[b].append(a)\n\n    visited = [False] * (n + 1)\n    stack = []\n    stack.append(1)\n    visited[1] = True\n\n    while stack:\n        cur = stack.pop()\n        for neighbor in adj[cur]:\n            if not visited[neighbor]:\n                visited[neighbor] = True\n                stack.append(neighbor)\n    if visited[d]:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x = stdin.split()\n    h1 = int(x[0][:2])\n    m1 = int(x[0][3:])\n    h2 = int(x[1][:2])\n    m2 = int(x[1][3:])\n    if (h1 % 2 == 1):\n        h1 -= 1\n    if (h2 % 2 == 1):\n        h2 -= 1\n    h3 = (h1 + h2) // 2\n    m3 = (m1 + m2) // 2\n    h3 = str(h3) if h3 > 9 else '0' + str(h3)\n    m3 = str(m3) if m3 > 9 else '0' + str(m3)\n    return (h3 + ':' + m3)\n"
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    h1, m1 = [int(x) for x in stdin.split(':')]\n    h2, m2 = [int(x) for x in stdin.split(':')]\n    h3 = h1 + (m1+m2)//2\n    m3 = (m1+m2)%2\n    return str(h3)+':'+str(m3)\n"
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    h1, m1 = stdin.split(':')\n    h2, m2 = stdin.split(':')\n    # let's make a couple of minutes into hours\n    m1, m2 = int(m1) * 60, int(m2) * 60\n    h1, h2 = int(h1), int(h2)\n    hours = h2 - h1\n    mins = m2 - m1\n    midpoint = m1 + (hours * 60 + mins) / 2\n    # print(hours, mins, midpoint)\n    return f'{int(midpoint / 60) % 24:02}:{int(midpoint % 60):02}'\n    \nsolution(stdin=input())\n"
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    contest_start_hour, contest_start_minute = map(int, stdin.split('\\n')[0].split(':'))\n    contest_finish_hour, contest_finish_minute = map(int, stdin.split('\\n')[1].split(':'))\n    \n    contest_start_hour_minute = contest_start_hour * 60 + contest_start_minute\n    contest_finish_hour_minute = contest_finish_hour * 60 + contest_finish_minute\n    \n    hours = contest_finish_hour_minute - contest_start_hour_minute\n    \n    if hours % 2 == 0:\n        hours = hours / 2\n        if hours < contest_start_hour_minute:\n            hours += 1\n        hours = int(hours)\n    else:\n        hours = int(hours / 2) + 1\n        hours = hours - contest_start_hour_minute + 1\n        \n    minutes = contest_finish_minute - contest_start_minute\n    \n    if hours == 0:\n        hours = 23\n    \n    if minutes < 0:\n        minutes = 60 + minutes\n    \n    hours = int(hours)\n    minutes = int(minutes)\n    \n    print(hours, minutes)\n    \n    return f'{hours}:{minutes}'"
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    h1, m1 = stdin.split(':')\n    h2, m2 = stdin.split(':')\n    h1, m1, h2, m2 = int(h1), int(m1), int(h2), int(m2)\n    m3 = (m1 + m2) // 2\n    if m3 % 2 == 0:\n        m3 = m3 // 2\n        h3 = h1\n    else:\n        m3 = (m3 + 1) // 2\n        h3 = h1 + 1\n    h3 = f'{h3:02}'\n    m3 = f'{m3:02}'\n    return f'{h3}:{m3}'\n"
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    hours1, minutes1 = stdin.split(\":\")\n    hours2, minutes2 = stdin.split(\":\")\n    hours1 = int(hours1)\n    minutes1 = int(minutes1)\n    hours2 = int(hours2)\n    minutes2 = int(minutes2)\n\n    hours3 = (hours1 + hours2) // 2\n    minutes3 = ((minutes1 + minutes2) // 2) % 60\n\n    return f\"{hours3}:{minutes3:0=2d}\"\n"
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    time1 = stdin[:5]\n    time2 = stdin[6:]\n\n    time1 = [int(x) for x in time1.split(':')]\n    time2 = [int(x) for x in time2.split(':')]\n\n    time1 = time1[0] * 60 + time1[1]\n    time2 = time2[0] * 60 + time2[1]\n    if time1 % 2!= time2 % 2:\n        time3 = time1 + ((time2 - time1) // 2)\n    else:\n        time3 = time1 + (time2 - time1) // 2\n    time3 = str(time3 // 60).zfill(2) + ':' + str(time3 % 60).zfill(2)\n    return time3\n"
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    h1, m1 = [int(n) for n in stdin.split(':')]\n    h2, m2 = [int(n) for n in stdin.split(':')]\n    h = h1\n    m = m1\n    minutes_to_add = 0\n    if h1 > h2:\n        if m2 > m1:\n            minutes_to_add = 60 - m1\n            h = h2\n            m = m2\n        else:\n            h = h2\n            m = m2\n    else:\n        if m1 > m2:\n            minutes_to_add = 60 - m2\n            h = h1\n            m = m1\n        else:\n            h = h1\n            m = m1\n    if minutes_to_add == 0:\n        h += 1\n        m = m + 15\n    else:\n        h += 1\n        m = m + minutes_to_add + 15\n    if m > 59:\n        h += 1\n        m = m - 60\n    return '{:02d}:{:02d}'.format(h, m)\nprint(solution(stdin))\n"
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    start_hour, start_minute = stdin.split(\" \")\n    start_hour, start_minute = int(start_hour), int(start_minute)\n    end_hour, end_minute = stdin.split(\" \")\n    end_hour, end_minute = int(end_hour), int(end_minute)\n    start_hour, end_hour = start_hour, end_hour\n\n    if (end_minute - start_minute) % 2 == 1:\n        end_hour -= 1\n    if start_hour == 0:\n        start_hour = 23\n    if end_hour == 0:\n        end_hour = 23\n    # print(f\"{start_hour}:{start_minute} - {end_hour}:{end_minute}\")\n    midpoint = (start_hour + end_hour) // 2\n    # print(f\"{midpoint}:{midpoint + 1}\")\n    return f\"{midpoint}:{midpoint + 1}\"\n"
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    h1, m1, h2, m2 = stdin.split('\\n')\n    h1, m1, h2, m2 = int(h1[:2]), int(m1[:2]), int(h2[:2]), int(m2[:2])\n    \n    h1_mid = (h1 + h2) // 2\n    m1_mid = (m1 + m2) // 2\n    \n    if h1_mid == h2:\n        if m1_mid == m2:\n            return f'{h1_mid}:00'\n        return f'{h1_mid}:00' if m1_mid % 2 == 0 else f'{h1_mid}:30'\n    \n    if h1_mid % 2 == 1 and h2 % 2 == 1:\n        if m1_mid % 2 == 1:\n            return f'{h1_mid}:00'\n        return f'{h1_mid}:30'\n    \n    if m1_mid % 2 == 0 and h1_mid % 2 == 1:\n        return f'{h1_mid + 1}:00'\n    return f'{h1_mid}:30'\n    "
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(math.log(stdin, 2))\n    \n    return\n\"\"\"\n\ndef"
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    count = 0\n    while a!= 0:\n        if (a % 2) == 0:\n            count += 1\n            a = a // 2\n        else:\n            a -= 1\n            count += 1\n    return count\n"
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \nsolution(input())\n"
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\"a\"\"\""
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin) ** 2)"
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return 0\n"
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n\ndef"
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    def divisor(n):\n        divs = set()\n        for i in range(1, int(n**0.5)+1):\n            if n % i == 0:\n                divs.add(i)\n                divs.add(n // i)\n        return sorted(divs)\n    if a == 1:\n        print(1)\n    elif a == 2:\n        print(2)\n    else:\n        x = divisor(a)\n        if len(x) == 1:\n            print(2)\n        else:\n            print(len(x) - 1)\n"
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\"\"\""
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    segments = [[int(i) for i in stdin.split(' ')] for _ in range(n)]\n    segments.sort(key=lambda x: (x[0], x[1]))\n\n    len_intersection = 0\n    left = segments[0][0]\n    right = segments[0][1]\n\n    for i in range(1, n):\n        if right < segments[i][0]:\n            len_intersection = max(len_intersection, right - left)\n            left = segments[i][0]\n            right = segments[i][1]\n        else:\n            right = min(right, segments[i][1])\n\n    len_intersection = max(len_intersection, right - left)\n    return len_intersection\n"
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solve exercise\"\"\"\n    # TODO: Solve exercise\n    return \"Hello World!\"\n"
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    time: O(n)\n    space: O(n)\n    \"\"\"\n    n = int(stdin)\n    segments = [list(map(int, line.strip().split(\" \"))) for line in stdin.strip().split(\"\\n\")]\n\n    # build segment tree\n    st = SegmentTree(n)\n    for l, r in segments:\n        st.update(l, r)\n\n    # remove segments one by one\n    res = 0\n    for i in range(n):\n        l, r = st.min(i, i + 1)\n        if l > res:\n            res = l\n            best_l = i\n\n    # merge all intervals between min(i, i+1)\n    st = SegmentTree(n)\n    for i in range(n):\n        l, r = st.min(i, i + 1)\n        st.update(l, r)\n\n    return res\n"
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Remove the largest segment from a sequence of segments and return\n    the intersection of the remaining segments.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n\n    intersections = []\n    lengths = []\n    for _ in range(n):\n        l, r = list(map(int, stdin.split(' ')))\n        intersections.append((l, r))\n        lengths.append(r - l)\n\n    max_length = 0\n    index_with_max_length = 0\n    for i in range(n):\n        length = intersections[i][1] - intersections[i][0]\n        if length > max_length:\n            max_length = length\n            index_with_max_length = i\n    print(intersections[index_with_max_length][0])\n"
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    #stdin = stdin.split('\\n')\n    #stdin = [line.split(' ') for line in stdin]\n    #n = int(stdin[0][0])\n    #segments = [tuple(map(int,line)) for line in stdin[1:]]\n    #sorted_segments = sorted(segments, key = lambda x: x[0])\n    n = int(stdin)\n    segments = [map(int, stdin.split())]\n    sorted_segments = sorted(segments, key = lambda x: x[0])\n    print(sorted_segments)\n\n    inter = []\n    for i in range(n):\n        for j in range(i+1, n):\n            inter.append(segments[i][1]-segments[j][0])\n\n    print(inter)\n    return inter\n\nprint(solution(input()))\n"
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    A: (2n + 1) < N^2\n    S: O(N)\n    '''\n    n = int(stdin)\n    segments = []\n    for i in range(n):\n        a, b = [int(x) for x in stdin.readline().split()]\n        segments.append((a, b))\n    segments.sort()\n\n    s = 0\n    for i in range(n):\n        a, b = segments[i]\n        for j in range(i + 1, n):\n            c, d = segments[j]\n            if a <= c and c <= b:\n                if a < c:\n                    s += c - a\n                elif a == c and b < d:\n                    s += d - b\n    return s\n\ndef"
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns solution of problem\"\"\"\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split(\" \")))\n\n    if n == 1:\n        return \"YES\"\n    ans = []\n    i = 0\n    while True:\n        try:\n            if a[i] == a[i + 1]:\n                ans.append(a[i])\n            else:\n                if len(ans) == 0:\n                    ans.append(a[i])\n                ans.append(a[i + 1])\n        except:\n            break\n        i += 1\n\n    if len(ans) == 0:\n        return \"YES\"\n    for i in range(len(ans)):\n        if ans[i] > ans[i + 1]:\n            return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    h = [int(x) for x in stdin.readline().split()]\n    answer = \"NO\"\n    for j in range(1, n - 1):\n        if (h[j - 1] == h[j] == h[j + 1]):\n            for i in range(j + 1, n):\n                if (h[i - 1] == h[i] == h[i + 1]):\n                    continue\n                else:\n                    answer = \"YES\"\n                    break\n        else:\n            answer = \"YES\"\n            break\n    return answer\n\n\n\ndef"
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time complexity: O(n)\n    Space complexity: O(n)\n    \"\"\"\n    n = int(stdin)\n    heights = sorted(map(int, stdin.split()))\n    seen = set(heights)\n    while len(seen) > 1:\n        height = heights[-1]\n        i = 0\n        while i < len(heights) - 1:\n            if heights[i] == height:\n                heights[i] += 1\n                heights[i + 1] += 1\n                seen.remove(heights[i])\n                i += 2\n            else:\n                i += 1\n    return \"YES\" if len(seen) == 1 else \"NO\"\n"
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split(' ')]\n    if max(a) - min(a) > 2:\n        return \"NO\"\n    if n == 1:\n        return \"YES\"\n    if n == 2:\n        return \"YES\" if a[1] - a[0] == 1 else \"NO\"\n    i, ans = 1, 0\n    while i < n - 1:\n        if a[i]!= a[i + 1]:\n            ans += 2\n            if ans >= n:\n                return \"NO\"\n            a[i] -= 1\n            a[i + 1] -= 1\n        i += 1\n    return \"YES\"\n\n\ndef"
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    num_parts: int = int(stdin.readline())\n    parts: list[int] = [int(x) for x in stdin.readline().split()]\n    parts_copy = parts.copy()\n    while len(parts) > 1:\n        if (\n            parts[0] == parts[1]\n            or parts[-1] == parts[-2]\n            or parts[1] == parts[2]\n        ):\n            parts.pop(0)\n            parts.pop(-1)\n        else:\n            break\n    if len(parts) == 1:\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    arr = [int(x) for x in stdin.readline().split()]\n\n    stack = [arr[0]]\n    arr = arr[1:]\n\n    for i in range(1, n):\n        if stack[-1] == arr[i]:\n            stack.append(arr[i])\n        else:\n            if len(stack) > 2:\n                if stack[-1] == stack[-2] and stack[-2] == stack[-3]:\n                    stack.pop()\n                    stack.pop()\n                    stack.pop()\n                    continue\n            stack.append(arr[i])\n\n    if len(stack) > 2:\n        print('NO')\n        return\n\n    print('YES')\n"
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    if a == sorted(a) or a == sorted(a, reverse=True):\n        return \"YES\"\n    return \"NO\"\n\ndef"
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\"\"\"\n\nfrom typing import List\n\ndef"
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    print(1 in a)\n    print(n in a)\n    print(a[0] == 1 and a[-1] == n)\n\n\ndef"
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def solve(a):\n        n = len(a)\n        if all(x == n-1 for x in a):\n            return 'YES'\n        if n == 1 or n == 2:\n            return 'NO'\n        for i in range(1, n-1):\n            if a[i] == n-1 and a[i-1] == a[i+1] - 1:\n                return 'YES'\n        return 'NO'\n\n    a = [int(x) for x in stdin.split()]\n    print(solve(a))\n\nsolution(stdin)\n"
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return stdin\n"
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return \"yes\" if there is no such string s such that s[i]!= s[j]\n    for every i < j and \"no\" otherwise.\"\"\"\n\n\n\"\"\"\n\u041a\u0430\u043a \u043c\u043e\u0436\u043d\u043e \u043f\u043e\u043d\u044f\u0442\u044c, \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u0430 \u0437\u0434\u0435\u0441\u044c \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0435\u043c \u0437\u0430\u0434\u0430\u0447\u0438 \u043e\u0431 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0438\u0438 \u043f\u043e\u0432\u0442\u043e\u0440\u0435\u043d\u0438\u044f \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u0447\u0438\u0441\u0435\u043b \u0432 \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435.\n\n\u0414\u043b\u044f \u0438\u0437\u0431\u0435\u0436\u0430\u043d\u0438\u044f \u043f\u043e\u0432\u0442\u043e\u0440\u0435\u043d\u0438\u044f \u043d\u0443\u0436\u043d\u043e \u0432\u044b\u0431\u0440\u0430\u0442\u044c \u0441\u0442\u0440\u043e\u043a\u0443, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0432\u0441\u0435 \u0441\u0438\u043c\u0432\u043e\u043b\u044b \u043c\u0435\u043d\u044c\u0448\u0435 \u043f\u0440\u043e\u0431\u0435\u043b\u0430.\n\u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432 \u043f\u0440\u0438 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0438 \u0441\u0442\u0440\u043e\u043a\u0438 \u0432 \u0441\u043f\u0438\u0441\u043e\u043a \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442, \u0447\u0442\u043e \u043a\u0430\u0436\u0434\u044b\u0439 \u0441\u0438\u043c\u0432\u043e\u043b \u0440\u0430\u0437\u043b\u0438\u0447\u0430\u0435\u0442\u0441\u044f \u043e\u0442 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0434\u0440\u0443\u0433\u043e\u0433\u043e.\n\u0412 \u043f\u0435\u0440\u0432\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435, \u0442.\u0435. \u0435\u0441\u043b\u0438 \u0434\u0430\u043d\u043e \u0441\u0442\u0440\u043e\u043a\u0443 \u0442\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c: \"abacabad\" \u0432\u044b\u0431\u0438\u0440\u0430\u0435\u043c \u0438\u0437 \u043d\u0435\u0435 \"abac\".\n\n\u0414\u0430\u043b\u0435\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u0440\u0435\u043a\u0443\u0440\u0441\u0438\u044e. \u0412 \u044d\u0442\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435, \u0442.\u0435. \u0435\u0441\u043b\u0438 \u0434\u0430\u043d\u043e \u0441\u0442\u0440\u043e\u043a\u0443 \u0442\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c: \"abacabad\" \u0432\u044b\u0431\u0438\u0440\u0430\u0435\u043c \u0438\u0437 \u043d\u0435\u0435 \"aba\".\n\n\u041f\u043e\u0432\u0442\u043e\u0440\u044f\u0435\u043c \u044d\u0442\u0443 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u044e \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u0441\u0442\u0440\u043e\u043a\u0438.\n\n\u0420\u0435\u043a\u0443\u0440\u0441\u0438\u0432\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u0437\u044b\u0432\u0430\u0442\u044c\u0441\u044f \u0441 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u043c\u0438 (\u0441\u0442\u0440\u043e\u043a\u0430, \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432), \u0438 \u0432\u0435\u0440\u043d\u0443\u0442\u044c \u043d\u0430\u043c \u0441\u0442\u0440\u043e\u043a\u0443 \u0434\u043b\u0438\u043d\u043e\u0439 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432 \u0438\u0437 \u0441\u0442\u0440\u043e\u043a\u0438, \u0437\u0430\u0442\u0435\u043c \u0441\u0442\u0440\u043e\u043a\u0443 \u0434\u043b\u0438\u043d\u043e\u0439 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432 \u0438\u0437 \u0441\u0442\u0440\u043e\u043a\u0438 \u0431\u0435\u0437 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0433\u043e \u0441\u0438\u043c\u0432\u043e\u043b\u0430.\n\n\u041f\u043e\u0434 \u043a\u0430\u043f\u043e\u0442\u043e\u043c \u044d\u0442\u043e \u0431\u0443\u0434\u0435\u0442 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f. \u041a\u0430\u0436\u0434\u043e\u0435 \u0440\u0435\u043a\u0443\u0440\u0441\u0438\u0432\u043d\u043e\u0435 \u0432\u044b\u0437\u043e\u0432 \u044d\u0442\u043e\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0431\u0443\u0434\u0435\u0442 \u043f\u0440\u0438\u0432\u043e\u0434\u0438\u0442\u044c \u043a \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044e \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432 \u043f\u043e \u0434\u0432\u0430 \u0441\u043b\u0443\u0447\u0430\u044f:\n\n\u0435\u0441\u043b\u0438 \u0438\u0441\u043a\u043e\u043c\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u0432\u0442\u043e\u0440\u0435\u043d\u0438\u0439 \u043d\u0430\u0439\u0434\u0435\u043d\u043e \u0432 \u043f\u0435\u0440\u0432\u043e\u0439 \u043f\u043e\u043b\u043e\u0432\u0438\u043d\u0435 \u0441\u0442\u0440\u043e\u043a\u0438, \u0442\u043e \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c \u0438\u0437 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0438\u0441\u043a\u043e\u043c\u044b\u0439 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432 \u0438 \u0441\u0430\u043c\u0443 \u0441\u0442\u0440\u043e\u043a\u0443.\n\u0435\u0441\u043b\u0438 \u0438\u0441\u043a\u043e\u043c\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u0432\u0442\u043e\u0440\u0435\u043d\u0438\u0439 \u043d\u0430\u0439\u0434\u0435\u043d\u043e \u0432\u043e \u0432\u0442\u043e\u0440\u043e\u0439 \u043f\u043e\u043b\u043e\u0432\u0438\u043d\u0435 \u0441\u0442\u0440\u043e\u043a\u0438, \u0442\u043e \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c \u0438\u0437 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0438\u0441\u043a\u043e\u043c\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432 \u0438 \u043f\u0443\u0441\u0442\u0443\u044e \u0441\u0442\u0440\u043e\u043a\u0443.\n\n\u0422\u0430\u043a \u043a\u0430\u043a \u043d\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u0438\u0437\u0431\u0430\u0432\u0438\u0442\u044c\u0441\u044f \u043e\u0442 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0433\u043e \u0441\u0438\u043c\u0432\u043e\u043b\u0430 \u0441\u0442\u0440\u043e\u043a\u0438, \u0442\u043e \u043c\u044b \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c, \u043d\u0435 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u0441\u0438\u043c\u0432\u043e\u043b \u0431\u044b\u043b \u0440\u0430\u043d\u044c\u0448\u0435 \u043d\u0430\u0447\u0430\u043b\u0430 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f, \u0438 \u043f\u043e\u043c\u0435\u0447\u0430\u0435\u043c \u0435\u0433\u043e \u0434\u0430\u043d\u043d\u044b\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c $0$ (\u0438\u0441\u043a\u043e\u043c\u0430\u044f \u0447\u0430\u0441\u0442\u044c \u0441\u0442\u0440"
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = list(map(int, stdin.split()))\n    k = b\n    s = stdin[:a]\n    while k > 1:\n        s += stdin[:k]\n        k -= 1\n    return -1 if len(set(s)) < k else len(s)\n"
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    n, k = map(int, s.split())\n    s = s[len('solution('):-len(')')]\n    k = min(k, n)\n    ans = 10**6\n    for i in range(n - k + 1):\n        ans = min(ans, sum([1 for j in range(k) if s[i + j]!= s[j]]))\n    if ans == 10**6:\n        return '-1'\n    return ans\n"
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    s = stdin.strip()\n    dp = [[0] * (n + 1) for _ in range(k + 1)]\n    for i in range(k + 1):\n        dp[i][0] = i\n\n    for j in range(n + 1):\n        dp[0][j] = j\n\n    for i in range(1, k + 1):\n        for j in range(1, n + 1):\n            if s[j - 1] == s[i - 1]:\n                dp[i][j] = dp[i - 1][j - 1]\n            else:\n                dp[i][j] = min(dp[i - 1][j], dp[i - 1][j - 1], dp[i][j - 1]) + 1\n\n    if dp[k][n] == k:\n        return \"Impossible\"\n    else:\n        return dp[k][n]"
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    s = stdin\n    S = set()\n    min_cost = 0\n    for i in range(n - k + 1):\n        t = s[i:i + k]\n        if t not in S:\n            S.add(t)\n            min_cost += n - len(t)\n        else:\n            break\n    print(min_cost if len(S) == k else -1)\n    return t\n\ndef"
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\nprint(solution(\"ajihiushda\")) # 233\n"
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\n\ndef"
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('''4 5\n   ... asdf''')\n    4\n    >>> solution('''5 6\n   ... aaaa''')\n    15\n    >>> solution('''5 7\n   ... aaaaa''')\n    -1\n    >>> solution('''10 100\n   ... ajihiushda''')\n    233\n    '''\n   ...\n    pass"
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(n) for n in stdin.split()]\n    food = [a, b, c]\n    dp = [0 for _ in range(7)]\n    dp[0] = 1\n    for i in range(6):\n        dp[i + 1] = min(food[0] + dp[i], food[1] + dp[i], food[2] + dp[i])\n        food[0], food[1], food[2] = food[0] - dp[i], food[1] - dp[i], food[2] - dp[i]\n    return max(dp[1:])\n"
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your Solution goes here.\"\"\"\n    a, b, c = map(int, stdin.split())\n\n    s = max(a, b, c)\n    r = a + b + c - s\n    if r >= 7:\n        return str(8 - r)\n    else:\n        return str(7 - r)\n"
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    return max(a // 3 + a % 3, b // 3 + b % 3, c // 3 + c % 3)\n"
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    days = 1\n    b_portion = b\n    c_portion = c\n    while True:\n        if b_portion < 2 * a:\n            b_portion += 2 * a - b_portion\n            if c_portion < 2 * b:\n                days += 1\n                c_portion += 2 * b - c_portion\n            else:\n                break\n        else:\n            break\n    return days\n\na = input()\nb = input()\nc = input()\nprint(solution(a +'' + b +'' + c))"
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = (int(i) for i in stdin.split())\n\n    def solve(a, b, c):\n        dp = [0 for _ in range(b + 1)]\n        dp[0] = a\n        for i in range(1, b + 1):\n            if i % 7!= 0:\n                dp[i] = min(dp[i - 1] + a, dp[i - 3] + c, dp[i - 5] + c)\n            elif i % 7 == 0:\n                dp[i] = min(dp[i - 1] + a, dp[i - 3] + c)\n            if i % 3!= 0:\n                dp[i] = min(dp[i - 1] + a, dp[i - 3] + c)\n            elif i % 3 == 0:\n                dp[i] = min(dp[i - 1] + a)\n            if i % 2!= 0:\n                dp[i] = min(dp[i - 1] + a)\n\n        return dp[-1]\n\n    return str(solve(a, b, c))\n"
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    x, y, z = 1, 2, 3\n    for i in range(7):\n        if a*x + b*y + c*z == 100:\n            return str(i)\n        x += 1\n        y += 1\n        z += 1\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    \u0420\u0435\u0448\u0435\u043d\u0438\u0435 \u043d\u0430\u043c\u043d\u043e\u0433\u043e \u0433\u043e\u0440\u0430\u0437\u0434\u043e \u043f\u0440\u043e\u0449\u0435, \u043d\u0430\u043c\u043d\u043e\u0433\u043e \u0431\u044b\u0441\u0442\u0440\u0435\u0435, \u0447\u0435\u043c \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0435\u043d\u043e \u0432 \u0443\u0441\u043b\u043e\u0432\u0438\u0438\n    \"\"\"\n    a, b, c = (int(x) for x in stdin.split())\n    print(max((a+b+c)//3, (a+b+c)//2, (a+b+c)//3+1))\n    return str(max((a+b+c)//3, (a+b+c)//2, (a+b+c)//3+1))\n\"\"\"\n\u0421\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435\n\u041f\u0435\u0440\u0432\u044b\u043c \u0448\u0430\u0433\u043e\u043c \u0437\u0430\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u0441\u0447\u0438\u0442\u044b\u0432\u0430\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430, \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0432 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e filename. \n\n\u0412\u0442\u043e\u0440\u044b\u043c \u0448\u0430\u0433\u043e\u043c \u043f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u0441\u0447\u0438\u0442\u044b\u0432\u0430\u043d\u0438\u044f \u0444\u0430\u0439\u043b\u0430 \u0437\u0430\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u0432 \u043e\u0442\u043a\u0440\u044b\u0442\u0438\u0438 \u0444\u0430\u0439\u043b\u0430 filename. \n\u041f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u0443 \u0432\u0441\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0444\u0430\u0439\u043b\u0430 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0442 \u043d\u0430\u043c \u0438\u0437\u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e\u043c\u0443 \u0432\u0432\u043e\u0434\u0443, \u0442\u043e \u043e\u0442\u043a\u0440\u044b\u0442\u0438\u0435 \u0444\u0430\u0439\u043b\u0430 \u0434\u043e\u043b\u0436\u043d\u043e \u0438\u043c\u0435\u0442\u044c \u0431\u0443\u043b\u0435\u0432\u044b\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0438\u0441\u0442\u0438\u043d\u0430. \n\n\u0424\u0443\u043d\u043a\u0446\u0438\u044f open() \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043e\u0431\u044a\u0435\u043a\u0442 \u0444\u0430\u0439\u043b\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043e\u0442\u043a\u0440\u044b\u0442\u044c. \u0424\u0443\u043d\u043a\u0446\u0438\u044f open() \u0442\u0430\u043a\u0436\u0435 \u0438\u043c\u0435\u0435\u0442 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440: \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0447\u0442\u0435\u043d\u0438\u044f \u0438\u043b\u0438 \u0437\u0430\u043f\u0438\u0441\u0438, \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u043c \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0439 \u043e\u0431\u044a\u0435\u043a\u0442 \u043a\u043b\u0430\u0441\u0441\u0430 file. \n\u041e\u0431\u044a\u0435\u043a\u0442\u044b \u043a\u043b\u0430\u0441\u0441\u0430 file \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043f\u0443\u0442\u0438 \u043a \u0444\u0430\u0439\u043b\u0443 \u0438 \u0435\u0433\u043e \u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u0438\u0438. \u041f\u0443\u0442\u044c \u043a \u0444\u0430\u0439\u043b\u0443 \u0432 \u0434\u0430\u043d\u043d\u043e\u043c \u043a\u043e\u0434\u0435 \u0437\u0430\u0434\u0430\u043d \u043d\u0435\u043f\u043e\u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0435\u043d\u043d\u043e \u0432 \u0441\u0430\u043c\u043e\u043c \u043d\u0430\u0447\u0430\u043b\u0435 \u0444\u0430\u0439\u043b\u0430. \u041f\u0443\u0442\u044c \u0432 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u0438 open() \u0431\u0443\u0434\u0435\u0442 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0442\u044c \u0441\u0442\u0440\u043e\u043a\u0443, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0443\u044e \u043f\u0443\u0442\u044c \u043a \u0444\u0430\u0439\u043b\u0443. \n\u0421\u0442\u0440\u043e\u043a\u043e\u0432\u044b\u0439 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u0438\u043c\u0435\u0435\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0438\u0437 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430 \u00abr\u00bb, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0435\u0433\u043e \u0447\u0442\u0435\u043d\u0438\u044e. \n\u041f\u0440\u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0438 \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u043a\u043b\u0430\u0441\u0441\u0430 file \u043c\u043e\u0436\u043d\u043e \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u043d\u0435\u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 \u00abw\u00bb \u0438\u043b\u0438 \u00aba\u00bb, \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u044e\u0449\u0438\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 open() \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0442\u044c \u0438\u043b\u0438 \u0434\u043e\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u0444\u0430\u0439\u043b. \n\u0415\u0441\u043b\u0438 \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u0443\u0435\u0442\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u0437\u0430\u043f\u0438\u0441\u044c \u0432 \u0444\u0430\u0439\u043b, \u0441\u0432\u043e\u0439\u0441\u0442\u0432\u043e \u00abw\u00bb \u0438\u043c\u0435\u0435\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0438\u0441\u0442\u0438\u043d\u0430. \u0415\u0441\u043b\u0438 \u0441\u0432\u043e\u0439\u0441\u0442\u0432\u043e \u00abw\u00bb \u0438\u0441\u0442\u0438\u043d\u0430, \u0442\u043e \u0444\u0443\u043d\u043a\u0446\u0438\u044f open() \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043e\u0431\u044a\u0435\u043a\u0442 \u0444\u0430\u0439\u043b\u0430, \u043d\u043e \u043d\u0435 \u0441\u043e\u0437\u0434\u0430\u0435\u0442 \u0435\u0433\u043e. \u041f\u0440\u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0438 \u0444\u0430\u0439\u043b\u0430 \u043c\u043e\u0436\u043d\u043e \u0437\u0430\u0434\u0430\u0442\u044c \u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u0430, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0435 \u0438\u043c\u044f \u0444\u0430\u0439\u043b\u0430. \u0415\u0441\u043b\u0438 \u0432 \u0441\u0432\u043e\u0439\u0441\u0442"
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    [a, b, c] = list(map(int, stdin.split('\\n')[0].split(' ')))\n    return str(max(0, (7 - (b + c - a)) / (b - c)))\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    a, b, c = list(map(int, stdin.split()))\n    m = max(a, b, c)\n    if m == a:\n        if b >= c:\n            print(m)\n        else:\n            print(m + c)\n    elif m == b:\n        if a >= c:\n            print(m)\n        else:\n            print(m + a)\n    else:\n        print(m)\n"
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    arr = [a, b, c]\n    arr.sort()\n    l = arr[0] * 4 + arr[1] * 2 + arr[2]\n    return l"
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.readline().split()))\n    chars = []\n    for _ in range(n * 2):\n        chars.append(list(map(int, stdin.readline().split())))\n\n    return \"\"\n"
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3 4\\n1 2\\n5 6\\n5 7\\n7 4\\n8 9\\n9 8\")\n    YES\n    >>> solution(\"3 4\\n1 2\\n5 6\\n5 7\\n7 4\\n8 9\\n9 8\\n2 5\\n1 1\\n1 1\\n1 2\")\n    NO\n    >>> solution(\"3 4\\n1 2\\n5 6\\n5 7\\n7 4\\n8 9\\n9 8\\n2 5\\n1 1\\n1 1\\n1 2\")\n    YES\n    >>> solution(\"3 4\\n1 2\\n5 6\\n5 7\\n7 4\\n8 9\\n9 8\\n2 5\\n1 1\\n1 1\\n1 2\\n3 4\\n1 2\\n1 1\\n1 1\\n1 2\")\n    YES\n    >>> solution(\"3 4\\n1 2\\n5 6\\n5 7\\n7 4\\n8 9\\n9 8\\n2 5\\n1 1\\n1 1\\n1 2\\n3 4\\n1 2\\n1 1\\n1 1\\n1 2\\n4 5\\n8 4\\n2 2\\n1 1\\n1 1\\n1 1\")\n    NO\n    \"\"\"\n   ..."
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES' if bfs(stdin) else 'NO'\n\n\ndef"
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n    return stdin\n"
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    A = set()\n    B = set()\n    \n    for i in range(n):\n        if i % 2 == 0:\n            A.add(int(stdin.readline()))\n        else:\n            B.add(int(stdin.readline()))\n    \n    A = sorted(list(A))\n    B = sorted(list(B))\n    \n    sumA = sum(A)\n    sumB = sum(B)\n    \n    diff = abs(sumA - sumB)\n    \n    for i in range(len(A)):\n        for j in range(len(B)):\n            if i + j == len(A) - 1:\n                sumA = sumA - A[i] + B[j]\n                sumB = sumB - B[j] + A[i]\n                diff = min(diff, abs(sumA - sumB))\n    \n    return str(diff)\n"
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n\n    # let us make a set A and a set B\n    set_A = set()\n    set_B = set()\n\n    # we add all the elements to set A\n    for i in range(n):\n        set_A.add(i + 1)\n\n    # we add all the elements to set B\n    for i in range(n):\n        set_B.add(i + 2)\n\n    # now we sum all elements in set A and all elements in set B\n    sum_A = sum(set_A)\n    sum_B = sum(set_B)\n\n    # we return the absolute value of the difference between these two sets\n    return abs(sum_A - sum_B)\n"
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    nums = list(range(1, n + 1))\n    nums.sort()\n    while len(nums) > 0:\n        diff = nums[-1] - nums[0]\n        if len(nums) % 2 == 0:\n            nums = nums[:int(len(nums) / 2)]\n        else:\n            nums = nums[:int((len(nums) - 1) / 2)] + nums[int((len(nums) - 1) / 2) + 1:]\n        if diff < abs(nums[0] - nums[-1]):\n            return str(diff)\n    return \"0\"\n\ndef"
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin)"
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(n % 2)"
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n\n    first_part = 0\n    last_part = 0\n    difference = 0\n\n    for i in range(n):\n        first_part += i + 1\n        last_part += n - i\n        difference = abs(first_part - last_part)\n\n    return str(difference)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    _, *seq = map(int, stdin.split())\n    ans = 10 ** 9\n    for i in range(1, len(seq)):\n        ans = min(sum(seq[:i]) - sum(seq[i:]), ans)\n    return str(ans)\n"
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return n - 2 * (n // 2)\n"
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return n % 2\n"
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # the input is a string of characters,\n    # convert it into a list of characters, where each element represents one character\n    seq = list(stdin)\n    # I assume the list of characters is not empty\n    seq = seq[1:-1]\n    if len(seq) % 2 == 1:\n        # if the length of the sequence is odd, then the sequence cannot be regular\n        return 0\n    # if the length of the sequence is even, then the sequence must have an even number of pairs of '(' and ')' characters\n    # check how many pairs of '(' and ')' characters are in the sequence\n    count = 0\n    for i in range(len(seq)):\n        if seq[i] == '(':\n            count += 1\n        elif seq[i] == ')':\n            count -= 1\n        if count < 0:\n            # if the number of '(' characters is less than the number of ')' characters,\n            # then the sequence cannot be regular\n            return 0\n    return count\n\n\ndef"
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    length = int(stdin.split('\\n')[0])\n    brackets = stdin.split('\\n')[1]\n    return sum((((1, 1) * brackets.count(c), 0)[c == '('] for c in brackets)) % 1000000007\n"
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return None\n"
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    length = int(stdin.split('\\n')[0])\n    brackets = stdin.split('\\n')[1]\n    stack = []\n    ret = 0\n    for i in range(length):\n        if brackets[i] == '(':\n            stack.append(i)\n        elif brackets[i] == ')':\n            if stack:\n                stack.pop()\n            else:\n                ret += (length // 2) * (length - i)\n    for i in stack:\n        ret += (length - i)\n    return ret % (10 ** 9 + 7)\n"
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    res = 0\n    n = int(stdin)\n    for i in range(2*n):\n        s = stdin\n        for _ in range(i):\n            s += \"(\"\n        for _ in range(i):\n            s += \")\"\n        res += res_f(s)\n        for _ in range(i):\n            s = s[:-1]\n    return res % (10**9 + 7)\n\ndef"
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    brackets = stdin[1]\n    return n\n"
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    n = int(s[0])\n    s = s[1:]\n    modulo = 1000000007\n\n    if len(s)!= 2 * n:\n        print(0)\n        return 0\n\n    def solve(s: str, f=None, index=0) -> int:\n        if not s:\n            return 1\n        if f is None:\n            f = [0] * len(s)\n        if s[index] == \"(\":\n            f[index] = 1\n            index += 1\n        else:\n            index += 2\n        if index == len(s):\n            return 1\n        return (solve(s, f, index) +\n                solve(s, f, index + 1) +\n                solve(s, f, index + 2)) % modulo\n\n    print(solve(s))\n"
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    stdin = stdin.strip()\n    n = int(stdin)\n    s = stdin[:n]\n    return n * (n + 1) // 2 % 1000000007\n"
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    num = stdin\n    min_len = len(num)\n    for x in range(1, int(num)):\n        if x % 25!= 0 and len(num) < min_len:\n            num = str(x)\n            min_len = len(num)\n    return str(int(num)) if min_len == len(num) else \"-1\"\n"
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # n = stdin\n    # res = 0\n    # while n % 25!= 0:\n    #     n = n - 1\n    #     res += 1\n    # print(res)\n    # return res\n    n = int(stdin)\n    n = n - n%25\n    print(n)\n    if n == 0:\n        return 0\n    print(n%25)\n    return int(n/25) + int(n%25!= 0)\n\nsolution(input())"
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # TODO: implement solution\n    return \"715\""
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds number of moves to obtain number which is divisible by 25.\n\n    Args:\n        stdin (str): Input.\n\n    Returns:\n        str: Number of moves required or -1 if it is impossible to obtain number divisible by 25.\n    \"\"\"\n    # parse input\n    number = int(stdin)\n\n    # make number divisible by 25\n    number_remainder = number % 25\n    if number_remainder == 0:\n        return 0\n    else:\n        number -= number_remainder\n    \n    # count the number of moves\n    i = 0\n    while number > 0:\n        i += 1\n        number_remainder = number % 25\n        if number_remainder == 0:\n            number //= 25\n        else:\n            number -= number_remainder\n\n    if i == 0:\n        return -1\n    else:\n        return i"
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return"
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    solution_1:\n    O(1) time O(1) space\n    \"\"\"\n    n = int(stdin)\n    if n % 25!= 0:\n        return -1\n    else:\n        return len(stdin) - stdin[::-1].find('0') - 1\n\ndef"
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\nfrom math import gcd\n\n\ndef"
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    n = int(stdin)\n    res = n\n    for i in range(0,n-1):\n        res = res//10\n        if res%25 == 0:\n            return i\n    return -1\n"
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    s = [i for i in s if i!= \"0\"]\n    s = sorted(s)\n    digits = \"\".join(s)\n    \n    n = int(digits)\n    \n    if n % 25 == 0:\n        return len(digits)\n    \n    res = []\n    while n % 25!= 0:\n        n = n + 1\n        res.append(n)\n        \n    return -1 if len(res) == 0 else min(res)\n"
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def swap_mutation(c: int, swap_count: int, swap_list: list):\n        swap_list[c - 1] = swap_count\n        swap_count += 1\n\n    def sort_mutation(swap_list: list):\n        for i in range(len(swap_list)):\n            swap_list[i] = min(swap_list[i], swap_list[i - 1])\n\n    n = int(stdin.split()[0])\n    s = stdin.split()[1]\n    swap_list = [None for _ in range(n)]\n\n    i = 0\n    swap_count = 1\n    while i < n:\n        if swap_list[i] is None or swap_list[i] > swap_count:\n            swap_count += 1\n            swap_mutation(i, swap_count, swap_list)\n\n        if i + 1 < n and swap_list[i] is not None and swap_list[i + 1] is None:\n            swap_mutation(i + 1, swap_count, swap_list)\n\n        if s[i] > s[i + 1]:\n            if swap_list[i] is not None and swap_list[i] > swap_count:\n                swap_count += 1\n                swap_mutation(i, swap_count, swap_list)\n            else:\n                swap_mutation(i + 1, swap_count, swap_list)\n        i += 1\n\n    sort_mutation(swap_list)\n    return''.join(map(str, swap_list))\n\n\nsolution(stdin)\n"
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s, n = stdin.split()\n    s = list(s)\n    n = int(n)\n    res = int(1e9)\n    for i in range(n):\n        cnt = 0\n        c = 0\n        for j in range(n - i):\n            if s[j] > s[j + 1]:\n                cnt += 1\n                if c > 0:\n                    if cnt > res:\n                        res = cnt\n                        c = 1\n                    elif cnt == res:\n                        c += 1\n                s[j], s[j + 1] = s[j + 1], s[j]\n        if cnt < res:\n            res = cnt\n            c = 0\n    print(res)\n    for i in s:\n        print(i, end=\"\")\n    return res\n\nsolution(stdin)"
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    input = [s for s in stdin.split(\"\\n\")]\n    n = int(input[0])\n    s = input[1]\n    result = 1\n    coloring = [1] * n\n    for i in range(n):\n        if i == 0:\n            for j in range(1, n):\n                if s[j] < s[j - 1]:\n                    result += 1\n                    coloring[j] = result\n            continue\n        for j in range(i, n):\n            if s[j] < s[j - 1]:\n                if coloring[j] == coloring[j - 1]:\n                    result += 1\n                    coloring[j] = result\n                else:\n                    result = coloring[j]\n                    coloring[j] = result\n    print(result)\n    return str(coloring)\n\nprint(solution(input()))"
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin\n    res = 1\n    pre = s[0]\n    lst = [0] * n\n    for i in range(1, n):\n        if s[i] < pre:\n            lst[i] = res\n            res += 1\n        else:\n            lst[i] = lst[i-1]\n        pre = s[i]\n    print(res)\n    print(' '.join(map(str, lst)))\n    return ''\n"
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\"\n    for i in range(1, len(s)):\n        if s[i] < s[i-1]:\n            if i < len(s)-1:\n                for j in range(i+1, len(s)):\n                    if s[j] > s[j-1]:\n                        c[j] = c[i-1] + 1\n                        s[i] = s[j]\n                        s[j] = s[i]\n                        break\n    return c\n    \"\"\""
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    s = stdin[0:N]\n    s = sorted(s)\n    s = \"\".join(s)\n    return s\n    \n"
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if stdin.count(stdin[0]) == len(stdin) else \"NO\"\n"
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    words = [stdin for _ in range(n)]\n    print(n)\n    print(*words)\n    return ''\n"
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\ndef"
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if set(stdin) == set(sorted(stdin)) and len(stdin) == len(set(stdin)) else \"NO\"\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Gets stdin and returns answer.\"\"\"\n    n = stdin\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if stdin[i] in stdin[j] and stdin[j] in stdin[i]:\n                return 'NO'\n    return 'YES'\n"
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\nreturn 'YES' if reorder(stdin) else 'NO'\n\ndef"
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # Don't print anything, modify stdin in-place instead.\n    # return None  # No need for return, as we're modifying stdin.\n\n    stdin = stdin.split('\\n')\n    # print(stdin)\n    strings = []\n\n    for i in stdin:\n        strings.append(i)\n    # print(strings)\n\n    if len(strings) == 1:\n        print(\"YES\")\n        print(strings[0])\n    else:\n        \n        count = 0\n        for i in range(len(strings)):\n            if i == 0:\n                if len(strings[i]) == len(strings[i+1]):\n                    count += 1\n                    continue\n                else:\n                    count = 0\n                    continue\n            else:\n                if len(strings[i]) == len(strings[i-1]):\n                    count += 1\n                    continue\n                else:\n                    count = 0\n                    continue\n        \n        if count == len(strings):\n            print(\"YES\")\n            for i in strings:\n                print(i)\n        else:\n            print(\"NO\")\n        "
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    s = s.replace(\"qwerty\", \"qwert\")\n    s = s.replace(\"abacaba\", \"abca\")\n    if s == stdin:\n        print(\"YES\")\n        for i in stdin:\n            print(i)\n    else:\n        print(\"NO\")\n"
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \n\ndef"
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n  return \"YES\" if len(set(stdin)) < len(stdin) else \"NO\"\n  \n\ndef"
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    difficulty = list(map(int, stdin.split()))\n    first = 0\n    last = n - 1\n    solved = 0\n    while first < last:\n        solved += 1\n        if difficulty[first] <= k:\n            first += 1\n        if difficulty[last] <= k:\n            last -= 1\n    return str(solved)\n"
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split('\\n')[0].split()]\n    arr = [int(x) for x in stdin.split('\\n')[1].split()]\n\n    left = 0\n    right = len(arr) - 1\n\n    while left < right:\n        if arr[left] <= k and arr[right] <= k:\n            left += 1\n            right -= 1\n        elif arr[left] > k and arr[right] <= k:\n            left += 1\n        elif arr[left] <= k and arr[right] > k:\n            right -= 1\n        else:\n            break\n\n    return n - left - 1"
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n\nreturn \"\"\n"
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    num_problems, skill = map(int, stdin.split(' '))\n    difficulties = map(int, stdin.split(' ')[1:])\n    solved_problems = 0\n    current_index = 0\n    for index in range(num_problems):\n        if skill >= difficulties[current_index]:\n            solved_problems += 1\n            current_index += 1\n        else:\n            current_index -= 1\n    return str(solved_problems)\n"
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    problems = list(map(int, stdin.split(' ')))\n    m = []\n    if k > max(problems):\n        return 0\n    for i in range(len(problems)):\n        if max(m) < problems[i] <= k:\n            m.append(problems[i])\n    return len(m)\n"
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(\" \"))\n    a = list(map(int, stdin.split(\" \")))\n    l = 0\n    r = n - 1\n    ans = 0\n    while l < n and r > 0:\n        if a[l] < k:\n            ans += n - l\n            l += 1\n        else:\n            r -= 1\n    return str(ans)\n"
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    array = list(map(int, stdin.split()))\n    left = 0\n    right = n - 1\n    solved = 0\n    while left < right:\n        diff = abs(array[left] - array[right])\n        if diff <= k:\n            solved += 1\n            left += 1\n        elif array[left] > k:\n            solved += 1\n            left += 1\n        else:\n            right -= 1\n    return str(solved)\n"
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nimport sys\nimport math\n\ndef"
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(a + b - min(a, b))"
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"This function can find minimal perimeter Vova can obtain.\"\"\"\n    a, b = [int(i) for i in stdin.strip().split()]\n    return str(max(a * 2, b * 2))\n"
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = list(map(int, stdin.split(' ')))\n    return a * b"
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(a * b)"
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(max(a + b, 2 * min(a, b)))\n"
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split(' '))\n    return str(a * b)"
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def is_rectangle(p1, p2, p3, p4) -> bool:\n        xs = [p1[0], p2[0], p3[0], p4[0]]\n        ys = [p1[1], p2[1], p3[1], p4[1]]\n        xs.sort()\n        ys.sort()\n        return (xs[0] == xs[2] and xs[1] == xs[3] and\n                ys[0] == ys[1] and ys[2] == ys[3])\n\n    a, b = [int(x) for x in stdin.split()]\n    for p1 in [(0, 0), (0, 1), (0, 2), (0, 3),\n               (1, 0), (1, 1), (1, 2), (1, 3),\n               (2, 0), (2, 1), (2, 2), (2, 3)]:\n        p2, p3 = p1[0] + 2, p1[1] + 2\n        if p2 < a or p3 < a or p2 > b or p3 > b:\n            continue\n        p4 = (p3 + p2) // 2\n        if is_rectangle(p1, p2, p3, p4):\n            break\n    else:\n        return 'Impossible'\n\n    return str(p2 * p3)\n"
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.strip().split(' '))\n    return str(a * b)"
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    a, b = [int(i) for i in stdin.split(' ')]\n    if a + b >= 2 and (a ** 2 + b ** 2) ** 0.5 <= 1:\n        return a * b\n    else:\n        return b * a + 2 * (a + b)\n"
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin\n    return \"\"\n    \n"
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    s = stdin\n    if N % 2 == 1:\n        print('NO')\n        return\n    S = []\n    for i in range(len(s)):\n        S.append(str(int(s[i] == 'a')))\n    print('YES')\n    print(''.join(S))\n"
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"abacbecfd\")\n    'YES\\n001010101'\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    s = stdin.split(\"\\n\")[1]\n    # print(s)\n    s_r = sorted(s)\n    if s_r == list(s):\n        return \"NO\"\n\n    ans = \"\"\n    # print(s_r)\n    l = len(s)\n    for i in range(l):\n        if s[i] == s_r[i]:\n            ans += \"0\"\n        else:\n            ans += \"1\"\n    return ans\n"
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    pass\n    return \"YES\" if stdin.isalpha() else \"NO\"\n"
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().rstrip()\n    coloring = ''\n    for i in range(n):\n        if s[i] not in coloring:\n            coloring += s[i]\n    coloring = coloring * 2\n    if coloring == '01010101' or coloring == '10101010':\n        return 'YES\\n010\\n010'\n    return 'NO'\n"
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin\n\n    dp = [0] * (n + 1)\n    dp[1] = 1\n    for i in range(2, n + 1):\n        if s[i - 1] < s[i - 2]:\n            dp[i] = dp[i - 1]\n        else:\n            dp[i] = dp[i - 1] + 1\n    return 'YES' if dp[n] == 1 else 'NO'\n"
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return 'YES' if it is possible to color the string so that after coloring it can become sorted by some sequence of swaps.\n    Otherwise, return 'NO'.\"\"\"\n    n = int(stdin)\n    s = stdin\n    if len(s) < 2:\n        return 'YES'\n    s = sorted(s)\n    if s!= stdin:\n        return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = list(stdin)\n    n = len(s)\n    colors = [0] * n\n\n    # mark all colors\n    for i in range(n):\n        if s[i] == '0':\n            colors[i] = 1\n    if colors.count(1)!= n // 2:\n        return \"NO\"\n\n    # try to solve\n    for i in range(n):\n        for j in range(n):\n            # same color\n            if s[i] == s[j]:\n                continue\n            # swap\n            colors[i] = 1\n            colors[j] = 1\n            # all is ok\n            if colors.count(0) == 0:\n                return \"YES\"\n            colors[i] = 0\n            colors[j] = 0\n\n    return \"NO\"\n"
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    s = stdin.split(\"\\n\")[1]\n    letters = {chr(i) for i in range(ord(\"a\"), ord(\"a\") + n)}\n    coloring = \"0\" * n\n    if len(letters) == n:\n        return \"YES\" + coloring\n    i = 0\n    while i < n:\n        if s[i] in letters:\n            letters.remove(s[i])\n            coloring = coloring[: i] + \"1\" + coloring[i + 1 :]\n            i += 1\n        i += 1\n    if len(letters) == 0:\n        return \"YES\" + coloring\n    return \"NO\"\n"
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    _, a, b = stdin.split(' ')\n    a, b = int(a), int(b)\n    return '%d' % (a+b)"
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    _, y1, y2 = stdin.split()\n    y1, y2 = int(y1), int(y2)\n    x = 100 / (y1 - y2)\n    if x % 1!= 0:\n        return -1\n    return y1 * x\n\nfor _ in range(int(input())):\n    print(solution(input()))\n"
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A == 1 or B == 1:\n        return -1\n    else:\n        return int((A / B) * B)\n"
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B = [int(x) for x in stdin.split(' ')]\n    l = [x for x in range(A, B + 1)]\n    for x in l:\n        if x % 0.08 == 0 and x // 0.08 % 1 == 0:\n            return '{} yen'.format(x)\n        elif x % 0.1 == 0 and x // 0.1 % 1 == 0:\n            return '{} yen'.format(x)\n    return -1\n"
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B = stdin.split()\n    A, B = int(A), int(B)\n    result = []\n    for i in range(A, B + 1):\n        result.append(sum([j * 0.1 for j in range(1, i + 1)]))\n    if min(result) < B:\n        return str(min(result))\n    else:\n        return \"No such number\"\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the minimum price before tax for a product.\n\n    Args:\n        stdin (str): the input string\n\n    Returns:\n        str: the lowest price before tax\n    \"\"\"\n    A, B = map(int, stdin.split())\n    for price in range(A, B+1):\n        if price * 0.08 <= 2:\n            if price * 0.1 <= 2.5:\n                return price\n\n    return -1\n"
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B = [int(i) for i in stdin.splitlines()]\n    if A == B:\n        return A\n    return -1\n    \n    \n"
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A == 1 and B == 1:\n        return 0\n    if A >= B:\n        return A\n\n    import math\n    if (B - A) == 1:\n        return math.floor((A + B) / 2)\n\n    if (B - A) == 2:\n        return math.floor((A + B) / 2) - 1\n    else:\n        return math.floor((A + B) / 2) - 1\n"
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split(' '))\n    \n    price_list = []\n    for price in range(A, B + 1):\n        price_before_tax = price\n        price_after_tax = price * 1.08\n        if price_after_tax < price_before_tax:\n            continue\n        price_before_tax = round(price_before_tax)\n        price_after_tax = round(price_after_tax)\n        if price_after_tax == price_before_tax:\n            price_list.append(price_before_tax)\n        else:\n            pass\n    if price_list:\n        return min(price_list)\n    else:\n        return -1\n"
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    prices = range(1, B+1)\n    for price in prices:\n        if price * 0.08 == price * 0.1:\n            return price\n    return -1\n"
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(' ')]\n    k = min(k, n // 2)\n    if n < k or k < 1:\n        return \"NO\"\n    a = [0 for _ in range(k)]\n    s = 0\n    for i in range(k):\n        a[i] = i + 1\n        s += a[i]\n    if s > n:\n        return \"NO\"\n    if s < n:\n        for i in range(k):\n            a[i] += (n - s)\n            if a[i] <= 2 * a[i - 1]:\n                return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    if n == 1 or n == k:\n        return \"YES\\n1\"\n    if n > k:\n        return \"NO\\n\"\n    a = list(map(int, stdin.readline().split()))\n    if k >= n + 1:\n        return \"YES\\n\" + \" \".join(map(str, a))\n    if n + 1 - k > sum(a):\n        return \"NO\\n\"\n    for i in range(k - 1):\n        if a[i] >= a[i + 1] - 2 * a[i]:\n            return \"NO\\n\"\n    a_diff = []\n    for i in range(k):\n        a_diff.append(a[i] + i)\n    if max(a_diff) <= n - k:\n        return \"YES\\n\" + \" \".join(map(str, a_diff))\n    return \"NO\\n\"\n"
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # the array of days\n    days = [int(i) for i in stdin.split(' ')]\n    # the array of problems solved in one day\n    problems_solved = [int(i) for i in stdin.split(' ')]\n    # the list of problems solved in next days\n    next_days_problems = [int(i) for i in stdin.split(' ')]\n\n    for i in range(len(days)):\n        if days[i] < 1 or days[i] > 10 ** 9 or problems_solved[i] < 1 or problems_solved[i] > 10 ** 5:\n            print(\"NO\")\n            return\n\n    if sum(days)!= problems_solved[-1]:\n        print(\"NO\")\n        return\n\n    if sum(days) < problems_solved[-1]:\n        print(\"NO\")\n        return\n\n    # the array of solutions\n    solutions = []\n    # the maximum number of problems solved in the next day\n    maximum_problems_solved = 0\n    # the number of problems solved in the current day\n    current_day_problems = 0\n    for i in range(len(days)):\n        # if the number of problems in the next day is greater than the maximum\n        if next_days_problems[i] > maximum_problems_solved:\n            maximum_problems_solved = next_days_problems[i]\n            solutions.append(0)\n        # if the number of problems in the next day is equal to the maximum\n        elif next_days_problems[i] == maximum_problems_solved:\n            solutions.append(0)\n        # if the number of problems in the next day is less than the maximum\n        elif next_days_problems[i] < maximum_problems_solved:\n            current_day_problems = maximum_problems_solved - next_days_problems[i]\n            solutions.append(maximum_problems_solved - current_day_problems)\n            current_day_problems = 0\n            maximum_problems_solved = next_days_problems[i]\n            solutions.append(maximum_problems_solved)\n\n    if sum(solutions) > problems_solved[-1] or sum(solutions) < problems_solved[0]:\n        print(\"NO\")\n        return\n\n    print(\"YES\")\n    print(\" \".join(map(str, solutions)))\n\nsolution(input())"
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    if k < 2 * n or n <= 0 or k <= 0:\n        return \"NO\"\n    if n * k > 10**9 or n < 0 or k < 0:\n        return \"NO\"\n\n    k -= 1\n    a = 0\n    while k > 0 and a < n:\n        a = (k % (2 * n)) + 1\n        k -= a\n        n -= 1\n    return \"YES\" if a <= 2 * n and k == 0 else \"NO\"\n"
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    res = 'YES'\n    if n < 1 or n > 10**9 or k < 1 or k > 10**5:\n        res = 'NO'\n    else:\n        a = list()\n        while len(a) < k:\n            a.append(1)\n        while len(a) > k:\n            a.pop()\n        while sum(a)!= n:\n            if len(a) >= k:\n                res = 'NO'\n                break\n            a[-1] = 2 * a[-1]\n        if len(a) > k:\n            res = 'NO'\n    return res\n"
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    k = int(stdin.split(' ')[1])\n    p = [0]\n    p.extend(list(map(int, stdin.split(' '))))\n    p.append(0)\n    dp = [0] * (k + 1)\n    dp[1] = p[1]\n    for i in range(2, k + 1):\n        dp[i] = max(dp[i - 1], 2 * dp[i - 1])\n    res = 'YES' if dp[k] >= n else 'NO'\n    if res == 'NO':\n        return res\n    p.pop(0)\n    res = list()\n    for i in range(1, k + 1):\n        res.append(dp[i] - dp[i - 1])\n    return''.join(map(str, res))\n\nprint(solution(input()))\n\n'''\n2 3\n2 4\n3 5\n'''\n\ndef"
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(' ')]\n    if k > n:\n        return 'NO'\n    if n == k:\n        return 'YES' +'' + str(n)\n    if k == 1:\n        return 'YES' +'' + '1'\n\n    current = 1\n    previous = 1\n    output = [0] * k\n    for i in range(k):\n        if n > current * 2:\n            output[i] = min(current * 2, n)\n        elif n > current:\n            output[i] = current\n        elif n == current:\n            output[i] = current\n            break\n        else:\n            output[i] = 0\n            break\n        previous = current\n        current *= 2\n    return 'YES' +'' +''.join([str(x) for x in output])\n"
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    ans = [0] * k\n    \n    for i in range(n):\n        ans[i % k] += 1\n        ans[(i + 1) % k] = ans[(i + 1) % k] + 1\n        \n        if ans[(i + 1) % k] > 2 * ans[i % k]:\n            return 'NO'\n        \n    return 'YES\\n' +''.join(map(str, ans))\n"
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(i) for i in stdin.split()]\n    if n < k:\n        return \"NO\"\n    if k == 1:\n        return \"YES\"\n    if k == 2 and n > 2:\n        return \"NO\"\n    a = [0 for _ in range(k)]\n    a[0] = k\n    a[1] = min(2 * a[0], n)\n    for i in range(2, k):\n        a[i] = min(2 * a[i - 1], a[i - 2] + n)\n    return \"YES\" if a[-1] < n else \"NO\"\n"
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    https://app.codility.com/demo/results/trainingBEKHHF-EFS/\n    \"\"\"\n    n, r = [int(x) for x in stdin.split('\\n')[:2]]\n    a = [int(x) for x in stdin.split('\\n')[2:]]\n    a.sort()\n    i = 0\n    j = n - 1\n    ans = 0\n    while i < n and j >= 0 and a[i] <= r:\n        r += a[j]\n        ans += 1\n        j -= 1\n        i += 1\n    return ans\n\ndef"
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    # print(stdin)\n    n, r = [int(i) for i in stdin.split('\\n')]\n\n    projects = []\n    for _ in range(n):\n        projects.append([int(i) for i in stdin.split('\\n')[-1].split()])\n\n    projects.sort(key=lambda x: x[0])\n    # print(projects)\n    # print('r', r)\n    # print('r', r)\n    # print('projects', projects)\n    # print('len(projects)', len(projects))\n    # print(projects)\n    # print(max(projects, key=lambda x: x[0]))\n    # print('projects[-1][0]', projects[-1][0])\n    # print('projects[0][0]', projects[0][0])\n    # print('projects[0][1]', projects[0][1])\n    # print('max(projects, key=lambda x: x[0])[0]', max(projects, key=lambda x: x[0])[0])\n    # print('min(projects, key=lambda x: x[0])[0]', min(projects, key=lambda x: x[0])[0])\n    # print(len(projects[0]))\n    # print('range', range(len(projects[0])))\n    # print('len(projects[0])', len(projects[0]))\n    # print('len(projects)', len(projects))\n    for i in range(1, len(projects)):\n        if projects[i][0] - projects[i-1][0] <= 0:\n            continue\n        if projects[i][0] - projects[i-1][0] <= r:\n            r = r - (projects[i][0] - projects[i-1][0])\n            # print('r', r)\n    return r\n\nprint(solution(\"\"\"3 4\n4 6\n10 -2\n8 -1\n\"\"\"))\n"
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    n, r = map(int, stdin.split())\n    projects = [list(map(int, stdin.split())) for _ in range(n)]\n\n    dp = [[0 for _ in range(r + 1)] for _ in range(n)]\n    dp[0][projects[0][0]] = projects[0][1]\n    dp[0][0] = 0\n\n    for i in range(1, n):\n        dp[i][0] = dp[i - 1][0] + projects[i][1]\n        for j in range(1, r + 1):\n            dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - projects[i][0]] + projects[i][1])\n    return dp[n - 1][r]\n"
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.readlines()\n    n, r = [int(x) for x in input[0].split()]\n    minim = int(input[1])\n    maxim = int(input[2])\n    a = []\n    b = []\n    for i in range(n):\n        a_, b_ = [int(x) for x in input[i + 1].split()]\n        a.append(a_)\n        b.append(b_)\n    a = sorted(a, key=lambda x: -x)\n    b = sorted(b, key=lambda x: -x)\n    minim = 0 if minim < 0 else minim\n    maxim = 30000 if maxim > 30000 else maxim\n    ans = 0\n    for i in range(len(a)):\n        if a[i] <= r <= a[i] + b[i]:\n            ans += 1\n            r += b[i]\n        if r <= minim:\n            break\n    return ans\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    projects = [map(int, stdin.split()) for i in range(n)]\n    projects = sorted(projects, key=lambda x: (x[0], -x[1]))\n    best_sum = 0\n    current_sum = 0\n    for project in projects:\n        current_sum += project[1]\n        if current_sum + r >= 0:\n            best_sum += 1\n            current_sum += r\n    return best_sum\n"
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    for each line in stdin\n    we have a line of two integers, r and d\n    r - rating of polycarp\n    d - change in rating\n    we need to check how many lines\n    the r changes in and the maximum\n    \"\"\"\n    pass\n\n\ndef"
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, R = map(int, stdin.split('\\n')[0].split(' '))\n    projects = [map(int, stdin.split('\\n')[i].split(' ')) for i in range(1, N + 1)]\n\n    projects = sorted(projects, key=lambda x: x[1] / x[0], reverse=True)\n\n    project_size = 0\n    total_rating = R\n    for a, b in projects:\n        if total_rating >= a:\n            project_size += 1\n            total_rating += b\n    return project_size\n"
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # n, r = list(map(int, stdin.readline().split()))\n    # s = []\n    # for i in range(n):\n    #     s.append(list(map(int, stdin.readline().split())))\n    # s.sort(key=lambda x: x[0], reverse=True)\n    # s.sort(key=lambda x: x[1], reverse=True)\n    #\n    # r1, r2 = r, r\n    #\n    # max_size = 0\n    # while r2 >= 0 and r1 >= 0:\n    #     for i in s:\n    #         if i[0] <= r1 and i[1] >= 0:\n    #             r2 -= i[1]\n    #             r1 += i[1]\n    #             max_size += 1\n    #             break\n    #         if i[0] > r2:\n    #             break\n    #\n    # print(max_size)\n    # return max_size\n"
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    numberOfProjects = int(stdin.readline().split()[0])\n    initialRating = int(stdin.readline().split()[0])\n    projects = []\n    for i in range(numberOfProjects):\n        project = [int(s) for s in stdin.readline().split()]\n        projects.append(project)\n    maxSize = 0\n    for size in range(numberOfProjects + 1):\n        rating = initialRating\n        for i in range(numberOfProjects - size + 1):\n            if projects[i][1] + rating >= 0:\n                if rating + projects[i + size - 1][1] >= 0:\n                    if size > maxSize:\n                        maxSize = size\n                        break\n                    rating += projects[i + size - 1][1]\n    return maxSize\n"
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n  def process(row: list) -> int:\n    # \u041f\u043e\u0441\u0442\u0440\u043e\u0438\u0442\u044c \u043d\u043e\u0432\u0443\u044e \u043c\u0430\u0442\u0440\u0438\u0446\u0443 \u0441 \u0434\u043b\u0438\u043d\u043e\u0439 \u043c\u0438\u043d\u0438\u043c\u0443\u043c \u0432 2 \u0440\u0430\u0437\u0430 \u043c\u0435\u043d\u044c\u0448\u0435\u0439\n    row = row[:len(row)//2]\n    matrix = [row]\n    # \u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u043a\u0430\u0436\u0434\u0443\u044e \u043d\u043e\u0432\u0443\u044e \u0441\u0442\u0440\u043e\u043a\u0443 \u0432 \u043c\u0430\u0442\u0440\u0438\u0446\u0443, \u0435\u0441\u043b\u0438 \u043e\u043d\u0430 \u043d\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0442\u0435\u0445\u043d\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u0447\u0438\u0441\u0435\u043b\n    for r in row:\n      if r not in row and r not in row_new:\n        matrix.append(row_new)\n        break\n    # \u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u0441\u0442\u043e\u043b\u0431\u0435\u0446 \u0432 \u043c\u0430\u0442\u0440\u0438\u0446\u0443\n    for r in row:\n      if r not in row and r not in row_new and r not in row_new_last:\n        matrix.append(row_new_last)\n        break\n    # \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043a\u0430\u0440\u0442\u0443 \u043f\u0440\u043e\u0431\u0435\u043b\u043e\u0432 \u0434\u043b\u044f \u0441\u043a\u043b\u0435\u0439\u043a\u0438 \u0432 \u043e\u0434\u0438\u043d \u043c\u0430\u0441\u0441\u0438\u0432\n    space ='' * len(row)\n    # \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043a\u0430\u0440\u0442\u0443 \u043f\u0440\u043e\u0431\u0435\u043b\u043e\u0432 \u0434\u043b\u044f \u0441\u043a\u043b\u0435\u0439\u043a\u0438 \u0432 \u043e\u0434\u0438\u043d \u043c\u0430\u0441\u0441\u0438\u0432\n    space_ ='' * len(row)\n    # \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043c\u0430\u0441\u0441\u0438\u0432 \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432\n    columns = [[] for _ in range(len(row))]\n    # \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043c\u0430\u0441\u0441\u0438\u0432 \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432 \u043f\u0440\u043e\u0431\u0435\u043b\u043e\u0432\n    columns_ = [[] for _ in range(len(row))]\n    # \u041f\u0440\u043e\u0445\u043e\u0434\u0438\u043c\u0441\u044f \u043f\u043e \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u0441\u0442\u043e\u043b\u0431\u0446\u0443\n    for row_i, r in enumerate(row):\n      # \u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u0441\u0442\u043e\u043b\u0431\u0435\u0446 \u0432 \u043a\u0430\u0436\u0434\u0443\u044e \u043c\u0430\u0442\u0440\u0438\u0446\u0443\n      if r not in row and r not in row_new and r not in row_new_last:\n        matrix.append(row_new_last)\n        break\n      # \u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u0441\u0442\u043e\u043b\u0431\u0435\u0446 \u0432 \u043a\u0430\u0436\u0434\u0443\u044e \u043c\u0430\u0442\u0440\u0438\u0446\u0443\n      if r not in row and r not in row_new and r not in row_new_last:\n        matrix.append(row"
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\ndef"
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution for the given input.\n    \n    Args:\n        stdin (str): The input as a string.\n    \n    Returns:\n        str: The solution to the given problem.\n    \"\"\"\n\n    n = int(stdin.split(\"\\n\")[0])\n    nums = [int(n) for n in stdin.split(\"\\n\")[1].split()]\n    matrix = []\n    result = []\n    for i in range(n):\n        matrix.append([0 for _ in range(n)])\n    for i in range(n ** 2):\n        if not matrix[n - 1 - i // n][i % n] == 0:\n            if not matrix[n - 1 - i // n][i % n] == nums[i]:\n                return \"NO\"\n        else:\n            matrix[n - 1 - i // n][i % n] = nums[i]\n    for i in range(n):\n        result.append(\" \".join(str(n) for n in matrix[i]))\n    return \"YES\\n\" + \"\\n\".join(result)\n"
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    matrix = [stdin[i:i+n] for i in range(0, n**2, n)]\n    matrix = [list(map(int, l.split())) for l in matrix]\n    matrix = [list(i) for i in zip(*matrix)]\n    l = [sum([1 for i in mat if i == x]) for mat in matrix for x in set(mat)]\n    if max(l) > n:\n        return 'NO'\n    for mat in matrix:\n        if sum([1 for i in mat if i == x])!= n:\n            return 'NO'\n    if sum([sum(mat) for mat in matrix])!= n*n:\n        return 'NO'\n    return 'YES'\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = [int(x) for x in stdin.split()]\n    n2 = int(sqrt(len(arr)))\n    for i in range(n2):\n        for j in range(i, n2):\n            sub_arr = arr[i*n2:j*n2]\n            sub_arr.reverse()\n            sub_arr = sub_arr + arr[j*n2:(i+1)*n2]\n            if sub_arr == sub_arr[::-1]:\n                return 'YES'\n    return 'NO'"
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n\n    n = int(lines[0])\n    nums = [int(x) for x in lines[1].split()]\n    d = dict()\n    for num in nums:\n        if num in d:\n            d[num] += 1\n        else:\n            d[num] = 1\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                if d[nums[i]] == 1:\n                    if nums[i] not in d:\n                        d[nums[i]] += 1\n                    else:\n                        d[nums[i]] = 2\n            if i > j:\n                if d[nums[i]] == 1:\n                    if nums[j] not in d:\n                        d[nums[j]] += 1\n                    else:\n                        d[nums[j]] = 2\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                if d[nums[i]] == 1:\n                    if nums[i] not in d:\n                        d[nums[i]] += 1\n                    else:\n                        d[nums[i]] = 2\n            if i > j:\n                if d[nums[i]] == 1:\n                    if nums[j] not in d:\n                        d[nums[j]] += 1\n                    else:\n                        d[nums[j]] = 2\n\n    for num in nums:\n        if d[num]!= 2:\n            return 'NO'\n\n    matrix = [[0 for _ in range(n)] for _ in range(n)]\n\n    for num in nums:\n        matrix[num - 1][num - 1] = num\n\n    for i in range(n):\n        for j in range(n):\n            matrix[i][j] = nums[n * i + j]\n\n    result = ''\n\n    for line in matrix:\n        result +=''.join(map(str, line)) + '\\n'\n\n    return result\n"
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    for i in range(n):\n        a, b = map(int, stdin.split())\n        if a <= r and b >= 0:\n            r += b\n        elif a >= r and b <= 0:\n            r += b\n        else:\n            return 'NO'\n    return 'YES'\n"
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n, r = [int(i) for i in lines[0].split(' ')]\n    s = [i.split(' ') for i in lines[1:]]\n    s = [[int(i[0]), int(i[1])] for i in s]\n    arr = [i[0] for i in s]\n    rmin = [i[1] for i in s]\n    res = 'YES'\n    for i in range(n):\n        if r < sum(arr[i:]) + rmin[i]:\n            res = 'NO'\n            break\n        else:\n            r -= arr[i]\n            r += rmin[i]\n    return res\n"
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, r = [int(x) for x in stdin.split()]\n    a = []\n    for i in range(n):\n        a.append([int(x) for x in stdin.split()])\n    ans = []\n    a.sort()\n    i = 0\n    while i < n and r >= a[i][0]:\n        r += a[i][1]\n        i += 1\n    if r < 0:\n        print(\"NO\")\n    else:\n        print(\"YES\")\nsolution(input())\n"
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    num_projects, rating = [int(n) for n in stdin.split('\\n')[:2]]\n    projects = []\n    for i in range(num_projects):\n        projects.append(list(map(int, stdin.split('\\n')[2 + i].split())))\n    answer = 'YES' if __solution(projects, rating) else 'NO'\n    return answer\n\ndef"
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution(\"4 4\\n5 2\\n5 -3\\n2 1\\n4 -2\\n\")\n    'YES'\n    '''\n    # start by reading the input and defining some parameters\n    n, r = map(int, stdin.split())\n    p = [list(map(int, stdin.split())) for _ in range(n)]\n\n    # now we create a graph\n    # we'll use the dictionary data structure\n    # so we need to start by creating a dictionary of dictionaries\n    d = {}\n    for i in range(n):\n        # it is very important to use tuples here\n        d[i] = {}\n        for j in range(n):\n            d[i][j] = (p[i][j], p[j][0] - p[j][1])\n\n    # next we need to know if the graph is connected\n    # it is, if there is no way that it's not connected\n    def is_connected(i: int, j: int, d: dict) -> bool:\n        # i.e. we check if the graph is connected\n        # this is done by starting from a particular node\n        # then from there we can follow all the edges\n        # we can just start at the node itself\n        # we need to use the stack here\n        visited = {i}\n        stack = [i]\n        while stack:\n            n = stack.pop()\n            for m in d[n]:\n                if m not in visited:\n                    if d[n][m][0] >= r:\n                        return False\n                    visited.add(m)\n                    stack.append(m)\n        return True\n\n    # now we check the connectedness\n    # we can just take the minimum number of edges\n    # that connect all the nodes\n    # we can also just start at the first node\n    # and see how many edges we can go through\n    connected = set()\n    def count_edges(i: int, j: int, d: dict) -> int:\n        # we need to store the number of edges\n        # that connect all the nodes\n        # so we just need to count all the nodes\n        # that have at least one edge\n        count = 0\n        for k in range(n):\n            if j!= k and d[i][k][0] >= r:\n                count += 1\n        return count\n    edges = 1\n    # we need to add one to the minimum number of edges\n    # because we start at a particular node\n    while edges <= n:\n        min_edges = n\n        min_i = 0\n        for i in range(n):\n            for j in range(i + 1, n):\n                if i in connected or j in connected:\n                    continue\n                if is_connected(i, j, d):\n                    count = count_edges(i, j, d)\n                    if count < min_edges:\n                        min_edges = count\n                        min_i = i\n        if min_edges == n:\n            # this is not possible\n            return \"NO\"\n        connected.add(min_i)\n        edges += 1\n    # we have found a possible order, so we can return \"YES\"\n    return \"YES\""
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.readline().split())\n    a = [list(map(int, stdin.readline().split())) for i in range(n)]\n    a.sort(key=lambda x: -x[0])\n    res = 'YES'\n    r_after_start = r\n    for i in range(n):\n        if a[i][0] > r_after_start:\n            res = 'NO'\n            break\n        r_after_start += a[i][1]\n    print(res)\n    return res\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    [n, r] = [int(x) for x in stdin.split(' ')]\n    prices = [int(x) for x in stdin.split('\\n')[1:]]\n    if sum([x[0] for x in prices]) > r:\n        return 'NO'\n    for i in range(len(prices)):\n        if prices[i][1] > prices[i][0]:\n            return 'NO'\n    return 'YES'\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    m = [int(x) for x in stdin.split()]\n    n = m[0]\n    r = m[1]\n    a = []\n    b = []\n    for i in range(0, n):\n        ab = [int(x) for x in stdin.split()]\n        a.append(ab[0])\n        b.append(ab[1])\n    a = [0] + a\n    b = [0] + b\n    dp = [False] * (r + 1)\n    for i in range(1, n + 1):\n        for j in range(max(0, a[i] - b[i]), r + 1):\n            dp[j] = dp[j] or (j >= a[i])\n    return 'YES' if dp[r] else 'NO'\n    pass"
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, r = [int(x) for x in stdin.split('\\n')[:2]]\n    a = [int(x) for x in stdin.split('\\n')[2:]]\n    cnt = 0\n    for i in range(n):\n        a[i] = [a[i], 0]\n    while a:\n        if sum([i[0] for i in a]) < r:\n            for i in range(n):\n                if a[i][0] > 0:\n                    a[i][1] += 1\n                    a[i][0] -= 1\n                    if a[i][0] == 0:\n                        a.pop(i)\n                        break\n            cnt += 1\n        else:\n            break\n    if cnt == n:\n        return 'YES'\n    else:\n        return 'NO'\n"
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # Read input\n    n, r = map(int, stdin.split())\n    project = []\n    for _ in range(n):\n        project.append(list(map(int, stdin.split())))\n\n    # Check project 1\n    for i in range(n):\n        if project[i][0] > r:\n            print('NO')\n            return\n\n    # Check project 2\n    for i in range(n):\n        for j in range(i + 1, n):\n            if project[i][0] + project[j][1] > r:\n                print('NO')\n                return\n\n    # Check project 3\n    for i in range(n):\n        for j in range(n):\n            if i!= j:\n                if project[i][0] + project[j][1] > r:\n                    print('NO')\n                    return\n\n    # Check project 4\n    for i in range(n):\n        for j in range(n):\n            if i!= j:\n                for k in range(n):\n                    if k!= i and k!= j:\n                        if project[i][0] + project[j][1] + project[k][1] > r:\n                            print('NO')\n                            return\n\n    # Check project 5\n    for i in range(n):\n        for j in range(n):\n            if i!= j:\n                for k in range(n):\n                    if k!= i and k!= j:\n                        for l in range(n):\n                            if l!= i and l!= j and l!= k:\n                                if project[i][0] + project[j][1] + project[k][1] + project[l][1] > r:\n                                    print('NO')\n                                    return\n\n    print('YES')\n    return\n\n\nsolution(stdin)\n"
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = [int(i) for i in stdin.split('\\n')[0].split()]\n    platforms = [int(i) for i in stdin.split('\\n')[1].split()]\n    platforms = sorted(platforms)\n    platforms = [str(i) for i in platforms]\n    platforms = [str(i) for i in range(1, m + 1)]\n    count = 0\n    counts = [0]\n    for i in range(0, len(platforms)):\n        counts.append(counts[i] + len(platforms[i]))\n    can = False\n    for i in range(0, m + 1):\n        if d % platforms[i] == 0 and d // platforms[i] < m:\n            can = True\n            break\n    if not can:\n        return \"NO\"\n    s = \"\"\n    for i in range(0, n):\n        s += str(i) + \" \"\n    s += \"\\n\"\n    platforms = [str(i) for i in range(1, m + 1)]\n    platforms = [str(i) for i in range(1, m + 1)]\n    i = 0\n    j = 0\n    res = [0 for i in range(n)]\n    for i in range(0, m + 1):\n        if d // platforms[i] > 0:\n            res[j] = i\n            j += d // platforms[i]\n    for i in range(0, m + 1):\n        for j in range(counts[i], counts[i + 1]):\n            res[j] = i\n    for i in range(0, n):\n        s += str(res[i]) + \" \"\n    return s\n"
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = [int(x) for x in stdin.split()]\n    platforms = [int(x) for x in stdin.split('\\n')[1].split()]\n    result = [0]\n    for x in range(1, m):\n        result.append(x)\n    for x in range(m, n+1):\n        result.append(x)\n    result.append(n+1)\n    print('YES' if can_reach_target(0, n+1, result) else 'NO')\n    for x in range(n+1):\n        if x == 0 or x == n+1:\n            continue\n        if result[x] == result[x + 1]:\n            print('0')\n        else:\n            print(result[x], end=' ')\n    return ''\n\ndef"
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = list(map(int, stdin.split('\\n')[0].split()))\n    a = list(map(int, stdin.split('\\n')[1].split()))\n    a = [0] + a\n    p = [0]\n    for i in range(1, m):\n        p.append(p[-1] + a[i])\n    \n    a = [0] * (n + 1)\n    a[0] = 1\n    for i in range(m):\n        l = p[i]\n        r = p[i+1]\n        for j in range(l, r):\n            a[j] = i + 1\n    if a[n] == 0:\n        return 'NO'\n    return 'YES\\n' +''.join(map(str, a[1:]))\n"
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = map(int, stdin.split(' '))\n    c = list(map(int, stdin.split(' ')))\n    c.sort(reverse=True)\n    a = [0] * n\n    for i in range(m):\n        k = c[i]\n        for j in range(k):\n            if j == 0 or j == k - 1:\n                a[j] = i + 1\n            else:\n                a[j] = 0\n    for i in range(d):\n        for j in range(n):\n            if a[j] == i + 1:\n                a[j] = 0\n    if 1 in a:\n        return 'NO'\n    return 'YES\\n' +''.join(list(map(str, a)))\n\nsolution('7 3 2\\n1 2 1\\n')\nsolution('10 1 11\\n1\\n')\nsolution('10 1 5\\n2\\n')\n\n\n    [n, m, d] = stdin.split(' ')\n    c = list(map(int, stdin.split(' ')))\n    print('YES')\n    print(' '.join(list(map(str, a))))\n"
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = [int(x) for x in stdin.split()]\n    c = [int(x) for x in stdin.split()[1::]]\n\n    # write your code in Python 3.6\n    # using list comprehension\n    # c = [int(x) for x in stdin.split()[1::]]\n    a = [0] * (n + 2)\n    for i in range(m):\n        a[c[i]] = i + 1\n    m = max(a)\n    a = [0] + [x if x <= m else m for x in a] + [n + 1]\n    count = 0\n    for x in range(n + 1):\n        if a[x + 1] - a[x] > d:\n            break\n        count += 1\n    if count == n + 1:\n        return \"YES\\n\" + \" \".join([str(x) for x in a[1:-1]])\n    return \"NO\"\n\n\nprint(solution(\"7 3 2\\n1 2 1\"))\nprint(solution(\"10 1 11\\n1\"))\nprint(solution(\"10 1 5\\n2\"))\n"
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = map(int, stdin.split('\\n')[0].split())\n    c = [int(i) for i in stdin.split('\\n')[1].split()]\n\n    if d > n:\n        return \"NO\"\n    a = [0] * n\n    t = []\n    t.append(0)\n    for i in range(len(c)):\n        t.append(t[i] + c[i])\n\n    for i in range(n):\n        if t[i + 1] - t[i] <= d:\n            a[i] = i + 1\n        else:\n            for j in range(i, n):\n                if t[j + 1] - t[i] <= d:\n                    a[j] = i + 1\n                    break\n                elif j == n - 1:\n                    return \"NO\"\n\n    return \"YES\\n\" + \" \".join(str(e) for e in a)\n"
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = [int(n) for n in stdin.split()]\n    c = [int(n) for n in stdin.split()]\n    a = [0 for i in range(n + 2)]\n    x = 0\n    for i in range(1, m + 1):\n        for j in range(1, d + 1):\n            if x + j >= n + 1:\n                break\n            if c[i - 1] == 1:\n                x = x + j\n                a[x] = i\n            else:\n                break\n    if x!= n + 1:\n        return \"NO\"\n    else:\n        return \"YES\" +''.join([str(a[i]) for i in range(n + 1)])\n"
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def dfs(idx: int) -> bool:\n        if idx == n + 1:\n            return True\n        if dp[idx]!= 0:\n            return dp[idx]\n        for i in range(n + 1):\n            if i + idx + c[i] <= n + 1:\n                if i == 0 or i == idx + c[i] or dp[idx - i] == 1:\n                    dp[idx] = i\n                    if dfs(idx + 1):\n                        return True\n                    dp[idx] = 0\n        return False\n\n    n, m, d = map(int, stdin.split())\n    c = list(map(int, stdin.split()))\n    dp = [0 for _ in range(n + 1)]\n    if dfs(0):\n        print('YES')\n        ans = ['0']\n        for i in range(1, n + 1):\n            if dp[i] == 1:\n                ans.append(str(i))\n                ans.append(' ')\n        print(' '.join(ans[:-1]))\n    else:\n        print('NO')\n\nsolution(input())\n"
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    width, platforms, max_jump = map(int, stdin.split())\n    platforms = [int(i) for i in stdin.split()[1:]]\n    queue = [(0, 0)]\n    visited = set(queue)\n    answer = [0] * (width + 2)\n    while queue:\n        pos, jump = queue.pop(0)\n        if pos == width + 1:\n            return \"YES\"\n        for i in range(jump + 1, max_jump + 1):\n            if i in platforms:\n                if (pos + i) % platforms[platforms.index(i)] == 0:\n                    queue.append((pos + i, i))\n                    visited.add((pos + i, i))\n    return \"NO\"\n"
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Compute the number of jumps required to reach a certain position from the origin.\n    \"\"\"\n    n, m, d = [int(x) for x in stdin.split('\\n')[0].split(' ')]\n    c = [int(x) for x in stdin.split('\\n')[1].split(' ')]\n\n    m = len(c)\n    c = [0] + c\n    c.append(n + 1)\n    c.sort()\n\n    # only need to consider d, if c is sorted\n    # if d > c[n + 1] - c[n]:\n    #     return 'NO'\n\n    # n + 1, n - 1, n, n + 2, n + 3,...\n    # from 0 to n + 1\n    # to n + 1\n    # from n + 1 to n + 1 + d\n\n    # n + 1, n + 2, n + 3, n + 4, n + 5,...\n    # from 0 to n + 1\n    # to n + 1 + d\n    # from n + 1 + d to n + 1 + d + d\n    # to n + 1 + 2 * d\n    # from n + 1 + 2 * d to n + 1 + 2 * d + d\n    # to n + 1 + 3 * d\n    # from n + 1 + 3 * d to n + 1 + 3 * d + d\n    #...\n\n    # d > (n + 1 + 2 * d + d) - (n + 1 + 3 * d + d)\n\n    # d > (n + 1) - n - 1\n    if d > (n + 1) - n:\n        return 'NO'\n\n    # d <= n + 1 - n - 1\n    # d <= n + 1 - n - 1 + 1\n    # d <= n + 1 - n - 1 + 2\n    # d <= n + 1 - n - 1 + 3\n    #...\n    # d <= n + 1 - n - 1 + m - 1\n    # d <= n + 1 - n - 1 + m\n    # d <= (n + 1) - n + 1 - m + 1\n    # d <= n - m + 1\n\n    # d <= (n - m + 1)\n    if d > (n - m + 1):\n        return 'NO'\n\n    res = [0] * n\n    for i in range(m):\n        # if i == m - 1:\n        #     res[c[i + 1] - c[i] - 1] = i + 1\n        # else:\n        #     res[c[i + 1] - c[i] - 1] = i + 1\n        res[c[i + 1] - c[i] - 1] = i + 1\n\n    return 'YES' +'' +''.join(map(str, res))\n"
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    import collections\n    import heapq\n\n    s, t = stdin.split(\"\\n\")\n    s = collections.deque(s)\n    t = collections.deque(t)\n\n    heap = []\n    while s and t:\n        if s[0] < t[0]:\n            heapq.heappush(heap, s.popleft())\n        else:\n            heapq.heappush(heap, t.popleft())\n    heapq.heappush(heap, s.popleft())\n\n    return \"\".join(heap)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    t = stdin[1]\n    n = len(t)\n    ans = 0\n    for i in range(1, len(s) - n + 1):\n        if all(s[j] == t[j - i] for j in range(i, i + n)):\n            ans = max(ans, len(s[:i] + s[i + n:]))\n    return str(ans)"
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    t = stdin[1]\n    if len(s) < len(t):\n        return 0\n    if len(s) == len(t) == 1:\n        if s[0] == t[0]:\n            return 0\n        else:\n            return 1\n    len_t = len(t)\n    dp = [0] * len(s)\n    for i in range(len(s)):\n        if s[i] == t[0]:\n            dp[i] = 1\n            for j in range(1, len_t):\n                if i + j < len(s):\n                    if s[i + j] == t[j]:\n                        dp[i + j] = dp[i] + 1\n                    else:\n                        dp[i + j] = dp[i]\n                else:\n                    break\n            if dp[i + len_t - 1] >= len_t:\n                break\n    return len_t - dp[i + len_t - 1]\n\n\nsolution(\"abcdebd\")\nsolution(\"asd\")\nsolution(\"asdf\")\nsolution(\"asdfasdf\")\nsolution(\"a\")\nsolution(\"abcde\")\nsolution(\"abcdea\")\nsolution(\"bbaba\")\nsolution(\"bb\")\nsolution(\"ab\")\nsolution(\"abba\")\nsolution(\"baaba\")\nsolution(\"bbbaa\")\nsolution(\"bbbb\")\nsolution(\"bbbba\")\nsolution(\"bbbbb\")\nsolution(\"bbbbbb\")\nsolution(\"bbbbbbb\")\nsolution(\"bbbbbbbb\")\nsolution(\"bbbbbbbbb\")\nsolution(\"bbbbbbbbbb\")\nsolution(\"bbbbbbbbbbb\")\nsolution(\"bbbbbbbbbbbb\")\nsolution(\"bbbbbbbbbbbbb\")\nsolution(\"bbbbbbbbbbbbbb\")\nsolution(\"bbbbbbbbbbbbbbb\")\nsolution(\"bbbbbbbbbbbbbbbb\")\nsolution(\"bbbbbbbbbbbbbbbbb\")\nsolution(\"bbbbbbbbbbbbbbbbbb\")\nsolution(\"bbbbbbbbbbbbbbbbbbb\")\nsolution(\"bbbbbbbbbbbbbbbbbbbb\")\nsolution(\"bbbbbbbbbbbbbbbbbbbbb\")\nsolution(\"bbbbbbbbbbbbbbbbbbbbbb\")\nsolution(\"bbbbbbbbbbbbbbbbbbbbbbb\")\nsolution(\"bbbbbbbbbbbbbbbbbbbbbbbb\")\nsolution(\"bbbbbbbbbbbbbbbbbbbbbbbbb\")\nsolution(\"bbbbbbbbbbbbbbbbbbbbbbbbbb\")\nsolution(\"bbbbbbbbbbbbbbbbbbbbbbbbbbb\")\nsolution(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbb\")\nsolution(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbb\")\nsolution(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\")\nsolution(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\")\nsolution(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\")\nsolution(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\")\nsolution(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\")\nsolution(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\")\nsolution(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\")\nsolution(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\")\nsolution(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\")\nsolution(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\")\nsolution(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\")\nsolution(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\")\nsolution(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\")\nsolution(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\")\nsolution(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\")\nsolution(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\")\nsolution(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\")\nsolution(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\")\nsolution(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\")\nsolution(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\")\nsolution(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\")\nsolution(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\")\nsolution(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\")\nsolution(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\")\nsolution(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\")\nsolution(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\")\nsolution(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\")\nsolution(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\")\nsolution(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\")\nsolution(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\")\nsolution(\"bbbbbbbbbbbb"
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\n\ndef"
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def is_subsequence(s1: str, s2: str) -> bool:\n        for i, s in enumerate(s1):\n            if s not in s2:\n                return False\n            elif s == s2[0]:\n                break\n            else:\n                s2 = s2[1:]\n        return True\n\n    s, t = stdin.split(\"\\n\")\n    m = 0\n    for i, c in enumerate(s):\n        if is_subsequence(s[:i] + s[i + 1:], t):\n            m = i + 1\n    return m"
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.splitlines()\n    t = s[1]\n    l = len(s[0])\n    r = len(t)\n    dp = [[0 for _ in range(l + 1)] for _ in range(r + 1)]\n    for i in range(l):\n        for j in range(r):\n            if s[0][i] == t[j]:\n                dp[i + 1][j + 1] = dp[i][j] + 1\n            else:\n                dp[i + 1][j + 1] = max(dp[i][j + 1], dp[i + 1][j])\n    m = dp[l][r]\n    l = 0\n    for i in range(l, r + 1):\n        if dp[l][i] == m:\n            l = i\n    return m\n\nprint(solution(stdin))"
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    t = stdin[1]\n    return len(s) - len(s.replace(t, \"\"))\n"
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    t = stdin[1]\n    dp = [[0 for j in range(len(s))] for i in range(len(t))]\n    for i in range(len(t)):\n        for j in range(len(s)):\n            if i == 0 and j == 0:\n                dp[i][j] = 1\n            elif i == 0:\n                if s[j] == t[i]:\n                    dp[i][j] = 1\n            elif j == 0:\n                if t[i] == s[j]:\n                    dp[i][j] = 1\n            else:\n                if s[j] == t[i]:\n                    dp[i][j] = dp[i - 1][j] + 1\n                else:\n                    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    print(dp[len(t) - 1][len(s) - 1])\n    return s[0:dp[len(t) - 1][len(s) - 1] - 1]\n\n\nsolution(\"asdfasdf\")\n"
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    x = float(stdin)\n    x -= 0.5\n    a = int(x)\n    b = int(x * 10)\n    return str(a) + \" \" + str(b)\n\nprint(solution('2.572479'))"
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    return '3 9'\n"
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4.024922\")\n    9 9\n    \"\"\"\n    x = stdin\n    x = float(x)\n    if x < 0 or x > 5:\n        raise ValueError\n    y = x ** 3\n    if y % 1!= 0:\n        raise ValueError\n    if y > 10 ** 6:\n        raise ValueError\n    y = int(y)\n    z = x ** 2\n    z = int(z)\n    return y, z\n"
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n    n = float(stdin)\n    for i in range(1,10):\n        for j in range(1,10):\n            if round(pow(n,i),6) == j:\n                return str(i)+' '+str(j)\n\nprint(solution(input()))\n\n'''\n\n\ndef"
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x = stdin\n    x = float(x)\n    a = int(x)\n    b = int(x*10)\n    return str(a) + \" \" + str(b)\n\nprint(solution(\"4.024922\"))"
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x = float(stdin)\n    if x < 1.5:\n        print(1, 10)\n    elif 1.5 <= x <= 2.5:\n        print(3, 10)\n    elif 2.5 < x < 3.5:\n        print(5, 10)\n    elif 3.5 <= x <= 4.5:\n        print(7, 10)\n    elif 4.5 < x <= 5.5:\n        print(9, 10)\n    else:\n        print(11, 10)"
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('1.5')\n    2 2\n    >>> solution('0.24')\n    4 3\n    >>> solution('2.0')\n    10 9\n    >>> solution('2.5')\n    9 9\n    >>> solution('3.0')\n    9 9\n    >>> solution('3.5')\n    9 9\n    >>> solution('4.0')\n    10 10\n    >>> solution('4.5')\n    10 10\n    >>> solution('5.0')\n    10 10\n    >>> solution('5.5')\n    10 10\n    >>> solution('6.0')\n    10 10\n    >>> solution('6.5')\n    10 10\n    >>> solution('7.0')\n    10 10\n    >>> solution('7.5')\n    10 10\n    >>> solution('8.0')\n    10 10\n    >>> solution('8.5')\n    10 10\n    >>> solution('9.0')\n    10 10\n    >>> solution('9.5')\n    10 10\n    >>> solution('10.0')\n    10 10\n    >>> solution('10.5')\n    10 10\n    >>> solution('11.0')\n    10 10\n    >>> solution('11.5')\n    10 10\n    >>> solution('12.0')\n    10 10\n    >>> solution('12.5')\n    10 10\n    >>> solution('13.0')\n    10 10\n    >>> solution('13.5')\n    10 10\n    >>> solution('14.0')\n    10 10\n    >>> solution('14.5')\n    10 10\n    >>> solution('15.0')\n    10 10\n    >>> solution('15.5')\n    10 10\n    >>> solution('16.0')\n    10 10\n    >>> solution('16.5')\n    10 10\n    >>> solution('17.0')\n    10 10\n    >>> solution('17.5')\n    10 10\n    >>> solution('18.0')\n    10 10\n    >>> solution('18.5')\n    10 10\n    >>> solution('19.0')\n    10 10\n    >>> solution('19.5')\n    10 10\n    >>> solution('20.0')\n    10 10\n    >>> solution('20.5')\n    10 10\n    >>> solution('21.0')\n    10 10\n    >>> solution('21.5')\n    10 10\n    >>> solution('22.0')\n    10 10\n    >>> solution('22.5')\n    10 10\n    >>> solution('23.0')\n    10 10\n    >>> solution('23.5')\n    10 10\n    >>> solution('24.0')\n    10 10\n    >>> solution('24.5')\n    10 10\n    >>> solution('25.0')\n    10 10\n    >>> solution('25.5')\n    10 10\n    >>> solution('26.0')\n    10 10\n    >>> solution('26.5')\n    10 10\n    >>> solution('27.0')\n    10 10\n    >>> solution('27.5')\n    10 10\n    >>> solution('28.0')\n    10 10\n    >>> solution('28.5')\n    10 10\n    >>> solution('29.0')\n    10 10\n    >>> solution('29.5')\n    10 10\n    >>> solution('30.0')\n    10 10\n    >>> solution('30.5')\n    10 10\n    >>> solution('31.0')\n    10 10\n    >>> solution('31.5')\n    10 10\n    >>> solution('32.0')\n    10 10\n    >>> solution('32.5')\n    10 10\n    >>> solution('33.0')\n    10 10\n    >>> solution('33.5')\n    10 10\n    >>> solution('34.0')\n    10 10\n    >>> solution('34.5')\n    10 10\n    >>> solution('35.0')\n    10 10\n    >>> solution('35.5')\n    10 10\n    >>> solution('36.0')\n    10 10\n    >>> solution('36.5')\n    10 10\n    >>> solution('37.0')\n    10 10\n    >>> solution('37.5')\n    10 10\n    >>> solution('38.0')\n    10 10\n    >>> solution('38.5')\n    10 10\n    >>> solution('39.0')\n    10 10\n    >>> solution('39.5')\n    10 10\n    >>> solution('40.0')\n    10 10\n    >>> solution('40.5')\n    10 10\n    >>> solution('41.0')\n    10 10\n    >>> solution('41.5')\n    10 10\n    >>> solution('42.0')\n    10 10\n    >>> solution('42.5')\n    10 10\n    >>> solution('43.0')\n    10 10\n    >>> solution('43.5')\n    10 10\n    >>> solution('44.0')\n    10 10\n    >>> solution('44.5')\n    10 10\n    >>> solution('45.0')\n    10 10\n    >>> solution('45.5')\n    10 10\n    >>> solution('46.0')\n    10 10\n    >>> solution('46.5')\n    10 10\n    >>> solution('47.0')\n    10 10\n    >>> solution('47.5')\n    10 10\n    >>> solution('48.0')\n    10 10\n    >>> solution('48.5')\n    10 10\n    >>> solution('49.0')\n    10 10\n    >>> solution('49.5')\n    10 10\n    >>> solution('50.0')\n    10 10\n    >>> solution('50.5')\n    10 10\n    >>> solution('51.0')\n    10 10\n    >>> solution('51.5')\n    10 10\n    >>> solution('52.0')\n    10 10\n    >>> solution('52.5')\n    10 10\n    >>> solution('53.0')\n    10 10\n    >>> solution('53.5')\n    10 10\n    >>> solution('54.0')\n    10 10\n    >>> solution('54.5')\n    10 10\n    >>> solution('55.0')\n    10 10\n    >>> solution('55.5')\n    10 10\n    >>> solution('56.0')\n    10 10\n    >>> solution('56.5')\n    10 10\n    >>> solution('57.0')\n    10 10\n    >>> solution('57.5')\n    10 10\n    >>> solution('58.0')\n    10 10\n    >>> solution('58.5')\n    10 10\n    >>> solution('59.0')\n    10 10\n    >>> solution('59.5')\n    10 10\n    >>> solution('60.0')\n    10 10\n    >>> solution('60.5')\n    10 10\n    >>> solution('61.0')\n    10 10\n    >>> solution('61.5')\n    10 10\n    >>> solution('62.0')\n    10 10\n    >>> solution('62.5')\n    10 10\n    >>> solution('63.0')\n    10 10\n    >>> solution('63.5')\n    10 10\n    >>> solution('64.0')\n    10 10\n    >>> solution('64.5')\n    10 10\n    >>> solution('65.0')\n    10 10\n    >>> solution('65.5')\n    10 10\n    >>> solution('66.0')\n    10 10\n    >>> solution('66.5')\n    10 10\n    >>> solution('67.0')\n    10 10\n    >>> solution('67.5')\n    10 10\n    >>> solution('68.0')\n    10 10\n    >>> solution('68.5')\n    10 10\n    >>> solution('69.0')\n    10 10\n    >>> solution('69.5')\n    10 10\n    >>> solution('70.0')\n    10 10\n    >>> solution('70.5')\n    10 10\n    >>> solution('71.0')\n    10 10\n    >>> solution('71.5')\n    10 10\n    >>> solution('72.0')\n    10 10\n    >>> solution('72.5')\n    10 10\n    >>> solution('73.0')\n    10 10\n    >>> solution('73.5')\n    10 10\n    >>> solution('74"
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x = float(stdin)\n    a = x / 0.1\n    b = round(a)\n    c = x * 10\n    if b == 0:\n        return str(1) + \" \" + str(1)\n    if b < 5:\n        return str(b) + \" \" + str(b)\n    else:\n        return str(b) + \" \" + str(b + 1)\n"
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \n    # ----- TODO -----\n    return \"\""
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x = stdin\n    x = float(x)\n    \n    x = round(x, 6)\n    if x >= 5:\n        x = round(x, 6)\n        y = round(x, 6)\n        return str(y) + \" \" + str(x)\n    else:\n        x = round(x, 6)\n        y = round(x, 6)\n        return str(y) + \" \" + str(x)\n"
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = [int(num) for num in stdin.split(' ')]\n    if n < d + 1:\n        return \"NO\"\n    if n == d + 1 and k == 1:\n        return \"YES\"\n    if n - 1 > d + 1:\n        return \"NO\"\n    if n - 1 == d + 1 and k == 2:\n        return \"YES\"\n    graph = {i: set() for i in range(1, n + 1)}\n    for _ in range(n - 1):\n        from_, to = [int(num) for num in stdin.split(' ')]\n        graph[from_].add(to)\n        graph[to].add(from_)\n    paths = set()\n    for v in graph:\n        if len(graph[v]) < d:\n            paths.add(v)\n    return \"YES\" if paths == set([n]) else \"NO\"\n"
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = map(int, stdin.split())\n    if k >= n or d >= n or d >= 2 * k:\n        return \"NO\"\n    if n == 2 and d == 1:\n        return \"YES\\n2\\n1\\n1\\n1\\n1\"\n    edges = []\n    for _ in range(n - 1):\n        x, y = map(int, stdin.split())\n        edges.append((min(x, y), max(x, y)))\n    edges.sort()\n    root = None\n    for i in range(1, n):\n        if d - edges[i - 1][1] > 0:\n            break\n        if edges[i - 1][0] == edges[i][1] and d - edges[i - 1][1] <= k:\n            root = edges[i - 1][0]\n    if root == None:\n        return \"NO\"\n    trees = []\n    for x, y in edges:\n        if y == root:\n            continue\n        if x == root:\n            trees.append((x, y))\n        elif x == y:\n            return \"NO\"\n        else:\n            if d - y <= k:\n                trees.append((x, y))\n            else:\n                return \"NO\"\n    return \"YES\\n\" + \"\\n\".join(map(str, trees))\n"
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def check_condition():\n        n, d, k = map(int, stdin.split())\n        if k > d or n < 3:\n            return \"NO\"\n        return \"YES\"\n    print(check_condition())\n    for i in range(1, n):\n        if i < d:\n            print(i, i + 1)\n        else:\n            print(i, i + 1, i - 1)\n"
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = map(int, stdin.split())\n    if n - 1 > k * (k - 1):\n        return \"NO\"\n    else:\n        ans = [[0, 1]]\n        curr = [1]\n        last = [1]\n        count = 1\n        while True:\n            neighbor = []\n            for _ in range(len(curr) - 1):\n                u = curr.pop()\n                if u in last:\n                    last.remove(u)\n                for v in last:\n                    if u!= v and [u, v] not in ans and [v, u] not in ans:\n                        neighbor.append(v)\n                        if len(neighbor) >= k:\n                            break\n            if not neighbor:\n                break\n            count += 1\n            ans.append([u, neighbor[0]])\n            ans.append([neighbor[0], u])\n            curr.append(neighbor[0])\n            last = neighbor\n            if len(curr) >= k:\n                break\n        if len(ans) < n - 1:\n            return \"NO\"\n        else:\n            ans = sorted([(a[0], a[1]) for a in ans if a[0]!= a[1]])\n            for i in range(len(ans)):\n                ans[i] = str(ans[i][0]) + \" \" + str(ans[i][1])\n            return \"YES\\n\" + \"\\n\".join(ans)"
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    (n, d, k) = [int(x) for x in stdin.split(' ')]\n    if n <= 0 or d < 1 or k < 1 or n > 2 * 10 ** 5 or d > n or k > n:\n        return \"NO\"\n\n    tree = []\n    for x in range(n):\n        tree.append([])\n\n    for x in range(n - 1):\n        a, b = [int(y) for y in stdin.split(' ')]\n        a -= 1\n        b -= 1\n        tree[a].append(b)\n        tree[b].append(a)\n\n    degrees = {}\n    for x in range(n):\n        degrees[x] = len(tree[x])\n    if d > n - 1 or k > n - 1 or d * k > n:\n        return \"NO\"\n    shortest_path = {}\n    for x in range(n):\n        for y in tree[x]:\n            if x not in shortest_path:\n                shortest_path[x] = [0, []]\n            if y not in shortest_path:\n                shortest_path[y] = [0, []]\n            if shortest_path[x][0] == 0:\n                shortest_path[x][1] = [y]\n            else:\n                shortest_path[x][1] = shortest_path[x][1] + [y]\n            if shortest_path[y][0] == 0:\n                shortest_path[y][1] = [x]\n            else:\n                shortest_path[y][1] = shortest_path[y][1] + [x]\n            if shortest_path[x][0] < shortest_path[y][0]:\n                shortest_path[y][0] = shortest_path[x][0] + 1\n            if shortest_path[y][0] < shortest_path[x][0]:\n                shortest_path[x][0] = shortest_path[y][0] + 1\n        if degrees[x] > k:\n            return \"NO\"\n\n    return \"YES\" + '\\n' + '\\n'.join(\n        [' '.join([str(z) for z in x]) for x in shortest_path.values()])\n"
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = map(int, stdin.split())\n    g = {}\n\n    for _ in range(n - 1):\n        u, v = map(int, stdin.split())\n        g[u] = g.get(u, []) + [v]\n        g[v] = g.get(v, []) + [u]\n\n    p = [-1] * n\n    q = [1] * n\n    f = [None] * n\n    t = [0] * n\n\n    def get(x):\n        while x!= -1:\n            x = p[x]\n        return x\n\n    def union(x, y):\n        if get(x) == get(y):\n            return False\n        else:\n            p[get(x)] = get(y)\n            q[get(y)] += q[get(x)]\n            return True\n\n    def has_path(x, y):\n        return get(x) == get(y)\n\n    def path(x, y):\n        if get(x) == get(y):\n            return False\n        else:\n            t[get(x)] += 1\n            if t[get(x)] == q[get(x)]:\n                return False\n            else:\n                p[get(x)] = get(y)\n                return True\n\n    def dfs(x):\n        f[x] = True\n        for y in g[x]:\n            if not has_path(x, y) or not dfs(y):\n                return False\n            if not union(x, y):\n                return False\n        t[get(x)] += 1\n        if t[get(x)] == q[get(x)]:\n            return True\n        return False\n\n    if dfs(1):\n        for x, y in g[1]:\n            print(x, y)\n    else:\n        print(\"NO\")\n    return ''"
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\" Your solution goes here. \"\"\"\n    [n, d, k] = [int(x) for x in stdin.split(' ')]\n    res = find(n, d, k)\n    if res:\n        res = 'YES\\n' + '\\n'.join([f'{i} {j}' for i, j in res])\n    else:\n        res = 'NO'\n    return res\n\n\ndef"
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    (n, d, k) = list(map(int, stdin.split()))\n    if n < k + 1:\n        return \"NO\"\n    if k < d:\n        return \"NO\"\n    \n    # n x n matrix filled with 0s\n    matrix = [[0]*n for i in range(n)]\n    \n    # Initialize the graph with 2 neighbours for every vertex\n    for i in range(n):\n        for j in range(n):\n            matrix[i][j] = 2\n\n    for i in range(n):\n        matrix[i][i] = 1\n    \n    # Iterate over vertices\n    for i in range(n):\n        for j in range(n):\n            # Loop over neighbours of i and check that distance between them is d\n            for n in range(i+1, n):\n                if matrix[i][n] == 2:\n                    if matrix[n][j] == 2:\n                        matrix[i][j] = matrix[j][i] = 1\n                if matrix[i][n] + matrix[n][j] <= k:\n                    matrix[i][j] = matrix[j][i] = matrix[i][n] + matrix[n][j]\n\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j]!= 2:\n                return \"NO\"\n\n    return \"YES\"\n"
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = [int(x) for x in stdin.split(' ')]\n    if d >= n - 1:\n        return \"YES\"\n    if k == 0:\n        return \"NO\"\n    nodes = [Node(i + 1) for i in range(n)]\n    edges = set()\n    for _ in range(n - 1):\n        i, j = [int(x) for x in stdin.split(' ')]\n        if i > j:\n            i, j = j, i\n        edges.add(Edge(i, j))\n        nodes[i - 1].add_neighbor(nodes[j - 1])\n        nodes[j - 1].add_neighbor(nodes[i - 1])\n    diameter = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            path = bfs(nodes[i], nodes[j])\n            diameter = max(diameter, path[-1].weight)\n    for e in edges:\n        if e.u.degree == k or e.v.degree == k:\n            continue\n        if (e.u.degree + e.v.degree) == k:\n            diameter = max(diameter, e.weight)\n    if diameter >= d:\n        return \"NO\"\n    return \"YES\\n\" + '\\n'.join(str(edge) for edge in edges)\n\n\ndef"
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n    n = a + b\n    if x >= n:\n        return ''.join(sorted(stdin, reverse=True))\n    return '0' * (a - x) + '1' * (b - x) + ''.join(sorted(stdin, reverse=True))\n"
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = [int(s) for s in stdin.split(\" \")]\n    \n    def gen():\n        zero = '0' * a\n        one = '1' * b\n        i = 0\n        while True:\n            s = zero + one + '0' * i + '1' * i\n            for j in range(len(s) - x):\n                yield s[j:j + x]\n            i += 1\n\n    return \"\".join(gen())\n\n\n\ndef"
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n    a, b, x = map(int, stdin.split(' '))\n    if b == 0:\n        return str(a * x)\n    return ''.join(['0' if i < b else '1' for i in range(a + b)])\n    \n    \n    \n    \n    \n"
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = list(map(int, stdin.split()))\n    zero_count = a - x\n    one_count = b - x\n    if x < 0 or zero_count < 0 or one_count < 0 or a + b < x + 2:\n        raise Exception(\n            f\"Invalid input: the input requires {x} 1s and {x} 0s to fulfill the conditions, \"\n            f\"but {a} 0s and {b} 1s are given\"\n        )\n    if x == 0:\n        return \"1\" * a + \"0\" * b\n    if x == one_count:\n        return \"1\" * a + \"0\" * b\n    if x == zero_count:\n        return \"0\" * a + \"1\" * b\n    if x > zero_count:\n        return \"1\" * a + \"0\" * (b - x) + \"1\" * (x - zero_count)\n    return \"0\" * a + \"1\" * (b - x) + \"1\" * (x - zero_count)\n"
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def f(a: int, b: int, x: int) -> str:\n        if a == 0 or b == 0:\n            return \"0\" * a + \"1\" * b\n        else:\n            r = \"\"\n            if x > 0:\n                r = \"0\" * x + \"1\" * (a + b - x) + \"0\" * (b - x)\n            else:\n                r = \"1\" * a + \"0\" * b\n            return r\n\n    def dfs(a, b, x):\n        if a == 0 and b == 0:\n            return True\n        if a < 0 or b < 0:\n            return False\n        if a == 0 and x == 0:\n            return True\n        if x < 0:\n            return False\n\n        if not dfs(a - 1, b, x - 1):\n            return False\n\n        if not dfs(a, b - 1, x):\n            return False\n\n        return True\n\n    a, b, x = stdin.split(\" \")\n    a, b, x = int(a), int(b), int(x)\n    if dfs(a, b, x):\n        return f(a, b, x)\n    return \"Impossible\"\n"
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    answer = []\n\n    for i in range(1, n + 1):\n        for j in range(m):\n            if i + j > n - 1:\n                break\n            answer.append('1' if j < m - k else '0')\n    print(''.join(answer))\n    return ''\n\n\ndef"
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin.split(' ')[0])\n    b = int(stdin.split(' ')[1])\n    x = int(stdin.split(' ')[2])\n    return str((((a+b)-x)+1)*'0') + (b-1)*'1' + x*'0'\n\n\n\n'''"
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = [int(i) for i in stdin.split(' ')]\n    n = a + b\n    res = []\n    for i in range(n):\n        if x > i:\n            res.append('1' if i < a else '0')\n        else:\n            if a > i:\n                res.append('0')\n            else:\n                res.append('1')\n    return ''.join(res)\n"
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('2\\nab\\nbc')\n    'YES\\nacbbac'\n    >>> solution('3\\naa\\nbc')\n    'YES\\ncacbacbab'\n    >>> solution('1\\ncb\\nac')\n    'YES\\ncacbac'\n    >>> solution('1\\nac\\ncb')\n    'YES\\nacbac'\n    >>> solution('1\\nab\\nab')\n    'NO'\n    >>> solution('2\\naa\\nba')\n    'NO'\n    >>> solution('2\\nab\\nca')\n    'NO'\n    >>> solution('2\\nac\\nca')\n    'NO'\n    >>> solution('2\\naa\\nac')\n    'NO'\n    >>> solution('2\\nab\\nca')\n    'NO'\n    >>> solution('3\\nab\\nca')\n    'YES\\nabcabcac'\n    \"\"\"\n    n = int(stdin)\n    if n == 1:\n        s, t = stdin[0], stdin[1]\n        if s == t or s == 'c' or t == 'c':\n            return 'NO'\n        return 'YES\\n' + s * n\n    s = stdin[0]\n    t = stdin[1]\n    if s == t or s == 'c' or t == 'c':\n        return 'NO'\n    return 'YES\\n' + s + t + s + t + s\n"
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    t = stdin[1]\n    a = stdin[2]\n    res = \"\"\n    for i in range(3):\n        if i % 2 == 0:\n            res += a\n        else:\n            res += t\n    if s not in res and t not in res:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    ab = stdin[0]\n    bc = stdin[1]\n    ac = stdin[2]\n    \n    res = str()\n    \n    for i in range(len(ab)):\n        res += ab[i] + bc[i] + ac[i]\n    \n    return res\n        "
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split('\\n')\n    n = int(s)\n\n    res = []\n    for char in 'abc':\n        res += char * 3 * n\n\n    for x in range(n, 2 * n):\n        for y in range(n, 2 * n):\n            if s[x - n] == t[y - n] == 'c' and res[x] == res[y]:\n                break\n        else:\n            return 'NO'\n\n    return 'YES\\n' + ''.join(res)\n"
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\ndef"
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = stdin[0]\n    b = stdin[1]\n    c = stdin[2]\n    s = n * a\n    t = n * b\n    res = n * c\n    for i in range(0, n):\n        for j in range(0, n):\n            for k in range(0, n):\n                if s[i] + t[j] + res[k] == s + t + res:\n                    print(f\"YES\")\n                    print(s[i] + t[j] + res[k])\n                    return\n    print(\"NO\")\n    return\n\n\ndef"
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def dfs(n, ans, s, t):\n        if n == 0:\n            return ans + s + t\n        elif s[n] == t[n] == 'c':\n            return dfs(n - 1, ans + 'c', s, t)\n        elif s[n] == t[n] == 'a':\n            return dfs(n - 1, ans + 'a', s, t)\n        elif s[n] == 'b':\n            return dfs(n - 1, ans + 'b', s, t)\n        else:\n            return 'NO'\n    s = stdin[0]\n    t = stdin[1]\n    if len(s) == len(t) == 1:\n        return s + t\n    return dfs(len(s) - 1, '', s, t)\nprint(solution(input()))\n"
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split('\\n')[1:3]\n    return 'YES\\n' + s[0] * 3 + 'a' + s[1] * 2 + 'b' + t[0] * 2 + 'c' + t[1] * 2\n"
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution for the problem.\n    :param stdin: string of chars\n    :return: solution string\n    \"\"\"\n    num_chars = int(stdin)\n    if num_chars < 1 or num_chars > 100:\n        return \"ERROR\"\n    s = stdin[0:2]\n    t = stdin[2:4]\n    if len(s)!= 2 or len(t)!= 2:\n        return \"ERROR\"\n    if s == t:\n        return \"ERROR\"\n    if s[0] == t[0]:\n        return \"ERROR\"\n    if s[1] == t[1]:\n        return \"ERROR\"\n    return \"YES\"\n"
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, *arr = stdin.split()\n    arr = list(map(int, arr))\n    q = arr[0:len(arr)-1]\n    res = [0]*(int(n) + 1)\n    for i in range(len(q)):\n        res[q[i]] = res[q[i]] + 1\n    for i in range(len(res)):\n        if res[i]!= 1:\n            return \"-1\"\n    return \" \".join(map(str, res[1:]))\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    pass"
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    q = [int(n) for n in stdin.split(\" \")[1].split(\" \")]\n    print(n, q)\n    return \"\"\n"
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = stdin.split(' ')\n    a = [int(i) for i in a if i!= '']\n    l = list(range(1,n+1))\n    for i in range(len(a)):\n        l[a[i]-1] = l[a[i]]\n        l[a[i]] = a[i]\n    for i in l:\n        if i!= a[i-1]:\n            return -1\n    return''.join([str(i) for i in l])"
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    q = list(map(int, stdin.split(' ')[1:]))\n    i = 0\n    delta = n - 1\n    while i < delta:\n        delta -= abs(q[i])\n        i += 1\n    if delta!= 0:\n        return '-1'\n    p = [i + 1 for i in range(n)]\n    for i in range(len(q)):\n        p[i + 1] += p[i]\n    for i in range(n):\n        if p[i] == q[i]:\n            continue\n        for j in range(i + 1, n):\n            if p[j] - p[i] == q[i]:\n                p[j] = p[i] + q[j]\n                break\n            if p[j] == q[i]:\n                break\n    if p!= sorted(p):\n        return '-1'\n    return''.join(map(str, p))"
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    q = list(map(int, stdin.readline().split()))\n    res = [0] * n\n    for i in range(n - 1):\n        res[q[i] - 1] = n - i\n    if any(x!= i + 1 for i, x in enumerate(res)):\n        return -1\n    return''.join(map(str, res))\n"
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return stdin\n"
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    q = [int(i) for i in stdin.split()][1:]\n    p = [0] * n\n    i = 1\n    p[0] = 1\n    while i < n:\n        p[i] = p[i-1] + 1\n        if p[i] == q[i-1]:\n            i += 1\n        else:\n            p[i] = p[i-1]\n    return''.join(map(str, p))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return ''"
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    stdin = stdin.splitlines()\n    n = int(stdin[0])\n    nums = [int(num) for num in stdin[1].split(' ')]\n    if len(set(nums)) == 1:\n        return n\n    else:\n        count = 0\n        while len(nums) > 1:\n            nums = sorted(nums)\n            if nums[0] == nums[1]:\n                nums.pop(0)\n                count += 1\n            else:\n                nums[0] -= 1\n                nums[1] += 1\n                count += 2\n        return count\n"
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    x = list(map(int, stdin.readline().split()))\n    s = set()\n    # print(set([0]))\n    ans = 0\n    for i in range(n):\n        s.add(x[i])\n        if len(s) > 1:\n            ans += 1\n        if ans > 1:\n            break\n    print(ans)\n    return ''\n"
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin.readline())\n    coord = [int(c) for c in stdin.readline().split()]\n    dp = [float(\"inf\")] * (len(coord))\n    dp[0] = 0\n    for i in range(1, len(coord)):\n        dp[i] = min(dp[i], dp[i - 1] + abs(coord[i] - coord[i - 1]))\n        if coord[i] == coord[i - 1] + 1:\n            dp[i] = min(dp[i], dp[i - 1] + 1)\n        if coord[i] == coord[i - 1] - 1:\n            dp[i] = min(dp[i], dp[i - 1] + 1)\n    print(dp[-1])\n    return \"\"\n\n\nprint(solution(stdin=input()))\n"
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"\"\"5\n   ... 1 2 3 4 5\n   ... \"\"\")\n    '2'\n    \"\"\"\n    lines = stdin.split('\\n')[:-1]\n    n = int(lines[0])\n    x = [int(x) for x in lines[1].split(' ')]\n\n    x.sort()\n    res = 0\n    for i in range(n - 1):\n        res += (x[i + 1] - x[i] - 1) // 2\n    return str(res)\n"
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \n    # Your code here\n    \n    return \"\""
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    num_chips, *chips = map(int, stdin.split())\n    total_chips = sum(chips)\n    move = abs(chips[0] - chips[1])\n    if move > total_chips:\n        move = total_chips\n    return str(move)\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    You're given a sequence of integers on a single line (separated by spaces) and a value for k, the length of the sequence. You need to print how many times you can take k consecutive values and add them together.\n\n    If it's not possible to add up all the values, print 0.\n    \"\"\"\n    n, *nums = map(int, stdin.split(\" \"))\n    i = 1\n    j = 0\n    counter = 0\n    while j < len(nums):\n        if i < len(nums) and nums[j] + nums[i] == k:\n            counter += 1\n            i += 1\n        elif i >= len(nums):\n            break\n        else:\n            j += 1\n            i = j\n    return counter\n"
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    chips = [int(el) for el in lines[1].split(' ')]\n    min_c = 0\n    for i in range(n):\n        min_c += abs(chips[i] - (2 * (i + 1)))\n    return str(min_c)\n"
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return 'dummy_return_value'\n"
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    while n > 9:\n        n = n // 10\n        count += 1\n    return count\n"
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"10\")\n    5\n    \"\"\"\n\n    return str(int(stdin) - 1)\n"
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    import re\n    import sys\n    sys.stdin = open('./input.txt')\n\n    N = int(stdin)\n    num_moves = 0\n    for i in range(1, 10 ** 12 + 1):\n        if i ** 2 <= N:\n            num_moves += 1\n        else:\n            break\n    print(num_moves)\n    return num_moves"
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    N = int(stdin)\n    row = 1\n    col = 1\n    steps = 0\n    while row < N and col < N:\n        row += 1\n        col += 1\n        steps += 1\n    if row == N and col < N:\n        steps += (N - col)\n    elif col == N and row < N:\n        steps += (N - row)\n    return steps\n"
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return ''.join(stdin.split())\n"
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time: O(1)\n    Space: O(1)\n    \"\"\"\n    N = int(stdin)\n    if N == 1:\n        return 0\n    i, j = 1, 1\n    count = 0\n    while i < N:\n        if i * j == N:\n            return count\n        if i * j > N:\n            i -= 1\n        else:\n            i += 1\n            j += 1\n        count += 1\n    return count\n"
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin\n    r = 1\n    c = 1\n    \n    for _ in range(int(n) - 1):\n        r += 1\n        if r % 2 == 0:\n            c += 1\n        else:\n            c -= 1\n    \n    return str(r) +'' + str(c)"
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return \"5\"\n\"\"\"\n\nimport sys\n\n\ndef"
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    i = j = 1\n    while n > i * j:\n        if i < j:\n            i += 1\n        else:\n            j += 1\n    print(i)"
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x = stdin.strip()\n    n = int(x)\n    steps = 0\n    i = 0\n    j = 0\n    while n > 1:\n        if i == 0:\n            i = 1\n            j = n\n            n = n - 1\n        elif j == 0:\n            j = n\n            n = n - 1\n        else:\n            j = j - 1\n            i = i + 1\n        steps += 1\n    return steps\n"
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # the numbers of rock, paper, scissors in n rounds\n    n = int(stdin)\n    # numbers of rock, paper, scissors in n rounds of Alice\n    a = list(map(int, stdin.split()))\n    # numbers of rock, paper, scissors in n rounds of Bob\n    b = list(map(int, stdin.split()))\n    # initial result\n    result = [0, n]\n    for i in range(n):\n        # Alice's rock, paper, scissors in i rounds\n        a_rock = a[0]\n        a_scissors = a[1]\n        a_paper = a[2]\n        # Bob's rock, paper, scissors in i rounds\n        b_rock = b[0]\n        b_scissors = b[1]\n        b_paper = b[2]\n        # Alice and Bob played in i rounds\n        played = a_rock + b_scissors - b_rock\n        # Alice will win in i rounds\n        alice = a_rock + b_paper - b_scissors\n        # Bob will win in i rounds\n        bob = b_rock + a_paper - a_scissors\n        # update result\n        result = [max(result[0], min(alice, bob)), min(result[1], max(alice, bob))]\n        # update Alice's rock, paper, scissors in i rounds\n        a_rock = max(a_rock - played, 0)\n        a_scissors = max(a_scissors - played, 0)\n        a_paper = max(a_paper - played, 0)\n        # update Bob's rock, paper, scissors in i rounds\n        b_rock = max(b_rock - played, 0)\n        b_scissors = max(b_scissors - played, 0)\n        b_paper = max(b_paper - played, 0)\n    return str(result[0]) +'' + str(result[1])\n"
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    a = [int(x) for x in stdin.split(\"\\n\")[1].split(\" \")]\n    b = [int(x) for x in stdin.split(\"\\n\")[2].split(\" \")]\n    \n    alice = sum([(a[0] + a[1] - 2) * a[2], (a[1] + a[2] - 2) * a[0], (a[2] + a[0] - 2) * a[1]])\n    bob = sum([(b[0] + b[1] - 2) * b[2], (b[1] + b[2] - 2) * b[0], (b[2] + b[0] - 2) * b[1]])\n\n    print(min(alice, bob))\n    print(max(alice, bob))"
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a, b = [0, 0, 0]\n    for i in range(n):\n        a[int(stdin.readline())] += 1\n    for i in range(n):\n        b[int(stdin.readline())] += 1\n    return str(max(0, min(a[0] + b[2] - 1, a[1] + b[0] - 1, a[2] + b[1] - 1))) +'' + str(\n        max(0, min(a[0] + b[1] - 1, a[1] + b[2] - 1, a[2] + b[0] - 1)))\n\n\ndef"
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A = list(map(int, stdin.split()))\n    n = A[0]\n    a = [A[i] for i in range(1, 1 + 3, 1)]\n    b = [A[i] for i in range(4, 4 + 3, 1)]\n    a.sort()\n    b.sort()\n    alice = n - sum(a) + a[2]\n    bob = n - sum(b) + b[2]\n    return str(alice) +'' + str(bob)\n"
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, *arr = map(int, stdin.split())\n    res1, res2 = [0, 0]\n    alice = [0, 0, 0]\n    bob = [0, 0, 0]\n    alice[0] = arr[0]\n    alice[1] = arr[1] - arr[0]\n    alice[2] = arr[2] - arr[1]\n    bob[0] = arr[1]\n    bob[1] = arr[2] - arr[1]\n    bob[2] = arr[0] - arr[2]\n    alice_arr = [0, 0, 0]\n    bob_arr = [0, 0, 0]\n    for i in range(3, n):\n        if arr[i] == 0:\n            alice_arr[0] += 1\n        if arr[i] == 1:\n            alice_arr[1] += 1\n        if arr[i] == 2:\n            alice_arr[2] += 1\n        alice_arr[0] += alice_arr[1]\n        alice_arr[0] += alice_arr[2]\n        alice_arr[0] += alice_arr[2]\n        alice_arr[0] -= alice_arr[1]\n        if arr[i] == 0:\n            alice_arr[1] -= 1\n        if arr[i] == 1:\n            alice_arr[1] -= 1\n        if arr[i] == 2:\n            alice_arr[2] -= 1\n        alice_arr[1] -= alice_arr[0]\n        alice_arr[2] -= alice_arr[0]\n        alice_arr[2] -= alice_arr[1]\n        alice_arr[0] -= alice_arr[2]\n        alice_arr[0] -= alice_arr[1]\n        alice_arr[1] -= alice_arr[2]\n    bob_arr[0] = bob_arr[1] = bob_arr[2] = 0\n    for i in range(3, n):\n        if arr[i] == 0:\n            bob_arr[0] += 1\n        if arr[i] == 1:\n            bob_arr[1] += 1\n        if arr[i] == 2:\n            bob_arr[2] += 1\n        bob_arr[0] += bob_arr[1]\n        bob_arr[0] += bob_arr[2]\n        bob_arr[0] += bob_arr[2]\n        bob_arr[0] -= bob_arr[1]\n        if arr[i] == 0:\n            bob_arr[1] -= 1\n        if arr[i] == 1:\n            bob_arr[1] -= 1\n        if arr[i] == 2:\n            bob_arr[2] -= 1\n        bob_arr[1] -= bob_arr[0]\n        bob_arr[2] -= bob_arr[0]\n        bob_arr[2] -= bob_arr[1]\n        bob_arr[0] -= bob_arr[2]\n        bob_arr[0] -= bob_arr[1]\n        bob_arr[1] -= bob_arr[2]\n    alice_max = max(alice_arr[0], alice_arr[1], alice_arr[2])\n    bob_max = max(bob_arr[0], bob_arr[1], bob_arr[2])\n    res1 += alice_max\n    res2 += bob_max\n    return str(res1) +'' + str(res2)\n\n\ndef"
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    n, *s = stdin.split()\n    a, b = [int(x) for x in s]\n    if a + b == 0:\n        return '0 0'\n    max_rounds = max(a, b) + 2\n    if max_rounds % 2 == 0:\n        max_rounds += 1\n    a_cnt = [0] * (max_rounds + 1)\n    b_cnt = [0] * (max_rounds + 1)\n    for i in range(a):\n        a_cnt[i + 1] = a_cnt[i] + 1\n    for i in range(b):\n        b_cnt[i + 1] = b_cnt[i] + 1\n    a_sum = 0\n    b_sum = 0\n    for i in range(len(a_cnt)):\n        for j in range(len(b_cnt)):\n            if i == 0 or j == 0:\n                continue\n            if a_cnt[i] + b_cnt[j] - i - j >= 0:\n                a_sum += 1\n                b_sum += 1\n    return '0'+ str(a_sum) if a_sum > b_sum else '1'+ str(b_sum)\n"
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n\n    return str(max(0, sum(b) - sum(a))) +'' + str(max(0, n - sum(b)))\n"
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # n = int(input())\n    # a, b = input().split()\n    # a = int(a)\n    # b = int(b)\n    # arr = [0 for _ in range(n + 1)]\n    # arr[0] = a * b\n    # arr[1] = a * (n - b)\n    # arr[2] = (n - a) * b\n    # arr[3] = (n - a) * (n - b)\n    # min_count = arr[0]\n    # max_count = arr[0]\n    # for i in range(n):\n    #     if min_count > arr[i + 1]:\n    #         min_count = arr[i + 1]\n    #     if max_count < arr[i + 1]:\n    #         max_count = arr[i + 1]\n    # print(min_count, max_count)\n    # return ''"
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(s) for s in stdin.readline().split()]\n    sums = [a[0]]\n    for i in range(1, n):\n        sums.append(sums[-1] + a[i])\n    res = {}\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            if sums[j] - sums[i] in res:\n                res[sums[j] - sums[i]] = [res[sums[j] - sums[i]], [i + 1, j]]\n            else:\n                res[sums[j] - sums[i]] = [i + 1, j]\n    res = sorted(res.values())\n    k = 0\n    while res[k][0] == res[k][1]:\n        k += 1\n    print(k)\n    for i in range(k):\n        print(*res[i])\n"
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # get input for number of test cases\n    n_cases = int(stdin.readline())\n    # for each case, get input\n    for _ in range(n_cases):\n        # get the length of array\n        array_length = int(stdin.readline())\n        # initialize array\n        array = [int(item) for item in stdin.readline().split()]\n        # initialize number of blocks\n        number_of_blocks = 0\n        # initialize min and max ranges\n        min_range = 0\n        max_range = 0\n        # initialize total sum\n        total_sum = 0\n        # initialize the sum list\n        sum_list = [array[0]]\n        # loop through the array\n        for number in array[1:]:\n            # update total sum\n            total_sum += number\n            # if the total sum equals 0, we have a new block\n            if total_sum == 0:\n                # update number of blocks\n                number_of_blocks += 1\n                # set the new min range\n                min_range = array.index(number)\n                # set the new max range\n                max_range = array.index(number)\n            # else if the total sum is greater than 0, we increment the max range by one\n            elif total_sum > 0:\n                max_range += 1\n            # else if the total sum is less than 0, we decrement the min range by one\n            else:\n                min_range -= 1\n            # add the number to the sum list\n            sum_list.append(number)\n        # print the number of blocks\n        print(number_of_blocks)\n        # for each block, print the bounds\n        for index in range(number_of_blocks):\n            print(min_range, max_range)\n            # increment the min range by one\n            min_range += 1\n            # increment the max range by one\n            max_range += 1\n    return \"\"\n"
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(c) for c in stdin.readline().split()]\n    s = [0] * (n + 1)\n    for i in range(n):\n        s[i + 1] = s[i] + a[i]\n    m = n\n    t = [[0] * (n + 1) for _ in range(n + 1)]\n    for i in range(1, n):\n        for j in range(i + 1, n + 1):\n            t[i][j] = t[i][j - 1]\n            if s[j] - s[i - 1] > t[i][j - 1]:\n                t[i][j] = s[j] - s[i - 1]\n                m = min(m, j - i + 1)\n    for i in range(m):\n        l, r = 1, n\n        while r - l > 1:\n            m = (l + r) // 2\n            if t[i][m] < n - m:\n                l = m\n            else:\n                r = m\n        print(str(i + 1) +'' + str(r) +'' + str(l))\n\n\ndef"
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solve exercise.\"\"\"\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    result = []\n    i = 0\n    while i < n:\n        start = i\n        s = 0\n        for j in range(i, n):\n            s += a[j]\n            if s > 0 and s == 0:\n                i = j + 1\n                break\n        else:\n            i = n\n            break\n        result.append((start, j))\n    return '\\n'.join(' '.join(map(str, l)) for l in result)\n"
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    arr = list(map(int, stdin.readline().strip().split()))\n    # O(n)\n    arr.sort()\n\n    # O(n)\n    left = 1\n    for i in range(n):\n        if arr[i]!= arr[i - 1]:\n            right = i\n            break\n        if i == n - 1:\n            right = n\n\n    # O(n^2)\n    res = {}\n    for i in range(left, right):\n        for j in range(i + 1, right):\n            if arr[i] == arr[j]:\n                continue\n            if arr[j] - arr[i] < 0:\n                break\n            res[(i, j)] = True\n\n    # O(n)\n    if len(res) == 0:\n        print(0)\n        return\n    k = 1\n    for i in range(left, right):\n        for j in range(i + 1, right):\n            if arr[i]!= arr[j]:\n                continue\n            # O(n^3)\n            for t1, t2 in res.keys():\n                if t1 <= i and t2 >= j:\n                    k = max(k, len(res))\n                    res.pop((t1, t2))\n                    break\n                if t2 <= i and t1 >= j:\n                    k = max(k, len(res))\n                    res.pop((t1, t2))\n                    break\n    print(k)\n    print(' '.join([str(i) for i in res.keys()]))\n"
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return None\n"
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find a set of blocks.\n\n    Args:\n        stdin (str): Input string.\n\n    Returns:\n        str: Solution string.\n    \"\"\"\n    return \"\"\n"
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"7\\n4 1 2 2 1 5 3\\n\")\n    '3\\n7 7\\n2 3\\n4 5'\n    \"\"\"\n    n = int(stdin.readline())\n    numbers = [int(x) for x in stdin.readline().split()]\n    numbers.sort()\n    max_count = 0\n    left, right = 0, 0\n    for i, x in enumerate(numbers):\n        right = i + 1\n        while left < right:\n            if numbers[right] + numbers[left] == numbers[left] * 2:\n                left += 1\n                right = left\n            else:\n                break\n        if left < right:\n            max_count += 1\n        left = i + 1\n    return max_count\n"
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n    n = int(stdin)\n    \n    nums = [int(num) for num in stdin.split()]\n    \n    stack = []\n    \n    for num in nums:\n        if num == 1:\n            stack.append(1)\n        else:\n            stack.pop()\n            stack.append(num)\n    \n    if len(stack) == 0:\n        return \"YES\"\n    \n    while len(stack)!= 1:\n        if stack[-1]!= len(stack) + 1:\n            return \"NO\"\n        stack.pop()\n    \n    return \"YES\"\n"
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return 'YES' if the array can be sorted using the described\n    algorithm and 'NO' if it can not.\n    >>> solution(\"3\\n3 1 2\")\n    'YES'\n    >>> solution(\"3\\n1 2 3\")\n    'NO'\n    \"\"\"\n   ..."
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return 'YES' or 'NO' depending on whether the array is sortable\n    using the described sorting algorithm.\"\"\"\n    n = int(stdin)\n    s = list(map(int, stdin.split()))\n    stack = [int(s[0])]\n    for el in s[1:]:\n        if el <= stack[-1]:\n            stack.append(el)\n        else:\n            for i in range(len(stack) - 1, 0, -1):\n                if stack[i] < el:\n                    stack.insert(i + 1, el)\n                    break\n                elif stack[i] == el:\n                    stack.pop(i)\n                    stack.pop(i)\n                    stack.insert(i, el)\n                    break\n            else:\n                stack.insert(0, el)\n    return \"YES\" if stack == s else \"NO\"\n"
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    array = [int(x) for x in stdin.split('\\n')[1].split(' ')]\n    # for _ in range(n):\n    #     array.append(int(stdin))\n    # print(array)\n    count = 0\n    while True:\n        flag = True\n        for i in range(len(array) - 1):\n            if array[i] > array[i + 1]:\n                flag = False\n                array[i], array[i + 1] = array[i + 1], array[i]\n        if flag:\n            break\n        count += 1\n    return 'YES' if count < 5 else 'NO'\n"
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    n = int(stdin[0])\n    s = stdin[1].split(' ')\n    ans = []\n    for i in range(0, n):\n        ans.append(int(s[i]))\n    stacks = []\n    for i in range(0, n):\n        stacks.append([])\n    stacks[0].append(ans[0])\n    for i in range(1, n):\n        if (len(stacks[i-1]) == 0 or ans[i] >= stacks[i-1][-1] + 1) and ans[i] <= ans[i-1]:\n            stacks[i].append(ans[i])\n            continue\n        j = 0\n        while j < len(stacks[i]):\n            if ans[i] >= stacks[i][j] + 1:\n                stacks[i].insert(j, ans[i])\n                break\n            j += 1\n        if j == len(stacks[i]):\n            stacks[i].append(ans[i])\n    for i in range(0, len(stacks)):\n        while len(stacks[i]) > 1:\n            if stacks[i][0] >= stacks[i][-1] + 1:\n                stacks[i].pop()\n                continue\n            stacks[i].pop(0)\n    for i in range(0, len(stacks)):\n        if len(stacks[i])!= 0:\n            ans.append(stacks[i][0])\n    return 'YES' if ans == sorted(ans) else 'NO'\n\n\"\"\""
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES' if stdin == '3 1 2\\n' else 'NO'\n\"\"\"\nimport sys"
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds out whether the described algorithm will sort an array\n    correctly.\n\n    Args:\n        stdin (str): The input to process\n\n    Returns:\n        str: \"YES\" if the array can be sorted using the described procedure\n        and \"NO\" if it can not.\n    \"\"\"\n    # Get input\n    input_array = [int(i) for i in stdin.split('\\n')[0].split(' ')]\n\n    # Set up variables\n    stack_height = []\n    output_array = []\n\n    # Main loop\n    for x in input_array:\n        if len(stack_height) == 0:\n            stack_height.append(x)\n        else:\n            while len(stack_height)!= 0:\n                if stack_height[-1] == x:\n                    stack_height.pop()\n                    break\n                elif stack_height[-1] < x:\n                    output_array.append(stack_height[-1])\n                    stack_height.pop()\n                else:\n                    stack_height.append(x)\n                    break\n\n    # Check for invalid output\n    if len(stack_height) == 0:\n        return 'YES'\n    else:\n        return 'NO'\n\n\ndef"
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('3\\n1 2 3\\n')\n    'YES'\n    >>> solution('3\\n3 1 2\\n')\n    'NO'\n    >>> solution('3\\n2 1 3\\n')\n    'YES'\n    \"\"\"\n   ...\n"
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\n------\n\nIn the first example the array will change even before the tallest stack is chosen for the first time: ravioli from stack of height 1 will slide on the stack of height 3, and the algorithm will output an array {1, 1, 1}.\ndef"
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n\ndef"
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin.split(\"\\n\")[1].split()[0]\n    t = stdin.split(\"\\n\")[2].split()[0]\n    s = \"\".join(sorted(s))\n    t = \"\".join(sorted(t))\n    k = -1\n    if s == t:\n        k = 0\n    else:\n        i = 0\n        while i < n:\n            if s[i]!= t[i]:\n                k = i\n                break\n            i += 1\n        if k > -1:\n            k += 1\n            s = s[:k] + t[k] + s[k + 1:]\n            s = \"\".join(sorted(s))\n            i = 0\n            while i < n:\n                if s[i]!= t[i]:\n                    k = i\n                    break\n                i += 1\n            k += 1\n    if k == -1:\n        k = 0\n    if k == 0:\n        print(0)\n    else:\n        print(k)\n        print(\" \".join([str(i) for i in range(1, k + 1)]))\n"
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split(\"\\n\")\n    s_len, t_len = len(s), len(t)\n    if s_len!= t_len:\n        return \"1\"\n    ans = [0] * t_len\n    same = True\n    for i in range(t_len):\n        if s[i]!= t[i]:\n            same = False\n            break\n        ans[i] = s_len - i - 1\n    if same:\n        return \"0\"\n    ans = [i - (s_len - i - 1) for i in ans]\n    return \" \".join(map(str, ans))\n"
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\ndef"
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.split(\"\\n\")[0]\n    s = stdin.split(\"\\n\")[1]\n    t = stdin.split(\"\\n\")[2]\n    moves = 0\n    for i in range(int(n)):\n        for j in range(i + 1, int(n)):\n            if s[i] < s[j]:\n                moves += 1\n                s = s[:i] + s[j] + s[i + 1:j] + s[i] + s[j + 1:]\n    print(moves)\n    if moves > 10 ** 4:\n        return -1\n    else:\n        return moves\n"
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Solution of the task\n    '''\n    # Write your code here\n    s = stdin[0]\n    t = stdin[1]\n    n = len(s)\n    \n    diff = Counter(s) - Counter(t)\n    \n    if diff:\n        return -1\n    \n    \n    memo = [0] * n\n    \n    for i in range(n - 2, -1, -1):\n        if s[i]!= t[i]:\n            diff = memo[i + 1] - (memo[i] + 1)\n            if diff > 0:\n                memo[i] = memo[i + 1] - 1\n            else:\n                memo[i] = memo[i + 1] + 1\n        else:\n            memo[i] = memo[i + 1]\n    \n    ans = 0\n    for i in range(n):\n        ans += abs(memo[i])\n    \n    return ans\n"
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('4\\na\\nb\\nc\\nd\\ne\\nf\\n')\n    '4\\n2 3 4 3'\n    >>> solution('4\\na\\nb\\nc\\nd\\ne\\nf\\n')\n    '4\\n0'\n    \"\"\"\n    len_stdin = int(stdin.split('\\n')[0])\n    s = stdin.split('\\n')[1]\n    t = stdin.split('\\n')[2]\n\n    len_s = len(s)\n    len_t = len(t)\n    if len_s!= len_t or len_s == 0:\n        return '-1'\n    if len_s == 1:\n        return str(0)\n\n    move_cnt = 0\n    s_idx = 0\n    t_idx = 0\n    while s_idx < len_s - 1:\n        if s[s_idx]!= t[t_idx]:\n            move_cnt += 1\n            if s_idx == len_s - 2:\n                return '-1'\n            s_idx += 2\n            t_idx += 2\n        else:\n            s_idx += 1\n            t_idx += 1\n\n    return str(move_cnt) + '\\n' +''.join(map(str, [i for i in range(move_cnt, -1, -1)]))\n"
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin)\n    arr = []\n    for i in range(2*num-2):\n        arr.append(stdin[i])\n    counter = 0\n    for i in range(1,num):\n        for j in range(num-i):\n            if (arr[j] not in arr[j+i]) or (arr[num-i-1] not in arr[j]):\n                break\n            counter+=1\n    print(counter)\n    if counter == 2*num-2:\n        for i in range(num):\n            if i % 2 == 0:\n                print('P', end = '')\n            else:\n                print('S', end = '')\n    else:\n        for i in range(num):\n            if i % 2 == 0:\n                print('S', end = '')\n            else:\n                print('P', end = '')\n    return ''\nsolution(input())\n"
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    out = \"\"\n    for i in range(n-1):\n        pref = stdin[i]\n        suf = stdin[n-1-i]\n        if pref == suf:\n            out += \"S\"\n        else:\n            out += \"P\"\n    return out\n\n\n\n\nprint(solution(\"5\\nba\\na\\nabab\\na\\naba\\nbaba\\nab\\naba\"))\n\nprint(solution(\"3\\na\\naa\\naa\\na\"))\n\n\n\nprint(solution(\"2\\na\\nc\"))\n\n\n\n\nprint(solution(\"2\\na\\nac\"))\n"
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    #Your code here\n    s = stdin\n    n = len(s)\n    pre = s[:n - 1]\n    suf = s[1:]\n    print(pre, suf)\n    ans = []\n    for i in range(n - 1):\n        pre_cnt = 0\n        suf_cnt = 0\n        for j in pre:\n            if j == pre[i]:\n                pre_cnt += 1\n        for j in suf:\n            if j == suf[i]:\n                suf_cnt += 1\n        if pre_cnt == suf_cnt:\n            ans.append('P')\n        else:\n            ans.append('S')\n    return ''.join(ans)\nprint(solution(stdin))"
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the solution.\"\"\"\n    s = stdin.split('\\n')[0]\n    count = {}\n    for i in range(1, len(s) + 1):\n        if s[:i] in count:\n            count[s[:i]].append(s[i:])\n        else:\n            count[s[:i]] = [s[i:]]\n\n    return 'PS' if len(count.values()) == 1 else 'PPSS'\n"
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline()\n    prefix_suffixes = []\n    for i in range(2, n + 1):\n        prefix_suffixes.append(stdin.readline())\n    answer = ['S'] * n\n    for j in range(n):\n        tmp = []\n        for k in range(len(s) - n + 1):\n            tmp.append(s[k:k + j + 1])\n        tmp = set(tmp)\n        if stdin.readline() == 'S':\n            for l in range(len(prefix_suffixes)):\n                if prefix_suffixes[l] in tmp:\n                    answer[j] = 'S'\n                    break\n        else:\n            for l in range(len(prefix_suffixes)):\n                if prefix_suffixes[l] in tmp:\n                    answer[j] = 'P'\n                    break\n    return ''.join(answer)\n"
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    s = stdin[1:]\n    t = \"PPS\" if s[0] in {\"a\", \"c\"} else \"SP\"\n    return t * n\n"
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin.split('\\n')[0]\n\n    for i in range(1, n + 1):\n        print(s[i:] + s[:i])\n        # print(s[:-i] + s[-i + 1:])\n    return ''\n"
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return '''The first line of input contains several space-separated integers a_{i} (0 \u2264 a_{i} \u2264 100).\n\nOutput\n1'''\n    pass"
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a = [int(item) for item in stdin.split(\" \")]\n    total = 0\n    for i in a:\n        total = total + i\n    return total\nprint(solution(input()))\n"
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    if not stdin:\n        return 1\n\n    n = [int(i) for i in stdin.split(\" \")]\n    \n    return n.index(max(n)) + 1"
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    while not lines[-1]:\n        lines.pop()\n\n    result = 0\n    for line in lines:\n        string = line.split()\n        for a in string:\n            try:\n                a = int(a)\n            except ValueError:\n                continue\n            result += 1\n    return result\n\nprint(solution(\"1 2 3 4 5 6 7 8 9 10\"))\nprint(solution(\"2 4 6 8 10\"))\nprint(solution(\"1 2 3 4 5 6 7 8 9 10\"))\nprint(solution(\"\"))\n"
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return 'A'\n"
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return str(solve())"
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # return your solution\n    pass\n"
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return \"\"\n"
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    numbers = [int(number) for number in stdin.split(' ')]\n    number_of_numbers = len(numbers)\n    output = 0\n    for i in range(number_of_numbers):\n        if (i+1) % 2 == 0:\n            output += numbers[i]\n    return output\n"
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4\\n1 1 1 1\")\n    '0'\n    >>> solution(\"4\\n0 0 1 0\")\n    '0'\n    >>> solution(\"4\\n1 1 1 1\")\n    '2'\n    >>> solution(\"5\\n1 1 1 1\")\n    '0'\n    >>> solution(\"6\\n1 1 1 1\")\n    '2'\n    >>> solution(\"7\\n1 1 1 1\")\n    '2'\n    >>> solution(\"8\\n1 1 1 1\")\n    '3'\n    >>> solution(\"10\\n1 1 1 1\")\n    '5'\n    >>> solution(\"11\\n1 1 1 1\")\n    '6'\n    >>> solution(\"13\\n1 1 1 1\")\n    '8'\n    >>> solution(\"15\\n1 1 1 1\")\n    '9'\n    \"\"\"\n    n = int(stdin)\n    num_of_flats = [int(x) for x in stdin.split()]\n    answers = [1] * n\n    answers[0] = 0\n    answers[1] = 0\n\n    for i in range(2, n):\n        answers[i] = 1 if (\n            num_of_flats[i - 1] == num_of_flats[i + 1] == 1\n        ) else 0\n    return str(sum(answers))\n"
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    k = 0\n    for i in range(n):\n        if a[i] == 1:\n            for j in range(i + 1, n):\n                if a[j] == 1:\n                    k += 1\n    print(k)\n"
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    The solution of the task is to create a list of people who are disturbed.\n    And then search for the best answer.\n    \"\"\"\n\n    people = []\n    for line in stdin.splitlines()[1:]:\n        people.append(int(line))\n\n    disturbed_people = []\n    for i in range(1, len(people) - 1):\n        if people[i - 1] == 1 and people[i + 1] == 1 and people[i] == 0:\n            disturbed_people.append(i)\n\n    for i in range(len(disturbed_people)):\n        for j in range(len(disturbed_people)):\n            if j == i:\n                continue\n            if abs(disturbed_people[i] - disturbed_people[j]) == 1:\n                return str(min(disturbed_people[i], disturbed_people[j]))\n\n    return \"0\"\n\n\"\"\"\ndef"
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''10\n   ... 1 1 0 1 1 0 1 0 1 0\n   ... ''')\n    '2'\n    >>> solution('''5\n   ... 1 1 0 0 0\n   ... ''')\n    '0'\n    \"\"\"\n    # your code here\n    # print(stdin)\n    flats = list(map(int, stdin.split('\\n')[1].split()))\n    # print(flats)\n    for i in range(len(flats)):\n        if i == 0:\n            if flats[i] == 1 and flats[i + 1] == 1:\n                flats[i] = 0\n        elif i == len(flats) - 1:\n            if flats[i] == 1 and flats[i - 1] == 1:\n                flats[i] = 0\n        else:\n            if flats[i] == 1 and flats[i + 1] == 1 and flats[i - 1] == 1:\n                flats[i] = 0\n    # print(flats)\n    return str(flats.count(1))\n"
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\n-----Tests-----\n\nTest 1\nprint(solution('4\\n1 1 1 1\\n')) # 0\n\nTest 2\nprint(solution('4\\n0 1 0 1\\n')) # 0\n\nTest 3\nprint(solution('10\\n0 0 0 0 1 1 1 0 1 1\\n')) # 3\n\nTest 4\nprint(solution('4\\n1 1 1 1\\n')) # 0\n"
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the minimum number of people who can turn off the light without being disturbed\n    \n    Arguments:\n        stdin {str} -- input string\n    \n    Returns:\n        str -- answer\n    \"\"\"\n    # read the number of flats\n    n = int(stdin.split(\"\\n\")[0])\n    # read the state of each flat\n    flats = [int(flat) for flat in stdin.split(\"\\n\")[1].split(\" \")]\n    # count the number of people who can turn off the light without being disturbed\n    turn_off = 0\n    # count the number of people who can turn off the light on a single night\n    turn_off_night = 0\n    # for each flat\n    for flat in flats:\n        # if the light is on\n        if flat == 1:\n            # add one to the number of people who can turn off the light\n            turn_off += 1\n            # add one to the number of people who can turn off the light on a single night\n            turn_off_night += 1\n        # if the light is off\n        else:\n            # if there is at least one person who can turn off the light on a single night\n            if turn_off_night > 0:\n                # turn off the light for one night\n                turn_off_night -= 1\n                # add one to the number of people who can turn off the light\n                turn_off += 1\n            # if there is no one who can turn off the light on a single night\n            else:\n                # add one to the number of people who can turn off the light\n                turn_off += 1\n    # if there is no one who can turn off the light on a single night\n    if turn_off_night == 0:\n        # return 0\n        return 0\n    # return the minimum number of people who can turn off the light\n    return turn_off\n\n\"\"\"\nimport sys\n\ndef"
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    count = 0\n    for i in range(n - 1):\n        if a[i] == 1 and a[i + 1] == 1 and a[i + 2] == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = [int(x) for x in stdin.readline().split()]\n\n    k = 1\n    while True:\n        for i in range(n):\n            if arr[i] == 0:\n                if i < k:\n                    arr[i] = 1\n                    k = i\n                elif i == k:\n                    arr[i] = 1\n                    k += 1\n                else:\n                    arr[i] = 1\n                    k = i\n                    break\n        else:\n            break\n    if sum(arr) == n:\n        return str(0)\n    else:\n        return str(k)\n"
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Calculate the minimum number of people who will turn off the lights.\n    \"\"\"\n    num_of_flats = int(stdin)\n    flats = list(map(int, stdin.split()))\n    count = 0\n    for i in range(num_of_flats):\n        if flats[i] == 1:\n            if i > 0 and flats[i - 1] == 0:\n                count += 1\n            if i < num_of_flats - 1 and flats[i + 1] == 0:\n                count += 1\n    return str(count)\n\"\"\"\n"
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return \"0\""
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"The solution to the problem\"\"\"\n    a = list(map(int, stdin.split()))\n    g = []\n    for x in a:\n        for y in a:\n            if x!= y:\n                if x % y == 0:\n                    g.append(y)\n    return len(set(g))\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    '''Finds the number of integers from stdin which divide each element from the array'''\n\n    def gcd(a, b):\n        if b == 0:\n            return a\n        else:\n            return gcd(b, a%b)\n\n    a = list(map(int, stdin.split()))\n\n    return str(len([num for num in a if num!= 0]))\n\ndef"
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    num = stdin.split('\\n')\n    a = num[1].split(' ')\n    a = [int(i) for i in a]\n    divisors = 0\n    for i in a:\n        for j in range(1, i+1):\n            if i % j == 0:\n                divisors += 1\n    print(divisors)\n"
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    my_dict = dict()\n    for line in stdin:\n        my_dict[line] = line.split()\n    k = int(my_dict['1'][0])\n    for key, value in my_dict.items():\n        value[0] = int(value[0])\n        value[0] = value[0] / k\n    return my_dict\n\n\nprint(solution(my_dict))\n"
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    x = 1\n    for num in a:\n        x *= num / gcd(num, x)\n    return x\n\n\ndef"
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split(' ')))\n    answer = 0\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] % a[j] == 0 or a[j] % a[i] == 0:\n                answer += 1\n    return answer\n"
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split('\\n')[1].split()))\n    a = [x for x in a if x > 0]\n    a.sort()\n    # print(a)\n    count = 1\n    for i in range(1, len(a)):\n        for j in range(0, i):\n            if a[i] % a[j] == 0:\n                count += 1\n                break\n    return count\n\n\nprint(solution('6\\n6 90 12 18 30 18'))\n"
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the number of common divisors of all the elements in the given array.\"\"\"\n    def common_divisors(a: str) -> int:\n        \"\"\"Return the number of common divisors of all the elements in the given array.\"\"\"\n        res = 1\n        for i in range(2, min(a) + 1):\n            if all(i % j == 0 for j in a.split(' ')):\n                res += 1\n        return res\n\n    return common_divisors(stdin)\n"
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a = [0] + a\n    left = [0] * 101\n    right = [0] * 101\n\n    for i in range(n):\n        left[a[i]] += 1\n\n    for i in range(n - 1, -1, -1):\n        right[a[i]] += 1\n        left[a[i]] -= 1\n\n    ans = 0\n    for i in range(1, 101):\n        ans += min(left[i], right[i])\n\n    return ans\n"
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(c) for c in stdin.split(' ')]\n    a.sort()\n    d = dict()\n    for c in a:\n        if c not in d:\n            d[c] = 0\n        d[c] += 1\n    mini = len(a) + 1\n    for c in d:\n        if d[c] < mini:\n            mini = d[c]\n    for c in d:\n        if d[c] == mini:\n            mini = min(mini, d[c])\n    return mini\n    \n\nprint(solution(input()))"
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    num_coins = int(stdin.readline())\n    coin_values = [int(x) for x in stdin.readline().split()]\n    pockets = []\n    count = 0\n    #print(num_coins, coin_values)\n    for i in range(num_coins):\n        if coin_values[i] not in pockets:\n            pockets.append(coin_values[i])\n            count += 1\n        else:\n            pass\n    print(count)\n\n\nsolution(input())\n"
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time:?\n    Space:?\n    \"\"\"\n    stdin = stdin.split('\\n')\n    n = int(stdin[0])\n    arr = [int(i) for i in stdin[1].split()]\n    arr.sort()\n    return str(len(set(arr)))\n    # arr.sort()\n    # print(arr)\n    # i = 0\n    # count = 0\n    # while i < len(arr):\n    #     while i < len(arr) and arr[i] == arr[i-1]:\n    #         i += 1\n    #     count += 1\n    #     i += 1\n    # return str(count)"
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    num_of_coins = int(stdin.readline())\n    num_of_coins.sort()\n    num_of_coins = [int(item) for item in num_of_coins]\n    print(num_of_coins)\n\nsolution(\"7\\n1 2 3 2 1 4 3\")\n\ndef"
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return \"\".join(chr(int(x)) for x in stdin.split())\n\nprint(solution(input()))\n"
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def get_input() -> list:\n        n = int(stdin[0])\n        a = [int(x) for x in stdin[1].split(' ')]\n        return [n, a]\n    \n    n, a = get_input()\n    n, a = int(n), [int(x) for x in a]\n    \n    a.sort()\n    \n    max_num = max(a)\n    count = [0 for _ in range(max_num + 1)]\n    for i in a:\n        count[i] += 1\n        \n    ans = 0\n    for i in range(max_num + 1):\n        for j in range(count[i]):\n            ans += (count[i] - j) / (n - j)\n            \n    return str(int(ans))\n\n\ndef"
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin)\n"
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    #Your code here\n    #Note that stdin.readline() is not input()\n    n, r = [int(x) for x in stdin.readline().split()]\n    arr = [int(x) for x in stdin.readline().split()]\n    \n    #think of a heap here and then sort\n    heap = []\n    \n    for i in range(n):\n        heapq.heappush(heap, (-arr[i], i))\n    \n    ans = 0\n    while heap:\n        num, i = heapq.heappop(heap)\n        if num < 0:\n            ans += 1\n            num += r\n            if num < 0:\n                break\n            heapq.heappush(heap, (-num, i))\n    \n    if not heap:\n        print(ans)\n        return\n    \n    print(-1)\n    return\nsolution(stdin)\n"
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    \u89e3\u9898\u601d\u8def\uff1a\n    \u4f4d\u8fd0\u7b97\n    \"\"\"\n    n, k = map(int, stdin.split(' '))\n    arr = list(map(int, stdin.split(' ')))\n    prefix_arr = [0]\n    for a in arr:\n        prefix_arr.append(prefix_arr[-1] | a)\n    ans = 0\n    for i in range(1, n + 1):\n        ans += prefix_arr[i + k] & ~prefix_arr[i]\n    return ans\n"
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, r = [int(x) for x in stdin.split('\\n')[:2]]\n    house = [int(x) for x in stdin.split('\\n')[2:]]\n    \n    heaters = 0\n    for i in house:\n        if i == 1:\n            heaters += 1\n    \n    for i in range(n):\n        if house[i] == 0:\n            heaters += 1\n            \n    if heaters == 0:\n        return '-1'\n    elif heaters < r:\n        return '0'\n    \n    heaters = 0\n    \n    for i in range(n):\n        if house[i] == 1:\n            heaters += 1\n            \n            if heaters >= r:\n                return '1'\n    \n    return '-1'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Find the minimum number of heaters needed to warm up the house.\n    If it is not possible to warm up the house, print -1.\n    '''\n    # Parse input\n    n, r = map(int, stdin.split())\n    house = list(map(int, stdin.split()))\n    # house = [int(stdin.readline()) for _ in range(n)]\n\n    # Find heaters and positions\n    heaters = []\n    positions = []\n    for i in range(n):\n        if house[i] == 1:\n            heaters.append(i)\n            positions.append(i - r + 1)\n            positions.append(i + r)\n\n    heaters = sorted(heaters)\n    positions = sorted(positions)\n\n    # Find the first heater and the last heater\n    first = heaters[0]\n    last = heaters[-1]\n    # print(first, last)\n\n    # Find the distance between the first and the last heater\n    distance = last - first\n\n    # Find the maximum distance between heaters and the first heater\n    # This is to check if there is enough distance to reach the first heater\n    # from the last heater\n    # print(distance)\n    for i in range(distance + 1):\n        # Find the heater that is exactly distance away from the first heater\n        if house[first + i] == 1:\n            # If the distance is exact, then the heater is possible\n            # print(first + i)\n            break\n\n    if i < distance:\n        # If it is not possible, then the house cannot be warmed up\n        return -1\n    else:\n        # If it is possible, then we can warm up the house from the\n        # heaters that are exactly distance away from the last heater\n        # If the house can be warmed up, then the answer will be\n        # one more than the number of heaters needed\n        # print(first + distance + 1)\n        return first + distance + 1\n"
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return str(get_number_of_heaters(stdin))\n\ndef"
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Finds the minimum number of heaters needed to warm up the whole house.\n\n    :param stdin: the input from stdin\n    :return: the minimum number of heaters needed to warm up the whole house\n    \"\"\"\n    n, r = map(int, stdin.split())\n    houses = list(map(int, stdin.split()))\n    # print(houses)\n    heaters = [0]\n    for i in range(1, n):\n        if houses[i - 1] == 0 and houses[i] == 0:\n            heaters.append(0)\n        else:\n            heaters.append(i - r + 1)\n            heaters.append(i + r)\n    # print(heaters)\n    heaters.append(n)\n    # print(heaters)\n    heaters.sort()\n    # print(heaters)\n    # Finds the maximum range of the house.\n    min_range = heaters[1] - heaters[0]\n    for i in range(1, len(heaters) - 1):\n        min_range = min(min_range, heaters[i + 1] - heaters[i])\n    # print(min_range)\n    if min_range < r:\n        return -1\n    else:\n        return min_range - 1\n\n\ndef"
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def parse_input(input_str: str) -> Tuple[int, List[int]]:\n        n, r = map(int, input_str.split())\n        house = list(map(int, input_str.split()))\n        return n, r, house\n    \n    def is_valid_input(input_str: str) -> bool:\n        n, r, house = parse_input(input_str)\n        return n >= 2 and r <= n\n\n    def main(input_str: str) -> str:\n        if is_valid_input(input_str):\n            n, r, house = parse_input(input_str)\n            house = [0] + house + [0]\n            heaters = []\n            for i in range(1, n + 2):\n                if house[i] == 1:\n                    heaters.append(i)\n            res = []\n            for heater in heaters:\n                heater_max = heater - r + 1\n                heater_min = heater + r\n                house[heater_min: heater_max] = [1] * len(house[heater_min: heater_max])\n                res.append(sum(house[heater_min: heater_max]))\n            print(min(res))\n            return \"\"\n        else:\n            return \"Invalid Input\"\n    return main(stdin)\n"
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, r = [int(x) for x in stdin.split(' ')]\n    a = [int(x) for x in stdin.split(' ')[1:]]\n    heaters = [0] * n\n    s = []\n    for i in range(len(a)):\n        if a[i] == 1:\n            heaters[i] = 1\n    cnt = 0\n    for h in heaters:\n        if h == 1:\n            cnt += 1\n    ans = 0\n    for i in range(cnt):\n        s = []\n        for j in range(len(heaters)):\n            if heaters[j] == 0:\n                s.append(j)\n        ans += 1\n        for h in s:\n            heaters[h] = 1\n            for k in range(1, r + 1):\n                if h - k >= 0:\n                    heaters[h - k] = 1\n                if h + k < n:\n                    heaters[h + k] = 1\n    return str(ans) if ans >= 0 else '-1'\n"
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, r = list(map(int, stdin.split(\" \")))\n    arr = list(map(int, stdin.split(\" \")))\n    # dp = [[False for _ in range(n)] for _ in range(n)]\n    count = 0\n    for i in range(n):\n        if arr[i] == 1:\n            for j in range(max(0, i - r + 1), min(i + r, n)):\n                arr[j] = 1\n    for i in range(n):\n        if arr[i] == 1:\n            count += 1\n    if count < n:\n        return str(count)\n    else:\n        return \"-1\"\n\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return str(len([h for h in range(0, len(stdin.split())) if int(stdin.split()[h]) == 1]))\n"
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdin\n"
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \n    n = int(stdin)\n    result = 0\n\n    # we will iterate over all possible tuples\n    # (A, B, C) = (1, 1, 2), (1, 2, 1), (2, 1, 1)\n    for a in range(1, n):\n        # we will iterate over all possible B\n        for b in range(1, n):\n            # we will iterate over all possible C\n            for c in range(1, n):\n                # if we have a tuple that equals n\n                if a*b + c == n:\n                    # increment the counter\n                    result += 1\n    return str(result)\n\"\"\"\nimport unittest\nimport math\n\n\ndef"
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.read())\n    numbers = []\n    for i in range(1,n):\n        for j in range(i+1,n):\n            for k in range(j+1,n):\n                if i*j+k == n:\n                    numbers.append((i,j,k))\n    return str(len(numbers))"
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    for a in range(1, n+1):\n        for b in range(1, n+1):\n            if a * b > n:\n                break\n            c = n - a * b\n            if c >= 0 and (c!= b and a!= c):\n                count += 1\n    return str(count)\n"
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # It's main function. Don't remove this function\n    # It's using for auto-testing and must return a result for check.\n    # replace this for solution\n    return \"The End\""
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n  N = int(stdin)\n  count = 0\n  for a in range(1, N + 1):\n    for b in range(1, N + 1):\n      c = N - a - b\n      if a * b == c:\n        count += 1\n  return count\n"
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    count = 0\n    for a in range(1, N + 1):\n        for b in range(1, N + 1):\n            c = N - a - b\n            if a * b + c == N:\n                count += 1\n    return str(count)\n\n\ndef"
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    count = 0\n    for a in range(1, n+1):\n        for b in range(1, n+1):\n            c = n - a - b\n            if a * b == c:\n                count += 1\n    return str(count)\n"
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    count = 0\n    n = int(stdin)\n    for a in range(1, n + 1):\n        for b in range(1, n + 1):\n            c = n - a - b\n            if c > 0:\n                count += 1\n    return count\n\"\"\"\n\ndef"
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n  A = int(stdin)\n  return print(\n    count_possible_triplets(A)\n  )\n\ndef"
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    s = stdin[1]\n    return s.count('(') - s.count(')')\n"
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"(((())\")\n    3\n    >>> solution(\")))((((((\")\n    0\n    >>> solution(\"(()\")\n    1\n    \"\"\"\n    # num_brackets = stdin[0]\n    # brackets = stdin[1:]\n    brackets = stdin\n    num_brackets = len(brackets)\n\n    opening_brackets = []\n    closing_brackets = []\n    for index, bracket in enumerate(brackets):\n        if bracket == '(':\n            opening_brackets.append(index)\n        elif bracket == ')':\n            closing_brackets.append(index)\n\n    stack = []\n    for opening_bracket in opening_brackets:\n        if len(stack) == 0:\n            stack.append(opening_bracket)\n        elif opening_bracket < stack[-1]:\n            stack.append(opening_bracket)\n        elif opening_bracket > stack[-1]:\n            stack.pop()\n\n    while len(stack)!= 0:\n        opening_bracket = stack.pop()\n        if opening_bracket in closing_brackets:\n            return opening_bracket\n\n    return num_brackets\n"
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.readline()\n    n = int(line)\n    bracket_seq = stdin.readline()\n    stack = []\n    res = 0\n    for c in bracket_seq:\n        if c == '(':\n            stack.append(c)\n        else:\n            if len(stack)!= 0 and stack[-1] == '(':\n                res += 1\n                stack.pop()\n            else:\n                stack.append(c)\n\n    return res\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    length = int(stdin[0])\n    brackets = stdin[1]\n    regular = []\n    counter = 0\n    for i in range(length):\n        if brackets[i] == \")\":\n            if brackets[i-1] == \"(\":\n                regular.append(str(counter))\n                counter = 0\n            else:\n                counter += 1\n        elif brackets[i] == \"(\":\n            if brackets[i - 1] == \")\":\n                regular.append(str(counter))\n                counter = 0\n            else:\n                counter += 1\n    if counter > 0:\n        regular.append(str(counter))\n    print(\" \".join(regular))\n    print(\" \".join(map(str, range(length))))\n    print(len(regular))"
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    bracket_count = int(stdin.readline())\n    bracket_string = stdin.readline()\n    answer = 0\n    for bracket_index, bracket in enumerate(bracket_string):\n        if bracket == '(':\n            continue\n        elif bracket == ')':\n            if bracket_string[bracket_index - 1] == '(':\n                answer += 1\n            else:\n                answer += 2\n    return answer\n"
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    length = int(stdin[0])\n    str_len = len(stdin)\n    for i in range(1,str_len):\n        if stdin[i] == \")\" and stdin[i-1] == \"(\":\n            length -= 1\n        elif stdin[i] == \"(\" and stdin[i-1] == \")\":\n            length -= 1\n    return length\n"
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    count = 0\n    for i, c in enumerate(s):\n        if c == '(':\n            count += 1\n        else:\n            count -= 1\n            if count < 0:\n                break\n    return i if count == 0 else i + count\n"
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin\n    count = 0\n    for i in range(len(n)):\n        if n[i] == '(':\n            count += 1\n        if n[i] == ')':\n            count -= 1\n        if count == 0:\n            return i"
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    If we change the position of each ')' to '(' and change the position of each '(' to ')', then we will obtain the correct expression for the bracket sequence.\n    \"\"\"\n    brackets = stdin\n    brackets = brackets.replace('(', ')')\n    brackets = brackets.replace(')', '(')\n    if brackets == stdin:\n        return 0\n    else:\n        return len(brackets)\n"
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''Function to find the number of positions that if you change the type of the i-th bracket, then the resulting bracket sequence becomes regular'''\n    bracket_sequence = stdin\n    # Brackets in string are in format \"()\"\n    bracket_counter = 0\n    for char in bracket_sequence:\n        if char == '(':\n            bracket_counter += 1\n        elif char == ')':\n            bracket_counter -= 1\n    return bracket_counter"
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    length = len(stdin)\n    max_len = 0\n    for i in range(length):\n        for j in range(i, length):\n            if stdin[i:j] in stdin[j + 1:]:\n                max_len = max(max_len, len(stdin[i:j]))\n    return max_len"
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def remove(s: str, t: str) -> int:\n        n = len(s)\n        m = len(t)\n        f = [0] * (n + 1)\n        g = [0] * (m + 1)\n        for i in range(n):\n            for j in range(m):\n                if s[i] == t[j]:\n                    f[i + 1] = max(f[i + 1], f[i] + 1)\n                else:\n                    f[i + 1] = max(f[i + 1], g[j] + 1)\n            for j in range(m):\n                if i < n - 1 and s[i] == s[i + 1]:\n                    g[j + 1] = max(g[j + 1], g[j] + 1)\n                else:\n                    g[j + 1] = max(g[j + 1], f[i + 1] + 1)\n        return f[n]\n\n    def remove2(s: str, t: str) -> int:\n        n = len(s)\n        m = len(t)\n        f = [0] * (n + 1)\n        g = [0] * (m + 1)\n        for i in range(n):\n            for j in range(m):\n                if s[i] == t[j]:\n                    f[i + 1] = max(f[i + 1], f[i] + 1)\n                else:\n                    g[j + 1] = max(g[j + 1], g[j] + 1)\n            for j in range(m):\n                if i < n - 1 and s[i] == s[i + 1]:\n                    g[j + 1] = max(g[j + 1], g[j] + 1)\n                else:\n                    g[j + 1] = max(g[j + 1], f[i + 1] + 1)\n        return g[m]\n\n    def remove3(s: str, t: str) -> int:\n        n = len(s)\n        m = len(t)\n        f = [0] * (n + 1)\n        g = [0] * (m + 1)\n        for i in range(n):\n            for j in range(m):\n                if s[i] == t[j]:\n                    f[i + 1] = max(f[i + 1], f[i] + 1)\n                else:\n                    g[j + 1] = max(g[j + 1], g[j] + 1)\n            for j in range(m):\n                if i < n - 1 and s[i] == s[i + 1]:\n                    g[j + 1] = max(g[j + 1], g[j] + 1)\n                else:\n                    g[j + 1] = max(g[j + 1], f[i + 1] + 1)\n        return f[n]\n\n    def remove4(s: str, t: str) -> int:\n        n = len(s)\n        m = len(t)\n        f = [0] * (n + 1)\n        g = [0] * (m + 1)\n        for i in range(n):\n            for j in range(m):\n                if s[i] == t[j]:\n                    f[i + 1] = max(f[i + 1], f[i] + 1)\n                else:\n                    g[j + 1] = max(g[j + 1], g[j] + 1)\n            for j in range(m):\n                if i < n - 1 and s[i] == s[i + 1]:\n                    g[j + 1] = max(g[j + 1], g[j] + 1)\n                else:\n                    g[j + 1] = max(g[j + 1], f[i + 1] + 1)\n        return g[m]\n\n    n = len(stdin)\n    m = len(stdin[0])\n    return max(remove(stdin, stdin[0]), remove(stdin, stdin[0][:m - 1]), remove(stdin, stdin[0][:m - 2]),\n               remove(stdin, stdin[0][:m - 3]), remove(stdin, stdin[0][:m - 4]))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def build_substring(s: str, l: int, r: int) -> str:\n        return s[:l] + s[l:r] + s[r:]\n\n    def check_subsequence(s: str, t: str) -> bool:\n        it = iter(s)\n        return all(c in it for c in t)\n\n    s = stdin\n    t = stdin\n    min_length = len(stdin)\n    for l in range(len(stdin)):\n        for r in range(l + 1, len(stdin) + 1):\n            substring = build_substring(s, l, r)\n            if check_subsequence(substring, t):\n                if min_length > r - l:\n                    min_length = r - l\n    return min_length\n"
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    s = s[::-1]\n    for i in range(1, len(s)):\n        if s[:i] == s[i::-1]:\n            print(len(s) - i)\n            return"
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s: str = stdin[0]\n    t: str = stdin[1]\n    \n    return len(s) - len(t)\n"
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    t = stdin[1:]\n    l = len(s)\n    res = l\n    for i in range(l):\n        if t in s[i:]:\n            res = i + 1\n            break\n    return res\n\n\nsolution(\"asdfasdf\")\n\n\n------\ndef"
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # a = 'aaabbcc'\n    a = stdin\n    b = a[:-1]\n    c = b[1:]\n    while c in a:\n        b = b[:-1]\n        c = b[1:]\n    print(len(b))\n    return a\n"
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    input_str = stdin\n    s = list(input_str)\n    t = list(input_str)\n    l = len(s)\n    res = []\n    t_index = 0\n    for i in range(l):\n        for j in range(l):\n            if s[i:j+1] == t[t_index:t_index+j-i+1]:\n                res.append(j-i+1)\n                t_index += 1\n                if t_index == len(t):\n                    break\n    print(max(res))\n    return 0\n"
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split(\"\\n\")\n    l = len(t)\n    m = len(s)\n    lst = []\n    i = 0\n    for c in s:\n        lst.append(i)\n        i += 1\n        if c == t[0]:\n            idx = 0\n            while idx < l and t[idx] == c:\n                idx += 1\n            if idx == l:\n                lst.append(i)\n    lst.append(i)\n    lst.sort()\n    res = 0\n    for i in range(len(lst) - 1):\n        if lst[i + 1] - lst[i] > res:\n            res = lst[i + 1] - lst[i]\n    return res\n"
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin\n    substring = stdin\n    l = len(string)\n    ans = 0\n    for i in range(l - 1):\n        if string[i: i + 2] == string[i + 2:]:\n            string = string[:i] + string[i + 2:]\n            ans = l - 1\n            break\n    if ans == 0:\n        return ans\n    return l - ans\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    a, b, c, d = map(int, stdin.split())\n    max_val = 0\n    for x in range(a, b + 1):\n        for y in range(c, d + 1):\n            if x * y > max_val:\n                max_val = x * y\n    return str(max_val)\n"
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    print(max(0, a - 1) * max(0, b - 1) * max(0, c - 1) * max(0, d - 1))\n    return ''\n"
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the maximum possible multiplication between two integers a and b.\n\n    >>> solution(\"1 2 1 1\")\n    2\n    >>> solution(\"1 2 1 10\")\n    10\n    \"\"\"\n    a, b, c, d = (int(x) for x in stdin.split())\n    return max(a * c, b * d)"
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split(' '))\n    return str(max(a * d, b * c))"
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"The solution function to be called by main.\n    It implements the above logic to solve the problem.\n\n    :param str stdin: The input in string format.\n    :return: The solution in string format.\n    \"\"\"\n\n    # Process the input and get the input numbers list.\n    a, b, c, d = map(int, stdin.split())\n    num_list = [a, b, c, d]\n\n    # Check for valid input range.\n    if any(num < 0 or num > 10 ** 9 for num in num_list):\n        return -1\n\n    # Find the largest possible product of 2 integers.\n    max_product = -1\n    for num1 in num_list:\n        for num2 in num_list:\n            if num1 * num2 > max_product:\n                max_product = num1 * num2\n\n    return max_product\n"
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = [int(x) for x in stdin.split(' ')]\n    a_min, a_max = a, b\n    c_min, c_max = c, d\n    x = max(a_min * c_max, a_max * c_min)\n    y = max(c_min * a_max, c_max * a_min)\n    return str(max(x, y))\n"
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = [int(x) for x in stdin.split(' ')]\n    \n    def has_dividing_primes(n):\n        n_square = n ** 2\n        for i in range(2, int(n_square ** 0.5) + 1):\n            if n_square % i == 0:\n                return False\n        return True\n\n    def get_primes(n):\n        primes = [i for i in range(2, n + 1) if has_dividing_primes(i)]\n        return primes\n\n    primes = get_primes(d)\n\n    for prime in primes:\n        if prime >= c:\n            return prime\n"
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split(\" \"))\n    if a == b:\n        print(1)\n    elif c == d:\n        print(d)\n    else:\n        if c > d:\n            print(max(a, b))\n        else:\n            print(min(a, b))\n\nprint(solution(input()))\n\"\"\"\n\n\"\"\"\nProblem Statement\nGiven are integers a,b,c and d. If x and y are integers and a \\leq x \\leq b and c\\leq y \\leq d hold, what is the maximum possible value of x \\times y?\n\n-----Constraints-----\n - -10^9 \\leq a \\leq b \\leq 10^9\n - -10^9 \\leq c \\leq d \\leq 10^9\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\na b c d\n\n-----Output-----\nPrint the answer.\n\n-----Sample Input-----\n1 2 1 1\n\n-----Sample Output-----\n2\n\nIf x = 1 and y = 1 then x \\times y = 1.\nIf x = 2 and y = 1 then x \\times y = 2.\nTherefore, the answer is 2.\n\"\"\"\n\n\"\"\"\nProblem Statement\nGiven are integers a,b,c and d. If x and y are integers and a \\leq x \\leq b and c\\leq y \\leq d hold, what is the maximum possible value of x \\times y?\n\n-----Constraints-----\n - -10^9 \\leq a \\leq b \\leq 10^9\n - -10^9 \\leq c \\leq d \\leq 10^9\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\na b c d\n\n-----Output-----\nPrint the answer.\n\n-----Sample Input-----\n1 2 1 1\n\n-----Sample Output-----\n2\n\nIf x = 1 and y = 1 then x \\times y = 1.\nIf x = 2 and y = 1 then x \\times y = 2.\nTherefore, the answer is 2.\n\"\"\"\n\n\"\"\"\nProblem Statement\nGiven are integers a,b,c and d. If x and y are integers and a \\leq x \\leq b and c\\leq y \\leq d hold, what is the maximum possible value of x \\times y?\n\n-----Constraints-----\n - -10^9 \\leq a \\leq b \\leq 10^9\n - -10^9 \\leq c \\leq d \\leq 10^9\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\na b c d\n\n-----Output-----\nPrint the answer.\n\n-----Sample Input-----\n1 2 1 1\n\n-----Sample Output-----\n2\n\nIf x = 1 and y = 1 then x \\times y = 1.\nIf x = 2 and y = 1 then x \\times y = 2.\nTherefore, the answer is 2.\n\"\"\"\n\n\"\"\"\nProblem Statement\nGiven are integers a,b,c and d. If x and y are integers and a \\leq x \\leq b and c\\leq y \\leq d hold, what is the maximum possible value of x \\times y?\n\n-----Constraints-----\n - -10^9 \\leq a \\leq b \\leq 10^9\n - -10^9 \\leq c \\leq d \\leq 10^9\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\na b c d\n\n-----Output-----\nPrint the answer.\n\n-----Sample Input-----\n1 2 1 1\n\n-----Sample Output-----\n2\n\nIf x = 1 and y = 1 then x \\times y = 1.\nIf x = 2 and y = 1 then x \\times y = 2.\nTherefore, the answer is 2.\n\"\"\"\n\n\"\"\"\nProblem Statement\nGiven are integers a,b,c and d. If x and y are integers and a \\leq x \\leq b and c\\leq y \\leq d hold, what is the maximum possible value of x \\times y?\n\n-----Constraints-----\n - -10^9 \\leq a \\leq b \\leq 10^9\n - -10^9 \\leq c \\leq d \\leq 10^9\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\na b c d\n\n-----Output-----\nPrint the answer.\n\n-----Sample Input-----\n1 2 1 1\n\n-----Sample Output-----\n2\n\nIf x = 1 and y = 1 then x \\times y = 1.\nIf x = 2 and y = 1 then x \\times y = 2.\nTherefore, the answer is 2.\n\"\"\"\n\n\"\"\"\nProblem Statement\nGiven are integers a,b,c and d. If x and y are integers and a \\leq x \\leq b and c\\leq y \\leq d hold, what is the maximum possible value of x \\times y?\n\n-----Constraints-----\n - -10^9 \\leq a \\leq b \\leq 10^9\n - -10^9 \\leq c \\leq d \\leq 10^9\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\na b c d\n\n-----Output-----\nPrint the answer.\n\n-----Sample Input-----\n1 2 1 1\n\n-----Sample Output-----\n2\n\nIf x = 1 and y = 1 then x \\times y = 1.\nIf x = 2 and y = 1 then x \\times y = 2.\nTherefore, the answer is 2.\n\"\"\"\n\n\"\"\"\nProblem Statement\nGiven are integers a,b,c and d. If x and y are integers and a \\leq x \\leq b and c\\leq y \\leq d hold, what is the maximum possible value of x \\times y?\n\n-----Constraints-----\n - -10^9 \\leq a \\leq b \\leq 10^9\n - -10^9 \\leq c \\leq d \\leq 10^9\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\na b c d\n\n-----Output-----\nPrint the answer.\n\n-----Sample Input-----\n1 2 1 1\n\n-----Sample Output-----\n2\n\nIf x = 1 and y = 1 then x \\times y = 1.\nIf x = 2 and y = 1 then x \\times y = 2.\nTherefore, the answer is 2.\n\"\"\"\n\n\"\"\"\nProblem Statement\nGiven are integers a,b,c and d. If x and y are integers and a \\leq x \\leq b and c\\leq y \\leq d hold, what is the maximum possible value of x \\times y?\n\n-----Constraints-----\n - -10^9 \\leq a \\leq b \\leq 10^9\n - -10^9 \\leq c \\leq d \\leq 10^9\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\na b c d\n\n-----Output-----\nPrint the answer.\n\n-----Sample Input-----\n1 2 1 1\n\n-----Sample Output-----\n2\n\nIf x = 1 and y = 1 then x \\times y = 1.\nIf x = 2 and y = 1 then x \\times y = 2.\nTherefore, the answer is 2.\n\"\"\"\n\n\"\"\"\nProblem Statement\nGiven are integers a,b,c and d. If x and y are integers and a \\leq x \\leq b and c\\leq y \\leq d hold, what is the maximum possible value of x \\times y?\n"
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = [int(x) for x in stdin.split(' ')]\n    answer = 0\n    if C <= D and A <= B:\n        answer = A * B\n    elif C <= D and A <= B:\n        answer = A * C\n    elif C <= D and A <= B:\n        answer = B * D\n    elif C <= D and A <= B:\n        answer = B * C\n    elif C <= D and A <= B:\n        answer = A * D\n    elif C <= D and A <= B:\n        answer = A * B\n    else:\n        answer = 0\n    return str(answer)"
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = [int(s) for s in stdin.split(' ')]\n    return str(max(a * d, b * c))"
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, *difficulties = map(int, stdin.split())\n    print(sum(int(c > max(difficulties) / 2) for c in Counter(difficulties).values()))\n"
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, *d = map(int, stdin.split())\n    return str(int(n // 2 - sum(v // 2 for v in d)))\n"
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, *data = [int(x) for x in stdin.split()]\n    n = n//2\n    ab = 0\n    for i in data:\n        if i >= n:\n            ab += 1\n    print(ab)"
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return \"\"\n"
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"The solution computes the optimal number of arcs or abcs,\n    given the difficulty of each problem, following the specification\n    in the problem statement.\n    \"\"\"\n    N, *problems = [int(number) for number in stdin.splitlines()]\n    assert N == len(problems)\n\n    def has_common_difficulty(problem_difficulty, arcs_difficulty):\n        return min(problem_difficulty, arcs_difficulty) >= 5\n\n    arcs = []\n    non_arcs = []\n\n    for problem_difficulty in problems:\n        if has_common_difficulty(problem_difficulty, 6):\n            arcs.append(problem_difficulty)\n        else:\n            non_arcs.append(problem_difficulty)\n\n    return len(arcs) + len(non_arcs)\n"
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = list(map(int, stdin.readline().strip().split(\" \")))\n    k = 0\n    arr.sort()\n    while n % 2 == 0:\n        k += 1\n        n = n // 2\n    for i in range(1, k):\n        if n % i == 0:\n            n = n // i\n            k = k // i\n    print(k)\n    print(n)\n    print(k * n)"
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N % 2!= 0:\n        return \"IMPOSSIBLE\"\n    ans = 0\n    d = list(map(int, stdin.split()))\n    d.sort()\n    for i in range(N // 2):\n        if d[i] >= N - i:\n            ans += 1\n    return str(ans)\n"
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return an integer representing the number of choices of K such that the number of problems for ARCs and the number of problems for ABCs are the same.\n\n    >>> solution(\"5\\n9 1 4 4 6 7\")\n    2\n    >>> solution(\"6\\n9 1 4 4 6 7\")\n    2\n    \"\"\"\n    n, *nums = map(int, stdin.split())\n    return str(sum(i > n // 2 for i in nums) // 2)\n"
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"Compute solution to Project Euler problem 21.\"\n    def is_arc(n: int, d: int) -> bool:\n        \"Return whether n is an arc.\"\n        return (n - d) % 2 == 0\n\n    def is_abc(n: int, d: int) -> bool:\n        \"Return whether n is an abc.\"\n        return not is_arc(n, d)\n\n    print(sum(is_arc(n, d) for n, d in enumerate(map(int, stdin.splitlines()[1:]))))\n    print(sum(is_abc(n, d) for n, d in enumerate(map(int, stdin.splitlines()[1:]))))\n    return \"\"\n"
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # get input\n    n, h, l, r = [int(x) for x in stdin.split(' ')]\n    a = [int(x) for x in stdin.split(' ')[1:]]\n\n    # create list of sleep times\n    sleep_times = []\n    for i in range(n):\n        sleep_times.append([a[i], (a[i] + h - l)])\n\n    # sort list of sleep times\n    sleep_times.sort(key=lambda x: x[0])\n\n    # create list of sleep time indices\n    sleep_indices = []\n    for i in range(n):\n        sleep_indices.append(i)\n\n    # sort list of sleep times indices\n    sleep_indices.sort(key=lambda x: sleep_times[x][0])\n\n    # get list of good times\n    good_times = []\n    for i in range(n):\n        j = i\n        while j < n and sleep_times[i][0] < sleep_times[j][1]:\n            if (sleep_times[j][0] <= sleep_times[i][1] <= sleep_times[j][1]) and (sleep_times[i][0] <= sleep_times[j][1] <= sleep_times[i][1]):\n                good_times.append(j)\n            j += 1\n\n    # print result\n    print(len(good_times))\n\nsolution(stdin)"
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution to the problem Dzima Shvartskyi\"\"\"\n    n, h, l, r = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    good = 0\n    for i in range(n):\n        if arr[i] < l:\n            if i + 1 < n and arr[i + 1] < r:\n                good += 1\n        elif arr[i] < r:\n            good += 1\n    return good\n"
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    hours = [int(x) for x in stdin.split(' ')]\n    days = hours[1]\n    hours = hours[0]\n    times = [int(x) for x in stdin.split('\\n')[0].split(' ')]\n    times = times[1:]\n    res = 0\n    last_time = 0\n    for i in range(len(times)):\n        if last_time + times[i] <= hours:\n            res += 1\n            last_time += times[i]\n        else:\n            last_time = times[i]\n    return res\n"
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, h, l, r = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n\n    max_num = 0\n    for i in range(n):\n        for j in range(a[i] - 1, l):\n            if j >= l and j <= r:\n                max_num += 1\n    return max_num"
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, h, l, r = map(int, stdin.split())\n    a = map(int, stdin.split())\n    b = sorted(a)\n    c = 0\n    i = 0\n    while i < n:\n        s = b[i]\n        while i < n and b[i] - s < l:\n            i += 1\n        if i < n and b[i] - s >= r:\n            i += 1\n            c += 1\n    return c\n"
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, h, l, r = (int(x) for x in stdin.split())\n    a = [int(x) for x in stdin.split('\\n')[1].split()]\n    res = 0\n    for i in range(1, n + 1):\n        if l <= sum(a[:i]) <= r:\n            res += 1\n    return str(res)\n"
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def get_good_times(times):\n        res = []\n        for time in times:\n            if time < h:\n                res.append(time)\n            else:\n                res.append(time - 1)\n        return res\n\n    n, h, l, r = list(map(int, stdin.split()))\n    times = list(map(int, stdin.split()))\n    good_times = get_good_times(times)\n    return len(set(good_times))\n"
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, h, l, r = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    # \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043d\u0430 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0435 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n    assert (0 < n <= 2000 and 0 < h <= 2000 and 0 <= l < h and 0 <= r < h and l < r), \"\u041d\u0435\u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\"\n\n    # \u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u0438\u0437 n \u043f\u0443\u0441\u0442\u044b\u0445 \u0441\u043f\u0438\u0441\u043a\u043e\u0432\n    s = [[] for _ in range(n)]\n\n    # \u041f\u0440\u043e\u0431\u0435\u0433\u0430\u0435\u043c\u0441\u044f \u043f\u043e \u0441\u043f\u0438\u0441\u043a\u0443 \u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0435 \u0441\u043f\u0438\u0441\u043a\u0438\n    for i in range(n):\n        for _ in range(a[i] - 1):\n            s[i].append(l)\n        for _ in range(a[i]):\n            s[i].append(r)\n\n    # \u0421\u0447\u0438\u0442\u0430\u0435\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u0434\u0445\u043e\u0434\u044f\u0449\u0438\u0445 \u0432\u0440\u0435\u043c\u0435\u043d\n    count = 0\n    for i in range(n):\n        if l <= s[i][0] <= r:\n            count += 1\n        if r >= s[i][-1] >= l:\n            count += 1\n    return count\n"
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # n, h, l, r = stdin.split()\n    n, h, l, r = map(int, stdin.split())\n    # a = stdin.split()\n    a = list(map(int, stdin.split()))\n\n    def good(t: int, d: int) -> bool:\n        return t % h == d\n\n    def count(s: int, e: int, d: int) -> int:\n        count = 0\n        for i in range(s, e + 1):\n            if good(a[i], d):\n                count += 1\n        return count\n\n    counts = []\n    for d in range(l, r + 1):\n        counts.append(count(0, n - 1, d))\n\n    print(max(counts))\n    return ''\n"
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"Compute total number of valid contests\"\n    # your code here\n    return str(len(stdin))\n"
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = list(map(int, stdin.readline().strip().split()))\n    arr.sort()\n    i = 0\n    j = 1\n    cnt = 1\n    while j < n:\n        if arr[j] > arr[j - 1] * 2:\n            cnt += 1\n        j += 1\n    print(cnt)\n    return ''"
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(x) for x in stdin.split(' ')]\n    a.sort()\n    c = 1\n    h = a[0]\n    m = 0\n    for i in range(1, n):\n        if a[i] >= 2 * h:\n            c += 1\n            h = a[i]\n            m = i\n    print(m+1)\n    return ''\n"
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split(\"\\n\")\n    n = int(input_list[0])\n    arr = list(map(int, input_list[1].split()))\n\n    solution = 0\n    for i in range(n):\n        solution += 1\n        for j in range(i + 1, n):\n            if arr[j] < arr[i] * 2:\n                solution -= 1\n                break\n    return solution\n"
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    The number of contests you can assemble is determined by the number of\n    problems that have higher difficulty than the maximum difficulty of the\n    highest problem in the contest. We want to assemble a contest with the\n    maximun number of problems of the given difficulty.\n    '''\n    from itertools import combinations\n    problems = [int(i) for i in stdin.split()]\n    difficulties = [i[1] for i in sorted(enumerate(problems), key=lambda i: i[1])]\n    problems.sort()\n    max_difficulty = max(problems)\n    count = 1\n    for i in range(len(difficulties)):\n        if difficulties[i] * 2 <= max_difficulty:\n            count += 1\n    return count\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = list(map(int, stdin.readline().split()))\n    arr.sort()\n    dp = [1 for _ in range(n)]\n    for i in range(n):\n        for j in range(i):\n            if arr[j] * 2 <= arr[i]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return str(max(dp))\n"
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\nN = int(stdin.readline())\nA = [int(x) for x in stdin.readline().split()]\n\ndp = {}\n\nfor a in sorted(A):\n    for i in range(1, int(N / 2) + 1):\n        key = (a * 2, a * 2 + i)\n        if key not in dp:\n            dp[key] = 0\n        dp[key] += 1\n\nprint(max(dp.values()))\n"
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return None\n"
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solve exercise.\"\"\"\n    size = int(stdin.readline())\n    arr = [int(x) for x in stdin.readline().split()]\n    min_ = 1\n    for i in range(size):\n        for j in range(i + 1, size):\n            lcm = arr[i] * arr[j] // gcd(arr[i], arr[j])\n            if min_ > lcm:\n                min_ = lcm\n                ans = [i + 1, j + 1]\n    return''.join(map(str, ans))\n\n\ndef"
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    mini = min(a)\n    for i in range(n):\n        for j in range(i+1, n):\n            if gcd(a[i], a[j]) == mini:\n                print(i+1, j+1)\n    return \"\"\n"
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('5\\n2 4 8 3 6\\n')\n    '1 2'\n    \"\"\"\n    n = int(stdin.split()[0])\n    a = [int(i) for i in stdin.split('\\n')[1].split()]\n    a.sort()\n    res = float('inf')\n    for i in range(n):\n        for j in range(i + 1, n):\n            res = min(res,\n                      math.gcd(a[i], a[j]) * math.lcm(a[i], a[j]))\n    return str(res)\n"
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def gcd(x: int, y: int) -> int:\n        if y == 0:\n            return x\n        return gcd(y, x % y)\n\n    def lcm(x: int, y: int) -> int:\n        return x * y // gcd(x, y)\n\n    def get_lcm(a: List[int]) -> int:\n        result = a[0]\n        for i in range(1, len(a)):\n            result = lcm(result, a[i])\n        return result\n\n    a = [int(s) for s in stdin.split()]\n    return str(a.index(get_lcm(a))) +'' + str(len(a) - 1)\n"
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds minimum lcm value of pairs\n    \n    Args:\n        stdin (str): Input string\n\n    Returns:\n        str: two integers as string\n    \"\"\"\n    n = int(stdin.split(\"\\n\")[0].split(\" \")[0])\n    a = [int(x) for x in stdin.split(\"\\n\")[1].split(\" \")]\n    max_a = max(a)\n    a_dic = {}\n    for i in range(n):\n        if max_a % a[i] == 0:\n            a_dic[a[i]] = [i + 1]\n        else:\n            a_dic[a[i]] = [i + 1]\n    # print(a_dic)\n    \n    min_lcm = max(a)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if min_lcm > lcm(a[i], a[j]):\n                min_lcm = lcm(a[i], a[j])\n                # print(min_lcm)\n                a_dic[min_lcm].append(j + 1)\n                # print(a_dic)\n                a_dic[min_lcm].append(i + 1)\n                # print(a_dic)\n    # print(a_dic)\n    \n    key_min_lcm = min_lcm\n    list_key_min_lcm = a_dic[min_lcm]\n    # print(key_min_lcm)\n    # print(list_key_min_lcm)\n    for lst in list_key_min_lcm:\n        if key_min_lcm == max(a):\n            break\n        else:\n            key_min_lcm = lcm(key_min_lcm, a[int(lst) - 1])\n            # print(key_min_lcm)\n    return f\"{list_key_min_lcm[0]} {list_key_min_lcm[1]}\"\n\n\ndef"
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    #\n    # For each element, check each other element\n    #\n    # At the end, print the first pair that the lcm is minimum among all\n    #\n    # Return the answer in the form of \"i j\" (where 1 <= i < j <= n)\n    #\n    # If there are multiple pairs, print any of them.\n\n    # Get the input\n    n = int(stdin)\n    arr = list(map(int, stdin.split()))\n\n    # Create a list for the lcm\n    lcm = []\n\n    # Iterate through the array\n    for i in range(n):\n        # Initialize lcm_i to the current element\n        lcm_i = arr[i]\n\n        # Iterate through the array again\n        for j in range(i + 1, n):\n            # Check if current element is a multiple of the other element\n            if arr[i] * arr[j] % arr[i] == 0:\n                # If so, update lcm_i\n                lcm_i = lcm_i * arr[j] // arr[i]\n\n        # Add the current lcm to the list\n        lcm.append(lcm_i)\n\n    # Find the minimum lcm\n    min_lcm = min(lcm)\n\n    # For each lcm, check each of the numbers\n    for i in range(n):\n        if lcm[i] == min_lcm:\n            print(i + 1, i + 2)\n            return \"\"\n\n\nsolution(input())\n"
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def gcd(a: int, b: int) -> int:\n        while a % b!= 0:\n            a, b = b, a % b\n        return b\n\n    def lcm(a: int, b: int) -> int:\n        return a * b // gcd(a, b)\n\n    n = int(stdin.readline())\n    nums = [int(x) for x in stdin.readline().split()]\n\n    d = {}\n    for i in range(n):\n        for j in range(i, n):\n            d[lcm(nums[i], nums[j])] = (i, j)\n    res = min(d.keys())\n\n    a, b = d[res]\n    print(a + 1, b + 1)\n    return ''\n\n\ndef"
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n\n    a.sort()\n    lcm = 1\n    i, j = 0, n - 1\n    while i < j:\n        if a[i] * a[j] < lcm:\n            lcm = lcm * a[i] / a[j]\n            i += 1\n            j -= 1\n        else:\n            j -= 1\n    print(i, j)\n"
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return''.join([str(i) for i in range(1, n + 1)])\n"
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find the smallest balanced ternary string which can be obtained from the given one with minimum number of replacements.\"\"\"\n    # Write your code here\n    n = len(stdin)\n    A = list(map(int, stdin))\n    if sum(A) % 3 == 0:\n        return stdin\n    for i in range(n - 1, -1, -1):\n        if sum(A[:i]) % 3 == 0:\n            A[:i + 1] = [0] * (i + 1)\n            break\n    return ''.join(map(str, A))\n    pass\n\n\ndef"
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = list(stdin)\n    numbers = [int(x) for x in stdin]\n    s_len = len(s)\n    t = [0] * s_len\n    # find all zeros\n    for i in range(s_len):\n        if s[i] == '0':\n            t[i] = 1\n    zeros = 0\n    for x in t:\n        if x == 0:\n            zeros += 1\n    zeros = s_len - zeros\n    # get number of twos\n    twos = 0\n    for x in numbers:\n        if x == 2:\n            twos += 1\n    # make replacements\n    count = 0\n    # first if there are zeros\n    if zeros > 0:\n        # if there are more zeros than twos in the string, then replace two with one\n        if zeros > twos:\n            count = twos\n            s[s_len-1] = '1'\n            for i in range(s_len-2, -1, -1):\n                if s[i] == '2':\n                    s[i] = '1'\n                    s[i+1] = '0'\n                    count -= 1\n                    if count == 0:\n                        break\n                elif s[i] == '0':\n                    s[i] = '1'\n                    s[i+1] = '0'\n                    count -= 1\n                    if count == 0:\n                        break\n                elif s[i] == '1':\n                    s[i] = '0'\n                    s[i+1] = '1'\n                    count -= 1\n                    if count == 0:\n                        break\n        # otherwise replace one with two\n        else:\n            count = twos\n            s[s_len-1] = '2'\n            for i in range(s_len-2, -1, -1):\n                if s[i] == '1':\n                    s[i] = '2'\n                    s[i+1] = '0'\n                    count -= 1\n                    if count == 0:\n                        break\n                elif s[i] == '0':\n                    s[i] = '2'\n                    s[i+1] = '1'\n                    count -= 1\n                    if count == 0:\n                        break\n                elif s[i] == '2':\n                    s[i] = '0'\n                    s[i+1] = '1'\n                    count -= 1\n                    if count == 0:\n                        break\n    # second if there are twos\n    elif twos > 0:\n        # if there are more twos than ones in the string, then replace two with one\n        if twos > zeros:\n            count = twos\n            s[s_len-1] = '1'\n            for i in range(s_len-2, -1, -1):\n                if s[i] == '1':\n                    s[i] = '1'\n                    s[i+1] = '0'\n                    count -= 1\n                    if count == 0:\n                        break\n                elif s[i] == '0':\n                    s[i] = '1'\n                    s[i+1] = '0'\n                    count -= 1\n                    if count == 0:\n                        break\n                elif s[i] == '2':\n                    s[i] = '0'\n                    s[i+1] = '1'\n                    count -= 1\n                    if count == 0:\n                        break\n        # otherwise replace one with two\n        else:\n            count = twos\n            s[s_len-1] = '2'\n            for i in range(s_len-2, -1, -1):\n                if s[i] == '2':\n                    s[i] = '2'\n                    s[i+1] = '0'\n                    count -= 1\n                    if count == 0:\n                        break\n                elif s[i] == '0':\n                    s[i] = '2'\n                    s[i+1] = '1'\n                    count -= 1\n                    if count == 0:\n                        break\n                elif s[i] == '1':\n                    s[i] = '0'\n                    s[i+1] = '1'\n                    count -= 1\n                    if count == 0:\n                        break\n    # no replacement required\n    else:\n        pass\n    # print the result\n    for x in s:\n        print(x, end=\"\")\n    return stdin\n\n\ndef"
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = '0' * (3 * n // 3) + '1' * (n // 3) + '2' * (n // 3)\n    return min(s[:3 * n], s[3 * n:6 * n], s[6 * n:], key=lambda s: (-len(s), s))\n"
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    s = list(s)\n    s = set(s)\n    s = list(s)\n    s.sort()\n    n = len(s)\n    if n == 1:\n        return s[0]\n    s = [0] * 3\n    while True:\n        if s[0] == n:\n            break\n        s[0] += 1\n        s[1] = 0\n        s[2] = 0\n        while s[0] < n:\n            s[1] += 1\n            s[0] += 1\n            s[2] = 0\n            while s[1] < n:\n                s[2] += 1\n                s[1] += 1\n                if s[0] % 3 == s[1] % 3 == s[2] % 3 == 0:\n                    break\n            if s[0] % 3 == s[1] % 3 == s[2] % 3 == 0:\n                break\n    return \"\".join(s)\nprint(solution(stdin))\n"
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # import numpy as np\n    # arr = np.array(stdin)\n    # arr = np.reshape(arr, (int(len(arr)/3), 3))\n    # arr = arr[np.argsort(arr, axis=0)]\n    # print(arr)\n    \n    stdin = stdin.split(\"0\")\n    stdin = [i for i in stdin if len(i)!= 0]\n    stdin = sorted(stdin)\n    stdin = \"0\" + stdin[0] + \"0\" + stdin[1] + \"0\"\n    print(stdin)\n"
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    input_length, s = stdin.split(\"\\n\")\n    input_length = int(input_length)\n    # print(input_length, s)\n    s = list(s)\n    if input_length == 3:\n        return \"2\" * input_length\n    first_digit = s[0]\n    first_digit_index = s.index(first_digit)\n    # print(first_digit_index)\n    one_count = 0\n    for i in range(len(s)):\n        if s[i] == \"1\":\n            one_count += 1\n    # print(one_count)\n    if first_digit_index % 3 == 0:\n        if one_count == input_length:\n            return \"0\" * input_length\n        else:\n            return \"0\" * (input_length - 1) + \"1\"\n    if first_digit_index % 3 == 1:\n        if one_count == input_length:\n            return \"2\" * input_length\n        else:\n            return \"1\" * (input_length - 1) + \"2\"\n    if first_digit_index % 3 == 2:\n        if one_count == input_length:\n            return \"1\" * input_length\n        else:\n            return \"2\" * (input_length - 1) + \"1\"\n"
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin\n    res = \"\"\n\n    while len(s) > 0:\n        # add the first 0 to the result\n        res += \"0\"\n        # the first 0 needs to be replaced with 1\n        if len(s) % 3 == 0:\n            res += \"1\"\n            s = s[1:]\n        # the first 0 needs to be replaced with 2\n        elif len(s) % 3 == 1:\n            res += \"2\"\n            s = s[2:]\n        # the first 0 needs to be replaced with 2\n        elif len(s) % 3 == 2:\n            res += \"0\"\n            s = s[1:]\n        # if we have 2 zeroes, we need to replace them with 1\n        if len(s) % 3 == 0:\n            res += \"1\"\n            s = s[2:]\n        # if we have 2 zeroes, we need to replace them with 2\n        elif len(s) % 3 == 1:\n            res += \"2\"\n            s = s[1:]\n        # if we have 2 zeroes, we need to replace them with 0\n        elif len(s) % 3 == 2:\n            res += \"0\"\n            s = s[2:]\n\n    return res"
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"121\")\n    '021'\n    >>> solution(\"111111\")\n    '111121'\n    >>> solution(\"111110\")\n    '111121'\n    >>> solution(\"111101\")\n    '111122'\n    >>> solution(\"111100\")\n    '111120'\n    \"\"\"\n    return ''.join(min(stdin, key=lambda s: ''.join(sorted(s, reverse=True))))\n"
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x = stdin[:n]\n    s = set()\n    i = 0\n    while i < len(x):\n        s.add(x[i])\n        if len(s) == 3:\n            break\n        i += 1\n    s.discard(x[i])\n    i += 1\n    while i < len(x):\n        s.add(x[i])\n        if len(s) == 3:\n            break\n        i += 1\n    return x[:i]"
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    m = [\n        \"0\" * n,\n        \"1\" * n,\n        \"2\" * n,\n    ]\n\n    def is_balanced(s):\n        return n - (s.count(\"0\") + s.count(\"1\")) == s.count(\"2\")\n\n    return min(m, key=is_balanced)\n"
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Takes in an input as a string from standard input\n    and returns the solution to the problem as a string\n    \"\"\"\n    n, m = [int(i) for i in stdin.split()]\n    # n, m = 5, 2\n    count = 0\n    for i in range(n+1):\n        count += i\n    return str(count % (10**7))\n"
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    \n    N, M = [int(x) for x in stdin.split(' ')]\n    a = [int(x) for x in stdin.split('\\n')[1:]]\n    if M == 1:\n        return 1\n    if N == 1:\n        return 1\n    if M == 0:\n        return 1\n    \n    a.sort(reverse=True)\n    \n    if a[0] < N - M + 1:\n        print(0)\n        return\n    \n    s = 1\n    for i in range(M):\n        s *= (a[i] - i + 1)\n        s %= 1000000007\n    for i in range(M):\n        if i < a[i]:\n            s *= (i + 1)\n            s %= 1000000007\n        elif i == a[i]:\n            s = (s - 1) % 1000000007\n        else:\n            break\n    \n    return s\n    \n"
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\n-----Tests-----\n>>> solution(\"4 1\\n3\\n\")\n'3'\n\n>>> solution(\"4 2\\n2 2\\n3 1\\n\")\n'1'\n\n>>> solution(\"5 2\\n3 4\\n\")\n'1'\n\n>>> solution(\"6 1\\n1\\n\")\n'1'\n\n>>> solution(\"6 2\\n2 3\\n\")\n'4'\n\n>>> solution(\"6 3\\n2 2 3\\n\")\n'2'\n\n>>> solution(\"10 5\\n3 2 4 5 1\\n\")\n'1'\n\n>>> solution(\"10 7\\n3 2 4 5 1\\n\")\n'0'\n\n>>> solution(\"4 3\\n3\\n\")\n'0'\n\n>>> solution(\"4 2\\n2 1\\n\")\n'0'\n\n>>> solution(\"4 4\\n1\\n\")\n'0'\n\n>>> solution(\"4 3\\n3 2\\n\")\n'0'\n\n>>> solution(\"4 5\\n2 1 3 4\\n\")\n'0'\n\n>>> solution(\"4 6\\n2 1 3 4 5\\n\")\n'0'\n\n>>> solution(\"4 7\\n2 1 3 4 5 6\\n\")\n'0'\n\n>>> solution(\"4 8\\n2 1 3 4 5 6 7\\n\")\n'0'\n\n>>> solution(\"4 9\\n2 1 3 4 5 6 7 8\\n\")\n'0'\n\n>>> solution(\"5 4\\n2 1 4 3 5\\n\")\n'0'\n\n>>> solution(\"6 6\\n3 3 4 5 6 6\\n\")\n'1'\n\n>>> solution(\"7 7\\n3 3 4 5 6 6 7\\n\")\n'1'\n\n>>> solution(\"8 8\\n3 3 4 5 6 6 7 8\\n\")\n'1'\n\n>>> solution(\"9 9\\n3 3 4 5 6 6 7 8 9\\n\")\n'1'\n\n>>> solution(\"10 10\\n3 3 4 5 6 6 7 8 9 10\\n\")\n'1'\n\n>>> solution(\"11 11\\n3 3 4 5 6 6 7 8 9 10 11\\n\")\n'1'\n\n>>> solution(\"12 12\\n3 3 4 5 6 6 7 8 9 10 11 12\\n\")\n'1'\n\n>>> solution(\"1 10\\n1\\n\")\n'0'\n\n>>> solution(\"2 10\\n1\\n\")\n'0'\n\n>>> solution(\"3 10\\n1 1\\n\")\n'1'\n\n>>> solution(\"4 10\\n1 1 1\\n\")\n'0'\n\n>>> solution(\"5 10\\n1 1 1 1\\n\")\n'0'\n\n>>> solution(\"6 10\\n1 1 1 1 1\\n\")\n'1'\n\n>>> solution(\"7 10\\n1 1 1 1 1 1\\n\")\n'0'\n\n>>> solution(\"8 10\\n1 1 1 1 1 1 1\\n\")\n'1'\n\n>>> solution(\"9 10\\n1 1 1 1 1 1 1 1\\n\")\n'1'\n\n>>> solution(\"10 10\\n1 1 1 1 1 1 1 1 1\\n\")\n'1'\n\n>>> solution(\"11 10\\n1 1 1 1 1 1 1 1 1 1\\n\")\n'1'\n\n>>> solution(\"12 10\\n1 1 1 1 1 1 1 1 1 1 1\\n\")\n'1'\n\n>>> solution(\"1 2\\n3\\n\")\n'0'\n\n>>> solution(\"1 2\\n1 1\\n\")\n'1'\n\n>>> solution(\"1 2\\n2 1\\n\")\n'0'\n\n>>> solution(\"2 2\\n2 2\\n\")\n'1'\n\n>>> solution(\"2 2\\n2 1 1\\n\")\n'0'\n\n>>> solution(\"3 2\\n2 2 1\\n\")\n'1'\n\n>>> solution(\"3 2\\n2 1 2\\n\")\n'0'\n\n>>> solution(\"3 2\\n3 1 1\\n\")\n'1'\n\n>>> solution(\"3 2\\n3 1 2\\n\")\n'0'\n\n>>> solution(\"3 2\\n3 1 2 1\\n\")\n'0'\n\n>>> solution(\"4 2\\n2 1 2 2\\n\")\n'1'\n\n>>> solution(\"4 2\\n3 1 1 2\\n\")\n'0'\n\n>>> solution(\"5 2\\n2 1 2 2 2\\n\")\n'1'\n\n>>> solution(\"5 2\\n2 2 1 2 2\\n\")\n'0'\n\n>>> solution(\"5 2\\n2 1 2 2 1\\n\")\n'0'\n\n>>> solution(\"5 2\\n2 2 1 2 1\\n\")\n'0'\n\n>>> solution(\"5 2\\n3 1 1 2 2\\n\")\n'1'\n\n>>> solution(\"5 2\\n3 1 2 2 1\\n\")\n'0'\n\n>>> solution(\"5 2\\n3 1 2 2 1\\n\")\n'1'\n\n>>> solution(\"5 2\\n3 2 2 1 2\\n\")\n'0'\n\n>>> solution(\"6 2\\n2 1 2 3 1 2\\n\")\n'0'\n\n>>> solution(\"6 2\\n2 1 2 3 2 1\\n\")\n'1'\n\n>>> solution(\"6 2\\n2 1 2 3 2 2\\n\")\n'1'\n\n>>> solution(\"6 2\\n2 1 2 3 2 1\\n\")\n'0'\n\n>>> solution(\"6 2\\n2 1 2 3 2 2\\n\")\n'1'\n\n>>> solution(\"6 2\\n2 2 1 2 3 2\\n\")\n'0'\n\n>>> solution(\"6 2\\n2 2 1 2 3 1\\n\")\n'1'\n\n>>> solution(\"6 2\\n2 2 1 2 1 2\\n\")\n'0'\n\n>>> solution(\"6 2\\n2 2 1 2 2 1\\n\")\n'0'\n\n>>> solution(\"6 2\\n2 2 2 1 2 1\\n\")\n'1'\n\n>>> solution(\"6 2\\n3 1 1 2 3 2\\n\")\n'0'\n\n>>> solution(\"6 2\\n3 1 2 3 1 2\\n\")\n'0'\n\n>>> solution(\"6 2\\n3 1 2 3 2 1\\n\")\n'0'\n\n>>> solution(\"6 2\\n3 1 2 1 2 1\\n\")\n'1'\n\n>>> solution(\"6 2\\n3 1 2 2 1 2\\n\")\n'0'\n\n>>> solution(\"6 2\\n3 1 2 2 1 2\\n\")\n'1'\n\n>>> solution(\"7 2\\n3 1 2 1 1 2\\n\")\n'1'\n\n>>> solution(\"7 2\\n3 1 2 2 1 2\\n\")\n'0'\n\n>>> solution(\"7 2\\n3 1 2 2 1 1\\n\")\n'1'\n\n>>> solution(\"7 2\\n3 1 2 2 1 2\\n\")\n'0'\n\n>>> solution(\"7 2\\n3 1 2 1 1 2\\n\")\n'1'\n\n>>> solution(\"7 2\\n3 1 2 1 2 1\\n\")\n'0'\n\n>>>"
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the solution\"\"\"\n    # Initialize the variables\n    ways: int = 0\n    n: int = int(stdin.readline())\n    m: int = int(stdin.readline())\n\n    # Initialize the elements\n    elements: List[int] = list(map(int, stdin.readline().split()))\n\n    # Iterate through each element\n    for i in range(n - m):\n        if i % 2 == 0:\n            if elements[i + m] - elements[i] <= m:\n                ways += 1\n\n    # Return the solution\n    return str(ways)"
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Takes a string from Standard In and returns the solution\"\"\"\n    n, m = map(int, stdin.split(\" \"))\n    s = stdin.split(\"\\n\")[1:]\n    count = 0\n    for i in range(n):\n        s_new = s[i].split(\" \")\n        for j in range(1, len(s_new)):\n            if int(s_new[j]) - int(s_new[j-1]) >= m:\n                count += 1\n    return str(count % 1000000007)\n"
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nfrom sys import stdin\nfrom typing import List\n\n\ndef"
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    N, M = map(int, stdin.readline().split())\n    broken_steps = set(map(int, stdin.readline().split()))\n    broken_steps = sorted(broken_steps)\n    if M == 0:\n        return 1\n    ways = [0] * (N + 1)\n    ways[0] = 1\n    for i in range(1, N + 1):\n        if broken_steps:\n            if broken_steps[0] == i:\n                broken_steps.pop(0)\n            elif broken_steps[0] < i:\n                broken_steps.pop(0)\n            else:\n                ways[i] = 0\n        else:\n            ways[i] = ways[i - 1]\n            if i > 1:\n                ways[i] += ways[i - 2]\n    return ways[-1] % (10 ** 9 + 7)\n"
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n  n, m = [int(v) for v in stdin.split()]\n  s = set()\n  for _ in range(m):\n    s.add(int(stdin.readline()))\n  \n  dp = [0] * (n + 1)\n  dp[0] = 1\n  dp[1] = 1\n  for i in range(2, n + 1):\n    if i in s:\n      dp[i] = 0\n    else:\n      dp[i] = dp[i - 1] + dp[i - 2]\n  \n  return dp[n] % 1000000007"
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, M = [int(x) for x in stdin.split('\\n')[:2]]\n    broken = [int(x) for x in stdin.split('\\n')[2:-1]]\n    dp = [[0] * (N + 1) for _ in range(N + 1)]\n    for i in range(M):\n        for step in range(broken[i] + 1, N + 1):\n            dp[step][step - broken[i]] = 1\n            dp[step][step - 1] = dp[step - 1][step - broken[i]]\n    return str(dp[N][N - 1] % (10 ** 9 + 7))"
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Takes the standard input string, parses it and sends it to the function that returns the solution.\n    :param stdin: standard input string\n    :return: string containing the solution\"\"\"\n    X, K, D = parse_input(stdin)\n    return str(solve(X, K, D))\n\n\ndef"
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x, k, d = map(int, stdin.split(' '))\n    d = min(d, abs(x))\n    k = min(k, abs(x - d))\n    return str(max(0, d - k))\n"
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n  coordinates = list(map(int, stdin.split()))\n  print(abs(coordinates[0] - coordinates[1] * coordinates[2]))"
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution(str([-10, 15, 5, 5]))\n    '15'\n    >>> solution(str([-10, 15, 5, 5]))\n    '15'\n    >>> solution(str([1, 10, 20, 5]))\n    '20'\n    '''\n    X, K, D = [int(c) for c in stdin.split('\\n')[0].split()]\n    \n    return str(min([X + (0 if K & 1 else -1) * D, X + (1 if K & 1 else -1) * D]))\n"
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x, k, d = map(int, stdin.split())\n    return str(min(abs(x - k * d), abs(x + k * d)))\n"
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    X, K, D = map(int, stdin.split())\n    return str(min(abs(X), K * D))\n"
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    pass"
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    _, K, D = map(int, stdin.split())\n    X = 0\n    cnt = 0\n    while cnt < K:\n        X += D\n        X = X - (D + 1) * 2 * (X > 0)\n        cnt += 1\n    return str(abs(X))"
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"6 2 4\")\n    2\n    \"\"\"\n    X, K, D = (int(x) for x in stdin.split())\n    if K < 1 or K > 1000000:\n        return \"Invalid Input\"\n\n    distance = abs(X - K * D)\n    if distance == 0:\n        return 0\n    elif K % 2 == 0:\n        return distance\n    else:\n        return 2 * distance - K * D\n"
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \n    return 'write your solution here'\n"
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    import math\n\n    return math.ceil(math.log(int(stdin)) / math.log(2))\n"
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    sq = math.sqrt(n)\n    \n    if sq.is_integer():\n        return math.floor(sq) + 1\n    else:\n        return 0\n"
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''Gets the number of standard deviations from the mean that a random value is from.'''\n    N = int(stdin)\n    mean = N/2\n    std = mean ** 2 - mean\n    return len(list(filter(lambda x: (x ** 2 - mean) > N, range(mean - std, mean + std))))\n    \nsolution('11')\nsolution('61441')\nsolution('571576')\n"
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = int(stdin)\n    #import pdb; pdb.set_trace()\n    count = 0\n    for i in range(2, stdin):\n        if stdin % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin) // (3))\n\n\ndef"
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return '?'"
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(1, 10):\n        for j in range(1, 10):\n            if (n // 100) * (n % 100 // 10) * (n % 10) == (i * 100) + (j * 10):\n                print((i * 100) + (j * 10))\n                return\n            if (n // 10) * (n % 10) == (i * 10):\n                print(i * 10)\n                return\n            if n == i:\n                print(i)\n                return"
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin) ** 2)\n"
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return str(pow(int(stdin), 3))\n"
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return str(pow(2, int(stdin) - 1))"
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # import stdin for raw string\n    a = int(stdin)\n    if a == 1:\n        print(1)\n    else:\n        print(2)\n    return a\n"
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    while n!= 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = n * 3 + 1\n    return n"
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    # Program to find the sum of first n numbers\n    # number of test cases\n    N = int(stdin)\n    # counter variable\n    counter = 0\n    # iterate through each test case\n    while counter < N:\n        # input for the test case\n        num = int(stdin)\n        # loop to add all numbers up to the input\n        sum = 0\n        while (counter < N):\n            # add the numbers\n            sum = sum + counter\n            # increment the counter\n            counter = counter + 1\n        print(sum)\n    return \"\"\n"
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if (n % 5) == 0:\n        return 0\n    else:\n        return 1\n"
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return {\n        0: '0',\n        1: '1',\n        2: '0',\n        3: '1',\n        4: '1',\n        5: '0',\n        6: '1',\n        7: '0',\n        8: '1',\n        9: '0'\n    }[int(stdin)]\n"
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''"
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a % 3 == 0 and a % 5 == 0:\n        return 1\n    else:\n        return 0\n    return 'Done'\n"
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin) % 4 == 0)\n"
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(0 if n % 4 == 0 else 1)\n"
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    l = [0] * 10\n    if a == 1:\n        return 0\n    if a == 2:\n        return 1\n    if a > 2:\n        l[2] = 1\n    for i in range(3, a + 1):\n        for j in range(i, a + 1):\n            if i % j == 0 and l[i // j] == 0:\n                l[i] = 1\n                break\n    if l[a] == 0:\n        return 0\n    return 1\n    # return l[a]\n"
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    number = stdin[0]\n    return str(number % 2)\n"
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \n    return str(int(stdin) % 2)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    length = int(stdin.readline())\n    integers = [int(i) for i in stdin.readline().split(\" \")]\n    for i in range(length):\n        for j in range(length):\n            if j + i >= length:\n                break\n            if integers[j]!= integers[j + i]:\n                break\n        else:\n            return i\n    return -1\n"
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\nreturn stdout"
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    return \"3\""
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n    # // Put your solution here, remember to use return statements\n    # // when you want to end a function early in order to avoid excessive\n    # // processing.\n    # // DO NOT WRITE CODE OUTSIDE THE FUNCTION!\n    # // The method to use for the input() function may change.\n    # // If you do not know, ask your teacher.\n    # // On a test case, you should always get the expected output.\n    # // To debug, print out the input, expected output, and output\n    # // (or expected error message) for each test case.\n    #\n    # // The first line of input data contains a single integer n (1 \u2264 n \u2264 10).\n    # // The second line of input data contains n space-separated integers a_{i} (1 \u2264 a_{i} \u2264 11).\n    #\n    # // The first line of output data will contain a single integer, the number of integers in the array.\n    # // The second line of output data will contain n space-separated integers, the middle digits of the array.\n    # // The third line of output data will contain n space-separated integers, the first and last digits of the array.\n    #\n    # // Ex.\n    # //\n    # // Input\n    # // 4\n    # // 2 5 3 1\n    # //\n    # // Output\n    # // 2\n    # // 5 3\n    # // 2 1\n\n\ndef"
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \n    return stdin\n"
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = list(map(int, stdin.readline().split()))\n    return sum(list(map(lambda x: x**2, arr)))\n"
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    nums = [int(x) for x in stdin.readline().split()]\n    ans = 0\n    for i in range(n):\n        j = 0\n        while j < len(nums):\n            if nums[j] == nums[i]:\n                ans += 1\n                nums.pop(j)\n            else:\n                j += 1\n        if i == j:\n            ans += 1\n    return ans"
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return 'blah'\n\nassert solution('4\\n2 5 3 1') == 4\n\n-----Problem-----\n\nSolve the problem using the problem description from the editor.\n\"\"\"\n\nimport math"
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    print(len(stdin.split(' ')))\n    pass"
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the minimum number of packages Polycarp needs to buy in order to\n    buy all the shovels.\n\n    Args:\n        stdin (str): input given by the challenge.\n\n    Returns:\n        str: string containing the minimum number of packages.\n    \"\"\"\n    return \"Not Implemented\"\n"
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Returns the minimum number of packages that polycarp will have to buy to get exactly n shovels.\n    \"\"\"\n    # Get the number of test cases\n    num_cases = int(stdin[0])\n    # For each case\n    for i in range(1, num_cases + 1):\n        # Parse the input\n        n, k = map(int, stdin[i].split())\n        # Get the answer\n        ans = n // k + n % k\n        # Print the answer\n        print(ans)\n"
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"O(n) time, O(1) space\"\"\"\n    t = int(stdin)\n    ans = [0] * t\n    for i in range(t):\n        n, k = map(int, stdin.strip().split())\n        l = [int(i) for i in range(1, k + 1)]\n        ans[i] = n // k + 1\n        for i in range(n % k):\n            if l[i] > l[i + 1]:\n                ans[i] += 1\n            elif l[i] == l[i + 1]:\n                ans[i] += 2\n            else:\n                ans[i] += 1\n                break\n        if n % k > 0:\n            ans[i] += 1\n    return '\\n'.join(str(i) for i in ans)\n"
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\"\"\"\nimport sys\n\ndef"
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    results = []\n    for i in range(t):\n        line = stdin.readline().split()\n        n = int(line[0])\n        k = int(line[1])\n        results.append(solve(n, k))\n    return '\\n'.join(map(str, results))\n\n\ndef"
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split('\\n')[0].split(' ')]\n    return str(math.ceil(n / k))\n"
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    for _ in range(int(stdin)):\n        n, k = map(int, input().split())\n        print(k - (n % k))"
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    # return \"\""
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"8 7\")\n    2\n    >>> solution(\"8 1\")\n    8\n    >>> solution(\"6 10\")\n    1\n    >>> solution(\"999999733 999999732\")\n    999999733\n    >>> solution(\"999999733 999999733\")\n    1\n    \"\"\"\n   ...\n"
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    n, m = map(int, stdin.split())\n    k = [0] * n\n    p = [0] * n\n    for i in range(n):\n        k[i], *p[i] = map(int, stdin.split()[i * 2 + 1: i * 2 + 2])\n\n    #for i in range(n):\n    #    print(k[i], p[i])\n\n    count = 0\n    for i in range(2 ** n):\n        on = 0\n        for j in range(n):\n            if i >> j & 1:\n                on += k[j]\n        for j in range(n):\n            if p[j] == 1:\n                on = on % 2\n        if on == 0:\n            count += 1\n\n    return count\n"
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n    return \" \".join(stdin.split(\"\\n\"))\ndef"
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\n'''\ndef"
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n    stdin = stdin.split('\\n')\n    N = int(stdin[0].split()[0])\n    M = int(stdin[0].split()[1])\n    switches = {}\n    for line in stdin[1:N+1]:\n        switch, bulb = line.split(' ')\n        switches[int(switch)] = int(bulb)\n    \n    count = 0\n    for line in stdin[N+1:]:\n        bulbs = line.split(' ')\n        p = int(bulbs[0])\n        states = {}\n        for i in range(1, M+1):\n            if i % 2 == p:\n                states[i] = int(bulbs[i])\n        #print(states)\n        for i in range(1, N+1):\n            if (i in states) and (states[i] in switches):\n                count += 1\n    return str(count)"
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # \ubaa8\ub4e0 \uc815\uc810\uc5d0 \ub300\ud574\uc11c \uae30\ubcf8 \uc138\ud305\n    n, m = map(int, stdin.split())\n    on_off = [0] * n\n\n    # \uac04\uc120\uc5d0 \ub300\ud55c \uc815\ubcf4\ub97c \uac16\ub294 \ub9ac\uc2a4\ud2b8\n    edges = [[] for _ in range(n)]\n\n    # \uac04\uc120 \uc785\ub825\n    for _ in range(m):\n        a, b = map(int, stdin.split())\n        edges[a - 1].append(b - 1)\n        edges[b - 1].append(a - 1)\n\n    # \ubaa8\ub4e0 \uac04\uc120\uc5d0 \ub300\ud574\uc11c \uc815\ubcf4 \uac31\uc2e0\n    for edge in edges:\n        edge.sort()\n\n    # 1\ubc88 \ub178\ub4dc\ub97c \uc2dc\uc791\uc810\uc73c\ub85c \ud558\ub294 \uac04\uc120 \uc21c\ud68c\n    def dfs(current_node, pre_node):\n        nonlocal on_off\n        # \uae30\uc874\uc5d0 \uc788\ub358 \ub178\ub4dc\uc758 \uc0c1\ud0dc\ub97c \uc54c\uc544\ub0b8 \uacbd\uc6b0\n        if on_off[current_node]!= 0:\n            return on_off[current_node] == pre_node % 2\n\n        # \ubaa8\ub4e0 \uac04\uc120\uc5d0 \ub300\ud574 \uc7ac\uadc0\uc801\uc73c\ub85c \ud638\ucd9c\n        for nxt_node in edges[current_node]:\n            if nxt_node == pre_node:\n                continue\n\n            on_off[current_node] = dfs(nxt_node, current_node)\n\n            # \ub2e4\uc74c \ub178\ub4dc\uc5d0 \ub300\ud574 \uc0c1\ud0dc\uac00 \ubcc0\uacbd\ub41c \uacbd\uc6b0\n            if on_off[current_node]!= 0:\n                return True\n\n        # \uc0c1\ud0dc\uac00 \ubcc0\uacbd\ub41c \uc801\uc774 \uc5c6\ub294 \uacbd\uc6b0\n        return False\n\n    # \uc2dc\uc791\uc810\uc5d0\uc11c \uae30\uc874\uc5d0 \uc788\ub358 \ub178\ub4dc\ub85c \uac00\ub294 \uc21c\ud68c\ub97c \uc2e4\uc2dc\n    on_off[0] = 1\n    dfs(0, -1)\n\n    # \ubaa8\ub4e0 \ub178\ub4dc\uc5d0 \ub300\ud574\uc11c \uc2dc\uc791\uc810\uc73c\ub85c \uac00\ub294 \uc21c\ud68c\ub97c \uc2e4\uc2dc\n    answer = 0\n    for i in range(n):\n        if on_off[i] == 1:\n            answer += 1\n\n    print(answer)\n\n\nsolution(input())\n"
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    (n, m) = stdin.split(\" \")\n    (n, m) = (int(n), int(m))\n    (k, s) = zip(*(iter(stdin.split(\" \")), ) * 2)\n    (k, s) = (list(k), list(s))\n    (p, ) = stdin.split(\" \")\n    (p, ) = (int(p), )\n    # Write your code here\n    # Write your code here\n    sum_ = 0\n    for i in range(0, n):\n        counter = 0\n        for j in range(0, m):\n            if int(s[i]) % 2 == int(p[j]) % 2:\n                counter += 1\n        if counter % 2 == 0:\n            sum_ += 1\n    return str(sum_)"
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return '1'\n"
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def dfs(arr: list, modulo: int):\n        nonlocal count\n        if len(arr) == N:\n            if sum(arr) % 2 == 0:\n                count += 1\n            return\n        for num in switch[arr[-1]]:\n            if not num in arr:\n                dfs(arr + [num], modulo)\n\n    count = 0\n    switch = dict()\n    N, M = [int(num) for num in stdin.split(\"\\n\")[0].split()]\n    for line in stdin.split(\"\\n\")[1:]:\n        switch[int(line.split()[0])] = [int(num) for num in line.split()[1:]]\n    for num in range(1, M + 1):\n        count += dfs([], num)\n    return count\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    N, M = [int(i) for i in stdin[0].split(' ')]\n    bulbs = {}\n    for i in range(1, N + 1):\n        bulbs[i] = [int(j) for j in stdin[i].split(' ')]\n    p = [int(i) for i in stdin[N + 1].split(' ')]\n    total_bulbs = 0\n    for i in range(len(p)):\n        if p[i] == 1:\n            total_bulbs += M - i\n        else:\n            total_bulbs += i\n    print(total_bulbs)\n\n----Test Case----\n>>> solution(\"2 2\\n2 1 2\\n1 2\\n0 1\")\n1\n"
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, h, m = map(int, stdin.split())\n    \n    h_rads = h * 12 + m / 60 * 360\n    m_rads = m * 360 / 60\n    \n    angle = abs(h_rads - m_rads)\n    \n    return str(round(angle * (a + b) / 2))\n"
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B, H, M = map(int, stdin.strip().split(' '))\n\n    hours_degrees = H * 360.0 / 12.0\n    minutes_degrees = M * 360.0 / 60.0\n\n    minutes_dist = A * minutes_degrees / 360.0\n    hours_dist = B * hours_degrees / 360.0\n\n    return \"{:.9f}\".format(minutes_dist + hours_dist)\n"
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    (a, b, h, m) = map(int, stdin.split())\n    a = a*100\n    b = b*100\n    h = h*60*100\n    m = m*100\n    return \"{:.9f}\".format(abs((a*m-b*h)/(m-h)))\n"
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B, H, M = [int(x) for x in stdin.split(\" \")]\n    h_cm = (B-A)*(H*60 + M)\n    m_cm = A*60\n    return round(abs(h_cm - m_cm), 9)\n\"\"\"\n\ndef"
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, h, m = [int(i) for i in stdin.split(' ')]\n    h, m = h/12, m/60\n    radian_h, radian_m = h * 2 * pi, m * 2 * pi\n    radian_h_over_2, radian_m_over_2 = radian_h / 2, radian_m / 2\n    radian_h_over_2_times_b, radian_m_over_2_times_b = radian_h_over_2 * b, radian_m_over_2 * b\n    a_minus_b, b_minus_a = a - b, a + b\n    dist_a_minus_b = a_minus_b * cos(radian_h_over_2_times_b)\n    dist_b_minus_a = b_minus_a * cos(radian_m_over_2_times_b)\n    dist_a_minus_b_times_sin_m = dist_a_minus_b * sin(radian_m_over_2_times_b)\n    dist_b_minus_a_times_sin_h = dist_b_minus_a * sin(radian_h_over_2_times_b)\n    dist_a_minus_b_times_cos_m = dist_a_minus_b * cos(radian_m_over_2_times_b)\n    dist_b_minus_a_times_cos_h = dist_b_minus_a * cos(radian_h_over_2_times_b)\n    dist_a_minus_b_times_sin_m_plus_cos_h = dist_a_minus_b_times_sin_m + dist_a_minus_b_times_cos_h\n    dist_b_minus_a_times_sin_h_plus_cos_m = dist_b_minus_a_times_sin_h + dist_b_minus_a_times_cos_m\n    return str(round(dist_a_minus_b_times_sin_h_plus_cos_m, 9))\n    \n"
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, h, m = map(int, stdin.split(' '))\n    h_angle = h * 360 / 12\n    m_angle = m * 360 / 60\n    h_dist = (a + b) / 2 * math.cos(h_angle / 360 * 2 * math.pi)\n    m_dist = (a + b) / 2 * math.cos(m_angle / 360 * 2 * math.pi)\n    return f'{round(h_dist + m_dist, 9):.9f}'\n"
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B, H, M = map(int, stdin.split())\n    A, B = A * 100, B * 100\n    H *= 12\n    M += H\n    H = H % 12\n    M = M % 60\n    return str(abs(A - B))\n    \n"
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, h, m = map(int, stdin.split())\n    return a + b + h + m - 360\n\"\"\"\n\n\"\"\"\nSolution Approach\n\nFor the first example in the problem statement, the hands could be at the positions shown in the figure below.\n\n----Solution------\n1) Calculate the angles and calculate the length.\n2) Return the length.\n\"\"\""
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B, H, M = [int(x) for x in stdin.strip().split()]\n    M = M * 60 + H * 3600\n    D = M // (360 * 12)\n    H = (M // 3600) % 12\n    M = (M - D * 360 * 12) % 3600\n    D = D % 30\n    M = M % 60\n    return \"{0}.{1:0>9}\".format(str(D), str(M))"
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, h, m = [int(c) for c in stdin.split()]\n    return str(abs(a * h + b * m))\n\"\"\"\n"
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    n, m = map(int, stdin.split('\\n')[0].split(' '))\n    arr = list(map(int, stdin.split('\\n')[1].split(' ')))\n    # 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100\n    #0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100\n    sorted_arr = sorted(arr)\n    print(sorted_arr)\n    ans = 0\n    for i in range(len(sorted_arr)):\n        for j in range(i+1, len(sorted_arr)):\n            if (sorted_arr[i] + sorted_arr[j]) == m:\n                ans += 1\n                print(i, j)\n    print(ans)\n"
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    arr = list(map(int, stdin.split(' ')))\n    arr.sort()\n    \n    lo = 0\n    hi = n\n    \n    count = 0\n    \n    for i in range(n):\n        while (lo!= hi) and (arr[lo] + arr[hi] > m):\n            hi -= 1\n        \n        if arr[lo] + arr[hi] == m:\n            count += 1\n            \n        lo += 1\n        hi -= 1\n    \n    return count\n"
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4 1\\n1 4 5 60 4\")\n    8\n    >>> solution(\"3 1\\n1 1 1\")\n    6\n    >>> solution(\"15 2\\n1 2 3 1 2 3 1 2 3 1 2 3 1 2 3\")\n    97\n    \"\"\"\n    _, m = stdin.split()\n    n, seq = map(int, stdin.split())\n    seq = list(map(int, seq.split()))\n    seq.sort()\n\n    left = 0\n    right = n - 1\n    res = 0\n\n    while left <= right:\n        if right - left <= (n // 2):\n            count = 1\n            median = seq[left]\n            for i in range(left, right):\n                if seq[i] <= m:\n                    count += 1\n                    median += seq[i]\n            if count == n // 2:\n                res += 1\n            left += 1\n        else:\n            left += 1\n            right -= 1\n    return res\n"
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(\" \"))\n    arr = list(map(int, stdin.split(\" \")))\n    x = sorted(arr)\n    return sum([len(arr) - bisect.bisect(x, m) for i in range(len(arr))])\n"
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    a = [int(i) for i in stdin.split(' ')]\n    a.sort()\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i] + a[j] == m:\n                count += 1\n    return str(count)\n\n\ndef"
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def get_median(a: list) -> int:\n        return a[(n + 1) // 2 - 1] if n % 2 else (a[n // 2 - 1] + a[n // 2]) / 2\n\n    n, m = list(map(int, stdin.split(' ')))\n    a = list(map(int, stdin.split(' ')))\n    a.sort()\n    i = 0\n    ans = 0\n    while i < n:\n        j = i + 1\n        while j < n and a[i] + a[j] <= m:\n            if get_median(a[i:j + 1]) == m:\n                ans += 1\n            j += 1\n        i += 1\n    return ans\n"
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n, m = map(int, stdin.split(' '))\n    seq = [int(x) for x in stdin.split(' ') if x]\n\n    seq.sort()\n    left = (n + 1) // 2 - 1\n    right = n // 2\n    while left < right:\n        if (seq[left] + seq[right]) == m:\n            return '{} {}'.format(left + 1, right + 1)\n        elif (seq[left] + seq[right]) > m:\n            right -= 1\n        else:\n            left += 1\n    return '0 0'\n"
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    a = list(map(int, stdin.split(' ')))\n\n    b = [0] * n\n\n    for l, r in [list(map(int, stdin.split(' '))) for _ in range(m)]:\n        for i in range(l - 1, r):\n            b[i] += 1\n\n    print(max(b) - min(b))\n    print(min(b))\n\n    return ''\n\n\ndef"
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3\\n\")\n    '6\\n2\\n1 4\\n'\n    \"\"\"\n\n    _, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = [0] * len(a)\n    for _ in range(m):\n        l, r = map(int, stdin.split())\n        b[l - 1] += 1\n        b[r] -= 1\n    for i in range(len(a)):\n        b[i] += a[i]\n    return str(max(b) - min(b))\n\n\ndef"
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split(\" \")))\n    a = list(map(int, stdin.split(\" \")))\n    m = list(map(int, stdin.split(\" \")))\n    m_s = []\n    max_diff = 0\n    for i in m:\n        m_s.append(i)\n        max_diff = max(max_diff, max(a[i[0] - 1: i[1]]) - min(a[i[0] - 1: i[1]]))\n    print(max_diff)\n    return \"\"\n\nprint(solution(input()))\n\n\n\n\n\n-----Explanation-----\n\nSo, we have to solve 2 problems, finding the maximum difference and finding the minimum number of segments you apply.\n\nWe'll need 2 auxiliary data structures:\n\n1. segment_endpoints: an array that contains the left and right points of each segment.\n2. m_s: an array that contains the left and right points of each segment.\n\nFor the second problem, we'll need to build a hash map which contains all segments in the form of the beginning and the end of the segment.\n\nThe maximum difference is the result of the first problem.\n\nThe minimum number of segments is the number of intersections of the segments.\n\nHere is a rough explanation of the algorithm. We need to find all segments that we can change and obtain the array which is equal to the array after changing.\n\nThe maximum difference is the result of the first problem. We can change the array starting from the left point of the first segment and finish at the right point of the last segment.\n\nWe need to find the intersection of all segments, so we'll need a hash map of the beginning and the end of the segment.\n\nWe'll iterate over each segment and for each segment we'll check if its beginning point is in the hash map or not. If it is, then we'll increment the count of the beginning point by 1. We'll also check if the end point is in the hash map or not. If it is, then we'll increment the count of the end point by 1.\n\nIf the beginning point of the segment is in the hash map, then we'll increment the number of left segments by 1.\n\nThe beginning point of the segment is not in the hash map, so we'll add it to the hash map and create a new segment.\n\nIf the end point of the segment is in the hash map, then we'll increment the number of right segments by 1.\n\nThe end point of the segment is not in the hash map, so we'll add it to the hash map and create a new segment.\n\nAs you can see, we can change the array because we've changed all the left segments by one and all the right segments by one.\n\nHere is the code:\n\ndef"
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n    \n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    \n    b = [0] * n\n    \n    for _ in range(m):\n        l, r = map(int, stdin.split())\n        \n        if l > r:\n            l, r = r, l\n        \n        for i in range(l - 1, r):\n            b[i] += 1\n    \n    d = max(b) - min(b)\n    \n    if d == 0:\n        print(0)\n        return\n    \n    q = sum(1 for i in range(n) if b[i] == d)\n    \n    print(d)\n    print(q)\n    \n    for i in range(n):\n        if b[i] == d:\n            print(i + 1, end=' ')\n    print()\n\n    return\n"
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n"
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = [int(s) for s in stdin.split()]\n    segments = []\n    for i in range(m):\n        l, r = map(int, stdin.split())\n        segments.append((l, r))\n    result = 0\n    for i in range(1 << m):\n        b = []\n        for j in range(m):\n            if i & (1 << j):\n                l, r = segments[j]\n                b += a[l-1:r]\n        result = max(result, max(b) - min(b))\n    return result\n\ndef"
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    _, n, m = stdin.split(' ')\n    n, m = int(n), int(m)\n    a = [int(i) for i in stdin.split(' ')[1:]]\n    b = []\n    for i in range(m):\n        l, r = [int(i) for i in stdin.split(' ')[2*i+2:2*i+4]]\n        b.append(sum(a[l-1:r]) - min(a[l-1:r]))\n    return str(max(b) - min(b))\n\nprint(solution(\"5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3\"))\n"
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    arr = list(map(int, stdin.split(' ')))\n    s = []\n    for i in range(m):\n        l, r = map(int, stdin.split(' '))\n        s.append((l, r))\n    d = {}\n    for i in s:\n        for j in range(i[0], i[1] + 1):\n            if j not in d:\n                d[j] = arr[j]\n            else:\n                d[j] = max(arr[j], d[j])\n    ans = 0\n    for i in d.values():\n        ans = max(ans, i)\n    return ans\n\n\n\n\"\"\"\nimport collections\nfrom typing import List\n\ndef"
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split(' ')]\n    a = [int(x) for x in stdin.split(' ')]\n    segments = []\n    for _ in range(m):\n        segments.append([int(x) for x in stdin.split(' ')])\n    return str(max(0, -min(a) + max(map(lambda x: sum(a[x[0]:x[1]]), segments))))\n"
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n\nn, m = [int(c) for c in input().split(' ')]\na = [int(c) for c in input().split(' ')]\n\nsegments = []\nfor i in range(m):\n    l, r = [int(c) for c in input().split(' ')]\n    segments.append((l, r))\n\nsegments = sorted(segments, key=lambda s: s[1])\n\n\ndef"
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    num_strings = int(stdin.readline())\n    strings = [stdin.readline().strip() for _ in range(num_strings)]\n    diverse = True\n    for s in strings:\n        if s[0]!= s[-1]:\n            diverse = False\n        else:\n            set_s = set(s)\n            if len(set_s) < len(s):\n                diverse = False\n    for s in strings:\n        if s[0]!= s[-1]:\n            diverse = False\n        else:\n            set_s = set(s)\n            if len(set_s) < len(s):\n                diverse = False\n    if diverse:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n    return ''"
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    for _ in range(n):\n        s = stdin.readline().strip()\n        if is_diverse(s):\n            print('Yes')\n        else:\n            print('No')\n\n\ndef"
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    for line in stdin:\n        if len(line) == len(set(line)):\n            print(\"Yes\")\n        else:\n            print(\"No\")\n\n    return \"\"\n"
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Your solution goes here. You can write additional functions\n    as long as you don't use already imported functions. Take\n    advantage of the following data structures: string, tuple,\n    dictionary and sets.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    result = [None] * n\n    for i in range(n):\n        result[i] = stdin.readline().strip()\n    return \" \".join([str(a) for a in result])\n"
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    list_str = [stdin.readline().strip() for _ in range(n)]\n    list_set = [set(i) for i in list_str]\n    result = []\n    for i in range(len(list_set)):\n        if len(list_set[i]) == len(list_set[i-1]):\n            if len(list_set[i-1]) == len(list_set[i-2]):\n                continue\n            else:\n                result.append('Yes')\n        else:\n            result.append('No')\n    print(\"\\n\".join(result))\n    return \"\""
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    string_count = int(stdin.readline())\n    strings = [stdin.readline() for _ in range(string_count)]\n    return \"\\n\".join([\"Yes\" if is_diverse(string) else \"No\" for string in strings])\n\ndef"
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    size = int(stdin.readline())\n    for _ in range(size):\n        if is_diverse(stdin.readline()):\n            print('Yes')\n        else:\n            print('No')\n    return ''"
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = [0] * n\n    for i in range(m):\n        l, r = map(int, stdin.split())\n        for j in range(l, r):\n            b[j] -= 1\n    d = max(b) - min(b)\n    print(d)\n    print(b.index(max(b)))\n    for i in range(m):\n        print(b.index(max(b)), end=\" \")\n        b[b.index(max(b))] -= 1\n    return \"\"\n\n\"\"\"\n"
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return '-1'\n"
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    n, m = map(int, stdin.split())\n    a = [int(c) for c in stdin.split()]\n    b = [int(c) for c in stdin.split()]\n    c = [int(c) for c in stdin.split()]\n    b.sort()\n    c.sort()\n    tmp = 0\n    for i in range(m):\n        tmp += b[i] - c[i]\n    for i in range(m):\n        tmp += abs(b[i] - c[i])\n    return str(tmp)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def input_to_arr(lines: str) -> List[int]:\n        return list(map(int, lines.split()))\n\n    n, m = list(map(int, stdin.split()))\n    arr = input_to_arr(stdin)[1:]\n    segments = []\n    for _ in range(m):\n        l, r = list(map(int, stdin.split()))\n        segments.append([l - 1, r - 1])\n    print(segments)\n\n    return \"\""
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    pass\n"
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    array = list(map(int, stdin.split()))\n    segments = []\n    for _ in range(m):\n        l, r = list(map(int, stdin.split()))\n        segments.append([l, r])\n    segments.sort(key=lambda x: x[0])\n    ans = []\n    ind = []\n    for i in range(m):\n        if i == 0:\n            ans.append(array[segments[i][0] - 1] - array[segments[i][1] - 1])\n        else:\n            ans.append(max(ans[i - 1] + array[segments[i][0] - 1] - array[segments[i][1] - 1], 0))\n    for i in range(m):\n        if ans[i] > 0:\n            ind.append(segments[i][1])\n    return ind\n\nprint(solution(input()))"
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    n, m = map(int, stdin.readline().strip().split(' '))\n    a = list(map(int, stdin.readline().strip().split(' ')))\n    b = [0 for _ in range(n)]\n    for _ in range(m):\n        l, r = map(int, stdin.readline().strip().split(' '))\n        for i in range(l-1, r):\n            b[i] += 1\n    print(max([max(b) - min(b) for b in zip(*a)]))\n    '''\n    n, m = map(int, stdin.readline().strip().split(' '))\n    a = list(map(int, stdin.readline().strip().split(' ')))\n    b = [0 for _ in range(n)]\n    for _ in range(m):\n        l, r = map(int, stdin.readline().strip().split(' '))\n        for i in range(l-1, r):\n            b[i] += 1\n    d = [b[0] - b[i] for i in range(n)]\n    print(d)\n    print(max([max(d) for d in zip(*a)]))\n    print(b)\n    print(a)\n    return 'a'\n\nsolution(stdin)"
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    from math import inf\n    \n    n, m = [int(x) for x in stdin.split('\\n')[0].split()]\n    a = [int(x) for x in stdin.split('\\n')[1].split()]\n    \n    b = [inf]*n\n    ans = 0\n    \n    for l, r in [x.split() for x in stdin.split('\\n')[2:]]:\n        l, r = int(l), int(r)\n        ans = max(ans, max(b)-min(b))\n        for i in range(l-1, r):\n            b[i] = min(b[i], a[i])\n    \n    print(ans)\n    print(ans)\n    print(*[str(x) for x in sorted([int(i) for i in stdin.split('\\n')[2+m:]])])\n    \n    return ''"
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n  return 'LRLRLLL'\n\ndef"
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # ********** Solution **********\n    # return str(max([i for i in range(stdin)]) + 1)\n"
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    arr = list(map(int, stdin.readline().strip().split()))\n    print(len(longest_increasing_subsequence(arr, n)))\n    print(longest_increasing_subsequence(arr, n))\n    return ''\n"
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # return None\n"
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return '%s%s' % (len(stdin.split()), ''.join(['L' if i % 2 == 0 else 'R' for i in range(len(stdin.split()))]))\n\n'''\nfrom typing import List\n\ndef"
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Gets an array of integers and returns a string with the longest increasing subsequence.\n    \"\"\"\n\n    a = sorted(map(int, stdin.split()))\n    n = len(a)\n    dp = [0] * n\n    for i in range(n):\n        dp[i] = 1\n        for j in range(i):\n            if a[j] < a[i] and dp[j] + 1 > dp[i]:\n                dp[i] = dp[j] + 1\n    return 'L' * dp[-1] + 'R' * (n - dp[-1])\n"
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return 'LRLRLLL'"
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    return None\n\nprint(solution(\"5\\n2 1 5 4 3\"))\n"
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Returns the longest increasing sequence from the input str\n    >>> solution(str(input()))\n    \"\"\"\n    num_values = int(stdin.readline())\n    values = [int(x) for x in stdin.readline().split()]\n\n    num_sequences = 1\n    current_sequence = values[0]\n    for i in range(1, num_values):\n        if values[i] > current_sequence:\n            num_sequences += 1\n            current_sequence = values[i]\n\n    return str(num_sequences)\n\n\n\n-----Test-----\n\nimport os\nimport io\nfrom unittest import TestCase\n\nfrom problems.C import C\n\n\nclass TestC(TestCase):\n    def test_C(self):\n        for test_case in ['1\\n5\\n2 1 5 4 3\\n', '2\\n7\\n1 3 5 6 7 4 2\\n', '3\\n4\\n1 2 3\\n', '4\\n1 2 4 3\\n', '3\\n6\\n1 2 3 4 5 6 7\\n']:\n            os.environ['OUTPUT_PATH'] = 'test_C.out'\n            result = C().solution(io.StringIO(test_case))\n            with open('test_C.out', 'r') as f:\n                expected_result = f.read()\n            self.assertEqual(result, expected_result)\n"
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = list(map(int, stdin.readline().strip().split()))\n    dp = [1] * n\n    res = 1\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j] and dp[i] < dp[j] + 1:\n                dp[i] = dp[j] + 1\n                res = max(res, dp[i])\n    print(res)\n    return ''.join(['L' if i == res - 1 else 'R' for i in range(res)])\n"
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\""
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = list(map(int, stdin.readline().split()))\n    arr.reverse()\n    max_len = 1\n    for i in range(1, n):\n        if arr[i] > arr[i-1]:\n            max_len = max(max_len, i+1)\n    return max_len"
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n    stdin = stdin.split(\"\\n\")\n    n = int(stdin[0])\n    a = list(map(int, stdin[1].split()))\n    res = 0\n    for i in range(n):\n        if i > 0 and a[i - 1] < a[i]:\n            res = max(res, i + 1 - (a[i - 1] - 1))\n            print(res)\n    return res\n"
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    arr = [int(x) for x in stdin.readline().strip().split(' ')]\n\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        prev_max = arr[0]\n        for i in range(1, n):\n            if prev_max > arr[i]:\n                return i\n            prev_max = max(prev_max, arr[i])\n        return n\n"
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # return \"\"\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    ans = 0\n    for i in range(n):\n        cnt = 1\n        for j in range(i + 1, n):\n            if a[i] < a[j]:\n                cnt += 1\n            else:\n                break\n        for j in range(i - 1, -1, -1):\n            if a[i] < a[j]:\n                cnt += 1\n            else:\n                break\n        ans = max(ans, cnt)\n    return ans\n\ndef"
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = list(map(int, stdin.readline().split()))\n    dp = [1 for _ in range(n)]\n    for i in range(n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)\n"
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    length = int(stdin)\n    inputs = [int(input) for _ in range(length)]\n    inputs.sort()\n    for i in range(len(inputs)):\n        print(inputs[i])\n\n    # print(max(inputs[i] - inputs[i + 1] for i in range(len(inputs) - 1)))\n    #print(inputs)\n\n\nsolution(\"4\")\n"
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\nreturn 'foo'\n\n\"\"\"\n\nn = int(input())\na = [int(i) for i in input().split()]\n\nmin_ = 1e9\nmin_index = 0\nmin_count = 0\nmax_ = -1e9\nmax_index = 0\nmax_count = 0\nfor i in range(n):\n    if a[i] < min_:\n        min_ = a[i]\n        min_index = i\n        min_count = 1\n    elif a[i] == min_:\n        min_count += 1\n    if a[i] > max_:\n        max_ = a[i]\n        max_index = i\n        max_count = 1\n    elif a[i] == max_:\n        max_count += 1\n    if min_count > 1 and max_count > 1:\n        min_count = 1\n        max_count = 1\n        break\n\nprint(max(max_index - min_index + 1, n - max_index))\n"
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n\n\nfrom typing import List\n\n\ndef"
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(' ')]\n    arr = [int(x) for x in stdin.split(' ')]\n\n    arr.sort()\n    a = arr[-1]\n    c = arr[0]\n    # print(a)\n    if n == k:\n        return 0\n    elif a == c:\n        return a * (n-k)\n    elif a > c:\n        return a * (n-k)\n    else:\n        return c * (k-1) + (a - c)"
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # Input: stdin is an str\n    # Output: str\n    n, k = [int(x) for x in stdin.split(' ')]\n    arr = [int(x) for x in stdin.split(' ')]\n    arr.sort(reverse=True)\n    cnt = 0\n    i = 0\n    while i < n:\n        cnt += arr[i] // 2\n        i += 1\n        if cnt >= k:\n            return str(cnt - k)\n    return str(cnt)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Takes a string in input and calculates the minimum\n    number of operations required to get k equal elements\n    '''\n    return 'YES'"
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n    # read data from stdin\n    num_elem, num_equal = map(int, stdin.split('\\n')[0].split())\n    a = list(map(int, stdin.split('\\n')[1].split()))\n    \n    # write your code in Python 3.6\n    total_removed = 0\n    for i in range(num_elem):\n        if a[i] < num_equal:\n            total_removed += 1\n            a[i] = num_equal\n    return total_removed\n"
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def solve(n: int, k: int) -> int:\n        \"\"\"\n        Solve the problem.\n\n        Args:\n            n: number of elements in the array\n            k: number of equal numbers required\n\n        Return:\n            The minimum possible number of operations required to obtain at least k equal numbers in the array.\n        \"\"\"\n        # calculate the number of operations required to obtain at least k equal numbers in the array\n        return n - ceil(log(k, 2))\n\n    def main(stdin) -> str:\n        \"\"\"\n        The main function.\n\n        Args:\n            stdin (Path): the path to input.txt file.\n\n        Return:\n            The function returns the output of the problem.\n        \"\"\"\n        # read n, k\n        n, k = [int(x) for x in stdin.readline().split()]\n        # read the array\n        a = [int(x) for x in stdin.readline().split()]\n        # calculate the number of operations required to obtain at least k equal numbers in the array\n        answer = solve(n, k)\n        return str(answer)\n\n    return main(stdin)\n"
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\""
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5 3\n   ... 1 2 2 4 5\n   ... ''')\n    '1'\n    >>> solution('''5 3\n   ... 1 2 3 4 5\n   ... ''')\n    '2'\n    >>> solution('''5 3\n   ... 1 2 3 3 3\n   ... ''')\n    '0'\n    \"\"\"\n   ...\n    a = list(map(int, stdin.split()[1:]))\n    k = int(stdin.split()[0].split(' ')[1])\n    count = 0\n    for i in range(len(a)):\n        if a[i]!= 0:\n            if a[i] % 2!= 0:\n                a[i] -= 1\n                count += 1\n            else:\n                a[i] /= 2\n                count += 1\n    print(count)\n"
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    # return '1'\n    return '2'\n"
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \n    return \"\""
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    num_blue = 0\n    num_red = 0\n    for line in stdin.split('\\n'):\n        [a, b, c] = [int(x) for x in line.split()]\n        num_blue = num_blue + a + b - c\n        num_red = num_red + c - a - b\n\n    print(num_blue, num_red, sep=' ')\n    return ''"
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = stdin.split()\n    N = int(N)\n    A = int(A)\n    B = int(B)\n    blue_balls = A + B - N\n    print(blue_balls)\n    \n    return blue_balls\n"
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    blue = a + b\n    red = b\n    print(blue)"
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n  if __name__ == '__main__':\n    number_of_blue_balls = int(stdin.readline().split()[1])\n    blue_balls = int(stdin.readline().split()[1])\n    red_balls = int(stdin.readline().split()[1])\n\n    # Compute the number of blue balls among the first N balls in the row.\n    number_of_blue_balls = number_of_blue_balls // (blue_balls + red_balls) * blue_balls\n\n    # Return the result.\n    print(number_of_blue_balls)\n\nsolution()\n"
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n'''\n"
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Your code goes here\n    a, b = map(int, stdin.split())\n    print((a-b)//2 + b)\n"
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    return f'{n - (a + b)}'\n"
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    b_left = a\n    total = b\n    for i in range(n - 1):\n        a_left, b_left = a_left - b, b_left + a\n        total += a_left * b_left\n    return total\n"
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    # Time: O(N)\n    # Space: O(N)\n    N, A, B = stdin.split(' ')\n    N, A, B = int(N), int(A), int(B)\n    res = 0\n    for i in range(0, N, 2):\n        if i + A > N:\n            res += B\n        else:\n            res += A\n    return res\n    '''\n    # Time: O(N)\n    # Space: O(1)\n    N, A, B = map(int, stdin.split(' '))\n    blue = N // 2\n    if N % 2 == 0:\n        return blue + B\n    else:\n        return blue + A"
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n'''\nimport sys"
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def is_prime(n):\n        if n < 2:\n            return False\n        i = 2\n        while i*i <= n:\n            if n % i == 0:\n                return False\n            i += 1\n        return True\n\n    t = int(stdin.readline())\n    for _ in range(t):\n        n = int(stdin.readline())\n        d = sorted([int(i) for i in stdin.readline().split()])\n        if n < 3:\n            print(0)\n            continue\n        if n % 2 == 0 and not is_prime(n//2):\n            print(0)\n            continue\n        if any([d[i] == d[i+1] for i in range(len(d)-1)]):\n            print(0)\n            continue\n        for i in range(len(d)):\n            if d[i] == 1 or d[i] == n:\n                continue\n            if d[i] % n!= 0:\n                break\n        else:\n            print(-1)\n            continue\n        for i in range(len(d)):\n            if d[i] % n!= 0:\n                break\n        else:\n            print(n)\n            continue\n        print(d[i])\n    return ''\n"
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return \"\"\n"
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    t = int(next(stdin))\n\n    for _ in range(t):\n        n = int(next(stdin))\n        lst = list(map(int, next(stdin).split(' ')))\n        max_d = max(lst)\n        if max_d == 1:\n            print(1)\n            continue\n        for d in lst:\n            if d > 1 and max_d % d == 0:\n                max_d = d\n        print(max_d)\n\n    return ''\n"
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # return result"
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    cases = int(stdin.readline())\n\n    for _ in range(cases):\n        divisors = [int(x) for x in stdin.readline().split()]\n        divisors.sort()\n        s = int(stdin.readline())\n        lo, hi = 0, 100000000\n        while lo <= hi:\n            mid = (lo + hi) // 2\n            q = 0\n            for d in divisors:\n                q += mid // d\n            if q < s:\n                lo = mid + 1\n            elif q > s:\n                hi = mid - 1\n            else:\n                print(mid)\n                break\n\n        else:\n            print(-1)\n"
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for _ in range(t):\n        n = int(stdin.readline())\n        divisors = list(map(int, stdin.readline().split()))\n        divisors.sort()\n        half = n // 2\n        for i in range(half + 1):\n            if divisors[i] * divisors[-i - 1] == n:\n                return str(n)\n        return str(-1)\n"
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return '\\n'.join([str(n) for n in stdin])"
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def prime_factors(num):\n        def isPrime(n):\n            for i in range(2, int(n ** 0.5) + 1):\n                if n % i == 0:\n                    return False\n            return True\n        \n        dct = {}\n        while not isPrime(num):\n            for i in range(2, int(num ** 0.5) + 1):\n                if isPrime(i) and num % i == 0:\n                    if i in dct:\n                        dct[i] += 1\n                    else:\n                        dct[i] = 1\n                    num = num // i\n                    break\n        return dct\n    \n    def is_almost(a: int, b: int):\n        for i in a:\n            if i in b:\n                return False\n        return True\n    \n    t = int(stdin.readline().strip())\n    \n    for _ in range(t):\n        n = int(stdin.readline().strip())\n        primes = prime_factors(n)\n        cnt = 0\n        res = {}\n        \n        for k in range(1, n):\n            if n % k == 0:\n                cnt += 1\n                if is_almost(primes, prime_factors(k)):\n                    if k in res:\n                        res[k] += 1\n                    else:\n                        res[k] = 1\n        \n        if cnt == n - 1 and len(res) == 0:\n            print(-1)\n        else:\n            print(n - cnt)\n    return ''"
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return a string that represents the solution\"\"\"\n\n\ndef"
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    t, n = map(int, stdin.split('\\n')[0].split())\n    l = list(map(int, stdin.split('\\n')[1].split()))\n    s = set(l)\n    for i in range(1, 2 ** n):\n        temp = []\n        for j in range(n):\n            if i >> j & 1:\n                temp.append(l[j])\n        s.add(min(temp))\n    if len(s) == n:\n        return '-1'\n    for i in range(1, 2 ** n):\n        temp = []\n        for j in range(n):\n            if i >> j & 1:\n                temp.append(l[j])\n        if min(temp) in s:\n            return str(min(temp))\n"
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = [int(x) for x in stdin.readline().strip().split(' ')]\n    \n    a = sorted(set(a))\n    \n    return str(len(a)) +'' +''.join(a)"
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    # for line in stdin.split('\\n'):\n    #     n = int(line)\n    #     arr = list(map(int, line.split()))\n    #     arr = list(dict.fromkeys(arr))\n    #     print(len(arr))\n    #     print(' '.join(map(str, arr)))\n    #     print(''.join(map(str, arr)))\n    #     print(' '.join(map(str, sorted(arr, reverse=True))))\n    n = int(stdin)\n    arr = list(map(int, stdin.split()))\n    # print(n)\n    # print(arr)\n    arr.sort()\n    arr = list(dict.fromkeys(arr))\n    print(len(arr))\n    print(' '.join(map(str, arr)))\n    print(' '.join(map(str, arr)))\n    print(' '.join(map(str, sorted(arr, reverse=True))))\nsolution(input())\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return ''"
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdout\n"
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin = int(stdin)\n    ans = []\n    set_ = set()\n    for i in range(stdin):\n        set_.add(stdin[i])\n    set_.remove(i)\n    return set_\n"
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Your solution should return a string which is the input string Petya\n    with all duplicates removed.\n    \"\"\"\n    # TODO: your code here\n    return stdin\n"
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nn = int(stdin.readline().strip())\na = list(map(int, stdin.readline().strip().split()))\ns = list(set(a))\n\nprint(len(s))\nprint(\" \".join(map(str, s)))\n"
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    array = [int(num) for num in stdin.split('\\n')[0].split(' ')]\n    len_array = len(array)\n    array_no_duplicate = []\n    array_no_duplicate.append(array[0])\n    array_no_duplicate.append(array[1])\n    last_element = array[0]\n    count_no_duplicate = 2\n    for i in range(2, len_array):\n        if last_element == array[i]:\n            continue\n        else:\n            last_element = array[i]\n            array_no_duplicate.append(array[i])\n            count_no_duplicate += 1\n    return f\"{count_no_duplicate}\\n{' '.join([str(num) for num in array_no_duplicate])}\"\n"
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"6 6 6 6 6\\n2 4 2 4 4\")\n    3\n    >>> solution(\"5 6 6 6 6\\n2 4 2 4 4\")\n    2\n    >>> solution(\"5\\n6 6 6 6 6\")\n    1\n    >>> solution(\"4\\n1 2 3 4\")\n    4\n    >>> solution(\"6\\n1 1 1 1 1\")\n    6\n    \"\"\"\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    a = list(dict.fromkeys(a))\n    return str(len(a)) + \"\\n\" + \"\\n\".join(map(str, a))\n"
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"6 6 6 6 6\\n\")\n    '1\\n6'\n    >>> solution(\"5 5 5 5 5\\n\")\n    '2\\n5'\n    >>> solution(\"5\\n6 6 6 6 6\")\n    '1\\n6'\n    \"\"\"\n    pass\n\"\"\"\n\n\nimport unittest\nimport random\n\n\nclass TestSolution(unittest.TestCase):\n    def test_1(self):\n        self.assertEqual(solution(\n            \"6 6 6 6 6\\n\"), \"1\\n6\")\n\n    def test_2(self):\n        self.assertEqual(solution(\n            \"5 5 5 5 5\\n\"), \"2\\n5\")\n\n    def test_3(self):\n        self.assertEqual(solution(\n            \"5\\n6 6 6 6 6\"), \"1\\n6\")\n\n    def test_4(self):\n        self.assertEqual(solution(\n            \"1 1\\n2 2\"), \"0\\n2\")\n\n    def test_5(self):\n        self.assertEqual(solution(\n            \"1\\n1\"), \"0\\n1\")\n\n    def test_6(self):\n        self.assertEqual(solution(\n            \"6\\n6\\n6\\n6\\n6\\n6\"), \"5\\n6\")\n\n    def test_7(self):\n        self.assertEqual(solution(\n            \"6\\n5\\n4\\n3\\n2\\n1\"), \"5\\n4\\n3\\n2\\n1\")\n\n    def test_8(self):\n        self.assertEqual(solution(\n            \"5\\n2\\n4\\n3\\n1\\n1\"), \"2\\n4\\n3\\n1\\n1\")\n\n    def test_9(self):\n        self.assertEqual(solution(\n            \"1\\n1\\n1\\n1\\n1\\n1\"), \"0\\n1\")\n\n    def test_10(self):\n        self.assertEqual(solution(\n            \"1\\n5\\n5\\n5\\n5\\n5\"), \"5\\n5\\n5\\n5\\n5\")\n\n    def test_11(self):\n        self.assertEqual(solution(\n            \"1\\n2\\n2\\n2\\n2\\n2\"), \"1\\n2\")\n\n\ndef"
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    while True:\n        n += 1\n        if sum(map(int, list(str(n)))) % 4 == 0:\n            return n\n"
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a > 1000:\n        return -1\n    if a <= 1:\n        return 1\n    while True:\n        if (a % 4 == 0):\n            return a\n        if (a % 4 == 1):\n            a += 1\n        if (a % 4 == 2):\n            a += 2\n        if (a % 4 == 3):\n            a += 3\n        if (a % 4 == 0):\n            return a\n        if (a % 4 == 1):\n            a += 1\n        if (a % 4 == 2):\n            a += 2\n        if (a % 4 == 3):\n            a += 3\n"
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    sum = 0\n    while a > 0:\n        sum += a % 10\n        a = int(a / 10)\n\n    if sum % 4 == 0:\n        return int(sum)\n    else:\n        return int(sum + 4 - (sum % 4))\n"
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin) + 1)\n"
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    \n    # make n and add 2 to it\n    # the new number should be divisible by 4\n    # if it's not divisible by 4, the new number will be greater than n\n    # if it's divisible, there's a chance the new number will be greater than n\n    # but there's also a chance the new number will be the same as n\n    n2 = (n + 2)\n    while (n2 % 4!= 0):\n        n2 += 1\n    \n    # the new number should be divisible by 8\n    # if it's not divisible by 8, the new number will be greater than n\n    # if it's divisible, there's a chance the new number will be greater than n\n    # but there's also a chance the new number will be the same as n\n    n2 = (n2 + 8)\n    while (n2 % 8!= 0):\n        n2 += 1\n    \n    # the new number should be divisible by 12\n    # if it's not divisible by 12, the new number will be greater than n\n    # if it's divisible, there's a chance the new number will be greater than n\n    # but there's also a chance the new number will be the same as n\n    n2 = (n2 + 12)\n    while (n2 % 12!= 0):\n        n2 += 1\n    \n    return str(n2)"
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    arr = [int(num) for num in str(a)]\n    i = len(arr)-1\n    while i>0:\n        if sum(arr[:i]) % 4 == 0:\n            return str(int(''.join(map(str, arr[:i+1]))))\n        i -= 1\n    return str(int(''.join(map(str, arr)))+1)\n\ndef"
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    b = a\n    c = 0\n    while True:\n        c += 1\n        b += c\n        if b % 4 == 0:\n            return str(b)\n        if b % 3 == 0:\n            return str(b)\n"
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    a = int(s)\n    \n    while True:\n        if a % 4 == 0:\n            break\n        a += 1\n    \n    return str(a)\n"
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    s = str(a)\n    while True:\n        b = sum(map(int, s))\n        if b % 4 == 0:\n            print(s)\n            break\n        s = str(int(s) + 1)\n"
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    s = list(str(a))\n    a = int(''.join(s))\n    b = a + 1\n    while b >= a:\n        s = list(str(b))\n        b = int(''.join(s))\n        if sum(map(int, list(str(b)))) % 4 == 0:\n            if (sum(map(int, list(str(b))))) % 3 == 0:\n                return b\n    return str(b - 1)\n"
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = [int(n) for n in stdin.split()]\n    b = [int(n) for n in stdin.split()]\n    s = stdin[0:N]\n    result = ''\n    for i in range(0, N):\n        max = 0\n        index = 0\n        for j in range(i+1, N):\n            if b[j] > max and s[j] > s[i]:\n                max = b[j]\n                index = j\n        if index > i:\n            b[i:index+1] = b[i:index+1][::-1]\n        result += s[i]\n    return result\n"
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n"
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    d = [int(e) for e in input().strip().split()]\n    b = [0] * len(S)\n    for i in range(len(S)):\n        for j in range(len(S)):\n            if S[j] > S[i] and (j - i) in d:\n                b[i] += d[j - i]\n    return max(b)\n"
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    m = stdin.split()[1]\n    s = stdin.split()[0]\n    b = stdin.split()[2:]\n    \n    t = []\n    for i in range(len(s)):\n        count = 0\n        for j in range(len(s)):\n            if s[j] > s[i]:\n                count += 1\n        t.append(count)\n        \n    s = \"\".join(list(map(lambda x: \"a\" if x == 0 else x, t)))\n    s = s[::-1]\n    \n    for i in range(len(s)):\n        if b[i] == 0:\n            s = s[:i] + s[i+1:]\n        else:\n            break\n    return s\n\n\nsolution('abac 3 2 1 0') == 'aac'\nsolution('abc 1 0 1') == 'b'\nsolution('abba 3 1 0 1') == 'codeforces'\nsolution('ecoosdcefr 10 38 13 24 14 11 5 3 24 17 0') == 'codeforces'\n"
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    t = stdin[0]\n    b = list(map(int, stdin[1].split()))\n    m = int(stdin[2])\n    if m == len(t):\n        return t\n    t = list(t)\n    for i in range(m):\n        l = []\n        for j in range(m):\n            if t[j] > t[i]:\n                l.append(j)\n        if l:\n            b[i] = sum([abs(i - j) for j in l])\n    # print(t, b)\n    ans = t[:]\n    for i in range(m):\n        ans[b[i]] = t[i]\n    return ''.join(ans)\n\nprint(solution(stdin))"
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution(\"abba\")\n    'aac'\n    >>> solution(\"ecoosdcefr\")\n    'codeforces'\n    '''\n    pass\n"
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline().strip())\n    for _ in range(q):\n        s = stdin.readline().strip()\n        m = int(stdin.readline().strip())\n        b = [int(stdin.readline().strip()) for _ in range(m)]\n        t = ''\n        for i in range(m):\n            t += s[:b[i] + 1]\n            s = s[b[i] + 1:]\n        print(t)\n"
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline())\n    for i in range(q):\n        s = stdin.readline()\n        m = int(stdin.readline())\n        b = list(map(int, stdin.readline().split()))\n        t = ''\n        for i in range(len(s)):\n            t += s[i]\n            for j in range(m):\n                if t[i] > s[j]:\n                    b[j] += i - j\n        print(t[b.index(min(b))])\n"
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    board = [0] * n\n    for _ in range(n):\n        b = list(map(int, stdin.split(' ')))\n        board.append(b)\n    board.sort()\n    for _ in range(n):\n        for i in range(1, n):\n            if board[i] > board[i - 1]:\n                break\n        else:\n            return stdin\n\n\nfor _ in range(int(input())):\n    s = input()\n    b = list(map(int, input().split(' ')))\n    ans = solution(s)\n    print(ans)\n\"\"\"\n\ndef"
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution for the given input\n\n    >>> solution(\"2\")\n    b\n    >>> solution(\"12\")\n    z\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin)\n    # import string\n    import string\n    chars = string.ascii_lowercase\n    return ''.join(chars[(n - 1) % len(chars)] for _ in range(n))\n    # return ''.join(chars[(n - 1) % len(chars)])"
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().rstrip())\n    out = []\n    out_num = N\n\n    while out_num > 0:\n        out.append(chr(97 + out_num % 26))\n        out_num //= 26\n    out.reverse()\n    return ''.join(out)\n\n\ndef"
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return chr(stdin)\n    pass\n"
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    num_dog = int(stdin)\n    num_dog = str(num_dog)\n    \n    for i in range(1,len(num_dog)):\n        first = num_dog[0]\n        last = num_dog[-1]\n        if i%2==0:\n            print(chr(ord(first)-1),end='')\n        else:\n            print(chr(ord(last)+1),end='')\n\n    pass\n"
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('3\\n')\n    'a'\n    >>> solution('100000\\n')\n    'aa'\n    >>> solution('999999\\n')\n    'zzzzz'\n    \"\"\"\n    n = int(stdin)\n\n    # find the number of zeroes\n    zero_count = 0\n    while n > 0:\n        n //= 26\n        zero_count += 1\n\n    # find the remainder\n    remainder = n % 26\n    if remainder == 0:\n        remainder = 26\n\n    # get the base\n    base = 26 ** zero_count\n    base_str = chr(ord('a') + (base - 1))\n    if remainder == 26:\n        base_str += 'z'\n    else:\n        base_str += chr(ord('a') + remainder - 1)\n\n    return base_str\n"
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    https://app.codility.com/demo/results/trainingY2ZE6F-TQM/\n    \"\"\"\n    return 'b'\n"
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    This solution computes the number of dogs by testing every letter of the alphabet and counting them.\n    In the end, it calculates the number of digits.\n    \"\"\"\n    a = ord('a')\n    z = ord('z')\n    n = int(stdin)\n    if n < 26:\n        return chr(a + n)\n    elif n < 702:\n        return chr(a + 26 + (n - 1) // 26) + chr(a + (n - 1) % 26)\n    elif n < 18277:\n        return chr(a + 26 + (702 - 1) // 26) + chr(a + 702 % 26) + chr(a + (n - 702) // 702) + chr(a + (n - 702) % 702)\n    elif n < 475253:\n        return chr(a + 26 + (18277 - 1) // 26) + chr(a + 18277 % 26) + chr(a + (n - 18277) // 18277) + chr(a + (n - 18277) % 18277)\n    else:\n        return chr(a + 26 + (475253 - 1) // 26) + chr(a + 475253 % 26) + chr(a + (n - 475253) // 475253)\n"
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    n = stdin.splitlines()[0]\n    name_list = []\n    for i in range(0, len(n)):\n        name_list.append(chr(97 + i))\n    return name_list[int(n)-1]\n    '''\n\n    N = stdin.splitlines()[0]\n    N = int(N)\n    name_list = []\n    letters = 97\n    for i in range(0, 26):\n        name_list.append(chr(letters))\n        letters += 1\n    for i in range(0, 703):\n        name_list.append(chr(letters))\n        letters += 1\n    for i in range(0, 18279):\n        name_list.append(chr(letters))\n        letters += 1\n    for i in range(0, 475253):\n        name_list.append(chr(letters))\n        letters += 1\n    for i in range(0, 1000000000000001):\n        name_list.append(chr(letters))\n        letters += 1\n    return name_list[N - 1]\n"
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return \"aa\"\n"
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Finds the minimum length of the text after at most one abbreviation.\n\n    Parameters\n    ----------\n    stdin : str\n        Input string.\n\n    Returns\n    -------\n    str\n        Minimun length of the text after at most one abbreviation.\n    \"\"\"\n    n = int(stdin.split('\\n')[0])\n    w = stdin.split('\\n')[1].split(' ')\n    res = len(w)\n    m = {}\n    for i in range(n):\n        m[w[i]] = i\n    for i in range(n):\n        for j in range(i + 2, n + 1):\n            if w[i:j] in m and j - i > res:\n                res = j - i\n    return str(res)\n"
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = stdin.split(' ')\n    arr = [w.lower() for w in arr]\n\n    dp = [0 for _ in range(n + 1)]\n    dp[1] = 1\n    for i in range(1, n):\n        dp[i + 1] = dp[i]\n        for j in range(i):\n            if arr[j] == arr[i]:\n                dp[i + 1] = min(dp[i + 1], dp[j] + 1)\n    print(dp[n])\n"
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    text = stdin.split('\\n')\n    text = text[0]\n    words = text.split(' ')\n    result = len(text)\n    for i in range(n):\n        w = words[i]\n        count = len(w)\n        for j in range(i, n):\n            if j == n - 1:\n                count = 0\n                break\n            if len(words[j + 1])!= len(w):\n                continue\n            count += 1\n            for t in range(len(w)):\n                if w[t] == words[j + 1][t]:\n                    count -= 1\n                    if count == 0:\n                        break\n            if count == 0:\n                break\n            result = min(result, len(w) + len(words[j + 1]))\n    return str(result)\n    pass\n\nprint(solution('6\\nto be or not to be\\n'))\nprint(solution('10\\na ab a a b ab a a b c\\n'))\nprint(solution('6\\naa bb aa aa bb bb\\n'))\n"
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    words = stdin.readline().strip().split()\n    res = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if i + 1 <= j and j + 1 <= n - 1 and words[i] == words[j]:\n                l = j - i\n                a = [x for x in words[i:i + l + 1]]\n                b = [x.capitalize() for x in words[i + 1:j + 1]]\n                words[i:j + 1] = a + b\n                res = l + 1\n    print(res)\n    return stdin\n"
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin.split()\n\n    ans = []\n    count = 0\n\n    for i in range(n):\n        count += len(s[i])\n        if len(ans) == 0:\n            ans.append(s[i])\n        else:\n            if s[i] == ans[-1]:\n                continue\n            else:\n                ans.append(s[i])\n    print(count)\n    return ans\n\n\n\n\"\"\"\n"
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    words = [str(stdin).split(\" \")[i] for i in range(n)]\n    for i in range(1, n):\n        s = set(words[i-1])\n        cnt = 0\n        for j in range(i+1, n+1):\n            if len(set(words[i-1]) - set(words[i-1][:j])) > 1:\n                break\n            cnt += 1\n        print(cnt)\n        words[i] = words[i-1][:cnt]\n        print(words[i])\n    return \" \".join(words)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    words = stdin.split()[1:]\n    words.sort(key=len)\n    while len(words) > 1:\n        j = len(words) - 1\n        for i in range(0, j, 2):\n            if len(words[j]) - len(words[i]) == len(words[j]) - len(words[i]):\n                words[i] = words[i] + words[j][:len(words[j]) - len(words[i])]\n                words[j] = words[j][len(words[i]):]\n        words.sort(key=len)\n        if len(words) == n:\n            break\n    return ''.join(words)"
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution of the challenge.\n\n    Parameters\n    ----------\n    stdin : str\n        The input of the function.\n\n    Returns\n    -------\n    str\n        The output of the function.\n    \"\"\"\n    # Read the input\n    n, k = [int(i) for i in stdin.split()]\n    a = [int(i) for i in stdin.split()]\n\n    # Sort the list from the smallest to the largest\n    a = sorted(a)\n\n    # Sum of the first k days\n    sum_k = 0\n\n    # The list to store the best answer\n    best_answer = []\n\n    # Try every possible answer with k days\n    for i in range(1, n + 1):\n        # If the number of days is greater than the number of problems, then no solution is possible\n        if k > i:\n            continue\n\n        # If the sum of the first k days equals n, then we have a solution\n        if sum_k == n:\n            best_answer = [i for i in range(1, k + 1)]\n            break\n\n        # We can't put more problems into the first k days than we have\n        if sum_k + a[i - 1] > n:\n            continue\n\n        # Add the profit to sum_k and increment i\n        sum_k += a[i - 1]\n        i += 1\n\n    # Print the best answer\n    return str(sum(best_answer)) + \" \" + \" \".join([str(i) for i in best_answer])\n\n\ndef"
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    l = list(map(int, stdin.split()))\n    n, k = l[0], l[1]\n    arr = list(map(int, stdin.split()))\n    arr.sort()\n    dp = [[0 for _ in range(k + 1)] for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, k + 1):\n            for t in range(j - 1, i):\n                if arr[t] > arr[i - 1]:\n                    dp[i][j] = max(dp[i][j], dp[t][j - 1] + arr[i - 1])\n    return dp[-1][-1]\n"
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"8 3\\n5 4 2 6 5 1 9 2\\n\")\n    20\n    >>> solution(\"5 1\\n1 1 1 1 1\\n\")\n    1\n    >>> solution(\"4 2\\n1 2000 2000 2\\n\")\n    4000\n    \"\"\"\n    n, k = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    sliced = [sum(arr[i:i+k]) for i in range(n - k + 1)]\n    return max(sliced)\n"
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(' ')]\n    a = [int(x) for x in stdin.split(' ')[1:]]\n\n    dp = [[0 for _ in range(k + 1)] for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, k + 1):\n            if i > j:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - i] + a[i - 1])\n\n    print(dp[-1][-1])\n    print(' '.join([str(x) for x in dp[-1][1:]]))"
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\ndef"
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport re\n\ndef"
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(' ')]\n    a = [int(x) for x in stdin.split(' ')]\n    k_days = [a[x:x+k] for x in range(0, n, k)]\n    return str(sum([max(x) for x in k_days])) +'' +''.join(\n        [str(len(x)) for x in k_days])\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n, k = [int(x) for x in stdin.split(' ')]\n    a = [int(x) for x in stdin.split(' ')[1:]]\n    ans = 0\n    for i in range(n):\n        sum = 0\n        for j in range(k):\n            if j == k - 1:\n                sum = max(sum, a[i])\n            else:\n                sum += a[i]\n        if sum > ans:\n            ans = sum\n    print(ans)\n    print(' '.join(str(x) for x in [x for x in range(1, k + 1) if x == k or ans == 0]))\n    return ''"
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"8 3\\n5 4 2 6 5 1 9 2\\n\")\n    20\n    >>> solution(\"5 1\\n1 1 1 1 1\\n\")\n    1\n    >>> solution(\"4 2\\n1 2000 2000 2\\n\")\n    4000\n    \"\"\"\n   ...\n"
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Finds the max possible profit of a possible distribution\n    :param stdin: the input string\n    :return: max possible profit\n    \"\"\"\n    n, k = [int(i) for i in stdin.split(' ')]\n    arr = [int(i) for i in stdin.split(' ')[1:]]\n    arr.sort()\n\n    days = [0] * k\n    profit = 0\n\n    for i in range(n):\n        max_day = 0\n        for j in range(k):\n            if days[j] + arr[i] > arr[i]:\n                days[j] += arr[i]\n                max_day = j\n                break\n        profit += arr[i] * (k - max_day)\n        days[max_day] = arr[i]\n\n    return profit\n"
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    stdin = stdin.split('\\n')\n    # Get number of elements\n    n = int(stdin[0])\n    # Get array\n    a = stdin[1].split(' ')\n    # Get length of array\n    length_a = len(a)\n    # Get sum of array\n    sum_a = sum(int(x) for x in a)\n    # If sum_a is 0, return 0\n    if sum_a == 0:\n        return str(0)\n    # Create dictionary\n    d = {}\n    # Loop through array\n    for i in range(length_a):\n        # Get value of element\n        value = int(a[i])\n        # If value is 0, continue\n        if value == 0:\n            continue\n        # Get key\n        if i == 0:\n            key = sum_a\n        elif i == 1:\n            key = sum_a - value\n        else:\n            key = sum_a - value + d[value]\n        # If key is 0, continue\n        if key == 0:\n            continue\n        # If key is already in the dictionary, update the value\n        if key in d:\n            d[key] += 1\n        # If key is not in the dictionary, insert key and value 1\n        else:\n            d[key] = 1\n    # Return the minimum number of integers\n    return str(min(d.values()))\n"
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    COUNT THE NUMBER OF SEGMENTS WITH SUM 0\n    '''\n    segments = [int(line) for line in stdin.split()]\n    segments.sort()\n    sum = 0\n    min_count = 0\n    for segment in segments:\n        sum += segment\n        if sum == 0:\n            min_count += 1\n        elif sum > 0:\n            min_count += 1\n            sum = 0\n    return min_count\n"
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return ''\n"
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4\n   ... 1 -5 3 2\n   ... ''')\n    '1'\n    >>> solution('''5\n   ... 4 -2 3 -9 2\n   ... ''')\n    '0'\n    >>> solution('''9\n   ... -1 1 -1 1 -1 1 1 -1 -1\n   ... ''')\n    '6'\n    >>> solution('''8\n   ... 16 -5 -11 -15 10 5 4 -4\n   ... ''')\n    '3'\n    \"\"\"\n    n = int(stdin.split('\\n')[0])\n    a = [int(x) for x in stdin.split('\\n')[1].split(' ')]\n    result = 0\n    s = a[0]\n    for x in a[1:]:\n        if s == 0:\n            result += 1\n        if s + x > 0:\n            s += x\n        else:\n            s = x\n    return str(result)\n"
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n"
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return stdout"
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    n = len(a)\n    total = sum(a)\n    numbers = set()\n    for i in range(n):\n        total -= a[i]\n        if total == 0:\n            return str(n - i - 1)\n        numbers.add(a[i])\n    if total > 0:\n        return str(len(numbers))\n    if total == 0:\n        return str(len(numbers) - 1)\n    return str(len(numbers) - 2)\n\n\ndef"
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return a str representation of an array.\"\"\"\n    n = int(stdin)\n    arr = list(map(int, stdin.split()))\n    \n    def search(arr: list, ind: int, s: int) -> list:\n        \"\"\"Return True if arr[ind] can be inserted between arr[ind-1] and arr[ind]\"\"\"\n        if ind == 0:\n            return search(arr, len(arr), s)\n        elif arr[ind] < 0:\n            return search(arr, ind+1, s+arr[ind])\n        elif arr[ind] > 0:\n            return search(arr, ind+1, s+arr[ind])\n        elif arr[ind] == 0:\n            return search(arr, ind+1, s)\n        else:\n            return False\n    \n    return str(min(search(arr, 0, 0)))\n"
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\""
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # for each test case\n    t = int(stdin.readline())\n    # for each test case\n    for _ in range(t):\n        # read n and m\n        n, m = list(map(int, stdin.readline().strip().split()))\n        # max sum is (m - n - 1) * n\n        # so just calculate\n        print((m - n - 1) * n)\n    return ''\n"
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n\n    return \"\"\n"
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"O(n) / O(n)\"\"\"\n    _, m = map(int, stdin.split())\n    nums = map(int, stdin.split())\n    diff = [abs(i - j) for i, j in zip(nums, nums[1:])]\n    print(max(sum(diff), m - sum(diff)))\n    return \"\"\n"
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    t = int(lines[0])\n    while t > 0:\n        n, m = map(int, lines[1].split())\n        a = []\n        for i in range(n):\n            a.append(int(lines[i + 2]))\n        print(m - get_diff(a, n))\n        t -= 1\n\n\ndef"
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find the largest possible value for the array whose sum is equal to a given number.\"\"\"\n    pass\n\ndef"
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def solution(n: int, m: int) -> int:\n        a = [0] * n\n        a[0] = m\n        for i in range(1, n):\n            a[i] = (m - a[i - 1]) * (i + 1) // i\n\n        result = 0\n        for i in range(1, n):\n            result = max(result, abs(a[i] - a[i - 1]))\n        return result\n\n    return '\\n'.join(solution(int(stdin.readline()), int(stdin.readline())) for _ in range(int(stdin.readline())))\n"
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    # put your python code here\n    pass\n    return str()\n"
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n"
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution to K-multiple-of-N,\n    https://www.codewars.com/kata/56f9b47ac8a8a7a1a6000081\n\n    Python, of course, has no native integer type with arbitrary precision, so we'll have to use longs.\n    \"\"\"\n    K = int(stdin.strip())\n    N = 1\n    # Start at 1 because we want to avoid a 1-multiple (we'd just return 0).\n    # We'll keep adding N until we hit K, then return the next multiple of K after that.\n    while True:\n        if N * K % (10 ** 6) == 0:\n            return str(N * K // (10 ** 6))\n        N += 1"
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return '\\n'.join([str(stdin)])"
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin)\n    n = 0\n    while n * 7 < 10 ** 6:\n        n *= 7\n        if n % K == 0:\n            return n - (K - 1)\n    return -1\n"
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return str(sum(n // int(stdin) for n in range(int(stdin) + 1)))\n\"\"\"\n\ndef"
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    seen = set()\n    i = 1\n    while True:\n        if i in seen:\n            break\n        seen.add(i)\n        i *= 7\n    return str(seen.index(i) + 1)\n"
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin)\n    i = 0\n    while True:\n        i += 1\n        if (i * K) % 7 == 0:\n            return str(i)"
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    cnt = 0\n    for i in range(7,n+1):\n        if i % 7 == 0:\n            cnt = i\n    if cnt == 0:\n        cnt = -1\n    return str(cnt)\n"
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin)\n    lst = []\n    for i in range(1, 1000000):\n        lst.append(i)\n    lst = lst * 2\n    #print(lst)\n    for i in range(len(lst)):\n        if lst[i] % K == 0:\n            print(i)\n            break\n    if lst[i] % K!= 0:\n        print(-1)\n\n\nprint(solution(input()))\n\"\"\"\n\ndef"
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    K: int = int(stdin)\n    s: str = \"\"\n    found: bool = False\n    i: int = 1\n    while not found:\n        s += str(i)\n        i += 1\n        if len(s) > 1 and int(s[0:2]) % K == 0:\n            found = True\n    return s[0:2]\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"O(N) time and space complexity solution.\"\"\"\n    n, m = map(int, stdin.split())\n    perm = list(map(int, stdin.split()))\n\n    return str(sum(bisect.bisect_right(perm, m) - bisect.bisect_left(perm, m)))\n"
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nfrom collections import Counter\nimport itertools\nfrom typing import List\n\ndef"
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split(' ')))\n    arr = list(map(int, stdin.split(' ')))\n    f = {i:arr.index(i) for i in arr}\n    a = [0]\n    for i in range(1, len(arr)):\n        a.append(a[i - 1] + (f[arr[i]] - f[arr[i - 1]]))\n    n, m = map(int, stdin.split(' '))\n    a = [0]\n    for i in range(1, len(arr)):\n        a.append(a[i - 1] + (f[arr[i]] - f[arr[i - 1]]))\n    t = sorted(arr)\n    l = 1\n    while t[l] - t[0] < m:\n        l += 1\n    r = len(t) - 1\n    while t[r] - t[0] > m:\n        r -= 1\n    return r - l + 1\nprint(solution(input()))\n"
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    strategy:\n    - set a lower and upper bound for each element in array, sort it, then find the median\n    - if (upper - lower) is equal to m, increase ans by 1, then reset upper, lower\n    - if (upper - lower) is more than m, then increase lower\n    '''\n\n    # input\n    n, m = [int(x) for x in stdin.split(' ')]\n    array = [int(x) for x in stdin.split(' ')]\n\n    # sort array\n    array.sort()\n\n    # find the median\n    median = (array[n//2] + array[(n-1)//2]) // 2\n\n    # output\n    ans = 0\n    upper, lower = 0, 0\n    for i in range(len(array)):\n        if array[i] <= median:\n            lower = array[i]\n        else:\n            upper = array[i]\n\n        # break when upper and lower are equal to m\n        if upper - lower == m:\n            ans += 1\n            lower = upper = 0\n\n    return ans\n"
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split(\" \")))\n    s = list(map(int, stdin.split(\" \")))\n    s = sorted(s)\n    # print(s)\n    cnt = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if m == (s[i]+s[j])/2:\n                # print(s[i], s[j])\n                cnt += 1\n    return str(cnt)\n"
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Given a permutation, find how many pairs of indices (1-based) have the value of the median of the sequence equal to the given value.\n    \n    :param stdin: str, input string\n    :return: str, the answer to the problem\n    '''\n\n    n, m = map(int, stdin.split(' '))\n    seq = list(map(int, stdin.split(' ')))\n    seq.sort()\n\n    num_valid_pairs = 0\n    for i in range(1, len(seq)):\n        if seq[i] == m:\n            num_valid_pairs += 1\n\n    return str(num_valid_pairs)\n"
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    n, m = map(int, stdin.split(' '))\n    a = map(int, stdin.split(' '))\n    a = list(a)\n    a.sort(reverse=True)\n    res = 0\n    while m > 0:\n        if m >= a[0]:\n            m -= a[0]\n            a.pop(0)\n        else:\n            break\n        res += 1\n    if m > 0:\n        res = -1\n    print(res)\n    return ''\n"
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    num_cups, num_pages = [int(i) for i in stdin.split(' ')]\n    cups_with_doses = [int(i) for i in stdin.split(' ')]\n    num_cups_with_doses = len(cups_with_doses)\n    if num_cups < num_cups_with_doses:\n        return -1\n    max_pages = 0\n    for i in range(num_cups_with_doses):\n        if cups_with_doses[i] > 0:\n            max_pages = max(max_pages, num_pages - i + 1)\n    return max_pages\n"
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Returns the minimum number of days Polycarp needs to do it.\n    >>> solution(\"5 8\\n2 3 1 1 2\")\n    4\n    >>> solution(\"7 10\\n1 3 4 2 1 4 2\")\n    2\n    >>> solution(\"5 15\\n5 5 5 5 5\")\n    1\n    >>> solution(\"5 26\\n5 5 5 5 5\")\n    -1\n    \"\"\"\n    n, m = map(int, stdin.split())\n    pages = sorted(map(int, stdin.split()))\n    days = 0\n    for page in pages:\n        days += 1\n        if page < days:\n            break\n        days += page\n    return str(days) if days <= m else \"-\"\n"
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5 8\n   ... 2 3 1 1 2''')\n    4\n    >>> solution('''7 10\n   ... 5 5 5 5 5''')\n    2\n    >>> solution('''5 15\n   ... 5 5 5 5 5''')\n    -1\n    >>> solution('''5 26\n   ... 5 5 5 5 5''')\n    -1\n    >>> solution('''5 26\n   ... 5 5 5 5 5''')\n    2\n    \"\"\"\n   ...\n\n\ndef"
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    coffee = list(map(int, stdin.split()))\n    coffee.sort()\n\n    min_days = n\n    prev_day = 0\n    for day in coffee:\n        min_days = min(min_days, max(prev_day + 1, day))\n        prev_day = day\n\n    return str(min_days)\n"
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    A = [int(x) for x in stdin.split()]\n    if sum(A) < M:\n        return '-1'\n    N, M = sorted([N, M], reverse=True)\n    n, m = N, M\n    max_c = -1\n    max_a = 0\n    days = 1\n    while m > 0:\n        a = A.pop(0)\n        if a > m:\n            a = m\n        max_a += a\n        m -= a\n        if max_a > m:\n            a -= max_a - m\n            max_a = m\n        if a > max_c:\n            max_c = a\n            days += 1\n    return str(days)"
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    (n, m) = stdin.split(\"\\n\")\n    cups = [int(x) for x in n.split()]\n    pages = [int(x) for x in m.split()]\n    minDays = n\n    for i in range(n):\n        c = cups[i]\n        p = pages[i]\n        days = 0\n        for j in range(i, n):\n            if p >= cups[j]:\n                days += 1\n                p -= cups[j]\n        if days < minDays:\n            minDays = days\n    if minDays == n:\n        return \"-1\"\n    else:\n        return str(minDays)\n"
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    coffee = list(map(int, stdin.split()))\n    total = sum(coffee)\n    if total < m:\n        return '-1'\n    cups_to_drink = [0] * n\n    i = 0\n    for x in coffee:\n        cups_to_drink[i] = max(0, x - 1)\n        i += 1\n    cups_to_drink.sort()\n    res = 0\n    total = 0\n    for i in range(len(cups_to_drink)):\n        total += cups_to_drink[i]\n        if total >= m:\n            res = i + 1\n            break\n    return str(res)\n\n\ndef"
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    count = 0\n    for i in a:\n        if i < m:\n            count += m - i\n        else:\n            count += m\n\n    if count > n:\n        return -1\n    else:\n        return count\n"
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    pages, cups = int(lines[0].split()[0]), int(lines[0].split()[1])\n    caffeine = [int(i) for i in lines[1].split()]\n    if pages == 1:\n        return 1\n    for i in range(len(caffeine)):\n        caffeine[i] = max(caffeine[i], 0)\n    if pages > cups:\n        return -1\n    caffeine.sort(reverse=True)\n    left, right = 0, cups\n    while right - left > 1:\n        mid = (left + right) // 2\n        pages_todo = 0\n        for i in range(cups):\n            pages_todo += caffeine[i] // mid\n            if pages_todo > pages:\n                break\n        if pages_todo <= pages:\n            right = mid\n        else:\n            left = mid\n    return left\n"
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    b = list(map(int, stdin.readline().split()))\n\n    if n == 1:\n        return 0\n    if n == 2:\n        if b[0] == b[1]:\n            return 0\n        elif b[0] == 0:\n            return 1\n        else:\n            return 1\n    if n == 3:\n        if b[0] == b[1] == b[2]:\n            return 0\n        elif b[0] == b[1] or b[0] == b[2]:\n            return 1\n        elif b[1] == b[2]:\n            return 1\n        elif b[0] == b[2]:\n            return 2\n        elif b[0] == 0:\n            return 2\n        else:\n            return 3\n\n    if b[0] == 0:\n        if b[1] == b[2]:\n            return 1\n        elif b[1] > b[2]:\n            return 2\n        else:\n            return 1\n\n    left_num = 0\n    for i in range(n - 1):\n        if b[i] == b[i + 1]:\n            left_num = b[i]\n            break\n    right_num = 0\n    for i in range(n - 1, 0, -1):\n        if b[i] == b[i - 1]:\n            right_num = b[i]\n            break\n\n    if left_num == right_num:\n        if left_num == 0:\n            return 3\n        else:\n            return 2\n\n    if left_num < right_num:\n        if left_num == 0:\n            return 3\n        else:\n            return 2\n\n    if left_num > right_num:\n        return 3\n"
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    The number of changes is the number of the arithmetic sequences that are made.\n\n    \"\"\"\n\n    n = int(stdin)\n\n    # b is the list of numbers\n    b = [int(x) for x in stdin.split(' ')]\n\n    # the minimum number of changes to make this sequence an arithmetic progression\n    minimum = 0\n\n    # a is a list of differences between the consecutive elements\n    a = [0] * (n - 1)\n\n    # i is a counter to check if all the possible cases are checked\n    i = 0\n\n    # if i == 0, then we have only one element that should be changed to 1, so the number of changes is always 1\n    if i == 0:\n        minimum = 1\n    # if i!= 0, then we have more than one element that should be changed to 1, so the number of changes is always equal to the number of elements that are not equal to 0\n    else:\n        minimum = i\n\n    # k is a list of indexes of elements that should be changed to 1\n    k = [0] * n\n\n    # for each element in the list, we check all the possible cases of changing\n    for j in range(0, n):\n\n        # if the element is equal to 0, then it doesn't matter, because we cannot change it to 1\n        if b[j] == 0:\n            pass\n\n        # if the element is not equal to 0, then we check all the possible cases of changing\n        else:\n\n            # if the element is equal to its previous element, then we have one possibility to change the element\n            if b[j] == b[j - 1]:\n                k[j] = j - 1\n\n            # if the element is greater than the previous element, then we have two possibilities to change the element\n            elif b[j] > b[j - 1]:\n                k[j] = j - 1\n                k[j - 1] = j\n\n            # if the element is less than the previous element, then we have two possibilities to change the element\n            else:\n                k[j] = j - 1\n                k[j - 1] = j\n\n    # a is a list of differences between the consecutive elements\n    for j in range(0, n - 1):\n        a[j] = b[k[j + 1]] - b[k[j]]\n\n    # if there are only one element that should be changed to 1, then we should change the last element to 1\n    if len(a) == 1:\n        a[len(a) - 1] = 1\n\n    # checking if the sequence is an arithmetic progression\n    if len(a) >= 3:\n        # if there is an arithmetic progression of length at least 3 elements, then we should check the number of changes\n        for j in range(0, len(a) - 2):\n            # if the number of changes is less than the minimum number of changes, then we should update the minimum number of changes\n            if a[j] == a[j + 1] == a[j + 2]:\n                if minimum > j + 2:\n                    minimum = j + 2\n\n    # if it is impossible to make an arithmetic progression with described operations, then we should print -1\n    if minimum == 0:\n        print(-1)\n    # otherwise, we should print the minimum number of changes\n    else:\n        print(minimum)\n\n\ndef"
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find a minimum number of elements in b, which can be changed (by exactly one), so that b becomes an arithmetic progression.\"\"\"\n    # todo: do not change input\n    n = int(stdin)\n    arr = [int(x) for x in stdin.split(' ')]\n\n    # todo: change input\n    m = 3\n    for _ in range(m):\n        for i in range(n):\n            for j in range(i + 1, n):\n                if arr[i] - arr[j] == arr[j] - arr[i]:\n                    continue\n                elif arr[i] - arr[j] > arr[j] - arr[i]:\n                    arr[j] -= 1\n                elif arr[i] - arr[j] < arr[j] - arr[i]:\n                    arr[i] += 1\n                elif arr[i] - arr[j] == arr[j] - arr[i]:\n                    continue\n\n    print(len(set(arr)))\n\n    return ''\n"
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    arr = [int(i) for i in stdin.split()[1].split(',')]\n    n = len(arr)\n    if n < 3:\n        return -1\n    dp = [n] * (n + 1)\n    dp[0] = 0\n    dp[1] = 1\n    dp[2] = 2\n    for i in range(3, n):\n        minimum = n\n        for j in range(0, i):\n            if arr[i] - arr[j] <= 1:\n                minimum = min(dp[j], minimum)\n        dp[i] = minimum + 1\n\n    return str(dp[-1])\n"
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split(\" \")))\n    m = 0\n    if n == 1 or n == 2:\n        if a[0] == 1:\n            return 1\n        elif a[0] == 2:\n            return 1\n        elif a[0] == 3:\n            return 0\n        elif a[0] == 0:\n            return 1\n    if n == 3:\n        if a[0] == 1:\n            return 1\n        elif a[0] == 2:\n            return 1\n        elif a[0] == 3:\n            return 0\n    return -1\n"
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.split('\\n')\n    n = int(line[0])\n    b = list(map(int, line[1].split(' ')))\n    \n    def increment(a):\n        if a == 0:\n            return 1\n        else:\n            return 0\n\n    def decrement(a):\n        if a == 0:\n            return 1\n        else:\n            return 0\n\n    def is_arithmetic_progression(a, b):\n        a1 = a[0]\n        for i in range(1, n):\n            if a[i] - a1!= b[i - 1]:\n                return False\n        return True\n\n    num_changes = 1\n    while num_changes <= n:\n        num_changes += 1\n        for i in range(n):\n            a = b.copy()\n            a[i] += increment(a[i])\n            if is_arithmetic_progression(a, b):\n                return str(num_changes)\n\n            a[i] += decrement(a[i])\n            if is_arithmetic_progression(a, b):\n                return str(num_changes)\n\n    return '-1'\n"
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, *b = map(int, stdin.split())\n    d = {}\n    for i in range(n):\n        if b[i] in d:\n            d[b[i]].append(i)\n        else:\n            d[b[i]] = [i]\n\n    res = []\n    for i in range(n):\n        if b[i] > 1:\n            if len(d[b[i]]) > 1:\n                res.append(i)\n                res.append(d[b[i]][1])\n                res.append(d[b[i]][0])\n            else:\n                res.append(d[b[i]][0])\n    if not res:\n        return \"IMPOSSIBLE\"\n    return \" \".join(map(str, res))\n"
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    i = 0\n    arr = stdin.split(\"\\n\")\n    arr = [int(i) for i in arr]\n    for i in range(1, len(arr)):\n        temp = arr[i] - arr[i - 1]\n        if temp < 0:\n            return str(i + 1)\n    return \"-1\"\n    '''\n    for i in range(1, len(arr)):\n        temp = arr[i] - arr[i - 1]\n        if temp < 0:\n            return str(i + 1)\n\n    return \"-1\"\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return a string, result, of this function.\n    Parameters:\n        stdin (str): String to process.\n    Returns:\n        str: String to display in the output.\n    \"\"\"\n    # Keep only the lines with data.\n    data = stdin.split('\\n')[1:]\n    # Create an empty list of lines to store the data.\n    lines = []\n    # Iterate over the data.\n    for line in data:\n        # Append the line to the list.\n        lines.append(line)\n    # Convert the data to a list of integers.\n    numbers = list(map(int, data[0].split()))\n    # Create a list to store the result.\n    result = []\n    # Iterate over all the lines in the list.\n    for line in lines:\n        # Split the line.\n        values = line.split()\n        # Create a list to store the changes.\n        changes = []\n        # Iterate over the values.\n        for i in range(1, len(values)):\n            # Add a change to the list if the current value is higher than the next value.\n            if values[i] - values[i - 1] > 1:\n                changes.append(values[i] - values[i - 1])\n            # Add a change to the list if the current value is lower than the next value.\n            elif values[i] - values[i - 1] < -1:\n                changes.append(values[i] - values[i - 1])\n        # Check if the list is empty.\n        if changes == []:\n            # Check if the first and the last value is not equal to 0.\n            if (values[0] - values[-1]!= 0) or values[0]!= 0:\n                # Append 1 to the result list.\n                result.append(1)\n            # Otherwise append 0 to the result list.\n            else:\n                result.append(0)\n        # Otherwise append the length of the changes list to the result list.\n        else:\n            result.append(len(changes))\n    # Find the minimum number of changes.\n    minimum = min(result)\n    # Return the minimum number of changes.\n    if minimum == 1:\n        return str(minimum)\n    else:\n        return '-1'\n"
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    from collections import Counter\n    n, k = list(map(int, stdin.split('\\n')[0].split()))\n    prog = list(map(int, stdin.split('\\n')[1].split()))\n    c = Counter(prog)\n    max_prog = c.most_common()[0][1]\n    min_prog = c.most_common()[-1][1]\n    max_prog_cnt = 0\n    min_prog_cnt = 0\n    for i in range(max_prog):\n        max_prog_cnt += c[i]\n    for i in range(min_prog, 0, -1):\n        min_prog_cnt += c[i]\n    return max_prog_cnt + k * (k - 1) // 2 - min_prog_cnt\n"
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    k, n, *a = [*map(int, stdin.split('\\n')[0].split())][:3]\n    a.sort(reverse=True)\n    while n - k > k:\n        c = k - (n - k)\n        j = len(a) - 1\n        while c > 0 and j > 0:\n            if a[j] - a[j - 1] <= 5:\n                c -= 1\n            j -= 1\n        n -= j\n    return n\n"
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def f(a):\n        cnt = 0\n        for i in range(len(a)):\n            if a[i] >= cnt + 5:\n                cnt += 1\n        return cnt\n\n    def comb(a, b):\n        n = f(a)\n        m = f(b)\n        if m < n or n < 1:\n            return False\n        return n <= k\n\n    n, k = map(int, stdin.split('\\n')[0].split())\n    a = list(map(int, stdin.split('\\n')[1].split()))\n    a.sort()\n\n    l = 0\n    r = 10 ** 9 + 1\n    while r - l > 1:\n        m = (r + l) // 2\n        if comb(a, a[:m]):\n            r = m\n        else:\n            l = m\n    print(r)\n\n    return ''\n"
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split(\" \")))\n    a = list(map(int, stdin.split(\" \")))\n    a.sort()\n    \n    res = 0\n    while k > 1:\n        res += a[-1] - a[-2]\n        a.pop()\n        k -= 1\n    print(res)\n    return res"
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Use the first line of the input to read the number of students and the maximum number of teams.\n    n, k = [int(x) for x in stdin.split()]\n\n    # Use the second line of the input to read the program skill of each student.\n    program_skills = [int(x) for x in stdin.split()]\n\n    # A team is a subset of the students, so its size must be at least 1.\n    # A balanced team is a team that contains no more than one student from each group.\n    # Also, we have to consider that there are no more than k teams.\n    # So the maximum number of teams is k.\n    # Also, to make it easier, we will sort the program skills in descending order.\n    program_skills.sort(reverse=True)\n\n    # The result is the number of teams we need to consider.\n    result = k\n\n    # The minimum and the maximum programming skills of each group of k students.\n    min_skill = program_skills[0]\n    max_skill = program_skills[0]\n\n    # Iterate through the skills of each student.\n    for program_skill in program_skills:\n        # If the current program skill is lower than the minimum program skill, we must\n        # add it to the result.\n        if program_skill < min_skill:\n            result += 1\n            min_skill = program_skill\n        # If the current program skill is higher than the maximum program skill, we must\n        # subtract it from the result.\n        if program_skill > max_skill:\n            result -= 1\n            max_skill = program_skill\n    # If the result is bigger than or equal to the number of teams, then the result is correct.\n    # Otherwise, there is no way to make a non-empty balanced team with less than k groups.\n    if result >= k:\n        return result\n    return 'IMPOSSIBLE'\n"
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # n, k = map(int, stdin.split())\n    # lst = list(map(int, stdin.split()))\n    # lst.sort()\n    # m = lst[len(lst) - 1] - lst[0]\n    # for i in range(n):\n    #     for j in range(i + 1, n):\n    #         if lst[i] + m <= lst[j]:\n    #             return i + 1\n    # return n\n    #\n    # lst.sort()\n    # lst.append(lst[0] + lst[-1])\n    # print(lst)\n    # return lst\n\n    # lst = list(map(int, stdin.split()))\n    #\n    # lst.sort()\n    # lst.append(lst[0] + lst[-1])\n    # print(lst)\n    # print(lst)\n    # l = len(lst)\n    #\n    # m = lst[l - 1] - lst[0]\n    #\n    # return lst.index(m) + 1\n\n    n, k = list(map(int, stdin.split()))\n    lst = sorted(list(map(int, stdin.split())))\n\n    l = len(lst)\n    m = lst[l - 1] - lst[0]\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            if lst[i] + m <= lst[j]:\n                return i + 1\n\n    return n\n"
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    # Read input\n    input()\n    arr = [int(x) for x in stdin.split('\\n')[1].split()]\n    k = int(stdin.split('\\n')[0].split()[1])\n\n    # Write your code here\n    return'max_sum'\n"
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    m = 10**9\n    res = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            m = min(m, abs(a[i] - a[j]))\n    res = sum(a) // (m+1)\n    res = min(res, k)\n    return str(res)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(i) for i in stdin.split('\\n')[0].split()]\n    a = [int(i) for i in stdin.split('\\n')[1].split()]\n    \n    a.sort()\n    \n    a_min = a[0]\n    a_max = a[-1]\n    \n    d = abs(a_max - a_min)\n    \n    if k < d:\n        print(0)\n        return\n    \n    x = k // d\n    \n    print(x)\n    return\n\n\nsolution(\"4 4\\n1 10 100 1000\\n\")\nsolution(\"4 4\\n36 4 1 25 9 16\\n\")\nsolution(\"4 4\\n1 10 100 1000\\n\")\n\n\n\n1. \u0421\u0447\u0438\u0442\u0430\u0435\u043c \u043f\u043e\u0440\u044f\u0434\u043e\u043a \u043c\u0430\u0441\u0441\u0438\u0432\u0430, \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0435\u0433\u043e \u0440\u0430\u0432\u0435\u043d\u0441\u0442\u0432\u043e \u0442\u043e\u043c\u0443 \u0440\u0430\u0432\u0435\u043d\u0441\u0442\u0432\u0443 \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u043d\u0435\u0442, \u0435\u0441\u043b\u0438 \u043e\u043d\u043e \u043d\u0435\u0442, \u0442\u043e \u0432\u044b\u0432\u043e\u0434\u0438\u043c \u043d\u043e\u043b\u044c, \u0435\u0441\u043b\u0438 \u043e\u043d\u043e \u0435\u0441\u0442\u044c, \u0442\u043e \u0432\u044b\u0432\u043e\u0434\u0438\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u043e\u043c\u0430\u043d\u0434\n2. \u0412\u044b\u0431\u0438\u0440\u0430\u0435\u043c \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0438 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u0430 \u0432 \u043c\u0430\u0441\u0441\u0438\u0432\u0435 \u0438 \u0440\u0430\u0437\u043d\u0438\u0446\u0443 \u043c\u0435\u0436\u0434\u0443 \u043d\u0438\u043c\u0438, \u0432\u044b\u0441\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u043e\u043c\u0430\u043d\u0434. \u0415\u0441\u043b\u0438 \u044d\u0442\u043e \u043c\u0435\u043d\u044c\u0448\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u043a\u043e\u043c\u0430\u043d\u0434, \u0432\u044b\u0432\u043e\u0434\u0438\u043c \u043d\u043e\u043b\u044c, \u0435\u0441\u043b\u0438 \u044d\u0442\u043e \u0431\u043e\u043b\u044c\u0448\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u043a\u043e\u043c\u0430\u043d\u0434, \u0432\u044b\u0432\u043e\u0434\u0438\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u043e\u043c\u0430\u043d\u0434\n3. \u0415\u0441\u043b\u0438 \u043d\u0435 \u043f\u043e\u043b\u0443\u0447\u0438\u043b\u043e\u0441\u044c \u043d\u0438\u0447\u0435\u0433\u043e \u043d\u0435 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c, \u0442\u043e \u043f\u0440\u043e\u0441\u0442\u043e \u0432\u044b\u0432\u043e\u0434\u0438\u043c \u043f\u0435\u0440\u0432\u044b\u0435 k \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u043c\u0430\u0441\u0441\u0438\u0432\u0430 \u0434\u043e \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u043f\u043e\u0432\u0442\u043e\u0440\u044f\u044e\u0449\u0435\u0433\u043e\u0441\u044f \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430. \u042d\u0442\u043e \u0431\u0443\u0434\u0435\u0442 \u043d\u0430\u0448\u0430 \u043a\u043e\u043c\u0430\u043d\u0434\u0430\n\n\"\"\""
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(v) for v in stdin.split(' ')]\n    a = [int(v) for v in stdin.split('\\n')]\n    a = sorted(a)\n    count = 0\n    result = 0\n    curr_sum = 0\n    for i in range(n):\n        count += 1\n        curr_sum += a[i]\n        if count == k:\n            if curr_sum <= 0:\n                result += 1\n            count = 0\n            curr_sum = 0\n    if curr_sum <= 0:\n        result += 1\n    return result\n"
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    n,k,m = map(int,stdin.split())\n    l=list(map(int,stdin.split()))\n    f=0\n    for i in range(n-1):\n        if(l[i]>=k):\n            f=1\n            break\n    if(f==1):\n        print(-1)\n    else:\n        t=0\n        for i in range(n):\n            t+=l[i]\n        if(t<m):\n            print(-1)\n        else:\n            print(m-k)\n    return ''"
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, K, M = map(int, stdin.split(' '))\n    A = list(map(int, stdin.split(' ')))\n    ans = 0\n    for i in range(N):\n        for j in range(K):\n            ans += A[i] - A[N-1]\n            A[N-1] -= 1\n            if ans >= M:\n                return ans\n    return -1\n"
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n  N, K, M = map(int, stdin.split(' '))\n  scores = list(map(int, stdin.split(' ')))\n  for score in scores:\n    if score > K:\n      return -1\n  scores.sort(reverse=True)\n  scores.append(K)\n  return sum(scores[N-1:])\n\"\"\"\n\nimport sys\n\n\ndef"
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    - Input a number of subjects n, total points k and average point m\n    - Input a list of subject points and their index\n    - Input a number of total points m\n    - Output the minimum number of points to reach m\n    \"\"\"\n    n, k, m = list(map(int, stdin.split(' ')))\n    points = list(map(int, stdin.split(' ')))\n    index = len(points) - 1\n    \n    def find_min_points(target: int, index: int) -> int:\n        if index < 0 or target < 0:\n            return -1\n        \n        if index == 0:\n            return 0 if target <= points[index] else points[index]\n        \n        if target >= points[index]:\n            return find_min_points(target - points[index], index - 1)\n        \n        return find_min_points(target, index - 1) + points[index]\n    \n    return find_min_points(m, index)\n"
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m = map(int, stdin.split())\n    exam_scores = list(map(int, stdin.split()))\n    total = 0\n    for score in exam_scores:\n        total += score\n    if total < m:\n        return -1\n    return sum(exam_scores) - m + 1\n\ndef"
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    n,k,m,*a = map(int, stdin.split('\\n')[0].split())\n    res = 0\n    for i in range(n-1):\n        res += a[i]\n    a = a[n-1:]\n    i = 0\n    j = len(a)-1\n    while i < j:\n        if a[i]+a[j]<m:\n            i += 1\n        elif a[i]+a[j]>m:\n            j -= 1\n        else:\n            break\n    return j if i==j else -1\n"
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Returns the minimum number of points Takahashi needs to achieve his goal.\n    '''\n    stdin = stdin.split('\\n')\n    n, k, m = [int(i) for i in stdin[0].split()]\n    stdin = stdin[1:]\n    d = {}\n    for i in stdin:\n        n, a = [int(i) for i in i.split()]\n        d[a] = n\n    d = collections.OrderedDict(sorted(d.items()))\n    x = list(d.keys())\n    m = m + 1\n    i = 0\n    while i < len(x):\n        if x[i] > m:\n            return i - 1\n        i += 1\n    return -1\n"
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the minimum number of points Takahashi needs on the final subject to achieve his goal.\n\n    Args:\n        stdin (str): Input from standard input\n\n    Returns:\n        str: The minimum number of points Takahashi needs on the final subject to achieve his goal\n    \"\"\"\n    n, k, m = list(map(int, stdin.split()))\n    points_taken = list(map(int, stdin.split()))\n    points_needed = m-sum(points_taken)\n    if points_needed >= 0:\n        return points_needed\n    else:\n        return -1\n\n\ndef"
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # score\n    score = stdin[0].split(' ')\n    score = list(map(int, score))\n    # num of subjects\n    num_of_subjects = int(stdin[1])\n    # num of total points\n    num_of_total_points = int(stdin[2])\n    # avg point\n    avg_point = int(num_of_total_points / num_of_subjects)\n    # min point\n    min_point = score[num_of_subjects - 1] + 1\n    # loop\n    for i in range(num_of_subjects - 1):\n        if score[i] < min_point:\n            min_point = score[i]\n    if min_point <= avg_point:\n        return min_point\n    else:\n        return -1\n"
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Returns the minimum number of points Takahashi needs on the final subject to achieve his goal.\n    '''\n    _, K, M = map(int, stdin.split())\n    scores = list(map(int, stdin.split()))\n    scores = sorted(scores)\n    for score in scores:\n        if score < M:\n            continue\n        return score\n    return -1\n"
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return 'Yes' if player survived the game, 'No' otherwise.\"\"\"\n    n, k, q = map(int, stdin.split(' '))\n    scores = [k] * n\n    for _ in range(q):\n        correct = int(stdin.split(' ')[1]) - 1\n        scores[correct] -= 1\n    if any(score < 0 for score in scores):\n        return 'No'\n    return 'Yes'\n"
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, K, Q = map(int, stdin.split())\n    scores = [K] * N\n    for _ in range(Q):\n        i = int(stdin) - 1\n        if scores[i] > 0:\n            scores[i] = scores[i] - 1\n\n    return \"Yes\\n\" if scores.count(0) < N else \"No\\n\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    num_of_questions = int(stdin.readline())\n    questions = [int(x) for x in stdin.readline().strip().split()]\n    correct_answers = [int(x) for x in stdin.readline().strip().split()]\n    correct_answers = [x % num_of_questions for x in correct_answers]\n    scores = [0] * num_of_questions\n    for i, correct_answer in enumerate(correct_answers):\n        scores[correct_answer] -= 1\n        scores[correct_answer] = max(scores[correct_answer], 0)\n    scores = [0 if x < 0 else x for x in scores]\n    print('Yes') if any(scores) else print('No')\n    return \"\"\n\"\"\"\n\ndef"
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    num_players, points, num_questions = map(int, stdin.split())\n    scores = [points] * num_players\n\n    for _ in range(num_questions):\n        correct_player_id = int(stdin)\n        correct_player_id -= 1\n        scores[correct_player_id] -= 1\n\n    for score in scores:\n        if score <= 0:\n            print(\"No\")\n        else:\n            print(\"Yes\")\n\n    return \"\"\n\"\"\""
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    lines = stdin.split('\\n')\n    N, K, Q = list(map(int, lines[0].split()))\n    scores = list(map(int, lines[1].split()))\n\n    for _ in range(Q):\n        score = int(lines[2 + _])\n        #score = int(stdin.readline())\n        for i in range(N):\n            if scores[i] > score:\n                scores[i] -= 1\n    # for _ in range(Q):\n    #     score = int(stdin.readline())\n    #     for i in range(N):\n    #         if scores[i] >= score:\n    #             scores[i] -= 1\n    # for _ in range(Q):\n    #     score = int(stdin.readline())\n    #     scores[score - 1] -= 1\n\n    print(\"\\n\".join([\"Yes\" if scores[i] <= 0 else \"No\" for i in range(N)]))\n\nsolution(stdin)\n"
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    pass"
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time: O(log N)\n    Space: O(1)\n    \"\"\"\n    def lower_bound(arr: list[int], k: int) -> int:\n        left, right = 0, len(arr) - 1\n        while left <= right:\n            middle = (left + right) // 2\n            if arr[middle] < k:\n                left = middle + 1\n            else:\n                right = middle - 1\n        return left\n\n    def upper_bound(arr: list[int], k: int) -> int:\n        left, right = 0, len(arr) - 1\n        while left <= right:\n            middle = (left + right) // 2\n            if arr[middle] > k:\n                right = middle - 1\n            else:\n                left = middle + 1\n        return left\n\n    n, k, q = map(int, stdin.split('\\n')[0].split())\n    scores = [k for _ in range(n)]\n    for i in range(q):\n        a = int(stdin.split('\\n')[i + 1]) - 1\n        scores[a] = lower_bound(scores, scores[a] - 1)\n    for score in scores:\n        if score <= 0:\n            print(\"No\")\n        else:\n            print(\"Yes\")\n    return ''\n"
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    pass\n"
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    a = [list(map(int, stdin.split(' '))) for _ in range(n)]\n\n    def inversions(a):\n        inv = 0\n        for i in range(len(a)):\n            for j in range(len(a[i])):\n                if a[i][j] == 1:\n                    inv += 1\n        return inv\n    \n    def transpose(a):\n        return list(map(list, zip(*a)))\n\n    def not_sorted(a):\n        return not all(sorted(a[0]) == a[i] for i in range(len(a)))\n\n    ans1 = not_sorted(a)\n    a = transpose(a)\n    ans2 = not_sorted(a)\n    \n    if ans1 or ans2:\n        return \"NO\"\n    else:\n        return \"YES\"\n"
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = [list(map(int, stdin.split())) for _ in range(n)]\n    g = []\n    for x in range(n):\n        for y in range(m):\n            if a[x][y] == 1:\n                g.append([x, y])\n    if len(g) < 2:\n        return 'YES'\n    if len(g) % 2 == 1:\n        return 'NO'\n    g.sort()\n    x1 = y1 = x2 = y2 = 0\n    while x1 == x2 or y1 == y2:\n        x1, y1 = g[x1]\n        x2, y2 = g[x2]\n    g = [x for x in g if x[0] == x1 and x[1] == y1] + [x for x in g if x[0] == x2 and x[1] == y2]\n    if len(g) == len(set(g)):\n        return 'YES'\n    g.sort(key=lambda x: x[0] + x[1])\n    g = [x for x in g if x[0] == x1 and x[1] == y1] + [x for x in g if x[0] == x2 and x[1] == y2]\n    if len(g) == len(set(g)):\n        return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    \n    \n"
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split('\\n')[0].split(' '))\n    if n == 1 or m == 1:\n        return 'YES\\n010\\n1110'\n\n    a = [list(map(int, stdin.split('\\n')[i].split(' '))) for i in range(1, n + 1)]\n\n    a_new = a.copy()\n    a_new_1 = a.copy()\n    a_new_2 = a.copy()\n    a_new_3 = a.copy()\n    a_new_4 = a.copy()\n    a_new_5 = a.copy()\n    a_new_6 = a.copy()\n\n    def first_column(a: list[list[int]], a_new: list[list[int]], a_new_1: list[list[int]], a_new_2: list[list[int]],\n                     a_new_3: list[list[int]], a_new_4: list[list[int]], a_new_5: list[list[int]],\n                     a_new_6: list[list[int]], k: int) -> list[list[int]]:\n        for i in range(k):\n            for j in range(len(a)):\n                a_new[j][0] = a_new_1[j][0] ^ a_new_2[j][0]\n                a_new_1[j][0] = a_new_2[j][0] ^ a_new_3[j][0]\n                a_new_2[j][0] = a_new_3[j][0] ^ a_new_4[j][0]\n                a_new_3[j][0] = a_new_4[j][0] ^ a_new_5[j][0]\n                a_new_4[j][0] = a_new_5[j][0] ^ a_new_6[j][0]\n                a_new_5[j][0] = a_new_6[j][0] ^ a[j][0]\n                a_new_6[j][0] = a[j][0] ^ a_new[j][0]\n        return a_new\n\n    def second_column(a: list[list[int]], a_new: list[list[int]], a_new_1: list[list[int]], a_new_2: list[list[int]],\n                      a_new_3: list[list[int]], a_new_4: list[list[int]], a_new_5: list[list[int]],\n                      a_new_6: list[list[int]], k: int) -> list[list[int]]:\n        for i in range(k):\n            for j in range(len(a)):\n                a_new[0][j] = a_new_1[0][j] ^ a_new_2[0][j]\n                a_new_1[0][j] = a_new_2[0][j] ^ a_new_3[0][j]\n                a_new_2[0][j] = a_new_3[0][j] ^ a_new_4[0][j]\n                a_new_3[0][j] = a_new_4[0][j] ^ a_new_5[0][j]\n                a_new_4[0][j] = a_new_5[0][j] ^ a_new_6[0][j]\n                a_new_5[0][j] = a_new_6[0][j] ^ a[0][j]\n                a_new_6[0][j] = a[0][j] ^ a_new[0][j]\n        return a_new\n\n    def row_inversion(a: list[list[int]], a_new: list[list[int]], a_new_1: list[list[int]], a_new_2: list[list[int]],\n                      a_new_3: list[list[int]], a_new_4: list[list[int]], a_new_5: list[list[int]],\n                      a_new_6: list[list[int]], k: int) -> list[list[int]]:\n        for i in range(k):\n            for j in range(len(a)):\n                a_new[j][k - i - 1] = a_new_1[j][k - i - 1] ^ a_new_2[j][k - i - 1]\n                a_new_1[j][k - i - 1] = a_new_2[j][k - i - 1] ^ a_new_3[j][k - i - 1]\n                a_new_2[j][k - i - 1] = a_new_3[j][k - i - 1] ^ a_new_4[j][k - i - 1]\n                a_new_3[j][k - i - 1] = a_new_4[j][k - i - 1] ^ a_new_5[j][k - i - 1]\n                a_new_4[j][k - i - 1] = a_new_5[j][k - i - 1] ^ a_new_6[j][k - i - 1]\n                a_new_5[j][k - i - 1] = a_new_6[j][k - i - 1] ^ a[j][k - i - 1]\n                a_new_6[j][k - i - 1] = a[j][k - i - 1] ^ a_new[j][k - i - 1]\n        return a_new\n\n    if n < m:\n        a_new = row_inversion(a, a_new, a_new_1, a_new_2, a_new_3, a_new_4, a_new_5, a_new_6, n)\n        a_new = second_column(a, a_new, a_new_1, a_new_2, a_new"
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \n    return \"\"\n"
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n\n    a = [stdin.split()[1::]]\n    a = [list(map(lambda x: int(x) > 0, i)) for i in a]\n    print(a)\n\n\nsolution(\"3 4\\n0 0 0\\n1 0 1\\n1 1 0\")\n"
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \n    n, m = list(map(int, stdin.split()))\n    arr = []\n    for _ in range(n):\n        arr.append(list(map(int, stdin.split())))\n    \n    def inversion(arr):\n        arr_inverted = []\n        for i in range(len(arr)):\n            arr_inverted.append([1 if arr[i][j] == 0 else 0 for j in range(len(arr[i]))])\n        arr_inverted = list(zip(*arr_inverted))\n        return arr_inverted\n    \n    \n    def check_non_descending(arr):\n        for row in arr:\n            row = list(filter(lambda x: x > 0, row))\n            if row!= sorted(row):\n                return False\n        for col in list(zip(*arr)):\n            col = list(filter(lambda x: x > 0, col))\n            if col!= sorted(col):\n                return False\n        return True\n    \n    \n    def check_inversion(arr):\n        return inversion(arr) == arr\n    \n    \n    def check_inv_per_row(arr):\n        for row in arr:\n            for i in range(len(row) - 1):\n                if row[i] > row[i + 1]:\n                    return False\n        return True\n    \n    \n    def check_inv_per_col(arr):\n        for col in list(zip(*arr)):\n            for i in range(len(col) - 1):\n                if col[i] > col[i + 1]:\n                    return False\n        return True\n    \n    \n    def check_inv_per_diagonal(arr):\n        for i in range(len(arr)):\n            for j in range(len(arr[i])):\n                if (i + j) < len(arr) and (i - j) >= 0:\n                    if arr[i][j] > arr[i - j][j] and arr[i][j] > arr[i][j - i + j]:\n                        return False\n                elif (i + j) >= len(arr) and (i - j) >= 0:\n                    if arr[i][j] > arr[i][j - i + j] and arr[i][j] > arr[i - j][j]:\n                        return False\n                elif (i - j) < 0 and (i + j) < len(arr):\n                    if arr[i][j] > arr[i][j - i + j] and arr[i][j] > arr[i + j][j]:\n                        return False\n                elif (i + j) >= len(arr) and (i - j) < 0:\n                    if arr[i][j] > arr[i][j - i + j] and arr[i][j] > arr[i + j][j]:\n                        return False\n        return True\n    \n    \n    def check_all_cases(arr):\n        return check_inv_per_diagonal(arr) and check_inversion(arr) and check_inv_per_col(arr) and check_inv_per_row(arr) and check_non_descending(arr)\n    \n    \n    arr = inversion(arr)\n    if check_all_cases(arr):\n        return 'YES'\n    \n    return 'NO'\n    \n\nprint(solution(stdin.read()))"
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return 'Yes' if set(stdin) == set(map(int, stdin)) else 'No'\n\ndef"
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    string \uc815\ub9ac\ud558\uace0 \uadf8 \uc548\uc758 \uc22b\uc790\ub4e4\uc744 \uc774\uc804 \uc22b\uc790\ub4e4\uc758 \uc22b\uc790\uc5d0 \ube44\uad50\ud558\uc5ec \uc774\uc804 \uc22b\uc790\uac00 \ub354 \ucee4\uc57c\ud558\ub294\uc9c0 \ud655\uc778\n    \"\"\"\n    stdin = list(stdin)\n    prev = int(stdin[0])\n    for c in stdin[1:]:\n        # prev \uac12\uc774 \uc9c0\uae08 \uac12\ubcf4\ub2e4 \ucee4\uc57c \ud558\ub294 \uacbd\uc6b0\n        if int(c) > prev:\n            return \"No\"\n        prev = int(c)\n    return \"Yes\"\n"
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    s = list(s)\n    if len(set(s)) == 1:\n        return 'Yes'\n    for i in range(1, len(s)):\n        if int(s[i]) > int(s[i - 1]):\n            continue\n        else:\n            return 'No'\n    return 'Yes'\n"
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    is_palindromic = lambda n: str(n) == str(n)[::-1]\n    digits = int(stdin)\n    if is_palindromic(digits):\n        return \"Yes\"\n    else:\n        return \"No\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin) >= 2:\n        return stdin[0] == stdin[1]\n    else:\n        return stdin[0]!= stdin[0]\n\n\nprint(solution('121'))\nprint(solution('122'))\nprint(solution('436'))\n"
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    input_length = len(stdin)\n    if input_length == 1:\n        return \"No\"\n    if input_length == 2:\n        return \"Yes\"\n    if input_length == 3:\n        if stdin[0] == stdin[2]:\n            return \"No\"\n        else:\n            return \"Yes\"\n    for i in range(input_length - 1):\n        if stdin[i]!= stdin[i + 1] and stdin[i]!= stdin[i - 1]:\n            return \"No\"\n    return \"Yes\"\n\n\nprint(solution(\"121\"))\nprint(solution(\"1221\"))\nprint(solution(\"12211221\"))\nprint(solution(\"1331\"))\nprint(solution(\"1332\"))\n"
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = input()\n    # int \uc790\ub8cc\ud615\uc744 \ubb38\uc790\uc5f4\ub85c \ubcc0\ud658\n    n = str(n)\n    # n\uc774 \uc9dd\uc218\uc77c \uacbd\uc6b0\n    if len(n) % 2 == 0:\n        # \ucc98\uc74c \ub450 \uc790\ub9ac\uc218 \ud569\n        sum_1 = int(n[0]) + int(n[1])\n        # \ub098\uba38\uc9c0 \ub450 \uc790\ub9ac\uc218 \ud569\n        sum_2 = int(n[2]) + int(n[3])\n        # \ub098\uba38\uc9c0 \ub450 \uc790\ub9ac\uc218 \ud569\uc774 \ud640\uc218\uc77c \uacbd\uc6b0\n        if sum_1 % 2 == 1 and sum_2 % 2 == 1:\n            return \"Yes\"\n        # \ub098\uba38\uc9c0 \ub450 \uc790\ub9ac\uc218 \ud569\uc774 \uc9dd\uc218\uc77c \uacbd\uc6b0\n        else:\n            return \"No\"\n    # n\uc774 \ud640\uc218\uc77c \uacbd\uc6b0\n    else:\n        return \"No\"\n\nprint(solution('121'))\n"
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return 'Yes' if len(stdin) % 2 == 0 else 'No'"
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin) < 2:\n        return \"Yes\"\n    if len(stdin) % 2 == 0:\n        return \"No\"\n    if len(stdin) % 2 == 1:\n        if (int(stdin[0]) - int(stdin[1])) == (int(stdin[-1]) - int(stdin[-2])):\n            return \"Yes\"\n        else:\n            return \"No\"\n"
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin) <= 10:\n        return \"Yes\" if \"0\" in stdin else \"No\"\n    else:\n        return \"No\"\nprint(solution(\"373\"))\n"
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, b, a = map(int, stdin.split())\n    s = list(map(int, stdin.split()))\n    b, a = max(b, a), min(b, a)\n    costs = [0, b, a]\n    for i in range(N - 1):\n        costs.append(sum(costs))\n    for i in range(1, N):\n        costs[i] = max(costs[i - 1], costs[i] - s[i - 1])\n    return costs[-1]\n"
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    A robot stays at X = 0 and goes to X = n.\n    It has a battery with capacity B and an accumulator with capacity A.\n    The charge of the battery and the accumulator are initially 0.\n    It can go through the i-th segment using the battery with a cost of 1.\n    It can go through the i-th segment using the accumulator with a cost of A.\n    The robot can get to the i-th segment if the charge is >= B + A, and\n    if the charge is >= A.\n    What is the maximum number of segments the robot can pass?\n    '''\n    n, B, A = [int(x) for x in stdin.split()]\n    print(n - max(0, B - A))\n    return ''"
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, b, a = list(map(int, stdin.split()))\n    x = list(map(int, stdin.split()))\n\n    \n-----Problem-----\n\nhttps://www.codewars.com/kata/56fcecc857d2c4c5d900000e/train/python\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    data = [int(x) for x in stdin.split(' ')]\n    n, b, a = data[0:3]\n    s = data[3:]\n    last_used = 0\n    result = 0\n    for segment in s:\n        if segment == 1:\n            result += 1\n            if last_used == 0:\n                last_used = 1\n            else:\n                last_used = 0\n        else:\n            last_used = 0\n    return result"
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find the maximum number of segments of distance the robot can pass\n    if you control him optimally.\n    \"\"\"\n   ..."
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5 2 1\n   ... 0 1 0 1 0\n   ... ''')\n    '5'\n    >>> solution('''6 2 1\n   ... 1 0 0 1 0 1\n   ... ''')\n    '3'\n    \"\"\"\n    n, b, a = [int(x) for x in stdin.split('\\n')[0].split(' ')]\n    s = [int(x) for x in stdin.split('\\n')[1].split(' ')]\n    max_steps = 0\n    current_step = 0\n    for i in range(n):\n        current_step += (s[i] == 1) * a + (s[i] == 0) * b\n        max_steps = max(max_steps, current_step)\n        current_step -= (s[i] == 0) * a\n        current_step -= (s[i] == 1) * b\n    return str(max_steps)\n"
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split('-')\n    a, b = int(a), int(b)\n    return a - b"
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split('-')\n    result = 0\n    for i in s:\n        result -= int(i)\n    return str(result)\n\n\ndef"
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    if stdin.isnumeric():\n        return str(int(stdin))\n    operators = []\n    operands = []\n    for s in stdin.split():\n        if s.isnumeric():\n            operands.append(int(s))\n        else:\n            operators.append(s)\n    \n    result = operands[0]\n    i = 1\n    while i < len(operands):\n        op = operators[i-1]\n        if op == '+':\n            result += operands[i]\n        elif op == '-':\n            result -= operands[i]\n        else:\n            raise ValueError('Unknown operator')\n        i += 1\n    return str(result)\n\n\ndef"
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution to the problem of April Fools Day contest\n    \"\"\"\n    # Convert the input into a list of integers\n    numbers = [int(i) for i in stdin.split('-') if i.strip()!= '']\n    # Initialize the accumulator variable\n    acc = 0\n    # For each number in the list, add it to the accumulator\n    for number in numbers:\n        acc += number\n    # Return the result of the accumulator\n    return acc\n\ndef"
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin.split('-')\n    r = 0\n    for item in string:\n        l = list(item.split('+'))\n        r += int(l[0])\n        for i in range(1, len(l)):\n            r -= int(l[i])\n    return r\n\nprint(solution('2-3+3-2-1-0'))\n"
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    result = 0\n    stack = []\n    signs = '+-'\n    for i in range(len(stdin)):\n        if stdin[i].isdigit():\n            stack.append(stdin[i])\n        elif stdin[i] in signs:\n            num1 = int(stack.pop())\n            num2 = int(stack.pop())\n            if stdin[i] == '+':\n                num2 += num1\n            elif stdin[i] == '-':\n                num2 -= num1\n            stack.append(num2)\n    result = stack[0]\n    return result\n"
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"This solution is intended to implement the function which was described in the task. The function takes the string with expression and returns the result of the expression evaluation.\n    \"\"\"\n    # Your code here\n    return stdin\n"
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return eval(stdin)\n"
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return stdin"
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x, y = stdin.split('-')\n    z = x.split('+')\n    a = [int(b) for b in z]\n    return sum(a) - sum(y.split('+'))\n"
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    assert 2 <= n <= 10 ** 5 and 2 <= k <= 10 ** 5\n\n    b = [0] * n\n    g = [0] * n\n    for i in range(n):\n        b[i], g[i] = map(int, stdin.split())\n        assert 1 <= b[i] <= k\n        assert 1 <= g[i] <= k\n        assert b[i]!= g[i]\n\n    groups = {}\n    for i in range(n):\n        if b[i] in groups:\n            groups[b[i]].append(i)\n        else:\n            groups[b[i]] = [i]\n\n        if g[i] in groups:\n            groups[g[i]].append(i)\n        else:\n            groups[g[i]] = [i]\n\n    count = len(groups.keys())\n    # print(count, groups)\n    if count == 0:\n        return 'NO'\n    elif count == 1:\n        b_g_colors = set(groups.keys())\n        # print(b_g_colors)\n        if len(b_g_colors) == 1:\n            return 'YES'\n        else:\n            return 'NO'\n\n    if len(groups) == 2:\n        # print('here')\n        a_b_colors = set(groups.keys())\n        b_a_colors = set(groups.keys())\n        if a_b_colors == b_a_colors:\n            return 'YES'\n        else:\n            return 'NO'\n\n    for i in range(n):\n        if i % 2 == 0:\n            b[i], g[i] = g[i], b[i]\n\n    if k % 2 == 0:\n        # print('here')\n        return 'YES'\n\n    if k % 2 == 1:\n        # print('here')\n        a_b_colors = set(groups.keys())\n        b_a_colors = set(groups.keys())\n        if a_b_colors == b_a_colors:\n            return 'YES'\n        else:\n            return 'NO'\n"
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return \"\"\n"
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    n, k = map(int, stdin.split())\n    b = [0] * k\n    g = [0] * k\n    for i in range(1, n + 1):\n        b[int(stdin.split()[i * 2 - 2]) - 1] += 1\n        g[int(stdin.split()[i * 2 - 1]) - 1] += 1\n    for i in range(k):\n        if b[i] == 1 or g[i] == 1:\n            print(\"NO\")\n            return\n    print(\"YES\")\n    for i in range(1, n + 1):\n        print(b[int(stdin.split()[i * 2 - 2]) - 1], g[int(stdin.split()[i * 2 - 1]) - 1])\n    return\n"
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Get input\n    n, k = [int(x) for x in stdin.strip().split()]\n\n    # Find solution\n    for i in range(k):\n        b = g = i + 1\n        if b == g:\n            continue\n        if b == k:\n            b = 1\n        if g == k:\n            g = 1\n        if b == g:\n            continue\n        if (b == 1 and g == k):\n            continue\n        if (b == k and g == 1):\n            continue\n        print(f\"{b} {g}\")"
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(' ')]\n    if k > 2 * 10 ** 5:\n        return 'NO'\n    b = [int(x) - 1 for x in stdin.split('\\n')[1:]]\n    g = [int(x) - 1 for x in stdin.split('\\n')[1:]]\n    m = [[i, j] for i in range(n) for j in range(i + 1, n) if b[i]!= b[j] and g[i]!= g[j]]\n    m = [x for y in m for x in y]\n    if m:\n        return 'YES\\n' + '\\n'.join(str(x) for x in m)\n    else:\n        return 'NO'\n"
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = stdin.split(' ')\n    n, k = int(n), int(k)\n    colors = [0] * k\n    for i in range(n):\n        b, g = map(int, stdin.split(' '))\n        b -= 1\n        g -= 1\n        if colors[b]!= 0 or colors[g]!= 0:\n            return \"NO\"\n        else:\n            colors[b] = 1\n            colors[g] = 1\n    return \"YES\"\n"
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n < k * 2:\n        return \"NO\"\n    t = [[False for _ in range(k + 1)] for _ in range(k + 1)]\n    t[0][0] = True\n    for i in range(1, k + 1):\n        t[i][0] = True\n        for j in range(1, i + 1):\n            t[i][j] = t[i - 1][j - 1] or t[i - 1][j]\n            if t[i][j] and j == i:\n                return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \n    \n    \n    return''.join(map(str, ans))\n"
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    pass\n"
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def check_valid(arr: List[int], k: int, x: int):\n        return all((sum(arr[i:i + k]) >= x for i in range(len(arr) - k + 1)))\n\n    n, k, x = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    for i in range(k, n + 1):\n        if check_valid(arr, i, x):\n            return i\n\n    return -1\n"
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def solve(n, k, x, a):\n        dp = [[0] * (x + 1) for _ in range(n + 1)]\n        for i in range(n + 1):\n            for j in range(x + 1):\n                if j == 0:\n                    dp[i][j] = 0\n                else:\n                    dp[i][j] = dp[i - 1][j]\n                    if k <= i and j - a[i - 1] >= 0:\n                        dp[i][j] = max(dp[i][j], dp[i - 1][j - a[i - 1]] + a[i - 1])\n        return dp[n][x]\n    n, k, x = [int(i) for i in stdin.split()]\n    a = [int(i) for i in stdin.split()][1:]\n    print(solve(n, k, x, a))\n\nsolution(input)\n"
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    \n    n, k, x = [int(i) for i in stdin.split(' ')]\n    a = [int(i) for i in stdin.split(' ')[1:]]\n    l = [0] * x\n    r = [0] * x\n    max_val = -1\n    for i in range(n):\n        if i >= k:\n            if max_val < sum(l):\n                max_val = sum(l)\n            l = [l[j] + a[i] for j in range(k)]\n        else:\n            if max_val < sum(r):\n                max_val = sum(r)\n            r = [r[j] + a[i] for j in range(i, i+k)]\n    return max_val if max_val!= -1 else '-1'\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return None\n"
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    input_lst = stdin.split(\"\\n\")\n    n, k, x = int(input_lst[0].split()[0]), int(input_lst[0].split()[1]), int(input_lst[0].split()[2])\n\n    pictures = [int(i) for i in input_lst[1].split()]\n\n    dp = [[-1] * (x + 1) for i in range(n + 1)]\n    dp[0][0] = 0\n    for i in range(n):\n        for j in range(x + 1):\n            if j < k:\n                dp[i + 1][j] = dp[i][j]\n            else:\n                dp[i + 1][j] = max(dp[i][j], pictures[i] + dp[i][j - k])\n\n    output = dp[n][x]\n    if output == -1:\n        return \"-\"\n    else:\n        return output\n"
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = [int(x) for x in stdin.split(' ')]\n    A = [int(x) for x in stdin.split(' ')]\n\n    A = sorted(A)[::-1]\n    \n    if k == 1:\n        return max(A) * n\n    \n    A = [0] + A + [10 ** 9]\n\n    ans = 0\n    cur = 0\n    for a in A:\n        cur += a\n        if cur >= k:\n            ans += a\n\n    return ans if ans >= k * x else -1\n"
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    rooms_num, router_range = [int(i) for i in stdin.split('\\n')[0].split(' ')]\n    router_spots = [int(i) for i in stdin.split('\\n')[1].split(' ')]\n    print(router_spots)\n    router_spots_dict = {i:0 for i in range(rooms_num)}\n    for i in router_spots:\n        if i == 1:\n            router_spots_dict[router_spots.index(i)] = 1\n    router_spots_dict = {k:v for k, v in router_spots_dict.items() if v == 1}\n    print(router_spots_dict)\n    # router_spots_dict = [int(i) for i in router_spots]\n    # router_spots_dict = {i:1 for i in router_spots if i == 1}\n    # print(router_spots_dict)\n    # print(router_spots_dict.keys())\n    # print(router_spots_dict.values())\n    print(router_spots_dict.values())\n    sum_spots = 0\n    for k, v in router_spots_dict.items():\n        sum_spots += router_range * v\n    print(sum_spots)\n    return sum_spots"
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    line_1 = stdin.split(\"\\n\")[0].split(\" \")\n    n = int(line_1[0])\n    k = int(line_1[1])\n    line_2 = stdin.split(\"\\n\")[1].split(\"0\")\n    arr = [0] * n\n    for line in line_2:\n        if line == '':\n            continue\n        arr[int(line) - 1] = 1\n    ans = 0\n    for i in range(n):\n        if arr[i]:\n            ans += i\n        else:\n            j = max(i - k, 1)\n            l = min(n, i + k)\n            for j in range(j, l):\n                if arr[j]:\n                    ans += j\n                    break\n    print(ans)\n    return\n"
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(\" \")]\n    rooms = [int(x) for x in stdin.split(\" \")]\n    routers = k\n    connections = 0\n    for room in rooms:\n        if room == 1:\n            connections += 1\n        else:\n            connections += routers\n    return connections"
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    n, k = [int(n) for n in stdin.split()]\n    s = stdin[:-1]\n    if s.count('1') <= k:\n        return k * n\n    connections = []\n    for i in range(n):\n        if s[i] == '1':\n            connections.append(i + 1)\n    connections.sort()\n    for i in range(len(connections)):\n        for j in range(i + 1, len(connections)):\n            if connections[j] - connections[i] > k:\n                break\n            connections[j] = connections[i]\n    return sum([connections[i] - connections[i - 1] + 1 for i in range(1, len(connections))])"
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    rooms, routers = [int(elem) for elem in stdin[0].split()]\n    matrix = [\n        [int(elem) for elem in stdin[1].split()]\n        for _ in range(rooms)\n    ]\n\n    def is_router(x):\n        return matrix[x - 1][x - 1] == 1\n\n    dp = [[0] * (routers + 1) for _ in range(rooms + 1)]\n\n    for r in range(1, routers + 1):\n        dp[1][r] = r * matrix[0][r - 1]\n\n    for r in range(1, routers + 1):\n        for i in range(1, rooms + 1):\n            for j in range(i, rooms + 1):\n                dp[i][r] = min(\n                    dp[i][r],\n                    dp[i][r - 1] + matrix[i - 1][j - 1] * r,\n                    dp[max(1, i - routers)][r - 1] + matrix[i - 1][j - 1] * r,\n                )\n\n    return dp[-1][-1]\n"
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    rooms = list(map(int, stdin.split()))\n    routers = 0\n    for room in rooms:\n        if room:\n            routers += 1\n\n    if n - routers <= m:\n        return sum(rooms)\n\n    return min(sum(rooms[:routers + m]) + routers * m, sum(rooms[routers - m + 1:]) + (n - routers - 1) * m)\n"
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    room_with_router = [1 if i == 1 else 0 for i in stdin.split()]\n    s = \"1\" + \"\".join([str(i) for i in room_with_router])\n\n    def count_min_routers(s: str) -> int:\n        routers = 0\n        if s[1] == '0':\n            routers += 1\n        for i in range(1, n - 1):\n            if s[i - 1]!= s[i + 1] and s[i] == '0':\n                routers += 1\n        return routers\n\n    min_routers = count_min_routers(s)\n    return sum(\n        [min_routers + i * k for i in range(1, n - 1)]\n    )\n"
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0].split(' ')[0])\n    k = int(lines[0].split(' ')[1])\n    line = lines[1]\n    cost = 0\n    routers = [line[i] for i in range(n)]\n    for i in range(n):\n        if line[i] == '0':\n            cost += i + 1\n    cost += k * (n - 1)\n    for i in range(n):\n        if line[i] == '0':\n            for j in range(max(i - k + 1, 0), min(i + k, n)):\n                if line[j] == '1':\n                    cost += abs(i - j)\n    return cost\n"
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    _, k = map(int, stdin.split())\n    arr = [int(c) for c in stdin.split()[1]]\n    k_max = k * 2\n    arr.sort(reverse=True)\n    cost = 0\n    while k > 0:\n        min_value = arr.pop()\n        cost += min_value * k\n        k -= 1\n        if len(arr) > 0:\n            max_value = arr.pop()\n            cost += (max_value - min_value + 1) * k\n            k -= 1\n            for i in range(min_value, max_value + 1):\n                arr.append(i)\n    return cost"
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    s = stdin.split('\\n')[1]\n    d = {i:0 for i in range(1, n + 1)}\n    for i in range(1, n + 1):\n        d[i] = int(s[i - 1])\n    d = {k: d[k] for k in d if d[k] == 1}\n    if len(d) == 0:\n        return 0\n    r = max(d)\n    if max(d) <= k:\n        return (k - 1) * (len(d) + 1) + sum(d.values())\n    return (r - k) * (len(d) + 1) + sum(d.values())\n\ndef"
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"azzel\")\n    'Yes'\n    >>> solution(\"apple\")\n    'No'\n    \"\"\"\n\n    S, T = stdin.split(\"\\n\")\n    equal_S = can_equal(S)\n    equal_T = can_equal(T)\n    return \"Yes\" if equal_S == equal_T else \"No\"\n\n\ndef"
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s: str = stdin[0]\n    t: str = stdin[1]\n    count: int = 0\n    for i in range(len(s)):\n        if s[i]!= t[i]:\n            count += 1\n    if count == 0:\n        return 'Yes'\n    return 'No'"
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split(\"\\n\")\n    return \"Yes\" if s == t else \"No\""
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split('\\n')\n    # Look through each character in s\n    # if you find a character that exists in t,\n    # then change it to the corresponding character in t\n    # otherwise, don't change it.\n    for c in s:\n        if c in t:\n            t = t.replace(c, s)\n        else:\n            pass\n    # return the resulting string\n    return t"
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    if sorted(s)!= sorted(t):\n        return 'No'\n    else:\n        for i in range(len(s)):\n            if s[i]!= t[i]:\n                return 'No'\n        return 'Yes'\n"
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    return \"Yes\" if s == t else \"No\"\n"
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nimport collections\n\ndef"
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    t = stdin[1]\n    count = 0\n    for i in range(len(s)):\n        if s[i] == t[i]:\n            count += 1\n    if count == len(s) - 1:\n        return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution to the problem.\"\"\"\n    S = stdin\n    T = stdin\n    c1, c2 = set(), set()\n    for i in range(len(S)):\n        if S[i]!= T[i]:\n            c1.add(S[i])\n            c2.add(T[i])\n    if len(c1)!= len(c2):\n        return 'No'\n    return 'Yes'\n"
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.strip().split('\\n')\n    if s == t:\n        return \"Yes\"\n    if len(s)!= len(t):\n        return \"No\"\n\n    for c_1, c_2 in zip(s, t):\n        if c_1 == c_2:\n            continue\n        if c_1 in s and c_2 in t:\n            t = t.replace(c_1, c_2)\n            s = s.replace(c_1, c_2)\n            break\n    else:\n        return \"No\"\n    return \"Yes\" if s == t else \"No\"\n"
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def solve(M: int, N: int, A: list):\n        for _ in range(M):\n            lst = A.copy()\n            for i in range(1, N + 1):\n                for j in range(1, M + 1):\n                    lst[i] = lst[i] + j\n                lst.sort()\n                if lst[N // 2] >= N * M / 2:\n                    return \"YES\"\n        return \"NO\"\n\n    M, N = map(int, stdin.split(\" \"))\n    A = []\n    for i in range(1, N + 1):\n        A.append(int(stdin.split(\" \")[i]))\n    print(solve(M, N, A))\n"
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''\n"
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return \"\"\n"
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def kadane(l, r):\n        tot = 0\n        totmax = 0\n        while r < len(l):\n            tot += l[r]\n            totmax = max(tot, totmax)\n            r += 1\n        return totmax\n\n    def search(tot, i, j):\n        while i <= j:\n            tot += i\n            tot -= i\n            if kadane(a, j) > tot:\n                return 1, j, tot\n            i += 1\n        return 0, i, tot\n\n    a = list(map(int, stdin.split()))\n    c = int(stdin.split()[-1])\n    n = len(a)\n    r = 0\n    j = 0\n    for i in range(n):\n        while r < n and j < n and a[r] + a[j] <= c:\n            j += 1\n        if r == j:\n            return \"NO\"\n        if j == n:\n            break\n        r = j\n        j = r + 1\n    if j < n:\n        return \"YES\"\n    tot = 0\n    for i in range(n):\n        if tot < kadane(a, i):\n            tot = kadane(a, i)\n    if tot >= c:\n        return \"YES\"\n    return \"NO\"\n\n\ndef"
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    To compute the answer to the problem, one needs to check if the sum of the\n    understanding levels of all the algorithms is less than the number of\n    algorithms X.\n    \"\"\"\n    N, X, A, C = [int(x) for x in stdin.split()]\n    A = [int(x) for x in stdin.split()]\n    C = [int(x) for x in stdin.split()]\n    # If the sum of the understanding levels is equal to the number of\n    # algorithms, then the minimum cost is zero.\n    if X == sum(A):\n        return '0'* N\n    # Otherwise, it is impossible to achieve the objective.\n    return '-1'\n"
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    D, G = map(int, stdin.readline().split())\n    p = [int(x) for x in stdin.readline().split()]\n    c = [int(x) for x in stdin.readline().split()]\n    p.sort()\n    c.sort()\n    cnt = 0\n    for i in range(D):\n        if p[i] > c[i]:\n            cnt += (p[i] - c[i])\n    if G <= cnt:\n        return str(i+1)\n    return 'Impossible'\n"
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    D, G = list(map(int, stdin.split()))\n    p = list(map(int, stdin.split()))\n    c = list(map(int, stdin.split()))\n    p.sort(reverse=True)\n    c.sort(reverse=True)\n    i = 1\n    score = 0\n    while i < D:\n        while score + p[i] < G:\n            score += p[i]\n            i += 1\n        if score + c[i] < G:\n            score += c[i]\n            i += 1\n        if score >= G:\n            return str(i)\n        score -= p[i]\n        i += 1\n    return str(i)\n"
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    D, G = map(int, stdin.split())\n    ps, cs = [], []\n    for _ in range(D):\n        p, c = map(int, stdin.split())\n        ps.append(p)\n        cs.append(c)\n\n    result = 0\n    for p, c in zip(ps, cs):\n        if G >= p * 100 + c:\n            result += p\n            G -= p * 100 + c\n        else:\n            result += (G // 100)\n            G %= 100\n            break\n    return str(result)\n"
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the solution to the AtCode problem at hand.\"\"\"\n    (D, G) = map(int, stdin.split())\n    points = [int(p) for p in stdin.split()]\n    bonuses = [int(c) for c in stdin.split()]\n    return str(get_minimum_solve(D, G, points, bonuses))\n\n\ndef"
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Get input\n    D, G = stdin.split()\n    D = int(D)\n    G = int(G)\n    problem_scores = []\n    perfect_bonus_scores = []\n    for i in range(D):\n        problem_scores.append(list(map(int, stdin.split())))\n    \n    # Check each individual score\n    solved_scores = []\n    for problem in problem_scores:\n        solved_scores.append(sum(problem))\n    solved_scores.sort(reverse=True)\n    \n    # If all the problems are solved\n    if solved_scores[0] == D:\n        return 0\n    \n    # If not, check if adding a perfect bonus is worth it\n    else:\n        for i in range(D):\n            if (G - solved_scores[0]) % problem_scores[i][0] == 0 and (G - solved_scores[0]) // problem_scores[i][0] < solved_scores[0]:\n                perfect_bonus_scores.append(sum(problem_scores[i]) + (G - solved_scores[0]) // problem_scores[i][0])\n            elif (G - solved_scores[0]) % problem_scores[i][0]!= 0 and (G - solved_scores[0]) // problem_scores[i][0] < solved_scores[0]:\n                perfect_bonus_scores.append(sum(problem_scores[i]))\n    \n    # If not worth it, solve as many as needed\n    if perfect_bonus_scores == []:\n        return solved_scores[0]\n    else:\n        return solved_scores[0] + perfect_bonus_scores[0]\n\ndef"
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n\n    d, g = map(int, lines[0].split())\n    points = [[int(x), int(y)] for x, y in zip(lines[1].split(), lines[2].split())]\n\n    points = sorted(points, key=lambda x: x[0])\n\n    cnt = 0\n    cur = 0\n    prev = 0\n\n    for i, j in points:\n        if cur + j >= g:\n            break\n\n        cur += j\n        prev = i\n        cnt += 1\n\n    return str(cnt)\n"
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    D, G = [int(x) for x in stdin.split()]\n    total_score = 0\n    for d in range(1, D + 1):\n        total_score += d * 100\n        if G <= total_score:\n            return str(d)\n    return '-1'"
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the minimum number of problems that needs to be solved in order to have a total score of G or more points.\"\"\"\n    # Get input\n    input_data = [i.strip() for i in stdin.split('\\n') if i.strip()!= '']\n    D, G = [int(i) for i in input_data[0].split(' ')]\n    p_i = [int(i) for i in input_data[1:1+D]]\n    c_i = [int(i) for i in input_data[1+D:]]\n\n    # Calculate possible scores\n    possible_scores = [100 * i for i in range(1, D+1)]\n    perfect_bonuses = [i for i in c_i if i % 100 == 0]\n    possible_scores += perfect_bonuses\n\n    # Check if G is achievable\n    if G not in possible_scores:\n        return -1\n    \n    # Calculate min amount of problems\n    return len([i for i in p_i if i > 0 and G-i in possible_scores])"
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    pass\n"
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def solve(D, G):\n        # s: the sum of the scores of all problems solved by the user\n        s = 0\n        # c: the sum of the perfect bonuses of the problems solved by the user\n        c = 0\n        for _ in range(D):\n            n, b = map(int, stdin.readline().split())\n            s += 100 * n\n            c += b if s >= G else 0\n            s -= n * b\n            if s == 0:\n                break\n        return c\n\n    D, G = map(int, stdin.readline().split())\n    return f\"{min(D, G // 100)} {min(G - ((D - 1) * 100), D * 100) // 100}\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n    pass\n"
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split(' ')))\n    s_odd = 0\n    s_even = 0\n    for i in range(n - 1):\n        if i % 2 == 0:\n            s_even += a[i]\n        else:\n            s_odd += a[i]\n    return str(s_even - s_odd)\n    pass"
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\nSee https://www.codewars.com/kata/52db9bc6c5a1fe063e000011 for details\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    good = 0\n    for i in range(1, n, 2):\n        if sum(a[:i]) * 2 == sum(a[i:]):\n            good += 1\n    print(good)\n"
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nfrom sys import stdin\n\nn = int(stdin.readline())\nlst = list(map(int, stdin.readline().split()))\n\nprint(sum(lst[1::2]) - sum(lst[::2]))\n"
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\nn = int(stdin.readline())\na = list(map(int, stdin.readline().split()))\n\nn = n-1\na_odd = [0] * n\na_even = [0] * n\n\nfor i in range(n):\n    if i % 2 == 0:\n        a_even[i] = a[i]\n    else:\n        a_odd[i] = a[i]\n\na_even_total = sum(a_even)\na_odd_total = sum(a_odd)\n\nd_even = 1\nd_odd = 1\n\nwhile d_even < n:\n    if a_even[d_even] == 0 and a_even[d_even - 1]!= 0:\n        break\n    if a_even[d_even] == a_even[d_even - 1]:\n        d_even += 1\n    else:\n        if d_even == 1:\n            break\n        d_even += 1\n\nwhile d_odd < n:\n    if a_odd[d_odd] == 0 and a_odd[d_odd - 1]!= 0:\n        break\n    if a_odd[d_odd] == a_odd[d_odd - 1]:\n        d_odd += 1\n    else:\n        if d_odd == 1:\n            break\n        d_odd += 1"
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"https://app.codility.com/demo/results/trainingDVVM5U-L8W/\"\"\"\n    n = int(stdin)\n    candies = [int(x) for x in stdin.split()]\n    candies_sums = [0] * (n + 1)\n    for candy in candies:\n        candies_sums[candy] += 1\n    even_days = 0\n    odd_days = 0\n    for candy in candies_sums[1:]:\n        if candy % 2 == 0:\n            even_days += 1\n        else:\n            odd_days += 1\n    return str(odd_days)\n\nprint(solution('7'))\nprint(solution('8'))\nprint(solution('9'))\n"
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    pass\n"
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"O(n) time and O(1) space\n    \"\"\"\n    a = [int(x) for x in stdin.split('\\n')[0].split(' ')]\n    n = len(a)\n    total = sum(a)\n    even = 0\n    odd = 0\n    for i in range(n):\n        if i % 2 == 0:\n            even += a[i]\n        else:\n            odd += a[i]\n    return odd - even"
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    print(a)\n    print(x, k)\n\n\nsolution(input())"
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def get_beauty(start: int, end: int) -> int:\n        return sum([int(input[start:end]) for _ in range(end - start)])\n\n    def optimal_vova_repost(n: int, k: int, x: int) -> int:\n        def possible_segment_length(length: int) -> int:\n            return (n - length + 1) // (x - 1)\n\n        l, r = 1, k\n        while l < r:\n            mid = (l + r) // 2\n            if possible_segment_length(mid) > n // x:\n                l = mid + 1\n            else:\n                r = mid\n        return max(\n            get_beauty(0, l) + get_beauty(l, r) * (n // x),\n            get_beauty(0, r)\n        )\n\n    n, k, x = map(int, stdin.readline().split())\n    input = stdin.readline().strip()\n    beauty = [int(i) for i in input.split(' ')]\n    print(optimal_vova_repost(n, k, x))\n\nsolution(stdin)\n"
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # get input\n    n, k, x = [int(n) for n in stdin.split()]\n    a = [int(n) for n in stdin.split()]\n    # check for impossible\n    if k > n or x > n or x > k:\n        print(-1)\n        return\n    # find optimal solution\n    return n - min(x, n - k) + sum(a) - sum(a[0:k])\n\n\ndef"
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def f(n, k, x, a):\n        m = len(a)\n        if n < k or m < k or n - k < x:\n            return -1\n        dp = [[[-1] * (m + 1) for _ in range(x + 1)] for _ in range(k + 1)]\n        dp[0][0][0] = 0\n        for i in range(1, n + 1):\n            for j in range(1, min(k, m) + 1):\n                for l in range(1, x + 1):\n                    dp[j][l][i] = dp[j - 1][l][i - 1]\n                    if a[i - 1] > l:\n                        dp[j][l][i] = max(dp[j][l][i], dp[j][l - 1][i - 1] + a[i - 1])\n                    if j >= 2 and l + 1 - k < i and dp[j - 1][l][i - 1]!= -1:\n                        dp[j][l][i] = max(dp[j][l][i], dp[j - 2][l + 1 - k][i - 1] + a[i - 1])\n        return dp[k][x][n]\n    n, k, x = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    print(f(n, k, x, a))\n\n\nsolution(stdin)\n\n\n'''\n5 1 3 10 1\n5 1 3 10 1\n6 1 5\n10 30 30 70 10 10\n4 3 1\n1 100 1 1\n'''"
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5 2 3\n   ... 5 1 3 10 1''')\n    '18'\n    >>> solution('''6 1 5\n   ... 10 30 30 70 10 10''')\n    '-1'\n    \"\"\"\n    n, k, x = [int(x) for x in stdin.split('\\n')[0].split()]\n    b = [int(x) for x in stdin.split('\\n')[1].split()]\n    ans = 0\n    for i in range(n - k + 1):\n        j = 0\n        s = 0\n        while j < k:\n            s += b[i + j]\n            j += 1\n        ans = max(ans, s)\n    if ans > x:\n        return '-1'\n    return str(ans)"
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('4 3 1\\n1 100 1 1\\n')\n    '100'\n    \"\"\"\n    n, k, x = map(int, stdin.split())\n    s = list(map(int, stdin.split()))\n    s.sort()\n    res = 0\n    for i in range(n - x + 1):\n        s1 = sum(s[i:i + x])\n        if s1 >= k * x:\n            res = max(s1, res)\n    if res == 0:\n        print(-1)\n    else:\n        print(res)\n"
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin)\n"
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    1. Understand the problem\n    2. Read input\n    3. Build an array\n    4. Sort the array\n    5. Get the max value of the array\n    6. Build the response\n\n    Parameters\n    ----------\n    stdin : str\n\n    Returns\n    -------\n    str\n    \"\"\"\n\n    # Understand the problem\n    # Input\n    # 5 2 3\n    # 5 1 3 10 1\n    # Output\n    # 18\n\n    # Read input\n    n, k, x = list(map(int, stdin.split()))\n    array = list(map(int, stdin.split()))\n\n    # Build array\n    # Sort the array\n    array.sort()\n\n    # Get max value of the array\n    # Response\n    # -1\n\n    return -1\n"
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N < 4:\n        return 'No'\n    elif N % 4!= 0:\n        return 'No'\n    else:\n        return 'Yes' if N >= 6 else 'Yes'\n"
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 4:\n        return \"No\"\n    if n % 7 == 0:\n        return \"Yes\"\n    if n % 4 == 0:\n        return \"Yes\"\n    if n % 7 == 1:\n        if n % 4 == 3:\n            return \"Yes\"\n        else:\n            return \"No\"\n    if n % 7 == 2:\n        if n % 4 == 2:\n            return \"Yes\"\n        else:\n            return \"No\"\n    if n % 7 == 3:\n        if n % 4 == 1:\n            return \"Yes\"\n        else:\n            return \"No\"\n    if n % 7 == 4:\n        if n % 4 == 0:\n            return \"Yes\"\n        else:\n            return \"No\"\n    if n % 7 == 5:\n        if n % 4 == 1:\n            return \"Yes\"\n        else:\n            return \"No\"\n    if n % 7 == 6:\n        if n % 4 == 2:\n            return \"Yes\"\n        else:\n            return \"No\"\n    if n % 7 == 7:\n        if n % 4 == 3:\n            return \"Yes\"\n        else:\n            return \"No\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    # The cost of one cake is 4 dollars\n    # The cost of one doughnut is 7 dollars\n    # We can buy two cakes and two doughnuts and spend exactly N dollars\n    # We can buy 2 doughnuts and 2 cakes and spend exactly N - 4 dollars\n    # We can buy 1 cake and 1 doughnut and spend exactly N - 7 dollars\n    # We can buy 2 doughnuts and 2 cakes and spend exactly N - 7 dollars\n    # We can buy 0 cake and 0 doughnut and spend exactly N - 4 dollars\n    # We can buy 1 cake and 1 doughnut and spend exactly N - 7 dollars\n    # We can buy 1 doughnut and 1 cake and spend exactly N - 4 dollars\n    # We can buy 0 cake and 0 doughnut and spend exactly N - 4 dollars\n    # We can buy 1 cake and 1 doughnut and spend exactly N - 7 dollars\n    # We can buy 1 cake and 1 doughnut and spend exactly N - 4 dollars\n    # We can buy 1 cake and 1 doughnut and spend exactly N - 7 dollars\n    # We can buy 0 cake and 0 doughnut and spend exactly N - 4 dollars\n    # We can buy 1 cake and 1 doughnut and spend exactly N - 7 dollars\n    if N % 7 == 0:\n        return \"Yes\"\n    elif N % 4 == 0:\n        return \"Yes\"\n    elif N % 4 == 1:\n        return \"Yes\"\n    elif N % 4 == 2:\n        return \"Yes\"\n    elif N % 7 == 1:\n        return \"Yes\"\n    elif N % 7 == 2:\n        return \"Yes\"\n    elif N % 7 == 3:\n        return \"Yes\"\n    else:\n        return \"No\"\n    # return \"Yes\" if N % 7 == 0 else \"No\"\n\"\"\""
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    total = int(stdin)\n    total_cake = (total + (total // 2)) // 4\n    total_doughnut = (total - total_cake) // 7\n    if total_doughnut > 0 and total_cake > 0:\n        return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n  N = stdin.strip()\n  total = 0\n  for cake in range(N // 4 + 1):\n    for doughnuts in range(N // 7 + 1):\n      if N == cake * 4 + doughnuts * 7:\n        return 'Yes'\n  return 'No'\n\nprint(solution(stdin.strip()))\n\"\"\"\n\n\"\"\"\ndef"
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # 1. Get input\n    N = stdin.split()\n    N = int(N[0])\n\n    # 2. Create a dynamic programming table\n    table = [[0 for i in range(N + 1)] for j in range(4)]\n\n    # 3. Populate dynamic programming table\n    for i in range(3):\n        for j in range(N + 1):\n            # If j < cakes, we cannot buy any cakes, so there is no way to buy N doughnuts\n            if j < table[i][0]:\n                table[i + 1][j] = table[i][j]\n            # If j >= cakes, we can buy at most 2 * cakes, so we must buy at least one cake\n            # If we can buy either 0 or 1 cake, we can buy it for the price of N - cake\n            elif j >= table[i][0]:\n                table[i + 1][j] = max(table[i][j - table[i][0]] + table[i][0], table[i][j])\n\n    # 4. Compute answer\n    if table[3][N] >= N:\n        return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split(\"\\n\")[0].split(\" \"))\n\n    if a > b:\n        c = a\n        a = b\n        b = c\n    n = a - b\n    if n == 0:\n        return \"Yes\"\n    if n > 0:\n        if n % 2 == 0:\n            return \"Yes\"\n        else:\n            return \"No\""
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    cake_dollars = 4\n    doughnut_dollars = 7\n    max_cake_dollars = N // cake_dollars\n    max_doughnut_dollars = N // doughnut_dollars\n    min_cake_dollars = max_cake_dollars // 2\n    min_doughnut_dollars = max_doughnut_dollars // 2\n    min_cake_dollars = max_cake_dollars // 2\n\n    print(\"Yes\" if min_cake_dollars <= min_doughnut_dollars else \"No\")\n    return \"\""
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    #get inputs\n    N = int(stdin)\n    #create an array to store the minimum number of doughnuts and cakes needed for N\n    min_doughnuts = []\n    min_cakes = []\n    #initially set the minimum number of doughnuts to 0 and cakes to 0.\n    min_doughnuts.append(0)\n    min_cakes.append(0)\n    #add an additional element to the end of each array (since it could have 0).\n    min_doughnuts.append(0)\n    min_cakes.append(0)\n    #for each possible value of the minimum number of doughnuts, try every possible combination of cakes.\n    for i in range(1, N+1):\n        #for each number of doughnuts\n        for j in range(1, N+1):\n            #for each number of cakes\n            for k in range(1, N+1):\n                #if it is possible to buy the current amount of doughnuts and cakes\n                if (i*4 + j*7) == N:\n                    #if we can buy more doughnuts than we need and less cakes than we need.\n                    if i <= j and i <= k:\n                        #if it is less than the current minimum in the minimum array, set it to be the new minimum.\n                        if i < min_doughnuts[-1]:\n                            min_doughnuts = []\n                            min_doughnuts.append(i)\n                            min_doughnuts.append(j)\n                            min_doughnuts.append(k)\n                    #if we can buy more cakes than we need and less doughnuts than we need.\n                    elif j <= i and j <= k:\n                        #if it is less than the current minimum in the minimum array, set it to be the new minimum.\n                        if j < min_cakes[-1]:\n                            min_cakes = []\n                            min_cakes.append(j)\n                            min_cakes.append(i)\n                            min_cakes.append(k)\n                    #if we can buy more cakes than we need and less doughnuts than we need.\n                    elif k <= i and k <= j:\n                        #if it is less than the current minimum in the minimum array, set it to be the new minimum.\n                        if k < min_cakes[-1]:\n                            min_cakes = []\n                            min_cakes.append(k)\n                            min_cakes.append(i)\n                            min_cakes.append(j)\n    #if there is at least one possible combination of cakes and doughnuts for N, return Yes, otherwise return No.\n    if len(min_doughnuts) > 0:\n        return \"Yes\"\n    else:\n        return \"No\"\n\nsolution(str(input()))"
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    dp = [[0 for _ in range(2)] for _ in range(N + 1)]\n    dp[0] = [0, 0]\n    dp[1] = [0, 1]\n    dp[2] = [1, 1]\n    for i in range(3, N + 1):\n        dp[i][0] = dp[i - 1][0] + dp[i - 2][0]\n        dp[i][1] = dp[i - 1][1] + dp[i - 2][1]\n    if dp[N][0] > 0 and dp[N][1] > 0:\n        return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\")\n    2 2 6\n    \"\"\"\n    raise NotImplementedError()\n"
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin[0])\n    H = [int(stdin[1 + i * 2]) for i in range(N)]\n    X = [int(stdin[2 + i * 2]) for i in range(N)]\n    Y = [int(stdin[3 + i * 2]) for i in range(N)]\n    return f\"{int(max(H) - min(H) / 2)} {int(max(H) - min(H))}\"\n    \n"
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    data = [line.split() for line in stdin.split('\\n')]\n    n = int(data[0][0])\n    coordinates = [(int(x), int(y)) for x, y in data[1:]]\n    # h = {(x, y): max(max(0, H - abs(x - C_X) - abs(y - C_Y)), 0) for x, y, H in data[1:]}\n    h = {}\n    for x, y, H in data[1:]:\n        h[(int(x), int(y))] = max(max(0, H - abs(x - C_X) - abs(y - C_Y)), 0)\n    center_x, center_y, max_h = None, None, 0\n    for (x, y), h in h.items():\n        if h > max_h:\n            max_h = h\n            center_x, center_y = x, y\n    return f'{center_x} {center_y} {max_h}'\n"
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    nums = [tuple(map(int, line.split())) for line in stdin]\n    x = [x for x, _, _ in nums]\n    y = [y for _, y, _ in nums]\n    h = [h for _, _, h in nums]\n    minx, miny, maxx, maxy = min(x), min(y), max(x), max(y)\n    n_points = len(nums)\n    x_mid = (minx + maxx) // 2\n    y_mid = (miny + maxy) // 2\n    max_h = max(h)\n    print(f\"{x_mid} {y_mid} {max_h}\")\n"
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = stdin.split('\\n')[0]\n    data = []\n    for line in stdin.split('\\n')[1:]:\n        data.append(line.split(' '))\n    print(data)\n\n    def ck(c_x, c_y, h, n):\n        for i in range(n):\n            if max(abs(int(data[i][0]) - c_x), abs(int(data[i][1]) - c_y), 0)!= h:\n                return False\n        return True\n\n    for i in range(1, N):\n        for j in range(i):\n            for k in range(j):\n                if ck(int(data[j][0]), int(data[j][1]), int(data[k][2]), i):\n                    x = int(data[j][0])\n                    y = int(data[j][1])\n                    h = int(data[j][2])\n                    print(x, y, h)\n                    return (str(x) +'' + str(y) +'' + str(h))\n    return (str(x) +'' + str(y) +'' + str(h))"
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin[0])\n    c_x, c_y = [], []\n    for _ in range(N):\n        x, y, h = map(int, stdin[1 + _].split())\n        c_x.append(x)\n        c_y.append(y)\n    min_x, max_x = min(c_x), max(c_x)\n    min_y, max_y = min(c_y), max(c_y)\n\n    center_x, center_y = min_x + (max_x - min_x) // 2, min_y + (max_y - min_y) // 2\n    h = max(map(lambda x: max(h - abs(center_x - x[0]) - abs(center_y - x[1]), 0), list(zip(c_x, c_y))))\n\n    return f'{center_x} {center_y} {h}'"
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # [Input]\n    # 1 <= N <= 100\n    # (0 <= x_i <= 100, 0 <= y_i <= 100, 0 <= h_i <= 100)\n    # (x_i!= x_j, y_i!= y_j, h_i!= h_j)\n    # (N is an integer between 1 and 100 (inclusive), x_i, y_i, h_i are integers between 0 and 100 (inclusive), and the N coordinates (x_1, y_1), (x_2, y_2), (x_3, y_3),..., (x_N, y_N) are all different. The center coordinates and the height of the pyramid can be uniquely identified)\n    # [Output]\n    # Center coordinates and the height of the pyramid in one line, with spaces in between\n    # (C_X, C_Y, H)\n    # Examples\n    # 1\n    # 5 6 3\n    # 1 1 3\n    # 1 2 3\n    # 3 2 3\n    # 3 3 3\n    # => (5, 1, 6)\n    N = int(stdin.readline().rstrip())\n    points = list(map(int, stdin.readline().rstrip().split(' ')))\n    points_with_h = list(zip(points[::2], points[1::2]))\n    min_h = min([abs(p1 - p2) for p1, p2 in points_with_h])\n    print(points[::2][points[::2].index(min_h)], points[1::2][points[::2].index(min_h)], min_h)\n\n\nsolution(sys.stdin.read())\n"
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    line_no = 0\n    n = int(stdin.readline())\n    for _ in range(n):\n        x, y, h = map(int, stdin.readline().split())\n        line_no += 1\n    return str(x) +'' + str(y) +'' + str(h)\n\n\nprint(solution(sys.stdin.read()))\n"
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, *coords = map(int, stdin.split())\n    # \u6e96\u5099\n    x, y = zip(*coords)\n    H = max(max(y) - min(y), 0) + max(max(x) - min(x), 0)\n    # \u8a08\u7b97\n    C_X = sum(x) / N\n    C_Y = sum(y) / N\n    return (str(C_X) + \" \" + str(C_Y) + \" \" + str(H))"
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    x = [int(c) for c in stdin.readline().split()]\n    y = [int(c) for c in stdin.readline().split()]\n    h = [int(c) for c in stdin.readline().split()]\n    points = list(zip(x, y, h))\n    points.sort(key=lambda point: point[2], reverse=True)\n    C_X, C_Y, H = points[0]\n    for x, y, h in points[1:]:\n        C_X, C_Y, H = (C_X+x, C_Y+y, max(H, h))\n    return f'{C_X} {C_Y} {H}'\n"
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    print(stdin)\n    return 1"
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"redcoder\")\n    1\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    count = 0\n    while not stdin.__contains__(\"o\"):\n        count += 1\n        stdin = stdin.replace(\"r\", \"o\")\n    return count\n\"\"\"\n\ndef"
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    result = []\n    for i in stdin:\n        if i == i[::-1]:\n            result.append(i)\n    return len(stdin)-len(result)\n\ndef"
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    ans = []\n    for char in stdin:\n        if len(ans) < 1:\n            ans.append(char)\n            continue\n        if char == ans[-1]:\n            ans.pop()\n        else:\n            ans.append(char)\n    return len(ans)\n"
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    number = int(stdin)\n    for i in range(1, 10):\n        for j in range(1, 10):\n            if number == i * j:\n                return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.strip()\n    return 'Yes' if 1 <= int(n) <= 9 and 10 % int(n) == 0 else 'No'\n\nprint(solution(input()))"
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    import sys\n    sys.stdin = open(\"sample/2_Print_Yes_or_No.in\")\n    #\n    # Write your code here.\n    #\n    N = int(stdin)\n    if N >= 1 and N <= 9:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n    return \"\""
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    ans = \"No\"\n    if N < 10:\n        ans = \"Yes\"\n    elif (N // 9) * 9 == N:\n        ans = \"Yes\"\n    return ans\nprint(solution(input()))\n\n'''\n\ndef"
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin.strip())\n    if num < 1 or num > 9:\n        return \"No\"\n    if num == 1:\n        return \"Yes\"\n    if num == 2 or num == 3:\n        return \"Yes\"\n    if num == 4 or num == 5:\n        return \"Yes\"\n    if num == 6 or num == 7:\n        return \"Yes\"\n    if num == 8:\n        return \"Yes\"\n    if num == 9:\n        return \"Yes\"\n    \n    return \"Yes\" if num % 2 == 0 else \"No\"\n"
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    if int(stdin) >= 1 and int(stdin) <= 9:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    for a in range(1, 10):\n        for b in range(1, 10):\n            if a*b==N:\n                print('Yes')\n                return\n    print('No')\n    return"
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    print(\"Yes\") if n % 2 == 0 else print(\"No\")\n    return \"\"\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        print(\"Yes\")\n    elif n < 9:\n        print(\"No\")\n    else:\n        print(\"Yes\") if (n % 3 == 0 and n % 2 == 0) or (n % 3 == 1 and n % 2 == 1) or (n % 3 == 2 and n % 2 == 0) or (n % 3 == 0 and n % 2 == 1) else print(\"No\")\n\nsolution()\n"
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return \"Yes\" if can_be_product else \"No\"\n"
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    pass"
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the number of ways to choose three of the sticks with different lengths that can form a triangle.\"\"\"\n    n = int(stdin)\n    arr = list(map(int, stdin.split(' ')))\n    arr = [0] + arr\n    arr = list(set(arr))\n    arr.sort()\n    arr.remove(0)\n    # print(arr)\n\n    def findP(m, n):\n        return int((m + 1) * (n + 1) / 2)\n    p = [findP(a, b) for a in arr for b in arr if a < b]\n    # print(p)\n\n    return str(sum(p))\n"
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \n    # Insert your code here\n    return \"Hello, world!\"\n"
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Given:\n    - An integer N.\n    - A set of N positive integers, each separated by a space.\n\n    Return:\n    - The number of ways to choose three of the integers (i, j, k)\n    (1 < i < j < k < N) that satisfy both of the following conditions:\n    - L_i, L_j, and L_k are all different.\n    - There exists a triangle whose sides have lengths L_i, L_j, and L_k.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\".join(stdin.split())\n"
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5\n   ... 4 4 9 7 5\n   ... ''')\n    '5'\n    \"\"\"\n   ...\n"
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('''5\n   ... 4 4 9 7 5''')\n    5\n    >>> solution('''4\n   ... 4 4 9 7 5''')\n    1\n    >>> solution('''4\n   ... 4 9 7 5''')\n    0\n    '''\n    def dfs(lst, i, j, k, x, y, z):\n        if i >= len(lst) or j >= len(lst) or k >= len(lst):\n            return\n        if i == x and j == y and k == z:\n            return True\n        if i == x or j == y or k == z:\n            return False\n        if i < x:\n            if lst[i] >= lst[j] and lst[j] >= lst[k]:\n                if dfs(lst, i+1, j, k, x, y, z):\n                    return True\n        elif i == x and j < y:\n            if lst[i] >= lst[j] and lst[j] >= lst[k]:\n                if dfs(lst, i, j+1, k, x, y, z):\n                    return True\n        elif i == x and j == y and k < z:\n            if lst[i] >= lst[j] and lst[j] >= lst[k]:\n                if dfs(lst, i, j, k+1, x, y, z):\n                    return True\n        elif j < y:\n            if lst[i] >= lst[j] and lst[j] >= lst[k]:\n                if dfs(lst, i, j+1, k, x, y, z):\n                    return True\n        elif j == y and i < x:\n            if lst[i] >= lst[j] and lst[j] >= lst[k]:\n                if dfs(lst, i, j, k+1, x, y, z):\n                    return True\n        elif j == y and i == x and k < z:\n            if lst[i] >= lst[j] and lst[j] >= lst[k]:\n                if dfs(lst, i, j, k+1, x, y, z):\n                    return True\n        elif k < z:\n            if lst[i] >= lst[j] and lst[j] >= lst[k]:\n                if dfs(lst, i, j, k+1, x, y, z):\n                    return True\n        return False\n    lst = list(map(int, stdin.split()))\n    return str(dfs(lst, 0, 1, 2, 3, 4, 5))\n"
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \n    # your solution goes here\n    return \"\"\n"
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return ''.join(stdin.split())\n"
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    l = [int(x) for x in stdin.readline().strip().split()]\n    nums = [0] * (n + 1)\n    for i in range(n):\n        nums[i + 1] = nums[i] + l[i]\n    result = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n + 1):\n                if nums[i] == nums[k] - nums[j] and nums[j] == nums[k] - nums[i]:\n                    result += 1\n    return str(result)\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(x) for x in stdin.split()]\n    if a * b > 10:\n        return -1\n    return str(a * b)\n\"\"\""
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    for i in range(1, 10):\n        for j in range(1, 10):\n            if i * j == A * B:\n                return str(i * j)\n    return '-1'"
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split('\\n')[0].split())\n    if A * B % 10 == 0:\n        return str(A * B)\n    else:\n        return str(-1)\n"
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if 1 <= A <= 9 and 1 <= B <= 9:\n        return str(A * B)\n    return '-1'"
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B = stdin.split()\n    A = int(A)\n    B = int(B)\n    if (A > 9) or (B > 9):\n        return \"-1\"\n    elif A < 1:\n        return \"-1\"\n    elif B < 1:\n        return \"-1\"\n    elif (A == 1) and (B == 1):\n        return \"1\"\n    elif (A == 1) and (B > 1):\n        return str(B)\n    elif (A > 1) and (B == 1):\n        return str(A)\n    elif (A > 1) and (B > 1):\n        return str(A * B)\n    elif (A == 1) and (B == 5):\n        return \"1\"\n    elif (A == 1) and (B == 2):\n        return \"2\"\n    elif (A == 1) and (B == 3):\n        return \"3\"\n    elif (A == 1) and (B == 4):\n        return \"4\"\n    elif (A == 1) and (B == 6):\n        return \"6\"\n    elif (A == 1) and (B == 7):\n        return \"7\"\n    elif (A == 1) and (B == 8):\n        return \"8\"\n    elif (A == 1) and (B == 9):\n        return \"9\"\n    elif (A == 1) and (B == 10):\n        return \"10\"\n    elif (A == 2) and (B == 5):\n        return \"2\"\n    elif (A == 2) and (B == 6):\n        return \"6\"\n    elif (A == 2) and (B == 7):\n        return \"8\"\n    elif (A == 2) and (B == 8):\n        return \"10\"\n    elif (A == 2) and (B == 9):\n        return \"12\"\n    elif (A == 2) and (B == 10):\n        return \"14\"\n    elif (A == 2) and (B == 11):\n        return \"16\"\n    elif (A == 2) and (B == 12):\n        return \"18\"\n    elif (A == 2) and (B == 13):\n        return \"20\"\n    elif (A == 2) and (B == 14):\n        return \"22\"\n    elif (A == 2) and (B == 15):\n        return \"24\"\n    elif (A == 2) and (B == 16):\n        return \"26\"\n    elif (A == 2) and (B == 17):\n        return \"28\"\n    elif (A == 2) and (B == 18):\n        return \"30\"\n    elif (A == 2) and (B == 19):\n        return \"32\"\n    elif (A == 2) and (B == 20):\n        return \"34\"\n    elif (A == 2) and (B == 21):\n        return \"36\"\n    elif (A == 2) and (B == 22):\n        return \"38\"\n    elif (A == 2) and (B == 23):\n        return \"40\"\n    elif (A == 2) and (B == 24):\n        return \"42\"\n    elif (A == 2) and (B == 25):\n        return \"44\"\n    elif (A == 2) and (B == 26):\n        return \"46\"\n    elif (A == 2) and (B == 27):\n        return \"48\"\n    elif (A == 2) and (B == 28):\n        return \"50\"\n    elif (A == 2) and (B == 29):\n        return \"52\"\n    elif (A == 2) and (B == 30):\n        return \"54\"\n    elif (A == 2) and (B == 31):\n        return \"56\"\n    elif (A == 2) and (B == 32):\n        return \"58\"\n    elif (A == 2) and (B == 33):\n        return \"60\"\n    elif (A == 2) and (B == 34):\n        return \"62\"\n    elif (A == 2) and (B == 35):\n        return \"64\"\n    elif (A == 2) and (B == 36):\n        return \"66\"\n    elif (A == 2) and (B == 37):\n        return \"68\"\n    elif (A == 2) and (B == 38):\n        return \"70\"\n    elif (A == 2) and (B == 39):\n        return \"72\"\n    elif (A == 2) and (B == 40):\n        return \"74\"\n    elif (A == 2) and (B == 41):\n        return \"76\"\n    elif (A == 2) and (B == 42):\n        return \"78\"\n    elif (A == 2) and (B == 43):\n        return \"80\"\n    elif (A == 2) and (B == 44):\n        return \"82\"\n    elif (A == 2) and (B == 45):\n        return \"84\"\n    elif (A == 2) and (B == 46):\n        return \"86\"\n    elif (A == 2) and (B == 47):\n        return \"88\"\n    elif (A == 2) and (B == 48):\n        return \"90\"\n    elif (A == 2) and (B == 49):\n        return \"92\"\n    elif (A == 2) and (B == 50):\n        return \"94\"\n    elif (A == 2) and (B == 51):\n        return \"96\"\n    elif (A == 2) and (B == 52):\n        return \"98\"\n    elif (A == 2) and (B == 53):\n        return \"100\"\n    elif (A == 2) and (B == 54):\n        return \"102\"\n    elif (A == 2) and (B == 55):\n        return \"104\"\n    elif (A == 2) and (B == 56):\n        return \"106\"\n    elif (A == 2) and (B == 57):\n        return \"108\"\n    elif (A == 2) and (B == 58):\n        return \"110\"\n    elif (A == 2) and (B == 59):\n        return \"112\"\n    elif (A == 2) and (B == 60):\n        return \"114\"\n    elif (A == 2) and (B == 61):\n        return \"116\"\n    elif (A == 2) and (B == 62):\n        return \"118\"\n    elif (A == 2) and (B == 63):\n        return \"120\"\n    elif (A == 2) and (B == 64):\n        return \"122\"\n    elif (A == 2) and (B == 65):\n        return \"124\"\n    elif (A == 2) and (B == 66):\n        return \"126\"\n    elif (A == 2) and (B == 67):\n        return \"128\"\n    elif (A == 2) and (B == 68):\n        return \"130\"\n    elif (A == 2) and (B == 69):\n        return \"132\"\n    elif (A == 2) and (B == 70):\n        return \"134\"\n    elif (A == 2) and (B == 71):\n        return \"136\"\n    elif (A == 2) and (B == 72):\n        return \"138\"\n    elif (A == 2) and (B == 73):\n        return \"140\"\n    elif (A == 2) and (B == 74):\n        return \"142\"\n    elif (A == 2) and (B == 75):\n        return \"144\"\n    elif (A == 2) and (B == 76):"
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin.readline().strip())\n    b = int(stdin.readline().strip())\n    if a * b % 10 == 0:\n        return stdin.readline().strip()\n    else:\n        return -1\n"
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a == 1 and b == 1:\n        return \"1\"\n    if a == 1 and b == 0:\n        return \"-1\"\n    if a == 0 and b == 1:\n        return \"-1\"\n    if a == 0 and b == 0:\n        return \"0\"\n    return str(a * b)\n"
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a <= 0 or b <= 0 or a > 9 or b > 9:\n        return -1\n    else:\n        return a * b\n"
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split()\n    a = [int(i) for i in a]\n    if a[1] * a[0] % a[0] == 0:\n        return str(a[1] * a[0])\n    else:\n        return \"-1\"\n"
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split(\" \"))\n    if B > 9:\n        return -1\n    for i in range(1, 10):\n        if A * i > 9:\n            break\n        elif A * i == B:\n            return A * i\n    return -1\n"
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # time complexity: O(n)\n    # space complexity: O(n)\n    n, m = [int(num) for num in stdin.split()]\n    min_moves = float('inf')\n    for num in [int(num) for num in stdin.split()[1:]]:\n        if num > m:\n            num = m\n        elif num < 1:\n            num = 1\n        min_moves = min(min_moves, abs(num - m) + abs(num - m + 1))\n    return min_moves\n"
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''Solution for Day 1, 2020.'''\n    # Read input.\n    N, M = map(int, stdin.split('\\n')[:2])\n    coordinates = list(map(int, stdin.split('\\n')[2:]))\n\n    # Add and visit the final coordinate (which will be the Mth coordinate).\n    coordinates.append(M)\n    visited = [False for _ in range(N+1)]\n\n    # Get the distance to each coordinate.\n    distance = [0 for _ in range(N+1)]\n    for i in range(1, N+1):\n        distance[i] = abs(i-coordinates[i-1])\n\n    # Start the search.\n    visited[1] = True\n    distance[1] = 0\n\n    while not all(visited):\n        # Find the next coordinate to visit.\n        x = coordinates[distance.index(min(distance))]\n        # Mark as visited.\n        visited[distance.index(min(distance))] = True\n\n        # Increase the distance to the next coordinate.\n        distance[distance.index(min(distance))] += 1\n\n        # Move the piece.\n        if x+1 <= N:\n            distance[x+1] = distance[x] + 1\n        elif x-1 >= 1:\n            distance[x-1] = distance[x] + 1\n\n    return sum(distance)\n"
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Problem Statement: https://www.hackerrank.com/challenges/magical-strings\n    Given a string s, check if the substring of the string is magical.\n    A substring of a string is obtained by deleting zero or more characters from the string.\n    A substring of a string is magical if it is possible to remove zero or more characters from the substring and create a new string that is equal to the original string.\n\n    Parameters\n    ----------\n    stdin : str\n        String to be evaluated\n\n    Returns\n    -------\n    str\n        String to be evaluated\n\n    \"\"\"\n    # Variables\n    line = stdin.split(\"\\n\")\n    string = line[0]\n    n = int(line[1])\n    m = int(line[2])\n    # magic_strings = []\n    magic_string = []\n\n    # Process\n    for i in range(n - m + 1):\n        magic_string.append(string[i:i+m])\n\n    # Validate\n    # [print(x) for x in magic_strings]\n\n    # return\n    return str(len(list(set(magic_string))))\n"
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(\" \"))\n    arr = map(int, stdin.split(\" \"))\n    arr.sort()\n    c = 0\n    for i in range(m):\n        c += abs(arr[i] - i)\n    return c\n"
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # set up list\n    # each entry is a tuple of (coordinate, num of pieces)\n    # num of pieces == 1\n    pieces = []\n    N, M = [int(num) for num in stdin.split(' ')]\n    for _ in range(N):\n        x = int(stdin)\n        pieces.append((x, 1))\n\n    # count number of ways to get to each point\n    # if coordinate 0, then add num of ways to get to coordinate 1\n    # if coordinate n-1, then add num of ways to get to coordinate n-2\n    # for all other coordinates, add num of ways to get to coordinate n-1\n    # using a single piece of a piece\n    ways_to_coords = [0] * N\n    for i in range(N):\n        if i == 0:\n            ways_to_coords[i] = pieces[0][1]\n        else:\n            ways_to_coords[i] = ways_to_coords[i-1]\n            if i > 0:\n                if pieces[i][0] == pieces[i-1][0]:\n                    if i-1 == 0:\n                        ways_to_coords[i] += pieces[i][1]\n                    else:\n                        ways_to_coords[i] += pieces[i][1] * ways_to_coords[i-2]\n                elif pieces[i][0] == pieces[i-1][0]+1:\n                    if i-1 == 0:\n                        ways_to_coords[i] += pieces[i][1]\n                    else:\n                        ways_to_coords[i] += ways_to_coords[i-2]\n                        ways_to_coords[i] += pieces[i][1]\n\n    # sum up num of ways for each point\n    return sum(ways_to_coords)"
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    _, N, M = [int(s) for s in stdin.split(\" \")]\n    coords = [int(s) for s in stdin.split(\" \")]\n\n    pass\n"
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    n, m = stdin.split('\\n')[:2]\n    n, m = int(n), int(m)\n    for i in range(m):\n        x = stdin.split('\\n')[i + 2].split(' ')\n        x = [int(i) for i in x]\n    return 1\n"
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('''\n   ... 2 5\n   ... 10 12 1 2 14\n   ... ''')\n    '5'\n    '''\n    ---SOLUTION---\n    We can think of this problem as a graph problem. We can represent the graph by a map (hashmap)\n    where the key is a node and the value is the set of nodes that are adjacent to it. In order\n    to find the minimum moves, we must start at the node with the least number of adjacent nodes.\n    The following code solves the problem by maintaining a map of the graph, and a visited set.\n    The algorithm then works as follows. We repeatedly take the node with the least number of\n    adjacent nodes and add it to our path. We do this until we have added all of the nodes that\n    need to be visited.\n    '''\n    n, m = map(int, stdin.split(' '))\n    graph = {}\n    for i in range(n):\n        line = [int(n) for n in stdin.split(' ')]\n        graph[line[0]] = set(line[1:])\n\n    visited = set()\n    def dfs(node):\n        # This is our base case - if the node has already been visited, we're done\n        if node in visited:\n            return 0\n        # Otherwise, we'll add the node to our visited set and take the sum of\n        # the distances of all of our neighbors\n        visited.add(node)\n        distance = 0\n        for neighbor in graph[node]:\n            distance += dfs(neighbor)\n        # We'll return the sum of all of the distances from the current node\n        return distance\n    # We'll keep track of the node with the smallest number of adjacent nodes\n    min_node = min(graph, key=lambda x: len(graph[x]))\n    while len(visited) < m:\n        # We'll add the current node to our path\n        path.append(min_node)\n        # Now we'll visit all of the neighbors of this node and find the one with\n        # the smallest distance\n        min_node = min(graph[min_node], key=lambda x: dfs(x))\n    # Finally, we'll add the last node to the path\n    path.append(min_node)\n    return str(len(path) - 1)\n"
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    A game with N pieces (numbered 1 through N) on a number line. We draw the number of\n    pieces at a time from a hat. What is the minimum number of moves we must make\n    to obtain the maximum number of pieces?\n    '''\n\n    # Get the input\n    n, m = map(int, stdin.split())\n\n    # Initialize result\n    result = 0\n\n    # Compute result\n    for i in range(n):\n        result += m + (i - m)\n\n    return str(result)\n"
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    edges = []\n    for _ in range(m):\n        edges.append(tuple(map(int, stdin.split())))\n    dp = [[0] * (k + 1) for _ in range(n)]\n    dp[0][1] = 1\n    for i in range(m):\n        a, b = edges[i]\n        dp[a - 1][1] += dp[b - 1][0]\n        dp[b - 1][1] += dp[a - 1][0]\n        dp[a - 1][0] = dp[a - 1][1]\n        dp[b - 1][0] = dp[b - 1][1]\n        dp[a - 1][1] %= 10 ** 9 + 7\n        dp[b - 1][1] %= 10 ** 9 + 7\n    for i in range(n):\n        dp[i][0] = sum(dp[i]) % (10 ** 9 + 7)\n    print(dp[0][0] % (10 ** 9 + 7))\n    return ''\n\n\ndef"
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split('\\n')[0].split(' '))\n    roads = []\n    for _ in range(m):\n        roads.append(tuple(map(int, stdin.split('\\n')[_].split(' '))))\n\n    print(roads)\n    answers = [str(bin(i))[2:].rjust(m, '0') for i in range(2 ** m)]\n    print(answers)\n    return"
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \n    '''\n    for first input\n    return 1\n    \n    for second input\n    return 111100\n    \n    for third input\n    return 101110\n    \n    for fourth input\n    return 101010\n    \n    for fifth input\n    return 111101\n    \n    for sixth input\n    return 111110\n    '''\n    return 0\n"
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split('\\n')[0].split(' '))\n    roads = [[int(c) for c in stdin.split('\\n')[i].split(' ')] for i in range(1, m + 1)]\n    adj = [[] for _ in range(n + 1)]\n    for start, end in roads:\n        adj[start].append(end)\n        adj[end].append(start)\n    connectivity = [1] + [0] * n\n    for i in range(1, n + 1):\n        for j in adj[i]:\n            connectivity[j] += connectivity[i]\n    ways = [0] * k\n    for i in range(k):\n        ways[i] = [1] + [0] * n\n        for j in range(1, n + 1):\n            for k in adj[j]:\n                ways[i][k] += ways[i][j]\n    # print(ways)\n    for i in range(k):\n        for j in range(1, n + 1):\n            ways[i][j] %= 10 ** 6\n    # print(ways)\n    for i in range(k):\n        print(''.join(str(ways[i][j]) for j in range(1, n + 1)))\n"
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    _, m, k = map(int, stdin.split())\n    roads = [tuple(map(int, line.split())) for line in stdin.splitlines()[1:]]\n    if len(roads) < m * k:\n        return \" \".join(str(i + 1) for i in range(m * k))\n\n    dp = [[[]] * (1 << m) for _ in range(m)]\n    dp[0][0] = roads\n    # dp[j][i] = all ways to choose roads that have been used so far\n    for j in range(1, m):\n        # choose j roads\n        # dp[j][i] = [..., roads1, roads2,...]\n        # roads1 = [..., roads0,...], roads0 = [..., roads0,...]\n        # roads0 = [..., roads0,...],... = []\n        # roads0 = [..., roads0,...]\n        dp[j][0] = [path for path in dp[j - 1][0] if path[0] == 1]\n        dp[j][0].extend([path for path in dp[j - 1][0] if path[0] == 0])\n        # dp[j][1] = [..., roads0,...]\n        # roads0 = [..., roads1,...], roads1 = [..., roads1,...]\n        # roads1 = [..., roads1,...],... = []\n        # roads1 = [..., roads1,...]\n        dp[j][1] = [path for path in dp[j - 1][1] if path[0] == 0]\n        dp[j][1].extend([path for path in dp[j - 1][1] if path[0] == 1])\n        # dp[j][2] = [..., roads0,...]\n        # roads0 = [..., roads1,...], roads1 = [..., roads2,...]\n        # roads2 = [..., roads2,...],... = []\n        # roads2 = [..., roads2,...]\n        dp[j][2] = [path for path in dp[j - 1][2] if path[0] == 0]\n        dp[j][2].extend([path for path in dp[j - 1][2] if path[0] == 1])\n    # dp[j][k] = [..., roads0,...]\n    # roads0 = [..., roads1,...], roads1 = [..., roads2,...]\n    # roads2 = [..., roads3,...],... = []\n    # roads3 = [..., roads3,...]\n    dp[-1][k] = [path for path in dp[-2][k] if path[0] == 0]\n    dp[-1][k].extend([path for path in dp[-2][k] if path[0] == 1])\n    # dp[0][k] = [..., roads0,...]\n    # roads0 = [..., roads1,...], roads1 = [..., roads2,...]\n    # roads2 = [..., roads3,...],... = []\n    # roads3 = [..., roads3,...]\n    dp[0][k] = [path for path in dp[1][k] if path[0] == 0]\n    dp[0][k].extend([path for path in dp[1][k] if path[0] == 1])\n    # dp[1][k] = [..., roads1,...]\n    # roads1 = [..., roads2,...], roads2 = [..., roads3,...]\n    # roads3 = [..., roads3,...],... = []\n    # roads3 = [..., roads3,...]\n    dp[1][k] = [path for path in dp[0][k] if path[0] == 0]\n    dp[1][k].extend([path for path in dp[0][k] if path[0] == 1])\n    # dp[2][k] = [..., roads2,...]\n    # roads2 = [..., roads3,...], roads3 = [..., roads3,...]\n    # roads3 = [..., roads3,...],... = []\n    # roads3 = [..., roads3,...]\n    dp[2][k] = [path for path in dp[1][k] if path[0] == 0]\n    dp[2][k].extend([path for path in dp[1][k] if path[0] == 1])\n    # dp[3][k] = [..., roads3,...]\n    "
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(x) for x in stdin.split()]\n    roads = [[int(x) for x in stdin.split()] for _ in range(m)]\n    paths = [None] * k\n    for i in range(k):\n        paths[i] = [0] * m\n    def dfs(i, k):\n        if i == k:\n            if roads[0][1] == 1:\n                return 0\n            return float(\"inf\")\n        if paths[k][i]:\n            return paths[k][i]\n        paths[k][i] = float(\"inf\")\n        for j in range(m):\n            if j == i:\n                continue\n            if roads[j][0] == i+1 or roads[j][1] == i+1:\n                paths[k][i] = min(paths[k][i], dfs(j, k+1))\n        return paths[k][i]\n    return str(dfs(0, 0))\n"
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    n, m, k = int(lines[0].split(\" \")[0]), int(lines[0].split(\" \")[1]), int(lines[0].split(\" \")[2])\n    roads = []\n    for line in lines[1:]:\n        roads.append(list(map(int, line.split(\" \"))))\n\n    solutions = []\n\n    def solve(roads, roads_num, chosen, visited):\n        nonlocal n, m, k\n        if roads_num == 0:\n            if len(set(chosen)) == m and len(set(chosen)) == len(set(visited)):\n                solutions.append(chosen)\n            return\n        \n        for i in range(1, n):\n            if roads[i][0] not in visited and roads[i][1] not in visited:\n                solve(roads, roads_num - 1, chosen + [roads[i][0]], visited + [roads[i][0]])\n                solve(roads, roads_num - 1, chosen + [roads[i][1]], visited + [roads[i][1]])\n\n    solve(roads, m, [], [])\n\n    ans = set()\n\n    for solution in solutions:\n        solution.sort()\n        if tuple(solution) in ans:\n            continue\n        ans.add(tuple(solution))\n\n    return '\\n'.join([''.join(['1' if i in sol else '0' for i in range(1, n+1)]) for sol in ans])\n"
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n\n    roads = [[] for _ in range(n)]\n    for _ in range(m):\n        a, b = map(int, stdin.split())\n        a, b = a - 1, b - 1\n        roads[a].append(b)\n        roads[b].append(a)\n\n    result = []\n\n    for i in range(k):\n        dp = [[False for _ in range(n)] for _ in range(n)]\n        dp[0][0] = True\n        ways = [[0] * n]\n        cur_sum = 0\n        count = 1\n        while count < n and cur_sum < n - 1:\n            ways.append([0] * n)\n            cur_sum += 1\n            for j in range(n):\n                for u in roads[j]:\n                    if not dp[j][u]:\n                        dp[j][u] = True\n                        ways[count][j] = 1\n                        count += 1\n                        if count == n:\n                            break\n        if count < n:\n            break\n        result.append(ways)\n\n    ways = result[0]\n    for i in range(1, len(result)):\n        for j in range(n):\n            for u in roads[j]:\n                if ways[0][j] == 1 and result[i][j][u] == 1:\n                    ways[j][u] = 1\n\n    def print_ways(ways, n):\n        for i in range(n):\n            for j in range(n):\n                if ways[i][j] == 1:\n                    print('1', end='')\n                else:\n                    print('0', end='')\n            print()\n\n    for i in range(k):\n        print_ways(ways[i], n)\n\n    return ''"
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split(' '))\n    roads = [[] for _ in range(n)]\n    for _ in range(m):\n        a, b = map(int, stdin.split(' '))\n        roads[a - 1].append(b - 1)\n        roads[b - 1].append(a - 1)\n    for _ in range(k):\n        print(roads)\n        print(stdin.split('\\n')[0])\n        print(''.join([stdin.split('\\n')[1][0]] * m))\n        print(stdin.split('\\n')[1])\n        print(''.join(['0'] * m))\n    return ''\n"
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # My solution\n    input_list = [int(x) for x in stdin.split(\"\\n\")[0].split()]\n    wall = [input_list[0]]\n    \n    for i in range(1, len(input_list)):\n        if wall[-1] > input_list[i]:\n            wall.append(input_list[i])\n        else:\n            wall[bisect.bisect_left(wall, input_list[i])] = input_list[i]\n            \n    return \"YES\" if wall[-1] == wall[-2] else \"NO\"\n    \n    # Other solution\n    input_list = [int(x) for x in stdin.split(\"\\n\")[0].split()]\n    wall = input_list[1:]\n    for i in range(1, len(wall)):\n        if wall[i]!= wall[i-1]:\n            if wall[i] > wall[i-1] + 2:\n                return \"NO\"\n            wall[i] += 2\n    return \"YES\"\n    \n    \n    # Other solution\n    input_list = [int(x) for x in stdin.split(\"\\n\")[0].split()]\n    wall = input_list[1:]\n    ans = \"NO\"\n    for i in range(1, len(wall)):\n        if wall[i]!= wall[i-1]:\n            wall[i] += 2\n            if wall[i] > wall[i-1] + 2:\n                ans = \"NO\"\n    return ans\n    \n    # other solution\n    return \"YES\" if wall[-1] == wall[-2] else \"NO\"\n"
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = [int(i) for i in stdin.split(\"\\n\")[0].split(\" \")]\n    arr_2 = []\n    for i in range(len(arr)):\n        arr_2.append([0 for _ in range(i + 1)])\n        for j in range(i + 1):\n            arr_2[i][j] = arr[i]\n    count = 1\n    for i in range(1, len(arr_2)):\n        for j in range(0, len(arr_2[i]) - 1):\n            if arr_2[i][j] == arr_2[i][j + 1]:\n                count += 1\n            elif arr_2[i][j] == arr_2[i][j + 1] - 1:\n                if count == 2:\n                    arr_2[i][j] += 2\n                    count = 1\n                else:\n                    count = 1\n            else:\n                count = 1\n    for i in range(len(arr_2)):\n        if any(arr_2[i]!= arr_2[j] for j in range(len(arr_2))):\n            return \"NO\"\n    return \"YES\"\n\n\ndef"
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    wall = list(map(int, lines[1].split(' ')))\n    \n    \n    \"\"\"\n    for i in range(1, n-1):\n        if wall[i]!= wall[i+1]:\n            continue\n        \n        diff = wall[i] - wall[i-1]\n        for j in range(i+1, n):\n            if wall[j] - wall[j-1] == diff:\n                wall[j] += 1\n    \"\"\"\n    \n    \n    for i in range(1, n-1):\n        if wall[i] - wall[i-1] == wall[i+1] - wall[i]:\n            continue\n        \n        return 'NO'\n    \n    return 'YES'\n"
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution to the problem.\n    \"\"\"\n    lines = stdin.split(\"\\n\")\n    parts_amount = int(lines[0])\n    heights = list(map(int, lines[1].split(\" \")))\n    for i in range(parts_amount):\n        prev = heights[i]\n        for j in range(i + 1, parts_amount):\n            if prev >= heights[j]:\n                return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5\n   ... 2 1 1 2 5\n   ... ''')\n    'YES'\n    >>> solution('''3\n   ... 4 5 3\n   ... ''')\n    'YES'\n    >>> solution('''2\n   ... 10 10\n   ... ''')\n    'YES'\n    >>> solution('''3\n   ... 1 2 3\n   ... ''')\n    'NO'\n    \"\"\"\n    wall = [int(line) for line in stdin.splitlines()[1:]]\n    if len(wall) == 1:\n        return 'YES' if wall[0] == 1 else 'NO'\n    bricks_put = 0\n    max_h = max(wall)\n    for height in range(1, max_h + 1):\n        if sum(wall[:height] + wall[height + 1:]) == height * len(wall) - height:\n            bricks_put += 1\n        elif sum(wall[:height] + wall[height + 1:]) == height * len(wall) + 1:\n            bricks_put += 1\n    return 'YES' if bricks_put > 0 else 'NO'\n"
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if solution1(stdin) else \"NO\"\n\n\ndef"
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    H, N = [int(n) for n in stdin.split()]\n    d = [int(n) for n in stdin.split()[1:]]\n    N = len(d)\n    i = 0\n    while d[i]!= 0:\n        d[i] *= -1\n        i = (i + 1) % N\n    n = sum(d)\n    while H > 0 and n > 0:\n        H += n\n        n = 0\n        for j in range(N):\n            n += d[j]\n            d[j] *= -1\n            if d[j] < 0:\n                d[j] += 1\n            if d[j] == 0:\n                d[j] = 0\n                i = j\n                break\n        if d[i] == 0:\n            n = sum(d)\n            if H < n:\n                return str(i + 1)\n            else:\n                return \"-1\"\n    return str(i + 1)\n\ndef"
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    H, n = [int(x) for x in stdin.split()]\n    hp = [int(x) for x in stdin.split()]\n\n    def find_next_turn(index, h_prev, hp_prev):\n        h_curr = h_prev - hp_prev[index]\n        if h_curr <= 0:\n            return index + 1\n        else:\n            return index + 1 + n\n\n    def battle_continues(h_prev, hp_prev):\n        return any(h_prev < 0 for h_prev in hp_prev)\n\n    current_turn = 1\n    while True:\n        if not battle_continues(H, hp):\n            return current_turn\n        if current_turn > n * H:\n            return -1\n        current_turn = find_next_turn(current_turn, H, hp)\n"
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    H, n = list(map(int, stdin.split(' ')))\n    d = list(map(int, stdin.split(' ')))\n    k = 0\n    for i in range(1, n + 1):\n        d[i - 1] += d[i - 1]\n        if d[i - 1] <= 0:\n            k = i\n            break\n    return str(k)\n    \n"
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    hp = int(stdin[0])\n    d = [int(i) for i in stdin[1].split()]\n    n = len(d)\n    \n    hp_tbl = [0] * (n + 1)\n    hp_tbl[0] = hp\n    cur_hp = hp\n    min_rounds = 0\n    for i in range(n):\n        cur_hp += d[i]\n        if cur_hp < 0:\n            cur_hp = 0\n            min_rounds = i + 1\n            break\n        hp_tbl[i + 1] = cur_hp\n        \n    if min_rounds == 0:\n        return -1\n        \n    if hp_tbl[-1] <= 0:\n        return min_rounds\n        \n    for i in range(n):\n        if hp_tbl[i] <= 0:\n            min_rounds = i + 1\n            break\n    return -1\n\n    \n"
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # stdin = \"1000 6\\n-100 -200 -300 125 77 -4\"\n    # stdin = \"10 4\\n-1 0 0 0 0\"\n\n    H, N = map(int, stdin.split())\n    d = list(map(int, stdin.split()[1:]))\n    # print(H, N, d)\n    count = 0\n    while H > 0 and count < 1000000:\n        count += 1\n        for i in range(N):\n            H += d[i]\n            if H <= 0:\n                return str(count)\n    return -1\n"
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    #Your code here\n    # return ''.join(solution(stdin.split()))\n    hp = int(stdin[0])\n    n = int(stdin[1])\n    attacks = list(map(int, stdin[2].split(' ')))\n    print(hp, n, attacks)\n    if len(attacks) < n:\n        return '-1'\n    round = 1\n    while True:\n        hp += sum(attacks)\n        if hp <= 0:\n            return str(round)\n        round += 1\n"
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    def is_equal(hp, d):\n        new_hp = hp + d\n        if new_hp <= 0:\n            return False\n        else:\n            return True\n\n    def is_greater(hp, d):\n        new_hp = hp + d\n        if new_hp > 0:\n            return True\n        else:\n            return False\n\n    hp = int(stdin[0])\n    d = list(map(int, stdin[1].split()))\n\n    time = 0\n    while True:\n        for i in range(len(d)):\n            if is_equal(hp, d[i]):\n                hp = 0\n                time += 1\n                break\n            elif is_greater(hp, d[i]):\n                hp = hp + d[i]\n                time += 1\n                break\n        if hp == 0:\n            break\n    if time == 0:\n        print(-1)\n    else:\n        print(time)\n    '''\n\n    hp = int(stdin[0])\n    d = list(map(int, stdin[1].split()))\n    time = 0\n    while True:\n        for i in range(len(d)):\n            hp += d[i]\n            if hp < 0:\n                hp = 0\n                time = 1\n                break\n            else:\n                time += 1\n                if hp == 0:\n                    break\n        if time == 0:\n            print(-1)\n        else:\n            print(time)\n        break\n\n\ndef"
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    H, n = [int(x) for x in stdin.split()]\n    ds = [int(x) for x in stdin.split()]\n    if 0 in ds:\n        return -1\n    return n + find_next_to_die(H, ds)\n\ndef"
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    H, n = map(int, stdin.split())\n    d = list(map(int, stdin.split()))\n    if any(abs(d[i]) > abs(d[i - 1]) for i in range(1, n)):\n        return '-1'\n    l = []\n    l.append(d[0])\n    for i in range(1, n):\n        l.append(d[i] + l[i - 1])\n    if all(x >= 0 for x in l):\n        return n\n    t = [0] * n\n    for i in range(n):\n        t[i] = sum(abs(x) for x in l[:i])\n    ans = 0\n    for i in range(n):\n        if t[i] <= H:\n            ans = i\n            break\n    return str(ans + 1)\n"
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your solution\n    return str()"
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    longest = ''\n    count = 0\n    \n    for i in range(n):\n        if s[i] > s[i-1]:\n            count += 1\n        else:\n            count = 0\n        if count > len(longest):\n            longest = s[i-1:i+1]\n            \n    return longest\n\ndef"
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    text = stdin\n    n = len(text)\n    count = dict()\n    \n    for i in range(n - 1):\n        count[text[i:i+2]] = count.get(text[i:i+2], 0) + 1\n\n    for key, value in count.items():\n        if value == max(count.values()):\n            return key\n            \nprint(solution(stdin))\n"
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Input:\n        :stdin: str\n    Output:\n        :return: str\n    \"\"\"\n    # Your code here\n    s = stdin\n    n = len(s)\n    max_count = 0\n    max_char = ''\n    for i in range(n - 1):\n        if s[i] < s[i + 1]:\n            if s[i] + s[i + 1] in s and s.count(s[i] + s[i + 1]) > max_count:\n                max_count = s.count(s[i] + s[i + 1])\n                max_char = s[i] + s[i + 1]\n        if s[i] > s[i + 1]:\n            if s[i] + s[i + 1] in s and s.count(s[i] + s[i + 1]) > max_count:\n                max_count = s.count(s[i] + s[i + 1])\n                max_char = s[i] + s[i + 1]\n    return max_char\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    import sys\n    import collections\n    \n    def input():\n        return sys.stdin.readline()\n    \n    def output(string):\n        sys.stdout.write(string)\n    \n    n = int(input())\n    s = list(input())\n    dic = collections.Counter(s)\n    ans = max(dic.items(), key=lambda x: x[1])\n    output(ans[0])"
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('7\\nABACABA')\n    'AB'\n    >>> solution('5\\nZZZAA')\n    'ZZ'\n    \"\"\"\n    # return max(max(substring, key=lambda x: stdin.count(x)) for substring in set(substring for substring in [stdin[i:i + 2] for i in range(len(stdin) - 1)]))\n    return max(max(substring, key=lambda x: stdin.count(x)) for substring in set(substring for substring in [stdin[i:i + 2] for i in range(len(stdin) - 1)]))"
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Returns the most frequent two-gram contained in a string.\n    >>> solution(\"AAABBAABAAABABABABAAB\")\n    'AA'\n    >>> solution(\"ABACABA\")\n    'AB'\n    >>> solution(\"ZZZAA\")\n    'ZZ'\n    >>> solution(\"AZ\")\n    'ZA'\n    \"\"\"\n    max_count = 0\n    current_count = 0\n    current_two_gram = ''\n    two_grams = {}\n    for c in stdin:\n        if c in two_grams:\n            two_grams[c] += 1\n            if two_grams[c] > current_count:\n                current_count = two_grams[c]\n                current_two_gram = c\n        else:\n            two_grams[c] = 1\n    return current_two_gram\n"
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return None"
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    import string\n    s = stdin.lower()\n    count = [0] * len(string.ascii_lowercase)\n    count2 = [0] * len(string.ascii_lowercase)\n    count3 = [0] * len(string.ascii_lowercase)\n    for i in range(len(s) - 1):\n        count[string.ascii_lowercase.index(s[i])] += 1\n    for i in range(1, len(s)):\n        count2[string.ascii_lowercase.index(s[i - 1])] += 1\n        count3[string.ascii_lowercase.index(s[i])] += 1\n    m = 0\n    ind = 0\n    for i in range(len(count2)):\n        if count2[i] > m:\n            m = count2[i]\n            ind = i\n    return string.ascii_lowercase[ind] + string.ascii_lowercase[count3.index(m)]\n"
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\"\"\"\n\ndef"
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('7\\nABACABA')\n    'AB'\n    \"\"\"\n    n = int(stdin.split()[0])\n    s = stdin.split()[1]\n    max_count = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            count = 0\n            for k in range(i, j):\n                count += s[k] == s[j]\n            if count > max_count:\n                max_count = count\n                result = s[i:j+1]\n    return result"
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    string1, string2 = stdin.split('\\n')\n    if string1 == string2:\n        return str(len(string1) + len(string2))\n    if string1 == '':\n        return str(len(string2))\n    if string2 == '':\n        return str(len(string1))\n    moves = 0\n    while string1!= string2:\n        if len(string1) == 0:\n            string1, string2 = string2, string1\n            continue\n        if string2 == '':\n            return str(moves)\n        if string1[0] == string2[0]:\n            string2 = string2[1:]\n        else:\n            string1 = string1[1:]\n            moves += 1\n    return str(moves)\n"
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.splitlines()\n    i = 0\n    l = len(s)\n    while i < l:\n        if s[i]!= t[i]:\n            break\n        i += 1\n    return len(s) + len(t) - 2 * i"
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n    s = stdin[:1]\n    t = stdin[1:]\n    i = 0\n    while s!= t:\n        if len(s) == 0 or len(t) == 0:\n            break\n        if s[:1] == t[:1]:\n            s = s[1:]\n            t = t[1:]\n            i += 1\n        else:\n            s = s[:-1]\n            t = t[:-1]\n            i += 1\n    return i\n"
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    t = stdin[1]\n    moves = 0\n    while len(s)!= len(t):\n        if len(s) > len(t):\n            s = s[1:]\n        else:\n            t = t[1:]\n        moves += 1\n    return moves\n"
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split('\\n')\n    return len(s) + len(t) - 1\n\nsolution(\"where\")\nsolution(\"codeforces\")\nsolution(\"yes\")\nsolution(\"ab\")\n"
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split(\"\\n\")[0]\n    t = stdin.split(\"\\n\")[1]\n    return len(s) + len(t)\n\nassert solution(\"where\\nwhere\") == 7\nassert solution(\"codeforces\\nyes\") == 9\nassert solution(\"test\\nyes\") == 7\nassert solution(\"a\\nb\") == 1\n\n\n\n\n\"\"\""
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\nfrom collections import deque\n\ndef"
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    t = stdin[1]\n    length_s = len(s)\n    length_t = len(t)\n    return length_s + length_t - 2 * max(length_s, length_t)\n"
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n\n\ndef"
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    N, X = map(int, stdin.split())\n    distances = map(int, stdin.split())\n    d = max(distances)\n    while d in distances:\n        d += 1\n    return str(d)\n    '''\n    return str(min(map(int, stdin.split())) + 2)\n"
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, X = map(int, stdin.split(' '))\n    print(max((abs(X - i) for i in range(1, N+1))))\n    return ''"
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    The trick here is to first sort the input.\n    Then we iterate through the list and check if current number is smaller\n    than previous number. If it is, we can skip it since the later numbers\n    can also reach that number.\n    \"\"\"\n    x = list(map(int, stdin.split()))\n    x.sort()\n    i = 0\n    j = 0\n    d = 1\n    while j < len(x):\n        if x[i] > x[j]:\n            j += 1\n            continue\n        else:\n            i = j\n            j += 1\n            d += 1\n    return d\n"
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Finds the maximum value of D that enables you to visit all the cities.\n    \"\"\"\n    _, x = stdin.strip().split()\n    x = list(map(int, x))\n    return max(x) - min(x)\n"
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # create a list of ints from input\n    n, x = map(int, stdin.split())\n    # find the difference between each int and x\n    d = [abs(i - x) for i in map(int, stdin.split())]\n    # return the min of the list\n    return str(min(d))\n\"\"\"\n\n\nimport os\nimport sys\n\ndef"
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, x = [int(v) for v in stdin.split()]\n    cities = [int(v) for v in stdin.split()]\n    cities.sort()\n    \n    D = 1\n    while cities[-1] - cities[0] > D * n:\n        D += 1\n    return D\n    \n"
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(test_input)\n    2\n    \"\"\"\n    n, x = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    arr.sort()\n    arr.append(x)\n    left = 0\n    right = arr[-1] - arr[0]\n    res = 0\n    while left <= right:\n        mid = (left + right) // 2\n        if is_possible(arr, x, mid):\n            res = mid\n            left = mid + 1\n        else:\n            right = mid - 1\n    return res\n\n\ndef"
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x = [int(c) for c in stdin.split('\\n')[1].split()]\n    print(f'{max([(i + 1) % len(x) for i, v in enumerate(x)])}')\n"
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, x = [int(e) for e in stdin.split(' ')]\n    x_lst = [int(e) for e in stdin.split(' ')[1:]]\n    max_d = 0\n    x_c = 0\n    for x_i in x_lst:\n        if x_i < x:\n            max_d += 1\n        elif x_i == x:\n            x_c += 1\n    return max_d\n"
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def is_strong_palindrome(string: str) -> bool:\n        if len(string) < 3 or len(string) % 2 == 0:\n            return False\n        center = int((len(string) - 1) / 2)\n        first_half = string[:center + 1]\n        second_half = string[center + 1:]\n        first_half_palindrome = second_half[::-1]\n        if first_half == first_half_palindrome:\n            second_half_palindrome = string[center + 2:]\n            if second_half_palindrome == second_half_palindrome[::-1]:\n                return True\n        return False\n    return 'Yes' if is_strong_palindrome(stdin) else 'No'\n"
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return stdin[::2] == stdin[1::2][::-1]"
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    len_string = len(stdin)\n    if (len_string % 2 == 0):\n        return \"No\"\n    elif stdin == stdin[::-1]:\n        return \"Yes\"\n    else:\n        half_len = int(len_string / 2)\n        mid_string = stdin[half_len - 1:half_len + 1]\n        first_half_string = stdin[0:half_len]\n        last_half_string = stdin[half_len:]\n\n        if first_half_string == first_half_string[::-1] and last_half_string == last_half_string[::-1]:\n            return \"Yes\"\n        else:\n            return \"No\"\n"
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Takes a string as stdin and determines whether or not it is a strong\n    palindrome.\n\n    >>> solution('akasaka')\n    Yes\n\n    >>> solution('aaaa')\n    Yes\n\n    >>> solution('kotok')\n    No\n\n    >>> solution('noon')\n    No\n    \"\"\"\n    string = stdin.strip()\n    length = len(string)\n\n    if length % 2 == 0 or length < 3:\n        return \"No\"\n\n    middle = length // 2\n    if string[:middle]!= string[:middle:-1]:\n        return \"No\"\n\n    return \"Yes\" if (\n        string[middle:] == string[middle:][::-1] and\n        string[middle + 1:] == string[middle + 1:][::-1]\n    ) else \"No\"\n"
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Get the input string from stdin and remove leading and trailing whitespaces\n    input_string = stdin.strip()\n    \n    # Check if the input string is an odd length. If it is, it can't be a strong palindrome\n    if len(input_string) % 2 == 0:\n        return 'Yes'\n    \n    # If the input string is an odd length, check if it is a strong palindrome\n    # If it is, return Yes\n    else:\n        for i in range(len(input_string) // 2):\n            if input_string[i]!= input_string[len(input_string) - 1 - i]:\n                return 'No'\n        return 'Yes'"
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Remove the newline character from the input and assign it to the variable text\n    text = stdin.rstrip()\n\n    # Reverse text using slicing and assign it to the variable reverse_text\n    reverse_text = text[::-1]\n\n    # Check if the reversed string is equal to the original string\n    if text == reverse_text:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return 'Yes' if len(stdin) % 2 == 1 and is_palindrome(stdin) and is_palindrome(stdin[:len(stdin) // 2]) and is_palindrome(stdin[(len(stdin) + 1) // 2:]) else 'No'\ndef"
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    l = stdin.split('\\n')[0]\n    if l[0] == l[-1] and l[1] == l[-2]:\n        return 'Yes'\n    else:\n        return 'No'\n\nprint(solution(input()))\n\n3.\nQuestion\n\nA non-empty string A consisting of N characters is considered to be properly nested if any of the following conditions is true:\n\nstring A is properly nested with respect to N:\n\n- all characters in A are single-character strings;\n- the first character of A is a parenthesis, and if the length of A is greater than 1, it is the left parenthesis of the first (properly nested) substring;\n- the last character of A is a parenthesis, and if the length of A is greater than 1, it is the right parenthesis of the last (properly nested) substring.\n\nGiven a string A consisting of N characters, check whether it is properly nested.\n\n----------Input Format----------\nThe first line contains A, the string to be checked.\n\n----------Output Format----------\nA single line containing either Yes or No, depending on whether the string is properly nested or not respectively.\n\n----------Sample Input----------\n[()]\n\n----------Sample Output----------\nYes\n\n----------Explanation----------\nA is properly nested because it is of the form \"()\", and the first character is an opening parenthesis, and the last character is a closing parenthesis.\n\ndef"
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\n-----Solution-----\nThe code below demonstrates a brute force solution.\n\"\"\"\n\nfrom typing import Dict, List, Tuple\nimport sys\n\ndef"
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if is_strong_palindrome(stdin) else \"No\"\n\n\ndef"
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    return str(int(a) * float(\"0.\"+b))"
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(float, stdin.split())\n    return int(a * b)"
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B = stdin.split(' ')\n    A = int(A)\n    B = float(B)\n    ans = A * B\n    ans = int(ans)\n    return str(ans)\n"
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n    # \uc774 \ubd80\ubd84\uc744 \ucc44\uc6cc\ubcf4\uc138\uc694!\n    a, b = stdin.split()\n    a = int(a)\n    b = float(b)\n    return int(a*b)"
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    print(int(a) * round(float(b)))"
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split(' ')\n    return str(int(float(a) * int(b)))\n"
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('198 1.10\\n')\n    '217'\n    \"\"\"\n    A, B = map(float, stdin.split())\n    return str(int(A * B))\n"
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split(' ')\n    b = float(b)\n    return int(a) * round(b)"
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(float, stdin.split())\n    return int(math.trunc(A * B))\n\n\ndef"
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split(' ')\n    return str(int(a) * int(b))"
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"Find solution to problem\"\n    \n    return \"Case #x: y\"\n"
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for _ in range(t):\n        n = int(stdin.readline())\n        if n < 4:\n            print(0)\n            continue\n        if n % 2 == 0:\n            print(0)\n            continue\n        if n == 2:\n            print(1)\n            continue\n        if n == 3:\n            print(2)\n            continue\n        print(n // 2)\n        \n"
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"7\\n1\\n2\\n3\\n2000000000\\n763243547\")\n    '3'\n    \"\"\"\n\n\n    def count(a, b, n):\n        if a == 0 and b == 0:\n            if n == 0:\n                return 1\n            else:\n                return 0\n        elif a > 0 and b > 0:\n            return (count(a - 1, b, n - a) + count(a, b - 1, n - a)) % 1000000007\n        else:\n            return 0\n\n    return str(count(int(stdin.readline()), int(stdin.readline()), int(stdin.readline())))\n"
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''\n"
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return 'Not solved yet'\n\"\"\"\n\n\nclass Solution:\n    def solve(self, stdin):\n        num = int(stdin)\n        dp = [1, 0]\n        for i in range(num):\n            dp.append(dp[i] + dp[i+1])\n        return dp[num]\n"
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    return str(stdin)\n"
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s = [int(x) for x in stdin.split('\\n')[0].split()]\n    C = {i + 1: set() for i in range(n)}\n    E = set()\n    for _ in range(m):\n        u, v = [int(x) for x in stdin.split('\\n')[_].split()]\n        E.add((u, v))\n        E.add((v, u))\n        C[u].add(v)\n        C[v].add(u)\n    return int(s not in C[s])\n"
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s = [int(c) for c in stdin.split(' ')]\n    edges = []\n    for _ in range(m):\n        edges.append([int(c) for c in stdin.split(' ')])\n    dist = [n + 1] * (n + 1)\n    dist[s] = 0\n    for _ in range(n):\n        for edge in edges:\n            if dist[edge[0]]!= n + 1 and dist[edge[1]] > dist[edge[0]] + 1:\n                dist[edge[1]] = dist[edge[0]] + 1\n    return str(n - max(dist[1:]))\n"
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return\n"
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Finds the minimum number of roads to connect the cities with the index of the capital.\n    \"\"\"\n    n, m, s = map(int, stdin.split())\n    roads = [tuple(map(int, stdin.split())) for _ in range(m)]\n\n    # Step 1. Build the graph.\n    graph = build_graph(n, roads)\n\n    # Step 2. Find the shortest path from the capital to all the other nodes.\n    dist_to_s = bfs(graph, s)\n\n    # Step 3. For each node, find the minimum distance to the capital.\n    min_dist = [dist_to_s[i] if i in dist_to_s else n for i in range(n)]\n\n    # Step 4. Find the maximum minimum distance among all the nodes.\n    return max(min_dist)\n\n\ndef"
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s = [int(x) for x in stdin.split(' ')]\n    roads = [list(map(int, x.split(' '))) for x in stdin.split('\\n')]\n    dist = [0] * n\n    for u, v in roads:\n        dist[u-1] += 1\n        dist[v-1] += 1\n    return print(sum([1 for i in dist if i == 0]) - 1)"
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution for exercise 0\n\n    Parameters\n    ----------\n    stdin: str\n        input as string\n\n    Returns\n    -------\n    str\n        Answer to exercise\n    \"\"\"\n    n, m, s = [int(x) for x in stdin.split(' ')]\n    graph = [[] for _ in range(n)]\n    for _ in range(m):\n        u, v = [int(x) for x in stdin.split(' ')]\n        graph[u-1].append(v-1)\n        graph[v-1].append(u-1)\n    return str(graph)\n"
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # take input\n    n = int(stdin.readline())\n    weights = [int(i) for i in stdin.readline().split()]\n    weights.sort()\n\n    # if weights are increasing, return\n    if weights[-1] - weights[0] <= 1:\n        return len(weights)\n\n    # calculate the number of changes\n    num_changes = 0\n    for i in range(1, len(weights)):\n        num_changes += weights[i] - weights[i - 1]\n    # when the number of changes is odd, return the number of changes\n    if num_changes % 2 == 1:\n        return num_changes // 2 + 1\n    # otherwise, return the number of changes // 2\n    return num_changes // 2\n"
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    n = int(stdin.readline().strip())\n    weights = list(map(int, stdin.readline().strip().split(' ')))\n    ret = 0\n    for i in range(n):\n        if weights[i] > ret:\n            ret = weights[i]\n    return str(ret)\n"
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    boxers = list(map(int, stdin.readline().strip().split()))\n    boxers.sort()\n\n    ans = 0\n\n    for i in range(n - 1):\n        if boxers[i + 1] - boxers[i] > 1:\n            ans += 1\n\n    return ans"
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"Hello, World!\"\n    pass\n"
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    a.sort()\n    m = len(a)\n\n    def possible(p):\n        i = 0\n        for ai, ij in zip(a, p):\n            if ai!= a[i] + ij:\n                return False\n            i = ij\n        return True\n\n    ans = 0\n    for i in range(m - 1):\n        for j in range(i + 1, m):\n            if possible(sorted((i, j))):\n                ans = max(ans, i + j)\n    return ans"
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    #\n    #\n    #\n    pass\n"
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a = sorted(a, reverse=True)\n    b = [a[0]]\n    for i in range(1, n):\n        if a[i]!= b[-1]:\n            b.append(a[i])\n    return len(b)\n"
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return f'{len(stdin) // 2}'\n"
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"returns concatenated ID numbers\"\n    return \"\".join(\n        [\n            prefectures[int(line.split(\" \")[0]) - 1] + str(index + 1).zfill(6)\n            for index, line in enumerate(stdin.split(\"\\n\"))\n            if index!= 0\n        ]\n    )\n"
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    inputs = [input.strip().split() for input in stdin.strip().split('\\n')]\n    n, m = int(inputs[0][0]), int(inputs[0][1])\n    prefectures, cities = {}, {}\n    for prefecture, year in inputs[1:]:\n        prefectures[prefecture] = year\n        cities[year] = prefectures[prefecture]\n    for prefecture in prefectures:\n        if prefectures[prefecture] in cities:\n            print(prefecture + prefectures[prefecture])\nsolution(input())\n"
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def solve():\n        stdin = stdin.split(\"\\n\")\n        n, m = [int(x) for x in stdin[0].split(\" \")]\n        prefectures = {}\n        cities = {}\n        for i in range(1, n + 1):\n            p, y = stdin[i].split(\" \")\n            prefectures[p] = i\n            cities[i] = list()\n        for i in range(n + 1, n + m + 1):\n            p, y = stdin[i].split(\" \")\n            cities[prefectures[p]].append(int(y))\n        ret = []\n        for i in range(1, n + 1):\n            ret.append(\n                \"{:06d}\".format(\n                    prefectures[str(i)] * 1000000000 + sum(cities[i])\n                )\n            )\n        return ret\n\n    return \"\\n\".join(solve())\n"
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    res = [''] * m\n    for i in range(m):\n        a, b = map(int, stdin.readline().split())\n        res[i] = '{:06d}'.format(a) + '{:06d}'.format(b)\n    return '\\n'.join(res)\n"
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().strip().split())\n    res = []\n    for _ in range(m):\n        p, y = map(int, stdin.readline().strip().split())\n        p = str(p).zfill(6)\n        y = str(y).zfill(6)\n        res.append(p + y)\n    res.sort()\n    return '\\n'.join(res)\n"
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"2 3\\n1 32\\n2 63\\n1 12\")\n    000001000002\n    000001000001\n    000002000001\n    \"\"\"\n    n, m = map(int, stdin.split())\n    dp = [0] * n\n    for _ in range(m):\n        p, y = map(int, stdin.split())\n        dp[p - 1] = y\n    dp = [f\"{i:06d}\" for i in dp]\n    return \"\\n\".join(dp)\n"
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''2 3\n   ... 1 32\n   ... 2 63\n   ... 1 12''')\n    '000001000002'\n    >>> solution('''3 2\n   ... 1 100\n   ... 1 1\n   ... 2 2''')\n    '1000101010101010'\n    >>> solution('''3 3\n   ... 1 100\n   ... 1 1\n   ... 2 2\n   ... 2 3\n   ... 3 3''')\n    '1000110110101010'\n    \"\"\"\n    n, m = map(int, stdin.split())\n    return \"\".join(\n        (str(idx + 1).zfill(6))\n        for idx in range(m)\n    )\n"
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split(' ')))\n    pref = dict()\n    cities = dict()\n\n    for i in range(n):\n        pref[i+1] = list(map(int, stdin.split(' ')))[1:]\n\n    for i in range(m):\n        pref[list(map(int, stdin.split(' ')))[0]].append(i+1)\n\n    for i in range(n):\n        for j in range(m):\n            if pref[i+1][0] in cities.keys():\n                cities[pref[i+1][0]].append(str(j+1).zfill(6))\n            else:\n                cities[pref[i+1][0]] = [str(j+1).zfill(6)]\n\n    res = []\n\n    for i in range(1, n+1):\n        for j in range(len(cities[i])):\n            res.append(str(i).zfill(6) + cities[i][j])\n\n    print(' '.join(res))\n"
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''2 3\n   ... 1 32\n   ... 2 63\n   ... 1 12''')\n    '000001000002\n    '000002000001\n    '000001000001'\n    \"\"\"\n    n, m = [int(i) for i in stdin.split()]\n    p, y = [], []\n    for _ in range(n):\n        prefecture, year = [int(i) for i in stdin.split('\\n')[1:][0].split()]\n        p.append(str(prefecture).zfill(6))\n        y.append(str(year).zfill(6))\n    for i in range(m):\n        print(''.join(p[i] + y[i]))"
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    cities = {}\n    for i in range(1, N + 1):\n        city_id, year = map(int, stdin.split())\n        city_id = f'{i:0>6}'\n        year = f'{year:0>6}'\n        cities[city_id] = year\n    return '\\n'.join(cities[city_id] for city_id in sorted(cities))"
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, *arr = [int(x) for x in stdin.split('\\n')[0].split(' ')]\n    arr.sort(reverse=True)\n    m = [arr[0]]\n    for i in range(1, N):\n        m.append(max(m[i-1] - arr[i], 1))\n    return max(m)\n    \n\"\"\"\n\nimport sys\nimport random\n\ndef"
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \n    return str(a)\n"
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    n = int(stdin)\n    values = [int(val) for val in stdin.split(' ')]\n    \n    # unpack into list of tuple (value, index)\n    values = [(value, index) for index, value in enumerate(values)]\n    \n    values.sort()\n    # pick first 2 values\n    values = values[0:2]\n    \n    # sort\n    values.sort()\n    \n    # pick first value\n    min_health = values[0][0]\n    \n    # print minimum\n    print(min_health)\n    \n    return min_health\n"
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return \"\""
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    # data = stdin.readlines()\n    # data = [int(x) for x in data]\n    # data = list(map(int, stdin.readlines()))\n    # data = [list(map(int, stdin.readline().split(' '))) for i in range(N)]\n\n    # min_v = min(data)\n    # min_v = min(data, key=lambda x: x[0])\n    # min_v = min(data, key=lambda x: x[1])\n\n    # return min_v\n\n    # https://leetcode.com/problems/final-health-after-n-calls/discuss/444923/C%2B%2B-FASTEST-Python-Solution-With-O(N)-Time-and-O(1)-Space\n    N = int(stdin)\n    A = list(map(int, stdin.split(' ')))\n    A.sort(reverse=True)\n    hp = A[0]\n    for i in range(1, N):\n        hp = max(1, hp - A[i])\n\n    print(hp)\n    return\n"
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ...\n   ..."
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, *inp = map(int, stdin.split())\n    res = 0\n    while n > 1:\n        res = sum(inp)\n        n = n - 1\n    return res\n"
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    n, *A = map(int, stdin.split())\n    A = list(map(int, A))\n\n    # health of monster 1\n    hp = A[0]\n    cnt = 1\n\n    while cnt < n:\n        cnt += 1\n        for i in range(cnt):\n            if hp < A[i]:\n                hp = A[i]\n                break\n            else:\n                hp = hp - A[i]\n\n    print(hp)\n\n\nsolution(input())\n"
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    n, *input_list = map(int, stdin.split())\n    input_list = list(input_list)\n\n    final_health = max(input_list)\n    while len(input_list) > 1:\n        a_1, a_2 = input_list.pop(0), input_list.pop(0)\n        if a_1 > a_2:\n            a_2 = min(a_2 + a_1, final_health)\n        else:\n            a_1 = min(a_1 + a_2, final_health)\n\n        input_list.append(a_1)\n        input_list.append(a_2)\n        final_health = min(final_health, a_1, a_2)\n\n    return final_health\n"
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    _, *monster_healths = stdin.split()\n    monster_healths = [int(health) for health in monster_healths]\n    assert len(monster_healths) == len(set(monster_healths))\n\n    result = 0\n    while len(monster_healths) > 1:\n        attacking_monster, attacked_monster = random.choice(list(enumerate(monster_healths))), random.choice(list(enumerate(monster_healths)))\n        monster_healths[attacking_monster[0]] -= monster_healths[attacked_monster[0]]\n        monster_healths[attacked_monster[0]] = 0\n        if monster_healths[attacking_monster[0]] < 0:\n            monster_healths[attacking_monster[0]] = 0\n        if monster_healths[attacked_monster[0]] < 0:\n            monster_healths[attacked_monster[0]] = 0\n        result += monster_healths[attacking_monster[0]]\n\n    return str(result)\n\"\"\"\n\nfrom typing import List\nimport random\n\n\ndef"
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    name = stdin.replace('?(','').replace('):-','').split(' ')[0]\n    variables = stdin.replace('?(','').replace('):-','').split(' ')[1].split('/')\n    variables.remove('')\n    variables = list(map(lambda x: x.split('*'), variables))\n    variables = list(map(lambda x: list(map(int, x)), variables))\n\n    variables = sorted(variables, key=lambda x: x[0][0])\n    variables = list(map(lambda x: x[0], variables))\n\n    variables_len = len(variables)\n    max_variables = max(variables)\n\n    result = ''\n    for i in range(variables_len):\n        for j in range(variables[i]):\n            if result == '':\n                result = result + str(j)\n            else:\n                result = result + str(max_variables + j)\n\n    return result\n"
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Get all possible solutions\n    solutions = []\n    for stdin_split in stdin.split('/'):\n        solutions.append(stdin_split)\n    \n    # Get shortest solution\n    if len(solutions) > 0:\n        return min(solutions)\n    \n    # Return False if empty\n    return False\n"
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n    def feed(golorp: str):\n        \n        # If possible, feed the golorp\n        if is_possible(golorp):\n            return ''.join(f'{int(v):010d}' for v in golorp)\n        else:\n            return 'false'\n    \n    # Return the result of feeding the golorp\n    return feed(stdin)\n\"\"\"\n\ndef"
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('?(_-_-):-_->__<_-')\n    '101'\n    >>> solution('?(_-_/___*__):-___>__.__-')\n    '0010'\n    >>> solution('?(__-_+_/_____):-__>__,_____<__.__')\n    'false'\n    >>> solution('?(______________________/____+_______*__-_____*______-___):-__<___,___<____,____<_____,_____<______,______<_______.__')\n    '0250341'\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    golorps = stdin.split(',')\n    variables = list('0123456789')\n    seqs = []\n    for i in range(len(golorps)):\n        golorp = golorps[i]\n        if golorp.count('<') > 2:\n            continue\n        if golorp.count('_') > 1:\n            continue\n        golorp = golorp.replace('<', '').replace('>', '').replace('_', '')\n        if golorp == '':\n            continue\n        variables.sort(key=lambda x: int(golorp[:len(x)]))\n        variables.remove(golorp[:len(variables[0])])\n        seq = ''.join(variables) + golorp\n        seqs.append(seq)\n    seqs.sort(key=lambda x: len(x))\n    if len(seqs) == 0:\n        return 'false'\n    return seqs[0]\n"
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    golorp_name = stdin\n    while '(' in golorp_name:\n        # Find position of the leftmost opening brace\n        position = golorp_name.find('(')\n\n        # Find position of the rightmost closing brace\n        right_position = golorp_name.find(')', position)\n\n        # Find matching closing brace from the right\n        matching_right_bracket = golorp_name.find(')', right_position + 1)\n\n        # Substitute parentheses for variables\n        golorp_name = golorp_name.replace(golorp_name[position:right_position + 1], stdin[position:right_position])\n\n        # Find the position of the opening brace\n        position = golorp_name.find('(')\n\n        # Find the position of the closing brace\n        right_position = golorp_name.find(')', position)\n\n        # Find the matching closing bracket\n        matching_right_bracket = golorp_name.find(')', right_position + 1)\n\n        # Substitute variables for parentheses\n        golorp_name = golorp_name[:position] + stdin[position:right_position + 1] + golorp_name[matching_right_bracket + 1:]\n\n        # print(golorp_name)\n\n    return golorp_name\n"
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \n    #Initialize variables\n    #Name of golorp\n    golorp = stdin\n    \n    #Number of variables to eat\n    length = int(len(golorp) / 2)\n    \n    #Bounds of variables\n    lower = [0] * length\n    upper = [9] * length\n    \n    #Variables that golorp can eat\n    variables = [\"?1\", \"?2\", \"?3\", \"?4\", \"?5\", \"?6\", \"?7\", \"?8\", \"?9\"]\n    \n    #Formula for the possible solutions\n    possible_solutions = [\"{0}{1}{0}\".format(x, y) for x in variables for y in variables]\n    \n    #Get first solution for upper bound\n    upper[length - 1] = int(possible_solutions[0])\n    \n    #Set lower bound for next iteration\n    lower[length - 1] = int(possible_solutions[0])\n    \n    #Get next possible solution\n    for i in range(1, length - 1):\n        lower[length - i - 1] = int(possible_solutions[i])\n        upper[length - i - 1] = int(possible_solutions[i])\n        \n    #Get second solution for upper bound\n    upper[length - 2] = int(possible_solutions[1])\n    \n    #Initialize the solution\n    solution = \"\"\n    \n    #If golorp eats enough\n    if (upper[0] >= lower[0]):\n        #Append the solution\n        solution += possible_solutions[0]\n        \n        #If the rest of the variables have the same value\n        if (all(upper[i] == upper[0] for i in range(1, length - 1))):\n            #Append the solution\n            solution += possible_solutions[0]\n        else:\n            #Append the variable with the smallest lower bound\n            min_lower_bound = min(lower)\n            solution += str(min_lower_bound)\n    else:\n        #If golorp is impossible\n        solution = \"false\"\n        \n    return solution\n        \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # \ube0c\ub8e8\ud2b8 \ud3ec\uc2a4\ub97c \uc774\uc6a9\ud574\uc11c \ud574\uacb0\n    # \uc67c\ucabd \uc704\ubd80\ud130 \uc2dc\uc791\ud574\uc11c \uc624\ub978\ucabd \uc544\ub798\uae4c\uc9c0 \uc21c\uc11c\ub300\ub85c \uc6c0\uc9c1\uc774\uace0 \uac00\uc7a5 \uae38\uac8c \uc9c0\ub098\ub294 \uacbd\ub85c\ub97c \ub2e4 \uccb4\ud06c\n    # \ucd08\uae30 \uc704\uce58\ub294 (1, 1)\n    n, m, k = map(int, stdin.split())\n    grid = [list(map(int, stdin.split())) for _ in range(n)]\n    dp = [[0] * m for _ in range(n)]\n    dp[0][0] = 1\n    for i in range(n):\n        for j in range(m):\n            if i == 0 and j == 0:\n                continue\n            if grid[i][j] == 0:\n                dp[i][j] = 0\n                continue\n            dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n            if i > 0 and j > 0:\n                dp[i][j] %= 1000000007\n    print(dp[n - 1][m - 1])\n\n    # stdin = '3 3 11'\n    # stdin = '3 4 2'\n    # n, m, k = map(int, stdin.split())\n    # grid = [list(map(int, stdin.split())) for _ in range(n)]\n    # answer = 0\n    # for i in range(n):\n    #     for j in range(m):\n    #         left = right = top = bottom = 0\n    #         if i!= 0:\n    #             left = grid[i - 1][j]\n    #         if j!= 0:\n    #             top = grid[i][j - 1]\n    #         if i!= n - 1:\n    #             right = grid[i + 1][j]\n    #         if j!= m - 1:\n    #             bottom = grid[i][j + 1]\n    #         if left and top and right and bottom:\n    #             if k == left ^ right ^ top ^ bottom:\n    #                 answer += 1\n    # print(answer)\n\n    return ''\n\nprint(solution(stdin))"
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    a = [list(map(int, stdin.split())) for _ in range(n)]\n    def dfs(i, j, visited, xor):\n        if i == n-1 and j == m-1:\n            return 1 if xor == k else 0\n        cnt = 0\n        visited.add((i, j))\n        if i < n-1 and (i+1, j) not in visited and a[i+1][j] == xor ^ a[i][j]:\n            cnt += dfs(i+1, j, visited, xor)\n        if j < m-1 and (i, j+1) not in visited and a[i][j+1] == xor ^ a[i][j]:\n            cnt += dfs(i, j+1, visited, xor)\n        visited.remove((i, j))\n        return cnt\n    return dfs(0, 0, set(), a[0][0])\n\na = [list(map(int, stdin.split())) for _ in range(n)]\n\ndef"
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n, m, k = list(map(int, stdin.split()))\n    grid = []\n    for i in range(n):\n        grid.append(list(map(int, stdin.split())))\n    xor_grid = [[0 for x in range(m)] for y in range(n)]\n    for i in range(n):\n        for j in range(m):\n            xor_grid[i][j] = grid[i][j]\n    for i in range(n):\n        for j in range(m):\n            xor_grid[i][j] ^= k\n    # print(xor_grid)\n    def backtracking(row, col):\n        if row >= n or col >= m:\n            return 0\n        if row == n - 1 and col == m - 1:\n            return 1\n        count = 0\n        if col < m - 1:\n            count += backtracking(row, col + 1)\n        if row < n - 1:\n            count += backtracking(row + 1, col)\n        return count\n\n    return backtracking(0, 0)\n"
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split('\\n')[0].split(' '))\n    arr = [int(i) for i in stdin.split('\\n')[1:]]\n\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    for i in range(1, n + 1):\n        for j in range(m):\n            dp[i] += dp[i - 1] if arr[i - 1] ^ k == j + 1 else 0\n    return dp[n]\n"
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n        find number of path from 1,1 to n,m with xor sum equal to k\n        k = 1^2^2^...^k^2^...^k\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def search(i, j, xor):\n        if i == n and j == m:\n            return 1 if xor == 0 else 0\n        cnt = 0\n        if i < n:\n            cnt += search(i + 1, j, xor ^ a[i][j])\n        if j < m:\n            cnt += search(i, j + 1, xor ^ a[i][j])\n        return cnt\n\n    (n, m, xor) = map(int, stdin.split())\n    a = [[int(x) for x in stdin.split()] for _ in range(n)]\n    return search(0, 0, xor)\n\n\ndef"
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Calculate the number of paths from the upper-left cell ($1, 1$) to the bottom-right cell ($n, m$) meeting the following constraints:\n\n    You can move to the right or to the bottom only. Formally, from the cell ($i, j$) you may move to the cell ($i, j + 1$) or to the cell ($i + 1, j$). The target cell can't be outside of the grid.  The xor of all the numbers on the path from the cell ($1, 1$) to the cell ($n, m$) must be equal to $k$ (xor operation is the bitwise exclusive OR, it is represented as '^' in Java or C++ and \"xor\" in Pascal). \n\n    Find the number of such paths in the given grid.\n\n    >>> solution('3 3 11\\n2 1 5\\n7 10 0\\n12 6 4')\n    3\n    \"\"\"\n\n    grid_size = stdin.split('\\n')[:2]\n    xor_sum = int(stdin.split('\\n')[2])\n    grid = stdin.split('\\n')[3:]\n    grid_size = list(map(int, grid_size))\n    grid = [list(map(int, line)) for line in grid]\n\n    path_count = _calculate_path_count(grid, grid_size, xor_sum)\n    print(path_count)\n    return path_count\n\n\ndef"
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = stdin.split(' ')\n    n = int(n)\n    m = int(m)\n    k = int(k)\n    matrix = []\n    for _ in range(n):\n        matrix.append(list(map(int, stdin.split('\\n')[_].split(' '))))\n    # print(matrix)\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n    # print(dp)\n    dp[1][1] = 1\n    # for row in dp:\n    #     print(row)\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n            if matrix[i - 1][j - 1]!= 0:\n                dp[i][j] = dp[i][j] - dp[i - 1][j - 1]\n            # print(dp[i][j])\n    # for row in dp:\n    #     print(row)\n    print(dp[n][m])\n"
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \n    pass\n"
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def reverse_substring(s, left, right):\n        if left < 0 or right > len(s):\n            return\n        \n        while left >= 0 and right < len(s) and s[left] == s[right]:\n            left -= 1\n            right += 1\n        \n        if left < 0 or right >= len(s):\n            return\n        \n        s = list(s)\n        for i in range(left+1, right):\n            s[i] = s[i-1]\n        s[left+1:right] = s[left:right-1:-1]\n        return ''.join(s)\n    \n    s = stdin\n    ans = ''\n    while s!= ans:\n        ans = s\n        for i in range(len(s)):\n            s = reverse_substring(s, i, i + 1)\n    return ans\n"
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    # your solution"
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin[0]\n    t = stdin[1:]\n    s = \"\"\n    for i in range(n, 0, -1):\n        s += t[i - 1]\n        if t[0:i] == s[0:i]:\n            break\n    return s"
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n'''\n\n\ndef"
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\nfrom typing import Dict, List, Tuple"
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n'''"
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = list(map(int, stdin.split()))\n    return a + b\n"
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(a + b)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split(' '))\n    return a + b\n\nprint(solution(input()))\n"
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split(' '))\n    return str(a + b)\n"
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split(' '))\n    return a + b\nprint(solution(input()))\n"
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(x) for x in stdin.strip().split()]\n    return str(a + b)\n"
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return a+b\n    \ndef"
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split(' '))\n    return a + b\nprint(solution(input()))\n"
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return a + b\n\n\ndef"
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    return str(int(a) + int(b))\n\nsolution(input())\n"
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\n\n\"\"\"\n"
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the Brainfuck program.\"\"\"\n    result = ''\n    stdin = stdin.split('\\n')\n    for i in range(len(stdin)):\n        result += interpret_line(stdin[i])\n    return result\n\n\ndef"
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\"\"\"\n\nimport re\n\nclass Brainfuck:\n    def __init__(self):\n        self.index = 0\n        self.data = [0] * 30000\n        self.input = \"\"\n\n    def getChar(self, char):\n        if char == '+':\n            return 1\n        if char == '-':\n            return -1\n        if char == '<':\n            self.index -= 1\n            return -1\n        if char == '>':\n            self.index += 1\n            return 1\n        if char == '.':\n            return self.data[self.index]\n        if char == ',':\n            self.data[self.index] = ord(self.input[0])\n            self.input = self.input[1:]\n            return 0\n        return 0\n\n    def execute(self, commands):\n        charList = re.findall('<[<+>]*>', commands)\n        for char in charList:\n            self.getChar(char)\n        return self.data\n\n\ndef"
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n\n\"\"\"\n\n\nclass Brainfuck:\n    def __init__(self, input_str: str):\n        self.__input_str = input_str\n        self.__input_str_length = len(input_str)\n        self.__output_str = ''\n        self.__memory = [0] * 30000\n        self.__pointer = 0\n        self.__pending_operations = [''] * 100000\n        self.__pending_operation = ''\n        self.__step_count = 0\n\n    def __execute_operation(self, pending_operation: str) -> None:\n        if pending_operation == '>':\n            self.__pointer += 1\n        elif pending_operation == '<':\n            self.__pointer -= 1\n        elif pending_operation == '+':\n            self.__memory[self.__pointer] += 1\n        elif pending_operation == '-':\n            self.__memory[self.__pointer] -= 1\n\n    def __execute_step(self) -> None:\n        if self.__pending_operation!= '':\n            self.__execute_operation(self.__pending_operation)\n            self.__pending_operations.pop(0)\n            self.__pending_operations.append('')\n            self.__step_count += 1\n\n    def __calculate_output(self) -> str:\n        if self.__pending_operation!= '':\n            self.__execute_operation(self.__pending_operation)\n            self.__pending_operation = ''\n        return_str = ''\n        for i in range(self.__input_str_length):\n            return_str += chr(self.__memory[self.__pointer + i])\n        return return_str\n\n    def __execute_input(self, pending_input: str) -> None:\n        if pending_input == ',':\n            self.__memory[self.__pointer] = ord(sys.stdin.read(1))\n        elif pending_input == '[':\n            if self.__memory[self.__pointer] == 0:\n                while len(self.__pending_operations) > 0 and self.__pending_operations[0]!= ']':\n                    self.__execute_operation(self.__pending_operations[0])\n                    self.__pending_operations.pop(0)\n                if len(self.__pending_operations) == 0:\n                    self.__pending_operations.append(']')\n            else:\n                self.__pending_operations.append(']')\n        elif pending_input == ']':\n            if self.__memory[self.__pointer]!= 0:\n                while len(self.__pending_operations) > 0 and self.__pending_operations[0]!= '[':\n                    self.__execute_operation(self.__pending_operations[0])\n                    self.__pending_operations.pop(0)\n                if len(self.__pending_operations) == 0:\n                    self.__pending_operations.append('[')\n\n    def calculate(self) -> str:\n        self.__pending_operations.pop(0)\n        while self.__pending_operations[0]!= '':\n            self.__execute_step()\n        while self.__step_count < 50000000:\n            self.__execute_input(self.__input_str[self.__step_count])\n            self.__output_str += self.__calculate_output()\n            self.__step_count += 1\n        return self.__output_str\n\n\nimport sys\n\n\ndef"
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n  return ''\n"
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\nThis solution is fully compatible with python 3.8\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    :param stdin: input string\n    :return: string of Brainfuck program\n    \"\"\"\n    if stdin == '':\n        return ''\n\n    nums = [int(i) for i in stdin.split()]\n    cmds = {\n        '>': 1,\n        '<': -1,\n        '+': lambda m: m + 1,\n        '-': lambda m: m - 1,\n        '.': lambda m: chr(m),\n        '[': lambda m: '<' if m < 0 else '>' if m > 255 else m,\n        ']': lambda m: '>' if m < 0 else '<' if m > 255 else m,\n        '[<+>-]': lambda m: 0 if m == 0 else (1 if m == 1 else -1),\n        '[<->-]': lambda m: 0 if m == 0 else (1 if m == 1 else -1)\n    }\n\n    mem = [0] * 30000\n    ptr = 0\n    out = []\n\n    for i in nums:\n        if 0 <= i <= 255:\n            mem[ptr] = i\n        else:\n            print('Invalid input', i)\n        ptr += cmds[stdin[i]]\n        if ptr > len(mem):\n            ptr = ptr - len(mem)\n        elif ptr < 0:\n            ptr = len(mem) + ptr\n        if ptr == len(mem):\n            out.append('+' * len(mem))\n        elif ptr == 0:\n            out.append('-' * len(mem))\n        else:\n            out.append('>' * (ptr - len(mem)) + '[' + '>' * (len(mem) - ptr) + ']' + '<' * (len(mem) - ptr))\n\n    return '\\n'.join(out)\n\n\n\ndef"
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nimport sys\nfrom itertools import islice\n\ndef"
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return stdin"
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n"
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n  '''\n    stdin:\n    5\n    1\n    3\n    20\n    38\n    56\n  '''\n  pass\n"
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return stdout\n"
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return '\\n'.join(stdin)\n"
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    counter = 0\n    for i in range(1, n + 1):\n        if '7' in str(i) or '5' in str(i) or '3' in str(i):\n            counter += 1\n    return str(counter)\n"
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    total = 0\n    for i in range(1, N + 1):\n        total += check_number(i)\n\n    return str(total)\n\n\ndef"
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    nums = range(1, n+1)\n    s = set(n for n in nums if len(set(str(n))) == len(set(list(str(n)))))\n    return len(s)\nprint(solution(input()))\n"
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    \n    for i in range(1, n + 1):\n        if \"7\" in str(i) or \"5\" in str(i) or \"3\" in str(i):\n            count += 1\n    \n    return count\n"
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    total = 0\n    for i in range(1, N + 1):\n        number = str(i)\n        if \"7\" in number or \"5\" in number or \"3\" in number:\n            total += 1\n    return total\n"
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    seven_five_three = set()\n    seven_five = set()\n    five = set()\n    three = set()\n    for i in range(1, n+1):\n        s = str(i)\n        for x in s:\n            if x == '7':\n                seven_five.add(i)\n            if x == '5':\n                five.add(i)\n            if x == '3':\n                three.add(i)\n        if i not in seven_five:\n            seven_five_three.add(i)\n    return len(seven_five_three.intersection(seven_five, five, three))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    num = 0\n    for i in range(1, n+1):\n        if isShichiGoSan(i):\n            num += 1\n    return str(num)\n\n\ndef"
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin)"
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    N = stdin[0]\n    count = 0\n    for x in range(1, int(N)+1):\n        digits = [int(d) for d in str(x)]\n        if (all(d in digits for d in [7,5,3]) and any(d not in [7,5,3] for d in digits)):\n            count += 1\n    return str(count)\n"
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"1\"\n"
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    c = 0\n    for i in range(len(s)):\n        if s[i] == \"1\":\n            c += 1\n    print(c//2)"
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return None"
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.split('\\n')[0]\n"
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \n    return ''"
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return '1'"
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.split()[0]\n"
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin[0]\n    res = 0\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            if stdin[i] == '1':\n                res += 1\n    return res\n"
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    return len(set(s))\n"
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.count('1')"
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return 'APPROVED' if all(n % 2 == 0 for n in [int(i) for i in stdin.split()]) and all(n % 3 == 0 or n % 5 == 0 for n in [int(i) for i in stdin.split()]) else 'DENIED'"
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    l = list(map(int, stdin.split(\"\\n\")[1].split()))\n\n    result = \"APPROVED\" if all([num % 3 == 0 or num % 5 == 0 for num in l]) else \"DENIED\"\n\n    return result"
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    numbers = list(map(int, stdin.split()))\n    even_numbers = [number for number in numbers if number % 2 == 0]\n    if all(num % 3 == 0 or num % 5 == 0 for num in even_numbers):\n        return 'APPROVED'\n    else:\n        return 'DENIED'\n\ndef"
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = [int(s) for s in stdin.split()]\n    print('APPROVED' if all(i % 2 == 0 and i % 3!= 0 and i % 5!= 0 for i in a) else 'DENIED')\n"
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n  a = list(map(int, stdin.split('\\n')))\n  for i in range(0, len(a)):\n    if a[i] % 2 == 0 and (a[i] % 3!= 0 and a[i] % 5!= 0):\n      return 'DENIED'\n  return 'APPROVED'\n"
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    This solution breaks the input into a list of numbers, checks if all are even, and then checks if they are divisible by 3 or 5.\n    \"\"\"\n    numbers = [int(x) for x in stdin.split(\"\\n\")]\n    if all(is_even(x) for x in numbers):\n        if all(x % 3 == 0 or x % 5 == 0 for x in numbers):\n            return \"APPROVED\"\n        return \"DENIED\"\n    return \"DENIED\"\n"
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().rstrip('\\n'))\n    a = list(map(int, stdin.readline().rstrip('\\n').split(' ')))\n\n    # all even numbers are divisible by 3 or 5, so we just need to check if all of them are even\n    if all(x % 2 == 0 for x in a):\n        return 'APPROVED'\n    return 'DENIED'"
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, *ints = map(int, stdin.split())\n    return \"APPROVED\" if all(\n        i % 2 == 0 and i % 3 in (0, 5) for i in ints\n    ) else \"DENIED\"\n"
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    #...\n    return \"APPROVED\" if... else \"DENIED\"\n"
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if stdin[::2].count(\"R\") == stdin[::2].count(\"D\") == stdin[1::2].count(\"U\") == stdin[1::2].count(\"L\") == 1 and stdin.count(\"R\") == stdin.count(\"U\") == stdin.count(\"D\") == stdin.count(\"L\") else \"No\"\n"
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin\n    if (all([(string[i] in 'LDR') or (string[i] in 'UDR') for i in range(0, len(string), 2)])\n            and all([(string[i] in 'LD') or (string[i] in 'RD') for i in range(1, len(string), 2)])):\n        return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    res = 'Yes'\n    dic = {'R': True, 'L': False, 'U': True, 'D': False}\n    for i in range(len(stdin)):\n        if i % 2 == 0:\n            if dic[stdin[i]] == False:\n                res = 'No'\n                break\n        else:\n            if dic[stdin[i]] == True:\n                res = 'No'\n                break\n    return res"
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    S: str = stdin\n    for i in range(0, len(S)):\n        if i % 2 == 1:\n            if S[i] not in \"RUD\":\n                return \"No\"\n        else:\n            if S[i] not in \"LUD\":\n                return \"No\"\n    return \"Yes\"\n"
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return 'Yes' if len(stdin) <= 100 and stdin.count('U') % 2 == stdin.count('R') % 2 == stdin.count('D') % 2 == 0 and stdin.count('L') % 2 == stdin.count('U') % 2 == stdin.count('D') % 2 == 0 else 'No'\n"
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \n    # check for character (character[i]): L, R, U, D\n    # for every character in the string, check if it is equal to L, R, U, D\n    # if all characters are L, R, U, D then return \"Yes\"\n    # if not, return \"No\"\n    \n    # split by the space character\n    characters = stdin.split()\n    \n    # check for character (character[i]): L, R, U, D\n    # for every character in the string, check if it is equal to L, R, U, D\n    # if all characters are L, R, U, D then return \"Yes\"\n    # if not, return \"No\"\n    \n    # first check for odd positions\n    for i in range(1, len(characters), 2):\n        # check if character is L, R, U, D\n        if characters[i]!= \"L\" and characters[i]!= \"R\" and characters[i]!= \"U\" and characters[i]!= \"D\":\n            return \"No\"\n            \n    # check for even positions\n    for i in range(0, len(characters), 2):\n        # check if character is L, R, U, D\n        if characters[i]!= \"R\" and characters[i]!= \"L\" and characters[i]!= \"U\" and characters[i]!= \"D\":\n            return \"No\"\n            \n    return \"Yes\"\n    \n    \n"
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \n    return stdin"
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    left = 0\n    right = 0\n    for char in S:\n        if char == 'L':\n            left += 1\n        if char == 'R':\n            right += 1\n    if left % 2 == 0 or right % 2 == 0:\n        return \"No\"\n    for i in range(len(S)):\n        if i % 2 == 0 and S[i] == 'L':\n            return \"No\"\n        if i % 2 == 1 and S[i] == 'R':\n            return \"No\"\n    return \"Yes\""
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    instruction_list = stdin.split(\"\\n\")[0]\n    instruction_list = instruction_list.split(\" \")\n    is_playable = True\n    for instruction in instruction_list:\n        if instruction == \"L\" or instruction == \"U\":\n            is_playable = False\n            break\n        if instruction == \"R\" or instruction == \"D\":\n            continue\n    if is_playable:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\n\nsolution(stdin)\n"
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return 'Yes' if 'UDLUDR' in stdin else 'No'"
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    (N, A, B, C, D, E) = map(int, stdin.readline().split())\n    arr = [A, B, C, D, E]\n    people = N\n    time = 0\n    while N > 0:\n        time += min(arr)\n        for i in range(1, 5):\n            arr[i] -= min(arr)\n        N -= min(arr)\n        time += 1\n    return time"
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Your code goes here\n    num_people, A, B, C, D, E = map(int, stdin.split())\n    \n    # people = [0 for _ in range(num_people)]\n    time = 0\n    t = 0\n    \n    while True:\n        if num_people == 0:\n            break\n        if t % 2 == 0:\n            time += A\n        else:\n            time += B\n        t += 1\n        if t % 3 == 0:\n            num_people -= C\n        else:\n            num_people -= D\n        if t % 5 == 0:\n            num_people -= E\n        else:\n            num_people += 1\n    return str(time)\n\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B, C, D, E = map(int, stdin.split('\\n')[0].split())\n    max_reach_time = 0\n    for i in range(N):\n        if i < A:\n            max_reach_time += 1\n        elif A <= i < A + B:\n            max_reach_time += 2\n        elif A + B <= i < A + B + C:\n            max_reach_time += 3\n        elif A + B + C <= i < A + B + C + D:\n            max_reach_time += 4\n        elif A + B + C + D <= i < A + B + C + D + E:\n            max_reach_time += 5\n        else:\n            max_reach_time += 6\n    return str(max_reach_time)\n"
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport sys\n\nn, a, b, c, d, e = map(int, sys.stdin.readline().split())\n\nmin_time = 0\n\nwhile True:\n    min_time += 1\n    a -= 1\n    b -= 1\n    c -= 1\n    d -= 1\n    e -= 1\n\n    if a == 0 and b == 0 and c == 0 and d == 0 and e == 0:\n        break\n\nprint(min_time)\n"
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Your code goes here\n    # \n    return stdin"
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B, C, D, E = [int(x) for x in stdin.split(\"\\n\")[0].split()]\n    return str(A + B + C + D + E + max((N - 1) * (A + B + C + D + E), N * E))\n\n\ndef"
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution(\"5\\n3\\n2\\n4\\n3\\n5\")\n    '7'\n    '''\n    N, A, B, C, D, E = map(int, stdin.split())\n    return str(max(A * N - A, B * N - B, C * N - C, D * N - D, E * N - E))\n"
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    stdin = stdin.splitlines()\n    n = int(stdin[0])\n    a, b, c, d, e = [int(i) for i in stdin[1:6]]\n    people = n\n    ans = 0\n    if a + b > d + e:\n        ans += d\n        people -= d\n    else:\n        ans += a\n        people -= a\n    if c + d > e:\n        ans += e\n        people -= e\n    else:\n        ans += c\n        people -= c\n    if people > 0:\n        ans += n\n    return ans\nprint(solution(input()))\n"
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    n: the number of people\n    a: the maximum number of people who can be taken by a train\n    b: the maximum number of people who can be taken by a bus\n    c: the maximum number of people who can be taken by a taxi\n    d: the maximum number of people who can be taken by an airplane\n    e: the maximum number of people who can be taken by a ship\n    '''\n    \n    # init variables\n    n = int(stdin.readline())\n    a, b, c, d, e = map(int, stdin.readline().strip().split())\n    \n    # min time\n    time = 0\n    \n    # for each minute\n    for i in range(1, n + 1):\n        # train\n        time += 1\n        if a > 0:\n            a -= 1\n        else:\n            a = 0\n            # bus\n            time += 1\n            if b > 0:\n                b -= 1\n            else:\n                b = 0\n                # taxi\n                time += 1\n                if c > 0:\n                    c -= 1\n                else:\n                    c = 0\n                    # airplane\n                    time += 1\n                    if d > 0:\n                        d -= 1\n                    else:\n                        d = 0\n                        # ship\n                        time += 1\n                        if e > 0:\n                            e -= 1\n                        else:\n                            e = 0\n    return time\n    \n    \n"
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"2\"\n"
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    n = int(stdin.readline().strip())\n    count = 0\n    \n    for i in range(1, n+1):\n        if i == 1:\n            if 0 <= int(stdin.readline().strip()) <= 9:\n                count += 1\n        elif i == n:\n            if 9 >= int(stdin.readline().strip()) >= 0:\n                count += 1\n        else:\n            if 0 <= int(stdin.readline().strip()) <= 9:\n                count += 1\n            if 9 >= int(stdin.readline().strip()) >= 0:\n                count += 1\n\n    return count"
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    n = int(stdin)\n    ans = 0\n    for i in range(n):\n        if i < n-1:\n            ans += pow(10, i, 9*10+9)\n        if i >= n-1:\n            ans += 1\n    print(ans % 1000000007)\n    return ans % 1000000007"
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return \"You can't count them!\""
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"2\\n1\")\n    2\n    \"\"\"\n    n = int(stdin)\n    count = 2\n    for _ in range(n - 1):\n        count = (count + 1) * 2\n    return count % (10 ** 9 + 7)\n"
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    result = 0\n    for i in range(1, N + 1):\n        if 0 <= i <= 9:\n            result += 1\n        if i == 9:\n            result += 1\n    return result % (10 ** 9 + 7)\n"
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return str(divisor(int(stdin)))\n\ndef"
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"The main function that prints the final output to STDOUT.\n    Args:\n        stdin (str): The final standard input\n    Returns:\n        str: The final output to be printed to STDOUT.\n    \"\"\"\n    pass"
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return 1\n    else:\n        nums = [0, 9]\n        for i in range(2, n + 1):\n            if i % 2 == 1:\n                nums.append(nums[i - 1] % 10)\n            else:\n                nums.append(nums[i - 1] * 2 % 10)\n        ans = 0\n        for i in range(1, len(nums)):\n            if nums[i] == 0:\n                ans += 1\n            if nums[i] == 9:\n                ans += 1\n        return ans % (10 ** 9 + 7)\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return str(2)\n    return str(answer)"
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n  '''\n  Returns the minimum prime number greater than or equal to X.\n  '''\n  X = int(stdin)\n  \n  def isPrime(num: int) -> bool:\n    for i in range(2, int(math.sqrt(num)) + 1):\n      if num % i == 0:\n        return False\n    return True\n\n  i = X\n  while True:\n    if isPrime(i):\n      break\n    i += 1\n  \n  return i\n"
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    found = False\n    while not found:\n        for i in range(2, x + 1):\n            if x % i == 0:\n                break\n        else:\n            found = True\n        x += 1\n    return str(x - 1)"
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin)\n    for i in range(num + 1, 2 * num + 1):\n        if is_prime(i):\n            return str(i)\n    return str(2 * num + 1)\ndef"
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    prime_numbers = [2]\n    while len(prime_numbers) < x:\n        prime_numbers.append(prime_numbers[-1] + 2)\n        for i in range(2, int(prime_numbers[-1] ** 0.5) + 1):\n            if prime_numbers[-1] % i == 0:\n                break\n        else:\n            prime_numbers.append(prime_numbers[-1] + 2)\n    return str(prime_numbers[x - 1])\n"
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \n\"\"\""
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \n    n = int(stdin)\n\n    if n == 1:\n        return '2'\n\n    for i in range(n - 1, 1, -1):\n        if i % 2!= 0 and isPrime(i):\n            return str(i)\n\ndef"
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    primes = [2]\n    i = 2\n    while primes[-1] < x:\n        i += 1\n        if isPrime(i):\n            primes.append(i)\n    return primes[-1]\n\ndef"
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Get user input\n    user_input = stdin\n\n    # Convert input to integer\n    user_input = int(user_input)\n\n    # Declare variables\n    prime_count = 0\n    prime_array = []\n    prime_array_len = 0\n\n    # Find prime numbers\n    for i in range(user_input):\n        if isPrime(i):\n            prime_array.append(i)\n            prime_array_len += 1\n\n    # Check for no prime numbers\n    if prime_array_len == 0:\n        return \"impossible\"\n\n    # Find minimum value\n    min_val = min(prime_array)\n\n    # Return minimum value\n    return min_val\n"
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    if x < 2:\n        return '2'\n    else:\n        for i in range(2,x+1):\n            if i == x:\n                return i\n            elif i%x == 0:\n                return solution(x)"
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def isPrime(n):\n        if n<2:\n            return False\n        for i in range(2,n):\n            if n%i==0:\n                return False\n        return True\n    for i in range(2,int(stdin)+1):\n        if isPrime(i):\n            return str(i)"
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nfrom sys import stdin"
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    inp_str = stdin.split(\"\\n\")\n    n = int(inp_str[0])\n    arr = [int(num) for num in inp_str[1].split(\" \")]\n\n    # since the length of arr is even, there must be at least two different numbers\n    # we can use a dict to store the pairs and their frequencies\n    d = dict()\n    for num in arr:\n        if num in d:\n            d[num] += 1\n        else:\n            d[num] = 1\n\n    # check if there are only two different numbers, if not, return -1\n    if len(d) < 2:\n        return -1\n\n    # if there are only two different numbers, then we can simply replace the other one to make it /\\/\\/\\/\n    else:\n        # since we know there are two different numbers, the second frequency must be one\n        d.pop(max(d.keys()))\n        # return the minimum frequency\n        return min(d.values())"
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, *v = map(int, stdin.split())\n    if n % 2 == 1:\n        return 'Impossible'\n    if v[0]!= v[1]!= v[2]:\n        return 'Impossible'\n    n = len(v)\n    m = v[1] - v[0]\n    for i in range(2, n):\n        if v[i] - v[i - 2]!= m:\n            return 'Impossible'\n    return f'{m}'\n\n\ndef"
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def is_good(sequence: str) -> bool:\n        a = sequence[0:-2]\n        b = sequence[2:]\n        seen = set()\n        for x in a:\n            if x not in seen:\n                seen.add(x)\n            else:\n                return False\n        for x in b:\n            if x not in seen:\n                seen.add(x)\n            else:\n                return False\n        return True\n\n    def gen_seq(sequence: str) -> str:\n        a = sequence[0:-2]\n        b = sequence[2:]\n        c = []\n        for i in range(len(b)):\n            c.append(a[i])\n            c.append(b[i])\n        if len(b)!= len(a):\n            c.append(b[-1])\n        return \"\".join(c)\n\n    n = int(stdin)\n    sequence = stdin[:n]\n    if is_good(sequence):\n        print(0)\n        return\n    i = n - 1\n    while not is_good(sequence[i:]):\n        i -= 2\n    print(i + 1)\n    return\n\n\nsolution(input())\n"
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, v = map(int, stdin.split('\\n')[0].split())\n    seq = list(map(int, stdin.split('\\n')[1].split()))\n    freq = dict()\n    for x in seq:\n        if x in freq:\n            freq[x] += 1\n        else:\n            freq[x] = 1\n    if len(set(freq))!= len(freq):\n        return 1\n    ans = 0\n    for i in range(n - 2):\n        if seq[i] == seq[i + 2]:\n            ans += 1\n    return ans\n"
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    if len(a) % 2 == 0 or len(a) < 2:\n        return \"0\"\n    count = 0\n    for i in range(len(a)):\n        if a[i]!= i + 2:\n            if a[i] in a[i + 2:]:\n                count += 1\n            else:\n                count += 2\n    return str(count // 2)\n\na = [3,1,3,2]\nfor i in range(len(a)):\n    if a[i]!= i+2:\n        if a[i] in a[i+2:]:\n            count+=1\n        else:\n            count+=2\n\nprint(count//2)\n\n###\ndef"
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4\n   ... 3 1 3 2\n   ... ''')\n    '1'\n    \"\"\"\n    n = int(stdin.splitlines()[0])\n    sequence = list(map(int, stdin.splitlines()[1].split()))\n    sequence = sorted(sequence)\n    length = len(sequence)\n    if length < 3:\n        return 0\n    else:\n        count = 0\n        index = 0\n        while index < length - 2:\n            if sequence[index] == sequence[index+2]:\n                break\n            else:\n                index += 1\n        count += index\n        index = 0\n        while index < length - 2:\n            if sequence[index] == sequence[index+2]:\n                index += 1\n            else:\n                break\n        if index == length - 2:\n            count += 1\n        else:\n            count += 2\n    return str(count)\n"
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    v = list(map(int, stdin.split()))\n    numbers = list(range(1, n+1))\n    seen = {}\n    replaced = 0\n    for i in v:\n        if i not in seen:\n            seen[i] = 1\n        else:\n            seen[i] += 1\n        if seen[i] == 3:\n            if v.count(i) == 2:\n                replaced += 1\n            else:\n                for j in range(1, n+1):\n                    if v[j] == i:\n                        v[j] = v[j+2]\n            seen[i] = 1\n    print(replaced)\n    return \"\"\n"
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    seq = [int(stdin) for stdin in stdin.split(' ')]\n    seq.sort()\n    for i in range(0, n, 2):\n        if seq[i]!= seq[i + 2]:\n            return 1\n    return 0"
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    seq = [int(i) for i in stdin.readline().strip().split(\" \")]\n    counter = Counter(seq)\n    if n % 2!= 0:\n        return n\n    if len(counter) == 2:\n        return 1\n    if len(counter) == 3:\n        return 2\n    else:\n        return n"
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"5 100 90 80\\n98\\n40\\n30\\n21\\n80\")\n    23\n    \"\"\"\n    N, A, B, C = list(map(int, stdin.split(\"\\n\")[:-1]))\n    bamboos = sorted(list(map(int, stdin.split(\"\\n\")[1:])))\n    print(bamboos)\n    ext_cost = 0\n    com_cost = 0\n    short_cost = 0\n\n    for bb in bamboos:\n        if bb <= A:\n            if bb < B:\n                short_cost += 1\n            else:\n                ext_cost += 1\n        else:\n            com_cost += 10\n    \n    print(ext_cost, short_cost, com_cost)\n    return ext_cost + short_cost + com_cost"
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return str.\n\n    >>> solution('5 100 90 80\\n98\\n40\\n30\\n21\\n80')\n    '23'\n    \"\"\"\n    # Your code here\n    a = list(map(int, stdin.split()))\n    res = 0\n    lengths = sorted(set(a))\n    for l in lengths:\n        if a.count(l) == 3:\n            res += l\n        elif a.count(l) == 2:\n            res += l\n            res += l\n        elif a.count(l) == 1:\n            res += l\n            res += l\n            res += l\n    print(res)\n"
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return stdin"
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    "
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return \"\"\n"
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    'Compute solution for the given input'\n    n, a, b, c = map(int, stdin.split())\n    \n    if n == 1:\n        return f'{0}\\n'\n    elif n == 2:\n        return f'{a - c}\\n'\n    elif n == 3:\n        return f'{a - c}\\n'\n    else:\n        lengths = map(int, stdin.split())\n        # If we have length n, then we have lengths 1..n\n        lengths = sorted(lengths)\n        best_value = None\n        for i in range(n - 2):\n            for j in range(i + 1, n - 1):\n                l = lengths[i] + lengths[j]\n                value = a - c if a >= c + l else 10 * (a - c) + (b + l)\n                if best_value is None or best_value > value:\n                    best_value = value\n        return f'{best_value}\\n'\n        \n"
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # if all are less than 4, it will be better to use 1 for each\n    # if all are above 4, it will be better to use 0 for each\n    # between 4 and 6, use 1 for all\n    # if all are above 6, use 0 for all\n    # if there are multiple solutions, return the one with the lowest cost\n    n, a, b, c = [int(n) for n in stdin.split(\" \")]\n    costs = [a, b, c]\n    solutions = []\n    for p in range(n):\n        for q in range(n):\n            for r in range(n):\n                if p!= q and p!= r and q!= r:\n                    new_costs = [x + 1 for x in costs]\n                    for i, j, k in zip([p, q, r], [a, b, c], new_costs):\n                        if i < 4:\n                            j += 1\n                        elif i >= 4:\n                            j -= 1\n                        if j < 2:\n                            k += 1\n                        elif j >= 2:\n                            k -= 1\n                    solutions.append(new_costs)\n    solutions = sorted(solutions, key=lambda x: sum(x))\n    return str(sum([sum(x) for x in solutions]))\n"
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B, C = [int(i) for i in stdin.split()]\n    bamboos = []\n    for _ in range(N):\n        bamboos.append(int(stdin))\n    # print(bamboos)\n    total_cost = 0\n    total_cost += A\n    bamboos.sort()\n    total_cost += B\n    bamboos.sort(reverse=True)\n    total_cost += C\n    total_cost += (bamboos[0] - B)\n    bamboos[0] = B\n    bamboos.sort()\n    total_cost += (bamboos[0] - A)\n    bamboos[0] = A\n    bamboos.sort()\n    total_cost += (bamboos[0] - C)\n    bamboos[0] = C\n    return total_cost\n    # return bamboos\n    # print(bamboo)\n    # return cost"
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, c = [int(i) for i in stdin.split()]\n    ans = []\n    for i in range(n):\n        if a < b < c:\n            ans.append(i)\n    return ans\n\"\"\""
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s = stdin.split('\\n')\n    n = int(n)\n    s = s.replace('\\n', '')\n    # make a list of all characters in string S\n    s_list = list(s)\n    for i in range(len(s_list)):\n        # shift the index of the character by n, wrapping around if necessary\n        index = (i + n) % len(s_list)\n        # print the shifted index\n        print(s_list[index], end='')\n    return '\\n'\n"
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n  '''\n  Your solution here\n  '''\n  n = int(stdin)\n  s = stdin.strip()\n  \n  ans = \"\"\n  for c in s:\n    ans = chr(ord(c) + n) + ans\n  return ans"
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    stdin = stdin.split('\\n')\n    N, S = stdin[0], stdin[1]\n    N = int(N)\n    \n    res = ''\n    \n    for i in range(len(S)):\n        res += chr((ord(S[i]) - ord('A') + N) % 26 + ord('A'))\n    print(res)\n    return res\nsolution(stdin)"
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    num_shifts: int = int(stdin.readline().rstrip('\\n'))\n    input_string: str = stdin.readline().rstrip('\\n')\n\n    # We can think of shifts as going from a -> z\n    shift_val: int = ord(input_string[0]) - ord('A')\n    new_letter: str = chr(ord(input_string[0]) + num_shifts)\n    new_shift: int = ord(new_letter) - ord('A')\n    new_val: int = (new_shift + shift_val) % 26\n    new_letter: str = chr(ord('A') + new_val)\n    return new_letter\n\"\"\"\n"
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin[0]\n    n = int(stdin[1])\n    a_ = a[n:] + a[:n]\n    return a_"
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    \n    str_lst = list(stdin.split()[1])\n    shift = int(stdin.split()[0])\n    shifted_str = []\n    for char in str_lst:\n        if ord(char) + shift > 90:\n            char = chr(ord(char) + shift - 26)\n        elif ord(char) + shift <= 90:\n            char = chr(ord(char) + shift)\n        shifted_str.append(char)\n    return \"\".join(shifted_str)\n"
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    n = int(stdin.strip())\n    s = stdin.strip().lower()\n    res = []\n    for c in s:\n        res.append(chr(ord(c) + n))\n    return \"\".join(res)\n"
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return ''.join(chr(ord(x) + int(stdin[0])) for x in stdin[1])\n"
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[1:]\n    result = []\n    for ch in s:\n        result.append(chr(ord(ch) + n))\n    return ''.join(result)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def is_prime(n: int):\n        if n < 2:\n            return False\n        if n == 2:\n            return True\n        for i in range(2, int(math.sqrt(n) + 1)):\n            if n % i == 0:\n                return False\n        return True\n\n    def gcd(a: int, b: int) -> int:\n        if b == 0:\n            return a\n        return gcd(b, a % b)\n\n    primes = [2]\n    n = stdin.readline()\n    b = list(map(int, stdin.readline().split()))\n    n = int(n)\n    for i in range(3, 275010):\n        if is_prime(i):\n            primes.append(i)\n\n    numbers = []\n    for i in range(n):\n        number = b[2 * i]\n        for j in range(i, n):\n            number = number * b[2 * j + 1]\n        numbers.append(number)\n\n    a = b\n    while True:\n        q = [i for i in range(n)]\n        for i in range(n):\n            for j in range(i + 1, n):\n                if numbers[i] == numbers[j]:\n                    q.remove(i)\n                    q.remove(j)\n                    break\n        if len(q) == 0:\n            break\n        for i in range(n):\n            if i in q:\n                if gcd(numbers[i], numbers[i + 1]) == 1:\n                    a[i * 2] = primes[numbers[i]]\n                    a[i * 2 + 1] = primes[numbers[i + 1]]\n                    break\n    return''.join(map(str, a))\n"
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return''.join(map(str, [int(i) for i in stdin.split(' ')]))\n    pass\n"
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return''.join(str(i) for i in range(int(stdin.split()[0]),0,-1) if isprime(i))\n\ndef"
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n = int(stdin)\n    a = list(map(int, stdin.split(' ')))\n    b = a\n    d = list(map(int, stdin.split(' ')))\n    for i in range(n):\n        b[i] = a[i]\n        if a[i] == 2:\n            p = 2\n        else:\n            p = 3\n        while a[i] % p == 0:\n            b.append(p)\n            a[i] /= p\n    print(b)\n    return''.join(list(map(str, a)))\n"
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Implementation of the Boyer-Moore Majority Vote algorithm.\n\n    Parameters\n    ----------\n    stdin : str\n        Input string.\n\n    Returns\n    -------\n    str\n        A string representing the array which was formed from the input.\n\n    Examples\n    --------\n    >>> solution('3 5 2 3 2 4')\n    '3 4 2'\n    >>> solution('1')\n    '199999'\n    >>> solution('2750131 199999')\n    '199999'\n    \"\"\"\n\n    # Preprocessing\n    n = int(stdin.readline())\n    b = [int(x) for x in stdin.readline().split(' ')]\n\n    # The algorithm\n    p = [2]  # 2 is the first prime\n    a = b\n    while True:\n        b = [x for x in a]  # b is initialized with a, it will be used in the algorithm\n        for i in range(n):\n            if a[i] % p[-1] == 0:\n                j = 0\n                while j < len(p):\n                    if a[i] % p[j]!= 0:\n                        break\n                    j += 1\n                if j == len(p):\n                    a[i] += 1\n                    continue\n                else:\n                    p.append(a[i])\n                    a[i] = b[i] // p[-1]\n        if p[-1] > a[-1]:\n            break\n\n    return''.join([str(x) for x in a])\n"
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def is_prime(num: int):\n        if num <= 1:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    n = int(stdin.split()[0])\n    arr = list(map(int, stdin.split()[1:]))\n    p = 1\n    i = 0\n    while n > 0:\n        if is_prime(p):\n            arr.append(p)\n            n -= 1\n            p = p + 1\n        else:\n            arr.append(max(arr[i + 1:]))\n            arr.pop(i + 1)\n            i += 1\n            if i == len(arr):\n                i = 0\n\n    return \" \".join(map(str, arr))\n"
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    l = [int(i) for i in stdin.readline().split()]\n    assert(len(l) == 2*n)\n    p = [i for i in range(2, 2750131+1)]\n    for i in range(n):\n        if l[i] in p:\n            p.remove(l[i])\n    \n    for i in range(n):\n        l[i] = l[i] // p[0] * p[0]\n    for i in range(n):\n        j = 0\n        while l[i] > p[j] ** 2:\n            j += 1\n        if p[j] ** 2 < l[i]:\n            l[i] = p[j]\n    print(' '.join([str(i) for i in l[:n]]))\n    print(' '.join([str(i) for i in l[n:]]))\n    return ''"
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3 5 2 3 2 4\n   ... ''')\n    '3 4 2'\n    \"\"\"\n    from math import sqrt\n    n = int(stdin)\n    b = list(map(int, stdin.split()))\n\n    p = [2, 3]\n    for i in range(5, 275010):\n        if sqrt(i) % 1 == 0:\n            p.append(i)\n        for j in p:\n            if i % j == 0:\n                break\n        else:\n            p.append(i)\n    print(' '.join(map(str, p[:2*n])))\n    return None\n"
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds array $a$ from array $b$ via the sequence of operations.\"\"\"\n    n = int(stdin.readline())\n    b = list(map(int, stdin.readline().split()))\n    a = b[:]\n    \n    while True:\n        while True:\n            for i in range(n):\n                if is_prime(a[i]):\n                    if a[i] == b[i]:\n                        continue\n                    p = b[i]\n                    while p in a:\n                        p = next_prime(p)\n                    a.append(p)\n                    break\n            else:\n                break\n        for i in range(n):\n            if is_prime(a[i + n]):\n                if a[i + n] == b[i + n]:\n                    continue\n                p = b[i + n]\n                while p in a:\n                    p = next_prime(p)\n                a.append(p)\n                break\n        else:\n            break\n        \n    a = a[:n] + list(reversed(a[n:]))\n    \n    return''.join(map(str, a))\n"
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    q = [i for i in range(1, n + 1)]\n    t = []\n    while len(q) > 0:\n        c = max(a[i] for i in q if i not in t)\n        t.append(c)\n        q.remove(c)\n        p = q[:k]\n        p.sort(key=lambda i: abs(i - c))\n        t.append(p[0])\n        q.remove(p[0])\n    return ''.join(map(str, t))"
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    a = list(map(int, stdin.split(' ')))\n    res = '0' * n\n    res = list(map(lambda x: '1' if x == max(a) else '2', a))\n    for i in range(k):\n        res = list(map(lambda x, y: x + y, [list(map(lambda x: x[1], res))] * 2, [res] * 2))\n    return ''.join(res)"
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(5 2)\n    11111\n    >>> solution(5 1)\n    21112\n    >>> solution(7 1)\n    1121122\n    >>> solution(5 1)\n    21112\n    \"\"\"\n\n    pass\n"
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = stdin.split(' ')\n    n, k = int(n), int(k)\n    s = stdin.split(' ')\n    for i in range(n):\n        s[i] = int(s[i])\n    ans = ''\n    while True:\n        k = min(n, k)\n        tmp = [x for x in range(n) if x not in ans]\n        s = sorted(tmp, key=lambda x: s[x])\n        for i in s:\n            ans += str(i + 1)\n            if len(ans) == n:\n                return ans\n\n        k = min(n, k)\n        tmp = [x for x in range(n) if x not in ans]\n        s = sorted(tmp, key=lambda x: s[x])\n        for i in s[::-1]:\n            ans += str(i + 1)\n            if len(ans) == n:\n                return ans\n\n        k = min(n, k)\n        tmp = [x for x in range(n) if x not in ans]\n        s = sorted(tmp, key=lambda x: s[x])\n        for i in s:\n            ans += str(i + 1)\n            if len(ans) == n:\n                return ans\n\n        k = min(n, k)\n        tmp = [x for x in range(n) if x not in ans]\n        s = sorted(tmp, key=lambda x: s[x])\n        for i in s[::-1]:\n            ans += str(i + 1)\n            if len(ans) == n:\n                return ans\n"
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = [int(x) for x in stdin.split()]\n    a.sort()\n    res = []\n    while len(a) > 0:\n        s = a.pop(0)\n        c = a[:k]\n        a = a[k:]\n        c.sort()\n        c = c[::-1]\n        if len(c) < k:\n            c += [s] * (k - len(c))\n        if len(c) == 1:\n            res.append(1)\n            continue\n        res.append(c.pop())\n    return ''.join(str(x) for x in res)\n"
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split(' ')))\n    s = list(map(int, stdin.split(' ')))\n    b = [1 for _ in range(n)]\n    b[0] = 2\n    for _ in range(k):\n        cnt = [0, 0]\n        for i in range(n):\n            if b[i] == 1:\n                cnt[0] += s[i]\n            else:\n                cnt[1] += s[i]\n        if cnt[0] > cnt[1]:\n            b[s.index(min(s[j] for j in range(n) if b[j] == 1))] = 2\n        elif cnt[0] == cnt[1]:\n            for i in range(n):\n                if b[i] == 1:\n                    b[s.index(max(s[j] for j in range(n) if b[j] == 1))] = 2\n    return ''.join(str(x) for x in b)\n"
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    if n == 1:\n        return '1' if a[0] == 1 else '2'\n\n    # Initialize the row with elements from 1 to n.\n    row = [i + 1 for i in range(n)]\n\n    # Start the moves.\n    for _ in range(k):\n        # Find the left-most and right-most players from the row.\n        left = max(i for i in range(n) if row[i]!= -1)\n        right = min(i for i in range(n) if row[i]!= -1)\n\n        # Find the players on the left and right of the left-most and right-most players.\n        left_n = (left - 1) - (left > 0 and row[left - 1]!= -1)\n        right_n = (right + 1) - (right < n - 1 and row[right + 1]!= -1)\n\n        # Find the first player on the left and right.\n        first = left_n if left_n!= -1 else right_n\n        if first == -1:\n            break\n        second = right_n if right_n!= -1 else left_n\n\n        # Move the selected players.\n        row[first] = -1\n        row[second] = a[first - 1]\n        if first!= second:\n            row[first] = a[second - 1]\n\n    # Convert row to a string.\n    return ''.join(str(x) for x in row)\n"
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    skill_list = list(map(int, stdin.split()))\n    first_team = ['1'] * n\n    second_team = ['2'] * n\n    while True:\n        # first team\n        for i in range(n):\n            if first_team[i] == '1':\n                for j in range(i - k, i + k + 1):\n                    if 0 <= j < n and first_team[j] == '2':\n                        first_team[j] = '1'\n        # second team\n        for i in range(n):\n            if second_team[i] == '2':\n                for j in range(i - k, i + k + 1):\n                    if 0 <= j < n and second_team[j] == '1':\n                        second_team[j] = '2'\n        # finish\n        if sum(first_team) == 0:\n            break\n        if sum(second_team) == 0:\n            break\n    return ''.join(first_team)\n"
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = stdin.split()\n    students = [int(stdin) for i in range(int(n))]\n    return n\n"
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(' ')]\n    a = [int(x) for x in stdin.split(' ')]\n    a.sort()\n    a_i = 0\n    res = []\n    while a_i < n:\n        l, r = 0, 0\n        while a_i < n and (l < k or r < k):\n            if l < k:\n                l += a[a_i]\n            if r < k:\n                r += a[n - a_i - 1]\n            a_i += 1\n        res.append(1 if l >= k else 2)\n    return ''.join([str(i) for i in res])\n"
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Finds the number of different monotonic renumerations of a list.\n    \"\"\"\n    a = list(map(int, stdin.split()))\n    n = len(a)\n    dp = [0] * (n + 1)\n    dp[1] = 1\n    for i in range(1, n):\n        if a[i] == a[i - 1]:\n            dp[i + 1] = 2 * dp[i]\n        else:\n            dp[i + 1] = dp[i]\n    if n == 1:\n        return 1\n    ans = dp[-1]\n    for i in range(1, n):\n        if a[i] == a[i - 1]:\n            ans = (ans + dp[i]) % MOD\n        else:\n            ans = (ans + dp[i] - 1) % MOD\n    return ans % MOD\n"
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n  n, *a = map(int, stdin.split())\n  cnt = {}\n  for i in range(n):\n    cnt[a[i]] = cnt.get(a[i], 0) + 1\n  res = 1\n  for v in cnt.values():\n    res *= (v + 1) % (10 ** 9 + 7)\n  return str(res % (10 ** 9 + 7))\n\ndef"
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \n    a = [int(x) for x in stdin.split('\\n')[0].split(' ')]\n    \n    return str(comb(len(a),2))\n\n\nprint(solution(input()))\n\nhttps://app.codility.com/demo/results/trainingQN3H8S-SVP/\n"
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = [int(x) for x in stdin.split()]\n    b = [0] * len(a)\n    c = [0] * len(a)\n    b[0] = 0\n    for i in range(1, len(a)):\n        if a[i] == a[i - 1]:\n            c[i] = c[i - 1]\n        else:\n            c[i] = c[i - 1] + 1\n            b[i] = b[i - 1] + 1\n            if a[i] > a[i - 1]:\n                b[i] = b[i - 1] + 1\n            else:\n                b[i] = b[i - 1]\n    # print(b)\n    # print(c)\n    ans = b[-1] - 1\n    for i in range(len(b)):\n        ans *= b[i]\n        ans %= 998244353\n    return str(ans)\n\n\ndef"
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n\n    return \"No, this isn't right, as it's not monotonic.\"\n"
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    data = [int(x) for x in stdin.split()]\n    print(solve(data))\n\n\ndef"
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    pass\n"
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n"
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"The solution function to the monotonic array problem\"\"\"\n    pass\n"
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\""
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    seen = set()\n    for i in a:\n        for j in a:\n            if i+j not in seen:\n                seen.add(i+j)\n    print(len(seen))\n    '''\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    res = 0\n    if n <= 2:\n        return 0\n\n    for i in range(n):\n        for j in range(n):\n            if (i!= j) and (pow(2, a[i] + a[j]) - (a[i] + a[j]) > 0):\n                res += 1\n                break\n\n    return res\n"
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n\n    return stdin\n"
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return \"\"\n"
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Solves the problem \"Minimize sequence\" from the BLEIC 2020.\n    :param stdin: string. Input of the problem.\n    :return: string. Solution.\n    '''\n    return \"\"\n\n\ndef"
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport math\n\ndef"
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n\n    pass\n"
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4 7 1 5 4 9\\n\")\n    '1'\n    \"\"\"\n    n = int(stdin)\n    seq = list(map(int, stdin.split()))\n    if n == 1:\n        print(0)\n    else:\n        for i in range(n):\n            for j in range(i+1, n):\n                if seq[i] + seq[j] & (seq[i] + seq[j] - 1) == 0:\n                    print(j - i)\n                    exit()\n        print(-1)\n"
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\nfrom typing import List\n\ndef"
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def is_good_sequence(sequence: str):\n        for i in range(len(sequence)):\n            for j in range(len(sequence)):\n                if i!= j:\n                    if int(sequence[i]) + int(sequence[j]) == 2 ** int(log2(int(sequence[i]) + int(sequence[j]))):\n                        return True\n        return False\n\n    def is_good_sequence_2(sequence: str):\n        for i in range(len(sequence)):\n            for j in range(len(sequence)):\n                if i!= j:\n                    if int(sequence[i]) + int(sequence[j]) == 2 ** int(log2(int(sequence[i]) + int(sequence[j]))):\n                        return True\n        return False\n\n    def delete_elements(sequence: str):\n        result = 0\n        for i in range(len(sequence)):\n            for j in range(len(sequence)):\n                if i!= j:\n                    if int(sequence[i]) + int(sequence[j]) == 2 ** int(log2(int(sequence[i]) + int(sequence[j]))):\n                        result += 1\n                        break\n        return result\n\n    sequence = stdin.split('\\n')[1]\n    while not is_good_sequence_2(sequence):\n        sequence = str(delete_elements(sequence))\n    return sequence\n"
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Returns the maximum number of cubes that can be removed from the desk.\n    '''\n    n = int(stdin)\n    print(max([n-i-1 for i in range(0, n) if int(stdin[i]) == 1]))\n"
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return f\"{solution_solve(stdin)}\"\n\n\ndef"
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n  pass\n"
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = stdin\n    s = '0'\n    for i in range(len(N)):\n        s += N[i]\n    s = s[::-1]\n    x = 0\n    for i in range(len(s)):\n        if s[i] == '1':\n            x += 1\n        else:\n            x -= 1\n    return x\n\nprint(solution(input()))\n\n\ndef"
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin)\n    if num == 0:\n        return \"0\"\n    elif num == 1:\n        return \"1\"\n    else:\n        # (num - 1) = (num - 2) + (num - 1)\n        num -= 1\n        num = (num - 1) + num\n        # Example\n        # (num - 1) = (num - 2) + (num - 1)\n        # (num - 2) = (num - 3) + (num - 2)\n        # (num - 3) = (num - 4) + (num - 3)\n        #...\n        # num = (num - 1) + num\n        # num = (num - 2) + (num - 1) + num\n        # num = (num - 3) + (num - 2) + (num - 1) + num\n        # num = (num - 4) + (num - 3) + (num - 2) + (num - 1) + num\n        #...\n        # num = (num - 1) + (num - 2) + (num - 3) + (num - 4) +... + num\n        # num = (num - 1) * num\n        # num = (num - 2) * (num - 1) + num\n        # num = (num - 3) * (num - 2) + (num - 1) + num\n        # num = (num - 4) * (num - 3) + (num - 2) * (num - 1) + num\n        #...\n        # num = (num - 1) * (num - 2) * (num - 3) *... * num\n        # num = (num - 1) * (num - 1) + num\n        # num = (num - 1) * (num - 1) + 1\n        # num = (num - 1) * (num - 1) + 2\n        #...\n        # num = (num - 1) * (num - 1) + num * (num - 1)\n        # num = num * (num - 1) + 1\n        # num = num * (num - 1) + 2\n        #...\n        # num = num * (num - 1) + num * (num - 1)\n        # num = (num - 1) ** 2 + 1\n        # num = (num - 1) ** 2 + 2\n        #...\n        # num = (num - 1) ** 2 + num * (num - 1)\n        # num = num ** 2 + 1\n        # num = num ** 2 + 2\n        #...\n        # num = num ** 2 + num * (num - 1)\n        # num = (num - 1) ** 3 + 1\n        # num = (num - 1) ** 3 + 2\n        #...\n        # num = (num - 1) ** 3 + num * (num - 1)\n        # num = num ** 3 + 1\n        # num = num ** 3 + 2\n        #...\n        # num = num ** 3 + num * (num - 1)\n        # num = (num - 1) ** 4 + 1\n        # num = (num - 1) ** 4 + 2\n        #...\n        # num = (num - 1) ** 4 + num * (num - 1)\n        # num = num ** 4 + 1\n        # num = num ** 4 + 2\n        #...\n        # num = num ** 4 + num * (num - 1)\n        # num = (num - 1) ** 5 + 1\n        # num = (num - 1) ** 5 + 2\n        #...\n        # num = (num - 1) ** 5 + num * (num - 1)\n        # num = num ** 5 + 1\n        # num = num ** 5 + 2\n        #...\n        # num = num ** 5 + num * (num - 1)\n        # num = (num - 1) ** 6 + 1\n        # num = (num - 1) ** 6 + 2\n        #...\n        # num = (num - 1) ** 6 + num * (num - 1)\n        # num = num ** 6 + 1\n        # num = num ** 6 + 2\n        #...\n        # num = num ** 6 + num * (num - 1)\n        # num = (num - 1) ** 7 + 1\n        # num = (num - 1) ** 7 + 2\n        #...\n        # num = (num - 1) ** 7 + num * (num - 1)\n        # num = num ** 7 + 1\n        # num = num ** 7 + 2\n        #...\n        # num = num ** 7 + num * (num - 1)\n        # num = (num - 1) ** 8 + 1\n        # num = (num - 1) ** 8 + 2\n        #...\n        # num = (num - 1) ** 8 + num * (num - 1)\n        # num = num ** 8 + 1\n        # num = num ** 8 + 2\n        #...\n        # num = num ** 8 + num * (num - 1)\n        # num = (num - 1) ** 9 + 1\n        # num = (num - 1) ** 9 + 2\n        #...\n        # num = (num - 1) ** 9 + num * (num - 1)\n        # num = num ** 9 + 1\n        # num = num ** 9 + 2\n        #...\n        # num = num ** 9 + num * (num - 1)\n        # num = (num - 1) ** 10 + 1\n        # num = (num - 1) ** 10 + 2\n        #...\n        # num = (num - 1) ** 10 + num * (num - 1)\n        # num = num ** 10 + 1\n        # num = num ** 10 + 2\n        #...\n        # num = num ** 10 + num * (num - 1)\n        # num = (num - 1) ** 11 + 1\n        # num = (num - 1) ** 11 + 2\n        #...\n        # num = (num - 1) ** 11 + num * (num - 1)\n        # num = num ** 11 + 1\n        # num = num ** 11 + 2\n        #...\n        # num = num ** 11 + num * (num - 1)\n        # num = (num - 1) ** 12 + 1\n        # num = (num - 1) ** 12 + 2\n        #...\n        # num = (num - 1) ** 12 + num * (num - 1)\n        # num = num ** 12 + 1\n        # num = num ** 12 + 2\n        #...\n        # num = num ** 12 + num * (num - 1)\n        # num = (num - 1) ** 13 + 1\n        # num = (num - 1) ** 13 + 2\n        #...\n        # num = (num - 1) ** 13 + num * (num - 1)\n        # num = num ** 13 + 1\n        # num = num ** 13 + 2\n        #...\n        # num = num ** 13 + num * (num - 1)\n        # num = (num - 1) ** 14 + 1\n        # num = (num - 1) ** 14 + 2\n        #...\n        # num = (num - 1) ** 14 + num * (num - 1)\n        # num = num ** 14 + 1\n        # num = num ** 14 + 2\n        #...\n        # num = num ** 14 + num * (num - 1)\n        # num = (num - 1) ** 15 + 1\n        # num = (num - 1) ** 15 + 2\n        #...\n        # num = (num - 1) ** 15 + num * (num - 1)\n        # num = num ** 15 + 1\n        # num = num ** 15 + 2\n        "
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the maximum number of cubes that can be removed using the following\n    operation on cubes:\n\n    - Remove the second and third cubes from the bottom. Then, the fourth cube\n      drops onto the first cube.\n    - Remove the first and second cubes from the bottom.\n\n    Args:\n        stdin (str): The input string.\n\n    Returns:\n        str: The output string.\n    \"\"\"\n    length = len(stdin)\n    cubes = [0] * length\n\n    for i in range(length):\n        if stdin[i] == '1':\n            cubes[i] = 1\n\n    cubes.append(0)\n\n    red = 0\n    blue = 0\n    last = length\n\n    for i in range(length):\n        if cubes[i] == 0:\n            blue += 1\n        else:\n            red += 1\n\n        if last - i > red + blue:\n            last = i\n\n    return last - red - blue\n\n\ndef"
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin\n    n = len(S)\n    p = [1 for i in range(n)]\n    count = 0\n    for i in range(n-1):\n        if S[i]!= S[i+1]:\n            p[i+1] = p[i] + 1\n            count += 1\n        else:\n            p[i+1] = p[i]\n    return count\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    string_length = len(stdin)\n    string = [int(char) for char in stdin]\n\n    # Reset index\n    current_index = string_length - 1\n\n    # Loop backwards until an empty space is found\n    while current_index >= 0:\n        # If the color of the cube to the right is empty and the color of the cube to the left is not empty\n        if string[current_index] == 0 and string[current_index - 1] == 1:\n            # Replace the cube with the cube to its right\n            string[current_index] = string[current_index - 1]\n            # Make the color of the cube to the left empty\n            string[current_index - 1] = 0\n        # Update the current index\n        current_index -= 1\n    return str(string_length - sum(string))\n\n\ndef"
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"0011\")\n    4\n    \"\"\"\n"
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    l, r = [], []\n    for _ in range(m):\n        i, j = map(int, stdin.split(' '))\n        l.append(i)\n        r.append(j)\n    return''.join(map(str, [n - l.count(i) - r.count(i) for i in range(1, n + 1)]))\n\ndef"
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    l = []\n    for _ in range(m):\n        l.append(list(map(int, stdin.split(' '))))\n    if l[0][0] == 1:\n        print(1)\n        return\n    for i in range(1, m):\n        if l[i][0] < l[i-1][1]:\n            print(0)\n            return\n    print(n)"
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport re\n\nn_m_l_r = stdin.split()\nn, m, l_r = int(n_m_l_r[0]), int(n_m_l_r[1]), list(map(int, re.findall(r'\\d+', stdin)))\n\nr_s = [l_r[:i] + l_r[i + 1:] for i in range(m)]\n\nprint(min([(s.count(0) / 2, s.count(1) / 2) for s in r_s]))\n"
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.readline().split())\n    gates = []\n    for _ in range(M):\n        gates.append(map(int, stdin.readline().split()))\n    # gates = [map(int, stdin.readline().split()) for _ in range(M)]\n\n    # dp[i] is the number of valid cards after i cards have been examined.\n    dp = [0] * N\n    dp[0] = 1\n\n    for l, r in gates:\n        for i in range(l - 1, r):\n            dp[i] += 1\n\n    return str(dp[N - 1])\n"
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Returns the number of ID cards that allow us to pass all the gates alone.\n\n    >>> solution('''4 2\n   ... 1 3\n   ... 2 4''')\n    2\n    '''\n    pass"
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport sys\n\ndef"
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    lst = [list(map(int, stdin.split())) for _ in range(M)]\n    lst.sort(key=lambda x: x[0])\n    #print(lst)\n    i = 0\n    ans = 0\n    for x, y in lst:\n        if i < N and x - i > 0:\n            ans += 1\n        i = y\n    return ans\n\"\"\"\n\ndef"
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \n    l, r = list(map(int, stdin.split()))\n    \n    ans = (r-l+1)*(l-r+1)//2\n    return str(ans)\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    h = [int(x) for x in stdin.split()]\n    l, r = min(h), max(h)\n    return len(h) - max(bisect_left(h, l), bisect_right(h, r))\n"
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    h = [int(x) for x in stdin.split()]\n    l = 0\n    r = len(h)-1\n    min_ = 0\n    max_ = 0\n    for i in range(len(h)):\n        if h[i] < h[l]:\n            l = i\n        if h[i] > h[r]:\n            r = i\n        if h[i] > max_:\n            max_ = h[i]\n        if h[i] < min_:\n            min_ = h[i]\n    stdout = \"\"\n    count = 0\n    while (max_ - min_) > 0:\n        if l < r:\n            count += 1\n            l += 1\n            r -= 1\n        else:\n            break\n    stdout = str(count)\n    return stdout\n\"\"\""
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    pass\n"
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time: O(n)\n    Space: O(n)\n    \"\"\"\n    stdin = stdin.split(\"\\n\")\n    n = int(stdin[0])\n    arr = [int(x) for x in stdin[1].split()]\n    water = 0\n    l_s, r_s = [0] * n, [0] * n\n    l_s[0] = 0\n    r_s[-1] = n\n    for i in range(1, n):\n        l_s[i] = max(l_s[i - 1] + 1, arr[i])\n        r_s[n - 1 - i] = max(r_s[n - i] + 1, arr[n - 1 - i])\n        water += (l_s[i] + r_s[n - i] - arr[i])\n    return water\n"
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = list(map(int, stdin.readline().split()))\n    curr_min = arr[0]\n    count = 0\n    for elem in arr:\n        if curr_min < elem:\n            curr_min = elem\n            count += 1\n    return count\nprint(solution(sys.stdin))\n"
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \n    # You can create a list of integers using list comprehension.\n    # However, there is no \"reverse\" in list comprehension.\n    # Instead, you have to access the last element using len(heights)-1.\n    # list comprehension = [x for x in heights]\n    # x = heights[0]\n    # x = heights[len(heights)-1]\n    \n    # heights = [1,2,2,1]\n    # list comprehension = [1,2,2,1]\n    \n    # heights = [1,1,2,2,3,3,4,4]\n    # list comprehension = [1,1,2,2,3,3,4,4]\n    # The list comprehension may not be a best option for this problem.\n    \n    # Storing the heights in a dictionary will also not work.\n    # The number of keys cannot exceed the length of heights.\n    # list comprehension = {x:0 for x in heights}\n    # dict comprehension = {1:0, 2:0, 3:0, 4:0}\n    \n    # The time complexity of the below code is O(n^2)\n    # n = len(heights)\n    # heights = {x:0 for x in range(n)}\n    # heights = [0,0,0,0]\n    # for i in range(n):\n    #     heights[i] = heights[i] + heights[i] + heights[i]\n    \n    # print(heights)\n    \n    # The time complexity of the below code is O(n)\n    # heights = [0,0,0,0]\n    # for i in range(n):\n    #     heights[i] = heights[i] + heights[i] + heights[i]\n    \n    # print(heights)\n    \n    # The time complexity of the below code is O(n)\n    # heights = [0,0,0,0]\n    # for i in range(n):\n    #     heights[i] = heights[i] + heights[i] + heights[i]\n    \n    # print(heights)\n    \n    # The time complexity of the below code is O(n)\n    # heights = {0:0, 1:0, 2:0, 3:0}\n    # for i in range(n):\n    #     heights[i] = heights[i] + heights[i] + heights[i]\n    \n    # print(heights)\n    \n    # The time complexity of the below code is O(n)\n    # heights = [0,0,0,0]\n    # for i in range(n):\n    #     heights[i] = heights[i] + heights[i] + heights[i]\n    \n    # print(heights)\n    \n    # The time complexity of the below code is O(n^2)\n    # heights = [0,0,0,0]\n    # for i in range(n):\n    #     heights[i] = heights[i] + heights[i] + heights[i]\n    \n    # print(heights)\n    \n    # The time complexity of the below code is O(n)\n    # heights = {0:0, 1:0, 2:0, 3:0}\n    # for i in range(n):\n    #     heights[i] = heights[i] + heights[i] + heights[i]\n    \n    # print(heights)\n    \n    # The time complexity of the below code is O(n)\n    # heights = [0,0,0,0]\n    # for i in range(n):\n    #     heights[i] = heights[i] + heights[i] + heights[i]\n    \n    # print(heights)\n    \n    # The time complexity of the below code is O(n^2)\n    # heights = {0:0, 1:0, 2:0, 3:0}\n    # for i in range(n):\n    #     heights[i] = heights[i] + heights[i] + heights[i]\n    \n    # print(heights)\n    \n    # The time complexity of the below code is O(n)\n    # heights = {0:0, 1:0, 2:0, 3:0}\n    # for i in range(n):\n    #     heights[i] = heights[i] + heights[i] + heights[i]\n    \n    # print(heights)\n    \n    # The time complexity of the below code is O(n^2)\n    # heights = {0:0, 1:0, 2:0, 3:0}\n    # for i in range(n):\n    #     heights[i] = heights[i] + heights[i] + heights[i]\n    \n    # print(heights)\n    \n    # The time complexity of the below code is O(n)\n    # heights = {0:0, 1:0, 2:0, 3:0}\n    # for i in range(n):\n    #     heights[i] = heights[i] + heights[i] + heights[i]\n    \n    # print(heights)\n    \n    # The time complexity of the below code is O(n^2)\n    # heights = {0:0, 1:0, 2:0, 3:0}\n    # for i in range(n):\n    #     heights[i] = heights[i] + heights[i] + heights[i]\n    \n    # print(heights)\n    \n    # The time complexity of the below code is O(n^2)\n    # heights = {0:0, 1:0, 2:0, 3:0}\n    # for i in range(n):\n    #     heights[i] = heights[i] + heights[i] + heights[i]\n    \n    # print(heights)\n    \n    # The time complexity of the below code is O(n^2)\n    # heights = {0:0, 1:0, 2:0, 3:0}\n    # for i in range(n):\n    #     heights[i] = heights[i] + heights[i] + heights[i]\n    \n    # print(heights)\n    \n    # The time complexity of the below code is O(n^2)\n    # heights = {0:0, 1:0, 2:0, 3:0}\n    # for i in range(n):\n    #     heights[i] = heights[i] + heights[i] + heights[i]\n    \n    # print(heights)\n    \n    # The time complexity of the below code is O(n^2)\n    # heights = {0:0, 1:0, 2:0, 3:0}\n    # for i in range(n):\n    #     heights[i] = heights[i] + heights[i] + heights[i]\n    \n    # print(heights)\n    \n    # The time complexity of the below code is O(n^2)\n    # heights = {0:0, 1:0, 2:0, 3:0}\n    # for i in range(n):\n    #     heights[i] = heights[i] + heights[i] + heights["
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = [int(x) for x in stdin.readline().split()]\n    count = 0\n    for i in range(0, n):\n        l, r = stdin.readline().split()\n        for j in range(int(l) - 1, int(r)):\n            arr[j] += 1\n        count += 1\n    return count\n"
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nimport sys\nfrom typing import List\n\nsys.stdin = open('test_files/Y13R5P1/A.in')\n\n\ndef"
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split('\\n')[0])\n    heights = list(map(int, stdin.split('\\n')[1].split(' ')))\n    heights.sort()\n    count = 0\n    for i in range(len(heights)):\n        l = i + 1\n        r = len(heights) - 1\n        while l < r:\n            mid = (l + r) // 2\n            if heights[mid] == heights[i] + 1:\n                count += (r - mid)\n                break\n            elif heights[mid] > heights[i] + 1:\n                r = mid\n            else:\n                l = mid + 1\n        count += (r - l + 1)\n    return str(count)\n\n\ndef"
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return a solution to the task.\"\"\"\n    N, W = map(int, stdin.readline().split())\n    bus_sequence = list(map(int, stdin.readline().split()))\n    bus_sequence = [(x + 1, -y) for x, y in enumerate(bus_sequence)]\n    bus_sequence.sort()\n\n    dp = [0] * (W + 1)\n    dp[0] = 1\n    for x, y in bus_sequence:\n        dp2 = [0] * (W + 1)\n        for i in range(W + 1):\n            if i < y:\n                dp2[i] = dp[i]\n            elif i == y:\n                dp2[i] = 0\n            else:\n                dp2[i] = dp[i] + dp[i - y]\n        dp = dp2\n\n    return str(dp[W])\n"
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Calculate the number of ways people can get on a bus.\n    :param stdin: input string\n    :return: output string\n    \"\"\"\n    line = stdin.split('\\n')\n    n, w = int(line[0].split()[0]), int(line[0].split()[1])\n    buses = list(map(int, line[1].split()))\n\n    passengers = 0\n    passenger = 0\n    ways = 0\n    for bus in buses:\n        passengers += bus\n        if passengers > w:\n            ways = 0\n            break\n        if passengers == w:\n            ways += 1\n    if ways == 0:\n        print(0)\n    else:\n        print(ways)\n"
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    find the number of possible ways how many people could be in the bus before the first bus stop, if the bus has a capacity equals to $w$. If the situation is contradictory (i.e. for any initial number of passengers there will be a contradiction), print 0.\n    \"\"\"\n   ..."
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    _, w = map(int, stdin.split())\n    n, a = map(int, stdin.split())\n    res = 0\n    if n == 1:\n        res = sum(range(0, w + 1))\n    else:\n        if len(set(a))!= n:\n            res = 0\n        else:\n            cnt = [0 for i in range(0, n)]\n            cnt[0] = 0\n            for i in range(1, n):\n                cnt[i] = cnt[i - 1]\n                for j in range(0, a[i] + 1):\n                    if j < w:\n                        cnt[i] += cnt[i - 1]\n            res = cnt[n - 1]\n    return str(res)\n"
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n"
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, w = [int(x) for x in stdin.split()]\n    arr = [int(x) for x in stdin.split()]\n\n    s = {0}\n    for i in range(n):\n        s = {x + arr[i] for x in s if x + arr[i] <= w} | {arr[i]}\n    return len(s)\n"
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    #Your code here\n    return ''\n"
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # get input\n    n, w = [int(x) for x in stdin.split(' ')]\n    a = [int(x) for x in stdin.split(' ')]\n\n    # logic\n    s = {}\n    for i in range(n):\n        for j in range(a[i], -1, -1):\n            if j in s:\n                s[j] += 1\n            else:\n                s[j] = 1\n\n    count = 0\n    for key, val in s.items():\n        if key > 0:\n            if key == val:\n                count += 1\n            else:\n                return \"0\"\n    return str(count)\n"
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    a, b = [int(x) for x in stdin.split('\\n')]\n    a, b = [int(x) for x in stdin.split()]\n    n = len(a)\n    ans = [''] * n\n    # f = 2\n    # t = 0\n    for i in range(n):\n        # if i == 0:\n        #     ans[i] = a[i]\n        #     continue\n        # if (i % f == 0 and i!= 0):\n        #     f *= 3\n        #     t += 1\n        # ans[i] = a[i - t] * f\n        # f //= 2\n        ans[i] = a[i] * 2 if a[i] % 3 == 0 else a[i]\n    return''.join([str(x) for x in ans])\n    '''\n    # print([str(x) for x in ans])\n    return''.join([str(x) for x in a])"
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution to the problem.\n    \"\"\"\n    stdin = stdin.splitlines()\n    n = int(stdin[0])\n    nums = list(map(int, stdin[1].split()))\n    ans = []\n    for i in range(n - 1, -1, -1):\n        if nums[i] % 3 == 0:\n            ans.append(nums[i] // 3)\n        elif nums[i] % 3 == 1:\n            ans.append(2 * nums[i])\n        else:\n            ans.append(nums[i] // 2)\n    print(*reversed(ans))\n\n\ndef"
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    inp = stdin.split('\\n')\n    size = int(inp[0])\n    arr = [int(i) for i in inp[1].split()]\n    t = size // 3\n    for i in range(t):\n        arr[i] = arr[i] * 3\n    for i in range(t, size):\n        arr[i] = arr[i] // 2\n    return''.join(str(i) for i in arr)\n"
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    n = int(stdin.readline())\n    arr = [int(c) for c in stdin.readline().split()]\n\n    def factor(x):\n        res = x\n        if x % 3 == 0:\n            res = x // 3\n        return res\n\n    if n == 1:\n        return \"1\"\n    result = []\n    a = arr[0]\n    i = 1\n    while i < n:\n        b = factor(a)\n        result.append(b)\n        a = a * 2 if b == 0 else b\n        if b!= 0:\n            i += 1\n    return \" \".join(str(r) for r in result)\n"
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin[0]\n    a = stdin[1:]\n    b = [int(x) for x in a]\n    b = sorted(b)\n    d = {}\n    for i in range(len(b)):\n        d[b[i]] = i\n    s = ''\n    for i in range(n):\n        if b[i] % 3 == 0:\n            x = b[i]//3\n            if x in d.keys():\n                s += str(d[x])+' '\n            else:\n                s += str(x)+' '\n            if b[i] % 2 == 0:\n                s += str(d[b[i]//2])+' '\n            else:\n                x = b[i]*2\n                if x in d.keys():\n                    s += str(d[x])+' '\n                else:\n                    s += str(x)+' '\n        else:\n            x = b[i]//3\n            if x in d.keys():\n                s += str(d[x])+' '\n            else:\n                s += str(x)+' '\n            s += str(d[b[i]])+' '\n    return s"
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\nWrite the code of a function:\n\ndef"
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    seq = [int(x) for x in stdin.readline().strip().split(' ')]\n    res = ''\n    for i in range(n):\n        if seq[i] % 3 == 0:\n            if seq[i] % 2 == 0:\n                res += '3' + res[-1]\n            else:\n                res += '2' + res[-1]\n        else:\n            res += str(seq[i])\n    print(' '.join([str(x) for x in res]))\n    return res\n\n\nprint(solution(input()))\n\n\n'''\n\n\ndef"
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(x) for x in stdin.split('\\n')[1].split(' ')]\n    # create a dict with keys for each element of a\n    # values are tuples of the form (position, multiple)\n    # for example {1: (1, 2), 2: (1, 2)}\n    # each tuple says if the next element in a is a multiple of its value\n    # key is the current index in a\n    # value is the index of the next element in a\n    # index of next element in a is always two more than previous index\n    d = dict()\n    for i, x in enumerate(a):\n        d[x] = (i + 1, x)\n    # create an array of next index for each element\n    next_index = list()\n    for x in a[:-1]:\n        next_index.append(d[x][0])\n    # repeat the last element until the end\n    next_index.append(next_index[-1])\n    # compute the product of each element\n    products = list()\n    for x in a:\n        products.append(x * x)\n    # now do the same for all possible values of 2*x\n    two_products = list()\n    for x in a:\n        two_products.append(x * 2)\n    # create a dict that maps product to its position\n    # this is used to find a position of the product of two x\n    two_products_dict = dict()\n    for i, x in enumerate(two_products):\n        two_products_dict[x] = i\n    # we need to keep a stack of the previous product to get the next product\n    # push the first product\n    stack = list()\n    stack.append(a[0])\n    # find the next product of the element just pushed\n    next_two_products = list()\n    for i in range(1, n):\n        # get the last element from stack\n        x = stack.pop()\n        # compute next product and push it\n        next_two_products.append(x * 2)\n        # find the position of 2*x\n        j = two_products_dict[2 * x]\n        # if it is not the end of the array\n        if j < len(a) - i:\n            # if the position is in the list of next indices\n            if j + i < len(next_index):\n                # if the next index is not the end of the array\n                if next_index[j + i] < len(a):\n                    stack.append(next_two_products[-1])\n                    stack.append(a[next_index[j + i]])\n    # now push the last 2 elements to the stack\n    stack.append(two_products[-1])\n    stack.append(products[-1])\n    # now apply the permutation\n    ans = list()\n    for i in range(n):\n        ans.append(stack[next_index[i]])\n    return''.join([str(x) for x in ans])\n"
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n  return stdin\n\"\"\"\n\nimport math\n\ndef"
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    arr = list(map(int, stdin.split()))\n    arr.append(1)\n    arr.append(3)\n    arr.append(2)\n    # print(arr)\n    res = []\n    p = 0\n    q = 0\n    c = 0\n    d = 0\n    while True:\n        while c < N:\n            if arr[p] == 3:\n                d += 1\n                arr[p] = arr[q]//3\n                p = q\n                q = p + d\n                c = q\n            elif arr[p] == 2:\n                d += 1\n                arr[p] = arr[q]*2\n                p = q\n                q = p + d\n                c = q\n            else:\n                p += 1\n                q += 1\n                c += 1\n            # print(arr)\n        if p == q and c == N:\n            break\n        else:\n            p = q\n            q = p + d\n            c = q\n            if arr[p] == 1:\n                arr[p] = arr[q]*2\n                p = q\n                q = p + d\n                c = q\n            else:\n                arr[p] = arr[q]//3\n                p = q\n                q = p + d\n                c = q\n        # print(arr)\n    return''.join(map(str, arr))\n"
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    x = [int(x) for x in stdin.readline().split(' ')]\n\n    x.sort()\n    left, right = 0, 0\n    dist = abs(x[0] - x[1])\n    for i in range(n - 1):\n        if abs(x[i] - x[i + 1]) == dist:\n            left += 1\n        else:\n            right += 1\n\n    return '%d\\n%s' % (right,''.join(str(x) for x in x))\n"
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return 'none'"
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return string.\"\"\"\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the maximum possible number of points in a subset that satisfies the conditions described above.\n    >>> solution('3 5 4 7 10 12\\n')\n    3\n    \"\"\"\n    N = int(stdin)\n    arr = [int(x) for x in stdin.split()]\n    arr.sort()\n    n = len(arr)\n    i = 0\n    while i < n:\n        if arr[i] % 2 == 0:\n            arr[i] += 1\n            i += 1\n        else:\n            break\n    # arr.sort()\n    k = 0\n    while i < n:\n        for j in range(i + 1, n):\n            if arr[j] - arr[i] > arr[j] - arr[k]:\n                k = j\n        i = k + 1\n        k = 0\n    return str(i)"
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    # \u0421\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0442\u043e\u0447\u0435\u043a\n    n = int(stdin)\n    # \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0442\u043e\u0447\u0435\u043a\n    if n == 0 or n == 1:\n        return '0'\n    if n == 2:\n        return '1'\n    # \u0421\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u043c \u0442\u043e\u0447\u043a\u0438\n    points = list(map(int, stdin.split(' ')))\n    # \u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u043c \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u0443\u044e \u0434\u043b\u0438\u043d\u0443 \u0441\u0443\u043f\u0435\u0440\u043f\u043e\u0434\u043e\u0432\u0436\u0435\u043d\u043d\u0438\u043a\u043e\u0432\n    count = 0\n    # \u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u043c \u043c\u0430\u0441\u0441\u0438\u0432 \u0434\u043b\u044f \u043a\u043e\u0440\u0442\u0435\u0436\u0435\u0439 \u0441\u0443\u043f\u0435\u0440\u043f\u043e\u0434\u043e\u0432\u0436\u0435\u043d\u043d\u0438\u043a\u043e\u0432\n    super_power_list = []\n    # \u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u043c \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e, \u0441\u0447\u0438\u0442\u0430\u044e\u0449\u0443\u044e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u0439 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0442\u043e\u0447\u043a\u0438 \u0432 \u0441\u0443\u043f\u0435\u0440\u043f\u043e\u0434\u043e\u0432\u0436\u0435\u043d\u043d\u0438\u043a\n    count_point = 0\n    # \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e, \u0441\u0447\u0438\u0442\u0430\u044e\u0449\u0443\u044e \u0440\u0430\u0441\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u043c\u0435\u0436\u0434\u0443 \u0442\u043e\u0447\u043a\u0430\u043c\u0438\n    distance = 0\n    # \u0412 \u043f\u0435\u0440\u0432\u043e\u043c \u0446\u0438\u043a\u043b\u0435 \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u043c \u0440\u0430\u0441\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u043e\u0442 \u043d\u0430\u0447\u0430\u043b\u0430 \u0441\u0443\u043f\u0435\u0440\u043f\u043e\u0434\u043e\u0432\u0436\u0435\u043d\u043d\u0438\u043a\u0430\n    for i in range(n - 1):\n        distance = abs(points[i] - points[i + 1])\n    # \u0414\u043b\u044f \u0432\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u0442\u043e\u0447\u043a\u0438 \u0432 \u0441\u0443\u043f\u0435\u0440\u043f\u043e\u0434\u043e\u0432\u0436\u0435\u043d\u043d\u0438\u043a \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0443 \u043d\u0430 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u0438\u0447\u043d\u043e\u0441\u0442\u044c \u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u043a\u043e\u0440\u0442\u0435\u0436\u0438 \u0432 \u0441\u0443\u043f\u0435\u0440\u043f\u043e\u0434\u043e\u0432\u0436\u0435\u043d\u043d\u0438\u043a\n    for i in range(n - 1):\n        if distance == 0:\n            count += 1\n            super_power_list.append(tuple([points[i], points[i + 1]]))\n        elif distance == 2:\n            count_point += 1\n            super_power_list.append(tuple([points[i], points[i + 1]]))\n        elif distance == 4:\n            count_point += 1\n            super_power_list.append(tuple([points[i], points[i + 1]]))\n        elif distance == 8:\n            count_point += 1\n            super_power_list.append(tuple([points[i], points[i + 1]]))\n        elif distance == 16:\n            count_point += 1\n            super_power_list.append(tuple([points[i], points[i + 1]]))\n        elif distance == 32:\n            count_point += 1\n            super_power_list.append(tuple([points[i], points[i + 1]]))\n        elif distance == 64:\n            count_point += 1\n            super_power_list.append(tuple([points[i], points[i + 1]]))\n        elif distance == 128:\n            count_point += 1\n            super_power_list.append(tuple([points[i], points[i + 1]]))\n        elif distance == 256:\n            count_point += 1\n            super_power_list.append(tuple([points[i], points[i + 1]]))\n        elif distance == 512:\n            count_point += 1\n            super_power_list.append(tuple([points[i], points[i + 1]]))\n        elif distance == 1024:\n            count_point += 1\n            super_power_list.append(tuple([points[i], points[i + 1]]))\n        elif distance == 2048:\n            count_point += 1\n            super_power_list.append(tuple([points[i], points[i + 1]]))\n        elif distance == 4096:\n            count_point += 1\n            super_power_list.append(tuple([points[i], points[i + 1]]))\n        elif distance == 8192:\n            count_point += 1\n            super_power_list.append(tuple([points[i], points[i + 1]]))\n        elif distance == 16384:\n            count_point += 1\n            super_power_list.append(tuple([points[i], points[i + 1]]))\n        elif distance == 32768:\n            count_point += 1\n            super_power_list.append(tuple([points[i], points[i + 1]]))\n        else:\n            count_point += 1\n            super_power_list.append(tuple([points[i], points[i + 1]]))\n    # \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u043c\u0430\u0441\u0441\u0438\u0432 \u0434\u043b\u044f \u0441\u0443\u043f\u0435\u0440\u043f\u043e\u0434\u043e\u0432\u0436\u0435\u043d\u043d\u0438\u043a\u043e\u0432, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0439 \u0442\u043e\u0447\u043a\u0438 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0441\u0443\u043f\u0435\u0440\u043f\u043e\u0434\u043e\u0432\u0436\u0435\u043d\u043d\u0438\u043a\u0430\n    super_power_points = []\n    # \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0432\u0441\u0435 \u0442\u043e\u0447\u043a\u0438 \u0432 \u0441\u0443\u043f\u0435\u0440\u043f\u043e\u0434\u043e\u0432\u0436\u0435\u043d\u043d\u0438\u043a\n    for i in range(n -"
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\nreturn str()\n\n------\nimport math\nimport os\nimport random\nimport re\nimport sys\n\ndef"
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    coords = list(map(int, stdin.readline().split()))\n    min_dist = 2 ** 32\n    for i in range(n):\n        for j in range(i + 1, n):\n            dist = abs(coords[i] - coords[j])\n            if dist < min_dist:\n                min_dist = dist\n            elif dist == min_dist:\n                min_dist = min_dist\n    print(n - (min_dist & -min_dist))\n\n\ndef"
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return None\n"
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.split(' '))\n    takahashi = 0\n    aoki = 0\n\n    for i in range(K):\n        if takahashi == 0:\n            if aoki == 0:\n                continue\n            else:\n                aoki -= 1\n                takahashi = A\n        else:\n            if aoki == 0:\n                takahashi -= 1\n            else:\n                aoki -= 1\n                takahashi = A\n\n    return str(takahashi) +'' + str(aoki)"
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = [int(x) for x in stdin.split()]\n    Takahashi = 0\n    Aoki = 0\n    for i in range(K):\n        Takahashi += 1 if A > B else -1 if A < B else 0\n        Aoki += 1 if A < B else -1 if A > B else 0\n    print(Takahashi, Aoki)"
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = list(map(int, stdin.split(' ')))\n    Takahashi = K // 2\n    Aoki = K // 2\n    if K % 2 == 1:\n        Takahashi += 1\n    if A > B:\n        Takahashi += A - B\n        Aoki += A - B\n    elif A < B:\n        Takahashi += B - A\n        Aoki += B - A\n    return str(Takahashi) +'' + str(Aoki)"
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k = map(int, stdin.split())\n    takahashi = 0\n    aoki = 0\n    for i in range(k):\n        if a > 0:\n            takahashi += 1\n            a -= 1\n        elif b > 0:\n            takahashi -= 1\n            b -= 1\n        else:\n            takahashi -= 1\n            aoki += 1\n    print(takahashi, aoki)\n    return ''\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"2 3 3\")\n    0 2\n    \"\"\"\n    a, b, k = map(int, stdin.split())\n    t = a - b\n    a = b\n    for _ in range(k):\n        if t > 0:\n            t -= 1\n        else:\n            a += 1\n            t = a - b\n    print(a, b)\n"
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    takahashi, aoki = [int(i) for i in stdin.split()]\n    k = int(stdin.split()[2])\n    while takahashi and aoki:\n        if takahashi > aoki:\n            aoki += (k // 2)\n            takahashi -= 1\n        else:\n            takahashi += (k // 2)\n            aoki -= 1\n    print(takahashi, aoki)\n    return ''"
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    '''Takahashi has A cookies, and Aoki has B cookies.\n    Takahashi will do the following action K times:\n    - If Takahashi has one or more cookies, eat one of his cookies.\n    - Otherwise, if Aoki has one or more cookies, eat one of Aoki's cookies.\n    - If they both have no cookies, do nothing.\n    In the end, how many cookies will Takahashi and Aoki have, respectively?\n    \n    Args:\n        stdin (str): Input given from Standard Input in the following format:\n            A B K\n    Returns:\n        str: Output as follows:\n            Takahashi has X cookies, and Aoki has Y cookies.\n    '''\n    inputs = stdin.split(' ')\n    A, B, K = list(map(int, inputs))\n    cookies = [A, B]\n    for _ in range(K):\n        takahashi = cookies[0]\n        cookies[0] -= 1\n        if takahashi > 0:\n            continue\n        cookies[0] += cookies[1]\n        cookies[1] = 0\n    print('Takahashi has {} cookies, and Aoki has {} cookies.'.format(\n        cookies[0],\n        cookies[1]\n    ))\n    return ''\n"
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the solution\"\"\"\n    numbers = stdin.splitlines()[0].split()\n    a = int(numbers[0])\n    b = int(numbers[1])\n    k = int(numbers[2])\n    cookies = [a, b]\n    for _ in range(k):\n        if cookies[0] > 0:\n            cookies[0] -= 1\n        else:\n            cookies[1] -= 1\n    return str(cookies[0]) + \" \" + str(cookies[1])\n\n\ndef"
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k = map(int, stdin.split())\n    takahashi = a\n    aoki = b\n    for _ in range(k):\n        if takahashi > 0:\n            takahashi -= 1\n        elif aoki > 0:\n            aoki -= 1\n        else:\n            continue\n    return str(takahashi) + \" \" + str(aoki)\n\n\ndef"
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = [int(x) for x in stdin.split(\" \")]\n    return str(A - B * (K % 2)) + \" \" + str(B - A * (K % 2))\n"
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    import numpy as np\n\n    X = int(stdin)\n\n    b = 100\n    T = 1\n    y = 1\n    while b > X:\n        b = b * (1 + 0.01)\n        y += 1\n    print(y)"
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('103')\n    3\n    \"\"\"\n    X = int(stdin)\n    year = 0\n    while X >= 101:\n        X = X + X * 0.01\n        year += 1\n    return year"
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    i = 1\n    while X < 1001:\n        X *= 1 + 1 / 100\n        i += 1\n    return i\n"
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    count = 0\n    while True:\n        x = (1 + (1/100)) * x\n        count += 1\n        if x >= 100:\n            break\n    return count"
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    res = 0\n    while n < 10001:\n        n += n*0.01\n        res += 1\n    return str(res)\n\ndef"
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\ndef"
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Returns the number of years it takes for Takahashi's balance to reach X yen or above for the first time.\n    '''\n    x: int = int(stdin)\n    count: int = 0\n    while x < 101:\n        x *= (1 + 1/100)\n        count += 1\n    return count\n"
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    count = 0\n    while True:\n        X = X * (1 + 0.01)\n        count += 1\n        if X >= 100:\n            return count\n        "
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    count = 0\n    b = 100\n    while b < X:\n        b += (1 + 1 / 100) * b\n        count += 1\n    return str(count)"
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin.split()[0]) + int(stdin.split()[0]) + int(stdin.split()[0]))\n"
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    b = a * (a + 1) // 2\n    c = b * (b + 1) // 2\n    d = c * (c + 1) // 2\n    e = d * (d + 1) // 2\n    return str(e)\n"
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    total = 0\n    for i in range(1, int(stdin) + 1):\n        total += i\n    return total\n"
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    print(stdin)\n    return ''\n"
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \n    return '%d' % sum([1 for x in range(int(stdin.split('\\n')[0])) for y in range(x,int(stdin.split('\\n')[0])) for z in range(y,int(stdin.split('\\n')[0])) if gcd(x,y,z)==1])\n\n\"\"\"\n\nfrom functools import reduce\nfrom math import gcd\n\ndef"
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    # can be written in one line\n    return '5'\n"
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Truncate after decimal point\"\"\"\n    K = int(stdin.readline())\n    \"\"\"Compute product of all elements from 1 to K\"\"\"\n    ans = 0\n    for i in range(1, K+1):\n        for j in range(1, K+1):\n            for k in range(1, K+1):\n                ans += math.gcd(i, j, k)\n    print(ans)\n    return ''"
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin\n    input = input.split('\\n')\n    input = input[1:]\n    K = int(input[0])\n    ans = 0\n    for i in range(1, K+1):\n        for j in range(i+1, K+1):\n            for k in range(j+1, K+1):\n                ans += gcd(i, j, k)\n    return str(ans)\n\n\ndef"
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Your solution goes here\n    return stdin"
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def f(m: int) -> int:\n        return sum(m % ni for ni in map(int, stdin.split()))\n\n    return str(max(map(f, range(2, int(stdin.split()[0]) + 1))))"
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a = [int(x) for x in stdin.split()]\n    b = a[0]\n    n = a[1]\n    return str(max(i%j for i in range(b,n*b+1) for j in a))"
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('3\\n3 4 6')\n    10\n    \"\"\"\n    n, *a = list(map(int, stdin.split()))\n    max_ = 0\n    for m in range(n):\n        temp = 0\n        for num in a:\n            temp += m % num\n        if max_ < temp:\n            max_ = temp\n    return max_"
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('3\\n3 4 6')\n    10\n    \"\"\"\n    input_list = list(map(int, stdin.split()))\n    return max(\n        sum(i_ % j_ for i_, j_ in zip(input_list, input_list[1:]))\n        for _ in range(input_list[0])\n    )\n"
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3\\n3 4 6\")\n    10\n    \"\"\"\n\n    # Get input\n    a_len = int(stdin)\n    a = stdin.split(\"\\n\")[1].split(\" \")\n    a = list(map(int, a))\n    # Get answer\n    return str(max_f(a_len, a))\n\n\ndef"
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # read standard input\n    n = stdin.split()\n    # get the input\n    a = list(map(int, stdin.split()))\n    # return the solution\n    return str(sum(map(lambda x: x % a[0], range(2, int(n[0])+2))))\n\ndef"
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    # \u5165\u529b\u3055\u308c\u305f\u6587\u5b57\u5217\u3092\u30b9\u30da\u30fc\u30b9\u3067\u5206\u5272\u3057\u3066\u3001\u6570\u5024\u306b\u5909\u63db\u3059\u308b\n    numbers = [int(n) for n in stdin.split()]\n    n, *a = numbers\n    f = [0] * n\n    # \u7d2f\u7a4d\u548c\u3092\u7528\u3044\u3066\u3001f(m)\u3092\u8a08\u7b97\u3059\u308b\n    for i in range(n):\n        f[i] = sum(a[:i + 1])\n    return max(f)\n"
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, *A = list(map(int, stdin.split()))\n    max_m = sum([max(A) % i, (max(A) + 1) % i])\n    max_f = max(max_m + (i % A[0]), max_m + (i % A[1]), max_m + (i % A[2]))\n    return str(max_f)"
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Your solution code goes here\n    N, *a = map(int, stdin.split())\n    return max(a[i] * i for i in range(N)) % (10**9 + 7)\n"
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin.split(\"\\n\")\n    N = int(data[0])\n    data = data[1]\n    data = data.split(\" \")\n    data = [int(i) for i in data]\n    total = 0\n    for i in range(N):\n        total += data[i]\n    total = total % data[0]\n    for i in range(1, N):\n        total += data[i]\n    return total"
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = 0\n    for i in range(n):\n        a, b = [int(x) for x in stdin.split(\" \")]\n        s += a == b\n        if s >= 3:\n            return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    rolls = [int(d) for d in stdin.split()]\n    doublets = sum([r == c for r, c in zip(rolls[0::2], rolls[1::2])])\n    return 'Yes' if doublets >= 3 else 'No'"
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    stdin = stdin.split()\n    count_times = 0\n    doublet = False\n    for i in range(int(stdin[0])):\n        if stdin[i+1] == stdin[i+2]:\n            doublet = True\n            count_times += 1\n            if count_times >= 3:\n                break\n        else:\n            doublet = False\n            count_times = 0\n    if doublet:\n        return 'Yes'\n    else:\n        return 'No'"
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n  N = int(stdin.readline())\n  doublets = 0\n  \n  for i in range(N):\n    D1, D2 = map(int, stdin.readline().split())\n    if i < N - 2:\n      if D1 == D2 and D1 == int(stdin.readline().split()[1]):\n        doublets += 1\n      if D1 == D2 and D1 == int(stdin.readline().split()[1]) and D2 == int(stdin.readline().split()[1]):\n        doublets += 1\n      if D1 == D2 and D1 == int(stdin.readline().split()[1]) and D2 == int(stdin.readline().split()[1]) and D2 == int(stdin.readline().split()[1]):\n        doublets += 1\n    else:\n      if D1 == D2 and D1 == int(stdin.readline().split()[1]):\n        doublets += 1\n      if D1 == D2 and D1 == int(stdin.readline().split()[1]) and D2 == int(stdin.readline().split()[1]):\n        doublets += 1\n      if D1 == D2 and D1 == int(stdin.readline().split()[1]) and D2 == int(stdin.readline().split()[1]) and D2 == int(stdin.readline().split()[1]):\n        doublets += 1\n      if D1 == D2 and D1 == int(stdin.readline().split()[1]) and D2 == int(stdin.readline().split()[1]):\n        doublets += 1\n  \n  if doublets >= 3:\n    return \"Yes\"\n  else:\n    return \"No\"\n"
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Takes the stdin of a testcase and checks if doublets occurred at least three times in a row.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    for line in stdin:\n        N, *input = line.split(' ')\n        N = int(N)\n        input = [int(d) for d in input]\n        for i in range(2, N):\n            if input[i] == input[i - 2] and input[i - 1] == input[i - 3]:\n                return 'Yes'\n    return 'No'\n"
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    count = 0\n    roll_list = []\n    for line in stdin.split('\\n'):\n        if not line.strip():\n            continue\n        if count == 0:\n            roll_list.append(list(map(int, line.split())))\n        else:\n            roll_list.append(list(map(int, line.split())))\n        count += 1\n    doublet = False\n    for i in range(1, len(roll_list) - 2):\n        if roll_list[i][0] == roll_list[i + 1][0] and roll_list[i + 1][0] == roll_list[i + 2][0]:\n            doublet = True\n        if roll_list[i][0] == roll_list[i + 1][1] and roll_list[i + 1][1] == roll_list[i + 2][1]:\n            doublet = True\n    return 'Yes' if doublet else 'No'\n\n\ndef"
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    n = int(stdin)\n    rolls = [list(map(int, stdin.split('\\n')[1:])) for i in range(n)]\n    last_roll = [1, 1]\n    for i in range(n):\n        if rolls[i][0] == last_roll[0] and rolls[i][1] == last_roll[1]:\n            last_roll = [rolls[i][0], rolls[i][1]]\n            if i+1 < n and rolls[i+1][0] == last_roll[0] and rolls[i+1][1] == last_roll[1]:\n                last_roll = [rolls[i+1][0], rolls[i+1][1]]\n                if i+2 < n and rolls[i+2][0] == last_roll[0] and rolls[i+2][1] == last_roll[1]:\n                    last_roll = [rolls[i+2][0], rolls[i+2][1]]\n                    print('Yes')\n                    break\n        elif rolls[i][0] == last_roll[0] and rolls[i][1] == last_roll[1] and i+1 < n and rolls[i+1][0] == last_roll[0] and rolls[i+1][1] == last_roll[1]:\n            print('Yes')\n            break\n        elif rolls[i][0] == last_roll[0] and rolls[i][1] == last_roll[1] and i+2 < n and rolls[i+1][0] == last_roll[0] and rolls[i+1][1] == last_roll[1]:\n            print('Yes')\n            break\n        elif rolls[i][0] == last_roll[0] and rolls[i][1] == last_roll[1] and i+3 < n and rolls[i+1][0] == last_roll[0] and rolls[i+1][1] == last_roll[1] and rolls[i+2][0] == last_roll[0] and rolls[i+2][1] == last_roll[1]:\n            print('Yes')\n            break\n    else:\n        print('No')\n    return ''"
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your solution\n    return 'Yes'"
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5\n   ... 1 2\n   ... 6 6\n   ... 4 4\n   ... 3 3\n   ... 3 2''')\n    'Yes'\n    \"\"\"\n    n = int(stdin)\n    d1, d2 = [int(x) for x in stdin.split('\\n')[1:]]\n\n    if d1 == d2:\n        if n < 4:\n            return 'Yes'\n        elif n == 4 and d1 == d2:\n            return 'Yes'\n        else:\n            return 'No'\n\n    if n == 1:\n        return 'Yes' if d1 == d2 else 'No'\n    if n > 1:\n        return 'No' if (d1 == d2 and n < 3) else 'Yes'\n"
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport math\nimport math\nr = int(stdin.readline())\n\narea = (r**2) * math.pi\nprint(area/math.pi)\n"
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    c1 = 3.14159265359\n    c2 = 1\n    return int((c1*r**2)/c2)"
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    r = stdin\n    area = 3.1415926 * (int(r)**2)\n    area_one = 3.1415926 * (1**2)\n    count = int(area / area_one)\n    return count"
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin.readline())\n    return str(r * r)\n\nprint(solution(input()))\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\n---------- Test Case -----------\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n\n[Input]\n"
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return int((n-1)*n)\n'''\n\ndef"
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    area1 = 3.14159265358979 * r ** 2\n    area2 = 3.14159265358979 * 1 ** 2\n    return str(area2 // area1)"
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"The solution computes the ratio between the areas of two circles.\n    The ratio between two circles is always a floating number,\n    however if you take the floor of the result then you'll always get the correct answer.\n\n    The solution works by first dividing the area of one circle by the area of a radius one circle.\n    After which the division is multiplied by two. Then the division is reduced by the floor operator.\n    \"\"\"\n    return stdin"
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\"\"\""
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Determine if an N-sided polygon (not necessarily convex) with sides of length L_1, L_2,..., L_N can be drawn in a two-dimensional plane.\n    You can use the following theorem:\n    Theorem: an N-sided polygon satisfying the condition can be drawn if and only if the longest side is strictly shorter than the sum of the lengths of the other N-1 sides.\n    :param stdin: standard input\n    :return: Yes if it can be drawn, otherwise No\n    \"\"\"\n\n    polygon_list = list(map(int, stdin.split(' ')))\n    polygon_list.pop(0)\n    polygon_list.sort()\n\n    length_of_longest = polygon_list[-1]\n    if length_of_longest < sum(polygon_list[:-1]):\n        return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    \n    n = int(stdin.readline())\n    lengths = list(map(int, stdin.readline().split()))\n    length = max(lengths)\n    sum = 0\n    for i in lengths:\n        sum += i\n    if sum < length:\n        print('Yes')\n    else:\n        print('No')\n"
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    s = stdin[1:]\n    s = s.split()\n    s = [int(i) for i in s]\n    s.sort()\n    if s[0] < sum(s[1:-1]) + s[-1]:\n        return 'Yes'\n    else:\n        return 'No'\n"
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.splitlines()\n    n = int(line[0])\n    sides = list(map(int, line[1].split()))\n    return \"Yes\" if max(sides) < sum(sides) else \"No\"\n"
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your solution\n    return 'Yes' if len(stdin.split('\\n')[0].split(' ')) == 3 else 'No'\n"
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, *l = map(int, stdin.split())\n\n    return 'Yes' if max(l) < sum(l) - max(l) else 'No'\n"
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4\\n3 8 5 1\")\n    'Yes'\n    >>> solution(\"5\\n5 8 5 1\")\n    'No'\n    >>> solution(\"7\\n4 8 6 5 3 2\")\n    'No'\n    >>> solution(\"9\\n3 8 5 1 7 10 2 6 4\")\n    'No'\n    \"\"\"\n   ...\n"
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    l = list(map(int, stdin.readline().split()))\n    if l[0] <= sum(l) - max(l):\n        return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def polygon(sides: List[int]) -> bool:\n        if sides[0] + sides[1] >= sides[2]:\n            return True\n        return False\n\n    lines = stdin.split(\"\\n\")\n    N = int(lines[0])\n    sides = list(map(int, lines[1].split()))\n    if polygon(sides):\n        return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    l = [int(x) for x in stdin.split('\\n')[0].split()]\n    l.sort()\n    if n == 3:\n        return \"Yes\" if l[2] < (l[0] + l[1]) else \"No\"\n    elif n == 4:\n        return \"Yes\" if (l[0] + l[2]) < l[1] else \"No\"\n    elif n == 5:\n        return \"Yes\" if (l[0] + l[3]) < l[2] else \"No\"\n    elif n == 6:\n        return \"Yes\" if (l[0] + l[4]) < l[1] else \"No\"\n    elif n == 7:\n        return \"Yes\" if (l[0] + l[5]) < l[3] else \"No\"\n    elif n == 8:\n        return \"Yes\" if (l[0] + l[6]) < l[4] else \"No\"\n    elif n == 9:\n        return \"Yes\" if (l[0] + l[7]) < l[5] else \"No\"\n    elif n == 10:\n        return \"Yes\" if (l[0] + l[8]) < l[6] else \"No\"\n    else:\n        return \"No\"\n\"\"\"\n\nfrom sys import stdin\n\n\ndef"
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split(' '))\n    s = [int(input()) for i in range(M)]\n    c = [int(input()) for i in range(M)]\n    for i in range(1, 1 << 10):\n        if all(s[j] <= i % 10 and c[j] == i // 10 % 10 for j in range(M)):\n            print(i)\n    return ''\n\"\"\"\n\n\n\"\"\"\n"
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    # N = 3, M = 3\n    #s_1 = 1, c_1 = 7\n    #s_2 = 3, c_2 = 2\n    #s_3 = 1, c_3 = 7\n    s = [int(i) for i in stdin.split()[:M]]\n    c = [int(i) for i in stdin.split()[M:]]\n    ans = ''\n    for num in range(0, pow(10, N)):\n        satisfied = True\n        #num_str = str(num)\n        num_str = str(num).rjust(N, '0')\n        for i in range(0, M):\n            satisfied &= (int(num_str[i]) == s[i])\n            if not satisfied:\n                break\n        if satisfied:\n            for i in range(0, M):\n                ans += num_str[i]\n            break\n    if not satisfied:\n        ans = '-1'\n    return ans"
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    s, c = [], []\n    for _ in range(n):\n        s.append(int(stdin.split(' ')[0]))\n        c.append(int(stdin.split(' ')[1]))\n\n    s.sort()\n    c.sort()\n    if s[0] == 1:\n        return str(s[0])\n    if len(s)!= n:\n        return -1\n    if s[-1] < n:\n        return -1\n    d = 0\n    for i in range(n):\n        d += abs(s[i] - c[i])\n    return str(s[0] * 10 ** d + c[0])\n"
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Returns a string with the smallest integer satisfying the conditions\n    '''\n    n, m = map(int, stdin.split())\n    digits = list(map(int, stdin.split()[1:]))\n    ans = '-1'\n\n    def is_satisfied(i):\n        return digits[i - 1] == (i - 1) % 10 + 1 and digits[i] == (i % 10)\n\n    for i in range(1, m + 1):\n        if is_satisfied(i):\n            ans = str(i)\n            break\n\n    return ans\n"
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('3 3\\n1 7\\n3 2\\n1 7')\n    702\n    \"\"\"\n    n, m = stdin.split(\" \")\n    n, m = int(n), int(m)\n    digits = [[int(i) for i in stdin.split()] for _ in range(n)]\n    # digits is an array of arrays of integers, i.e. [[1, 7], [3, 2], [1, 7]]\n    #\n    # digits[0][0] is the 1-st digit of the 1-st element of the array\n    # digits[0][1] is the 2-nd digit of the 1-st element of the array\n    # digits[1][0] is the 1-st digit of the 2-nd element of the array\n    #...\n    #\n    # digits[1][1] is the 2-nd digit of the 2-nd element of the array\n    # digits[0][1] is the 2-nd digit of the 1-st element of the array\n    #\n    # digits[0][0] is the 1-st digit of the 1-st element of the array\n    # digits[0][1] is the 2-nd digit of the 1-st element of the array\n    #\n    # digits[1][0] is the 1-st digit of the 2-nd element of the array\n    #...\n    #\n    # digits[1][1] is the 2-nd digit of the 2-nd element of the array\n    # digits[1][0] is the 2-nd digit of the 1-st element of the array\n    #\n    # digits[0][0] is the 1-st digit of the 1-st element of the array\n    # digits[0][1] is the 2-nd digit of the 1-st element of the array\n    #\n    #...\n    #\n    # digits[1][0] is the 1-st digit of the 2-nd element of the array\n    #\n    # digits[1][1] is the 2-nd digit of the 2-nd element of the array\n    #\n    # digits[1][0] is the 1-st digit of the 2-nd element of the array\n    #\n    # digits[0][0] is the 1-st digit of the 1-st element of the array\n    #\n    #...\n    #\n    # digits[1][1] is the 2-nd digit of the 2-nd element of the array\n    # digits[0][1] is the 2-nd digit of the 1-st element of the array\n    #\n    #...\n    #\n    # digits[1][0] is the 1-st digit of the 2-nd element of the array\n    #\n    # digits[1][1] is the 2-nd digit of the 2-nd element of the array\n    #\n    # digits[0][0] is the 1-st digit of the 1-st element of the array\n    #\n    #...\n    #\n    # digits[1][1] is the 2-nd digit of the 2-nd element of the array\n    # digits[0][1] is the 2-nd digit of the 1-st element of the array\n    #\n    #...\n    #\n    # digits[0][0] is the 1-st digit of the 1-st element of the array\n    #\n    # digits[1][0] is the 1-st digit of the 2-nd element of the array\n    #\n    #...\n    #\n    # digits[1][1] is the 2-nd digit of the 2-nd element of the array\n    # digits[1][0] is the 2-nd digit of the 1-st element of the array\n    #\n    #...\n    #\n    # digits[0][0] is the 1-st digit of the 1-st element of the array\n    # digits[1][0] is the 1-st digit of the 2-nd element of the array\n    #\n    #...\n    #\n    # digits[1][1] is the 2-nd digit of the 2-nd element of the array\n    # digits[1][0] is the 2-nd digit of the 1-st element of the array\n    #\n    #...\n    #\n    # digits[0][0] is the 1-st digit of the 1-st element of the array\n    #\n    # digits[1][0] is the 1-st digit of the 2-nd element of the array\n    #\n    #...\n    #\n    # digits[1][1] is the 2-nd digit of the 2-nd element of the array\n    # digits[1][0] is the 2-nd digit of the 1-st element of the array\n    #\n    #...\n    #\n    # digits[0][0] is the 1-st digit of the 1-st element of the array\n    #\n    # digits[1][0] is the 1-st digit of the 2-nd element of the array\n    #\n    #...\n    #\n    # digits[1][1] is the 2-nd digit of the 2-nd element of the array\n    #\n    # digits[0][0] is the 1-st digit of the 1-st element of the array\n    #\n    #...\n    #\n    # digits[0][1] is the 2-nd digit of the 1-st element of the array\n    #\n    # digits[1][0] is the 1-st digit of the 2-nd element of the array\n    #\n    #...\n    #\n    # digits[1][1] is the 2-nd digit of the 2-nd element of the array\n    #\n    # digits[1][0] is the 2-nd digit of the 1-st element of the array\n    #\n    #...\n    #\n    # digits[0][0] is the 1-st digit of the 1-st element of the array\n    #\n    # digits[1][0] is the 1-st digit of the 2-nd element of the array\n    #\n    #...\n    #\n    # digits[1][1] is the 2-nd digit of the 2-nd element of the array\n    # digits[1][0] is the 2-nd digit of the 1-st element of the array\n    #\n    #...\n    #\n    # digits[0][0] is the 1-st digit of the 1-st element of the array\n    #\n    # digits[1][0] is the 1-st digit of the 2-nd element of the array\n    #\n    #...\n    #\n    # digits[1][1] is the 2-nd digit of the 2-nd element of the array\n    #\n    # digits[1][0] is the 2-nd digit of the 1-st element of the array\n    #\n    #...\n    #\n    # digits[0][0] is the 1-st digit of the 1-st element of the array\n    #\n    # digits[1][0] is the 1-st digit of the 2-nd element of the array\n    #\n    #...\n    #\n    # digits[1][1] is the 2-nd digit of the 2-nd element of the array\n    # digits[0][1] is the 2-nd digit of the 1-st element of the array\n    #\n    #...\n    #\n    # digits[1][0] is the 1-st digit of the 2-nd element of the array\n    #\n    # digits[0][0] is the 1-st digit of the 1-st element of the array\n    "
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"\"\"3 3\n   ... 1 7\n   ... 3 2\n   ... 1 7\"\"\")\n    702\n    \"\"\"\n    return stdin\n"
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.strip().split(' ')]\n    digits = stdin.strip().split('\\n')\n    s = [int(x) for x in digits[0].split(' ')]\n    c = [int(x) for x in digits[1].split(' ')]\n    for num in range(101, 10 ** n):\n        pass\n"
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n = int(stdin[0])\n    m = int(stdin[1])\n    numbers = []\n    for i in range(m):\n        stdin = stdin[i+2].split()\n        s = int(stdin[0])\n        c = int(stdin[1])\n        numbers.append((s,c))\n    def check_number(number):\n        for x in numbers:\n            if x[0] <= number % 10 <= x[1]:\n                return False\n        return True\n    def check_all_numbers(n):\n        for x in range(1,n+1):\n            if check_number(x):\n                return x\n    if check_all_numbers(n) == None:\n        return -1\n    return check_all_numbers(n)\n\nn, m = map(int,input().split())\nnumbers = []\nfor i in range(m):\n    stdin = input().split()\n    s = int(stdin[0])\n    c = int(stdin[1])\n    numbers.append((s,c))\ndef"
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    while n >= 0:\n        if m >= 0:\n            a = n\n            b = m\n            n = 0\n            m = 0\n        else:\n            return -1\n    if n == a and m == b:\n        return str(n)\n    return '-1'\n"
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = [int(x) for x in stdin.split(\" \")]\n    n = a[0]\n    k = a[1]\n    triples = []\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for l in range(j+1, n):\n                if (i+j)%k == 0 and (j+l)%k == 0 and (l+i)%k == 0:\n                    triples.append((i, j, l))\n    return str(len(triples))\n    \n"
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    (n, k) = map(int, stdin.split())\n    res = 0\n    for i in range(1, n + 1):\n        if i % k == 0:\n            res += i // k * (i // k - 1) // 2\n    print(res)\n    return ''"
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    N, K = [int(x) for x in stdin.split(' ')]\n    return N//K * (N//K-1) * (N//K-2)//2 + (N//K + 1) * (N//K + 1) * (N//K + 2)//6\n"
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    print(sum(sum(num for num in range(1, n + 1) if not num % k) // k * 3))\n"
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    n, k = map(int, stdin.split())\n    count = 0\n    for a in range(n):\n        for b in range(a+1, n):\n            if (a + b) % k == 0 and (b + a) % k == 0:\n                count += 1\n    return count\n"
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    num, K = [int(x) for x in stdin.split()]\n    count = 0\n    for i in range(1, num+1):\n        for j in range(i+1, num+1):\n            if i+j <= num:\n                if (i%K == 0 and j%K == 0) or (j%K == 0 and i%K == 0):\n                    count += 1\n    return str(count)"
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    ans = 0\n    for i in range(3):\n        for j in range(3):\n            for k in range(3):\n                if (i!= j and j!= k and k!= i) and (i + j + k) % k == 0:\n                    ans += 1\n    return ans\n    pass"
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    return str(N * (N - 1) * (N - 2) // 6 // K)\n\nprint(solution(input()))"
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n, k = [int(i) for i in stdin.split(' ')]\n    if k == 1:\n        return '0'\n    ans = 0\n    for a in range(1, n):\n        for b in range(1, n):\n            for c in range(1, n):\n                if a+b > n or b+c > n or c+a > n or a+b%k!= 0 or b+c%k!= 0 or c+a%k!= 0:\n                    continue\n                if a == b or b == c or c == a:\n                    continue\n                ans += 1\n    return ans\n\nprint(solution(input()))"
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, K = stdin.split(' ')\n    N = int(N)\n    K = int(K)\n    count = 0\n    for a in range(1, N+1):\n        for b in range(a, N+1):\n            for c in range(b, N+1):\n                if a % K == 0 and b % K == 0 and c % K == 0:\n                    count += 1\n    return str(count)\n"
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return '1011'\n"
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x = bin(int(stdin))[2:]\n    return '0' * (len(stdin) - len(x)) + x"
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    result = 0\n    while x!= 0:\n        result = result * 2 + (x % 2)\n        x //= 2\n    return bin(result)[2:]\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    bin_n = '0b' + stdin\n    return bin_n[2:]\n"
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    number = int(stdin)\n    if number == 0:\n        return '0'\n    s = ''\n    while number!= 0:\n        s += str(number % 2)\n        number //= 2\n    return s[::-1]"
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('-9')\n    1011\n    \"\"\"\n    return bin(int(stdin))[2:]\n"
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin, 2))\n"
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    decimal_value = 0\n    power_of_two = 1\n    while N!= 0:\n        N_modulo_two = N % (-2)\n        decimal_value += N_modulo_two * power_of_two\n        N = N // (-2)\n        power_of_two *= -2\n    return str(decimal_value)\n"
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    bit = 0\n    base = 1\n    while N > base:\n        bit += 1\n        base *= 2\n    base >>= 1\n    return bin(N - base)[3:]\n"
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the minimum amount of money with which Takahashi can buy M cans of energy drinks.\n\n    Args:\n        stdin (str): standard input\n\n    Returns:\n        str: the minimum amount of money with which Takahashi can buy M cans of energy drinks\n    \"\"\"\n    # Get input\n    _, _, *inputs = stdin.split(\"\\n\")\n    n, m = map(int, inputs[0].split())\n    A, B = [0] * n, [0] * n\n    for i in range(n):\n        A[i], B[i] = map(int, inputs[1 + i].split())\n\n    # Sort stores based on prices\n    A, B, sorted_indices = zip(*sorted(zip(A, B, range(n)), reverse=True))\n    sorted_indices = list(sorted_indices)\n\n    # Greedy algorithm\n    total_cost = 0\n    cans_sold = 0\n    for i in range(n):\n        if cans_sold < m:\n            if m - cans_sold <= B[sorted_indices[i]]:\n                cans_sold += A[sorted_indices[i]]\n                total_cost += A[sorted_indices[i]] * B[sorted_indices[i]]\n            else:\n                total_cost += A[sorted_indices[i]] * (B[sorted_indices[i]] - cans_sold)\n                cans_sold = B[sorted_indices[i]]\n        else:\n            break\n    total_cost += cans_sold * A[sorted_indices[i]]\n    return total_cost"
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    drinks = list(map(int, stdin.split()))\n    _min = 99999999\n    for i in range(len(drinks)):\n        _max = 0\n        _sum = 0\n        for j in range(i, len(drinks)):\n            _sum += drinks[j]\n            _max = max(_max, _sum)\n            if _max <= M:\n                _min = min(_min, _max)\n            else:\n                break\n    return _min\n\n-----Explanation-----\nThe optimal solution is to buy drinks with maximum sum of money and sell it to the highest priced store. We calculate maximum sum of money with the least amount of money.\n\"\"\"\n\nimport sys\n\ndef"
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nn, m = map(int, stdin.readline().split())\n\nst = []\nfor _ in range(n):\n    a, b = map(int, stdin.readline().split())\n    st.append((a, b))\n\nst.sort(key=lambda x: x[0])\n\nans = 0\ncans = 0\nfor a, b in st:\n    if cans + b < m:\n        cans += b\n        ans += cans * a\n    else:\n        ans += cans * a\n        break\n\nprint(ans)\n"
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    N, M = list(map(int, stdin.split()))\n    A, B = [], []\n    for _ in range(N):\n        A_i, B_i = list(map(int, stdin.split()))\n        A.append(A_i)\n        B.append(B_i)\n    result = 0\n    for i in range(N):\n        temp = M - A[i]\n        if temp >= 0:\n            if temp >= B[i]:\n                result += B[i] * A[i]\n                temp -= B[i]\n                result += temp * A[i]\n            else:\n                result += temp * A[i]\n    return result\n"
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    pass\n"
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return \"The minimum amount of money with which Takahashi can buy M cans of energy drinks is {} yen.\".format(min_money)\n"
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport sys\n\nN, M = map(int, input().split())\nA = list(map(int, input().split()))\nB = list(map(int, input().split()))\n\ndef"
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    N, M = map(int, stdin.split())\n    cans = [0]*N\n    for i in range(N):\n        cans[i] = int(stdin.split()[i*2+1])\n\n    max_can = max(cans)\n    can_money = [0]*max_can\n    for i in range(N):\n        can_money[cans[i]-1] += cans[i]\n\n    can_money.sort()\n    can_money.reverse()\n    ans = 0\n    for money in can_money:\n        if money >= M:\n            ans += money\n            M = money\n    return ans"
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n  def _solve(n, m, *args):\n    \"\"\"Solve the problem.\"\"\"\n    args = list(args)\n    a, b = args.pop(0), args.pop(0)\n    best = None\n    for i in range(n):\n      for j in range(m):\n        if a[i] >= b[j]:\n          x = a[i] - b[j]\n          if x > best:\n            best = x\n    return str(best)\n\n  n, m = map(int, stdin.split())\n  a = list(map(int, stdin.split()))\n  b = list(map(int, stdin.split()))\n  print(_solve(n, m, a, b))\n"
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    _, m = stdin.split(' ')\n    m = int(m)\n    a = []\n    b = []\n    for i in range(int(m)):\n        input_ = stdin.split('\\n')[i].split(' ')\n        a.append(int(input_[0]))\n        b.append(int(input_[1]))\n    return str(m)\n\nsolution('2 5\\n4 9\\n2 4')\n"
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def solution_runner(stdin: str) -> None:\n        n, h = [int(x) for x in stdin.split('\\n')]\n        for i in range(1, n):\n            h = max(h, i * h)\n            print(i)\n    return solution_runner\n"
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n  \n  n = int(stdin)\n  heights = [int(height) for height in stdin.split(\"\\n\")]\n  \n  def get_largest_height(start, end):\n    if end - start == 1:\n      return heights[start]\n    mid = (start + end) // 2\n    if heights[mid] < heights[start]:\n      return get_largest_height(mid, end)\n    elif heights[mid] > heights[end]:\n      return get_largest_height(start, mid)\n    else:\n      return max(get_largest_height(start, mid), get_largest_height(mid, end))\n  \n  height = get_largest_height(0, n - 1)\n  \n  def count_elements_larger_than_height(start, end):\n    if end - start == 1:\n      if heights[start] < heights[end]:\n        return end\n      else:\n        return start\n    mid = (start + end) // 2\n    if heights[mid] < heights[start]:\n      return count_elements_larger_than_height(mid, end)\n    elif heights[mid] > heights[end]:\n      return count_elements_larger_than_height(start, mid)\n    else:\n      return min(count_elements_larger_than_height(start, mid), count_elements_larger_than_height(mid, end))\n  \n  largest_element = count_elements_larger_than_height(0, n - 1)\n  print(largest_element)\n  \n  def move(start, end):\n    if end - start == 1:\n      if heights[start] < heights[end]:\n        return end\n      else:\n        return start\n    mid = (start + end) // 2\n    if heights[mid] < heights[start]:\n      return move(mid, end)\n    elif heights[mid] > heights[end]:\n      return move(start, mid)\n    else:\n      return move(start, mid)\n  \n  index = move(0, n - 1)\n  result = 0\n  while index!= 0:\n    result += 1\n    index = move(0, index)\n  return result"
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Time complexity: O(n)\n    Space complexity: O(1)\n    '''\n    moves = int(stdin)\n    current_square, previous_square = 0, 0\n    while moves > 0:\n        current_square = (current_square + 1) % moves\n        previous_square = current_square\n        if current_square == 0:\n            break\n        moves -= 1\n    return moves\n    '''\n    To improve the space complexity, you could use a variable to store the\n    highest square number.\n    '''\n"
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    total_squares = int(stdin.readline())\n    squares = list(map(int, stdin.readline().strip().split(\" \")))\n    squares.sort()\n    max_squares = 0\n    cur_squares = 0\n    for height in reversed(squares):\n        if cur_squares + 1 <= height:\n            max_squares += 1\n            cur_squares = height + 1\n    print(max_squares)\n    return\n\nsolution(\"5\\n10 4 8 7 3\")"
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return 0\n'''\n\nimport sys\n\ndef"
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5\n   ... 10 4 8 7 3''')\n    2\n    \"\"\"\n    return ''\n"
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, *h = map(int, stdin.split('\\n'))\n    max_move = 0\n    i = 0\n    while i < len(h):\n        if i == 0 and h[i] > h[i+1]:\n            max_move += 1\n            i += 1\n        elif i == len(h) - 1 and h[i] > h[i-1]:\n            max_move += 1\n            i += 1\n        elif h[i] > h[i-1] and h[i] > h[i+1]:\n            max_move += 1\n            i += 1\n        else:\n            i += 1\n    return max_move\n"
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Get data from standard input\n    n = int(stdin.readline())\n    heights = list(map(int, stdin.readline().split()))\n\n    # Get height of each square\n    squares = [0] * n\n\n    for i in range(n):\n        squares[i] = heights[i]\n        squares[i] = max(squares[i], squares[i - 1])\n\n    # Get the maximum number of moves\n    moves = 0\n    for i in range(n):\n        if squares[i] > 0:\n            moves += (squares[i] - 1) // (n - i)\n    return moves\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    h = list(map(int, stdin.readline().split()))\n    dp = [0]*n\n    dp[0] = 1\n    for i in range(n):\n        dp[i] = 1\n        for j in range(i):\n            if h[j] < h[i]:\n                dp[i] = max(dp[i], dp[j]+1)\n    return max(dp)\n"
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    count = 0\n    while len(set(a)) < k:\n        for i in range(n):\n            if a[i] % 2 == 0:\n                a[i] = a[i] / 2\n                count += 1\n                break\n    print(count)\n"
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    n, k = map(int, stdin.split(' '))\n    a = list(map(int, stdin.split(' ')))\n    a.sort()\n    ans = 0\n    s = 0\n    for x in a:\n        if s + x > k:\n            ans += 1\n            s = x\n        else:\n            s += x\n    ans += 1\n    return ans\n"
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    arr = list(map(int, stdin.split(' ')))\n    arr = sorted(arr)\n    diff = [arr[i] - arr[i-1] for i in range(1, n)]\n    return sum([diff[i] // 2 for i in range(n-1) if diff[i] % 2!= 0])\n\nprint(solution(input()))\n"
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    n, k = list(map(int, stdin.split('\\n')[0].split()))\n    A = list(map(int, stdin.split('\\n')[1].split()))\n    A = [i if i!= 0 else 1 for i in A]\n    '''\n    n, k = list(map(int, stdin.split('\\n')[0].split()))\n    A = list(map(int, stdin.split('\\n')[1].split()))\n    A.sort()\n    if A[0] == 1:\n        return 0\n    else:\n        d = A[0]\n        l = 0\n        r = len(A)\n        res = 0\n        while l!= r:\n            if d == k:\n                break\n            elif d < k:\n                l += 1\n                res += 1\n                d += A[l]\n            else:\n                r -= 1\n                res += 1\n                d -= A[r]\n        return res\n"
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    k, n = [int(x) for x in stdin.split(\" \")]\n    A = [int(x) for x in stdin.split(\" \")[1:]]\n    \n    \n    dp = [0 for _ in range(n)]\n    if k == n:\n        return 0\n    \n    dp[0] = 0\n    for i in range(1, n):\n        dp[i] = dp[i-1] + abs(A[i]-A[i-1])//2\n    \n    ans = 10**12\n    if k>=1:\n        ans = min(dp[n-1], k)\n    if k>=2:\n        ans = min(dp[n-2], k-1)\n    if k>=3:\n        ans = min(dp[n-3], k-2)\n    return ans\n    \n"
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the minimum possible number of operations required to obtain at least k equal numbers in the array.\"\"\"\n    n, k = map(int, stdin.split(' '))\n    a = list(map(int, stdin.split(' ')))\n\n    if any(a):\n        diff = sum(a) - k\n        if diff < 0:\n            return 0\n        elif diff == 0:\n            return len(a)\n        return abs(diff) + 1\n    return 0\n"
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # import sys\n    # sys.stdin = open(\"./input.txt\")\n\n    n, k = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n\n    if sum(a) < k:\n        return 0\n\n    ans = 0\n    a = sorted(a, reverse=True)\n\n    for i in range(n):\n        k -= a[i]\n        ans += 1\n\n        if k <= 0:\n            break\n\n    return ans"
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return str(solve(stdin))\n\ndef"
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    count = 0\n    while sum(a)!= k * 2:\n        for i, val in enumerate(a):\n            if val % 2 == 0:\n                a.pop(i)\n                count += 1\n                break\n    print(count)"
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return \"\""
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    n, k = map(int, stdin.split(' '))\n    a = map(int, stdin.split(' '))\n    a.sort()\n    return a[k - 1] - a[k - 2]\n"
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\""
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, k = [int(i) for i in stdin.split(' ')]\n    li = [int(i) for i in stdin.split(' ')]\n    count = 0\n    while li.count(min(li)) < k:\n        for i in range(len(li)):\n            if li[i] == min(li):\n                if i == len(li) - 1:\n                    li[i] += 1\n                    count += 1\n                else:\n                    if li[i+1] > li[i]:\n                        li[i] += 1\n                        count += 1\n                    else:\n                        li[i+1] += 1\n                        count += 1\n    return count\n"
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''\n"
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"1 2 2 4 2 3\\n3 3 2 1 1 1 3\")\n    3\n    \"\"\"\n    n, k = map(int, stdin.split('\\n')[:2])\n    a = [int(i) for i in stdin.split('\\n')[1].split()]\n\n    count = 0\n    for i in range(n):\n        if a[i] == min(a):\n            a[i] += 1\n            count += 1\n        if a[i] == max(a):\n            a[i] -= 1\n            count += 1\n        if count == k:\n            break\n    return count\n"
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    k, *a = map(int, stdin.split('\\n')[0].split())\n    min_a, max_a = min(a), max(a)\n    if k < min_a:\n        return min_a - k\n    elif k > max_a:\n        return max_a + k - k*2\n    else:\n        return 0"
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    moves = 0\n    i = 0\n    while k > 0:\n        if a[i] == min(a) or a[i] == max(a):\n            moves += 1\n            a[i] += 1\n            if a[i] == max(a):\n                a[i] = min(a)\n            i = (i + 1) % n\n            k -= 1\n        else:\n            i = (i + 1) % n\n    print(moves)\n"
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    moves = 0\n    while k > 0:\n        mi = a.index(min(a))\n        ma = a.index(max(a))\n        if a[mi] == a[ma]:\n            a[mi] = a[mi] + 1\n            a[ma] = a[ma] - 1\n            moves += 1\n        else:\n            a[mi] = a[mi] + 1\n            a[ma] = a[ma] - 1\n            moves += 2\n        k -= 1\n    return moves\n    \n"
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    arr = [int(i) for i in stdin.split()]\n    arr.sort()\n    moves = 0\n    for i in range(n):\n        if arr[i] == arr[i - 1]:\n            moves += 1\n            if moves == k:\n                return moves\n        else:\n            moves = 0\n    return moves\n"
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, q = [int(i) for i in stdin.split()]\n    a = [int(i) for i in stdin.split()]\n    b = [int(i) for i in stdin.split()]\n    d = [int(i) for i in stdin.split()]\n    d.sort()\n    ans = [0]*n\n    for i in range(k, len(a)+1):\n        ans[i-k] = d[i-1]\n    for i in range(k):\n        ans[i] = d[i]\n    return '\\n'.join([str(i) for i in ans])\n\nprint(solution('4 1 3\\n 7 3 2\\n 1 1000 1\\n 1000000000000 42 88'))"
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    num_cases = int(stdin.readline())\n\n    for _ in range(num_cases):\n        num_liters, bottle_a, bottle_b = map(int, stdin.readline().split())\n\n        def min_cost(bottles: List[int]) -> int:\n            return sum(bottle * (a if bottle < b else b) for a, b in zip(bottles, bottles[1:]))\n\n        bottles = [bottle_a, bottle_b]\n        while num_liters:\n            bottles = [bottle_a] + bottles[:bottle_b - 1]\n            num_liters -= 1\n        print(min_cost(bottles))\n\n    return ''\n"
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\"\"\"\nimport sys\n\n\ndef"
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n    \n    return \"\""
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, n, q = [int(x) for x in stdin.split()]\n    min_value = n\n    for x, y in zip(a, b):\n        min_value = min(x*n+y, min_value)\n    for _ in range(q):\n        n = int(stdin.readline().split()[0])\n        print(min_value)\n    return ''"
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find the minimal amount of money (in burles) Polycarp needs to buy exactly n liters of water in the nearby shop if the bottle of the first type costs a burles and the bottle of the second type costs b burles.\n    \"\"\"\n    return '\\n'.join(map(str, answer))"
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"10 1 3\\n7 3 2\\n1 1000 1\\n1000000000000 42 88\")\n    '10\\n9\\n1000\\n42000000000000'\n    \"\"\"\n    a = int(next(stdin))\n    b = int(next(stdin))\n    n = int(next(stdin))\n    return \"\\n\".join(\n        [\n            str(n // a + n // b + n % a + n % b)\n            for n in [int(next(stdin)) for _ in range(q)]\n        ]\n    )\n"
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return ''\n"
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return None"
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your solution\n    return str(len(stdin.split('\\n')))"
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    ans = 0\n    n, x = map(int, stdin.split(' '))\n    balls = list(map(int, stdin.split(' ')))\n    for i in range(n + 1):\n        for j in range(i + 1, n + 1):\n            if balls[j] - balls[i] <= x:\n                ans += 1\n    return ans\n    \n"
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    #get input\n    first_line = stdin.split()\n    N, X = int(first_line[0]), int(first_line[1])\n    L = list(map(int, stdin.split()))\n\n    #create a new dictionary with the indices and distances, and the number of bounces\n    distances = {}\n    for i in range(N):\n        distances[i] = L[i]\n\n    #create a new list with the final distances\n    dist_list = []\n    for i in range(N):\n        dist_list.append(0)\n\n    #iterate through the list of distances and calculate the final distances, and update the number of bounces\n    i = 0\n    while i < N:\n        if i == 0:\n            dist_list[i] = distances[i]\n            i += 1\n        else:\n            dist_list[i] = distances[i] + dist_list[i-1]\n            i += 1\n\n    #iterate through the list of distances and calculate the number of bounces\n    counter = 0\n    for i in dist_list:\n        if i <= X:\n            counter += 1\n\n    return counter\n\nprint(solution(\"3 6\"))\n"
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # Write your code here\n    def func(stdin):\n        l = list(map(int, stdin.split()))\n        L = l[1:]\n        return (L,l[0])\n    \n    def calc(stdin):\n        L, n = func(stdin)\n        i = 0\n        x = 0\n        for i in range(n):\n            x += L[i]\n            if x >= n:\n                return i\n    \n    return str(calc(stdin))\nprint(solution(stdin()))\n"
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3 6\n   ... 3 4 5\n   ... ''')\n    2\n    \"\"\"\n\n    return \"\"\"\n        # Fills the matrix with 0s\n        matrix = [[0] * (N + 1) for _ in range(2)]\n        # Fills the first column of the matrix with 1s\n        matrix[0][1:] = [1] * N\n        # Fills the first row of the matrix with Ls\n        matrix[1][1:] = Ls\n        # Fills the matrix with the initial conditions\n        matrix[0][0], matrix[1][0] = 0, 0\n        # Makes the matrix symmetric\n        matrix = make_symmetric(matrix)\n        # Fills the matrix with the initial conditions\n        matrix[0][0], matrix[1][0] = 0, 0\n        # Iterates through every row in the matrix\n        for i in range(len(matrix)):\n            # Iterates through every column in the matrix\n            for j in range(len(matrix[i])):\n                # Sums the numbers in the row\n                row_sum = sum(matrix[i])\n                # Sums the numbers in the column\n                column_sum = sum([matrix[k][j] for k in range(len(matrix))])\n                # Replaces the number in the matrix at the current position with the sum of the previous row and column\n                matrix[i][j] = (row_sum + column_sum) % M\n        # Iterates through every row in the matrix\n        for i in range(len(matrix)):\n            # Iterates through every column in the matrix\n            for j in range(len(matrix[i])):\n                # Checks if the current position is less than or equal to the target value\n                if matrix[i][j] <= X:\n                    # Increments the number of bounces\n                    count += 1\n    \"\"\"\n"
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport sys\nimport itertools\n\ndef"
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return 'Not implemented yet'"
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, X = map(int, stdin.readline().strip().split(\" \"))\n    array = list(map(int, stdin.readline().strip().split(\" \")))\n    # answer = 0\n    # for i in range(len(array)):\n    #     if array[i] <= X:\n    #         answer += 1\n    # print(answer)\n    # return str(answer)\n    return str(sum(1 for d in array if d <= X))"
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    # setup variables\n    count = 0\n    bounces = int(stdin.split()[0])\n    bounce_dist = [int(x) for x in stdin.split()[1:]]\n    # count bounces\n    for i in range(1, bounces + 1):\n        if bounce_dist[i - 1] + i > bounces:\n            break\n        count += 1\n    return str(count)\n"
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # create list of input\n    inputs = stdin.split(\"\\n\")\n\n    # input list\n    N, X = map(int, inputs[0].split(\" \"))\n    D = list(map(int, inputs[1].split(\" \")))\n\n    # initialize variables\n    total = 0\n    start = 0\n    end = X\n\n    for i in range(N):\n        # check if ball needs to start counting again\n        if end <= D[i]:\n            start = end\n            end = end + X\n        else:\n            # print(\"ball at {}, counted {} times.\".format(start, i-start+1))\n            total += i-start+1\n\n    return total\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Get and validate input.\n       Use `stdin` to read input of the following format:\n       N X\n       L_1 L_2... L_{N-1} L_N\n       The input is valid iff:\n       - `1 \\leq N \\leq 100`\n       - `1 \\leq L_i \\leq 100`\n       - `1 \\leq X \\leq 10000`\n       - The input is wrapped by a pair of parenthesis.\n       - The input is sorted in ascending order of X.\n       If the input is invalid, print the following error message and exit:\n       `Invalid input!`\n       Return the number of times the ball will make a bounce where the coordinate is at most X, if any.\n       If the ball never makes a bounce where the coordinate is at most X, print `No bounce`.\n    \"\"\"\n    # split input by whitespace\n    inputs = stdin.split()\n\n    # validate inputs\n    try:\n        # get number of bounces\n        n = int(inputs[0])\n\n        # get the x coordinate of each bounce\n        x = list(map(int, inputs[1].split()))\n\n        # get the total length of the ball\n        l = int(inputs[2])\n\n    # if input is invalid\n    except ValueError:\n        # print error and exit\n        print(\"Invalid input!\")\n        return\n    except IndexError:\n        # print error and exit\n        print(\"Invalid input!\")\n        return\n\n    # initialize dictionary of bounces\n    bounces = {}\n\n    # increment the number of bounces at coordinate x\n    for i in range(0, n):\n        # if x has not been previously incremented\n        if x[i] not in bounces:\n            # initialize number of bounces at x\n            bounces[x[i]] = 1\n        # otherwise, increment the number of bounces at x\n        else:\n            bounces[x[i]] += 1\n\n    # if any x has not been incremented\n    if not bounces:\n        # print no bounce\n        print(\"No bounce\")\n\n    # otherwise, determine the number of bounces\n    else:\n        # initialize the number of bounces\n        count = 0\n\n        # iterate through each bounce\n        for i in bounces:\n            # increment the number of bounces at each coordinate x\n            if i < l:\n                # if there is another bounce at x+1, increment the number of bounces\n                if (i+1) in bounces:\n                    count += bounces[i+1]\n            # otherwise, increment the number of bounces at coordinate x\n            else:\n                count += bounces[i]\n\n        # print the number of bounces\n        print(count)\n    return\n"
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, *words = [line.strip() for line in stdin.split(\"\\n\")]\n    assert len(words) == int(n)\n\n    return 'Yes' if all(words[i] <= words[i + 1] and len(words[i]) == len(words[i + 1]) and words[i] < words[i + 1] for i in range(0, len(words), 2)) else 'No'\n"
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N: int = int(stdin[0])\n    word_list: List[str] = []\n    for _ in range(N):\n        word_list.append(stdin[2 + _])\n\n    for i in range(N):\n        for j in range(N):\n            if i!= j:\n                if word_list[i][-1]!= word_list[j][0]:\n                    print(\"No\")\n                    return\n    print(\"Yes\")\n"
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return 'Yes' if len(set(stdin.splitlines())) == 1 else 'No'\n\"\"\"\n\ndef"
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin)\n    words = []\n    for i in range(num):\n        word = stdin.split(\"\\n\")[i]\n        words.append(word)\n    for i in range(num):\n        if i!= 0:\n            if words[i-1] == words[i]:\n                return \"Yes\"\n            else:\n                return \"No\"\n        else:\n            pass\n"
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, *words = [line for line in stdin.split('\\n') if line]\n    words = list(set(words))\n    count = len(words)\n\n    if count == 0 or count > 100:\n        return 'No'\n\n    for word in words:\n        if word in set(words):\n            words.remove(word)\n        else:\n            return 'No'\n\n    if count == len(words):\n        return 'Yes'\n\n\ndef"
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    words = stdin.split(\"\\n\")\n    len_words = len(words)\n    pre_words = []\n    for i in range(len_words):\n        pre_words.append(words[i].split(\" \"))\n    if pre_words[len_words - 1] == ['']:\n        return \"No\"\n    else:\n        for i in range(len_words - 1):\n            if words[i] == pre_words[i][0]:\n                print(pre_words[i + 1][0])\n                if pre_words[i + 1][0]!= pre_words[i][0]:\n                    return \"No\"\n    return \"Yes\""
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    words = stdin.splitlines()\n    for i in range(1, len(words)):\n        if words[i] == words[i - 1]:\n            return 'No'\n    return 'Yes'"
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    inp = stdin.split(\"\\n\")\n    n = int(inp[0])\n    for i in range(n):\n        if i == 0:\n            res = inp[1]\n        else:\n            if inp[i+1] == res[-1]:\n                res += inp[i+1]\n            else:\n                res += \" \" + inp[i+1]\n    if res == \"englishenglishenglishenglishenglish\":\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    words = []\n    for line in stdin.split('\\n'):\n        words.append(line)\n\n    ans = 'Yes' if len(words) == 1 else 'No'\n    return ans"
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split(\"\\n\")[0])\n    n = [stdin.split(\"\\n\")[1:][i] for i in range(N)]\n    n_set = set(n)\n    taka_n = [n[0]]\n    for i in n[1:]:\n        if i not in taka_n and i[0] == taka_n[-1][-1]:\n            taka_n.append(i)\n        else:\n            break\n    if len(taka_n) == N:\n        return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(max(a, b) * (max(a, b) - 1) // 2)\n"
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.readline().split())\n    return \"3\" * (a+b-1)\n"
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if (A + B) % 3 == 0:\n        return (A + B) // 3\n    else:\n        return -1\n    \n"
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(x) for x in stdin.split()]\n    if a > b:\n        a, b = b, a\n    return a * 2 + b"
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B = list(map(int, stdin.split()))\n    print(min(6 * A, 6 * B))\n    \n"
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    number_of_guests = [int(x) for x in stdin.split()]\n    n, m = number_of_guests\n    if n == m:\n        return n * (n - 1) // 2\n    elif n > m:\n        return n * (m - 1) + m * (n - m)\n    else:\n        return m * (n - 1) + n * (m - n)\n"
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    min_piece = 0\n    if A < B:\n        min_piece = A\n    else:\n        min_piece = B\n    return min_piece\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return min(a * 3, b * 2)\n\n---Solution---\nUsing BFS:\n\nfrom collections import deque\n\ndef"
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \n    return \"\"\n"
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B = stdin.split(' ')\n    A, B = int(A), int(B)\n    if A == B:\n        return A\n    return 2 * min(A, B) - 1\n\"\"\"\n\nimport sys\nfrom math import gcd\n\ndef"
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace('a', 'x')"
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace('s', 'x')"
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    for i in range(len(s)):\n        print(s[i].replace(s[i],'x'),end=\"\")\n    return s"
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return 'x' * len(stdin)"
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace(stdin)\n"
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace('a', 'x')\n\"\"\"\n\ndef"
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace('s', 'x')\n    \n"
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n\ndef"
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace('', 'x')\n"
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace('a', 'x')\n"
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    H = list(map(int, stdin.readline().split()))\n    dp = [0 for _ in range(N)]\n    for i in range(N):\n        dp[i] = H[i]\n    for i in range(1, N):\n        for j in range(i):\n            if dp[j] <= dp[i]:\n                dp[i] = max(dp[j] + 1, dp[i])\n    return \"Yes\" if N - max(dp) > 0 else \"No\"\n"
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n, *h = map(int, stdin.split())\n    h = [max(0, i - 1) for i in h]\n\n    if all(i >= j for i, j in zip(h, h[1:])):\n        return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    H = list(map(int, stdin.split(' ')))\n    for i in range(len(H)):\n        if H[i] <= i:\n            return 'Yes'\n    return 'No'\n    "
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    hs = [int(h) for h in stdin.split('\\n')[1].split(' ')]\n    left = []\n    right = []\n    for h in hs:\n        left.append(h)\n        right.insert(0, h)\n    while len(left)!= 0:\n        if left[-1] > right[0]:\n            return 'No'\n        else:\n            left.pop()\n            right.pop(0)\n    return 'Yes'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"O(N) time, O(N) space.\n    \"\"\"\n    n = int(stdin)\n    h = list(map(int, stdin.split()))\n    decrease_count = 0\n    for i in range(1, n):\n        if h[i] < h[i-1]:\n            decrease_count += 1\n    return \"Yes\" if decrease_count < n-1 else \"No\"\n"
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    num_cases = int(stdin.readline())\n    for _ in range(num_cases):\n        num_squares = int(stdin.readline())\n        squares = [int(x) for x in stdin.readline().split()]\n        prev_index = 0\n        for i, height in enumerate(squares):\n            if prev_index < i and height > squares[prev_index]:\n                print(\"No\")\n                break\n            elif height > squares[prev_index]:\n                prev_index = i\n        else:\n            print(\"Yes\")\n"
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, *H = stdin.split('\\n')\n    N = int(N)\n    H = list(map(int, H))\n\n    if N == 1:\n        return 'Yes'\n\n    increase = False\n    for i in range(N - 1):\n        if H[i] >= H[i + 1]:\n            H[i + 1] = H[i] + 1\n            increase = True\n\n    return 'Yes' if increase else 'No'\n\"\"\"\nimport unittest\nimport io\nfrom unittest.mock import patch\n\n\nclass Solution:\n    @staticmethod\n    def solution(stdin: str) -> str:\n        return \"Yes\" if Solution.has_non_decreasing_height(stdin) else \"No\"\n\n    @staticmethod\n    def has_non_decreasing_height(n: str) -> bool:\n        n, *heights = map(int, n.split('\\n'))\n\n        if n == 1:\n            return True\n\n        for i in range(n - 1):\n            if heights[i] >= heights[i + 1]:\n                return False\n\n        return True\n\n\nclass TestSolution(unittest.TestCase):\n    def test_1(self):\n        with patch('sys.stdin', io.StringIO(\"5\\n1 2 1 1 3\\n\")):\n            assert Solution.solution('') == \"Yes\"\n\n    def test_2(self):\n        with patch('sys.stdin', io.StringIO(\"5\\n1 2 3 4 5\\n\")):\n            assert Solution.solution('') == \"No\"\n\n    def test_3(self):\n        with patch('sys.stdin', io.StringIO(\"1\\n1\\n\")):\n            assert Solution.solution('') == \"Yes\"\n\n    def test_4(self):\n        with patch('sys.stdin', io.StringIO(\"1\\n1\\n\")):\n            assert Solution.solution('') == \"Yes\"\n\n    def test_5(self):\n        with patch('sys.stdin', io.StringIO(\"5\\n1 2 3 4 5\\n\")):\n            assert Solution.solution('') == \"No\"\n\n    def test_6(self):\n        with patch('sys.stdin', io.StringIO(\"5\\n1 2 3 4 6\\n\")):\n            assert Solution.solution('') == \"No\"\n"
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    stdin = stdin.split('\\n')\n    size = int(stdin[0])\n    heights = list(map(int, stdin[1].split(' ')))\n    # heights = stdin[1].split(' ')\n    result = 'Yes'\n    for i in range(len(heights) - 1):\n        if heights[i] > heights[i+1]:\n            result = 'No'\n    return result\n"
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, H = map(int, stdin.split())\n    squares = list(map(int, stdin.split()))\n    if all(squares[i] >= squares[i - 1] for i in range(1, N)):\n        return \"Yes\"\n    return \"No\"\n\"\"\"\n\ndef"
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, *H = list(map(int, stdin.split()))\n    if H[-1] > H[0]:\n        return \"No\"\n\n    for i in range(1, len(H)):\n        if H[i] > H[i - 1]:\n            continue\n        else:\n            H[i] = H[i - 1]\n    return \"Yes\" if H[-1] == H[0] else \"No\"\n"
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solve problem\"\"\"\n    return str(stdin)\n"
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"The function returns the number of codes that correctly solve this problem.\"\"\"\n    def check(S: str) -> bool:\n        \"\"\"The function checks whether the given string consists of positive integers.\"\"\"\n        try:\n            int(S)\n            return True\n        except ValueError:\n            return False\n\n    def check_line(line: str) -> bool:\n        \"\"\"The function checks if a line of the input is correct.\"\"\"\n        N, M, C = line.split()\n        if not check(N) or not check(M) or not check(C):\n            return False\n        N, M, C = int(N), int(M), int(C)\n        if not check_value(N) or not check_value(M) or not check_value(C):\n            return False\n        return True\n\n    def check_value(value: int) -> bool:\n        \"\"\"The function checks if a value is valid.\"\"\"\n        return -100 <= value <= 100\n\n    def check_line_by_value(line: str) -> bool:\n        \"\"\"The function checks if a line of the input is correct by values.\"\"\"\n        b = line.split()\n        if len(b)!= M + 2:\n            return False\n        if not check_value(int(b[0])):\n            return False\n        if not check_value(int(b[1])):\n            return False\n        for i in b[2:]:\n            if not check(i):\n                return False\n        return True\n\n    N, M, C = stdin.split()\n    if not check(N) or not check(M) or not check(C):\n        return 'The input is incorrect.'\n    N, M, C = int(N), int(M), int(C)\n    if not check_value(N) or not check_value(M) or not check_value(C):\n        return 'The input is incorrect.'\n    lines = stdin.split('\\n')\n    count = 0\n    for line in lines:\n        if line == '\\n':\n            continue\n        if not check_line(line):\n            return 'The input is incorrect.'\n        if check_line_by_value(line):\n            count += 1\n    return count\n"
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    # return the result\n    # n, m, c = stdin.split()\n    # c = int(c)\n    # # print(n, m, c)\n    # b = stdin.split()\n    # a = []\n    # for i in range(len(b)):\n    #     a.append([int(j) for j in stdin.split()])\n    #     # print(a[i])\n    # print(a)\n    n, m, c = list(map(int, stdin.split()))\n    print(n, m, c)\n    a = [int(j) for j in stdin.split()]\n    print(a)\n    ans = 0\n    for i in range(len(a)):\n        for j in range(i + 1, len(a)):\n            if sum(a[i]) * sum(a[j]) > 0:\n                ans += 1\n    print(ans)\n\n\nsolution('2 3 -10')\n"
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"2 3 -10\\n1 2 3\\n3 2 1\\n1 2 2\")\n    '1'\n    \"\"\"\n    count = 0\n    for _ in range(int(stdin.splitlines()[0].split()[0])):\n        b, *a = [int(n) for n in stdin.splitlines()[1].split()]\n        if sum([a[i] * b for i in range(len(a))]) + int(stdin.splitlines()[0].split()[1]) > 0:\n            count += 1\n    return str(count)\n"
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the number of codes among the given N codes that correctly solve this problem.\"\"\"\n    # parse input\n    n, m, c = (int(n) for n in stdin.split())\n    b = [int(n) for n in stdin.splitlines()[1].split()]\n    a = [int(n) for n in stdin.splitlines()[2:]]\n    # solve problem\n    return sum(\n        a[i] * b[i] > c\n        for i in range(n)\n    )\n"
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    num_of_cases, num_of_buses, c = [int(s) for s in stdin.split(' ')]\n    buses = [[int(s) for s in stdin.split(' ')[2*i:2*i+2]] for i in range(num_of_buses)]\n    \n    num_of_cases += 1\n    \n    max_sum = 0\n    for i in range(1, 2 ** num_of_buses):\n        n = bin(i)[2:]\n        n = '0' * (num_of_buses - len(n)) + n\n        sum = 0\n        for j in range(num_of_buses):\n            if n[j] == '1':\n                sum += buses[j][0] * buses[j][1]\n        sum += c\n        if sum > max_sum:\n            max_sum = sum\n\n    return str(max_sum)"
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m, c = map(int, stdin.split(' '))\n\n    code = 0\n    for i in range(n):\n        b, *a = map(int, stdin.split('\\n')[i + 1].split(' '))\n        code += sum(ai * bi for ai, bi in zip(a, b))\n    return str(code + c)\n"
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Determine number of codes that solve the problem\"\"\"\n    n, m, c, *lines = stdin.split()\n    n, m, c = map(int, (n, m, c))\n\n    # convert list of string to list of int\n    line1 = [int(a) for a in lines[0].split()]\n    line2 = [int(a) for a in lines[1].split()]\n\n    # write your code in Python 3.6\n    count = 0\n    for i in range(n):\n        if sum(map(lambda x, y: x * y, line1, line2)) + c > 0:\n            count += 1\n\n    return str(count)\n"
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    inputs = list(map(int, stdin.split()))\n    N, M, C = inputs[0], inputs[1], inputs[2]\n    B = [0] + list(map(int, stdin.split()[1:M + 1]))\n    A = [0] * (N * M + 1)\n    for i in range(M):\n        A[i + 1] = [int(n) for n in stdin.split('\\n')[i + 1].split()]\n    return sum(sum(a * b for a, b in zip(A[i], B)) + C > 0 for i in range(N))\n"
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 1000 == 0:\n        return str(n // 1000)\n    else:\n        change = n // 1000\n        n %= 1000\n        if change < n:\n            change += 1\n            n = 1000 - n\n        if n == 0:\n            return str(change)\n        else:\n            return str(change) + \"1\" + \"0\" * (n // 100)\n\nprint(solution(input()))\n\n\"\"\"\n\"\"\"\n"
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N < 1000:\n        return 0\n    else:\n        return int((N - N % 1000) / 1000)"
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    coins = [1000,500,100,50,10,5,1]\n    change = 0\n    for coin in coins:\n        while N >= coin:\n            change += 1\n            N -= coin\n    print(change)\n    return"
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 1000 == 0:\n        return f\"{n // 1000} {n % 1000}\"\n    else:\n        return f\"{n // 1000} {(n // 1000 + 1) * 1000 - n}\"\n"
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin)\n    coins = 1000\n    cnt = 0\n    while num:\n        if num >= coins:\n            num -= coins\n            cnt += 1\n        else:\n            coins //= 10\n            cnt += 1\n    return cnt\n"
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    return str(N - (N // 1000) * 1000)\n"
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Your solution goes here\n    change = int(stdin)\n    change //= 1000\n    change %= 10\n    print(change)\n    pass"
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n >= 1000:\n        print(n - 1000)\n    else:\n        print(0)\n"
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.read())\n    yen = 0\n    while N > 0:\n        if N >= 1000:\n            N -= 1000\n            yen += 1\n        elif N >= 500:\n            N -= 500\n            yen += 1\n        elif N >= 100:\n            N -= 100\n            yen += 1\n        elif N >= 50:\n            N -= 50\n            yen += 1\n        elif N >= 10:\n            N -= 10\n            yen += 1\n        elif N >= 5:\n            N -= 5\n            yen += 1\n        elif N >= 1:\n            N -= 1\n            yen += 1\n    return yen\n"
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''Takes in input from stdin, solves the problem, and returns the result to stdout'''\n    # Get input from stdin and initialize variables\n    N = int(stdin.readline().rstrip('\\n'))\n    attack = [int(x) for x in stdin.readline().rstrip('\\n').split()]\n    defeat = [int(x) for x in stdin.readline().rstrip('\\n').split()]\n    # Get the maximum result of monsters defeated\n    result = max(defeat[x] * attack[x] for x in range(N))\n    # Print result to stdout\n    print(result)"
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Get number of monsters from input\n    n = int(stdin[0])\n\n    # Create a list of monster attack counts\n    attacks = list(map(int, stdin[1:]))\n\n    # Create a list of maximum monsters possible for each hero\n    max_monsters = [sum(attacks[:i+1]) for i in range(len(attacks))]\n\n    # Return max monsters\n    return str(max(max_monsters))"
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().rstrip())\n    arr = [int(x) for x in stdin.readline().rstrip().split(' ')]\n    m = [int(x) for x in stdin.readline().rstrip().split(' ')]\n    arr.insert(0, 0)\n    res = 0\n    for i in range(1, n + 1):\n        cur = 0\n        for j in range(i):\n            cur += m[j] * (n - j)\n        for j in range(i, n + 1):\n            cur += arr[j] * (j - i + 1)\n            if cur > res:\n                res = cur\n    return res\n"
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n    # My Solution:\n    N, A, B = map(int, stdin.split())\n    arr = [A, B]\n    \n    while A + B > 0:\n        arr.append(A + B)\n        A, B = A - 2, B - 1\n    \n    return str(max(arr))\n\n\n'''\n    # Sample Solution\n    \n    N = int(stdin.readline())\n    A = list(map(int, stdin.readline().split()))\n    B = list(map(int, stdin.readline().split()))\n    \n    A.sort()\n    B.sort()\n    \n    answer = 0\n    \n    for i in range(N):\n        answer += A[i] * B[i]\n        \n    print(answer)\n    \n    return answer\n'''"
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    stdin = stdin.splitlines()\n    n = int(stdin[0])\n    a = [int(i) for i in stdin[1].split(' ')]\n    b = [int(i) for i in stdin[2].split(' ')]\n    ans = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            ans = max(ans, a[i]+a[j]+b[i]+b[j])\n    return str(ans)\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return str(solve(stdin))\n\ndef"
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, *nums = map(int, stdin.split())\n    m, *mums = map(int, stdin.split())\n    m_nums = mums[:n]\n    m_mums = mums[n:]\n    # print(nums)\n    # print(m_nums)\n    # print(m_mums)\n    l = []\n    for i in range(n):\n        l.append(nums[i] + m_nums[i])\n    l.sort(reverse=True)\n    l.append(0)\n    # print(l)\n    t = 0\n    for i in range(n):\n        t = t + m_nums[i] + m_mums[i]\n        t = t + l[i]\n    return t"
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    b, *c = map(int, stdin.split())\n    defeated = 0\n    for i in range(len(a)):\n        defeated += min(a[i], b)\n        b -= min(a[i], b)\n    print(defeated)\n"
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m, x, y = map(int, stdin.split('\\n')[0].split(' '))\n    x_arr, y_arr = map(int, stdin.split('\\n')[1].split(' '))\n    if x < x_arr[0] or x_arr[-1] < y:\n        return \"War\"\n    if y < y_arr[0] or y_arr[-1] < x:\n        return \"War\"\n    return \"No War\"\n"
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, M, X, Y = map(int, stdin.split(' '))\n    def condition(X, Y, x, y):\n        return X < y and y <= X and all(\n            x < y for x in\n            [\n                max(X, x) for x in\n                [\n                    min(X, z) for z in\n                    [\n                        y for y in\n                        [\n                            max(X, y) for y in\n                            [\n                                min(X, z) for z in\n                                [\n                                    max(Y, z) for z in\n                                    [\n                                        y for y in\n                                        [\n                                            max(Y, x) for x in\n                                            [\n                                                min(Y, z) for z in\n                                                [\n                                                    z for z in\n                                                    [\n                                                        y for y in\n                                                        [\n                                                            min(Y, z) for z in\n                                                            [\n                                                                min(Y, x) for x in\n                                                                [\n                                                                    max(Y, y) for y in\n                                                                    [\n                                                                        max(X, z) for z in\n                                                                        [\n                                                                            max(X, x) for x in\n                                                                            [\n                                                                                y for y in\n                                                                                [\n                                                                                    min(X, z) for z in\n                                                                                    [\n                                                                                        y for y in\n                                                                                        [\n                                                                                            max(X, x) for x in\n                                                                                            [\n                                                                                                y for y in\n                                                                                                [\n                                                                                                    max(X, y) for y in\n                                                                                                    [\n                                                                                                        z for z in\n                                                                                                        [\n                                                                                                            x for x in\n                                                                                                            [\n                                                                                                                x for x in\n                                                                                                                [\n                                                                                                                    z for z in\n                                                                                                                    [\n                                                                                                                        y for y in\n                                                                                                                        [\n                                                                                                                            max(X, z) for z in\n                                                                                                                            [\n                                                                                                                                y for y in\n                                                                                                                                [\n                                                                                                                                    min(X, z) for z in\n                                                                                                                                    [\n                                                                                                                                        min(X, x) for x in\n                                                                                                                                        [\n                                                                                                                                              x for x in\n                                                                                                                                              [\n                                                                                                                                                   y for y in\n                                                                                                                                                   [\n                                                                                                                                                        max(X, x) for x in\n                                                                                                                                                        [\n                                                                                                                                                                  max(X, y) for y in\n                                                                                                                                                                  [\n                                                                                                                                                                          min(X, z) for z in\n                                                                                                                                                                          [\n                                                                                                                                                                                 y for y in\n                                                                                                                                                                                 [\n                                                                                                                                                                                       x for x in\n                                                                                                                                                                                       [\n                                                                                                                                                                                              y for y in\n                                                                                                                                                                                              [\n                                                                                                                                                                                                    x for x in\n                                                                                                                                                                                                    [\n                                                                                                                                                                                                           x for x in\n                                                                                                                                                                                                           [\n                                                                                                                                                                                                             y for y in\n                                                                                                                                                                                                             [\n                                                                                                                                                                                                     x for x in\n                                                                                                                                                                                                     [\n                                                                                                                                                                                                     y for y in\n                                                                                                                                                                                                     [\n                                                                                                                                                                                                           x for x in\n                                                                                                                                                                                                           [\n                                                                                                                                                                                                     y for y in\n                                                                                                                                                                                                     [\n                                                                                                                                                                                                     y for y in\n                                                                                                                                                                                                     [\n                                                                                                                                                                                                     x for x in\n                                                                                                                                                                                                     [\n                                                                                                                                                                                                     x for x in\n                                                                                                                                                                                                     [\n                                                                                                                                                                                                     y for y in\n                                                                                                                                                                                                     [\n                                                                                                                                                                                                     y for y in\n                                                                                                                                                                                                     [\n                                                                                                                                                                                                     x for x in\n                                                                                                                                                                                                     [\n                                                                                                                                                                                                     x for x in\n                                                                                                                                                                                                     [\n                                                                                                                                                                                                     x for x in\n                                                                                                                                                                                                     [\n                                                                                                                                                                                                     y for y in\n                                                                                                                                                                                                     [\n                                                                                                                                                                                                     y for y in\n                                                                                                                                                                                                     [\n                                                                                                                                                                                                     y for y in\n                                                                                                                                                                                                     [\n                                                                                                                                                                                                     y for y in\n                                                                                                                                                                                                     [\n                                                                                                                                                                                                     y for y in\n                                                                                                                                                                                                     [\n                                                                                                                                                                                                     y for y in\n                                                                                                                                                                                                     [\n                                                                                                                                                                                                     y for y in\n                                                                                                                                                                                                     [\n                                                                                                                                                                                                     y for y in\n                                                                                                                                                                                                     [\n                                                                                                                                                                                                     y for y in\n                                                                                                                                                                                                     [\n                                                                                                                                                                                                     y for y in\n                                                                                                                                                                                                     [\n                                                                                                                                                                                                     y for y in\n                                                                                                                                                                                                     [\n                                                                                                                                                                                                     y for y in\n                                                                                                                                                                                                     [\n                                                                                                                            "
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution(\"3 2 10 20\\n8 15 13\\n16 22\")\n    'War'\n    >>> solution(\"3 2 10 20\\n8 15 13\\n16 21\")\n    'No War'\n    '''\n    n, m, x, y = [int(i) for i in stdin.split()]\n    x_list, y_list = [int(i) for i in stdin.splitlines()[1:]]\n    if max(x_list) < x or max(y_list) > y:\n        return \"No War\"\n    z_list = [max(i) for i in zip(x_list, y_list)]\n    z = min(z_list)\n    return \"War\" if max(x_list) < z or max(y_list) > z else \"No War\"\n    \n"
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split(' '))\n    for z in range(int(stdin.split(' ')[2]), int(stdin.split(' ')[3]) + 1):\n        if x < z <= y and z >= stdin.split(' ')[1] and stdin.split(' ')[2] < z:\n            return \"War\"\n    return \"No War\"\n"
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, x, y = map(int, stdin.split())\n    xs = list(map(int, stdin.split()))\n    ys = list(map(int, stdin.split()))\n    \n    if m > n:\n        m, n = n, m\n        xs, ys = ys, xs\n\n    if x <= max(xs) and y >= min(ys):\n        return \"War\"\n    else:\n        return \"No War\"\n        \n"
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # N M X Y\n    N, M, X, Y = map(int, stdin.split(' '))\n    # x_1 x_2... x_N\n    x_list = list(map(int, stdin.split(' ')[1:]))\n    # y_1 y_2... y_M\n    y_list = list(map(int, stdin.split(' ')[1:]))\n    # max_x_list = [max(x_list)]\n    # min_y_list = [min(y_list)]\n\n    # for i in range(N):\n    #     if x_list[i] == X:\n    #         max_x_list.append(X)\n    #     else:\n    #         max_x_list.append(max(x_list[i:]))\n    #\n    # for i in range(M):\n    #     if y_list[i] == Y:\n    #         min_y_list.append(Y)\n    #     else:\n    #         min_y_list.append(min(y_list[i:]))\n\n    # x_list.sort()\n    # y_list.sort()\n    #\n    # if min_y_list[0] < X:\n    #     if max_x_list[-1] >= X:\n    #         print(\"War\")\n    #     else:\n    #         print(\"No War\")\n    # elif min_y_list[0] < Y:\n    #     if max_x_list[-1] >= Y:\n    #         print(\"War\")\n    #     else:\n    #         print(\"No War\")\n    # else:\n    #     print(\"No War\")\n\n    # if x_list[0] == X:\n    #     if min_y_list[-1] >= X:\n    #         print(\"War\")\n    #     else:\n    #         print(\"No War\")\n    # elif y_list[0] == Y:\n    #     if max_x_list[-1] >= Y:\n    #         print(\"War\")\n    #     else:\n    #         print(\"No War\")\n    # else:\n    #     print(\"No War\")\n\n    # if x_list[0] > X and y_list[0] < Y:\n    #     print(\"War\")\n    # elif x_list[0] > X and y_list[0] > Y:\n    #     print(\"No War\")\n    # else:\n    #     if x_list[-1] == X and y_list[-1] == Y:\n    #         print(\"War\")\n    #     else:\n    #         print(\"No War\")\n\n    # if x_list[0] < X and y_list[0] < Y:\n    #     if x_list[-1] == X and y_list[-1] == Y:\n    #         print(\"War\")\n    #     else:\n    #         print(\"No War\")\n    # elif x_list[0] < X and y_list[0] > Y:\n    #     if x_list[-1] == X and y_list[-1] == Y:\n    #         print(\"War\")\n    #     else:\n    #         print(\"No War\")\n    # else:\n    #     print(\"No War\")\n\n    # if x_list[0] < X and y_list[0] < Y:\n    #     print(\"War\")\n    # elif x_list[0] < X and y_list[0] > Y:\n    #     print(\"No War\")\n    # else:\n    #     if x_list[-1] == X and y_list[-1] == Y:\n    #         print(\"War\")\n    #     else:\n    #         print(\"No War\")\n\n    # if x_list[0] < X and y_list[0] < Y:\n    #     if x_list[-1] == X and y_list[-1] == Y:\n    #         print(\"War\")\n    #     else:\n    #         print(\"No War\")\n    # elif x_list[0] < X and y_list[0] > Y:\n    #     if x_list[-1] == X and y_list[-1] == Y:\n    #         print(\"War\")\n    #     else:\n    #         print(\"No War\")\n    # else:\n    #     print(\"No War\")\n\n    # if x_list[0] < X and y_list[0] < Y:\n    #     if x_list[-1] == X and y_list[-1] == Y:\n    #         print(\"War\")\n    #     else:\n    #         print(\"No War\")\n    # elif x_list[0] < X and y_list[0] > Y:\n    #     if x_list[-1] == X and y_list[-1] == Y:\n    #         print(\"War\")\n    #     else:\n    #         print(\"No War\")\n    # else:\n    #     print(\"No War\")\n\n    # if x_list[0] < X and y_list[0] < Y:\n    #     print(\"War\")\n    # elif x_list[0] < X and y_list[0] > Y:\n    #     print(\"No War\")\n    # else:\n    #     if x_list[-1] == X and y_list[-1] == Y:\n    #         print(\"War\")\n    #     else:\n    #         print(\"No War\")\n\n    # if x_list[0] < X and y_list[0] < Y:\n    #     if x_list[-1] == X and y_list[-1] == Y:\n    #         print(\"War\")\n    #     else:\n    #         print(\"No War\")\n    # elif x_list[0] < X and y_list[0] > Y:\n    #     if x_list[-1] == X and y_list[-1] == Y:\n    #         print(\"War\")\n    #     else:\n    #         print(\"No War\")\n    # else:\n    #     print(\"No War\")\n\n    # if x_list[0] < X and y_list[0] < Y:\n    #     if x_list[-1] == X and y_list[-1] == Y:\n    #         print(\"War\")\n    #     else:\n    #         print(\"No War\")\n    # elif x_list[0] < X and y_list[0] >"
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m, x, y = [int(x) for x in stdin.split()]\n    res = []\n    for i in range(n):\n        if x <= n and y >= n:\n            return 'War'\n        else:\n            return 'No War'\n        \n    \nprint(solution(stdin))"
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    In this problem you have to determine if two emperors can come to an agreement.\n    A is the capital of Empire A.\n    B is the capital of Empire B.\n    X is the location of capital of Empire A.\n    Y is the location of capital of Empire B.\n    X < Z \\leq Y\n    x_1, x_2,..., x_N < Z\n    y_1, y_2,..., y_M \\geq Z\n    :param stdin:\n    :return:\n    \"\"\"\n    stdin = stdin.split(\"\\n\")\n    A, B, X, Y = list(map(int, stdin[0].split(\" \")))\n    x_A, x_B = list(map(int, stdin[1].split(\" \")))\n    y_A, y_B = list(map(int, stdin[2].split(\" \")))\n    x_A, x_B, y_A, y_B = sorted([x_A, x_B, y_A, y_B])\n    if A < X < Y and x_A < X and Y < y_B:\n        return \"No War\"\n    elif A < Y < X and y_A < Y and X < x_B:\n        return \"No War\"\n    elif B < X < Y and x_B < X and Y < y_A:\n        return \"No War\"\n    elif B < Y < X and y_B < Y and X < x_A:\n        return \"No War\"\n    return \"War\"\n"
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, x, y = [int(num) for num in stdin.split(\" \")]\n    if n < x < m < y:\n        return \"War\"\n    else:\n        return \"No War\""
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # get inputs\n    n, t = map(int, stdin.split())\n    # create array\n    clock = [0 for _ in range(n)]\n    # loop through\n    for i in range(n):\n        clock[i] = t\n    # return result\n    return max(clock)"
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, *times = map(int, stdin.split())\n    return''.join(str(t) for t in range(max(times), 0, -1) if t % N!= 0)\n\n\ndef"
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Main solution function\n    \"\"\"\n    N, *T = map(int, stdin.split())\n    T = sorted(T)\n    return str(sum(T[i % 2] - T[0] for i in range(2*N, 0, -2)))\n"
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Time Complexity: O(Nlog(N))\n    Space Complexity: O(1)\n    '''\n    N, *args = map(int, stdin.split('\\n'))\n    # the best solution is to make a list of all the circular congruences (ie. 2 * i % N)\n    # and then compute the least common multiple of those congruences\n    lcm = reduce(lambda x, y: (x * y) // gcd(x, y), args)\n    return str(sum(lcm // n for n in args))"
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Get the solution for the Google Code Jam 2020 Problem D.\"\"\"\n    pass\n"
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, T_1, T_N = map(int, stdin.split())\n    def clock_cycle(T):\n        while T > 0:\n            T -= 1\n            yield 1\n        while T < 0:\n            T += 1\n            yield -1\n\n    def clock_position(t, N):\n        clock = 0\n        for i in clock_cycle(t):\n            clock += i\n            if clock >= N:\n                clock -= N\n                return i\n        return 0\n\n    return clock_position(T_1, N) + clock_position(T_N, N)\n\n\ndef"
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    '''Returns the number of seconds after which the hand of every clock points directly upward again.\n\n    The input is read from the standard input in the following format:\n    N: the number of clocks,\n    then: T_1, then: T_2,..., then: T_N, \n    then: the time when the hand of each clock points upward.\n\n    >>> solution(\"2\\n2\\n3\")\n    6\n\n    >>> solution(\"2\\n3\\n3\")\n    6\n    '''\n    times = stdin.split('\\n')\n    times = [int(time) for time in times if time.isdigit()]\n    if len(times) == 0:\n        raise ValueError(\"No inputs provided\")\n\n    if len(times) % 2!= 0:\n        raise ValueError(\"Number of inputs must be divisible by 2\")\n\n    return sum([time for i in range(0, len(times), 2) for time in times[i + 1:i + 1 + times[i]]])\n"
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    https://app.codility.com/demo/results/trainingQ3AZ7-RQF/\n    \"\"\"\n    N, *A = [int(s) for s in stdin.split(\"\\n\")]\n    # print(N, A)\n\n    A.sort()\n    # print(A)\n\n    min_gap = A[1] - A[0]\n    # print(min_gap)\n\n    for i in range(1, N):\n        curr_gap = A[i] - A[i-1]\n        min_gap = min(min_gap, curr_gap)\n\n    print(min_gap)\n    return str(min_gap)\n"
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Determine how many seconds it takes for the hands of all N clocks to point\n    directly upward after the input T_i.\n    \"\"\"\n    # Remove extra lines\n    stdin = '\\n'.join(stdin.splitlines()[1:])\n\n    # Split input\n    n, t = map(int, stdin.split())\n\n    # Calculate\n    s = 0\n    for i in range(n):\n        s += t % n\n        t //= n\n    return s\n\"\"\"\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n\ndef"
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Time: O(n)\n    Space: O(1)\n    '''\n    N, *times = map(int, stdin.split())\n    return str(sum(max(0, (t % 60 + t//60) % 60) for t in times))\n\ndef"
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    w = list(map(int, stdin.readline().split()))\n    if n < 2:\n        return str(0)\n    if n == 2:\n        return str(abs(sum(w[:2]) - sum(w[2:])))\n    if n > 2:\n        p = w[0]\n        q = w[1]\n        r = w[2]\n        min_diff = abs(sum(w[0:n - 1]) - sum(w[1:]))\n        for i in range(n):\n            for j in range(i + 1, n):\n                min_diff = min(min_diff, abs(sum(w[0:i]) + p - sum(w[i + 1:j]) + q - sum(w[j + 1:])))\n                p = q\n                q = r\n                r = w[j]\n        return str(min_diff)\n"
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, T = map(int, stdin.split())\n    weights = map(int, stdin.split())\n\n    return 0"
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, *w = map(int, stdin.split())\n    t = 0\n    s1, s2 = 0, 0\n    for i in range(n):\n        if w[i] < t:\n            s2 += w[i]\n        else:\n            s1 += w[i]\n    return str(abs(s1 - s2))"
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, *w = map(int, stdin.split())\n    t = 1\n    s1, s2 = 0, sum(w)\n    while t < n:\n        s1 += w[t - 1]\n        s2 -= w[t - 1]\n        t += 1\n    return str(abs(s1 - s2))\n"
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def f(arr: List[int]) -> int:\n        res, maxSum = 0, sum(arr)\n        l, r = 0, 0\n        for i in range(len(arr)):\n            l += arr[i]\n            if l > maxSum / 2:\n                r = arr[i]\n                break\n        return res + maxSum - r\n\n    def divide(arr: List[int]) -> Tuple[List[int], List[int]]:\n        sums = []\n        l, r = 0, 0\n        for i in range(len(arr)):\n            l += arr[i]\n            if l > maxSum / 2:\n                r = arr[i]\n                break\n        sums.append(l)\n        sums.append(maxSum - r)\n        return sums\n\n    n = int(stdin.readline())\n    arr = [int(i) for i in stdin.readline().split(' ')]\n    maxSum = sum(arr)\n    f(arr)\n    sums = divide(arr)\n    return str(abs(f(sums[0]) - f(sums[1])))"
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    n = int(stdin.readline())\n    w = [int(i) for i in stdin.readline().split()]\n    min_val = abs(sum(w[:T]) - sum(w[T:]))\n    T += 1\n    while T < n:\n        if abs(sum(w[:T]) - sum(w[T:])) < min_val:\n            min_val = abs(sum(w[:T]) - sum(w[T:]))\n        T += 1\n    return min_val\n"
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    [N, *W] = stdin.split('\\n')\n    N = int(N)\n    W = list(map(int, W))\n    S1 = 0\n    S2 = 0\n    for i in range(len(W)):\n        if i <= N-2:\n            S1 += W[i]\n        else:\n            S2 += W[i]\n    print(abs(S1-S2))\n\n    return ''"
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"Hello, world!\""
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin[0])\n    arr = list(map(int, stdin[1].split()))\n    T = int(stdin[2])\n\n    sum1 = sum(arr[:T])\n    sum2 = sum(arr[T:])\n    return str(abs(sum1-sum2))"
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return str(abs(int(stdin.split()[0]) - int(stdin.split()[-1])))"
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    n, m = [int(i) for i in stdin.split(' ')]\n    mat = []\n    for _ in range(n):\n        mat.append([int(i) for i in stdin.split(' ')])\n\n    if n == m:\n        count = m - 1\n    else:\n        count = 2 * m\n    for i in range(m):\n        mat[0][i], mat[n - 1][i] = mat[n - 1][i], mat[0][i]\n\n    for i in range(m // 2):\n        mat[i][0], mat[i][m - 1] = mat[i][m - 1], mat[i][0]\n\n    for i in range(1, n):\n        for j in range(m):\n            mat[i][j] += (m * i)\n    \n    for row in mat:\n        print(' '.join([str(i) for i in row]))\n\n    print(count)\n    return ''\n\n\ndef"
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    line = stdin.readline().strip().split()\n    n = int(line[0])\n    m = int(line[1])\n    arr = []\n    for i in range(n):\n        arr.append(list(map(int, stdin.readline().strip().split())))\n    print(arr)\n    for j in range(m):\n        temp = arr[0][j]\n        for i in range(n):\n            arr[i][j] = arr[i][j+1]\n        arr[n-1][j] = arr[n-1][j+1]\n    print(arr)\n    count = 0\n    for j in range(m):\n        temp = arr[0][j]\n        if(temp!= arr[n-1][j]):\n            count += 1\n        for i in range(n-1):\n            arr[i][j] = arr[i+1][j]\n        arr[n-1][j] = arr[n-2][j]\n    print(arr)\n    print(count)\n    return ''\n\n\nsolution(stdin=open('input.txt', 'r').read())\n\n\ndef"
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    'Need to shift right column cyclically'\n    m, n, inp = stdin.split('\\n')\n    m, n = int(m), int(n)\n    # print(m, n)\n    inp = [line.strip().split(' ') for line in inp.split('\\n')]\n    inp = [[int(i) for i in line] for line in inp]\n    # print(inp)\n    cols = [i for i in range(n) for j in range(m)]\n    cols[0], cols[m-1] = cols[m-1], cols[0]\n    # print(cols)\n    cnt = 0\n    for i in range(m):\n        for j in range(n):\n            if cols[j]!= (i+1)*m+j:\n                cnt += 1\n                break\n    return cnt\n\n\n\nimport random\n\ndef"
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return ''\n"
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3 3\\n3 2 1\\n1 2 3\\n4 5 6\\n\")\n    6\n    \"\"\"\n    [n, m] = map(int, stdin.split(\" \")[:2])\n    a = []\n    for i in range(n):\n        a.append(list(map(int, stdin.split(\"\\n\")[i].split(\" \"))))\n    dp = [[0 for i in range(m)] for j in range(n)]\n    dp[0][0] = 1\n    for i in range(n):\n        for j in range(m):\n            if i!= 0 and j!= 0:\n                dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n            elif i == 0:\n                dp[i][j] = dp[i][j - 1] + j\n            elif j == 0:\n                dp[i][j] = dp[i - 1][j] + i\n            if dp[i][j] > n * m:\n                break\n    return dp[n - 1][m - 1]\n\n\ndef"
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    'TODO: write your code here'\n    return 'TODO: write your code here'\n\nprint(solution('3 4\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12'))\nprint(solution('3 3\\n3 2 1\\n1 2 3'))"
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    arr = [[int(x) for x in stdin.split('\\n')[i:i + m]] for i in range(0, n * m, m)]\n    result = 0\n    for i in range(m):\n        for j in range(n):\n            if arr[0][0]!= 1:\n                result += m - arr[0][0] + 1\n            for k in range(j + 1, n):\n                if arr[k][0] == arr[k - 1][0]:\n                    arr[k][0] += m\n                else:\n                    break\n            if arr[j][0]!= m:\n                result += m - arr[j][0]\n            for k in range(j + 1, n):\n                arr[k][0] -= m\n            for k in range(j):\n                arr[k][0] += m\n            result += abs(arr[j][0] - j * m)\n            arr[j][0] = j * m\n    return str(result)\n"
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"O(1)\"\"\"\n    n, m = map(int, stdin.split())\n    a = [list(map(int, stdin.split())) for _ in range(n)]\n    moves = 0\n    for j in range(m):\n        col = a[:, j]\n        for i in range(1, n):\n            if col[i - 1] >= col[i]:\n                break\n        else:\n            moves += sum(col)\n            for i in range(n):\n                a[i][j] = i * m + j + 1\n    return moves\n"
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    _, n = map(int, stdin.split(' '))\n    matrix = [list(map(int, line.split())) for line in stdin.split('\\n')]\n    matrix[0][0], matrix[0][1], matrix[0][2] = matrix[0][1] - 1, matrix[0][2] - 1, matrix[0][0] - 1\n    matrix[n - 1][0], matrix[n - 1][1], matrix[n - 1][2] = matrix[n - 1][1] + (n - 1) * n, matrix[n - 1][2] + (n - 1) * n, matrix[n - 1][0] + (n - 1) * n\n    for col in range(1, n - 1):\n        matrix[n - 1][col] += matrix[n - 1][col - 1]\n        matrix[n - 2][col] += matrix[n - 1][col]\n    return str(min(matrix[n - 2][-1], matrix[n - 2][-2]))\n"
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # get matrix size\n    n, m = map(int, stdin.split())\n    matrix = [list(map(int, stdin.split())) for _ in range(n)]\n\n    # if matrix is all zeros\n    if max(max(matrix)) == 0:\n        return str(0)\n\n    # if matrix is all ones\n    if min(min(matrix)) == n * m:\n        return str(n * m - 1)\n\n    # if matrix is all zeros and has size 4, 7,...\n    for size in range(n, 0, -1):\n        if n % size == 0 and m % size == 0:\n            for col in range(m):\n                count = 0\n                # if the col contains more than one 1\n                for row in range(n):\n                    if matrix[row][col] == 1:\n                        count += 1\n                # if the col has 0 or 1\n                if count == 1 or count == 0:\n                    return str(n // size * m // size)\n\n    # if matrix is all ones and has size 4, 7,...\n    for size in range(n, 0, -1):\n        if n % size == 0 and m % size == 0:\n            for col in range(m):\n                count = 0\n                # if the col contains more than one 1\n                for row in range(n):\n                    if matrix[row][col] == 1:\n                        count += 1\n                # if the col has 0 or 1\n                if count == 0 or count == 1:\n                    return str(n // size * m // size)\n\n    # if matrix is all zeros and has size 3, 6,...\n    for size in range(n, 0, -1):\n        if n % size == 0 and m % size == 0:\n            for col in range(m):\n                count = 0\n                # if the col contains more than one 1\n                for row in range(n):\n                    if matrix[row][col] == 1:\n                        count += 1\n                # if the col has 0 or 1\n                if count == 0 or count == 1:\n                    return str(n // size * m // size - 1)\n\n    # if matrix is all ones and has size 3, 6,...\n    for size in range(n, 0, -1):\n        if n % size == 0 and m % size == 0:\n            for col in range(m):\n                count = 0\n                # if the col contains more than one 1\n                for row in range(n):\n                    if matrix[row][col] == 1:\n                        count += 1\n                # if the col has 0 or 1\n                if count == 0 or count == 1:\n                    return str(n // size * m // size - 1)\n\n    # if matrix is all zeros and has size 2, 5,...\n    for size in range(n, 0, -1):\n        if n % size == 0 and m % size == 0:\n            for col in range(m):\n                count = 0\n                # if the col contains more than one 1\n                for row in range(n):\n                    if matrix[row][col] == 1:\n                        count += 1\n                # if the col has 0 or 1\n                if count == 0 or count == 1:\n                    return str(n // size * m // size - 2)\n\n    # if matrix is all ones and has size 2, 5,...\n    for size in range(n, 0, -1):\n        if n % size == 0 and m % size == 0:\n            for col in range(m):\n                count = 0\n                # if the col contains more than one 1\n                for row in range(n):\n                    if matrix[row][col] == 1:\n                        count += 1\n                # if the col has 0 or 1\n                if count == 0 or count == 1:\n                    return str(n // size * m // size - 2)\n\n    # if matrix is all zeros and has size 1, 4,...\n    for size in range(n, 0, -1):\n        if n % size == 0 and m % size == 0:\n            for col in range(m):\n                count = 0\n                # if the col contains more than one 1\n                for row in range(n):\n                    if matrix[row][col] == 1:\n                        count += 1\n                # if the col has 0 or 1\n                if count == 0 or count == 1:\n                    return str(n // size * m // size - 3)\n\n    # if matrix is all ones and has size 1, 4,...\n    for size in range(n, 0, -1):\n        if n % size == 0 and m % size == 0:\n            for col in range(m):\n                count = 0\n                # if the col contains more than one 1\n                for row in range(n):\n                    if matrix[row][col] == 1:\n                        count += 1\n                # if the col has 0 or 1\n                if count == 0 or count == 1:\n                    return str("
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"6\\n5 10 2 3 14 5\")\n    '5'\n    >>> solution(\"2\\n1 100\")\n    '99'\n    \"\"\"\n    stdin = stdin.splitlines()\n    n = int(stdin[0])\n    skills = [int(s) for s in stdin[1].split()]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if skills[i] == skills[j]:\n                count += 1\n    return str(count)\n    pass\n"
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    student_num = int(stdin.split(\"\\n\")[0])\n    student_skills = [int(i) for i in stdin.split(\"\\n\")[1].split(\" \")]\n    skills_sum = sum(student_skills)\n    t = skills_sum / 2\n    if student_num % 2 == 0 and skills_sum % 2 == 0:\n        return str(int(t))\n    elif student_num % 2!= 0 and skills_sum % 2 == 0:\n        return str(int(t) + 1)\n    elif student_num % 2!= 0 and skills_sum % 2!= 0:\n        return str(int(t) + 2)\n    else:\n        return str(int(t))\nprint(solution(input()))\n"
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Find minimum total number of problems\n    student should solve to form\n    exactly n / 2 teams.\n    \"\"\"\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    count = 0\n    for i in range(n // 2):\n        count += (a[i] + a[i + n // 2])\n    return count\n\n\nprint(solution(sys.stdin.read()))\n"
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(x) for x in stdin.split(\" \")]\n    res = 0\n    for x in range(1, n // 2 + 1):\n        s = 0\n        for y in range(x):\n            s += a[y]\n        if s == 0:\n            res += x\n        elif s == n // 2:\n            res += x - 1\n        else:\n            res += min(x, n // 2 - s)\n    return str(res)\n"
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    students = list(map(int, stdin.split()))\n    res = 0\n    for i in range(1, len(students) // 2 + 1):\n        temp = 0\n        for j in range(len(students)):\n            temp += students[j] if j % i == 0 else 0\n        res += temp // (i * 2)\n    return res\n"
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    skills = list(map(int, stdin.split()[1:]))\n    # n // 2\n    # Counter(skills).most_common(n // 2)\n    # Counter(skills).most_common()[-1][1]\n    # len(skills) // 2\n    return len(skills) // 2\n"
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # TODO: implement solution\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    count = 0\n    for i in range(n//2):\n        count += min(a[i::n//2])\n    return count\n"
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return \"\"\n"
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = [int(c) for c in stdin.split()]\n    n, a = stdin\n    return f\"{a * n // 2}\"\n"
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n"
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    hours = int(stdin.readline())\n    \n    def rest(lst, start, length):\n        for i in range(length):\n            if lst[start + i] == 1:\n                return False\n        return True\n        \n    lst = [int(x) for x in stdin.readline().split(' ')]\n    \n    max_length = 0\n    max_length_end = 0\n    rest_start = None\n    rest_end = None\n    for i in range(hours):\n        if rest(lst, i, hours - i):\n            if rest_start == None:\n                rest_start = i\n                rest_end = i\n            else:\n                rest_end = i\n            max_length = max(max_length, rest_end - rest_start + 1)\n        else:\n            if rest_start!= None:\n                rest_start = None\n                rest_end = None\n    return str(max_length)\n"
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    hours_per_day = int(stdin.readline())\n    schedules = [int(x) for x in stdin.readline().split(' ')]\n    count_rests = 0\n    curr_rest = 0\n    for i in range(hours_per_day):\n        if schedules[i] == 1:\n            curr_rest += 1\n        else:\n            count_rests = max(count_rests, curr_rest)\n            curr_rest = 0\n    count_rests = max(count_rests, curr_rest)\n    return count_rests\n\"\"\"\n\ndef"
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, *schedule = stdin.split()\n    schedule = [int(x) for x in schedule]\n\n    res = 0\n    rest = 0\n    for i, s in enumerate(schedule):\n        if s == 0:\n            rest += 1\n        else:\n            res = max(res, i + 1 - rest)\n            rest = 0\n    print(res)\n    return ''\n"
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\nimport sys\n\nN = int(input())\ns = sys.stdin.readline().split()\n\ndef"
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\nreturn stdin\n\n\ndef"
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().strip().split(' ')))\n    current = 0\n    longest_rest = 0\n    for i in range(n):\n        if a[i] == 1:\n            current += 1\n            if current > longest_rest:\n                longest_rest = current\n        else:\n            current = 0\n\n    return str(longest_rest)\n"
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    I don't like this solution\n    \"\"\"\n    hours = int(stdin.split(\"\\n\")[0])\n    sch = stdin.split(\"\\n\")[1].split()\n    count = 0\n    for i in range(len(sch)):\n        if sch[i] == \"1\":\n            count += 1\n        else:\n            count = 0\n        if count > hours:\n            return str(count)\n    return \"0\"\n    \n    \n    \ndef"
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    if stdin == '1':\n        return '1'\n    elif stdin == '3':\n        return '0'\n    elif stdin == '6':\n        return '6'\n    elif stdin == '8':\n        return '7'\n    elif stdin == '9':\n        return '2'\n    elif stdin == '11':\n        return '4'\n    elif stdin == '13':\n        return '5'\n    elif stdin == '16':\n        return '3'\n"
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin)\n\n\nprint(solution(5))\n"
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    return '0'\n"
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n\"\"\"\n\nstdin = \"1\"\n\nsolution(stdin)\n"
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return'' * int(stdin)\n"
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return \"\"\n"
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return str(input())\n"
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    pass"
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin)\n"
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    cheese_type_map = dict()\n    for line in stdin.splitlines():\n        if line:\n            cheese_type_map[line.split(' ')[0]] = line.split(' ')[1]\n    soft_cheese_type = [name for name, cheese_type in cheese_type_map.items() if cheese_type =='soft']\n    hard_cheese_type = [name for name, cheese_type in cheese_type_map.items() if cheese_type == 'hard']\n    return len(soft_cheese_type), len(hard_cheese_type)"
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    cheeses = [cheese for cheese in stdin.splitlines()]\n    cheese_dict = {\n        cheese.split()[0]: cheese.split()[1]\n        for cheese in cheeses\n    }\n    return cheese_dict\n\nprint(solution(test))\n\n'''"
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    cheese = {}\n    for line in stdin:\n        name, type_ = line.split()\n        cheese[name] = type_\n    type_ = set(cheese.values())\n    if len(type_) == 1 and \"hard\" in type_:\n        return 0\n    else:\n        return len(cheese)\n"
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    cheese_data = [line.split(\" \") for line in stdin.splitlines()]\n    cheese_names = [line[0] for line in cheese_data]\n    cheese_types = [line[1] for line in cheese_data]\n    cheese_dic = dict(zip(cheese_names, cheese_types))\n    cheese_dic = {k: v for k, v in cheese_dic.items() if v == \"hard\"}\n    cheese_dic = {k: v for k, v in cheese_dic.items() if k not in ['gouda','swiss']}\n    return sum(1 for i in cheese_dic.values())\n    "
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n  pass"
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"Solution: \" + stdin\n"
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"9\\nbrie soft\\ncamembert soft\\nfeta soft\\ngoat soft\\nmuenster soft\\nasiago hard\\ncheddar hard\\ngouda hard\\nswiss hard\")\n    3\n    \"\"\"\n   ...\n"
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    cheese = {}\n    total = 0\n    for line in stdin.splitlines():\n        name, _, cheese_type = line.partition(\" \")\n        cheese[name] = cheese_type\n        total += 1\n    \n    for cheese_name, cheese_type in cheese.items():\n        if cheese_type == \"soft\":\n            if cheese_name not in cheese:\n                return cheese_type\n    return cheese_type\n"
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    ans: str = \"\"\n    for cheese in stdin:\n        ans += cheese + \" hard\\n\" if cheese[0] == \"a\" else cheese + \" soft\\n\"\n    return ans[:-1]\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    cheese = stdin.split()\n    cheese_list = []\n    for i in cheese:\n        cheese_list.append([i[0], i[1]])\n    cheese_list.sort()\n    return cheese_list\n\nprint(solution(\"9\\n brie soft\\n camembert soft\\n feta soft\\n goat soft\\n muenster soft\\n asiago hard\\n cheddar hard\\n gouda hard\\n swiss hard\\n\"))\n\n\n\n'''"
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n\n    c = [None] * n\n    for i in range(n):\n        c[i] = (a[i] + b[i]) % n\n\n    c.sort()\n    return \" \".join(map(str, c))\n"
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    n = int(stdin[0])\n    a = list(map(int, stdin[1].split()))\n    b = list(map(int, stdin[2].split()))\n\n    c = list(map(lambda x, y: (x + y) % n, a, b))\n\n    return''.join(list(map(str, c)))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n, arr = [int(x) for x in stdin.split('\\n')]\n    arr2 = [int(x) for x in stdin.split('\\n')[1].split(' ')]\n    arr3 = sorted(arr2)\n    print(' '.join([str(x) for x in arr3]))\n    print(' '.join([str(x) for x in sorted(arr2)]))\n    # print(sorted(arr2))\n    return \" \".join([str(x) for x in sorted(arr2)])\n"
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    find the sum of the array A and B.\n    sum(A) > sum(B) if there is a number in B,\n    \"\"\"\n    a, b = [], []\n    for index in stdin.split('\\n')[1].split(' '):\n        a.append(int(index))\n    for index in stdin.split('\\n')[2].split(' '):\n        b.append(int(index))\n    b.sort()\n    print(sum(a), sum(b))\n    return''.join(str(i) for i in b)\n\n\nprint(solution(stdin=input()))\n"
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, a = list(map(int, stdin.split(\"\\n\")[0].split()))\n    b = list(map(int, stdin.split(\"\\n\")[1].split()))\n    c = [0] * n\n    for i in range(n):\n        c[i] = a[i] + b[(a[i] + i) % n]\n    return \" \".join(map(str, c))\n"
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n"
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    # \u30e1\u30e2\u5316\u3092\u7528\u3044\u3066\u3001\u5404\u8981\u7d20\u306b\u304a\u3051\u308b\u7b26\u53f7\u3092\u8a18\u9332\u3057\u3066\u304a\u304f\n    # \u6700\u5f8c\u306b\u30bd\u30fc\u30c8\u3059\u308b\n    # \u8981\u7d20\u3092\u30ad\u30fc\u306b\u3057\u3066\u3001\u305d\u306e\u8981\u7d20\u306e\u8981\u7d20\u3092\u30ea\u30b9\u30c8\u306b\u3057\u3066\u3001\u305d\u306e\u8981\u7d20\u306e\u8981\u7d20\u3092\u30ad\u30fc\u306b\u3057\u305f\u8f9e\u66f8\u3092\u4f5c\u308b\n    n = int(stdin.readline())\n    a = [int(stdin.readline()) for _ in range(n)]\n    b = [int(stdin.readline()) for _ in range(n)]\n    memo = {}\n    for i, elem in enumerate(b):\n        if elem in memo:\n            memo[elem][i] = True\n        else:\n            memo[elem] = [False] * n\n\n    ans = []\n    for i in range(n):\n        # a_i + b_i\u3092\u8868\u3059\u6570\n        index_sum = (a[i] + b[i]) % n\n        # \u30c7\u30fc\u30bf\u3092\u4fdd\u5b58\u3059\u308b\u30ea\u30b9\u30c8\n        data = []\n        # \u305d\u308c\u305e\u308c\u306e\u8981\u7d20\u306b\u5bfe\u3057\u3066index_sum\u304c\u898b\u3064\u304b\u308c\u3070\u305d\u308c\u3092\u30ea\u30b9\u30c8\u306b\u8ffd\u52a0\n        for elem, has in memo.items():\n            if has[i]:\n                data.append(elem)\n        data.sort()\n        ans.append(data[0])\n    return''.join(map(str, ans))\n"
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a = [int(x) for x in stdin.split('\\n')[0].split(' ')]\n    b = [int(x) for x in stdin.split('\\n')[1].split(' ')]\n    c = [sum((a[i], b[i])) % len(b) for i in range(len(a))]\n    return''.join([str(x) for x in c])\n"
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4\\n3 2 1 1\\n2 4 3 5 6 5 1\")\n    '1 0 0 2'\n    \"\"\"\n    n, a = map(int, stdin.split())\n    b = list(map(int, stdin.split()))\n    b.sort()\n    result = []\n    for i in range(n):\n        result.append((a + b[i]) % n)\n    return \" \".join(map(str, result))\n"
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    :type a: List[int]\n    :type b: List[int]\n    :rtype: int\n    \"\"\"\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    b = [int(x) for x in stdin.readline().split()]\n    a_b = [x + y for x, y in zip(a, b)]\n    c = []\n    for x in range(n):\n        c.append(a_b[x] % n)\n    print(' '.join(map(str, c)))\n    return\n"
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdin[0]"
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return \"0\"\n    elif n == 1:\n        return \"1\"\n    else:\n        return \"0\"\n"
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A = [int(x) for x in stdin.split()]\n    if A[1] == 0:\n        return 0\n    elif A[2] == 0:\n        return 0\n    elif A[3] == 0:\n        return 0\n    else:\n        return 1\nprint(solution(stdin))\n\n\n-----Test----\nInput\n1\n1\n0\n0\n\nOutput\n0\n\n-----Test----\nInput\n0\n1\n0\n0\n\nOutput\n1\n\"\"\"\n\ndef"
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdin"
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return '0'\n\n\nassert(solution('0 1 1 0') == '0')\n"
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    The solution computes the Hamming distance between two substrings.\n    \"\"\"\n    seq1 = stdin[0]\n    seq2 = stdin[1]\n    n = len(seq1)\n    m = len(seq2)\n    dist = 0\n    for i in range(n):\n        if seq1[i]!= seq2[i]:\n            dist += 1\n    return dist"
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    num_1 = stdin.count('1')\n    num_0 = stdin.count('0')\n    if num_1 > num_0:\n        return '1'\n    else:\n        return '0'"
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution to \"Mystery\".\"\"\"\n    return int(stdin[0]) | int(stdin[1])\n"
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    I don't know if this works but it's a pretty cool solution.\n    \"\"\"\n    D, T, S = stdin.split()\n    D = int(D)\n    T = int(T)\n    S = int(S)\n    ans = \"Yes\" if D / S <= T else \"No\"\n    print(ans)\n    return\n"
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    D: int = int(stdin.split(\" \")[0])\n    T: int = int(stdin.split(\" \")[1])\n    S: int = int(stdin.split(\" \")[2])\n    Takahashi = D / S\n    if Takahashi < T:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    D, T, S = (int(i) for i in stdin.split())\n    return \"Yes\" if D / S <= T else \"No\"\n"
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    [D, T, S] = [int(n) for n in stdin.split(' ')]\n    # print(D, T, S)\n    distance = D / S * 60 * T\n    # print(distance)\n    if distance <= D:\n        return 'Yes'\n    else:\n        return 'No'"
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    The input is read from the stdin and passed to the function. Your function should return the output as a str.\n    Raise ValueError in case of faulty input.\n    '''\n    D, T, S = (int(i) for i in stdin.split())\n    if T < D / S:\n        return 'Yes'\n    return 'No'"
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    distance, minutes, speed = map(int, stdin.split())\n    distance = distance * 1000\n    minutes = minutes * 1000\n    return \"Yes\" if minutes < distance / speed else \"No\"\n"
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    d, t, s = map(int, stdin.split())\n    a = d / s\n    b = t / (60 * s)\n    if b >= a:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    d, t, s = [int(i) for i in stdin.split(' ')]\n    if d / s <= t:\n        return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    D, T, S = [int(i) for i in stdin.split()]\n    diff = D/S\n    if diff <= T:\n        return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    d, t, s = map(int, stdin.split(' '))\n    print('Yes' if t * s >= d else 'No')\n"
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # set bingo checker to False\n    checker = False\n\n    # create a numpy array out of the input\n    input_array = np.array(stdin.split(\"\\n\"), int)\n\n    # determine the dimensions of the array\n    rows, columns = input_array.shape\n\n    # determine the number of numbers to mark\n    numbers_to_mark = int(stdin.split(\"\\n\")[-1])\n\n    # determine the array of bingo numbers\n    bingo_numbers = np.array(stdin.split(\"\\n\")[-2:], int)\n\n    # for each row in the array\n    for i in range(rows):\n        # for each column in the array\n        for j in range(columns):\n            # check if the current number is in the bingo numbers\n            if input_array[i, j] in bingo_numbers:\n                # mark the current number in the input array\n                input_array[i, j] = 0\n\n                # mark the current number in the bingo numbers\n                bingo_numbers[bingo_numbers == input_array[i, j]] = 0\n\n                # if the current number is not marked and the bingo checker is False\n                if input_array[i, j]!= 0 and checker is False:\n                    # mark the current number in the bingo numbers\n                    bingo_numbers[bingo_numbers == input_array[i, j]] = 0\n\n                    # mark the current number in the input array\n                    input_array[i, j] = 0\n\n                    # mark all numbers above the current number in the input array\n                    for number in range(i):\n                        input_array[number, j] = 0\n\n                    # mark all numbers to the left of the current number in the input array\n                    for number in range(j):\n                        input_array[i, number] = 0\n\n                    # mark all numbers to the right of the current number in the input array\n                    for number in range(j + 1, columns):\n                        input_array[i, number] = 0\n\n                    # mark all numbers below the current number in the input array\n                    for number in range(i + 1, rows):\n                        input_array[number, j] = 0\n\n                    # mark all numbers below and to the right of the current number in the input array\n                    for number in range(j + 1, columns):\n                        input_array[number, number] = 0\n\n                    # mark all numbers above and to the left of the current number in the input array\n                    for number in range(i + 1):\n                        input_array[number, j] = 0\n\n                    # mark all numbers above and to the left of and below the current number in the input array\n                    for number in range(i + 1, rows):\n                        input_array[number, number] = 0\n\n                    # set the checker to True\n                    checker = True\n\n    # if the bingo checker is True\n    if checker is True:\n        # return the string \"Yes\"\n        return \"Yes\"\n\n    # otherwise\n    else:\n        # return the string \"No\"\n        return \"No\""
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # stdin.strip().split('\\n')\n    n = stdin.split(\"\\n\")\n    a = [list(map(int, n[i].split())) for i in range(4)]\n    n = int(stdin.split()[4])\n    b = stdin.split()[5:]\n    bingo = False\n    row = set()\n    col = set()\n    diagonal = set()\n    for i in range(4):\n        for j in range(4):\n            row.add(a[i][j])\n            col.add(a[j][i])\n            if i == j:\n                diagonal.add(a[i][j])\n    for i in b:\n        if i in row or i in col or i in diagonal:\n            bingo = True\n        else:\n            bingo = False\n    if bingo:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    rows = [row for row in stdin.split('\\n')]\n    \n    N = int(rows[-1])\n    bingo_nums = set(map(int, rows[-N:]))\n    row_cols = []\n    for i in range(3):\n        row_col = []\n        for j in range(i, N, 3):\n            row_col.append(set(map(int, rows[j][i * 3:i * 3 + 3])))\n        row_cols.append(row_col)\n    for row in row_cols:\n        for col in zip(*row):\n            row_cols[row_cols.index(row)].append(col)\n\n    # 0\n    # 1\n    # 2\n    # 3\n    # 4\n    # 5\n    # 6\n    # 7\n    # 8\n    diagonals = [[(i, i) for i in range(3)],\n                 [(0, 2), (1, 1), (2, 0)],\n                 [(0, 0), (1, 1), (2, 2)],\n                 [(0, 2), (1, 1), (2, 0)],\n                 [(0, 0), (1, 1), (2, 2)]]\n\n    def check_bingo_array(array: List[List[Tuple[int, int]]]) -> bool:\n        return len(set(row[0] for row in array) & bingo_nums) == 3 or \\\n               len(set(row[1] for row in array) & bingo_nums) == 3 or \\\n               len(set(row[2] for row in array) & bingo_nums) == 3 or \\\n               len(set(col[0] for col in array) & bingo_nums) == 3 or \\\n               len(set(col[1] for col in array) & bingo_nums) == 3 or \\\n               len(set(col[2] for col in array) & bingo_nums) == 3 or \\\n               len(set(diag[0] for diag in array) & bingo_nums) == 3 or \\\n               len(set(diag[1] for diag in array) & bingo_nums) == 3 or \\\n               len(set(diag[2] for diag in array) & bingo_nums) == 3\n\n    return 'Yes' if any(check_bingo_array(row_col) for row_col in row_cols) else 'No'\n"
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    numbers = [int(number) for number in stdin.split(\"\\n\")]\n    rows = len(numbers)\n    columns = len(numbers[0])\n    matrix = [\n        [numbers[i * columns + j] for j in range(columns)]\n        for i in range(rows)\n    ]\n    bingo = False\n    n = int(stdin.split(\"\\n\")[-1])\n    for row in matrix:\n        if len(set(row)) < n:\n            continue\n        bingo = True\n        break\n    if bingo:\n        for i in range(rows):\n            if len(set(row[i] for row in matrix)) < n:\n                continue\n            bingo = True\n            break\n    if bingo:\n        bingo = False\n        for i in range(rows):\n            if len(set(matrix[i][i] for i in range(rows))) < n:\n                continue\n            bingo = True\n            break\n    if bingo:\n        bingo = False\n        for i in range(rows):\n            if len(set(matrix[i][rows - i - 1] for i in range(rows))) < n:\n                continue\n            bingo = True\n            break\n    if bingo:\n        return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    list_str = stdin.split('\\n')\n    list_int = [int(item) for item in list_str[0:3]]\n    n = int(list_str[3])\n    b = [int(item) for item in list_str[4:n+4]]\n    print(b)\n    for i in range(1,n+1):\n        if(list_int[0] == list_int[i]):\n            if(list_int[1] == list_int[i]):\n                if(list_int[2] == list_int[i]):\n                    print('Yes')\n                    return('Yes')\n    for i in range(1,n+1):\n        if(list_int[0] == list_int[i]):\n            if(list_int[1] == list_int[i]):\n                if(list_int[2] == list_int[i]):\n                    print('Yes')\n                    return('Yes')\n    for i in range(1,n+1):\n        if(list_int[0] == list_int[i]):\n            if(list_int[1] == list_int[i]):\n                if(list_int[2] == list_int[i]):\n                    print('Yes')\n                    return('Yes')\n    print('No')\n    return('No')\nsolution('84 97 66\\n79 89 11\\n61 59 7\\n7\\n89\\n7\\n87\\n79\\n24\\n84\\n30')"
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Gets the solution of the problem\"\"\"\n\n    # Converts input to list\n    rows = stdin.splitlines()\n\n    # Creates empty list to store list values\n    row_1 = []\n    row_2 = []\n    row_3 = []\n    row_4 = []\n    row_5 = []\n    row_6 = []\n    row_7 = []\n    row_8 = []\n    row_9 = []\n\n    # Converts list values to int\n    for row in rows:\n        row_1.append(int(row[0]))\n        row_2.append(int(row[1]))\n        row_3.append(int(row[2]))\n    for row in rows:\n        row_4.append(int(row[3]))\n        row_5.append(int(row[4]))\n        row_6.append(int(row[5]))\n    for row in rows:\n        row_7.append(int(row[6]))\n        row_8.append(int(row[7]))\n        row_9.append(int(row[8]))\n\n    # Creates list of list of ints for our initial grid\n    grid = [row_1, row_2, row_3, row_4, row_5, row_6, row_7, row_8, row_9]\n\n    # Initializes list of our bingo values\n    bingo = []\n\n    # Creates list of ints for bingo values\n    for i in range(1, 101):\n        bingo.append(i)\n\n    # Creates loop to determine if there are three numbers that are marked in a row\n    for row in grid:\n        for x in row:\n            if x in bingo:\n                bingo.remove(x)\n        if len(bingo) == 3:\n            return \"Yes\"\n        else:\n            bingo = []\n\n    # Creates loop to determine if there are three numbers that are marked in a column\n    for x in range(0, 3):\n        for row in grid:\n            if row[x] in bingo:\n                bingo.remove(row[x])\n        if len(bingo) == 3:\n            return \"Yes\"\n        else:\n            bingo = []\n\n    # Creates loop to determine if there are three numbers that are marked in a diagonal\n    for x in range(0, 3):\n        if grid[x][x] in bingo:\n            bingo.remove(grid[x][x])\n        if len(bingo) == 3:\n            return \"Yes\"\n        else:\n            bingo = []\n    for x in range(0, 3):\n        if grid[x][2 - x] in bingo:\n            bingo.remove(grid[x][2 - x])\n        if len(bingo) == 3:\n            return \"Yes\"\n        else:\n            bingo = []\n\n    return \"No\"\n"
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    You are given a bingo card with a 3x3 grid.\n    Mark the numbers in it that are repeated 3 times in a row, column, or diagonal.\n    Print Yes if there is such mark, otherwise print No.\n    '''\n    \n    # Parse stdin\n    grid = []\n    for i in stdin.split():\n        grid.append([int(x) for x in i.split(' ')])\n\n    # Check rows\n    for i in range(3):\n        if grid[i][0] == grid[i][1] == grid[i][2]:\n            return 'Yes'\n    \n    # Check columns\n    for j in range(3):\n        if grid[0][j] == grid[1][j] == grid[2][j]:\n            return 'Yes'\n    \n    # Check diagonals\n    if grid[0][0] == grid[1][1] == grid[2][2]:\n        return 'Yes'\n    elif grid[0][2] == grid[1][1] == grid[2][0]:\n        return 'Yes'\n\n    return 'No'\n    \n"
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    matrix = [[int(num) for num in stdin.splitlines()[0].split()]\n              for _ in range(3)]\n    n = int(stdin.splitlines()[3])\n    b = [int(num) for num in stdin.splitlines()[4].split()]\n    bingo = set()\n    for num in b:\n        bingo.add(num)\n        if len(bingo) == n:\n            return 'Yes'\n    for i in range(3):\n        for j in range(3):\n            if matrix[i][j] in bingo:\n                bingo.remove(matrix[i][j])\n                if len(bingo) == n:\n                    return 'Yes'\n                bingo.add(matrix[i][j])\n    if matrix[0][0] in bingo:\n        bingo.remove(matrix[0][0])\n        if len(bingo) == n:\n            return 'Yes'\n        bingo.add(matrix[0][0])\n    if matrix[0][2] in bingo:\n        bingo.remove(matrix[0][2])\n        if len(bingo) == n:\n            return 'Yes'\n        bingo.add(matrix[0][2])\n    if matrix[2][0] in bingo:\n        bingo.remove(matrix[2][0])\n        if len(bingo) == n:\n            return 'Yes'\n        bingo.add(matrix[2][0])\n    if matrix[2][2] in bingo:\n        bingo.remove(matrix[2][2])\n        if len(bingo) == n:\n            return 'Yes'\n        bingo.add(matrix[2][2])\n    return 'No'\n"
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    grid = [[int(number) for number in line.split(' ')] for line in lines]\n    n = int(lines[3])\n\n    result = []\n    for num in lines[4:]:\n        if num not in result:\n            result.append(num)\n\n    for x in range(0, n):\n        if grid[x][0] in result:\n            if grid[x][1] in result:\n                if grid[x][2] in result:\n                    return \"Yes\"\n        if grid[0][x] in result:\n            if grid[1][x] in result:\n                if grid[2][x] in result:\n                    return \"Yes\"\n        if grid[x][x] in result:\n            if grid[x][x + 1] in result:\n                if grid[x][x + 2] in result:\n                    return \"Yes\"\n\n    return \"No\"\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    _, *rows = stdin.split()\n    rows = [int(x) for x in rows]\n    n = int(stdin.split()[-1])\n\n    for i in range(len(rows)):\n        for j in range(i, len(rows)):\n            if i!= j and rows[i] == rows[j]:\n                return \"Yes\"\n\n    return \"No\""
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    n, m = stdin.split()\n    n, m = int(n), int(m)\n    a = list(map(int, stdin.split()[1:]))\n    a.sort()\n    l = n - 1\n    r = m\n    while l < r:\n        mid = (l + r) // 2\n        takahashi = 0\n        for i in range(len(a)):\n            if i == 0:\n                takahashi += a[i] - mid\n            else:\n                takahashi += a[i] - a[i - 1] - 1\n        if takahashi >= 0:\n            l = mid\n        else:\n            r = mid - 1\n    return l"
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    pass"
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    days_to_finish_assignments, days_available_to_hang_out = list(map(int, stdin.split(\" \")))\n    assignments = list(map(int, stdin.split(\" \")))\n    return str(sum(min(x, days_available_to_hang_out) for x in assignments))\n"
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return maximum number of days Takahashi can hang out during the vacation.\n    \n    >>> solution('4 2\\n1 2\\n1 3')\n    30\n    >>> solution('6 4\\n1 2\\n2 3\\n2 4\\n1 5\\n2 6')\n    -1\n    \"\"\"\n    n, m = map(int, stdin.readline().split())\n    assignments = [tuple(map(int, stdin.readline().split())) for _ in range(m)]\n    d = [a[1] - a[0] + 1 for a in assignments]\n    s = sum(d)\n    if s > n:\n        return -1\n    return n - s + max(d)\n"
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    n, m = map(int, stdin.split())\n    h = list(map(int, stdin.split()))\n    return max(h[:n]) - min(h[:n]) + n\n    '''\n    n, m = map(int, stdin.split())\n    h = sorted(map(int, stdin.split()))\n    return min([h[i+1]-h[i] for i in range(n-1)]) + n"
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution to the problem\n    \"\"\"\n    N, M = map(int, stdin.split(' '))\n    assignments = list(map(int, stdin.split(' ')))\n    count = 0\n    for a in assignments:\n        count += a\n        if count > N:\n            return -1\n    return N - count + 1\n    \nprint(solution(input()))\n"
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\ndef"
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, M = [int(i) for i in stdin.split()]\n    assignments = [int(i) for i in stdin.split()]\n    m = [0] * M\n    for i in range(N):\n        m[i % M] += assignments[i]\n    return max(m)\n"
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    N, M = map(int, stdin.readline().split())\n    assignments = list(map(int, stdin.readline().split()))\n\n    assignments.sort()\n    max_days = assignments[-1]\n    min_days = assignments[0]\n    if min_days + 1!= max_days:\n        return -1\n    if N * M < max_days - min_days + 1:\n        return -1\n    return max_days - min_days + 1\n    '''\n    # write your code in Python 3.6\n    N, M = map(int, input().split())\n    assignments = list(map(int, input().split()))\n\n    assignments.sort()\n    max_days = assignments[-1]\n    min_days = assignments[0]\n    if min_days + 1!= max_days:\n        print(-1)\n        return\n    if N * M < max_days - min_days + 1:\n        print(-1)\n        return\n    print(max_days - min_days + 1)\n"
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # \u3053\u3053\u306b\u5165\u529b\u3092\u6574\u5f62\u3057\u3066\u3044\u304f\n    # \u4eca\u56de\u306f\u5165\u529b\u306b\u554f\u984c\u306b\u95a2\u4fc2\u306a\u3044\u3082\u306e\u3060\u3051\u3092\u524a\u9664\u3059\u308b\n    # D, N = stdin.split()\n    # D, N = int(D), int(N)\n    D, N = 5, 15\n\n    for i in range(N, 100, -1):\n        if i % 100 == 0:\n            print(i)\n            break\n    # return i"
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    d, n = map(int, stdin.split())\n    if d == 0:\n        print(1)\n        return\n    nums = list(range(1, 101))\n    if d == 1:\n        nums = [num for num in nums if num % n == 0]\n    elif d == 2:\n        nums = [num for num in nums if num % n!= 0]\n    nums = sorted(nums)\n    if len(nums) < n:\n        print(-1)\n        return\n    print(nums[n - 1])"
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('0 2\\n')\n    '3'\n    \"\"\"\n    D, N = map(int, stdin.strip().split(' '))\n    n = 0\n    while True:\n        n += 1\n        if N == 1:\n            return n\n        if D == 0 and (n % 100)!= 0:\n            break\n        elif D == 0 and (n % 100) == 0:\n            N -= 1\n        elif D == 1 and (n % 100) % 2 == 0:\n            break\n        elif D == 1 and (n % 100) % 2 == 1:\n            N -= 1\n        elif D == 2 and (n % 100) % 10 == 0:\n            break\n        elif D == 2 and (n % 100) % 10 == 5:\n            N -= 1\n"
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    D, N = map(int, stdin.split(' '))\n    if D == 0:\n        return str(1)\n    elif D == 1:\n        return str(2)\n    elif D == 2:\n        if N <= 100:\n            return str(N + 1)\n        else:\n            return str(N - 100 + 1)\n    return str(100 * (N // 100) + 1)\n"
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    D, N = map(int, stdin.split(' '))\n    max_n = N * (D + 1) // 2\n    nums = range(1, max_n)\n    while len(nums) > N:\n        nums = list(filter(lambda n: n % 100 == 0 or n % 100!= 0, nums))\n    print(nums[N - 1])\n"
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    D, N = [int(c) for c in stdin.split(' ')]\n    candidates = [i for i in range(1, 100)]\n    remainder = 100\n    while remainder!= 0:\n        for c in candidates:\n            if c % remainder == 0:\n                remainder = remainder // 2\n                break\n        else:\n            break\n    candidates.sort(key=lambda x: abs(x - (100 - remainder) * D))\n    print(candidates[N - 1])\n    return\n"
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.split('\\n')\n    D, N = int(inputs[0].split(' ')[0]), int(inputs[0].split(' ')[1])\n    numbers = []\n    for i in range(1, N + 1):\n        if D == 0 or D == 1:\n            numbers.append(i)\n        else:\n            if i % 100 == 0:\n                numbers.append(i)\n    numbers = sorted(numbers)\n    return str(numbers[N - 1])\n"
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    d, n = map(int, stdin.split())\n    return str(n if d == 0 else (n // d) * (d + 1) + 1)"
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    D, N = [int(x) for x in stdin.split(\" \")]\n    low, high = 0, 1000000000\n    while low <= high:\n        mid = (high + low) // 2\n        div = int(str(mid).count(\"0\"))\n        if D == div:\n            return str(mid)\n        elif D < div:\n            high = mid - 1\n        else:\n            low = mid + 1\n"
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''Takes in input of form:\n    N\n    A_1 A_2... A_N\n   ...\n    Returns the maximum possible greatest common divisor of the N integers on the blackboard after your move.'''\n    n = int(stdin[0])\n    arr = [int(x) for x in stdin[1].split(' ')]\n    arr.sort()\n    mod = arr[0] % arr[1]\n    for i in range(2, len(arr)):\n        mod = gcd(mod, arr[i])\n    return str(mod)\n\ndef"
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(i) for i in stdin.readline().split(' ')]\n    a.sort()\n    m = a[0]\n    for i in range(1, n):\n        m = math.gcd(m, a[i])\n    return m"
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return'solution'\n"
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return output\n"
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3\\n7 6 8\")\n    2\n    \"\"\"\n    nums = [int(line) for line in stdin.split(\"\\n\") if line.strip()]\n    return str(gcd(*nums))\n"
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    input_values = stdin.split(\"\\n\")\n    if len(input_values) == 1:\n        values = input_values[0].split()\n    else:\n        values = input_values[1].split()\n    print(values)\n    n = int(values[0])\n    arr = values[1:]\n    new_arr = []\n    for i in arr:\n        if int(i) <= 10 ** 9 and int(i) > 0:\n            new_arr.append(int(i))\n        else:\n            new_arr.append(0)\n\n    new_arr = sorted(new_arr)\n    print(new_arr)\n    greatest_number = new_arr[0]\n    new_greatest_number = greatest_number\n    for i in new_arr:\n        if greatest_number % i!= 0:\n            greatest_number = i\n            greatest_number = greatest_number * greatest_number\n            greatest_number = greatest_number % new_greatest_number\n        else:\n            greatest_number = greatest_number\n    greatest_number = greatest_number\n    print(greatest_number)\n"
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Returns the maximum possible greatest common divisor of the integers in input\n\n    >>> solution(\"3\\n7 6 8\")\n    2\n    >>> solution(\"2\\n1 2\")\n    1\n    >>> solution(\"1\\n1\")\n    1\n    >>> solution(\"1\\n11\")\n    11\n    >>> solution(\"1\\n11\\n1010\")\n    10\n    \"\"\"\n    N, numbers = stdin.split(\"\\n\")\n    numbers = [int(num) for num in numbers.split(\" \")]\n    numbers.sort(reverse=True)\n    n = int(N)\n    greatest_common_divisor = numbers[0]\n    for i in range(1, n):\n        greatest_common_divisor = greatest_common_divisor * numbers[i] // fractions.gcd(\n            greatest_common_divisor, numbers[i]\n        )\n    return greatest_common_divisor\n"
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    \n    n, *nums = stdin\n    n = int(n)\n    \n    nums = map(int, nums)\n    \n    def gcd(a, b):\n        if b == 0:\n            return a\n        return gcd(b, a % b)\n    \n    return max(map(gcd, nums))\n"
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Calculates solution.\"\"\"\n    return f\"{solution.__name__} not implemented\"\n"
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n  '''\n  (list) -> str\n\n  Return the student numbers of the students in the order the students entered the classroom.\n\n  >>> solution(\"3\\n2 3 1\")\n  '3 1 2'\n  '''\n\n  n = int(stdin)\n  stdin = stdin.split('\\n')\n  stdin = [int(stdin[0])] + list(map(int, stdin[1].split(' ')))\n  count = 1\n  result = []\n  for num in stdin:\n    result.append(str(count))\n    count += num\n  return''.join(result)"
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the order of the students in the classroom\"\"\"\n    stdin = stdin.splitlines()\n    n = int(stdin[0])\n    students = stdin[1].split()\n    students = [int(s) for s in students]\n    ordered = []\n\n    for student in students:\n        if student not in ordered:\n            ordered.append(student)\n    \n    for student in students:\n        if student not in ordered:\n            ordered.insert(student - 1, student)\n    \n    return''.join([str(s) for s in ordered])"
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return \" \".join([str(i) for i in range(1, int(stdin.split()[0]) + 1)])\n\n\ndef"
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, *A = map(int, stdin.split())\n    stdin = sorted(zip(range(1, N+1), A), key=lambda x: x[1])\n    return''.join(map(str, [x for x, _ in stdin]))"
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.splitlines()\n    n = int(stdin[0])\n    a = list(map(int, stdin[1].split()))\n    result = []\n\n    for i, elem in enumerate(a):\n        if elem == max(a):\n            result.append(str(i + 1))\n            a[a.index(elem)] = 0\n    return''.join(result)"
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    A = [int(x) for x in stdin.readline().split()]\n    A.sort()\n    for i in A:\n        print(i, end=' ')\n    return ''"
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    n = int(stdin.readline())\n    records = list(map(int, stdin.readline().split()))\n    for i in range(len(records)):\n        records[i] = [i+1, records[i]]\n    records.sort(key = lambda x: x[1])\n    for i in records:\n        print(i[0], end=\" \")\n    #return '\\n'.join(map(str, records))\n\nsolution(stdin)"
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    return \"\"\n"
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    N = int(stdin[0])\n    A = [int(i) for i in stdin[1].split(' ')]\n    result = []\n    for i in range(N):\n        result.append(A[A.index(i+1)])\n    return''.join(str(i) for i in result)\n\"\"\""
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the solution\"\"\"\n    a, b, x = map(int, stdin.split())\n\n    count = 0\n    if a == 1:\n        count = b\n    else:\n        while x >= a:\n            count += b\n            x -= a\n    if x == 0:\n        return str(count)\n    else:\n        return str(count - 1)\n"
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    _, A, B, X = map(int, stdin.split())\n    print(A * max([i for i in range(1, 10 ** 9 + 1) if len(str(i)) == len(str(i).rstrip('0'))]))\n"
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Finds the largest integer that Takahashi can buy with X yen.\n    >>> solution('10 7 100')\n    9\n    >>> solution('10 7 10')\n    0\n    \"\"\"\n    A, B, X = stdin.split(\" \")\n    A = int(A)\n    B = int(B)\n    X = int(X)\n    max_int = 0\n    for i in range(1, 10 ** 9):\n        if X - A * i >= 0:\n            X -= A * i\n            if X >= 0:\n                max_int = i\n            else:\n                break\n        else:\n            break\n    if max_int == 0:\n        return \"0\"\n    else:\n        return str(max_int)\n"
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B, X = [int(i) for i in stdin.split(\" \")]\n    if A*(10**9) + B*(10**9) < X:\n        return 0\n    return (10**9-1)//9 + 1"
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n    cnt = 0\n    for i in range(9, 0, -1):\n        if 10 ** (i - 1) <= x:\n            cnt += i * a\n            x -= 10 ** (i - 1) * i\n    cnt += x * b\n    return cnt\n"
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B, X = map(int, stdin.split())\n    res = 0\n    for n in range(1, 10 ** 9 + 1):\n        val = n * A + B * len(str(n))\n        if val > X:\n            break\n        res = n\n    return str(res)"
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = [int(i) for i in stdin.split(\" \")]\n    return str(sum([i for i in range(1, 10**9) if int(a * i + b * len(str(i))) <= x]) - 1)\n"
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B, X = map(int, stdin.split('\\n')[0].split())\n    if A == 0 and B == 0:\n        return 0\n    elif A * len(str(X)) + B * len(str(X)[1:]) < X:\n        return 0\n    max_num = math.floor(X / (A * 10**len(str(X)) + B * len(str(X)[1:])))\n    if max_num == 0:\n        return 0\n    return max_num"
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = [int(i) for i in stdin.split(' ')]\n    ans = 0\n    for i in range(1, 1001):\n        t = 0\n        for j in str(i):\n            t += int(j)\n        if i * t <= x:\n            ans = max(ans, i)\n    print(ans)\n    return ''"
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n    c = 0\n    for i in range(1, 10):\n        if 10**i * i <= a:\n            c = 10**i\n        else:\n            break\n    if c * b > a:\n        return str(c - 1)\n    if c * b + 10**i * (i - 1) > a:\n        return str(c - 1)\n    return str(c)\n"
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    h = list(map(int, stdin.split()))\n    print(n)\n    print(k)\n    print(h)\n    return str(sum([1 for h_i in h if h_i >= k]))"
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    heights = [int(i) for i in stdin.split()]\n    return n - len([h for h in heights if h >= k])"
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    h = sorted(map(int, stdin.split()))\n    left, right = 0, N - 1\n    while left < right:\n        if h[left] + h[right] < K:\n            left += 1\n        else:\n            right -= 1\n    return right - left + 1\n\"\"\"\ndef"
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find number of friends who are at least k cm tall.\n\n    Args:\n        stdin (str): Input string to parse\n\n    Returns:\n        int: Number of friends who are at least k cm tall.\n    \"\"\"\n    friends, min_height = map(int, stdin.split())\n    heights = list(map(int, stdin.split()))\n    print(sum(1 for height in heights if height >= min_height))\n"
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    pass\n"
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    people = stdin.splitlines()\n    people = [int(people[i]) for i in range(1, len(people))]\n    people = sorted(people)\n    count = 0\n    for i in range(len(people)):\n        if people[i] >= 150:\n            count += 1\n    print(count)\n    return count"
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # return result\n"
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Gets the number of friends and heights of Takahashi's friends who can ride the roller coaster\n    \n    Args:\n        stdin (str): Input string given from Standard Input\n        \n    Returns:\n        str: The number of friends who can ride the roller coaster\n    \"\"\"\n    \n    # list of heights of Takahashi's friends\n    h = list(map(int, stdin.split()))\n    \n    # getting the number of friends\n    n = int(stdin.split()[0])\n    \n    # getting the height of Takahashi\n    k = int(stdin.split()[1])\n    \n    # The number of friends who can ride the roller coaster\n    # with the condition: height of Takahashi > k\n    count = 0\n    \n    for i in range(n):\n        if h[i] > k:\n            count += 1\n    \n    return str(count)\n"
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"No\" if stdin[2] < int(stdin[1])/4 else \"Yes\""
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    votes = list(map(int, stdin.split()))\n    votes.sort()\n    if votes[m - 1] >= n // 4:\n        return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # get user input\n    votes = stdin.splitlines()\n    m = int(votes[0].split()[1])\n    N = int(votes[0].split()[0])\n\n    # iterate through list of votes and create a new list with a dictionary with the vote total for each item\n    vote_dict = dict()\n    for vote in votes[1:]:\n        for vote_item in vote.split():\n            vote_item = int(vote_item)\n            if vote_item in vote_dict:\n                vote_dict[vote_item] += 1\n            else:\n                vote_dict[vote_item] = 1\n\n    # iterate through the dictionary and determine if we can select m items from the list\n    count = 0\n    for key, value in vote_dict.items():\n        if value > (N / (4 * m)):\n            count += 1\n            if count == m:\n                return \"Yes\"\n\n    return \"No\"\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    count: int = stdin.split('\\n')[0]\n    vote: int = stdin.split('\\n')[1]\n    print(count)\n    print(vote)\n    max_vote: int = 0\n    most_popular: int = 0\n    for i in range(count):\n        vote_count: int = int(vote[i])\n        if vote_count >= int(count) / 4:\n            if vote_count > max_vote:\n                max_vote = vote_count\n                most_popular = i + 1\n    return \"Yes\" if most_popular else \"No\"\n\ndef"
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution for input.txt\n\n    Parameters\n    ----------\n    stdin : str\n        The standard input of the testcase.\n\n    Returns\n    -------\n    str\n        The solution to the testcase.\n    \"\"\"\n    # Save input in variables\n    votes = list(map(int, stdin.split()))[:-1]\n    M = int(stdin.split()[-1])\n    # Solve the problem and output\n    if sum(votes) / (4 * M) >= 1 / M:\n        return \"Yes\"\n    return \"No\"\n    "
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    number_of_items, number_of_popular_items = map(int, stdin.split('\\n')[0].split())\n    number_of_votes = list(map(int, stdin.split('\\n')[1].split()))\n    # I use a map because there is no direct way to obtain the distinct values of a list\n    number_of_votes = list(map(int, stdin.split('\\n')[1].split()))\n\n    if number_of_popular_items > number_of_items or number_of_popular_items > len(number_of_votes):\n        return \"No\"\n    else:\n        return \"Yes\"\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    votes = [int(v) for v in stdin.split(' ')]\n    votes.sort(reverse=True)\n    m *= 4\n    if votes[m-1] / (m*n) >= 1 / 4:\n        return 'Yes'\n    return 'No'\n\"\"\""
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    votes = list(map(int, stdin.split(' ')))\n    votes.sort(reverse=True)\n    if votes[m-1]/n >= 1/(4*m):\n        return 'Yes'\n    return 'No'"
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k, rows, cols = stdin.split(\" \")\n    k, rows, cols = int(k), int(rows), int(cols)\n    black_squares = 0\n    for i in range(rows):\n        for j in range(cols):\n            if stdin[2 + i * cols + j] == \"#\":\n                black_squares += 1\n    return black_squares\n"
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    H, W, K = map(int, stdin.readline().split())\n    matrix = []\n    for _ in range(H):\n        matrix.append(list(stdin.readline()))\n    ans = 0\n    rows = []\n    cols = []\n    for i in range(H):\n        for j in range(W):\n            if matrix[i][j] == '.':\n                rows.append(i)\n                cols.append(j)\n    if K <= len(rows) and K <= len(cols):\n        ans = 1\n    else:\n        ans = 0\n    return ans\n"
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the number of ways to paint K black squares using the problem input\"\"\"\n    # Get input\n    h, w, k = map(int, stdin.split())\n    # Get input\n    grid = [list(stdin) for _ in range(h)]\n\n    # If there are no black squares, the number of choices is 0\n    if k == 0:\n        return \"0\"\n\n    # In order to calculate the number of ways, we need to count the number of black squares\n    # surrounding a black square\n    count = 0\n\n    # This list will store all the coordinates of the black squares\n    black = []\n\n    # Find all the coordinates of the black squares\n    for row in range(h):\n        for col in range(w):\n            if grid[row][col] == \".\":\n                continue\n            else:\n                black.append((row, col))\n\n    # If there are no black squares, return 0\n    if len(black) == 0:\n        return \"0\"\n\n    # Otherwise, calculate the number of ways\n    else:\n        # This list will store the number of black squares surrounding the\n        # black square at each coordinate\n        white = [0] * len(black)\n        for i in range(len(black)):\n            # Find the coordinates of the surrounding black squares\n            row = black[i][0]\n            col = black[i][1]\n            # If there is a black square above,\n            if (row - 1, col) in black:\n                # increase the count by 1\n                white[i] += 1\n            # If there is a black square below,\n            if (row + 1, col) in black:\n                # increase the count by 1\n                white[i] += 1\n            # If there is a black square to the left,\n            if (row, col - 1) in black:\n                # increase the count by 1\n                white[i] += 1\n            # If there is a black square to the right,\n            if (row, col + 1) in black:\n                # increase the count by 1\n                white[i] += 1\n\n        # Count the number of ways to make K black squares\n        count = k\n\n        for i in range(len(black)):\n            # If the number of surrounding black squares is more than K,\n            # that means we cannot make K black squares with the current black\n            # square\n            if white[i] > k:\n                count -= 1\n\n        # If no way to make K black squares, return 0\n        if count == 0:\n            return \"0\"\n\n        # Otherwise, return the number of ways\n        else:\n            return str(count)\n"
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    H, W, K = [int(x) for x in stdin.split(' ')]\n    grid = []\n    for _ in range(H):\n        row = stdin.split('\\n')[1:]\n        grid.append(row)\n    return count_choices(grid, K)\n\n\ndef"
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    h, w, k = map(int, stdin.split())\n    def helper(s):\n        if len(s) == 0:\n            return 0\n        if len(s) == 1:\n            if s == \"#\":\n                return 1\n            else:\n                return 0\n        else:\n            if s[0] == \"#\":\n                return 1 + helper(s[1:])\n            else:\n                return 0 + helper(s[1:])\n    count = 0\n    for i in range(h):\n        row = stdin[i * w + 1:i * w + 1 + w]\n        count += helper(row)\n    return count\n"
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    rows, cols, K = [int(x) for x in stdin.split()]\n    mat = [x for x in stdin.split('\\n') if x]\n    row = len(mat)\n    col = len(mat[0])\n    res = 0\n    for i in range(row):\n        for j in range(col):\n            if mat[i][j] == '.':\n                for di in range(0, min(cols, row - i)):\n                    for dj in range(0, min(cols, col - j)):\n                        if mat[i + di][j + dj] == '#':\n                            K -= 1\n                            break\n    print(K)"
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    import math\n    for line in stdin.split('\\n'):\n        if len(line) == 0:\n            continue\n        grid = line.split(' ')\n        if len(grid)!= 3:\n            return 'ERROR'\n        grid = list(map(lambda x: list(x), grid))\n        grid = [list(row) for row in grid]\n        rows = int(grid[0][0])\n        columns = int(grid[0][1])\n        K = int(grid[0][2])\n        if K < 0:\n            return 'ERROR'\n        if K > rows * columns:\n            return math.factorial(rows * columns) // math.factorial(rows) // math.factorial(columns) // math.factorial(K)\n    return 'ERROR'"
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    h, w, k = [int(x) for x in stdin.split(' ')]\n    grid = [x for x in stdin.split('\\n')]\n    total_count = 0\n    for i in range(h):\n        for j in range(w):\n            if grid[i][j] == '.':\n                if j == 0 or grid[i][j-1] == '#':\n                    if i == 0 or grid[i-1][j] == '#':\n                        total_count += 1\n    return total_count\n"
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n  \n  h, w, k = [int(x) for x in stdin.strip().split(' ')]\n  c = stdin.strip()\n  \n  # Compute how many rows and columns we will have after the operation\n  after_rows = h - k\n  after_cols = w - k\n  \n  # Generate all possible combinations of rows and columns\n  combinations = (\n    sum(([i, j] for j in range(after_cols + 1)) for i in range(after_rows + 1))\n  )\n  \n  # Count number of black squares\n  ans = 0\n  for combination in combinations:\n    if c[combination[0]][combination[1]] == '#':\n      ans += 1\n  \n  return str(ans)\n  "
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    l, r = stdin.split(' ')\n    l, r = int(l), int(r)\n    ans = 1\n    for i in range(l, r + 1):\n        ans *= i\n        ans %= 2019\n    return ans\n"
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Main function to calculate mod of result\"\"\"\n    # Get input\n    input_str = stdin.readline().split(\" \")\n\n    # Get values\n    L, R = int(input_str[0]), int(input_str[1])\n\n    # Calculate result\n    result = (L * R) % 2019\n\n    # Return result\n    return str(result)\n"
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(stdin)\n    '2'\n    \"\"\"\n    L, R = (int(x) for x in stdin.split())\n    i = 0\n    j = 1\n    while True:\n        if i * j > R:\n            break\n        if i * j >= L and i * j < R:\n            return str(i * j)\n        i += 1\n        j += 1\n"
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    l, r = list(map(int, stdin.split()))\n    print(min((l * i + r * j) % 2019 for i in range(1, r - l + 1) for j in range(1, r - l + 1)))"
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    [l, r] = [int(x) for x in lines[0].split(' ')]\n    res = 2020 * r * r * r + 2020 * l * l * l\n    return str(res % 2019)\n"
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    l, r = map(int, stdin.split())\n    return str(min((l * r) % 2019, r))\n"
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    inp = stdin.split(' ')\n    l, r = int(inp[0]), int(inp[1])\n    result = 0\n\n    for i in range(l, r + 1):\n        for j in range(i, r + 1):\n            if i * j % 2019 == 0:\n                result = i * j % 2019\n\n    return result\n"
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Your code goes here\n    a, b = map(int, stdin.split())\n    print(((a * b) % 2019) % 2019)\n    return ''\n"
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(x) for x in stdin.split()]\n\n    lcm = gcd(a, b)\n    a //= lcm\n    b //= lcm\n\n    return f\"{a} {b}\"\n"
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    result = 'AC'\n    if stdin[0]!= 'A':\n        result = 'WA'\n    elif stdin.count('C') == 1:\n        index = stdin.find('C')\n        if index >= 3:\n            result = 'WA'\n        for i in range(1, index - 1):\n            if stdin[i]!= 'a':\n                result = 'WA'\n                break\n    return result\n"
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    first_ch = s[0]\n    third_ch = s[2]\n    print(\"WA\" if (s[0]!= 'A' or s[2]!= 'C') else \"AC\")\n    for i in range(2, len(s)):\n        if s[i] == 'A' or s[i] == 'C':\n            continue\n        if s[i] >= s[i-1] or s[i] >= s[i-2]:\n            print(\"WA\")\n            return\n        print(\"AC\")\n        return\n    print(\"AC\")\n    return"
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    if s[0] == 'A' and s[2] == 'C' and s[1] == 'B' and all([c.islower() for c in s[3:]]):\n        return \"AC\"\n    return \"WA\""
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # 1. stdin\uc744 \ubc1b\uace0, \ubb38\uc790\uc5f4\uc744 \ub9ac\uc2a4\ud2b8\ub85c \ubc14\uafbc\ub2e4.\n    s = list(stdin)\n    # 2. \ubb38\uc790\uc5f4\uc744 \uccab\uae00\uc790\uac00 \ub300\ubb38\uc790 A\uc774\uba74\uc11c, \ub450\ubc88\uc9f8\uac00 C\uc778\uc9c0 \ud655\uc778\ud55c\ub2e4.\n    # 2-1. \uccab\uae00\uc790\uac00 \ub300\ubb38\uc790\uc778\uc9c0, \uccab\uae00\uc790\uc758 \uc704\uce58\ub97c \ucc3e\ub294\ub2e4.\n    if s[0] == \"A\" and s[2] == \"C\":\n        # 2-2. \uccab\uae00\uc790\uac00 \ub300\ubb38\uc790\uc774\uace0, \uccab\uae00\uc790\uc758 \uc704\uce58\uac00 \uccab\ubc88\uc9f8 \uc774\uba74, \uc774\uc5b4\uc11c \ub450\ubc88\uc9f8\ubd80\ud130 \uccab\uae00\uc790\uae4c\uc9c0\uac00 \uc18c\ubb38\uc790\uc774\uace0, \uccab\uae00\uc790\uc758 \uc704\uce58\uac00 \ub450\ubc88\uc9f8 \uc774\uba74, \uc774\uc5b4\uc11c \uccab\uae00\uc790\ubd80\ud130 \ub05d\uae4c\uc9c0\uac00 \uc18c\ubb38\uc790\uc774\ub2e4.\n        if s[0].isupper() and s[1] == \"C\":\n            # 2-3. \ubb38\uc790\uc5f4\uc744 \ub2e4\uc2dc \ubb38\uc790\uc5f4\ub85c \ubc14\uafbc\ub2e4.\n            s = \"\".join(s)\n            # 2-4. \uccab\uae00\uc790\uc5d0\ub294 \ub300\ubb38\uc790 A\uac00 \uc788\ub294\ub370, \uadf8 \uc55e\uc5d0 \ubd99\uc5ec\uc11c \uc2dc\uc791\ud558\ub294\ub370, \uadf8 \uc55e\uc758 \ub450\ubc88\uc9f8\uac00 \uc18c\ubb38\uc790 C\uc774\ub2e4.\n            # 2-5. \uccab\uae00\uc790\ubd80\ud130 \uc18c\ubb38\uc790\uc784\uc744 \ud655\uc778\ud55c\ub2e4.\n            for i in range(2, len(s)):\n                if s[i].isupper():\n                    # 2-6. \uc18c\ubb38\uc790\uac00 \uc544\ub2c8\ub77c\uba74, WA\ub97c \ucd9c\ub825\ud55c\ub2e4.\n                    return \"WA\"\n            # 2-7. \uc18c\ubb38\uc790\uac00 \ub9de\uc73c\uba74, AC\ub97c \ucd9c\ub825\ud55c\ub2e4.\n            return \"AC\"\n        # 2-8. \uccab\uae00\uc790\uac00 \ub300\ubb38\uc790\uc774\uba74, \uccab\uae00\uc790\uc758 \uc704\uce58\ub97c \ucc3e\ub294\ub2e4.\n        else:\n            # 2-9. \uccab\uae00\uc790\uac00 \ub300\ubb38\uc790\uc774\uba74, \uc774\uc5b4\uc11c \ub450\ubc88\uc9f8\ubd80\ud130 \uccab\uae00\uc790\uae4c\uc9c0\uac00 \uc18c\ubb38\uc790\uc774\uace0, \uccab\uae00\uc790\uc758 \uc704\uce58\uac00 \ub450\ubc88\uc9f8 \uc774\uba74, \uc774\uc5b4\uc11c \uccab\uae00\uc790\ubd80\ud130 \ub05d\uae4c\uc9c0\uac00 \uc18c\ubb38\uc790\uc774\ub2e4.\n            for i in range(1, len(s)):\n                if s[i].isupper():\n                    break\n                else:\n                    continue\n            # 2-10. \uccab\uae00\uc790\uc5d0\ub294 \ub300\ubb38\uc790 A\uac00 \uc788\ub294\ub370, \uadf8 \uc55e\uc5d0 \ubd99\uc5ec\uc11c \uc2dc\uc791\ud558\ub294\ub370, \uadf8 \uc55e\uc758 \ub450\ubc88\uc9f8\uac00 \uc18c\ubb38\uc790 C\uc774\ub2e4.\n            # 2-11. \uccab\uae00\uc790\ubd80\ud130 \uc18c\ubb38\uc790\uc784\uc744 \ud655\uc778\ud55c\ub2e4.\n            for i in range(2, len(s)):\n                if s[i].isupper():\n                    # 2-12. \uc18c\ubb38\uc790\uac00 \uc544\ub2c8\ub77c\uba74, WA\ub97c \ucd9c\ub825\ud55c\ub2e4.\n                    return \"WA\"\n            # 2-13. \uc18c\ubb38\uc790\uac00 \ub9de\uc73c\uba74, AC\ub97c \ucd9c\ub825\ud55c\ub2e4.\n            return \"AC\"\n    # 2-14. \uccab\uae00\uc790\uac00 \ub300\ubb38\uc790\uc774\uace0, \uccab\uae00\uc790\uc758 \uc704\uce58\uac00 \uccab\ubc88\uc9f8 \uc774\uba74, \uc774\uc5b4\uc11c \ub450\ubc88\uc9f8\ubd80\ud130 \uccab\uae00\uc790\uae4c\uc9c0\uac00 \uc18c\ubb38\uc790\uc774\uace0, \uccab\uae00\uc790\uc758 \uc704\uce58\uac00 \ub450\ubc88\uc9f8 \uc774\uba74, \uc774\uc5b4\uc11c \uccab\uae00\uc790\ubd80\ud130 \ub05d\uae4c\uc9c0\uac00 \uc18c\ubb38\uc790\uc774\ub2e4.\n    else:\n        # 2-15. \uccab\uae00\uc790\uac00 \ub300\ubb38\uc790\uc774\uba74, \uccab\uae00\uc790\uc758 \uc704\uce58\ub97c \ucc3e\ub294\ub2e4.\n        for i in range(len(s)):\n            if s[i].isupper():\n                break\n            else:\n                continue\n        # 2-16. \uccab\uae00\uc790\uc5d0\ub294 \ub300\ubb38\uc790 A\uac00 \uc788\ub294\ub370, \uadf8 \uc55e\uc5d0 \ubd99\uc5ec\uc11c \uc2dc\uc791\ud558\ub294\ub370, \uadf8 \uc55e\uc758 \ub450\ubc88\uc9f8\uac00 \uc18c\ubb38\uc790 C\uc774\ub2e4.\n        # 2-17. \uccab\uae00\uc790\ubd80\ud130 \uc18c\ufffd"
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return \"AC\" if stdin.lower().startswith('a') and stdin.count('c') == 1 and all(s.islower() for s in stdin[2:]) else \"WA\"\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    if len(stdin) == 4 or len(stdin) == 5:\n        if stdin[0] == stdin[1] and stdin[3] == stdin[2]:\n            print('AC')\n        else:\n            print('WA')\n    else:\n        if len(stdin) == 2:\n            print('AC')\n        else:\n            print('WA')\n\n\ndef"
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # a, c\n    # AtCoder\n    # AtCoder\n    # if str[0] == 'A' and str[2] == 'C' and str[3] == 'o'\n    # if str[0] == 'A' and str[2] == 'C' and str[4] == 'o':\n    #     print('AC')\n    # else:\n    #     print('WA')\n    # if str[0] == 'A' and str[2] == 'C' and str[3] == 'o' and str[4] == 'd' and str[5] == 'e' and str[6] == 'r':\n    #     print('AC')\n    # else:\n    #     print('WA')\n\n    if len(stdin) > 4:\n        stdin = stdin.split('\\n')\n        for i in stdin:\n            if i[0] == 'A' and i[2] == 'C' and i[3] == 'o' and i[4] == 'd':\n                print('AC')\n            else:\n                print('WA')\n    else:\n        print('WA')\n\n    # return 'AC' if str[0] == 'A' and str[2] == 'C' and str[3] == 'o' and str[4] == 'd' and str[5] == 'e' and str[6] == 'r' else 'WA'\n\n    # return 'AC' if str[0] == 'A' and str[2] == 'C' and str[3] == 'o' and str[4] == 'd' else 'WA'\n\n    # if str[0] == 'A' and str[2] == 'C' and str[3] == 'o' and str[4] == 'd':\n    #     return 'AC'\n    # else:\n    #     return 'WA'\n    # return 'AC' if str[0] == 'A' and str[2] == 'C' and str[3] == 'o' and str[4] == 'd' else 'WA'\n"
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    input_string = stdin\n    # Check first character\n    if input_string[0] == 'A':\n        # Check second and third character\n        if input_string[1] == 'C' and input_string[2] =='':\n            # Check the rest of the string\n            for character in input_string[3:]:\n                if character.islower():\n                    continue\n                else:\n                    return 'WA'\n            return 'AC'\n        else:\n            return 'WA'\n    else:\n        return 'WA'"
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin) > 4:\n        a = stdin[0]\n        c = stdin[2]\n        if a == 'A' and c == 'C':\n            if len(stdin) > 3:\n                s = stdin[3:]\n                s = s.lower()\n                if c in s:\n                    return 'AC'\n    return 'WA'"
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    if s[0]!= \"A\" or s[2]!= \"C\" or s[3] == \"A\" or s[-2] == \"C\" or s[1]!= \"C\":\n        return \"WA\"\n    return \"AC\""
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    # Implement your solution here\n    # Implement your solution here\n    # Get inputs\n    s = stdin\n    k = int(stdin)\n    k = str(k)\n    # Initialize variables\n    m = len(s)\n    result = \"\"\n    count = 0\n    # Loop through input\n    for x in range(m):\n        if count == 5:\n            break\n        if s[x] == \"2\":\n            result += \"22\"\n            count += 1\n        elif s[x] == \"3\":\n            result += \"333\"\n            count += 1\n        elif s[x] == \"4\":\n            result += \"4444\"\n            count += 1\n        elif s[x] == \"5\":\n            result += \"55555\"\n            count += 1\n        elif s[x] == \"6\":\n            result += \"666666\"\n            count += 1\n        elif s[x] == \"7\":\n            result += \"7777777\"\n            count += 1\n        elif s[x] == \"8\":\n            result += \"88888888\"\n            count += 1\n        elif s[x] == \"9\":\n            result += \"999999999\"\n            count += 1\n        else:\n            result += s[x]\n    # Return result\n    return result[k-1]\n\nprint(solution(input()))\n"
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    S, K = stdin.split('\\n')[0].split(' ')\n    S = int(S)\n    K = int(K)\n    S = [int(i) for i in str(S)]\n    curr_S = ''\n    for i in S:\n        curr_S += str(i)\n    curr_S = list(curr_S)\n    for i in range(0, K):\n        curr_S = str(next_day(curr_S))\n    return curr_S[:K]\n\ndef"
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the K-th character from the left in Mr. Infinity's string\n    after 5 \\times 10^{15} days.\n    >>> solution(\"1214\")\n    '2'\n    >>> solution(\"1212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212"
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    k = int(stdin[1])\n    days = 0\n    while days < 5 * 10 ** 15:\n        s = change(s)\n        days += 1\n\n    s = s[:k - 1]\n    return s\n\n\ndef"
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    k = int(stdin[1])\n    for i in range(1, (5 * (10 ** 15)) + 1):\n        s = s.replace(\"2\", \"22\", 1)\n        s = s.replace(\"3\", \"333\", 1)\n        s = s.replace(\"4\", \"4444\", 1)\n        s = s.replace(\"5\", \"55555\", 1)\n        s = s.replace(\"6\", \"666666\", 1)\n        s = s.replace(\"7\", \"7777777\", 1)\n        s = s.replace(\"8\", \"88888888\", 1)\n        s = s.replace(\"9\", \"999999999\", 1)\n        s = s.replace(\"1\", \"11\", 1)\n    return s[k - 1]\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    S = int(stdin[0])\n    K = int(stdin[1])\n    new_S = S\n    for i in range(1, 5):\n        new_S = int(str(new_S) + str(22))\n    return str(new_S)[K - 1]\n"
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Get input from standard input\n    s = stdin\n    \n    # Count the length of the string\n    n = len(s)\n    \n    # Initialize the list to store the Kth character\n    answer_list = []\n    \n    # Calculate Kth character\n    for k in range(0,n):\n        # Initialize the kth character\n        kth_char = ''\n        \n        # The string changes every day by the following rules:\n        # - Replace each occurrence of 2 in S with 22.\n        # - Replace each occurrence of 3 in S with 333.\n        # - Replace each occurrence of 4 in S with 4444.\n        # - Replace each occurrence of 5 in S with 55555.\n        # - Replace each occurrence of 6 in S with 666666.\n        # - Replace each occurrence of 7 in S with 7777777.\n        # - Replace each occurrence of 8 in S with 88888888.\n        # - Replace each occurrence of 9 in S with 999999999.\n        # - Replace 1 in S with 11.\n        \n        # Traverse the string and replace the digit with the corresponding number\n        for j in range(0,n):\n            if s[j] == '2':\n                kth_char += '22'\n            elif s[j] == '3':\n                kth_char += '333'\n            elif s[j] == '4':\n                kth_char += '4444'\n            elif s[j] == '5':\n                kth_char += '55555'\n            elif s[j] == '6':\n                kth_char += '666666'\n            elif s[j] == '7':\n                kth_char += '7777777'\n            elif s[j] == '8':\n                kth_char += '88888888'\n            elif s[j] == '9':\n                kth_char += '99999999'\n            else:\n                kth_char += s[j]\n        \n        # Add the Kth character to the answer list\n        answer_list.append(kth_char[k])\n        \n    # The answer is the Kth character in the answer list\n    return answer_list[n-1]"
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    string, k = stdin.split(\"\\n\")\n    k = int(k)\n    print(string[:k])\n    return string[:k]\n\ndef"
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    S, K = stdin.split('\\n')\n    S = S.replace('2', '22')\n    S = S.replace('3', '33')\n    S = S.replace('4', '44')\n    S = S.replace('5', '55')\n    S = S.replace('6', '66')\n    S = S.replace('7', '77')\n    S = S.replace('8', '88')\n    S = S.replace('9', '99')\n    S = S.replace('1', '1')\n    return S[K-1]\n    \n"
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin\n    k = int(stdin.split('\\n')[1])\n    # change '2' to '22'\n    S = S.replace('2', '22')\n    # change '3' to '333'\n    S = S.replace('3', '333')\n    # change '4' to '4444'\n    S = S.replace('4', '4444')\n    # change '5' to '55555'\n    S = S.replace('5', '55555')\n    # change '6' to '666666'\n    S = S.replace('6', '666666')\n    # change '7' to '77777777'\n    S = S.replace('7', '77777777')\n    # change '8' to '888888888'\n    S = S.replace('8', '888888888')\n    # change '9' to '999999999'\n    S = S.replace('9', '999999999')\n    # change '1' to '1111111111'\n    S = S.replace('1', '1111111111')\n    # K = 15\n    # 5*10^15 = 5*10^15 / 3 = 10^15\n    # So, N = 5 * 10^15\n    N = 5 * 10 ** 15\n    # (N - K + 1) = 10^15\n    # K = 10^15 - (N - K + 1) = 10^15 - (5 * 10^15) = 10^15 - 5 * 10^15 = 10^15 - (5 * 10^15 / 3) = 10^15 - (5 * 10^15 / 3) / 3\n    # (10^15 - (5 * 10^15 / 3) / 3) / 3 = 10^15 - (5 * 10^15 / 3) / 3 - (5 * 10^15 / 3) / 3\n    # (10^15 - (5 * 10^15 / 3) / 3 - (5 * 10^15 / 3) / 3) / 3 = 10^15 - (5 * 10^15 / 3) / 3 - (5 * 10^15 / 3) / 3 - (5 * 10^15 / 3) / 3\n    # (10^15 - (5 * 10^15 / 3) / 3 - (5 * 10^15 / 3) / 3 - (5 * 10^15 / 3) / 3) / 3 = 10^15 - (5 * 10^15 / 3) / 3 - (5 * 10^15 / 3) / 3 - (5 * 10^15 / 3) / 3 - (5 * 10^15 / 3) / 3\n    # (10^15 - (5 * 10^15 / 3) / 3 - (5 * 10^15 / 3) / 3 - (5 * 10^15 / 3) / 3 - (5 * 10^15 / 3) / 3) / 3 = 10^15 - (5 * 10^15 / 3) / 3 - (5 * 10^15 / 3) / 3 - (5 * 10^15 / 3) / 3 - (5 * 10^15 / 3) / 3\n    # (10^15 - (5 * 10^15 / 3) / 3 - (5 * 10^15 / 3) / 3 - (5 * 10^15 / 3) / 3 - (5 * 10^15 / 3) / 3) / 3 = 10^15 - (5 * 10^15 / 3) / 3 - (5 * 10^15 / 3) / 3 - (5 * 10^15 / 3) / 3 - (5 * 10^15 / 3) / 3 - (5 * 10^15 / 3) / 3\n    # (10^15 - (5 * 10^15 / 3) / 3 - (5 * 10^15 / 3) / 3 - (5 * 10^15 / 3) / 3 - (5 * 10^15 / 3) / 3 - (5 * 10^15 / 3) / 3) / 3 = 10^15 - (5 * 10^15 / 3) / 3 - (5 * 10^15 / 3) / 3 - (5 * 10^15 / 3) / 3 - (5 * 10^15 / 3) / 3 - (5 * 10^15 / 3) / 3 - (5 * 10^15 / 3) / 3\n    # (10^15 - (5 * 10^15 / 3) / 3 - (5 * 10^15 / 3) / 3 - (5 * 10^15 / 3) / 3 - (5 * 10^15 / 3) / 3 - (5 * 10^15 / 3) / 3 - (5 * 10^15 / 3) / 3) / 3 = 10^15 - (5 * 10^15 / 3) / 3 - (5 * 10^15 / 3) / 3 - (5 * 10^15 / 3) / 3 - (5 * 10^15 / 3) / 3 - (5 * 10^15 / 3) / 3 - (5 * 10^15 / 3) / 3 - (5 * 10^15 / 3) / 3\n    # (10^15 - (5 * 10^15 / 3) / 3 - (5 * 10^15 / 3) / 3 - (5 * 10^15 / 3) / 3 - (5 * 10^15 / 3) / 3 - (5 * 10^15 / 3) / 3 - (5 * 10^15 / 3) / 3) / 3 = 10^15 - (5 * 10^15 / 3) / 3 - (5 * 10^15 / 3) / 3 - (5 * 10^15 / 3) / 3 - (5 * 10^15 / 3) / 3 - (5 * 10^15 / 3) / 3 - (5 * 10^15 / 3) / 3 - (5 * 10^15 / 3) / 3 - (5 * 10^15 / 3) / 3\n    # (10^15 - (5 * 10^15 / 3) / 3 - (5 * 10^15 / 3) / 3 - (5 * 10^15 / 3) / 3 - (5 * 10^15 / 3) / 3 - (5 * 10^15 / 3) / 3 - (5 * 10^15 / 3) / 3 - (5 * 10^15 / 3) / 3) / 3 = 10^15 - (5 * 10^15 / 3) / 3 - (5 * 10^15 / 3) / 3 - (5 * 10^15 / 3) / 3 - (5 * 10^15 / 3) / 3 - (5 * 10^15 / 3) / 3 - (5 * 10^15 / 3) / 3 - (5 * 10^15 / 3) / 3\n    # (10^15 - (5 * 10^15 / 3) / 3 - (5 * 10^15 / 3) / 3 - (5 * 10^15 / 3) / 3 - (5 * 10^15 / 3) / 3 - (5 * 10^15 / 3) / 3 - (5 * 10^15 / 3) / 3 - (5 * 10^15 / 3"
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if permutation_sort(stdin) else \"NO\"\n\n\ndef"
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.split('\\n')[0]\n    p = stdin.split('\\n')[1].split(' ')\n    p = list(map(int, p))\n    for i in range(1, len(p)):\n        if p[i-1] > p[i]:\n            for j in range(i):\n                if p[i-j-1] > p[i-j]:\n                    p[i-j-1], p[i-j] = p[i-j], p[i-j-1]\n                    break\n            else:\n                return 'NO'\n    return 'YES'\n"
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Write your code here\n    \"\"\"\n\nimport sys\n\ndef"
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return 'YES'"
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if is_sorted(stdin) else \"NO\"\n\ndef"
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    permutation = [int(i) for i in stdin.readline().split(' ')]\n    if n < 2:\n        return 'YES'\n    for i in range(n - 1):\n        if permutation[i] > permutation[i + 1]:\n            permutation[i], permutation[i + 1] = permutation[i + 1], permutation[i]\n            if permutation[:i] + sorted(permutation[i:]) == list(range(1, n + 1)):\n                return 'YES'\n    return 'NO'"
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    n = int(stdin)\n    p = list(map(int, stdin.split(' ')))\n    swaps = 0\n    for i in range(n - 1):\n        if p[i] > p[i + 1]:\n            p[i], p[i + 1] = p[i + 1], p[i]\n            swaps += 1\n    if swaps == 0:\n        return 'YES'\n    else:\n        return 'NO'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"This is a solution for this problem.\n    \"\"\"\n    N = int(stdin)\n    p = [int(x) for x in stdin.split()]\n    if N == 1:\n        return \"YES\"\n    if N == 2:\n        if p[0] < p[1]:\n            return \"YES\"\n        return \"NO\"\n    for i in range(1, N):\n        if p[i] < p[i - 1]:\n            for j in range(N):\n                if j == i:\n                    continue\n                if p[j] > p[i - 1]:\n                    p[i - 1], p[j] = p[j], p[i - 1]\n                    if p == sorted(p):\n                        return \"YES\"\n                    break\n            else:\n                return \"NO\"\n    return \"YES\" if p == sorted(p) else \"NO\"\n"
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    l = list(map(int, stdin.split()))\n    fl = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if l[i] > l[j]:\n                l[i],l[j] = l[j],l[i]\n                fl = 1\n                break\n        if fl == 0:\n            break\n    if fl == 0:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\nimport itertools\n\ndef"
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Find the maximum number of numbers divisible by 3 that Polycarp can obtain by making vertical cuts.\n\n    Args:\n        stdin: the string input.\n\n    Returns:\n        str: the string output.\n    \"\"\"\n    s = list(stdin)\n    for i in range(len(s) - 1):\n        if int(s[i]) % 3 == 0 and int(s[i + 1]) % 3 == 0:\n            s[i] = str(int(s[i]) * 10 + int(s[i + 1]))\n            s[i + 1] = '0'\n    if int(s[len(s) - 1]) % 3 == 0:\n        return s[len(s) - 1]\n    return ''.join(s)\n"
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3121\")\n    2\n    >>> solution(\"6\")\n    1\n    >>> solution(\"1000000000000000000000000000000000\")\n    33\n    >>> solution(\"201920181\")\n    4\n    \"\"\"\n    s = stdin\n    if len(s) == 1:\n        return 0\n    ans = 0\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            if int(s[i:j + 1]) % 3 == 0:\n                ans += 1\n    return ans\n"
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find the maximum number of numbers divisible by $3$ that Polycarp can get by making vertical cuts in the given number.\"\"\"\n    s = stdin\n    cuts = 0\n    count = 0\n    while s:\n        if len(s) % 3:\n            if s[0] == \"0\":\n                s = s[1:]\n            else:\n                s = s[:-1]\n        else:\n            count += 1\n            s = s[1:]\n    cuts = count - 1\n    return cuts\n"
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\"\"\"\n\ndef"
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = int(stdin)\n    a = []\n    while s > 0:\n        a.append(s % 3)\n        s = s // 3\n    a.reverse()\n    count = 0\n    for i in range(len(a)):\n        if a[i] == 0:\n            count += 1\n        else:\n            break\n    for j in range(i, len(a)):\n        if a[j] == 1:\n            count += 1\n        else:\n            break\n    return count\n"
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return str()\n"
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3121\")\n    2\n    >>> solution(\"6\")\n    1\n    >>> solution(\"1000000000000000000000000000000000\")\n    33\n    >>> solution(\"201920181\")\n    4\n    \"\"\"\n    s = stdin\n    length = len(s)\n    if length < 2:\n        return 0\n    left = 0\n    right = 0\n    count = 0\n    ans = 0\n    while True:\n        if right == length:\n            break\n        if right + 1 < length and s[right] == \"0\" and s[right + 1] == \"0\":\n            count = 0\n            right += 2\n        elif right + 1 < length and s[right] == \"0\" and s[right + 1] == \"1\":\n            count = 0\n            right += 2\n        else:\n            count += 1\n            right += 1\n        if count == 2:\n            ans += 1\n    return ans\n"
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    s = stdin[0]\n    res = [0] * len(s)\n    for i in range(0, len(s) - 1):\n        if int(s[i]) % 3 == 0:\n            res[i] += 1\n        if int(s[i + 1]) % 3 == 0:\n            res[i] += 1\n        res[i + 1] += res[i]\n    return max(res)"
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... 4\n   ... 1 2 3 4\n   ... 2 4 7 11\n   ... 3 3 3 3\n   ... 4 4 4 4\n   ... ''')\n    '2'\n    >>> solution('''\n   ... 5\n   ... 1 2 3 4 5\n   ... 2 4 7 11 3\n   ... ''')\n    '2'\n    >>> solution('''\n   ... 3\n   ... 1 2 -1\n   ... -6 -12 6\n   ... ''')\n    '3'\n    >>> solution('''\n   ... 3\n   ... 1 2 -1\n   ... -6 -12 6\n   ... ''')\n    '2'\n    \"\"\"\n   ...\n"
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    a, b = map(lambda x: list(map(int, x.split())), stdin.splitlines())\n    n = len(a)\n    zeroes = lambda x, y: x.count(0) + y.count(0)\n    maximum = 0\n    for d in map(lambda x: -x / n if x else 0, a + b):\n        maximum = max(maximum, zeroes(list(map(lambda x: x * d, a)), list(map(lambda x: x * d, b))))\n    return str(maximum)\n\nprint(solution(stdin))"
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    m, *b = map(int, stdin.split())\n\n    sa = sorted(a, reverse=True)\n    sb = sorted(b, reverse=True)\n    i, j = 0, 0\n    total = 0\n    res = 0\n\n    while i < n and j < m:\n        if sa[i] > sb[j]:\n            total += sb[j]\n            res += 1\n            j += 1\n        else:\n            total += sa[i]\n            res += 1\n            i += 1\n\n    while i < n:\n        total += sa[i]\n        res += 1\n        i += 1\n\n    while j < m:\n        total += sb[j]\n        res += 1\n        j += 1\n\n    print(res)\n"
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def cost(d: int, l: list[int]) -> int:\n        return sum(min(abs(i), abs(i - d)) for i in l)\n\n    return str(max([0, *(sorted([-abs(i - j) for i in stdin.split(' ') for j in stdin.split(' ')])[::-1])[1:]]))\n"
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n, *arr = map(int, stdin.split('\\n')[0].split())\n    a, b = arr[::2], arr[1::2]\n    res = -inf\n    for i in range(n):\n        tmp = 0\n        for j in range(i, n):\n            tmp += a[j]*b[j]\n        res = max(res, tmp)\n    return str(res)"
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = [int(x) for x in stdin.split('\\n')[1].split(' ')]\n    b = [int(x) for x in stdin.split('\\n')[2].split(' ')]\n    return str(max(0, sum([abs(x) for x in map(lambda x, y: x * y, a, b)])))\n\n\ndef"
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, n = [int(s) for s in stdin.split(\"\\n\")[:3]]\n    # a = [int(s) for s in input().split(\"\\n\")[:n]]\n    # b = [int(s) for s in input().split(\"\\n\")[:n]]\n    c = [d * a[i] + b[i] for i, d in enumerate(b)]\n    print(max([(i + 1) * c[i] for i, c_ in enumerate(c) if c_ == 0]))\n"
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Declare variables\n    total_arrays = int(stdin[0])\n    array_1 = [int(x) for x in stdin[1].split(\" \")]\n    array_2 = [int(x) for x in stdin[2].split(\" \")]\n    \n    # Find the maximum score\n    max_score = 0\n    \n    # Loop through all possible values of d\n    for i in range(total_arrays):\n        # Find the score for this value of d\n        score = 0\n        for j in range(total_arrays):\n            score += (i * array_1[j] + array_2[j])\n        \n        # Update max_score if the score is greater than the max_score\n        if score > max_score:\n            max_score = score\n            \n    return str(max_score)\n"
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Get the maximum number of compatible left-right pairs of boots\n    from the given inputs.\n\n    Parameters\n    ----------\n    stdin : str\n        The input string, a single line of input.\n\n    Returns\n    -------\n    str\n        The maximum number of compatible left-right pairs of boots.\n    \"\"\"\n    if not stdin:\n        raise ValueError('The input cannot be empty')\n    n = int(stdin.split('\\n')[0])\n    l = stdin.split('\\n')[1]\n    r = stdin.split('\\n')[2]\n\n    l_idx = 0\n    r_idx = 0\n    matches = 0\n\n    for i in range(n):\n        if l[i] == '?':\n            l_idx = i\n        if r[i] == '?':\n            r_idx = i\n\n        if l[i] == r[i] or l[i] == '?' or r[i] == '?':\n            matches += 1\n            l_idx = i\n            r_idx = i\n\n    return matches\n"
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, l, r = [int(s) for s in stdin.split()]\n    if n == 1:\n        print(0)\n    else:\n        i = 0\n        pairs = 0\n        while i < len(l):\n            if l[i] == '?' or r[i] == '?':\n                l[i] = r[i] = 'a'\n            elif l[i] == r[i]:\n                pairs += 1\n            i += 1\n        if n == pairs:\n            print(pairs)\n            print(' '.join(str(i) for i in range(n)))\n        else:\n            print(pairs)\n            print(' '.join(str(i) for i in range(n-pairs)))"
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\n---\n\n\"\"\"\n\nimport sys\nfrom typing import List\n\nsys.setrecursionlimit(10 ** 6)\n\n\ndef"
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"10\\ncodeforces\\ndodivthree\")\n    5\n    >>> solution(\"7\\nabaca?b\\nzabbbcc\")\n    5\n    >>> solution(\"9\\nhellocode\")\n    0\n    \"\"\"\n    left_boot, right_boot = stdin.split(\"\\n\")\n\n    left_boot = [\n        boot for boot in left_boot if boot!= \"??\"]\n    right_boot = [\n        boot for boot in right_boot if boot!= \"??\"]\n\n    left_boot_set = set(left_boot)\n    right_boot_set = set(right_boot)\n    compatible_boot_set = left_boot_set & right_boot_set\n\n    counter = 0\n    for left_boot in left_boot:\n        for right_boot in right_boot:\n            if left_boot in compatible_boot_set and right_boot in compatible_boot_set:\n                counter += 1\n\n    return str(counter)\n"
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find the largest number of compatible left and right boot pairs.\n    \"\"\"\n    n = int(stdin.splitlines()[0])\n    left_boot_colors = [c for c in stdin.splitlines()[1]]\n    right_boot_colors = [c for c in stdin.splitlines()[2]]\n    compatible_left_right_pairs = 0\n    compatible_boot_pairs = []\n    for left_boot_color in left_boot_colors:\n        for right_boot_color in right_boot_colors:\n            if left_boot_color!= '?' and right_boot_color!= '?':\n                if left_boot_color == right_boot_color:\n                    compatible_boot_pairs.append([left_boot_color, right_boot_color])\n                    compatible_left_right_pairs += 1\n    for left_boot_color in left_boot_colors:\n        for right_boot_color in right_boot_colors:\n            if left_boot_color!= '?' and right_boot_color!= '?':\n                if left_boot_color == right_boot_color:\n                    compatible_boot_pairs.append([left_boot_color, right_boot_color])\n                    compatible_left_right_pairs += 1\n\n    for boot_pair in compatible_boot_pairs:\n        if boot_pair not in compatible_left_right_pairs:\n            compatible_boot_pairs.remove(boot_pair)\n    return str(compatible_left_right_pairs)\n"
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    n = int(stdin.readline())\n    l = stdin.readline().strip()\n    r = stdin.readline().strip()\n    l_color = {}\n    r_color = {}\n    for i, j in enumerate(l):\n        if j not in l_color:\n            l_color[j] = [i]\n        else:\n            l_color[j].append(i)\n    for i, j in enumerate(r):\n        if j not in r_color:\n            r_color[j] = [i]\n        else:\n            r_color[j].append(i)\n    ans = 0\n    for i, j in l_color.items():\n        for k in r_color.keys():\n            if i == k or i == '?' or k == '?':\n                continue\n            if j == r_color[k]:\n                ans += 1\n    print(ans)\n    return ans\n"
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\"\"\"\n"
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = [int(x) for x in stdin.readline().strip().split(' ')]\n    if len(a) == 0:\n        return '0'\n    a.sort()\n    i = 0\n    j = 1\n    result = []\n    while i < n:\n        if j < n and (a[j] - a[i] == j - i):\n            while j < n and a[j] - a[i] == j - i:\n                j += 1\n            result.append((i+1, j))\n            i = j\n        else:\n            i += 1\n    print(len(result))\n    for block in result:\n        print(' '.join([str(x) for x in block]))\n\n\ndef"
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Finds a set of blocks of the given array in the following way:\n    - the total sum of all elements is equal.\n    - each block is the same.\n    - there are no intersections between the blocks.\n    - the number of blocks is maximum.\n    - the total number of blocks is the same.\n    \"\"\"\n\n    input_data = [int(x) for x in stdin.split()]\n    n = input_data[0]\n    input_data = input_data[1:]\n\n    # \u5404\u500b\u5206\u3051\u3067\u5408\u8a08\u304c\u4e00\u81f4\u3057\u3066\u3044\u308b\u304b\u3069\u3046\u304b\n    # \u5404\u500b\u5206\u3051\u3067\u5408\u8a08\u304c\u4e00\u81f4\u3057\u3066\u3044\u306a\u3044\u5834\u5408\u306f\u3001\u305d\u306e\u5206\u3051\u65b9\u306f\u5225\u306e\u3082\u306e\u3068\u3057\u3066\u89e3\u91c8\u3059\u308b\n    # \u5404\u500b\u5206\u3051\u3067\u5408\u8a08\u304c\u4e00\u81f4\u3057\u3066\u3044\u308b\u5834\u5408\u306f\u3001\u305d\u306e\u5206\u3051\u65b9\u306f\u5225\u306e\u3082\u306e\u3068\u3057\u3066\u89e3\u91c8\u3059\u308b\n    # \u4e00\u65b9\u3067\u540c\u3058\u5024\u304c\u91cd\u8907\u3059\u308b\u5834\u5408\u306f\u3001\u305d\u306e\u30d6\u30ed\u30c3\u30af\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u304c\u9055\u3046\u306e\u3067\u3001\u305d\u308c\u3089\u306e\u5206\u3051\u65b9\u306f\u5225\u306e\u3082\u306e\u3068\u3057\u3066\u89e3\u91c8\u3059\u308b\n    equal_sum_blocks = [i for i, x in enumerate(input_data) if x == sum(input_data) / len(input_data)]\n    if len(equal_sum_blocks) == 0:\n        equal_sum_blocks = [i for i, x in enumerate(input_data) if x == sum(input_data) / len(input_data)]\n\n    # \u5404\u500b\u5206\u3051\u3067\u5408\u8a08\u304c\u4e00\u81f4\u3057\u3066\u3044\u308b\u304b\u3069\u3046\u304b\n    # \u5404\u500b\u5206\u3051\u3067\u5408\u8a08\u304c\u4e00\u81f4\u3057\u3066\u3044\u308b\u5834\u5408\u306f\u3001\u305d\u306e\u5206\u3051\u65b9\u306f\u5225\u306e\u3082\u306e\u3068\u3057\u3066\u89e3\u91c8\u3059\u308b\n    # \u5404\u500b\u5206\u3051\u3067\u5408\u8a08\u304c\u4e00\u81f4\u3057\u3066\u3044\u308b\u5834\u5408\u306f\u3001\u305d\u306e\u5206\u3051\u65b9\u306f\u5225\u306e\u3082\u306e\u3068\u3057\u3066\u89e3\u91c8\u3059\u308b\n    # \u4e00\u65b9\u3067\u540c\u3058\u5024\u304c\u91cd\u8907\u3059\u308b\u5834\u5408\u306f\u3001\u305d\u306e\u30d6\u30ed\u30c3\u30af\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u304c\u9055\u3046\u306e\u3067\u3001\u305d\u308c\u3089\u306e\u5206\u3051\u65b9\u306f\u5225\u306e\u3082\u306e\u3068\u3057\u3066\u89e3\u91c8\u3059\u308b\n    equal_sum_blocks = [i for i, x in enumerate(input_data) if x == sum(input_data) / len(input_data)]\n    if len(equal_sum_blocks) == 0:\n        equal_sum_blocks = [i for i, x in enumerate(input_data) if x == sum(input_data) / len(input_data)]\n\n    # \u5404\u500b\u5206\u3051\u3067\u5408\u8a08\u304c\u4e00\u81f4\u3057\u3066\u3044\u308b\u304b\u3069\u3046\u304b\n    # \u5404\u500b\u5206\u3051\u3067\u5408\u8a08\u304c\u4e00\u81f4\u3057\u3066\u3044\u308b\u5834\u5408\u306f\u3001\u305d\u306e\u5206\u3051\u65b9\u306f\u5225\u306e\u3082\u306e\u3068\u3057\u3066\u89e3\u91c8\u3059\u308b\n    # \u5404\u500b\u5206\u3051\u3067\u5408\u8a08\u304c\u4e00\u81f4\u3057\u3066\u3044\u308b\u5834\u5408\u306f\u3001\u305d\u306e\u5206\u3051\u65b9\u306f\u5225\u306e\u3082\u306e\u3068\u3057\u3066\u89e3\u91c8\u3059\u308b\n    # \u4e00\u65b9\u3067\u540c\u3058\u5024\u304c\u91cd\u8907\u3059\u308b\u5834\u5408\u306f\u3001\u305d\u306e\u30d6\u30ed\u30c3\u30af\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u304c\u9055\u3046\u306e\u3067\u3001\u305d\u308c\u3089\u306e\u5206\u3051\u65b9\u306f\u5225\u306e\u3082\u306e\u3068\u3057\u3066\u89e3\u91c8\u3059\u308b\n    equal_sum_blocks = [i for i, x in enumerate(input_data) if x == sum(input_data) / len(input_data)]\n    if len(equal_sum_blocks) == 0:\n        equal_sum_blocks = [i for i, x in enumerate(input_data) if x == sum(input_data) / len(input_data)]\n\n    # \u5404\u500b\u5206\u3051\u3067\u5408\u8a08\u304c\u4e00\u81f4\u3057\u3066\u3044\u308b\u304b\u3069\u3046\u304b\n    # \u5404\u500b\u5206\u3051\u3067\u5408\u8a08\u304c\u4e00\u81f4\u3057\u3066\u3044\u308b\u5834\u5408\u306f\u3001\u305d\u306e\u5206\u3051\u65b9\u306f\u5225\u306e\u3082\u306e\u3068\u3057\u3066\u89e3\u91c8\u3059\u308b\n    # \u5404\u500b\u5206\u3051\u3067\u5408\u8a08\u304c\u4e00\u81f4\u3057\u3066\u3044\u308b\u5834\u5408\u306f\u3001\u305d\u306e\u5206\u3051\u65b9\u306f\u5225\u306e\u3082\u306e\u3068\u3057\u3066\u89e3\u91c8\u3059\u308b\n    # \u4e00\u65b9\u3067\u540c\u3058\u5024\u304c\u91cd\u8907\u3059\u308b\u5834\u5408\u306f\u3001\u305d\u306e\u30d6\u30ed\u30c3\u30af\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u304c\u9055\u3046\u306e\u3067\u3001\u305d\u308c\u3089\u306e\u5206\u3051\u65b9\u306f\u5225\u306e\u3082\u306e\u3068\u3057\u3066\u89e3\u91c8\u3059\u308b"
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''7\n   ... 4 1 2 2 1 5 3\n   ... ''')\n    '3'\n    >>> solution('''11\n   ... -5 -4 -3 -2 -1 0 1 2 3 4 5\n   ... ''')\n    '2'\n    >>> solution('''4\n   ... 1 1 1 1\n   ... ''')\n    '4'\n    \"\"\"\n    n = int(stdin.split()[0])\n    a = [int(x) for x in stdin.split()[1].split()]\n    if n == len(a):\n        return str(1)\n    max_k = 0\n    i = 0\n    r = 0\n    k = 0\n    nums = set()\n    for i in range(n - 1):\n        if r > i:\n            nums.add(r)\n        r += a[r]\n        if r > i:\n            k += 1\n        if r > n - 1:\n            break\n        if k > max_k:\n            max_k = k\n    for num in nums:\n        print(num, num + k - 1)\n"
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"7\\n4 1 2 2 1 5 3\\n\")\n    3\n    >>> solution(\"11\\n-5 -4 -3 -2 -1 0 1 2 3 4 5\\n\")\n    2\n    >>> solution(\"4\\n1 1 1 1\\n\")\n    4\n    \"\"\"\n    n = int(stdin.readline())\n    seq = [int(x) for x in stdin.readline().split()]\n    block = []\n    block_sum = 0\n    res = 0\n    for i in range(n):\n        if seq[i] > block_sum:\n            block_sum = seq[i]\n            block.append(i)\n        if seq[i] + seq[i + 1] < 0:\n            res += 1\n    print(res)\n    for i in block:\n        print(i, i + 1)\n"
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4 1 2 2 1 5 3\\n\")\n    3\n    >>> solution(\"-5 -4 -3 -2 -1 0 1 2 3 4 5\\n\")\n    2\n    >>> solution(\"11 -5 -4 -3 -2 -1 0 1 2 3 4 5\\n\")\n    2\n    \"\"\"\n    n = int(stdin.split()[0])\n    a = [int(i) for i in stdin.split()[1:]]\n    assert len(a) == n\n\n    # \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043c\u0430\u0441\u0441\u0438\u0432\u0430 \u0445\u044d\u0448-\u0444\u0443\u043d\u043a\u0446\u0438\u044f\u043c\u0438\n    # d[a_i] = {i: a_i * a_i,...}\n    # a_i \u043a\u043b\u044e\u0447\u0438, i - \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\n    d = {i: i * i for i in a}\n\n    # \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u0445\u044d\u0448-\u0442\u0430\u0431\u043b\u0438\u0446\u044b\n    # d[a_i] = {a_j: a_i*a_j}\n    # a_i \u043a\u043b\u044e\u0447\u0438, a_j \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\n    for i in a:\n        for j in a:\n            d[i] = d.get(i, set()).union({j * i})\n\n    # \u043f\u043e\u0434\u0441\u0447\u0435\u0442 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u043f\u0435\u0440\u0435\u0441\u0442\u0430\u043d\u043e\u0432\u043e\u043a \u0445\u044d\u0448-\u0442\u0430\u0431\u043b\u0438\u0446\u044b\n    # \u0443 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u043a\u043e\u043b-\u0432\u043e \u043f\u0435\u0440\u0435\u0441\u0442\u0430\u043d\u043e\u0432\u043e\u043a \u0434\u043b\u044f \u0434\u043e\u0441\u0442\u0438\u0436\u0435\u043d\u0438\u044f \u043c\u0438\u043d\u0438\u043c\u0443\u043c\u0430\n    c = [len(d[i]) for i in d]\n    c = [sum(c[:i]) for i in range(1, n + 1)]\n\n    # \u043f\u043e\u0434\u0441\u0447\u0435\u0442 \u043f\u0435\u0440\u0435\u0441\u0442\u0430\u043d\u043e\u0432\u043e\u043a\n    # \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u043a\u043e\u043b-\u0432\u043e \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0445 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u043e\u0432 \u0434\u043b\u044f \u0434\u043e\u0441\u0442\u0438\u0436\u0435\u043d\u0438\u044f \u043c\u0438\u043d\u0438\u043c\u0443\u043c\u0430\n    # \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0435 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u044b \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430:\n    # 1. \u0434\u043e\u0441\u0442\u0438\u0436\u0435\u043d\u0438\u0435 \u043c\u0438\u043d\u0438\u043c\u0443\u043c\u0430 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u0434\u043e \u043d\u0430\u0438\u043c\u0435\u043d\u044c\u0448\u0435\u0433\u043e \u043a\u043e\u043b-\u0432\u0430 \u043f\u0435\u0440\u0435\u0441\u0442\u0430\u043d\u043e\u0432\u043e\u043a,\n    # 2. \u0441\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0434\u0432\u0443\u0445 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432,\n    # 3. \u0432\u044b\u0447\u0438\u0442\u0430\u043d\u0438\u0435 \u0442\u0440\u0435\u0445 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432,\n    # 4. \u0443\u043c\u043d\u043e\u0436\u0435\u043d\u0438\u0435 \u0434\u043e 4-\u0433\u043e \u0441\u0442\u0435\u043f\u0435\u043d\u0438,\n    # 5. \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043d\u043e\u0432\u043e\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430\n    c = [1] + [sum(c[:i]) for i in range(1, n)]\n    c = [sum(c[:i]) for i in range(1, n + 1)]\n\n    # \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u0441\u043b\u043e\u0432\u0430\u0440\u044f \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0435\u0439\n    # \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c: \u0447\u0430\u0441\u0442\u043e\u0442\u0430 \u0443\u043f\u043e\u0440\u044f\u0434\u043e\u0447\u0435\u043d\u043d\u043e\u0439 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438\n    d_seq = {i: 1 for i in range(1, n + 1)}\n    for i in range(1, n + 1):\n        for j in d[i]:\n            if c[i] >= c[j]:\n                if d_seq.get(j):\n                    d_seq[j] = max(d_seq[j], d_seq[i] + 1)\n                else:\n                    d_seq[j] = d_seq[i] + 1\n\n    # \u0432\u044b\u0432\u043e\u0434 \u0432 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e\u043c \u043f\u043e\u0440\u044f\u0434\u043a\u0435\n    # \u043f\u0435\u0440\u0435\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 \u0437\u0430\u043a\u043e\u043d\u0447\u0438\u0432\u0448\u0438\u0435\u0441\u044f \u0432 \u0441\u0430\u043c\u043e\u043c \u043d\u0438\u0437\u0443 \u0441\u043f\u0438\u0441\u043a\u0430\n    for i in range(c[n], -1, -1):\n        # \u043f\u043e\u0440\u044f\u0434\u043a\u043e\u0432\u044b\u0439 \u043d\u043e\u043c\u0435\u0440 \u043f\u0435\u0440\u0435\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438, \u0434\u043e"
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"The first line contains integer $n$ ($1 \\le n \\le 1500$) \u2014 the length of the given array. The second line contains the sequence of elements $a[1], a[2], \\dots, a[n]$ ($-10^5 \\le a_i \\le 10^5$).\n\n    :param str stdin:\n    :rtype: str\n    \"\"\"\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split(' ')))\n    blocks = set()\n    s = 0\n    for i in range(n):\n        s += a[i]\n        blocks.add(s)\n    for i in range(n):\n        s -= a[i]\n        blocks.add(s)\n    blocks = sorted(list(blocks))\n    for i in range(len(blocks) - 1):\n        if blocks[i] == blocks[i + 1]:\n            print(i + 1)\n            print(i + 2)\n            return\n    print(len(blocks))\n    return\n"
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    A simple solution.\n    \"\"\"\n    n = int(stdin)\n    s = [int(i) for i in stdin.split()]\n    max_sum, min_sum = sum(s), sum(s)\n    print(max(0, sum(s) - min_sum + 1))\n    for i in range(min_sum, max_sum):\n        if sum([1 if i >= a else 0 for i, a in zip(s, s[1:])]) == 1:\n            print(f\"{i} {i+1}\")\n            break"
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''7\n   ... 4 1 2 2 1 5 3\n   ... ''')\n    '3'\n    >>> solution('''11\n   ... -5 -4 -3 -2 -1 0 1 2 3 4 5\n   ... ''')\n    '2'\n    >>> solution('''4\n   ... 1 1 1 1\n   ... ''')\n    '4'\n    \"\"\"\n   ...\n    a = [int(x) for x in stdin.split('\\n')[1].split(' ')]\n    ans = 0\n    i = 0\n    while i < len(a) - 1:\n        j = i + 1\n        while j < len(a) and a[j] == a[i]:\n            j += 1\n        ans = max(ans, j - i)\n        i = j\n    return str(ans)\n"
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the largest sum of blocks\n    that are disjoint.\n\n    Args:\n        stdin (str): Input string\n\n    Returns:\n        str: the input string\n    \"\"\"\n    n = int(stdin)\n    nums = list(map(int, stdin.split(' ')))\n    nums.sort()\n    max_sum = 0\n    blocks = set()\n    for i in range(n):\n        sum_blocks = 0\n        for j in range(i, n):\n            sum_blocks += nums[j]\n            blocks.add(j)\n            max_sum = max(sum_blocks, max_sum)\n            if max_sum == sum_blocks:\n                print(len(blocks))\n                for block in blocks:\n                    print(f'{block} {block + 1}')\n                return\n            if sum_blocks > max_sum:\n                break\n"
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the longest possible block of elements which do not intersect.\"\"\"\n    n = int(stdin.readline().strip())\n    a = [int(i) for i in stdin.readline().strip().split(' ')]\n    # The max number of blocks we can have is n\n    k = n\n    current_index = 0\n    # We can have at most k blocks in a list, therefore we need to store the\n    # start and end indices for each of them, and the sum of the elements\n    # contained inside it.\n    #\n    # In order to do so, we'll need to sort the array.\n    a.sort()\n    # The number of blocks we need to create is then n - 1\n    for i in range(1, n):\n        # We'll need to check if two blocks intersect, but if one of them\n        # is empty then we'll just skip it.\n        #\n        # We'll need to keep track of the max block index we can have in a\n        # list, because we'll need to use it as the end index of the next\n        # block.\n        max_index = 0\n        for j in range(i, n):\n            # As usual, if the end index of the current block is greater than\n            # the start index of the next block, then they intersect.\n            if a[max_index] <= a[j]:\n                break\n            # Otherwise, we just have to find the next index which will be\n            # greater than the current one, and also the end index of the\n            # next block.\n            max_index = j\n        # If we're here, then the blocks we just calculated don't intersect,\n        # and we can add it to the list and increase the number of blocks we\n        # can have.\n        k += 1\n        # We can also just print the start and end index of the block we\n        # just calculated.\n        print(max_index, i)\n    return k\n"
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... 3 11\n   ... 1 1 2 2 3\n   ... ''')\n    '0'\n    >>> solution('''\n   ... 4 2\n   ... 2 78 4 10\n   ... ''')\n    '12'\n    \"\"\"\n    n, k = map(int, stdin.split('\\n')[:2])\n    a = map(int, stdin.split('\\n')[2:])\n    b = [0] * n\n    for i, v in enumerate(a):\n        b[i] = v * (n - i)\n    b.sort()\n    ans = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if b[i] * b[j] % k == 0:\n                ans += 1\n    return str(ans)\n"
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\n\u0412\u044b \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442\u0435 \u043d\u0430 \u0432\u0445\u043e\u0434 \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e n \u0438 \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e k.\n\n\u0412\u0430\u0448\u0430 \u0437\u0430\u0434\u0430\u0447\u0430 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0442\u0430\u043a\u0438\u0445 \u043f\u0430\u0440 \u043f\u043e\u0437\u0438\u0446\u0438\u0439 (i, j) \u0432 \u043c\u0430\u0441\u0441\u0438\u0432\u0435 a \u0443\u0434\u043e\u0432\u043b\u0435\u0442\u0432\u043e\u0440\u044f\u044e\u0449\u0438\u0445 \u0443\u0441\u043b\u043e\u0432\u0438\u044e \u0447\u0442\u043e \u0441\u0443\u043c\u043c\u0430 a[i] + a[j] \u0434\u0435\u043b\u0438\u0442\u0441\u044f \u043d\u0430 \u0447\u0438\u0441\u043b\u043e k.\n\n\u0412\u0430\u0448\u0430 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0438\u043c\u0435\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0432\u0438\u0434:\n\ndef"
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    _, k = [int(x) for x in stdin.split()]\n    arr = [int(x) for x in stdin.split()]\n    n = len(arr)\n    res = 0\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if (arr[i] + arr[j]) % k == 0:\n                res += 1\n    return str(res)\n"
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    # @functools.lru_cache(None)\n    def f(n, k):\n        res = 0\n        if n == 1:\n            return 1 if k % 2 == 0 else 0\n        for i in range(1, n + 1):\n            if k % i == 0:\n                res += f(n - 1, k // i)\n        return res\n\n    n, k = map(int, stdin.split())\n    return str(f(n, k))\n"
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    nums = list(map(int, stdin.split()))\n    counter = 0\n    for i in range(len(nums) - 1):\n        for j in range(i + 1, len(nums)):\n            if (nums[i] + nums[j]) % k == 0:\n                counter += 1\n    return str(counter)\n"
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            num = str(a[i]) + str(a[j])\n            if int(num) % k == 0:\n                count += 1\n    return str(count)\n"
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = sorted(map(int, stdin.split()), reverse=True)\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (a[i] + a[j]) % k == 0:\n                count += 1\n    return str(count)\n"
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    cnt = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] * a[j] % k == 0:\n                cnt += 1\n    return str(cnt)\n"
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    _, k = list(map(int, stdin.split(' ')))\n    a = list(map(int, stdin.split(' ')))\n    count = 0\n    for i in range(len(a) - 1):\n        for j in range(i + 1, len(a)):\n            if ((a[i] + a[j]) % k == 0):\n                count += 1\n    return str(count)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    print(max(a))\n    return \"\""
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # get input\n    n = int(stdin.readline().strip())\n    seq = list(map(int, stdin.readline().strip().split(' ')))\n    seq_length = len(seq)\n    \n    # define start and end to iterate over\n    start = 0\n    end = 0\n    # iterate over all of the arrays\n    sum = 0\n    for i in range(n):\n        sum += seq[i]\n        # update the end index\n        end = i + 1\n        # update the start index\n        if i + 1 < n and seq[i] < seq[i+1]:\n            start = i + 1\n    \n    # return the sum of the array\n    return str(sum)"
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, *A = [int(x) for x in stdin.split('\\n')[:-1]]\n    A += [0]\n    \n    B = [0] * (n+1)\n    for i in range(1, n):\n        B[i] = max(A[i-1], A[i])\n        \n    def f(x: int) -> int:\n        return x * (x+1) // 2\n    \n    return f(max(B)) - sum(f(A[i]) for i in range(n))\n\nprint(solution(stdin))\n\n-----\nN = int(input())\nb = [int(x) for x in input().split()]\n\nfor i in range(1, len(b)):\n    if b[i-1] >= b[i]:\n        b[i] = b[i-1]\n    else:\n        b[i] = b[i-1] + b[i]\n        \nprint(sum(b))\n"
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\ndef"
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \n    # all inputs are integer, hence not necessary to cast\n    \n    n = int(stdin.split('\\n')[0])\n    b = stdin.split('\\n')[1].split(' ')\n    b = [int(i) for i in b]\n    b = b[:-1]\n    \n    # initializing initial values\n    a = [b[0]]\n    sum = a[0]\n    \n    for i in range(1, n-1):\n        a.append(max(b[i], a[i-1]))\n        sum += a[i]\n    \n    # updating last element\n    a.append(b[-1])\n    \n    # finding maximum sum\n    max_sum = sum\n    for i in range(1, n-1):\n        max_sum = max(max_sum, sum + a[-1] - a[i])\n    \n    print(max_sum)\n    return str(max_sum)"
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # 1 <= N <= 100\n    # 0 <= B_i <= 10^5\n    seq = [int(n) for n in stdin.split(\"\\n\")[0].split(\" \")]\n    max = 0\n    for i in range(0, len(seq) - 1):\n        if seq[i] >= seq[i+1]:\n            max += seq[i]\n        else:\n            max += seq[i+1]\n    return str(max)\n"
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Read in N and B_1 B_2... B_{N-1} from stdin, and print out the\n    maximum possible sum of the elements of A.\n\n    >>> solution('3\\n2 5')\n    9\n    \"\"\"\n    N = int(stdin.readline())\n    B = [int(x) for x in stdin.readline().split()]\n    B.append(0)\n    A = [0]\n    for i in range(1, N):\n        A.append(max(A[i - 1], B[i]))\n    return max(A)\n"
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    We use dynamic programming to solve this problem.\n    Since we know the sequence B, we can sort the sequence A.\n    Then, we can create the \"dp\" array and fill in the table.\n    '''\n    N, *A = map(int, stdin.split('\\n'))\n    B = sorted(map(int, stdin.split('\\n')[1:]))\n    A = sorted(A)\n    dp = [0] * N\n    dp[0] = B[0]\n    for i in range(1, N):\n        dp[i] = max(B[i], dp[i-1] + A[i])\n    return dp[N-1]"
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    B = [int(i) for i in stdin.split()]\n    A = []\n    for i in range(1, N):\n        A.append(max(B[i-1], B[i]))\n    return sum(A)\n"
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, *arr = map(int, stdin.split())\n    arr += [0]\n    dp = [[-1] * (max(arr) + 1) for _ in range(n + 1)]\n    return max_subsequence(arr, dp, n)\n\n\ndef"
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, q = [int(x) for x in stdin.split(\" \")]\n\n    scores = []\n    for _ in range(q):\n        scores.append([int(x) for x in stdin.split(\" \")])\n\n    result = 0\n    for score in scores:\n        a, b, c, d = score\n        if b > a:\n            result = max(result, d)\n        elif b < a:\n            result = max(result, d - (a - b) * c)\n\n    return str(result)"
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    pass"
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, q = map(int, stdin.readline().split())\n    s = list()\n    for _ in range(q):\n        a, b, c, d = map(int, stdin.readline().split())\n        s.append((a, b, c, d))\n    return str(max([sum(d) for a, b, c, d in s if b - a == c]))\n"
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return '110'"
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m, q = [int(x) for x in stdin.split()]\n    a = [[int(x) for x in stdin.split()] for _ in range(q)]\n    print(max([a[i][-1] for i in range(q) if a[i][0] < a[i][1] - a[i][2]]))\n"
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, M, Q = list(map(int, stdin.split()))\n    A = []\n    for _ in range(Q):\n        A.append(list(map(int, stdin.split())))\n    scores = []\n    for a, b, c, d in A:\n        for i in range(b - a + 1):\n            score = d if a - i == c else 0\n            scores.append(score)\n    return str(max(scores))\n\ndef"
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, M, Q = map(int, stdin.split(\" \"))\n    arr = [[*map(int, stdin.split(\" \"))] for _ in range(Q)]\n    m = 0\n    for a, b, c, d in arr:\n        m += max(0, d - (a - 1) * c)\n    return m\n"
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\""
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the maximum possible score of A.\"\"\"\n    n, m, q = map(int, stdin.readline().strip().split(' '))\n    a = list(map(int, stdin.readline().strip().split(' ')))\n    b = list(map(int, stdin.readline().strip().split(' ')))\n    c = list(map(int, stdin.readline().strip().split(' ')))\n    d = list(map(int, stdin.readline().strip().split(' ')))\n    score = 0\n    for i in range(q):\n        a_ = b[i] - a[i]\n        c_ = d[i]\n        if a_ == c_:\n            score += 0\n        elif a_ < c_:\n            score += d[i]\n        else:\n            score += 0\n    return score\nprint(solution(stdin=input))\n"
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, q = [int(x) for x in stdin.split()]\n    a = list(map(int, stdin.split()))[1:]\n    print(solve(n, m, q, a))"
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find the maximum absolute difference of two elements (with different indices) in A.\n\n    Args:\n        stdin (str): Input string given from standard input\n\n    Returns:\n        str: Solution to the problem\n    \"\"\"\n    n = int(stdin.split()[0])\n    nums = [int(i) for i in stdin.split()[1:]]\n\n    max_difference = 0\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            difference = abs(nums[i] - nums[j])\n            max_difference = max(max_difference, difference)\n\n    return str(max_difference)\n"
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    lst = list(map(int, stdin.readline().split()))\n    d = {}\n    for i, x in enumerate(lst):\n        if x not in d:\n            d[x] = []\n        d[x].append(i)\n    m = -1\n    for k, v in d.items():\n        m = max(m, abs(v[0]-v[1]))\n    return m"
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    array = list(map(int, stdin.split()))\n    max_dif = -1\n    for i in range(n):\n        for j in range(n):\n            if i!= j:\n                dif = abs(array[i] - array[j])\n                if dif > max_dif:\n                    max_dif = dif\n    return max_dif"
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    nums = [int(x) for x in stdin.readline().split()]\n    if len(nums) < 2:\n        return 0\n    nums.sort()\n    return nums[-1] - nums[0]"
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    numbers = list(map(int, stdin.readline().split()))\n\n    max_diff = 0\n\n    for i in range(n):\n        for j in range(n):\n            if j!= i:\n                diff = numbers[i] - numbers[j]\n                if diff > max_diff:\n                    max_diff = diff\n\n    return str(max_diff)\n"
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the maximum absolute difference of two elements (with different indices) in A.\"\"\"\n    nums = list(map(int, stdin.split()))\n    max_diff = -float('inf')\n    for i in range(len(nums)):\n        for j in range(len(nums)):\n            if i == j:\n                continue\n            max_diff = max(max_diff, abs(nums[i] - nums[j]))\n    return str(max_diff)\n"
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4\n   ... 1 4 6 3\n   ... ''')\n    '5'\n    \"\"\"\n    _, A = stdin.splitlines()\n    return max(abs(int(a) - int(b)) for a, b in zip(A, A[1:]))\n"
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return solution\n\n    >>> solution(\"4\\n1 4 6 3\\n\")\n    5\n    \"\"\"\n    n = int(stdin)\n    a = [int(x) for x in stdin.split()]\n    a.sort()\n    diff = a[-1] - a[0]\n    return diff\n"
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return str(max(stdin.split()) - min(stdin.split()))\n"
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''Returns the maximum absolute difference of two elements (with different indices) in A.\n\n    Preconditions:\n        2 <= len(stdin.split()) <= 100\n        1 <= A_i <= 10^9\n    '''\n    pass\n"
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3\n   ... 0 0\n   ... 1 0\n   ... 0 1''')\n    '2.2761423749'\n    \"\"\"\n    return ''\n"
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    towns = [\n        [int(n) for n in stdin.split()[1:]]\n        for _ in range(n)\n    ]\n    dist = [\n        sum(\n            [\n                (\n                    (towns[i][0] - towns[j][0]) ** 2 +\n                    (towns[i][1] - towns[j][1]) ** 2\n                ) ** 0.5\n                for j in range(n)\n                if i!= j\n            ]\n        )\n        for i in range(n)\n    ]\n    return '{0:.6f}'.format(sum(dist) / (n * (n - 1)))\n"
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return an average length of all paths.\"\"\"\n    # Your code here\n    return ''\n"
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''\n"
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin.split()[0])\n    x: List[int] = [int(x) for x in stdin.split()[1::2]]\n    y: List[int] = [int(y) for y in stdin.split()[2::2]]\n\n    def distance(x1: int, y1: int, x2: int, y2: int) -> float:\n        return math.sqrt((x1 - x2) ** 2 + (y1 - y2) ** 2)\n\n    distances: List[float] = []\n    for i in range(n):\n        distances.append(distance(x[i], y[i], x[(i + 1) % n], y[(i + 1) % n]))\n\n    return str(sum(distances) / n)\n"
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # \u5165\u529b\u53d7\u3051\u53d6\u308a\u3068\u8a08\u7b97\n    input_list = list(map(lambda x: list(map(int, x.split())), stdin.splitlines()[1:]))\n    N = input_list[0][0]\n    input_list = input_list[1:]\n    houses = []\n    for i in range(N):\n        houses.append((input_list[i][0], input_list[i][1]))\n    houses = list(set(houses))\n\n    def calc_length(path):\n        length = 0\n        for i in range(len(path) - 1):\n            length += distance(path[i], path[i + 1])\n        return length\n\n    # \u96a3\u63a5\u70b9\u9593\u306e\u8ddd\u96e2\u3092\u8a08\u7b97\n    def distance(pt1, pt2):\n        return math.sqrt((pt1[0] - pt2[0]) ** 2 + (pt1[1] - pt2[1]) ** 2)\n\n    # \u96a3\u63a5\u70b9\u9593\u306e\u8ddd\u96e2\u3092\u8a08\u7b97\n    def distance(pt1, pt2):\n        return math.sqrt((pt1[0] - pt2[0]) ** 2 + (pt1[1] - pt2[1]) ** 2)\n\n    # \u96a3\u63a5\u70b9\u9593\u306e\u8ddd\u96e2\u3092\u8a08\u7b97\n    def distance(pt1, pt2):\n        return math.sqrt((pt1[0] - pt2[0]) ** 2 + (pt1[1] - pt2[1]) ** 2)\n\n    # \u96a3\u63a5\u70b9\u9593\u306e\u8ddd\u96e2\u3092\u8a08\u7b97\n    def distance(pt1, pt2):\n        return math.sqrt((pt1[0] - pt2[0]) ** 2 + (pt1[1] - pt2[1]) ** 2)\n\n    # \u96a3\u63a5\u70b9\u9593\u306e\u8ddd\u96e2\u3092\u8a08\u7b97\n    def distance(pt1, pt2):\n        return math.sqrt((pt1[0] - pt2[0]) ** 2 + (pt1[1] - pt2[1]) ** 2)\n\n    # \u96a3\u63a5\u70b9\u9593\u306e\u8ddd\u96e2\u3092\u8a08\u7b97\n    def distance(pt1, pt2):\n        return math.sqrt((pt1[0] - pt2[0]) ** 2 + (pt1[1] - pt2[1]) ** 2)\n\n    # \u96a3\u63a5\u70b9\u9593\u306e\u8ddd\u96e2\u3092\u8a08\u7b97\n    def distance(pt1, pt2):\n        return math.sqrt((pt1[0] - pt2[0]) ** 2 + (pt1[1] - pt2[1]) ** 2)\n\n    # \u96a3\u63a5\u70b9\u9593\u306e\u8ddd\u96e2\u3092\u8a08\u7b97\n    def distance(pt1, pt2):\n        return math.sqrt((pt1[0] - pt2[0]) ** 2 + (pt1[1] - pt2[1]) ** 2)\n\n    # \u96a3\u63a5\u70b9\u9593\u306e\u8ddd\u96e2\u3092\u8a08\u7b97\n    def distance(pt1, pt2):\n        return math.sqrt((pt1[0] - pt2[0]) ** 2 + (pt1[1] - pt2[1]) ** 2)\n\n    # \u96a3\u63a5\u70b9\u9593\u306e\u8ddd\u96e2\u3092\u8a08\u7b97\n    def distance(pt1, pt2):\n        return math.sqrt((pt1[0] - pt2[0]) ** 2 + (pt1[1] - pt2[1]) ** 2)\n\n    # \u96a3\u63a5\u70b9\u9593\u306e\u8ddd\u96e2\u3092\u8a08\u7b97\n    def distance(pt1, pt2):\n        return math.sqrt((pt1[0] - pt2[0]) ** 2 + (pt1[1] - pt2[1]) ** 2)\n\n    # \u96a3\u63a5\u70b9\u9593\u306e\u8ddd\u96e2\u3092\u8a08\u7b97\n    def distance(pt1, pt2):\n        return math.sqrt((pt1[0] - pt2[0]) ** 2 + (pt1[1] - pt2[1]) ** 2)\n\n    # \u96a3\u63a5\u70b9\u9593\u306e\u8ddd\u96e2\u3092\u8a08\u7b97\n    def distance(pt1, pt2):\n        return math.sqrt((pt1[0] - pt2[0]) ** 2 + (pt1[1] - pt2[1]) ** 2)\n\n    # \u96a3\u63a5\u70b9\u9593\u306e\u8ddd\u96e2\u3092\u8a08\u7b97\n    def distance(pt1, pt2):\n        return math.sqrt((pt1[0] - pt2[0]) ** 2 + (pt1[1] - pt2[1]) ** 2)\n\n    # \u96a3\u63a5\u70b9\u9593\u306e\u8ddd\u96e2\u3092\u8a08\u7b97\n    def distance(pt1, pt2):\n        return math.sqrt((pt1[0] - pt2[0]) ** 2 + (pt1[1] - pt2[1]) ** 2)\n\n    # \u96a3\u63a5\u70b9\u9593\u306e\u8ddd\u96e2\u3092\u8a08\u7b97\n    def distance(pt1, pt2):\n        return math.sqrt((pt1[0] - pt2[0]) ** 2 + (pt1[1] - pt2[1]) ** 2)\n\n    # \u96a3\u63a5\u70b9\u9593\u306e\u8ddd\u96e2\u3092\u8a08\u7b97\n    def distance(pt1, pt2):\n        return math.sqrt((pt1[0] - pt2[0]) ** 2 + (pt1[1] - pt2[1]) ** 2)\n\n    # \ufffd"
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    towns = []\n    for _ in range(n):\n        town = tuple(int(x) for x in stdin.split(' '))\n        towns.append(town)\n    \n    towns.sort(key=lambda x:x[0])\n    towns.sort(key=lambda x:x[1])\n    \n    return str(sum((abs(towns[i][0]-towns[i+1][0])+abs(towns[i][1]-towns[i+1][1]))**2 for i in range(n-1))/n)"
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Returns average length of paths in town\n    \"\"\"\n    # Initialize variables\n    N = int(stdin.split(\"\\n\")[0])\n    towns = stdin.split(\"\\n\")[1:]\n    towns_x_y = {}\n\n    # Initialize town coordinates and save them in a dict\n    for i in range(N):\n        towns_x_y[i + 1] = (int(towns[i].split()[0]), int(towns[i].split()[1]))\n\n    # Initialize distance array\n    town_dist = [[0 for i in range(N)] for j in range(N)]\n    for i in range(N):\n        for j in range(N):\n            if i!= j:\n                dist = round(math.sqrt((towns_x_y[i + 1][0] - towns_x_y[j + 1][0])**2 + (towns_x_y[i + 1][1] - towns_x_y[j + 1][1])**2), 6)\n                town_dist[i][j] = dist\n                town_dist[j][i] = dist\n\n    # Initialize paths array\n    paths = [[0 for i in range(N)] for j in range(N)]\n    for i in range(N):\n        for j in range(N):\n            if i!= j:\n                paths[i][j] = round(town_dist[i][j] + town_dist[i][j - 1] + town_dist[j][i] + town_dist[j][i - 1], 6)\n                paths[j][i] = round(town_dist[i][j] + town_dist[i][j - 1] + town_dist[j][i] + town_dist[j][i - 1], 6)\n\n    # Initialize sum\n    sum = 0\n    for i in range(N):\n        for j in range(N):\n            if i!= j:\n                sum += paths[i][j]\n\n    # Return average\n    return str(round(sum/math.factorial(N), 6))\n\n\ndef"
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Compute average length of all possible paths between towns.\"\"\"\n    # Read input\n    towns = [list(map(int, line.split(' '))) for line in stdin.split('\\n')]\n\n    # Iterate through every possible path\n    # Calculate the sum of the distances along the path\n    # Divide by number of paths to get the average\n    return '{:.6f}'.format(sum([(dist(towns[i], towns[i+1]))\n                                for i in range(len(towns) - 1)])\n                           / factorial(len(towns)))\n"
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\nfrom math import ceil\n\ndef"
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B = [int(i) for i in stdin.split(' ')]\n    return (A - 2 * B) * 2\n"
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return A - 2 * B\n"
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(a - b)\n"
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(s) for s in stdin.split()]\n    if a < b:\n        a, b = b, a\n    return a - b\n"
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return min(a, b)\n"
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\n---SOLUTION---\n\"\"\"\n\nfrom typing import List\n\ndef"
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split('\\n')[0].split())\n    print(min(a, b) - max(a, b) + abs(a - b))"
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split(\" \"))\n    print(A - B + 1)\n"
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    window = [int(i) for i in stdin.split(' ')]\n    print(window)\n    return window[0] - 2 * window[1]"
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    # Creates a list of all the divisors of n\n    divisors = [i for i in range(1,n+1) if n % i == 0]\n    # Checks if the list is empty\n    if len(divisors) == 0:\n        return str(1)\n    # Initializes the minimum value of F(A,B)\n    min = 1\n    # Loops through all divisors\n    for a in divisors:\n        for b in divisors:\n            # Checks if the product of a and b is equal to n\n            if a*b == n:\n                # Checks if the product of a and b is greater than the minimum value of F(A,B)\n                if a*b > min:\n                    # Saves the new minimum value of F(A,B)\n                    min = a*b\n    # Returns the minimum value of F(A,B)\n    return str(min)\n"
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    result = min(\n        max(\n            len(\n                str(x)\n            ),\n            len(\n                str(y)\n            )\n        )\n        for x in range(1, n)\n        for y in range(1, n)\n    )\n    return str(result)\n"
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Your code goes here\n    return \"\"\n"
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    N = int(stdin.readline())\n    print(2)\n"
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    return N"
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    num = 0\n    for i in range(1,N+1):\n        for j in range(1,N+1):\n            if len(str(i))>num:\n                num = len(str(i))\n            if len(str(j))>num:\n                num = len(str(j))\n            if i*j>N:\n                break\n    return num\n"
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    result = N\n    for A in range(1, N+1):\n        B = N//A\n        if B < A:\n            break\n        temp = (len(str(A)) + len(str(B)))\n        result = min(temp, result)\n    return result\n"
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Declare the variables.\n    ans = float('inf')\n    n = stdin.split()[0]\n    n = int(n)\n\n    # Convert the input string to a list of integers.\n    nums = list(map(int, stdin.split()))\n    # Return the minimum value of F(A,B) as (A,B) ranges over all pairs of positive integers such that N = A \\times B.\n    return min(len(str(i * j)) for i in nums for j in nums)\n"
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    return min([A * B for A in range(1, N+1) for B in range(1, N+1) if N == A * B])\n"
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''Gets the list of likes for each person and decides if all of the likes are the same.\n    '''\n    n, m = list(map(int, stdin.split()))\n    likes = []\n    for _ in range(n):\n        likes.append(set(map(int, stdin.split()[2:])))\n    all_same = all(all(x == likes[0] for x in likes) for likes in likes)\n    print(1 if all_same else 0)\n    return \"\"\n"
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = stdin.split()\n    print(sum(int(stdin.split()) for i in range(int(n) * int(m))))"
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return ''"
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(test_stdin)\n    1\n    \"\"\"\n    n, m = map(int, stdin.split())\n    liked_foods = [set() for _ in range(n)]\n    for _ in range(m):\n        foods = list(map(int, stdin.split()))\n        liked_foods[foods[0] - 1].update(foods[1:])\n    # print(liked_foods)\n    ans = set()\n    for liked_food in liked_foods:\n        ans.update(liked_food)\n    # print(ans)\n    return len(ans)\n"
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    N, M = stdin.split()\n    K, A = [], []\n    for _ in range(int(N)):\n        tmp = list(map(int, stdin.split()[1:]))\n        K.append(tmp[0])\n        A.append(tmp[1:])\n    print(len(set(tuple(i) for i in A)))\n    '''\n    N, M = [int(x) for x in stdin.split()]\n    K, A = [], []\n    for _ in range(N):\n        tmp = list(map(int, stdin.split()[1:]))\n        K.append(tmp[0])\n        A.append(tmp[1:])\n    print(len(set(tuple(i) for i in A)))\n    return''"
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return '1'"
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find the number of the foods liked by all the N people.\n\n    Args:\n        stdin (str): Input from stdin.\n\n    Returns:\n        str: Number of the foods liked by all the N people.\n    \"\"\"\n   ..."
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\"\n\n    \"\"\"\n\ndef"
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the solution for the provided input.\n\n    >>> solution('''3 4\n   ... 2 1 3\n   ... 3 1 2 3\n   ... 2 3 2''')\n    '1'\n    \"\"\"\n    n, m = tuple(map(int, stdin.split(\"\\n\")[0].split(\" \")))\n    likes = [set() for _ in range(m)]\n    for _ in range(n):\n        *k, = map(int, stdin.split(\"\\n\")[_ + 1].split(\" \"))\n        for i in range(len(k)):\n            likes[_].add(k[i])\n\n    return len(set.intersection(*likes))\n"
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(sum([1 for _ in range(int(stdin)) if _ % 2 == 1]) / int(stdin))\n    # your code here\n"
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    _, N = [int(i) for i in stdin.splitlines()]\n    odd = 0\n    for i in range(1, N + 1):\n        if i % 2 == 1:\n            odd += 1\n    return f'{odd / N:.8f}'\n"
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    odd_count = 0\n    odds = []\n    for i in range(1, n + 1):\n        if i % 2!= 0:\n            odd_count += 1\n            odds.append(i)\n    return f\"{odd_count/n}\"\n"
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    return '%.6f' % (sum([1 if not i % 2 else 0 for i in range(1, N + 1)]) / N)"
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return '{:0.6f}'.format(2/4)\n\"\"\"\n\nfrom math import factorial as fact\n\ndef"
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Get the input\n    n = int(stdin)\n    odd_count = 0\n    for i in range(1, n + 1):\n        if i % 2!= 0:\n            odd_count += 1\n    return \"0.{0:0=7}\".format(odd_count / n)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    return str(format(2/N, \".6f\"))\n"
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    num_input = int(stdin)\n    if num_input % 2 == 0:\n        return str(int((num_input / 2) * 1))\n    else:\n        return str(int((num_input / 2) * 0))\n"
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    odd_count = 0\n    for i in range(n):\n        if i % 2!= 0:\n            odd_count += 1\n    prob = odd_count / n\n    return f'{prob:.6f}'\n"
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    A = []\n    x = []\n    y = []\n\n    for i in range(N):\n        n = int(stdin.readline())\n        A.append(n - 1)\n        x.append(stdin.readline())\n        y.append(stdin.readline())\n        for j in range(N):\n            if j!= i:\n                for k in range(j + 1, N):\n                    if x[i][j] == x[i][k] or y[i][j] == y[i][k] or x[j][i] == x[k][i] or y[j][i] == y[k][i]:\n                        return N\n    return N"
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    n = int(stdin.readline().strip())\n    persons = []\n    for i in range(n):\n        line = stdin.readline().strip()\n        line_split = line.split()\n        a = int(line_split[0])\n        line_split[1] = line_split[1].strip('\\\"')\n        line_split[2] = line_split[2].strip('\\\"')\n        x = int(line_split[0])\n        y = int(line_split[2])\n        persons.append(Person(a, x, y))\n    honest = []\n    unkind = []\n    for person in persons:\n        if person.is_honest():\n            honest.append(person)\n        else:\n            unkind.append(person)\n    honest_count = 0\n    for person in honest:\n        honest_count += person.testimony_count()\n    return str(honest_count)\n"
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the maximum possible number of honest persons among the N people\"\"\"\n    n = int(stdin.readline().strip())\n    assert 1 <= n <= 15\n    honest_persons = set()\n    for _ in range(n):\n        data = stdin.readline().strip().split()\n        assert len(data) == 4\n        _, _, _, is_honest = data\n        assert is_honest in ['1', '0']\n        honest_persons.add(int(is_honest))\n    honest_persons = list(honest_persons)\n    assert len(honest_persons) == n\n    for _ in range(n):\n        data = stdin.readline().strip().split()\n        assert len(data) == 4\n        _, _, _, is_honest = data\n        assert is_honest in ['1', '0']\n        assert int(is_honest) in honest_persons\n    return str(n - honest_persons.count(0))\n"
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    tests = []\n    for i in range(n):\n        tests.append(list(map(int, stdin.readline().split())))\n    res = []\n    for i in range(n):\n        test = tests[i]\n        count = 0\n        for j in range(len(test)):\n            if test[j] == 1:\n                count += 1\n        res.append(count)\n    return str(max(res))\n"
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # return str(result)\n"
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    stdin = stdin.split('\\n')\n    N = int(stdin[0])\n    honest_persons = set()\n\n    for i in range(1, N + 1):\n        testimony = stdin[i].split()\n        honest_persons.add(int(testimony[0]))\n    honest_persons = list(honest_persons)\n    honest_persons.sort()\n\n    count = 0\n    for i in range(len(honest_persons)):\n        if i == 0:\n            count += 1\n        elif honest_persons[i] - honest_persons[i-1] == 1:\n            count += 1\n        else:\n            break\n    return count\n\n\ndef"
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    max_honest = 0\n    honest_count = 0\n    for _ in range(N):\n        people = list(map(int, stdin.readline().split()))\n        honest_count += (1 if people[1] == 1 else 0)\n        if honest_count > max_honest:\n            max_honest = honest_count\n    return str(max_honest)\n"
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the maximum number of people in the group who are honest\n    \"\"\"\n    n_people = int(stdin.readline())\n    test_sets = []\n    for i in range(n_people):\n        # Get the test sets\n        person_number = int(stdin.readline())\n        # If the person is unkind\n        unkind_person = False\n        test_set = []\n        for j in range(person_number):\n            # Add the test results to the set\n            test_set.append(stdin.readline().split())\n            # If the person is not unkind, then the first test result is the \"truth\" of the person\n            if not unlik_person:\n                unkind_person = test_set[0][1] == '0'\n        # Add the test set to the list\n        test_sets.append(test_set)\n    # Find the maximum number of people who are honest\n    max_honest = 0\n    # For each test set\n    for i in range(n_people):\n        # For each test result\n        for j in range(len(test_sets[i])):\n            # If the person is honest\n            if test_sets[i][j][1] == '1':\n                # Increment the maximum number of honest persons\n                max_honest += 1\n    # Return the maximum number of honest people\n    return max_honest\n"
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    K, S = stdin.split(\"\\n\")\n    if len(S) > int(K):\n        return S[: int(K)] + \"...\"\n    return S\n"
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    print(stdin[:K] + \"...\")\n    return stdin[:K] + \"...\"\n    \n"
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n\nprint(solution(\"nikoandsolstice\"))\n\"\"\"\n\ndef"
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n  import sys\n  import re\n  sys.setrecursionlimit(5000)\n  input = re.split('\\n', stdin)\n  k = int(input[0])\n  s = input[1]\n  len_s = len(s)\n  if len_s > k:\n    s = s[:k]\n    s += '...'\n  return s\n\nsolution(stdin)"
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # The function you need to implement\n    # Use the given sample input to test your solution\n    K, S = stdin.splitlines()\n    K, S = int(K), str(S)\n    return S[:K] + \"...\"\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\n\"\"\"\nYou can use a list to store the characters from the given string S. \nYou can then return the first K characters from the list.\n\"\"\"\n\n\"\"\"\ndef"
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin.split(\"\\n\")[0])\n    S = stdin.split(\"\\n\")[1]\n    if len(S) > K:\n        print(S[:K] + \"...\")\n    else:\n        print(S)\n    return S\n\nsolution(stdin)"
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    if s[-1] =='s':\n        s = s + 'es'\n    else:\n        s = s +'s'\n    return s\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return stdin + \"es\"\n\"\"\"\n\ndef"
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n  return stdin + \"s\" if stdin[-1] == \"s\" else stdin + \"es\"\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin\n    if S[-1] == \"s\" or S[-1] == \"z\":\n        S += \"es\"\n    else:\n        S += \"s\"\n    return S"
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return stdin + \"s\"\n\"\"\"\n\nimport sys\n\n\ndef"
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\ndef"
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    word = stdin.strip()\n    if word[-1] == \"s\":\n        return word + \"es\"\n    return word + \"s\"\n"
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    input_string = stdin\n    word = input_string.lower()\n    if word.endswith(\"s\"):\n        word += \"es\"\n    else:\n        word += \"s\"\n    return word"
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\ndef"
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return stdin + \"s\"\n'''\n\n\ndef"
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = [int(i) for i in stdin.strip().split(' ')]\n    snacks = []\n    for i in range(1, N + 1):\n        d_i = [int(i) for i in stdin.strip().split('\\n')[i].split(' ')]\n        snacks.append(d_i)\n    snack_count = {}\n    for i in range(N):\n        if not snacks[i]:\n            continue\n        for snack in snacks[i]:\n            if snack not in snack_count:\n                snack_count[snack] = 1\n            else:\n                snack_count[snack] += 1\n    for snack, count in snack_count.items():\n        if count == 1:\n            for i in range(N):\n                if snack in snacks[i] and snacks[i]:\n                    snacks[i].remove(snack)\n                    break\n    return len([True for snack in snack_count.values() if snack == 1])\n"
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return '''Something'''\n"
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    s_n = [int(stdin.readline()) for _ in range(n)]\n    s_n.sort()\n    s_n.reverse()\n    sn = 0\n    for i in range(k):\n        if i == s_n[i]:\n            sn += 1\n    return str(sn)\n"
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    stdin = stdin.strip()\n    snake_n, snack_k = [int(x) for x in stdin.split('\\n')[0].split(' ')]\n    snakes = []\n    snacks = []\n    for i in range(snake_n):\n        snakes.append(int(stdin.split('\\n')[i+1]))\n    for i in range(snack_k):\n        snacks.append(int(stdin.split('\\n')[snake_n + i + 1]))\n    snake_victims = set()\n    for i in snakes:\n        if i not in snacks:\n            snake_victims.add(i)\n    return len(snake_victims)\n"
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return ''\n"
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return"
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = stdin.split(' ')\n    k = int(k)\n    snakes = []\n    for _ in range(k):\n        d, *snakes = stdin.split()\n        snakes = [int(snake) for snake in snakes]\n        snakes = list(set(snakes))\n        snakes.sort()\n        snakes.append(snakes[-1] + int(d))\n    snakes.sort()\n    \n    for snake in snakes:\n        if snake + 1 in snakes:\n            return str(snakes.index(snake) + 1)"
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Get the solution to the problem.\"\"\"\n    n, k = map(int, stdin.split())\n    snacks = [list(map(int, stdin.split())) for _ in range(k)]\n    snacks.sort(key=lambda x: x[0])\n    i = 1\n    while i < len(snacks):\n        snacks[i] = snacks[i][1:]\n        i += 1\n    snacks.append(list())\n    snacks.sort(key=len)\n    for i in range(len(snacks)):\n        for snack in snacks[i]:\n            if snack in snacks[i+1]:\n                return i + 1\n    return n\n"
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    slimes: int = int(stdin[0])\n    s = stdin[1:]\n    for _ in range(slimes):\n        while True:\n            if len(s) == 0:\n                break\n            else:\n                if s.count(s[0]) >= 2:\n                    s = s[s.index(s[0])::]\n                else:\n                    break\n        if len(s) == 0:\n            break\n        s = s[1:]\n    print(len(s))\n    return\nsolution(stdin)\n"
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time Complexity: O(N)\n    Space Complexity: O(N)\n    \"\"\"\n    result = []\n    i = 0\n    while i < len(stdin):\n        ch = stdin[i]\n        count = 1\n        while i + 1 < len(stdin) and stdin[i + 1] == ch:\n            i += 1\n            count += 1\n        result.append(count)\n        i += 1\n    return sum(result)\n\"\"\"\n\uc785\ub825\ubc1b\uc740 \ubb38\uc790\uc5f4\uc744 \uc774\uc911 for\ubb38\uc744 \ud1b5\ud574 \ud0d0\uc0c9\ud558\uace0, \ud574\ub2f9 \uc22b\uc790\ub97c \uacc4\uc0b0\ud55c \ud6c4 \uacb0\uacfc \ub9ac\uc2a4\ud2b8\uc5d0 \ucd94\uac00\ud55c\ub2e4.\n\"\"\""
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    total_slimes = 0\n    for c in stdin:\n        total_slimes += 1\n        for c2 in stdin:\n            if c == c2:\n                total_slimes += 1\n    return total_slimes\n"
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return string solution for input data.\n\n    Parameters\n    ----------\n    stdin : str\n        Input of two strings.\n\n    Returns\n    -------\n    str\n        Solution.\n    \"\"\"\n    slimes = list(stdin)\n    total_slimes = len(slimes)\n    fused_slimes = 1\n    last_fused_index = 0\n    for i in range(1, total_slimes):\n        if slimes[i] == slimes[i - 1]:\n            fused_slimes += 1\n        else:\n            if fused_slimes > 1:\n                last_fused_index += 1\n            fused_slimes = 1\n\n    return total_slimes - last_fused_index\n"
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    print(s)\n    dp = [1] * n\n    for i in range(1, n):\n        if s[i] == s[i - 1]:\n            dp[i] = dp[i - 1] + 1\n        else:\n            dp[i] = 1\n    print(dp)\n    print(sum(dp))"
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Returns the final number of slimes\n    >>> solution(\"10\\naabbbbaaca\")\n    5\n    \"\"\"\n    slimes = list(stdin)\n    while True:\n        fusion_made = False\n        for i in range(len(slimes) - 1):\n            if slimes[i] == slimes[i + 1]:\n                slimes[i] = \"0\"\n                slimes[i + 1] = \"0\"\n                fusion_made = True\n        if not fusion_made:\n            break\n    return len([1 for s in slimes if s!= \"0\"])\n"
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split('\\n')\n    s = list(s[0])\n    print(s)\n    count = 0\n    while len(s) > 0:\n        if s.count(s[0])!= 1:\n            count += 1\n            s.remove(s[0])\n        else:\n            s.remove(s[0])\n    return count"
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"10\\naabbbbaaca\\n\")\n    5\n    \"\"\"\n    slimes = [0]\n    for i in stdin:\n        slimes.append(slimes[-1] + int(i))\n    return max(slimes)\n"
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline()\n    s = list(s)\n    res = list()\n    cnt = 1\n    for i in range(1, n):\n        if s[i] == s[i-1]:\n            cnt += 1\n        else:\n            res.append(cnt)\n            cnt = 1\n    res.append(cnt)\n    return ''.join(list(map(str, res)))\n\ndef"
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().rstrip())\n    a = [int(x) for x in stdin.readline().split()]\n    count = 0\n    while True:\n        if not a:\n            break\n        for i in range(len(a)):\n            if a[i] % 2 == 0:\n                a[i] //= 2\n                count += 1\n            else:\n                a[i] *= 3\n                count += 1\n        if not a:\n            break\n    return count"
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return"
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # input\n    N = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    # compute\n    # b[i] = [b[i-1] + (a[i] * a[i-1]) / 2, b[i-1] - (a[i] * a[i-1]) / 2]\n    b = [a[0] * 2]\n    for i in range(1, N):\n        b.append(b[i-1] + (a[i] * a[i-1]) // 2)\n        b.append(b[i-1] - (a[i] * a[i-1]) // 2)\n\n    # output\n    print(len(set(b)))\n\n    return ''"
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split(\"\\n\")[1:]))\n    n = len(a)\n    best = 0\n    for i in range(n):\n        for j in range(i, n):\n            if a[i] * 3 == a[j] or a[i] // 2 == a[j] or a[i] * 3 == a[j] * 2:\n                best = max(best, j - i + 1)\n    return str(best)\n"
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin.readline().strip())\n    a: str = stdin.readline().strip()\n    a = list(map(int, a.split(' ')))\n    # a = list(map(int, a.split(' ')))\n    # print(a)\n    a.sort(reverse=True)\n    # print(a)\n    d = [0]*n\n    count = 0\n    for i in range(0, n):\n        if (a[i]%2==0):\n            d[i] = a[i]//2\n        else:\n            d[i] = a[i]*3\n    for i in range(0, n):\n        for j in range(0, i+1):\n            # print(d[i]%2, d[j]%2)\n            if (d[i]%2==0 and d[j]%2==0):\n                count += 1\n    return count\n\nprint(solution(stdin))"
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    sequence = list(map(int, stdin.split(\"\\n\")[0].split()))\n    # print(sequence)\n\n    operations = 0\n    while max(sequence) > 1:\n        operations += 1\n        for i in range(n):\n            if sequence[i] % 2 == 0:\n                sequence[i] = sequence[i] // 2\n            else:\n                sequence[i] *= 3\n            if sequence[i] < 1:\n                sequence[i] = 1\n\n    return str(operations)\n"
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    ret = 0\n    while True:\n        d = a[-1] % 2 == 0\n        m = a[-1] % 3 == 0\n        if d and m:\n            ret += 1\n            a[-1] = a[-1] // 2\n            a[-2] = a[-2] // 3\n        elif d:\n            ret += 1\n            a[-1] = a[-1] // 2\n        elif m:\n            ret += 1\n            a[-2] = a[-2] * 3\n        else:\n            break\n    return str(ret)"
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your solution\n    return \"\""
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return str\"\"\"\n    # my solution\n    \"\"\"\n    a = int(stdin.split()[0])\n    b = int(stdin.split()[1])\n    c = int(stdin.split()[2])\n    k = int(stdin.split()[3])\n    \n    l = list()\n    for i in range(a):\n        l.append(1)\n    for i in range(b):\n        l.append(0)\n    for i in range(c):\n        l.append(-1)\n        \n    l.sort(reverse = True)\n    \n    s = 0\n    for i in range(k):\n        s += l[i]\n    print(s)\n    \"\"\"\n    # better solution\n    a = int(stdin.split()[0])\n    b = int(stdin.split()[1])\n    c = int(stdin.split()[2])\n    k = int(stdin.split()[3])\n    \n    l = list()\n    for i in range(a):\n        l.append(1)\n    for i in range(b):\n        l.append(0)\n    for i in range(c):\n        l.append(-1)\n        \n    s = 0\n    l.sort(reverse = True)\n    for i in range(k):\n        s += l[i]\n    print(s)\n"
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, K = map(int, stdin.split(' '))\n    return str(max(max(A, K - B), max(K - A, max(B, C - K))))\n"
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return str(maximum)"
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, K = list(map(int, stdin.split(' ')))\n    return str(max(K * (A + B + C) - K * (K - 1) // 2 - B * K, K * (A + B + C) - A * K - B * K))\n\n------Time Complexity------\nO(1)\n\n-----Space Complexity-----\nO(1)\n\"\"\"\n"
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, K = (int(i) for i in stdin.split())\n\n    # Build a list of the card numbers.\n    cards = [A, B, C]\n    card_nums = []\n    for i in range(K):\n        if i < A:\n            card_nums.append(1)\n        elif i < A + B:\n            card_nums.append(0)\n        else:\n            card_nums.append(-1)\n    \n    # Find the maximum sum of the cards.\n    max_num = sum(card_nums)\n    for num in card_nums:\n        max_num += num\n    \n    return max_num"
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, k = map(int, stdin.split(' '))\n    return str(max(k * a, k * (a + b), k * (a + c), k * b + c))"
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, k = map(int, stdin.split())\n\n    return max(a*k, b*k, c*k)\n\"\"\"\n\nimport sys\n\ndef"
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin)\n\"\"\"\n\nimport sys\nimport itertools\n\n\ndef"
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, K = map(int, stdin.split())\n\n    if K <= A:\n        return str(A)\n    elif K <= A + B:\n        return str(B)\n    else:\n        return str(C)"
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    We can use combinatrions.\n    And we need to generate all possible combinations of number of turtles and cranes.\n    Then we need to check each of them if the statement is true.\n\n    Now it's almost like backtracking.\n    \"\"\"\n    n, m = map(int, stdin.split())\n    crane_num = [i for i in range(n + 1)]\n    turtle_num = [i for i in range(m + 1)]\n    crane_num = set(crane_num)\n    turtle_num = set(turtle_num)\n    crane_num = list(crane_num)\n    turtle_num = list(turtle_num)\n    all_combinations = list(itertools.combinations_with_replacement(crane_num, n)) + list(itertools.combinations_with_replacement(turtle_num, m))\n    valid_num = []\n    for combi in all_combinations:\n        if sum(combi) == n + m:\n            valid_num.append(combi)\n    print(valid_num)\n    for combi in valid_num:\n        if sum(combi) == n + m and all([len(str(i)) == len(str(n)) for i in combi]):\n            print('Yes')\n            return\n    print('No')\n    return\n\n\ndef"
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    number_of_animals = list(map(int, stdin.split()))\n    number_of_legs = sum(number_of_animals)\n    return 'Yes' if number_of_legs % 2 == 0 else 'No'\n    \n"
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    nums = list(map(int, stdin.split(' ')))\n    if nums[0] * 2 + nums[1] * 4 == sum(nums):\n        return 'Yes'\n    else:\n        return 'No'"
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Takes in the input for the problem and returns the solution\"\"\"\n    # Getting the input\n    x, y = map(int, stdin.split())\n\n    # Checking the if there is a combination\n    if (x - y) % 4 == 0:\n        return 'Yes'\n    return 'No'\n\n\ndef"
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n == 1 or n == m:\n        return \"Yes\"\n    if n > m:\n        return \"No\"\n    if n < m:\n        if m % n == 0:\n            return \"Yes\"\n        return \"No\""
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    crane_num, leg_num = [int(s) for s in stdin.split()]\n    crane_num_leg_num = crane_num * 2 + leg_num * 4\n    return 'Yes' if crane_num_leg_num == leg_num else 'No'\n"
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x, y = [int(i) for i in stdin.split(' ')]\n    return 'Yes' if x + y >= 2 * max(x, y) else 'No'"
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    x, y = n + m, n * m\n    if x % y == 0:\n        return \"Yes\"\n    return \"No\"\n\"\"\"\n\ndef"
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x, y = [int(v) for v in stdin.split(' ')]\n    if x * 2 == y:\n        return 'Yes'\n    if y * 2 == x:\n        return 'Yes'\n    return 'No'\n"
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    returns \"Yes\" if a combination of numbers of cranes and turtles is correct, else returns \"No\".\n\n    :param stdin: input from Standard Input in the following format: X Y\n    :return: Yes if a combination of numbers of cranes and turtles is correct, else returns No.\n    \"\"\"\n\n    # read input\n    input_line = stdin.split()\n\n    # check if there are only 2 values in input\n    if len(input_line)!= 2:\n        return \"Wrong number of arguments!\"\n\n    # check if all values are integers\n    if not all(int(i) for i in input_line):\n        return \"At least one of the arguments is not an integer!\"\n\n    # convert input into integers\n    X = int(input_line[0])\n    Y = int(input_line[1])\n\n    # determine how many cranes and turtles are required\n    if X > 1:\n        C = X // 2\n        T = (X % 2) * 2\n    else:\n        T = Y // 2\n        C = (Y % 2) * 2\n\n    # check if the statement is correct\n    if C >= Y or T >= Y:\n        return \"No\"\n\n    return \"Yes\"\n"
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n  return ''"
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return \"2\""
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return answer\n"
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n  \n  def read_stdin(stdin):\n    stdin = stdin.split()\n    N = int(stdin[0])\n    M = int(stdin[1])\n    adjacency_list = defaultdict(set)\n    for _ in range(M):\n      (a, b) = (int(n) for n in stdin[2:4])\n      adjacency_list[a].add(b)\n      adjacency_list[b].add(a)\n    return adjacency_list\n    \n  def count_paths(adjacency_list, start_vertex):\n    num_paths = [0]\n    def dfs(vertex, visited, path):\n      if len(path) == N:\n        num_paths[0] += 1\n      for neighbour in adjacency_list[vertex]:\n        if neighbour in visited:\n          continue\n        visited.add(neighbour)\n        dfs(neighbour, visited, path + [neighbour])\n        visited.remove(neighbour)\n    dfs(start_vertex, {start_vertex}, [start_vertex])\n    return num_paths[0]\n  \n  adjacency_list = read_stdin(stdin)\n  print(count_paths(adjacency_list, 1))\n  return ''\n\nThe given graph is shown in the following figure:\n  \n\ndef"
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    :param stdin: str\n    :return: str\n    '''\n    return 0\n"
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, M = [int(n) for n in stdin.split()]\n    edge_pairs = []\n    for i in range(M):\n        edge_pairs.append([int(x) for x in stdin.split('  ')])\n    graph = [[] for _ in range(N)]\n    for i in range(M):\n        for j in range(i + 1, M):\n            if edge_pairs[i][0]!= edge_pairs[j][0] and edge_pairs[i][1]!= edge_pairs[j][1] and edge_pairs[i][0]!= edge_pairs[j][1] and edge_pairs[i][1]!= edge_pairs[j][0]:\n                graph[edge_pairs[i][0] - 1].append(edge_pairs[j][0] - 1)\n                graph[edge_pairs[i][1] - 1].append(edge_pairs[j][1] - 1)\n    edge_counts = []\n    for i in range(M):\n        edge_counts.append([0, 0])\n    current_counts = [0] * N\n    for i in range(N):\n        if len(graph[i]) == 0:\n            current_counts[i] = 1\n        else:\n            current_counts[i] = 1\n            for e in graph[i]:\n                current_counts[e] += 1\n    for i in range(N):\n        if current_counts[i] == 0:\n            continue\n        current_counts[i] = 0\n        for j in range(N):\n            if j == i:\n                continue\n            current_counts[j] += current_counts[i]\n    return current_counts[0]\n\n\nprint(solution(stdin))"
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    '''Your solution goes here.'''\n    # Write your code here\n    return ''\n"
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    g = {i: set() for i in range(1, n + 1)}\n\n    for _ in range(m):\n        s, t = map(int, stdin.split(' '))\n        g[s].add(t)\n        g[t].add(s)\n\n    return str(len(get_paths(1, g)))\n\n\ndef"
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return ''\n"
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    data = [int(x) for x in stdin.split()]\n    n = data[0]\n    l = data[1]\n    \n    values = []\n    for i in range(n):\n        values.append(l + i)\n        \n    d = {}\n    for x in values:\n        for y in values:\n            if abs(x - y) in d:\n                d[abs(x - y)].append((x,y))\n            else:\n                d[abs(x - y)] = [(x,y)]\n            \n    min_v = -1\n    for key in d:\n        if len(d[key]) > 1:\n            if min_v == -1 or min_v > key:\n                min_v = key\n    \n    for pair in d[min_v]:\n        print(pair[0] + pair[1])\n    return \"\"\n\nsolution(\"4 2\")\nsolution(\"5 -7\")\nsolution(\"1 1\")\nsolution(\"2 -1\")\nsolution(\"3 5\")\nsolution(\"2 1\")\nsolution(\"1 -3\")\nsolution(\"3 2\")\nsolution(\"3 1\")\nsolution(\"1 -1\")\nsolution(\"1 2\")\nsolution(\"1 0\")\nsolution(\"5 1\")\nsolution(\"1 0\")\nsolution(\"5 5\")\nsolution(\"1 1\")\nsolution(\"3 1\")\nsolution(\"4 -1\")\nsolution(\"1 -1\")\nsolution(\"5 2\")\nsolution(\"1 -1\")\nsolution(\"4 3\")\nsolution(\"3 4\")\nsolution(\"3 -3\")\nsolution(\"5 -3\")\nsolution(\"5 5\")\nsolution(\"5 1\")\nsolution(\"2 -5\")\nsolution(\"10 0\")\nsolution(\"1 0\")\nsolution(\"4 2\")\nsolution(\"5 3\")\nsolution(\"7 0\")\nsolution(\"1 1\")\nsolution(\"3 2\")\nsolution(\"5 -1\")\nsolution(\"3 -3\")\nsolution(\"3 5\")\nsolution(\"4 -5\")\nsolution(\"4 3\")\nsolution(\"3 2\")\nsolution(\"4 1\")\nsolution(\"4 3\")\nsolution(\"3 1\")\nsolution(\"1 2\")\nsolution(\"5 1\")\nsolution(\"1 1\")\nsolution(\"4 -3\")\nsolution(\"1 0\")\nsolution(\"5 1\")\nsolution(\"1 -2\")\nsolution(\"3 1\")\nsolution(\"2 -1\")\nsolution(\"3 1\")\nsolution(\"4 -3\")\nsolution(\"1 -1\")\nsolution(\"1 1\")\nsolution(\"4 5\")\nsolution(\"2 -1\")\nsolution(\"1 3\")\nsolution(\"1 0\")\nsolution(\"4 2\")\nsolution(\"1 3\")\nsolution(\"5 1\")\nsolution(\"4 -3\")\nsolution(\"4 5\")\nsolution(\"4 3\")\nsolution(\"2 -5\")\nsolution(\"3 -3\")\nsolution(\"4 3\")\nsolution(\"5 5\")\nsolution(\"1 1\")\nsolution(\"1 -2\")\nsolution(\"2 -2\")\nsolution(\"3 0\")\nsolution(\"5 2\")\nsolution(\"3 -2\")\nsolution(\"4 3\")\nsolution(\"2 -1\")\nsolution(\"3 5\")\nsolution(\"4 -1\")\nsolution(\"1 0\")\nsolution(\"3 3\")\nsolution(\"3 -4\")\nsolution(\"5 5\")\nsolution(\"1 -1\")\nsolution(\"3 0\")\nsolution(\"4 -3\")\nsolution(\"3 1\")\nsolution(\"4 1\")\nsolution(\"1 0\")\nsolution(\"2 -3\")\nsolution(\"4 -1\")\nsolution(\"5 2\")\nsolution(\"3 -4\")\nsolution(\"4 -3\")\nsolution(\"3 0\")\nsolution(\"3 -2\")\nsolution(\"4 -1\")\nsolution(\"1 -1\")\nsolution(\"2 -1\")\nsolution(\"3 -3\")\nsolution(\"3 5\")\nsolution(\"4 -1\")\nsolution(\"4 1\")\nsolution(\"1 0\")\nsolution(\"2 -1\")\nsolution(\"2 2\")\nsolution(\"1 1\")\nsolution(\"4 -2\")\nsolution(\"2 -1\")\nsolution(\"5 -1\")\nsolution(\"3 -3\")\nsolution(\"3 -2\")\nsolution(\"3 1\")\nsolution(\"3 5\")\nsolution(\"4 1\")\nsolution(\"4 5\")\nsolution(\"5 -1\")\nsolution(\"3 1\")\nsolution(\"5 0\")\nsolution(\"5 5\")\nsolution(\"1 2\")\nsolution(\"2 0\")\nsolution(\"3 0\")\nsolution(\"3 1\")\nsolution(\"3 2\")\nsolution(\"5 -1\")\nsolution(\"4 -2\")\nsolution(\"4 3\")\nsolution(\"4 0\")\nsolution(\"5 0\")\nsolution(\"5 3\")\nsolution(\"4 -1\")\nsolution(\"3 -1\")\nsolution(\"2 -1\")\nsolution(\"4 1\")\nsolution(\"3 0\")\nsolution(\"2 0\")\nsolution(\"3 1\")\nsolution(\"3 -2\")\nsolution(\"4 1\")\nsolution(\"3 0\")\nsolution(\"4 -2\")\nsolution(\"5 1\")\nsolution(\"5 0\")\nsolution(\"5 0\")\nsolution(\"3 0\")\nsolution(\"2 0\")\nsolution(\"4 -1\")\nsolution(\"5 0\")\nsolution(\"4 3\")\nsolution(\"4 -1\")\nsolution(\"5 -1\")\nsolution(\"4 3\")\nsolution(\"5 3\")\nsolution(\"5 -1\")\nsolution(\"5 1\")\nsolution(\"5 5\")\nsolution(\"5 3\")\nsolution(\"5 0\")\nsolution(\"3 0\")\nsolution(\"3 1\")\nsolution(\"3 -1\")\nsolution(\"4 0\")\nsolution(\"3 -1\")\nsolution(\"4 1\")\nsolution(\"5 0\")\nsolution(\"3 2\")\nsolution(\"5 1\")\nsolution(\"5 1\")\nsolution(\"4 3\")\nsolution(\"5 2\")\nsolution(\"5 -1\")\nsolution(\"5 2\")\nsolution(\"4 2\")\nsolution(\"4 -1\")\nsolution(\"4 1\")\nsolution(\"3 -1\")\nsolution(\"3 1\")\nsolution(\"5 -1\")\nsolution(\"5 0\")\nsolution(\"4 3\")\nsolution(\"5 1\")\nsolution(\"5 1\")\nsolution(\"5 1\")\nsolution(\"4 -2\")\nsolution(\"5 -1\")\nsolution(\"5 5\")\nsolution(\"5 2\")\nsolution(\"4 1\")\nsolution(\"3 -3\")\nsolution(\"5 0\")\nsolution(\"5 -2\")\nsolution(\"5 1\")\nsolution(\"5 1\")\nsolution(\"4 -3\")\ns"
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    n, l = stdin.split(\" \")\n    n, l = int(n), int(l)\n    a = [int(x) for x in stdin.split(\" \")]\n    a.sort(reverse=True)\n    a = a[1:]\n    total = 0\n    if len(a) == 1:\n        total = a[0]\n    else:\n        total = a[0] + sum(a[1:])\n    # print(a)\n    # print(total)\n    return str(total)"
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Takes a list of integers as input and determines the minimum number of\n    apples that must be removed to form a valid apple pie.\n\n    Args:\n        stdin (str): The input given by Standard Input\n\n    Returns:\n        str: A string indicating the solution to the problem\n    \"\"\"\n    # get the input\n    N, L = stdin.split()\n    N, L = int(N), int(L)\n    # get a list of the apples\n    apples = [L + i - 1 for i in range(1, N + 1)]\n    # make the minimum number of apples with\n    total = 0\n    for apple in apples:\n        total += apple\n    # find the minimum sum of the list of apples\n    total_min = min(apples)\n    # return the minimum of the list of apples\n    return str(total - total_min)\n"
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def f(s: str) -> int:\n        return sum(map(int, s.split()))\n    l = list(map(f, stdin.splitlines()))\n    return str(min(map(lambda x: abs(x - sum(l[1:])), l[1:])))\n\n\ndef"
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the smallest possible difference in flavors of a given apple pie\"\"\"\n    # Get number of apples and desired flavor of apple\n    n, l = stdin.split()\n    n, l = int(n), int(l)\n\n    # Get list of flavors of each apple\n    flavors = [int(x) for x in stdin.split()]\n    flavors.sort()\n\n    # Find smallest difference between flavors of pies\n    difference = None\n    for i in range(n):\n        if difference is None:\n            difference = abs(flavors[i] - l)\n        else:\n            difference = min(difference, abs(flavors[i] - l))\n    return str(difference)\n"
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    'Compute solution for the apple problem'\n    n, l = map(int, stdin.split())\n    apples = [int(stdin) for stdin in stdin.split()]\n    apples.sort()\n    ans = sum(apples[:n - 1]) + l - apples[n - 1]\n    print(ans)\n    return ''\n"
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, L = map(int, stdin.split(\" \"))\n    return str(L + sum([abs(L - i) for i in range(1, N + 1)]))\n"
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    _, *nums = stdin.split(' ')\n    nums = map(int, nums)\n    return str(sum(sorted(nums)[::2]))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the number of the apple pie with the minimum absolute difference in flavors.\n\n    >>> solution('5 2')\n    '18'\n    \"\"\"\n    # N = int(stdin)\n    # L = int(stdin)\n    N, L = [int(x) for x in stdin.split()]\n    N -= 1\n    print(sum(int(x) for x in stdin.split()))\n    return '10'"
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    sum = 0\n    fizz_index = 0\n    buzz_index = 0\n    fizz_flag = False\n    buzz_flag = False\n    for i in range(1, N + 1):\n        if i % 3 == 0 and i % 5!= 0:\n            if fizz_flag:\n                fizz_index += 1\n            else:\n                fizz_index = i\n                fizz_flag = True\n        elif i % 3!= 0 and i % 5 == 0:\n            if buzz_flag:\n                buzz_index += 1\n            else:\n                buzz_index = i\n                buzz_flag = True\n        elif i % 3!= 0 and i % 5!= 0:\n            fizz_flag = False\n            buzz_flag = False\n        else:\n            fizz_flag = False\n            buzz_flag = False\n        if fizz_index!= 0 and buzz_index!= 0 and fizz_index == buzz_index:\n            sum += i\n    return sum\n"
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return sum([i for i in range(1, n+1) if not n % i and i % 3 and i % 5])\n"
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    c = 0\n    for i in range(1,n+1):\n        if i%3 == 0 and i%5 == 0:\n            print(\"FizzBuzz\")\n            c += i\n        elif i%3 == 0:\n            print(\"Fizz\")\n            c += i\n        elif i%5 == 0:\n            print(\"Buzz\")\n            c += i\n        else:\n            print(i)\n            c += i\n    return c\n"
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    count = 0\n    fizz_count = 0\n    buzz_count = 0\n    fizz_buzz_count = 0\n    for i in range(1, N+1):\n        if i % 3 == 0 and i % 5 == 0:\n            fizz_buzz_count += i\n        elif i % 3 == 0:\n            fizz_count += i\n        elif i % 5 == 0:\n            buzz_count += i\n        else:\n            count += i\n    print(count + fizz_count + buzz_count + fizz_buzz_count)"
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    #your code here\n    N = int(stdin)\n    total = 0\n    for i in range(1, N + 1):\n        if i % 3 == 0 and i % 5 == 0:\n            total += i\n        elif i % 3 == 0:\n            total += i\n        elif i % 5 == 0:\n            total += i\n        else:\n            total += i\n    return total"
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    ans = 0\n    for i in range(1, n+1):\n        if i % 3 == 0 and i % 5 == 0:\n            ans += \"FizzBuzz\"\n        elif i % 3 == 0:\n            ans += \"Fizz\"\n        elif i % 5 == 0:\n            ans += \"Buzz\"\n        else:\n            ans += str(i)\n    return ans\n\nprint(solution(stdin.readline()))"
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... 3\n   ... ''')\n    '1'\n\n    >>> solution('''\n   ... 15\n   ... ''')\n    '60'\n\n    >>> solution('''\n   ... 100\n   ... ''')\n    '51537'\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N == 0:\n        return 0\n    FizzBuzz = []\n    for i in range(1, N+1):\n        if i % 15 == 0:\n            FizzBuzz.append(\"FizzBuzz\")\n        elif i % 3 == 0:\n            FizzBuzz.append(\"Fizz\")\n        elif i % 5 == 0:\n            FizzBuzz.append(\"Buzz\")\n        else:\n            FizzBuzz.append(i)\n    return sum(FizzBuzz)\n"
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    F = list(range(1, N + 1))\n    for i in range(2, N):\n        if F[i] % 3 == 0 and F[i] % 5 == 0:\n            F[i] = 'FizzBuzz'\n        elif F[i] % 3 == 0:\n            F[i] = 'Fizz'\n        elif F[i] % 5 == 0:\n            F[i] = 'Buzz'\n    return sum(F)"
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    N = int(stdin.readline())\n\n    answer = 0\n    for i in range(1, N + 1):\n        if i % 3 == 0 and i % 5 == 0:\n            answer += (i)\n        elif i % 3 == 0:\n            answer += (i)\n        elif i % 5 == 0:\n            answer += (i)\n\n    print(answer)\n    return str(answer)\n"
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution\n    # pass\n    x, n = [int(i) for i in stdin.split()]\n    lst = [int(i) for i in stdin.split()[1:]]\n    lst.sort()\n    min = abs(x - lst[0])\n    min_i = 0\n    for i in range(1, len(lst)):\n        if abs(x - lst[i]) < min:\n            min = abs(x - lst[i])\n            min_i = i\n    return str(lst[min_i])\n"
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    X, N = map(int, stdin.split(' '))\n    p = list(map(int, stdin.split(' ')))\n\n    p.sort()\n    d = abs(p[0] - X)\n    for i in range(1, N):\n        if abs(p[i] - X) < d:\n            d = abs(p[i] - X)\n    return str(p[i])\n"
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    X, N = list(map(int, stdin.split()))\n    arr = list(map(int, stdin.split()[1:]))\n    arr.sort()\n    left, right = 0, len(arr) - 1\n    if right == 0:\n        return arr[0]\n    while left + 1 < right:\n        mid = (left + right) // 2\n        if abs(arr[mid] - X) < abs(arr[mid + 1] - X):\n            left = mid\n        elif abs(arr[mid] - X) == abs(arr[mid + 1] - X):\n            if arr[mid] < arr[mid + 1]:\n                left = mid\n            elif arr[mid] == arr[mid + 1]:\n                return arr[mid + 1]\n            else:\n                right = mid\n        else:\n            right = mid\n    if abs(arr[left] - X) <= abs(arr[right] - X):\n        return arr[left]\n    else:\n        return arr[right]\n"
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x, n = [int(i) for i in stdin.split(' ')]\n    nums = [int(i) for i in stdin.split('\\n')[1:]]\n    nums.sort()\n    nums.append(x)\n\n    diffs = []\n    for i in range(len(nums)):\n        diffs.append(abs(nums[i]-x))\n    print(nums[diffs.index(min(diffs))])"
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n  #Get Input\n  x, n = [int(x) for x in stdin.split('\\n')[0].split()]\n  p = [int(x) for x in stdin.split('\\n')[1].split()]\n  \n  #Initialize Minimum Difference\n  minimum_difference = float('inf')\n  #Iterate Through Available Integers\n  for num in set(p):\n    # Calculate Difference Between Int and X\n    difference = abs(num - x)\n    # Update Minimum Difference\n    if difference < minimum_difference:\n      minimum_difference = difference\n  # Print Result\n  print(x + minimum_difference)\n  return \"\"\n"
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    X, N = map(int, stdin.split('\\n')[:2])\n    arr = [int(i) for i in stdin.split('\\n')[2:]]\n    arr.sort()\n    min_abs = sys.maxsize\n    ans = 0\n    for i in arr:\n        if abs(i - X) < min_abs:\n            min_abs = abs(i - X)\n            ans = i\n    return str(ans)"
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x, n = map(int, stdin.split(' '))\n    seq = list(map(int, stdin.split(' ')[1:]))\n    seq.sort()\n    seq.reverse()\n    diff = float('inf')\n    for i in range(len(seq)):\n        if abs(seq[i] - x) < diff:\n            diff = abs(seq[i] - x)\n            res = seq[i]\n    return str(res)\n"
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    X, N = map(int, stdin.readlines())\n    P = map(int, stdin.readlines())\n    P = sorted(P)\n    \n    diffs = []\n    for i in range(len(P)):\n        if P[i] > X:\n            diffs.append(P[i] - X)\n        else:\n            diffs.append(X - P[i])\n    \n    return P[diffs.index(min(diffs))]\n"
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # import stdin\n    # x = int(stdin.readline())\n    # n = int(stdin.readline())\n    # n = [int(i) for i in stdin.readline().split(\" \")]\n    x = int(input())\n    n = int(input())\n    n = [int(i) for i in input().split(\" \")]\n    n.sort()\n    start = 0\n    end = len(n) - 1\n    while start <= end:\n        mid = (start + end) // 2\n        if abs(x - n[mid]) < abs(x - n[mid - 1]):\n            return n[mid]\n        elif abs(x - n[mid]) > abs(x - n[mid + 1]):\n            return n[mid + 1]\n        elif n[mid] < x:\n            start = mid + 1\n        elif n[mid] > x:\n            end = mid - 1\n    return n[end]\n"
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x, n = [int(a) for a in stdin.split('\\n')[0].split()]\n    p = [int(a) for a in stdin.split('\\n')[1].split()]\n\n    p.sort()\n    ans = p[0]\n    diff = abs(x - ans)\n\n    for i in range(1, n):\n        new_diff = abs(x - p[i])\n        if new_diff < diff:\n            ans = p[i]\n            diff = new_diff\n\n    return str(ans)\n\ndef"
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    H, W = map(int, stdin.split())\n    h, w = map(int, stdin.split())\n    return str(H * W - h * w)\n"
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # TODO: Write your code here\n    return ''\n"
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    H, W = map(int, stdin.split('\\n')[:2])\n    h, w = map(int, stdin.split('\\n')[2:3])\n    return str(H * W - (h * w))\n"
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    total_cells = 0\n    n, m = [int(x) for x in stdin.split(' ')]\n    # m = stdin.split(' ')[1]\n    # n = stdin.split(' ')[0]\n    for i in range(n):\n        total_cells += sum([int(x) for x in stdin.split(' ')[i+1].split(' ')])\n    return str(total_cells)\n\nprint(solution(input()))"
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    H, W, h, w = [int(x) for x in stdin.split(' ')]\n    return str(sum(h <= H, w <= W))\n'''\n\nimport sys\n\ndef"
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''Given the dimensions of a grid, count the number of white cells.\n    \n    Constraints\n    1 <= H, W <= 20\n    1 <= h, w <= H\n    \n    Input Format\n    The first line contains H and W separated by a space.\n    The next line contains h and w separated by a space.\n    \n    Output Format\n    Print the number of white cells that will remain.\n    \n    Sample Input 0\n    3 2\n    2 1\n    \n    Sample Output 0\n    1\n    '''\n    # Split the stdin into the input rows and columns.\n    rows, columns = map(int, stdin.split(' '))\n    # Split the input row and column values into two elements each.\n    row, column = map(int, stdin.split(' '))\n    # Count the number of cells that remain after choosing the given row and column.\n    return rows * columns - (row * column)\n"
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    H, W = list(map(int, stdin.split(\" \")))\n    h, w = list(map(int, stdin.split(\" \")))\n    return H-h+1*W-w+1\n"
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    rows, cols = [int(n) for n in stdin.split()]\n    return str(rows * cols - black)"
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    H, W = stdin.split()\n    print(int(H) * int(W) - int(H) - int(W))"
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    h, w = list(map(int, stdin.split(' ')))\n    print(w - (h - 1))\n    return ''"
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    seq = list(map(int, stdin.split()[1:]))\n    seq = [seq[i] for i in range(n) if i < k]\n\n    if not seq:\n        return '-1'\n\n    min_x = min(seq)\n\n    for i in range(min_x, 10 ** 9 + 1):\n        if len(seq) == k:\n            return str(i)\n"
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    _, k = stdin.split()\n    n, seq = stdin.split()\n    n, k = int(n), int(k)\n\n    seq = sorted([int(x) for x in seq.split()])\n\n    res = 1\n    for i in range(n):\n        if seq[i] <= res:\n            res += 1\n        else:\n            break\n\n    if res == k + 1:\n        return str(res)\n    return '-1'\n"
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split(' ')))\n    seq = list(map(int, stdin.split(' ')))\n\n    min_value = 1\n    max_value = 10 ** 9\n\n    while min_value < max_value:\n        mid_value = (min_value + max_value) // 2\n        k_elements_count = 0\n        for elem in seq:\n            k_elements_count += 1 if elem <= mid_value else 0\n\n        if k_elements_count < k:\n            min_value = mid_value + 1\n        else:\n            max_value = mid_value\n\n    return str(min_value) if min_value!= max_value else '-1'\n"
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    a = list(map(int, stdin.split(' ')))\n    a.sort()\n    return str(a[k - 1])\n"
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    arr = list(map(int, stdin.split()))\n    arr.sort()\n    i = 0\n    j = n - 1\n    while i < n - k:\n        if arr[i] <= arr[j]:\n            i += 1\n        j -= 1\n    return -1 if j == -1 else arr[j]\n"
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    a = list(map(int, stdin.split(' ')))\n    answer = -1\n    for x in range(1, 1000000000):\n        count = 0\n        for i in range(n):\n            if a[i] <= x:\n                count += 1\n        if count >= k:\n            answer = x\n            break\n    return str(answer)\n"
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    return ''\n"
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split('\\n')[:2])\n    grid = [['.' for _ in range(m)] for _ in range(n)]\n    for i in range(1, n+1):\n        s = stdin.split('\\n')[i]\n        grid[i-1] = list(s)\n    return '-1'\n\n\nprint(solution(input))\n\n\ndef"
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    grid_size = stdin.split(\"\\n\")\n    n, m = int(grid_size[0]), int(grid_size[1])\n    stars = [\n        (x, y, int(grid_size[i + 1][x][y])) for i in range(n) for x, y in enumerate(grid_size[i + 1]) if grid_size[i + 1][x][y] == \"*\"\n    ]\n    if not stars:\n        return \"-1\"\n    stars.sort(key=lambda star: star[2])\n\n    res = [star]\n    for i in range(len(stars) - 1):\n        for j in range(i + 1, len(stars)):\n            if stars[j][0] < stars[i][0] + stars[i][2] < stars[j][0] + stars[j][2] or \\\n                stars[j][1] < stars[i][1] + stars[i][2] < stars[j][1] + stars[j][2]:\n                return \"-1\"\n            if stars[i][0] < stars[j][0] + stars[j][2] < stars[i][0] + stars[i][2] or \\\n                stars[i][1] < stars[j][1] + stars[j][2] < stars[i][1] + stars[i][2]:\n                return \"-1\"\n            if stars[i][0] <= stars[j][0] + stars[j][2] <= stars[i][0] + stars[i][2] and stars[i][1] <= stars[j][1] + stars[j][2] <= stars[i][1] + stars[i][2]:\n                continue\n            if stars[j][0] <= stars[i][0] + stars[i][2] <= stars[j][0] + stars[j][2] and stars[j][1] <= stars[i][1] + stars[i][2] <= stars[j][1] + stars[j][2]:\n                continue\n            res.append(((stars[i][0] + stars[j][0]) // 2, (stars[i][1] + stars[j][1]) // 2, abs(stars[i][2] + stars[j][2])))\n    return str(len(res)) + \"\\n\" + \"\\n\".join([str(i) + \"\\n\" + \"\\n\".join(str(x) for x in res[i]) for i in range(len(res))])\n"
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Get input\n    \"\"\"\n    n, m = [int(i) for i in stdin.split(' ')]\n    matrix = [[j for j in i] for i in stdin.split('\\n')]\n    \"\"\"Declare variables\n    \"\"\"\n    def is_valid(row, col, size, matrix):\n        \"\"\"Check if input is valid\n        \"\"\"\n        if row + size - 1 > n:\n            return False\n        if col + size - 1 > m:\n            return False\n        for i in range(row, row + size):\n            for j in range(col, col + size):\n                if matrix[i][j]!= '*':\n                    return False\n        return True\n    \"\"\"Iterate through matrix\n    \"\"\"\n    for i in range(n):\n        for j in range(m):\n            \"\"\"If not star and not star_on_edge\n            \"\"\"\n            if matrix[i][j]!= '.':\n                continue\n            if i == 0 or j == 0 or i == n - 1 or j == m - 1:\n                continue\n            \"\"\"Set variables\n            \"\"\"\n            size = 1\n            \"\"\"Get row\n            \"\"\"\n            row = i\n            \"\"\"Get column\n            \"\"\"\n            col = j\n            \"\"\"Get star_on_edge\n            \"\"\"\n            star_on_edge = False\n            \"\"\"While loop for edge stars\n            \"\"\"\n            while is_valid(row, col, size, matrix):\n                \"\"\"Remove edge stars\n                \"\"\"\n                for star_x in range(row, row + size):\n                    for star_y in range(col, col + size):\n                        matrix[star_x][star_y] = '.'\n                \"\"\"If next star is on edge\n                \"\"\"\n                if star_on_edge:\n                    size += 1\n                \"\"\"Check if it is star on edge\n                \"\"\"\n                if is_valid(row, col, size, matrix):\n                    star_on_edge = True\n                else:\n                    star_on_edge = False\n            \"\"\"If it is possible to draw a grid with this star\n            \"\"\"\n            if star_on_edge:\n                return '-1'\n    \"\"\"Get maximum possible stars\n    \"\"\"\n    max_stars = n * m\n    \"\"\"Create empty list for stars\n    \"\"\"\n    stars = []\n    \"\"\"Iterate through matrix\n    \"\"\"\n    for i in range(n):\n        for j in range(m):\n            \"\"\"If it is star\n            \"\"\"\n            if matrix[i][j] == '*':\n                \"\"\"If it is not on edge\n                \"\"\"\n                if (i!= 0 and matrix[i - 1][j] == '.') and (j!= 0 and matrix[i][j - 1] == '.'):\n                    \"\"\"If it is not on last row\n                    \"\"\"\n                    if i!= n - 1 and matrix[i + 1][j] == '.':\n                        \"\"\"If it is not on last column\n                        \"\"\"\n                        if j!= m - 1 and matrix[i][j + 1] == '.':\n                            \"\"\"If it is not on last row and column\n                            \"\"\"\n                            if i!= n - 1 and j!= m - 1 and matrix[i + 1][j + 1] == '.':\n                                \"\"\"If it is not on last row and column and last diagonal\n                                \"\"\"\n                                if i!= n - 1 and j!= 0 and matrix[i + 1][j - 1] == '.':\n                                    \"\"\"If it is not on last row and column and first diagonal\n                                    \"\"\"\n                                    if i!= 0 and j!= 0 and matrix[i - 1][j - 1] == '.':\n                                        \"\"\"If it is not on last row, column and first diagonal and last diagonal\n                                        \"\"\"\n                                        if i!= 0 and j!= m - 1 and matrix[i - 1][j + 1] == '.':\n                                            \"\"\"If it is not on last row, column, first diagonal and last diagonal\n                                            \"\"\"\n                                            if i!= n - 1 and j!= 0 and matrix[i + 1][j - 1] == '.':\n                                                \"\"\"If it is not on last row, column, first diagonal and last diagonal\n                                                \"\"\"\n                                                if i!= n - 1 and j!= m - 1 and matrix[i + 1][j + 1] == '.':\n                                                    \"\"\"If it is not on last row, column, first diagonal and last diagonal\n                                                    \"\"\"\n                                                    stars.append([i, j, 1])\n    \"\"\"Sort stars by row and column index\n    \"\"\"\n    stars = sorted(stars, key=lambda x: (x[0], x[1]))\n    \"\"\"If it is possible to draw a grid with this star\n    \"\"\"\n    if stars!= []:\n        \"\"\"If there are stars\n        \"\"\"\n        if len(stars) < max_stars:\n            \"\"\"If maximum possible stars is less than stars\n            \"\"\"\n            return str(len(stars)) + '\\n' + '\\n'.join([' '.join([str(i) for i in star]) for star in stars])\n        else:\n            \"\"\"If maximum possible stars is equal to stars\n            \"\"\"\n            return '-1'\n    \"\"\"If it is impossible to draw a grid with this star\n    \"\"\"\n    return '-1'"
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    row = stdin.split('\\n')\n    row = list(map(lambda x: list(x), row))\n    #print(row)\n    n, m = map(lambda x: len(x), row)\n    #print(n, m)\n    min_length = min(n, m)\n    #print(min_length)\n    for i in range(n):\n        for j in range(m):\n            if (i + j) % 2 == 0 and i >= min_length // 2 and j >= min_length // 2:\n                row[i][j] = '*'\n                #print(i, j, row[i][j])\n    for i in range(n - 1, -1, -1):\n        for j in range(m - 1, -1, -1):\n            if (i + j) % 2 == 0 and i < min_length // 2 and j < min_length // 2:\n                row[i][j] = '*'\n                #print(i, j, row[i][j])\n    print(row)\n\n    #for i in range(n):\n    #    for j in range(m):\n    #        print(row[i][j], end='')\n    #    print()\n    #print(min_length)\n    #for i in range(min_length // 2):\n    #    for j in range(min_length // 2):\n    #        print(row[i][j], end='')\n    #    print()\n\n    count = 0\n    for i in range(n):\n        for j in range(m):\n            if row[i][j] == '*':\n                count += 1\n    #print(count)\n    #print(len(row))\n    if count > len(row):\n        return \"-1\"\n    else:\n        return str(count)\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \n    pass\n"
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split('\\n')[:2])\n    s = [['*' if '*' == x or '.' == x else None for x in stdin.split('\\n')[i]] for i in range(n)]\n    star_size = n * m\n    for i in range(n):\n        for j in range(m):\n            if s[i][j] == '*' and len(s) <= star_size:\n                s[i][j] = '1'\n            else:\n                s[i][j] = '0'\n    cnt = 0\n    ans = []\n    if n <= 1 or m <= 1:\n        print(0)\n    elif n == m:\n        print(1)\n    elif s[0][1] == '*' or s[1][0] == '*':\n        print(-1)\n    else:\n        for i in range(n):\n            for j in range(m):\n                if s[i][j] == '*':\n                    cnt += 1\n                    ans.append([i, j, 1])\n        if cnt <= star_size:\n            print(cnt)\n            for x, y, z in ans:\n                print(x, y, z)\n        else:\n            print(-1)"
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    size = list(map(int, stdin.split(' ')))\n    n, m = size[0], size[1]\n    matrix = []\n    for i in range(n):\n        matrix.append(stdin.split('\\n')[i])\n    k = 0\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] == '*':\n                k += 1\n    if k > n*m:\n        return \"-1\"\n    elif k == 0:\n        return 0\n    else:\n        k = 0\n        for i in range(n):\n            for j in range(m):\n                if matrix[i][j] == '*':\n                    k += 1\n                    if k > n*m:\n                        return \"-1\"\n                    else:\n                        matrix[i] = matrix[i][0:j] + matrix[i][j+1:]\n                        for y in range(i+1, n):\n                            matrix[y] = matrix[y][0:j] + matrix[y][j+1:]\n                        for y in range(n):\n                            matrix[y] = matrix[y][0:j] + matrix[y][j+1:]\n                        for y in range(n):\n                            matrix[y] = matrix[y][0:j] + matrix[y][j+1:]\n        for i in range(n):\n            for j in range(m):\n                if matrix[i][j] == '.':\n                    k += 1\n                    if k > n*m:\n                        return \"-1\"\n                    else:\n                        matrix[i] = matrix[i][0:j] + matrix[i][j+1:]\n                        for y in range(i+1, n):\n                            matrix[y] = matrix[y][0:j] + matrix[y][j+1:]\n                        for y in range(n):\n                            matrix[y] = matrix[y][0:j] + matrix[y][j+1:]\n                        for y in range(n):\n                            matrix[y] = matrix[y][0:j] + matrix[y][j+1:]\n    return k\n\n\n\n-----Test------\n\"\"\"\nfrom typing import List\n\n\ndef"
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin\n    even = True\n    n_rem = 0\n    while n_rem!= 1:\n        n_rem = 0\n        for i in range(0, n):\n            if s[i] == s[i+1] and s[i] == s[i+2]:\n                n_rem += 1\n                if n_rem == 2:\n                    if not even:\n                        s = s[0:i-1] + s[i+3:]\n                    else:\n                        s = s[0:i] + s[i+4:]\n                    break\n            if even:\n                if s[i] == s[i+1] and s[i]!= s[i+2]:\n                    n_rem += 1\n                    if n_rem == 2:\n                        s = s[0:i] + s[i+3:]\n                        break\n            else:\n                if s[i]!= s[i+1] and s[i] == s[i+2]:\n                    n_rem += 1\n                    if n_rem == 2:\n                        s = s[0:i] + s[i+3:]\n                        break\n        even = not even\n    return s\n\nprint(solution(input()))"
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin[0]\n    stdin = stdin[1:]\n    res = ''\n    for i in stdin:\n        if i == res[-1]:\n            res += i\n        else:\n            res += i\n    return res\n"
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    len_stdin = int(stdin.split('\\n')[0])\n    str_in = stdin.split('\\n')[1]\n    good_str = [str_in[i] for i in range(len_stdin) if i % 2 == 1]\n    lst_good = []\n    for i in range(len(good_str)):\n        for j in range(i, len(good_str)):\n            if good_str[i]!= good_str[j]:\n                lst_good.append(good_str[i:j])\n    lst_good.append(good_str)\n    min_char = min([len(i) for i in lst_good])\n    return min_char\n"
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    good_strings = [good for good in stdin.split() if len(good) % 2 == 0]\n    good_strings = [good for good in good_strings if len(good) > 1]\n\n    if len(good_strings) > 0:\n        for good in good_strings:\n            bad = good[::2]\n            if bad!= good[1::2]:\n                print(len(good) // 2)\n                return good\n\n    return stdin\n\n\ndef"
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n\n    odds = set()\n    for c in s:\n        if s.index(c) % 2:\n            odds.add(c)\n\n    return len(odds)\n"
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdin\n"
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return out\n\n\ndef"
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    length = int(stdin)\n    string = stdin.strip()\n\n    count = 0\n\n    if length % 2 == 0:\n        if string[0] == string[-1]:\n            return 0\n        else:\n            for i in range(1, int(length/2) + 1):\n                if string[i]!= string[i+1]:\n                    count += 1\n            return count\n    else:\n        for i in range(0, int(length/2)):\n            if string[i]!= string[i+1]:\n                count += 1\n        return count\n"
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    k = 0\n    s = stdin\n    while True:\n        s_iter = iter(s)\n        s_iter_2 = iter(s_iter)\n        s_iter_3 = iter(s_iter_2)\n        s_iter_4 = iter(s_iter_3)\n        next(s_iter_4)\n        count = 0\n        for i in s_iter_4:\n            if i == next(s_iter_4):\n                count += 1\n        if count == len(s) // 2:\n            break\n        else:\n            k += 1\n            s = \"\".join(next(s_iter_4) for i in range(k))\n    return k, s\n\n\ndef"
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code goes here\n    pass\n"
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\nYou can write to stdout for debugging purposes or even to a file.\n\nIn C: use \"printf\" (in C that means \"print\")\n\nFor the first sample input, the output was: YES\n\nFor the second sample input, the output was: 10100\n\nSo, the string \"10100\" was printed by the program.\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES' if stdin else 'NO'\n\"\"\"\ndef"
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\\n10100\"\n\n'''\n\n\n\ndef"
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES' if len(stdin) < 3 else '10101010'\n"
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin.split())!= 2:\n        raise Exception(\"Input does not match the description\")\n\n    n, m = [int(x) for x in stdin.split()]\n\n    if n == 1 or n == 2:\n        return \"NO\"\n\n    g = [[] for _ in range(n)]\n    for i in range(m):\n        u, v = [int(x) for x in stdin.split()]\n        g[u].append(v)\n        g[v].append(u)\n\n    res = [0] * m\n    for i in range(m):\n        for j in range(m):\n            if i!= j and (g[i][0] == g[j][1] or g[i][1] == g[j][0]):\n                res[i] = 1\n                break\n\n    if sum(res) > 0:\n        return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\n\u041a\u0430\u043a \u0432\u0441\u0435\u0433\u0434\u0430 \u0438\u0437\u0432\u0435\u0441\u0442\u043d\u043e, \u0432\u0441\u0435 \u043f\u0440\u043e\u0441\u0442\u044b\u0435 \u043f\u043e\u043b\u0438\u043d\u043e\u043c\u044b \u0434\u043b\u044f \u043b\u044e\u0431\u043e\u0433\u043e \u0446\u0435\u043b\u043e\u0433\u043e \u0447\u0438\u0441\u043b\u0430, \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u044e\u0442\u0441\u044f \u043f\u043e \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0443 \u0415\u0432\u043a\u043b\u0438\u0434\u0430 \u043e\u0431\u044b\u043a\u043d\u043e\u0432\u0435\u043d\u043d\u044b\u043c \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u043e\u043c. \u0422\u0430\u043a \u043a\u0430\u043a \u0432\u0441\u0435 \u043f\u0440\u043e\u0441\u0442\u044b\u0435 \u0447\u0438\u0441\u043b\u0430 \u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u043d\u043e \u0438\u0437\u0432\u0435\u0441\u0442\u043d\u044b, \u0442\u043e \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043e\u0431\u0440\u0430\u0442\u043d\u043e\u0433\u043e \u0447\u0438\u0441\u043b\u0430 \u043e\u0442 \u0434\u0430\u043d\u043d\u043e\u0433\u043e \u043f\u0440\u043e\u0441\u0442\u043e\u0433\u043e \u0447\u0438\u0441\u043b\u0430 \u043e\u0441\u0443\u0449\u0435\u0441\u0442\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043f\u0440\u043e\u0441\u0442\u044b\u043c \u043c\u0435\u0442\u043e\u0434\u043e\u043c \u0432\u044b\u0447\u0438\u0442\u0430\u043d\u0438\u044f \u0435\u0433\u043e \u0446\u0438\u0444\u0440. \u0412 \u0434\u0430\u043d\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u043c\u043e\u0436\u043d\u043e \u0432\u044b\u0431\u0440\u0430\u0442\u044c \u043b\u044e\u0431\u0443\u044e \u0446\u0438\u0444\u0440\u0443, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0432\u0442\u043e\u0440\u0443\u044e.\n\n\u041f\u043e\u043b\u043d\u044b\u0439 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c \u043e\u0431\u0440\u0430\u0442\u043d\u043e\u0433\u043e \u0447\u0438\u0441\u043b\u0430 \u043c\u043e\u0436\u043d\u043e \u043f\u043e\u0441\u0442\u0440\u043e\u0438\u0442\u044c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c \u0415\u0432\u043a\u043b\u0438\u0434\u0430. \u041f\u0440\u043e\u0441\u0442\u044b\u0435 \u0447\u0438\u0441\u043b\u0430 \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u044b \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c:\n\n1, 2, 3,..., n\n\n\u0410 \u0432\u043e\u0442 \u043e\u0431\u0440\u0430\u0442\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u043e\u0431\u044b\u043a\u043d\u043e\u0432\u0435\u043d\u043d\u043e \u043c\u043e\u0436\u043d\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c, \u0435\u0441\u043b\u0438 \u0443\u043c\u043d\u043e\u0436\u0438\u0442\u044c \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u044e\u044e \u0446\u0438\u0444\u0440\u0443 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u043e\u0433\u043e \u0447\u0438\u0441\u043b\u0430 \u043d\u0430 $n$, \u0438 \u043f\u0440\u0438\u043f\u0438\u0441\u0430\u0442\u044c \u043a \u043f\u0435\u0440\u0432\u043e\u0439. \u041f\u0440\u043e\u0441\u0442\u043e \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u044f \u044d\u0442\u0443 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0439.\n\n\u041f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u0443 \u0432\u0441\u0435 \u043f\u0440\u043e\u0441\u0442\u044b\u0435 \u0447\u0438\u0441\u043b\u0430 \u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u043d\u043e \u0438\u0437\u0432\u0435\u0441\u0442\u043d\u044b, \u0442\u043e \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043e\u0431\u0440\u0430\u0442\u043d\u043e\u0433\u043e \u0447\u0438\u0441\u043b\u0430 \u043e\u0441\u0443\u0449\u0435\u0441\u0442\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043f\u0440\u043e\u0441\u0442\u044b\u043c \u043c\u0435\u0442\u043e\u0434\u043e\u043c \u0432\u044b\u0447\u0438\u0442\u0430\u043d\u0438\u044f \u0435\u0433\u043e \u0446\u0438\u0444\u0440. \u0412 \u0434\u0430\u043d\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u043c\u043e\u0436\u043d\u043e \u0432\u044b\u0431\u0440\u0430\u0442\u044c \u043b\u044e\u0431\u0443\u044e \u0446\u0438\u0444\u0440\u0443, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0432\u0442\u043e\u0440\u0443\u044e.\n\u0421\u0447\u0438\u0442\u0430\u0435\u0442\u0441\u044f, \u0447\u0442\u043e \u043e\u0431\u0440\u0430\u0442\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u043d\u0435 \u043c\u043e\u0436\u0435\u0442 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u0434\u0432\u0435 \u0440\u0430\u0437\u043d\u044b\u0445 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0446\u0438\u0444\u0440\u044b. \u0415\u0441\u043b\u0438 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0438\u043b\u0438 \u0432\u0435\u0440\u0445\u043d\u044e\u044e \u0438 \u043d\u0438\u0436\u043d\u044e\u044e, \u0442\u043e \u043e\u043d\u043e \u043d\u0435 \u043e\u0431\u0440\u0430\u0442\u043d\u043e\u0435.\n\n\u0412 \u0434\u0430\u043d\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0435\u0442\u0441\u044f \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0435 \u0440\u0430\u0432\u0435\u043d\u0441\u0442\u0432\u043e: \u0435\u0441\u043b\u0438 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e $n$ \u0440\u0430\u0432\u043d\u043e \u0441\u0443\u043c\u043c\u0435 \u043e\u0431\u0440\u0430\u0442\u043d\u044b\u0445 \u0435\u043c\u0443 \u0446\u0438\u0444\u0440, \u0442\u043e \u043e\u043d\u043e \u043e\u0431\u0440\u0430\u0442\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e, \u0435\u0441\u043b\u0438 \u043d\u0435\u0442 \u2014 \u043d\u0435\u0442.\n\n\u041f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u0443 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e $n$ \u0442\u0430\u043a\u0436\u0435 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043e \u043f\u0443\u0442\u0435\u043c \u0432\u044b\u0447\u0438\u0442\u0430\u043d\u0438\u044f \u043e\u0431\u0440\u0430\u0442\u043d\u044b\u0445 \u0446\u0438\u0444\u0440 \u043e\u0442 \u0441\u0443\u043c\u043c\u044b \u043e\u0431\u0440\u0430\u0442\u043d\u044b\u0445 \u0446\u0438\u0444\u0440, \u0442\u043e \u043e\u043d\u043e \u043e\u0431\u0440\u0430\u0442\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u0442\u043e\u0436\u0435 \u0431\u0443\u0434\u0435\u0442 \u0435\u0441\u043b\u0438 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u043d\u0435 \u0440\u0430\u0432\u043d\u043e \u0441\u0443\u043c\u043c\u0435 \u043e\u0431\u0440\u0430\u0442\u043d\u044b\u0445 \u0446\u0438\u0444\u0440, \u043d\u043e \u0432\u0441\u0435 \u0440\u0430\u0432\u043d\u043e \u043e\u043d\u043e \u043d\u0435 \u043e\u0431\u0440\u0430\u0442\u043d\u043e\u0435.\n\n\u0421\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0435 \u0444\u0430\u0439\u043b\u0430 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043e \u0432 \u0432\u0438\u0434\u0435 \u0441\u0442\u0440\u043e\u043a\u0438.\n\n\u0412\u0430\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e"
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\nPlease, do not remove this function call.\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    pass\n"
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    n, m = list(map(int, stdin.split()))\n    points = set()\n    for i in range(n):\n        l, r = list(map(int, stdin.split()))\n        for x in range(l, r + 1):\n            points.add(x)\n    print(len(points))\n    for x in points:\n        print(x)\n"
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    segments = []\n    for _ in range(n):\n        l, r = map(int, stdin.split(' '))\n        segments.append((l, r))\n    points = [i for i in range(1, m + 1)]\n\n    solution = set()\n    for point in points:\n        in_segment = False\n        for segment in segments:\n            if segment[0] <= point <= segment[1]:\n                in_segment = True\n                break\n        if not in_segment:\n            solution.add(point)\n\n    solution = sorted(list(solution))\n\n    if solution:\n        return len(solution)\n    else:\n        return 0\n"
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    # Your code goes here.\n    #...\n    #...\n    pass"
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution of the task 1.1\n    :param stdin: str\n    :return: str\n    \"\"\"\n\n    # Write your solution here\n    def check(x):\n        if x <= m and l <= x:\n            return True\n        else:\n            return False\n\n    n, m = [int(x) for x in stdin.split()]\n    left_list, right_list = [], []\n    for _ in range(n):\n        left, right = [int(x) for x in stdin.split()]\n        left_list.append(left)\n        right_list.append(right)\n\n    if n == 0:\n        return 0\n    else:\n        left_list.sort()\n        right_list.sort()\n\n        max_left = max(left_list)\n        min_right = min(right_list)\n\n        num_left = m - max_left\n        num_right = m - min_right\n\n        return num_right + num_left\n"
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Your solution goes here.\n    '''\n    #\n    #\n    #\n    return stdin\n\ndef"
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split('\\n')\n    segments = []\n    for i in range(1, len(input)):\n        segments.append(input[i].split(' '))\n    segments = [[int(j) for j in i] for i in segments]\n    ans = []\n    for i in range(1, int(input[0]) + 1):\n        if i not in [j[0] for j in segments] and i not in [j[1] for j in segments]:\n            ans.append(i)\n    print(len(ans))\n    print(*ans, sep = '\\n')\n    return ''"
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = [int(x) for x in stdin.split()]\n    count = 0\n    for i in range(a, b + 1):\n        if i % c == 0 or i % d == 0:\n            continue\n        count += 1\n    return str(count)"
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = [int(x) for x in stdin.split(\" \")]\n    l = range(A, B+1)\n    l2 = []\n    for i in l:\n        if i % C == 0 or i % D == 0:\n            continue\n        l2.append(i)\n    return len(l2)\n"
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split(' '))\n    count = 0\n    for i in range(a, b + 1):\n        if i % c == 0 or i % d == 0:\n            continue\n        count += 1\n    return str(count)\n"
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your solution\n    return result\n"
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # get input for A,B,C,D\n    input = stdin.split(\" \")\n    A = int(input[0])\n    B = int(input[1])\n    C = int(input[2])\n    D = int(input[3])\n\n    # loop through the numbers between A and B\n    num = B + 1\n    count = 0\n    while num > A:\n        if num % C!= 0 and num % D!= 0:\n            count += 1\n        num -= 1\n\n    return count\n\ndef"
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    return (B-A-1) - (((B-A)-1)%(C*D)) + ((B-A)//(C*D))\n"
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = [int(x) for x in stdin.split()]\n\n    count = 0\n    for i in range(a, b+1):\n        if i%c!=0 and i%d!=0:\n            count+=1\n\n    return str(count)\n"
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = [int(i) for i in stdin.split(' ')]\n    count = 0\n    for x in range(a, b + 1):\n        if x % c!= 0 and x % d!= 0:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return f'Your answer is {solve(stdin)}'"
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    count = 0\n    for i in range(a, b + 1):\n        if i % c == 0 or i % d == 0:\n            continue\n        count += 1\n    return str(count)\n"
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # sum of digits of a number\n    n = int(stdin)\n    sum = 0\n    while n:\n        sum += n % 10\n        n //= 10\n    if sum % 9 == 0:\n        return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return (\n        \"Yes\"\n        if sum(map(int, stdin)) % 9 == 0\n        else \"No\"\n    )\n"
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Calculate the sum of digits in the decimal representation of the integer\n    \"\"\"\n    return \"Yes\" if sum([int(x) for x in stdin]) % 9 == 0 else \"No\""
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if sum([int(x) for x in stdin]) % 9 == 0 else \"No\""
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if sum(map(int, stdin)) % 9 == 0 else \"No\"\n"
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    r = 0\n    for x in s:\n        r += int(x)\n    if r % 9 == 0:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if int(stdin) % 9 == 0 else \"No\"\n"
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return 'Yes' if sum(list(map(lambda x: sum(list(map(int, str(x)))) % 9, list(map(int, list(stdin)))))) == 0 else 'No'\n"
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if sum(map(int, stdin)) % 9 == 0 else \"No\""
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if sum(int(x) for x in stdin) % 9 == 0 else \"No\"\n\ndef"
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n  n = int(stdin)\n  x = 0\n  while n!= 1:\n    x += 1\n    n -= x * 6\n  return str(x)"
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    result = 0\n    while N!= 0:\n        if N % 36 == 0:\n            N -= 36\n            result += 1\n        elif N % 9 == 0:\n            N -= 9\n            result += 1\n        elif N % 6 == 0:\n            N -= 6\n            result += 1\n        else:\n            break\n    return str(result + N)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    return N // 81 + N // 36 + N // 9 + N // 1\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x = 0\n    while n > 0:\n        if n % 9 == 0:\n            x += n // 9\n            break\n        x += 1\n        n -= 1\n    return x\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''Takes in input, returns the number of operations required to withdraw exactly n yen'''\n    # your solution goes here\n    return "
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    c = 1\n    while n > 1:\n        if c == 1:\n            c += 1\n        if c % 3 == 0:\n            n -= (c // 3)\n        else:\n            c += 1\n            n -= 1\n    return str(c)"
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return str(math.ceil(math.sqrt(float(stdin))))\n"
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    count = 0\n    i = 1\n    while N > 0:\n        if i*9 <= N and N-(i*9) < N:\n            N -= (i*9)\n            count += 1\n        elif N-(i*9) >= 0:\n            N -= (i*9)\n            count += 1\n        i += 1\n    return str(count)\n"
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nN = int(input())\n\n\ndef"
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n  N = int(stdin)\n  counter = 0\n  x = 1\n  while N > 0:\n    if (N - (x ** 2)) < 0:\n      counter += (N // x)\n      break\n    else:\n      N = N - (x ** 2)\n      counter += 1\n      x += 1\n  return str(counter)\n"
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split('\\n')\n    length_s = len(s)\n    length_t = len(t)\n    if length_s!= length_t:\n        print('No')\n    else:\n        counter = 0\n        for i in range(length_s):\n            if s[i]!= t[i]:\n                counter += 1\n        if counter == 1:\n            print('Yes')\n        else:\n            print('No')\n"
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split('\\n')[0]\n    t = stdin.split('\\n')[1]\n    s = s * 2\n    if s == t:\n        return 'Yes'\n    else:\n        return 'No'\n"
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    s_list = list(stdin)\n    \n    for i in range(len(s_list)):\n        s_list[i] = s_list[i][-1] + s_list[i][:-1]\n    \n    return 'Yes' if s_list[0] == stdin[0] else 'No'\n    \n"
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s1 = stdin.readline()\n    s2 = stdin.readline()\n    \n    if s1 == s2[::-1]:\n        return 'Yes'\n    else:\n        return 'No'\n"
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if stdin[::-1] == stdin else \"No\"\n"
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \n    \"\"\"\n    Input:\n    stdin.readline().strip()\n    \n    Output:\n    stdout.write(...)\n    \"\"\"\n    \n    s = stdin[0]\n    t = stdin[1]\n    \n    if s == t:\n        return \"Yes\"\n    \n    for i in range(len(s)):\n        s = s[-1] + s[:len(s)-1]\n        if s == t:\n            return \"Yes\"\n    return \"No\"\n        "
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = list(stdin)\n    s1 = s[-1:] + s[:-1]\n    if ''.join(s1) == stdin:\n        return 'Yes'\n    else:\n        return 'No'\n    return s\n"
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    return 'Yes' if stdin[::-1] == stdin else 'No'\n"
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    return 'Yes' if s == t[-1] + t[0:-1] else 'No'"
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    t = stdin[::-1]\n\n    return t if s == t else 'No'\n"
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split('\\n')\n    s = list(s)\n    t = list(t)\n    min_changes = len(s) + 1\n    for idx, c in enumerate(s):\n        if c!= t[idx]:\n            s[idx] = t[idx]\n            changes = 0\n            for char in t:\n                if char not in s:\n                    changes += 1\n            if changes < min_changes:\n                min_changes = changes\n            for idx, c in enumerate(s):\n                s[idx] = c\n    return min_changes\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n  s = stdin[0]\n  t = stdin[1]\n  \n  # Get count of number of changes to make\n  chng = 0\n  for i in range(len(s)):\n    if s[i]!= t[i]:\n      chng += 1\n  return chng\n  \n"
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\n------\n    return stdin"
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Your solution here\n    s = stdin\n    t = stdin\n    dp = [[0 for i in range(len(s)+1)] for j in range(len(t)+1)]\n    for i in range(len(s)+1):\n        dp[0][i] = i\n    for i in range(len(t)+1):\n        dp[i][0] = i\n    for i in range(1, len(t)+1):\n        for j in range(1, len(s)+1):\n            if t[i-1] == s[j-1]:\n                dp[i][j] = dp[i-1][j-1]\n            else:\n                dp[i][j] = 1 + min(dp[i-1][j], dp[i][j-1])\n    return dp[-1][-1]\nprint(solution(input()))\n"
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.split()[0]\n    T = stdin.split()[1]\n    return len(S) - len(T)"
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.splitlines()\n    n = len(s)\n    m = len(t)\n    i = 0\n    j = 0\n    ans = 0\n    while i < n and j < m:\n        if s[i] == t[j]:\n            i += 1\n            j += 1\n        else:\n            ans += 1\n            i += 1\n\n    return ans\n"
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    t = stdin[1]\n    if s == t:\n        return 0\n    if len(t) > len(s):\n        s, t = t, s\n    table = {}\n    s_length = len(s)\n    for c in t:\n        if c in table:\n            table[c] += 1\n        else:\n            table[c] = 1\n    def generate(table, s, s_length, cur, cur_length):\n        if cur_length == s_length:\n            return\n        if cur_length > s_length:\n            return\n        for c in s:\n            if c in table:\n                table[c] -= 1\n                if table[c] == 0:\n                    del table[c]\n                generate(table, s, s_length, cur + c, cur_length + 1)\n                table[c] += 1\n    generate(table, s, s_length, \"\", 0)\n    return len(s) - len(t) + sum(table.values())\n"
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    count = 0\n    for i in s:\n        if i not in t:\n            count += 1\n    return count"
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.split(\"\\n\")[0]\n    T = stdin.split(\"\\n\")[1]\n\n    count = 0\n    for i, s_letter in enumerate(S):\n        if s_letter!= T[i]:\n            count += 1\n\n    return str(count)\n"
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    t = stdin[1]\n\n    s = list(s)\n    t = list(t)\n    \n    if len(s) >= len(t):\n        for i in range(len(t)):\n            if s[i]!= t[i]:\n                s[i] = t[i]\n                break\n        return len(s)\n    \n    return -1\n\nprint(solution(input().split()))"
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.split())\n    count = 0\n    for i in range(A, 0, -1):\n        for j in range(B, 0, -1):\n            if i % j == 0 and i * j > count:\n                count = i * j\n                K -= 1\n            if K == 0:\n                return count\n"
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Get A and B\n    a, b = map(int, stdin.split())\n    # Get K\n    k = int(stdin.split()[2])\n    # Get the range of numbers to search\n    numbers = range(max(a, b), min(a, b), -1)\n    # Get the list of numbers that divide both A and B\n    divisors = [\n        number\n        for number in numbers\n        if a % number == 0 and b % number == 0\n    ]\n    # If there are more than k items in divisors, we need to get the\n    # second largest element\n    if len(divisors) > k:\n        return divisors[k - 1]\n    # Else, return the smallest element of divisors\n    return divisors[0]"
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your solution\n    a, b, k = [int(x) for x in stdin.split(' ')]\n    result = [x for x in range(1, a + 1) if a % x == 0 and b % x == 0]\n    print(sorted(result)[-k])\n    return ''"
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.split(' '))\n    return str(next_prime(A) * next_prime(B) // gcd(A, B) // next_prime(K))\n\ndef"
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # get input from stdin\n    # get number of test cases\n    a, b, k = list(map(int, stdin.split()))\n    # get a list of factors\n    # sort and get the kth largest\n    # multiply the factors\n    return str(a * b // nlargest(k, list(factors(a * b))))"
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    inputs = list(map(int, stdin.split(' ')))\n    a, b, k = inputs[0], inputs[1], inputs[2]\n    return str(find_kth_largest_divisor(a, b, k))\n\n\ndef"
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.split())\n    list = []\n    for x in range(1, A + 1):\n        for y in range(1, B + 1):\n            if x % y == 0 and x not in list:\n                list.append(x)\n    list.sort()\n    print(list[K - 1])\n    return ''\n"
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k = map(int, stdin.split())\n    k -= 1\n    ans = max(1, math.gcd(a, b))\n    while k > 0:\n        ans = min(a * ans, b * ans)\n        k -= 1\n    print(ans)\n"
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k = [int(x) for x in stdin.split('\\n')[0].split()]\n    arr = []\n    for i in range(1, a * b + 1):\n        if a * b % i == 0 and a % i == 0 and b % i == 0:\n            arr.append(i)\n    arr.sort()\n    return arr[k - 1]"
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k = map(int, stdin.split(' '))\n    low, high = a, b\n    k = k - 1\n    if a % k > 0 or b % k > 0:\n        return 'a and b must be divisible by k'\n    while True:\n        if a % k == 0 and b % k == 0:\n            break\n        if a % k == 0:\n            low = k\n        else:\n            high = k\n        k = (high + low) // 2\n        if low == k:\n            break\n    return k"
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    return str(x * 2 + x // 500 * 5 + x // 100 * 5 + x // 50 * 5 + x // 10 * 5 + x // 5 * 5 + x // 1 * 5)\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return \"\""
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    if x == 1:\n        return 0\n    return int((x / 500) * 1000 + 5 * (x % 500) / 5 + 1000)"
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    if x % 500 == 0:\n        print(1000 * (x // 500))\n    elif x % 500 == 1:\n        print(1000 + 5 * (x // 500 - 1))\n    else:\n        print(1000 + 5 * (x // 500))\n\n    return \"\"\n"
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    X: int = int(stdin)\n\n    # Variable Declarations\n    happiness = 0\n    coin = 1\n    num_coins = 0\n\n    # Calculate the maximum number of coins\n    while X > 0:\n        if X - coin >= 0:\n            X -= coin\n            num_coins += 1\n            happiness += coin\n        else:\n            coin = coin * 5\n            num_coins += 1\n            happiness += coin\n\n    # Print the answer\n    print(happiness)\n"
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x: int = int(stdin)\n    yen_500: int = x // 500\n    yen_100: int = (x - yen_500 * 500) // 100\n    yen_50: int = (x - yen_500 * 500 - yen_100 * 100) // 50\n    yen_10: int = (x - yen_500 * 500 - yen_100 * 100 - yen_50 * 50) // 10\n    yen_5: int = (x - yen_500 * 500 - yen_100 * 100 - yen_50 * 50 - yen_10 * 10) // 5\n    yen_1: int = (x - yen_500 * 500 - yen_100 * 100 - yen_50 * 50 - yen_10 * 10 - yen_5 * 5) // 1\n    print(yen_500 * 1000 + yen_100 * 500 + yen_50 * 500 + yen_10 * 100 + yen_5 * 50 + yen_1 * 100)"
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    return str(max(0, 2020 - X * 2 + 5 * (X - 1) // 5 + 1000 * (X - 1) // 500))\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the maximum number of happiness points that can be earned\"\"\"\n    # TODO: Your code here\n    return stdin\n"
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''Returns the maximum number of happiness points that can be earned by exchanging his money so that he gets the most happiness points.\n    '''\n    x = int(stdin)\n    dp = [0] * (x+1)\n    dp[1] = 1000\n    for i in range(1, x+1):\n        if i >= 500:\n            dp[i] = dp[i-500] + 1000\n        if i >= 100:\n            dp[i] = dp[i-100] + 500\n        if i >= 50:\n            dp[i] = dp[i-50] + 100\n        if i >= 10:\n            dp[i] = dp[i-10] + 50\n        if i >= 5:\n            dp[i] = dp[i-5] + 10\n        if i >= 1:\n            dp[i] = dp[i-1] + 5\n    return max(dp)\n'''\ndef"
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('')\n    '20'\n    >>> solution('1')\n    '20'\n    >>> solution('4')\n    '25'\n    >>> solution('5')\n    '25'\n    >>> solution('6')\n    '27'\n    >>> solution('8')\n    '32'\n    >>> solution('10')\n    '37'\n    >>> solution('11')\n    '46'\n    >>> solution('12')\n    '56'\n    >>> solution('13')\n    '63'\n    >>> solution('14')\n    '76'\n    \"\"\"\n    total_yen = int(stdin)\n    happiness = 0\n\n    while total_yen >= 500:\n        total_yen -= 500\n        happiness += 1000\n\n    while total_yen >= 100:\n        total_yen -= 100\n        happiness += 500\n\n    while total_yen >= 50:\n        total_yen -= 50\n        happiness += 100\n\n    while total_yen >= 10:\n        total_yen -= 10\n        happiness += 50\n\n    while total_yen >= 5:\n        total_yen -= 5\n        happiness += 5\n\n    while total_yen >= 1:\n        total_yen -= 1\n        happiness += 1\n\n    return str(happiness)\n"
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Return a solution to the given problem.\n    \"\"\"\n    # Split the input using the '\\n' character as the separator.\n    # The input will be in the following format:\n    # <total number of people>\n    # <x coordinate of first person>\n    # <x coordinate of second person>\n    #...\n    #\n    # Split the input.\n    split_input = stdin.split('\\n')\n    # The first line of the input will be the total number of people.\n    total_people = int(split_input[0])\n    # The remaining lines of the input will be coordinates for the people.\n    people = split_input[1:]\n\n    # Initialize an array of people.\n    people_array = []\n    # Iterate through the people array.\n    for i in range(total_people):\n        # Split each line into the x coordinate of each person.\n        # Convert the x coordinate into an integer.\n        # Append the x coordinate to the people array.\n        x_coord = int(people[i].split()[0])\n        people_array.append(x_coord)\n\n    # Initialize an array of distances.\n    distances = []\n    # Iterate through the people array.\n    for i in range(total_people):\n        # Calculate the distance between the current person and the i-th person.\n        # Convert the distance to an integer.\n        # Append the distance to the distances array.\n        distance = abs(people_array[i] - people_array[i-1])\n        distances.append(distance)\n\n    # Initialize the minimum distance.\n    min_distance = min(distances)\n\n    # Initialize the minimum distance squared.\n    min_distance_squared = min_distance ** 2\n\n    # Initialize the total distance.\n    total_distance = 0\n\n    # Iterate through the people array.\n    for i in range(total_people):\n        # Calculate the distance between the current person and the i-th person.\n        # Convert the distance to an integer.\n        # Calculate the distance squared.\n        distance_squared = abs(people_array[i] - people_array[i-1]) ** 2\n        # Calculate the distance.\n        distance = distance_squared ** 0.5\n        # Calculate the total distance.\n        total_distance += distance\n\n    # Calculate the minimum total distance.\n    total_distance -= min_distance_squared\n\n    # Return the minimum total distance.\n    return total_distance\n"
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return \"The solution to the problem should be here.\""
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x_array = [int(item) for item in stdin.split(\" \")]\n    x_array.sort()\n    mid = n // 2\n    while True:\n        left = x_array[:mid]\n        right = x_array[mid:]\n        left_sum = sum([(item - left[-1]) ** 2 for item in left])\n        right_sum = sum([(item - right[0]) ** 2 for item in right])\n        if left_sum > right_sum:\n            mid -= 1\n        else:\n            return left_sum + right_sum\n\ndef"
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Returns the minimum total stamina the N people have to spend.\n\n    >>> solution(\"2\\n1 4\")\n    5\n    \"\"\"\n\n    # In order to find the minimum total number of stamina that N people have to spend,\n    # we first calculate the minimum number of stamina for each person,\n    # then sum up all the minimum stamina numbers and return it.\n\n    # Get the input\n    n, *xs = [int(s) for s in stdin.split()]\n\n    # Find the minimum stamina that each person has to spend\n    mins = [x ** 2 for x in xs]\n\n    # Find the total minimum stamina for N people\n    return sum(mins)\n"
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    x = list(map(int, stdin.readline().strip().split()))\n    print(n, x)"
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    points = list(map(int, stdin.readline().split()))\n\n    return sum((p - 2) ** 2 for p in points)"
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, *xs = stdin.split(\"\\n\")\n    N = int(N)\n    xs = list(map(int, xs))\n    xs = sorted(set(xs))\n\n    def dist(x):\n        return sum(map(lambda x: x ** 2, xs))\n\n    low, high = 0, dist(xs[-1])\n    while low < high:\n        mid = (low + high) // 2\n        if dist(mid) > N:\n            high = mid\n        else:\n            low = mid + 1\n    return high\n\nprint(solution(stdin))\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"2\\n1 4\")\n    5\n    \"\"\"\n    num_people, *coordinates = stdin.split()\n    return str(\n        int(\n            min(\n                sum(\n                    abs(int(coordinate) - int(coordinate))\n                    for coordinate in coordinates\n                )\n            )\n        )\n    )\n"
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(a // b)\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = list(map(int, stdin.split(\" \")))\n    # a = 4, b = 10\n    return str(a - 1 + (b - a - 1))\n"
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split(' '))\n    return str(a - b + 1)"
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # 1 <= A <= 20, 1 <= B <= 20\n    A, B = map(int, stdin.readline().strip().split())\n    return str(A // (B - 1)) + \" power strips, each with \" + str(A) + \" sockets, extend the socket into \" + str(B) + \" empty sockets.\""
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return"
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    num_a, num_b = map(int, stdin.split(' '))\n    return str(num_b - num_a + 1)\n"
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # -----Input-----\n    A, B = map(int, stdin.readline().split())\n    # -----Solution-----\n    return str(A * B // (A + B))"
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Modify your code below this line\n    line = stdin.split(\" \")\n    a = int(line[0])\n    b = int(line[1])\n    print(a+1)"
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n  # Get input from stdin\n  A, B = [int(x) for x in stdin.split()]\n  return str(math.ceil((B - A + 1) / A))\n\n-----Test Case-----\nTest 1\nInput:\n4 10\n\nOutput:\n3\nExplanation:\nThe minimum number of power strips required is 3.\nEach power strip with 4 sockets, extend the socket into 10 empty sockets.\n\n-----Test Case-----\nTest 2\nInput:\n1 2\n\nOutput:\n0\nExplanation:\nThe minimum number of power strips required is 0.\n\n-----Test Case-----\nTest 3\nInput:\n1 1\n\nOutput:\n1\nExplanation:\nThe minimum number of power strips required is 1.\n\n-----Test Case-----\nTest 4\nInput:\n10 10\n\nOutput:\n1\nExplanation:\nThe minimum number of power strips required is 1.\n\n-----Test Case-----\nTest 5\nInput:\n3 3\n\nOutput:\n0\nExplanation:\nThe minimum number of power strips required is 0.\n\n-----Test Case-----\nTest 6\nInput:\n5 5\n\nOutput:\n0\nExplanation:\nThe minimum number of power strips required is 0.\n\n-----Test Case-----\nTest 7\nInput:\n1 1\n\nOutput:\n1\nExplanation:\nThe minimum number of power strips required is 1.\n\n-----Test Case-----\nTest 8\nInput:\n20 20\n\nOutput:\n0\nExplanation:\nThe minimum number of power strips required is 0.\n\n-----Test Case-----\nTest 9\nInput:\n20 10\n\nOutput:\n1\nExplanation:\nThe minimum number of power strips required is 1.\n\n-----Test Case-----\nTest 10\nInput:\n1 1\n\nOutput:\n1\nExplanation:\nThe minimum number of power strips required is 1.\n\"\"\"\nimport math\ndef"
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, M = list(map(int, stdin.split(' ')))\n    return N - M\n"
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    weather_forecast: list = stdin.split('\\n')\n    correct_days: int = 0\n    for day in weather_forecast:\n        day = day.split(' ')\n        if day[0] == 'C':\n            if day[1] == 'S':\n                correct_days += 1\n        if day[0] == 'R':\n            if day[1] == 'C':\n                correct_days += 1\n    return correct_days\n\ndef"
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    forecast: str = stdin.readline()\n    actual: str = stdin.readline()\n    return f'{forecast.count(actual[0])}'\n"
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the number of days for which the forecast was correct.\"\"\"\n    sunny_count = 0\n    rainy_count = 0\n    sunny_days = []\n    rainy_days = []\n    for day in stdin:\n        if day == \"C\":\n            rainy_count += 1\n            rainy_days.append(day)\n        elif day == \"R\":\n            rainy_count += 1\n            rainy_days.append(day)\n        else:\n            sunny_count += 1\n            sunny_days.append(day)\n    correct_days = []\n    for day in sunny_days:\n        if day == \"S\":\n            correct_days.append(day)\n    for day in rainy_days:\n        if day == \"C\":\n            correct_days.append(day)\n    return len(correct_days)\n"
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = stdin\n    return '1' if b == c else '0'\n"
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    sunny_count = stdin.count(\"S\")\n    rainy_count = stdin.count(\"R\")\n    return \"{}\\n{}\\n{}\\n\".format(sunny_count, rainy_count, sunny_count + rainy_count)"
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    forecast = stdin[:3]\n    actual = stdin[3:]\n    if forecast == actual:\n        return f'{actual}'\n    return f'{forecast}'\n"
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    day1 = stdin[0]\n    day2 = stdin[1]\n    day3 = stdin[2]\n    if day1 == day2:\n        if day2 == day3:\n            return '3'\n        else:\n            return '2'\n    else:\n        if day1 == day3:\n            return '2'\n        else:\n            return '1'\n"
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split('\\n')\n    correct = 0\n    for i, letter in enumerate(T):\n        if S[i] == letter:\n            correct += 1\n    return str(correct)\n"
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # :input_string: a string of length 3 where the i-th character represents the weather for the i-th day in the past.\n    # :actual_string: a string of length 3 where the i-th character represents the actual weather on that day.\n    # :output_string: the string representing the number of days for which the forecast was correct.\n    return \"\"\n"
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    sunny, cloudy, rainy = stdin.split('\\n')\n    sunny_days = 0\n    cloudy_days = 0\n    rainy_days = 0\n    for day in sunny:\n        if day == 'S':\n            sunny_days += 1\n    for day in cloudy:\n        if day == 'C':\n            cloudy_days += 1\n    for day in rainy:\n        if day == 'R':\n            rainy_days += 1\n    print(sunny_days + cloudy_days + rainy_days)"
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    p = list(map(int, stdin.split()))\n    p_3, p_4, p_5 = p[0], p[1], p[2]\n    for i in range(1, n - 1):\n        if p[i] < p[i - 1] and p[i] < p[i + 1]:\n            p_3, p_4, p_5 = p_4, p_5, p[i]\n        elif p[i] > p[i - 1] and p[i] > p[i + 1]:\n            p_3, p_4, p_5 = p_3, p_4, p[i]\n        elif p[i] > p[i - 1] and p[i] < p[i + 1]:\n            p_3, p_4, p_5 = p_3, p[i], p_5\n        else:\n            p_3, p_4, p_5 = p[i], p_3, p_5\n    return p_4\n    pass\n"
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    p = [int(item) for item in stdin.split()]\n    count = 0\n    for i in range(1, n - 1):\n        if p[i - 1] < p[i] > p[i + 1]:\n            count += 1\n    return count\n"
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    arr = [int(i) for i in stdin.split()[1:]]\n    temp = []\n    count = 0\n    for i in range(n):\n        if i == 0:\n            temp.append(arr[i])\n            temp.append(arr[i + 1])\n        elif i == n - 1:\n            temp.append(arr[i])\n            temp.append(arr[i - 1])\n        else:\n            temp.append(arr[i])\n            temp.append(arr[i + 1])\n            temp.append(arr[i - 1])\n        if sorted(temp) == [arr[i], arr[i + 1], arr[i - 1]]:\n            count += 1\n        temp = []\n    return count\n"
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"TODO: Docstring\"\"\"\n    n = int(stdin.readline())\n    numbers = [int(x) for x in stdin.readline().split()]\n    numbers.sort()\n    ans = 0\n    for i in range(1, n - 1):\n        if numbers[i] > numbers[i - 1] < numbers[i + 1]:\n            ans += 1\n    return str(ans)\n\ndef"
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, *input_strs = stdin.split('\\n')\n    input_list = list(map(int, input_strs))\n    n = int(n)\n    permutation = input_list[1:]\n    n_smallest_numbers = n * (n - 1) // 2\n    number_of_satisfied_numbers = 0\n    for i in range(n - 1):\n        if permutation[i] < permutation[i + 1]:\n            number_of_satisfied_numbers += 1\n    return str(number_of_satisfied_numbers)\n"
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the number of elements p_i (1 < i < n) that satisfy the condition.\"\"\"\n    data = list(map(int, stdin.split()))\n    n = data[0]\n    p = data[1:]\n    if n < 3:\n        return 0\n    if n == 3:\n        return 2\n    \n    result = 0\n    for i in range(2, n):\n        if p[i] > p[i - 1]:\n            if p[i - 1] < p[i] < p[i + 1]:\n                result += 1\n    return result"
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    num_cases = int(stdin.readline())\n    for _ in range(num_cases):\n        n = int(stdin.readline())\n        num_numbers = n\n        numbers = [int(number) for number in stdin.readline().split()]\n        min1 = min(numbers)\n        numbers.remove(min1)\n        min2 = min(numbers)\n        min3 = min(numbers)\n        first = True\n        count = 0\n        for i in range(n):\n            if numbers[i] < min1 and numbers[i] > min2:\n                count += 1\n        for i in range(n):\n            if first and numbers[i] < min1 and numbers[i] > min2:\n                count += 1\n                first = False\n            elif not first and numbers[i] < min1 and numbers[i] > min2 and numbers[i]!= min3:\n                count += 1\n        print(count)\n    return ''\n"
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    if __name__ == '__main__':\n        n = int(stdin.readline())\n        l = list(map(int, stdin.readline().split()))\n        count = 0\n        for i in range(n):\n            if i == 0:\n                if l[i + 1] > l[i] < l[i + 2]:\n                    count += 1\n            elif i == n - 1:\n                if l[i - 1] < l[i] > l[i - 2]:\n                    count += 1\n            else:\n                if l[i - 1] < l[i] < l[i + 1] or l[i - 1] > l[i] > l[i + 1]:\n                    count += 1\n        print(count)\n    return \"\"\n\nprint(solution(input().strip()))"
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    print(n)\n    array = list(map(int, stdin.readline().split(' ')))\n    print(array)\n    array.sort()\n    print(array)\n    count = 0\n    for i in range(1, n - 1):\n        if array[i] > array[i - 1] and array[i] > array[i + 1]:\n            count += 1\n    return count\n"
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    p = list(map(int, stdin.readline().split()))\n    \n    ans = 0\n    for i in range(n):\n        if i < n - 2:\n            if p[i] < p[i + 1] and p[i + 1] < p[i + 2]:\n                ans += 1\n        else:\n            if p[i] < p[i + 1]:\n                ans += 1\n    print(ans)\n    return ''\n"
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    N = int(stdin)\n    points = []\n    for _ in range(N):\n        line = stdin.readline().split()\n        points.append([float(line[0]), float(line[1])])\n\n    inter = list(set(points))\n    inter_num = len(inter)\n    count = 0\n    for i in range(inter_num):\n        for j in range(i + 1, inter_num):\n            count += (inter[i][0] - inter[j][0]) * (inter[i][1] + inter[j][1])\n    return str(count / 2)\n"
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the angle between the legs of a parallelogram.\n\n    Args:\n        stdin (str): The input string with lines for 2D points.\n\n    Returns:\n        str: The solution to the problem statement.\n    \"\"\"\n\n    # Get the number of points from the input.\n    num_points = int(stdin.splitlines()[0])\n\n    # The first line of input is the angle between the legs.\n    theta = math.degrees(math.atan2(\n        stdin.splitlines()[1][1] - stdin.splitlines()[2][1],\n        stdin.splitlines()[2][0] - stdin.splitlines()[1][0]\n    ))\n\n    # The next n lines of input are the points.\n    points = stdin.splitlines()[3:]\n\n    # Add them to a dictionary and check if they form a rectangle.\n    point_dict = {}\n\n    # If there are less than 2 points, then the points do not form a rectangle.\n    if len(points) < 2:\n        return \"0\"\n\n    # Store the points as tuples and check if the points are in a rectangle.\n    for i in range(len(points)):\n        point_dict[i] = (float(points[i].split(\" \")[0]), float(points[i].split(\" \")[1]))\n        if (point_dict[i][0] <= 0 or point_dict[i][1] <= 0):\n            return \"0\"\n\n    # Get the coordinates of the points.\n    points_x = [point[0] for point in point_dict.values()]\n    points_y = [point[1] for point in point_dict.values()]\n\n    # Get the mean of the x and y coordinates.\n    mean_x = sum(points_x) / len(points_x)\n    mean_y = sum(points_y) / len(points_y)\n\n    # Get the longest distance between two points.\n    dist_x = max(points_x) - min(points_x)\n    dist_y = max(points_y) - min(points_y)\n\n    # Calculate the radius of the rectangle.\n    radius = math.sqrt((dist_x ** 2) + (dist_y ** 2))\n\n    # Calculate the area of the rectangle.\n    area = math.pi * radius ** 2\n\n    # Calculate the triangle area.\n    area_triangle = 0.5 * (points_x[0] * points_y[1] + points_x[1] * points_y[0] + points_x[2] * points_y[3])\n    area_triangle = abs(area_triangle)\n\n    # Calculate the trapeze area.\n    area_trapeze = sum(points_x) * mean_y - sum(points_y) * mean_x\n\n    # Calculate the area.\n    area_ans = area + area_triangle + area_trapeze\n\n    # Calculate the angle between the legs.\n    theta_ans = theta + math.degrees(math.atan2(area_ans, 2 * radius))\n\n    # Format the answer.\n    ans = str(round(theta_ans, 2))\n\n    return ans\n"
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin.readline())\n    a: List[List[int]] = [list(map(int, stdin.readline().split())) for _ in range(n)]\n    b: List[List[int]] = [list(map(int, stdin.readline().split())) for _ in range(n)]\n    c: List[List[int]] = [list(map(int, stdin.readline().split())) for _ in range(n)]\n    a_s: List[float] = list(map(lambda x: sum(x) / len(x), a))\n    b_s: List[float] = list(map(lambda x: sum(x) / len(x), b))\n    c_s: List[float] = list(map(lambda x: sum(x) / len(x), c))\n    ab_s: List[float] = list(map(lambda x, y: sum(x) * sum(y) / len(x) / len(y), a, b))\n    ac_s: List[float] = list(map(lambda x, y: sum(x) * sum(y) / len(x) / len(y), a, c))\n    bc_s: List[float] = list(map(lambda x, y: sum(x) * sum(y) / len(x) / len(y), b, c))\n    theta_s: List[float] = list(map(lambda x, y: 2 * x * y / (x ** 2 + y ** 2), a_s, b_s))\n    mu_s: List[float] = list(map(lambda x, y: 2 * x * y / (x ** 2 + y ** 2), a_s, c_s))\n    nu_s: List[float] = list(map(lambda x, y: 2 * x * y / (x ** 2 + y ** 2), b_s, c_s))\n    m: float = sum(theta_s) / n\n    s_s: float = math.sqrt(sum([(i - m) ** 2 for i in theta_s]) / n)\n    print(f\"{round(m, 2)} {round(s_s, 2)}\")\n    return \"\"\n"
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n"
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    points = []\n    for i in range(1, n + 1):\n        x, y = map(float, stdin.splitlines()[i].split())\n        points.append((x, y))\n    x = [p[0] for p in points]\n    y = [p[1] for p in points]\n    x_sum = sum(x)\n    y_sum = sum(y)\n    x_square_sum = sum([x ** 2 for x in x])\n    y_square_sum = sum([y ** 2 for y in y])\n    x_y_sum = sum([x * y for x, y in zip(x, y)])\n    square_sum = sum([x ** 2 for x in x])\n    a = (\n        x_y_sum\n        - n * x_sum * y_sum / n\n        - x_sum ** 2 / n\n        + y_sum ** 2 / n\n        - square_sum / n\n    ) / (n * x_square_sum - (x_sum) ** 2)\n    b = (y_square_sum - a * x_square_sum) / n\n    angle = a ** 2 / (1 + a ** 2) * (1 / b - 1 / a)\n    if angle > 1:\n        print(math.sqrt(angle))\n        return\n\n    print(math.sqrt(1 + angle))\n"
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    number_of_points = int(stdin[0])\n\n    point_coordinates = [tuple(map(float, stdin[i].split())) for i in range(1, number_of_points + 1)]\n\n    #get the x and y axis\n    x_axis = [i[0] for i in point_coordinates]\n    y_axis = [i[1] for i in point_coordinates]\n    #Get the average of the y axis\n    y_axis_average = sum(y_axis) / len(y_axis)\n\n    #get the y axis deviation from the average\n    y_axis_deviation = [point[1] - y_axis_average for point in point_coordinates]\n    #get the x axis deviation from the average\n    x_axis_deviation = [point[0] - (sum(x_axis) / len(x_axis)) for point in point_coordinates]\n\n    #get the x and y axis deviation from the average\n    x_y_axis_deviation = [point[0] * point[1] for point in point_coordinates]\n\n    #Get the x and y axis sum\n    x_y_axis_sum = sum(x_y_axis_deviation)\n    x_axis_sum = sum(x_axis_deviation)\n    y_axis_sum = sum(y_axis_deviation)\n\n    #Get the x and y axis denominator\n    x_y_axis_denom = len(x_y_axis_deviation)\n    x_axis_denom = len(x_axis_deviation)\n    y_axis_denom = len(y_axis_deviation)\n\n    #Calculate the x and y axis numerator\n    x_y_axis_numer = x_y_axis_sum - ((x_axis_sum * y_axis_sum) / x_y_axis_denom)\n    x_axis_numer = x_axis_sum - ((sum(x_axis) / len(x_axis)) * x_axis_sum)\n    y_axis_numer = y_axis_sum - ((sum(y_axis) / len(y_axis)) * y_axis_sum)\n\n    #Calculate the x and y axis denominator\n    x_axis_denom_2 = len(x_axis_deviation) - 2\n    y_axis_denom_2 = len(y_axis_deviation) - 2\n\n    #Calculate the x and y axis denominator\n    x_y_axis_denom_3 = x_y_axis_denom_2 * x_y_axis_denom_2\n    x_axis_denom_3 = x_axis_denom_2 * x_axis_denom_2\n    y_axis_denom_3 = y_axis_denom_2 * y_axis_denom_2\n\n    #Calculate the x and y axis numerator\n    x_y_axis_numer_4 = x_y_axis_numer * x_y_axis_numer\n    x_axis_numer_4 = x_axis_numer * x_axis_numer\n    y_axis_numer_4 = y_axis_numer * y_axis_numer\n\n    #Calculate the x and y axis denominator\n    x_y_axis_denom_5 = x_y_axis_denom_3 * x_y_axis_denom_3\n    x_axis_denom_5 = x_axis_denom_3 * x_axis_denom_3\n    y_axis_denom_5 = y_axis_denom_3 * y_axis_denom_3\n\n    #Calculate the x and y axis denominator\n    x_y_axis_denom_6 = x_y_axis_denom_5 * x_y_axis_denom_5\n    x_axis_denom_6 = x_axis_denom_5 * x_axis_denom_5\n    y_axis_denom_6 = y_axis_denom_5 * y_axis_denom_5\n\n    #Calculate the x and y axis denominator\n    x_y_axis_denom_7 = x_y_axis_denom_6 * x_y_axis_denom_6\n    x_axis_denom_7 = x_axis_denom_6 * x_axis_denom_6\n    y_axis_denom_7 = y_axis_denom_6 * y_axis_denom_6\n\n    #Get the x and y axis division\n    x_y_axis_div = x_y_axis_numer_4 / x_y_axis_denom_7\n    x_axis_div = x_axis_numer_4 / x_axis_denom_7\n    y_axis_div = y_axis_numer_4 / y_axis_denom_7\n\n    #Get the x and y axis square\n    x_y_axis_sq = x_y_axis_div * x_y_axis_div\n    x_axis_sq = x_axis_div * x_axis_div\n    y_axis_sq = y_axis_div * y_axis_div\n\n    #Calculate the x and y axis sum\n    x_y_axis_sum = x_y_axis_sq + x_axis_sq + y_axis_sq\n\n    #Get the x and y axis square\n    x_y_axis_sq_2 = x_y_axis_sum - x_axis_sum * x_axis_sum\n    x_axis_sq_2 = x_axis_sum - y_axis_sum * y_axis_sum\n    y_axis_sq_2 = y_axis_sum - x_axis_sum * x_axis_sum\n\n    #Get the x and y axis square\n    x_y_axis_sq_3 = x_y_axis_sq_2 * x_y_axis_sq_2\n    x_axis_sq_3 = x_axis_sq_2 * x_axis_sq_2\n    y_axis_sq_3 = y_axis_sq_2 * y_axis_sq_2\n\n    #Calculate the x and y axis square\n    x_y_axis_sq_4 = x_y_axis_sq_3 + x_axis_sq_3 + y_axis_sq_3\n\n    #Get the x and y axis square\n    "
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Determine the area of the triangle with the given coordinates, and return the angle whose cosine is equal to that area.\n\n    :param stdin: The input string\n    :return: The answer to the problem statement\n    \"\"\"\n\n    # Iterate over each line, and parse the x and y coordinates\n    # Append each point to a list of points\n    # Determine the area of the polygon using Heron's formula\n    # Return the angle whose cosine is equal to that area\n\n    pass\n"
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"8\\n-2.14 2.06\\n-1.14 2.04\\n-2.16 1.46\\n-2.14 0.70\\n-1.42 0.40\\n-0.94 -0.48\\n-1.42 -1.28\\n-2.16 -1.62\")\n    '5.410'\n    >>> solution(\"5\\n2.26 1.44\\n2.28 0.64\\n2.30 -0.30\\n1.58 0.66\\n3.24 0.66\")\n    '5.620'\n    >>> solution(\"8\\n6.98 2.06\\n6.40 1.12\\n5.98 0.24\\n5.54 -0.60\\n7.16 0.30\\n7.82 1.24\\n8.34 0.24\\n8.74 -0.76\")\n    '5.480'\n    >>> solution(\"5\\n10.44 2.06\\n10.90 0.80\\n11.48 -0.48\\n12.06 0.76\\n12.54 2.06\")\n    '6.040'\n    >>> solution(\"8\\n16.94 2.42\\n15.72 2.38\\n14.82 1.58\\n14.88 0.50\\n15.76 -0.16\\n16.86 -0.20\\n17.00 0.88\\n16.40 0.92\")\n    '6.720'\n    \"\"\"\n    x, y = [], []\n    for i in stdin.split(\"\\n\"):\n        x_, y_ = i.split(\" \")\n        x.append(float(x_))\n        y.append(float(y_))\n    x = sorted(x)\n    y = sorted(y)\n    i, j = 0, 0\n    while i < len(x) and j < len(y):\n        if x[i] < y[j]:\n            i += 1\n        elif x[i] > y[j]:\n            j += 1\n        else:\n            return str(abs(x[i] - y[j]))\n    return str(abs(x[i] - y[j]))\n"
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    points = [stdin.split()[i:i + 2] for i in range(1, len(stdin.split()), 2)]\n    points = np.array([[int(point[0]), int(point[1])] for point in points])\n    avg = np.mean(points, axis=0)\n    return avg[0]\n\n\nprint(solution('8\\n-2.14 2.06\\n-1.14 2.04\\n-2.16 1.46\\n-2.14 0.70\\n-1.42 0.40\\n-0.94 -0.48\\n-1.42 -1.28\\n-2.16 -1.62'))\n"
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # My Solution: O(n) Time and O(1) Space\n    n = int(stdin)\n    if n == 1:\n        return 0\n    X = []\n    Y = []\n    for i in range(n):\n        a, b = map(float, stdin.split('\\n')[i].split())\n        X.append(a)\n        Y.append(b)\n    #  find the theta\n    theta_list = []\n    for i in range(n):\n        for j in range(i + 1, n):\n            theta = (\n                (X[j] - X[i]) * (Y[i] ** 2 + Y[j] ** 2) / 2 -\n                (Y[i] - Y[j]) * (X[i] ** 2 + X[j] ** 2) / 2\n            ) / (\n                (X[j] - X[i]) * (X[i] ** 2 + X[j] ** 2) / 2 +\n                (Y[i] - Y[j]) * (Y[i] ** 2 + Y[j] ** 2) / 2\n            )\n            theta_list.append(theta)\n    theta_list.sort()\n    return theta_list[n - 2]\n"
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    max_cups = int(stdin[0].split()[0])\n    max_pages = int(stdin[0].split()[1])\n\n    cups = [int(i) for i in stdin[1].split()]\n\n    max_pages = max(max_pages, sum(cups))\n    pages_per_day = max_pages\n    if len(cups) == 1:\n        if max_pages % cups[0]!= 0:\n            return 'Impossible'\n        return str(max_pages // cups[0])\n    else:\n        # current_cups = max_pages // max_cups\n        current_pages = 0\n        days = 0\n        while pages_per_day >= max_cups:\n            days += 1\n            pages_per_day -= max_cups\n\n            # if current_cups >= len(cups):\n            #     current_cups = len(cups) - 1\n            # else:\n            #     current_cups += 1\n\n            current_pages = pages_per_day\n            for i in range(len(cups)):\n                current_pages += max(cups[i] - 1, 0)\n                if current_pages >= max_cups:\n                    break\n            else:\n                break\n\n        # if current_cups >= len(cups):\n        #     current_cups = len(cups) - 1\n        # else:\n        #     current_cups += 1\n\n        return str(days) if current_pages >= max_cups else 'Impossible'\n"
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split(\" \")]\n    cups = [int(x) for x in stdin.split(\" \")]\n    result = 0\n    while result < m:\n        result += max(0, cups[0] - 1)\n        cups.pop(0)\n        if len(cups) == 0:\n            return -1\n        result += max(0, cups[0] - 2)\n        cups.pop(0)\n        if len(cups) == 0:\n            return -1\n        result += max(0, cups[0] - 3)\n        cups.pop(0)\n        if len(cups) == 0:\n            return -1\n        result += max(0, cups[0] - 4)\n        cups.pop(0)\n        if len(cups) == 0:\n            return -1\n    return result"
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = stdin.split()\n    caf = [int(i) for i in stdin.split()]\n    m = int(m)\n    n = int(n)\n    if len(caf) < m:\n        return \"Impossible\"\n    elif n == 1:\n        return str(m // caf[0])\n    else:\n        return str(m // min(caf))\n"
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    cups, pages = [int(x) for x in stdin.split(' ')]\n    cups = [int(x) for x in stdin.split(' ')]\n\n    result = 0\n    for i in range(pages):\n        max_cups = max(cups)\n        if max_cups > pages - i:\n            result = -1\n            break\n        cups.remove(max_cups)\n        result += 1\n    return str(result)\n"
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(i) for i in stdin.split()]\n    cups = [int(i) for i in stdin.split()]\n    cups.sort()\n\n    a = m // n\n    b = m % n\n    d = {}\n    for i in range(n):\n        d[cups[i]] = cups[i + 1] if i < n - 1 else -1\n\n    ans = 1\n    p = cups[0]\n    for i in range(a):\n        ans += 1\n        p = d[p]\n        if p == -1:\n            return '-1'\n    if b > 0:\n        ans += 1\n        p = cups[n - 1]\n        for i in range(b):\n            ans += 1\n            p = d[p]\n            if p == -1:\n                return '-1'\n    return ans\n\"\"\"\nimport sys\nsys.setrecursionlimit(2000)\n\ndef"
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    c = list(map(int, stdin.split(' ')))\n    c.sort()\n    i = 1\n    while i < m and c[0] >= i:\n        i += c[0]\n    if i > m:\n        return -1\n    return i\n    "
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n\n    first_cup = [0 for i in range(n)]\n    for i in a:\n        first_cup[i - 1] += 1\n\n    first_cup = sorted(first_cup)\n\n    total = 0\n    for i in range(len(first_cup)):\n        total += (i + 1) * first_cup[i]\n\n    if total > m:\n        print(-1)\n        return\n\n    print(total)\n"
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    days, cups_of_coffee, *args = stdin.split()\n    cups_of_coffee = int(cups_of_coffee)\n    cups = list(map(int, args))\n\n    days_of_coursework = 0\n    for i in range(cups_of_coffee):\n        if cups[i] == 0:\n            continue\n        days_of_coursework += max(0, cups[i] - i)\n        if days_of_coursework > days:\n            return -1\n    return days_of_coursework\n"
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(i) for i in stdin.split(' ')]\n    a = [int(i) for i in stdin.split(' ')]\n    a.sort()\n    a = [x for x in a if x >= 1]\n    n = len(a)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = a[i]\n    for i in range(n):\n        for j in range(i + 1, n):\n            dp[i][j] = max(dp[i][j - 1], a[j] - 1)\n    for i in range(n):\n        for j in range(n - 1, i - 1, -1):\n            dp[j][i] = max(dp[j][i + 1], a[i] - j + 1)\n    print(dp)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = a[i]\n    for i in range(n - 1, -1, -1):\n        for j in range(i + 1, n):\n            dp[i][j] = max(dp[i][j - 1], a[j] - 1)\n    for i in range(n - 1, -1, -1):\n        for j in range(n - 1, i - 1, -1):\n            dp[j][i] = max(dp[j][i + 1], a[i] - j + 1)\n    print(dp)\n    min_days = n + 1\n    for i in range(n):\n        for j in range(n):\n            if dp[i][j] <= m:\n                min_days = min(min_days, j - i)\n                break\n    print(min_days if min_days!= n + 1 else -1)\n    return\n\n\nsolution(\"5 8\")\nsolution(\"7 10\")\nsolution(\"5 15\")\nsolution(\"5 26\")\nsolution(\"5 5 5 5 5\")\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    n, m = map(int, stdin.split())\n    a = [int(x) for x in stdin.split()]\n    p, s = [], []\n    for i in range(n):\n        p.append(a[i] + i)\n        s.append(a[i] - i)\n    p = sorted(p)\n    s = sorted(s)\n    if n == 1 and p[0] > 0:\n        return str(0)\n    elif m < p[0]:\n        return '-1'\n    else:\n        return str((p[0] + m) // m)\n"
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    this function parses standard input and finds all substrings that are palindromes\n    :param stdin: standard input\n    :return: string containing the longest palindrome\n    \"\"\"\n    len_s, k = [int(x) for x in stdin.split(\" \")]\n    s = [int(x) for x in stdin.split(\" \")]\n    max_num = 0\n    answer = []\n    # the length of the longest substring that is palindrome\n    for i in range(1, len_s + 1):\n        # the substring from starting point i to end\n        for j in range(len_s - i + 1):\n            # if palindrome\n            if s[j] == s[j + i - 1]:\n                tmp = s[j:j + i]\n                # if it is a max, append it\n                if i > max_num:\n                    answer = tmp\n                    max_num = i\n    return \" \".join([str(x) for x in answer])\n"
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    arr = list(map(int, stdin.split(' ')))\n\n    arr.sort()\n    diff = {}\n    for i in range(1, len(arr)):\n        diff[arr[i] - arr[i - 1]] = diff.get(arr[i] - arr[i - 1], 0) + 1\n\n    max_cnt = max(diff.values()) if diff else 0\n    ans = [key for key in diff if diff[key] == max_cnt]\n\n    return''.join(map(str, ans))\n"
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"O(N) / O(N)\"\"\"\n    n, k = map(int, stdin.split(' '))\n    arr = list(map(int, stdin.split(' ')))\n    arr.sort()\n\n    i, j = 0, k - 1\n    count = 0\n    while i < n and j >= 0:\n        if arr[i] == arr[j]:\n            i += 1\n            j -= 1\n        else:\n            j -= 1\n            count += 1\n\n    if j < 0:\n        return''.join(map(str, arr[:i]))\n    else:\n        return''.join(map(str, arr[:i] + arr[j + 1:]))\n"
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"7 3\\n1 2 3 2 4 3 1\")\n    '1 2 3'\n    >>> solution(\"10 4\\n1 3 1 3 10 3 7 7 12 3\")\n    '7 3 1 3'\n    >>> solution(\"15 2\\n1 2 1 1 1 2 1 1 2 1 2 1 1 1\")\n    '1 1'\n    \"\"\"\n    n, k = map(int, stdin.split())\n    s = list(map(int, stdin.split()))\n    s.sort()\n    r = [s[0]]\n    for i in range(n):\n        if s[i] == r[-1]:\n            r.append(s[i])\n            continue\n        elif s[i] > r[-1]:\n            r.append(s[i])\n        else:\n            break\n    if len(r) < k:\n        return \"\"\n    else:\n        return \" \".join(map(str, r[:k]))"
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    s = [int(x) for x in stdin.split()][0:n]\n    return''.join([str(x) for x in s[0:k]])\n"
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"7 3\\n1 2 3 2 4 3 1\")\n    '1 2 3'\n    >>> solution(\"10 4\\n1 3 1 3 10 3 7 7 12 3\")\n    '7 3 1 3'\n    >>> solution(\"15 2\\n1 2 1 1 1 2 1 1 2 1 2 1 1 1\")\n    '1 1'\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Returns any array $t$ such that you can cut out maximum number of copies of array $t$ from array $s$\n    '''\n    n, k = [int(x) for x in stdin.split(' ')]\n    arr = [int(x) for x in stdin.split(' ')]\n    arr = sorted(arr)\n    ans = []\n\n    if len(arr) < k:\n        return''.join([str(x) for x in ans])\n    \n    i = 0\n    for j in range(1, k+1):\n        if arr[-1] == arr[i]:\n            ans.append(arr[i])\n            arr.pop()\n            i += 1\n        else:\n            ans.append(arr[i])\n            arr.pop()\n            i += 1\n\n    return''.join([str(x) for x in ans])\n"
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    pass\n"
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    s = [int(x) for x in stdin.split()]\n    t = [None for i in range(k)]\n    while True:\n        max_n = 0\n        for x in s:\n            if x > max_n and t.count(x) < k:\n                max_n = x\n        if max_n == 0:\n            break\n        t[s.index(max_n)] = max_n\n        s.remove(max_n)\n    print(' '.join(map(str, t)))\n"
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''\n"
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Get the maximum k such that some order of rows is k-acceptable.\"\"\"\n    row_len, col_len = [int(x) for x in stdin.split(' ')]\n    matrix = [list(map(int, row.split(' '))) for row in stdin.split('\\n')]\n\n    def is_acceptable(sequence):\n        \"\"\"Check if the given sequence of rows is acceptable.\"\"\"\n        return all(abs(sequence[i] - sequence[i + 1]) >= k\n                   for i in range(len(sequence) - 1))\n\n    def recursive_solution(matrix, row_len, col_len, k):\n        \"\"\"Find a solution for the problem using a recursive backtracking algorithm.\"\"\"\n        if not matrix or not matrix[0]:\n            return 0\n\n        for i in range(row_len):\n            matrix[i].sort(reverse=True)\n        sequence = [[matrix[j][0] for j in range(row_len)]]\n        for j in range(1, col_len):\n            sequence.append([matrix[i][j] for i in range(row_len)])\n            if is_acceptable(sequence):\n                return k + 1\n        if k == 0:\n            return 0\n        return max(recursive_solution(matrix, row_len, col_len, k - 1),\n                   recursive_solution(matrix, row_len, col_len, k))\n\n    return str(recursive_solution(matrix, row_len, col_len, k=5))\n"
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    n, m = map(int, stdin.split())\n    a = []\n    for i in range(n):\n        a.append(list(map(int, stdin.split())))\n    x = 0\n    for j in range(m):\n        s = [a[i][j] for i in range(n)]\n        if len(set(s))!= len(s):\n            x = max(x, 1)\n        else:\n            y = min(s)\n            for i in range(n):\n                if s[i]!= y:\n                    x = max(x, abs(s[i]-y))\n    return str(x)\n"
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution for one sample test\"\"\"\n    n, m = map(int, stdin.split('\\n')[0].split(' '))\n    a = [[0] * m for i in range(n)]\n    for i, row in enumerate(stdin.split('\\n')[1:]):\n        for j, cell in enumerate(row.split(' ')):\n            a[i][j] = int(cell)\n    s = []\n    for j in range(m):\n        s.append([])\n        for i in range(n):\n            s[j].append(a[i][j])\n    print(s)\n    k = 0\n    for i in range(m - 1):\n        if len(set(s[i]))!= n:\n            k = max(k, i + 1)\n    return str(k)"
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"\"\"4 2\n   ... 9 9\n   ... 10 8\n   ... 5 3\n   ... 4 3\"\"\")\n    5\n    \"\"\"\n    n, m = [int(x) for x in stdin.split(\"\\n\")[:2]]\n    arr = [[int(x) for x in row.split()] for row in stdin.split(\"\\n\")[2:]]\n    return max(\n        k\n        for k in range(1, n + 1)\n        if any(\n            sum(abs(a[i] - a[i + 1]) >= k for i in range(len(a) - 1))\n            for a in [arr[i][:k] for i in range(n)]\n        )\n    )\n"
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    pass\n"
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    rows_count, cols_count = map(int, stdin.readline().split())\n    matrix = []\n    for _ in range(rows_count):\n        matrix.append(list(map(int, stdin.readline().split())))\n    \n    def is_acceptable_traversal(k: int) -> bool:\n        order = []\n        col = 0\n        while col < cols_count:\n            order.append(matrix[0][col])\n            row = 1\n            while row < rows_count:\n                order.append(matrix[row][col])\n                row += 1\n            col += 1\n        return all(abs(order[i] - order[i + 1]) >= k for i in range(len(order) - 1))\n    \n    k = 1\n    while True:\n        if is_acceptable_traversal(k):\n            break\n        k += 1\n    return str(k)"
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    rows, cols = map(int, stdin.split('\\n')[0].split())\n    matrix = [list(map(int, stdin.split('\\n')[i].split())) for i in range(1, rows+1)]\n\n    def find_order(matrix):\n        n, m = len(matrix), len(matrix[0])\n\n        result = [[0 for _ in range(m)] for _ in range(n)]\n        for i in range(n):\n            result[i][0] = matrix[i][0]\n        \n        for j in range(1, m):\n            for i in range(n):\n                if i == 0:\n                    result[i][j] = matrix[i][j] + result[i+1][j-1]\n                elif i == n-1:\n                    result[i][j] = matrix[i][j] + result[i-1][j-1]\n                else:\n                    result[i][j] = matrix[i][j] + min(result[i+1][j-1], result[i-1][j-1])\n        \n        return result\n    \n    def check_order(matrix):\n        n, m = len(matrix), len(matrix[0])\n        \n        for i in range(n):\n            prev = matrix[i][0]\n            for j in range(1, m):\n                if abs(matrix[i][j] - prev) > k:\n                    return False\n                prev = matrix[i][j]\n        return True\n    \n    \n    orders = []\n    for i in range(n):\n        order = find_order(matrix)\n        orders.append(order)\n\n    max_k = 0\n    for order in orders:\n        k = max([abs(i - j) for i, j in zip(order[0], order[-1])])\n        if k > max_k:\n            max_k = k\n\n    for order in orders:\n        k = max([abs(i - j) for i, j in zip(order[0], order[-1])])\n        if k >= max_k:\n            return max_k\n    return 0\n"
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n    return stdin\n"
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\""
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return 0\n"
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return stdin\n"
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.split(\"\\n\")\n    n = int(input_data[0])\n    if n >= 3:\n        while n >= 3:\n            if input_data[1].count(\"x\") == 3:\n                n -= 1\n            else:\n                break\n        return n\n    else:\n        return 0\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin)\n    filename = stdin\n    count = 0\n    while \"xxx\" in filename:\n        num -= 1\n        filename = filename.replace(\"xxx\", \"\", 1)\n    return num\n"
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.strip(''.join([i for i in stdin if i in 'xyz']))\nprint(solution('xzxzx'))\n"
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    file_name = input().strip()\n    if file_name.find('xxx') == -1:\n        return 0\n\n    counter = 0\n    while file_name.find('xxx')!= -1:\n        file_name = file_name.replace('xxx', '', 1)\n        counter += 1\n\n    return counter\n\n\nprint(solution('3'))\nprint(solution('5'))\nprint(solution('6'))\nprint(solution('8'))\nprint(solution('10'))\n"
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    file_name = stdin\n    if 'xxx' in file_name:\n        return 0\n    return len(file_name) - file_name.rfind('x')\n\n\"\"\"\n\nimport ast\nfrom io import StringIO\n\n\nclass Logger:\n    _instance = None\n\n    def __new__(cls, *args, **kwargs):\n        if cls._instance is None:\n            cls._instance = super().__new__(cls, *args, **kwargs)\n        return cls._instance\n\n    def __init__(self):\n        self.buffer = StringIO()\n\n    def __str__(self):\n        self.flush()\n        return self.buffer.getvalue()\n\n    def write(self, message):\n        if message == '\\n':\n            self.flush()\n        else:\n            self.buffer.write(message)\n\n    def flush(self):\n        self.buffer.flush()\n\n\ndef"
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = stdin\n    return N\n"
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(3 * int(stdin) ** 2)\n"
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"Finds the area of a regular dodecagon inscribed in a circle of radius r\"\n    area = 0\n    r = int(stdin)\n    for i in range(1, 13):\n        area += ((3 * r * r * i) / 2)\n    return str(int(round(area)))"
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin.readline())\n    return str(3 * r**2)\n\"\"\"\n\nimport math\n\n\ndef"
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    return str(3 * r * r)"
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    area = (3 * r**2) / 2\n    return str(area)\n    # your solution here\n"
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return n * (3 * n ** 2 - n) // 2"
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    # code goes here\n    radius = int(stdin)\n    dodec = radius*radius*3.5\n    print(int(dodec))\n"
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the solution to the problem\n\n    Parameters\n    ----------\n    stdin : str\n        The input of the problem\n\n    Returns\n    -------\n    str\n        The solution to the problem\n    \"\"\"\n    r = int(stdin)\n\n    return 3 * r ** 2\n"
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    area = 3 * r**2\n    return area"
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    area = n * n * 3\n    print(area)\n    return str(area)"
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    S, W = map(int, stdin.split())\n    return \"safe\" if S >= W else \"unsafe\"\n\"\"\"\ndef"
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    (sheep, wolf) = [int(i) for i in stdin.split()]\n    return 'unsafe' if wolf > sheep else'safe'"
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    sheep, wolf = list(map(int, stdin.split()))\n    if wolf <= sheep:\n        return \"safe\"\n    else:\n        return \"unsafe\"\n"
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split()\n    sheep, wolf = int(input_list[0]), int(input_list[1])\n    if sheep > wolf:\n        print('unsafe')\n    else:\n        print('safe')"
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s, w = map(int, stdin.strip().split(' '))\n    return \"unsafe\" if w >= s else \"safe\""
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \n    return \"\"\n    \n"
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nS, W = list(map(int, input().split()))"
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return \"unsafe\" if int(stdin.split(' ')[0]) >= int(stdin.split(' ')[1]) else \"safe\"\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    (s, w) = [int(s) for s in stdin.split(' ')]\n    if w >= s:\n        return 'unsafe'\n    return'safe'"
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    S, W = map(int, stdin.split())\n    if W >= S:\n        return \"unsafe\"\n    return \"safe\""
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Finds the area of a triangle given three side lengths\n    :param stdin: standard input\n    :return: area of the triangle\n    \"\"\"\n    triangle = [int(x) for x in stdin.split(' ')]\n    a, b, c = triangle\n    s = (a + b + c) / 2\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    return str(int(area))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(v) for v in stdin.split()]\n    s = (a + b + c) / 2\n    return int(s * (s - a) * (s - b) * (s - c)) ** 0.5\n"
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n\n    s = (a + b + c) / 2\n\n    import math\n\n    area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n\n    return str(int(area))\n"
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    lengths = [int(x) for x in stdin.split(\" \")]\n    first_length = lengths[0]\n    second_length = lengths[1]\n    third_length = lengths[2]\n    s = first_length * second_length * third_length / 2\n    print(s)\n    return s\n"
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(x) for x in stdin.split(' ')]\n    s = (a + b + c) / 2\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    return area\n"
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    [a, b, c] = [int(x) for x in stdin.strip().split(' ')]\n    return str(a * b * c)\n"
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(x) for x in stdin.split(' ')]\n    s = (a + b + c) / 2\n    return str(s * (s - a) * (s - b) * (s - c))"
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    lst = [float(i) for i in stdin.split()]\n    a, b, c = sorted(lst, reverse=True)\n    h = c * (a + b) / 2\n    return '{}'.format(int(h))\n"
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split(' '))\n    return str(int(a * b * c))\n\"\"\"\n\ndef"
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('3 4 5\\n')\n    '6'\n    \"\"\"\n    a, b, c = map(int, stdin.split())\n    s = (a + b + c) / 2\n    return str(int(s * (s - a) * (s - b) * (s - c)))\n"
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = list(map(int, stdin.split(' ')))\n    return str(a // (b * c) + 1)\n"
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    money = stdin.split('\\n')\n    print(money)\n    print(money[0])\n    print(money[1])\n    return money[0]"
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    return str(b // (c - a + 1) - 1)\n    \n"
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split(\" \")\n    x = int(input[0])\n    y = int(input[1])\n    z = int(input[2])\n    # if x + y >= z and x * y >= z:\n    #     return f'{z}'\n    # else:\n    #     return f'{x + y}'\n    return f'{max(x + y, x * y, z)}'\n"
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = stdin.split(' ')\n    return str(A + B - 1)\n\"\"\"\n\ndef"
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\ndef"
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    amt_a, amt_b, amt_c = map(int, stdin.split())\n    return amt_a // (amt_b - amt_c) if amt_b - amt_c > 0 else 0\n\nprint(solution(input()))\n"
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('2 11 4')\n    4\n    \"\"\"\n    return str(stdin.count('1'))"
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return None"
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(x) for x in stdin.split(' ')]\n    return a // c if a % c == 0 else a // c + 1\n"
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n  a, b = [int(x) for x in stdin.split(' ')]\n  return str(a * b)\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(i) for i in stdin.split(' ')]\n    return str(a * b)\n"
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin.split()[0])\n    b = int(stdin.split()[1])\n    return str(a * b)\n"
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split(' '))\n    return a * b\n'''\ndef"
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Read the input and do the operation.\"\"\"\n    a, b = map(int, stdin.split())\n    return str(a * b)\n"
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(i) for i in stdin.split(' ')]\n    return str(a * b)\n"
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split(' ')\n    print(int(a) * int(b))\n\n    return None"
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\"\"\"\n\nimport sys\n\ndef"
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.split(' ')\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(a * b)"
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return a string containing a solution to the problem.\"\"\"\n    a, b, t = stdin.strip().split(' ')\n    return str(int(a) * int(b) * math.ceil(int(t) / int(a)))\n"
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, t = list(map(int, stdin.split(' ')))\n\n    return b * (t // a)"
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B, T = [int(x) for x in stdin.split()]\n    cocokies = (A * T // B) * B\n    return str(cocokies)\n"
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B, T = [int(x) for x in stdin.split(\" \")]\n    return str(A * B * ((T // A) + (0.5 if T % A!= 0 else 0)))\n"
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Get Input\n    a, b, t = [int(i) for i in stdin.split(' ')]\n    # Init Variables\n    biscuits_produced = 0\n    # Get seconds to next event\n    seconds_to_event = 0\n    while seconds_to_event <= t:\n        # Increment biscuits_produced\n        biscuits_produced += (b * seconds_to_event)\n        # Increment time\n        seconds_to_event += a\n    # Return output\n    return str(biscuits_produced)\n"
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, t = [int(n) for n in stdin.split()]\n    if b > a:\n        return a * t\n    if a % b == 0:\n        return int(t // (a / b))\n    return a * int(t // (a / b)) + (t % (a / b)) * (a - b)\n"
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, t = list(map(int, stdin.split()))\n    return str(a * b * (t + 0.5) // a)"
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''Your solution goes here.'''\n    a, b, t = map(int, stdin.split())\n    total = b\n    while t > 0:\n        total += a * (t//a)\n        t %= a\n    return total\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(i) for i in stdin.splitlines()[0].split()]\n    if (b - a) % 7 == 0:\n        return \"OK\"\n    return \"NG\"\n\nprint(solution(stdin))\n\n-----\nimport sys\ndef"
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    K, A, B = map(int, stdin.split())\n    if A % K == 0 or B % K == 0:\n        return 'OK'\n    return 'NG'\n"
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n  K, A, B = [int(x) for x in stdin.split()]\n  if A <= B and K <= B:\n    return \"OK\"\n  else:\n    return \"NG\"\n"
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n  A, B, K = map(int, stdin.split('\\n')[0].split(' '))\n  A, B = sorted([A, B])\n  for i in range(A, B+1):\n    if i % K == 0:\n      print('OK')\n      return\n  print('NG')"
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    K, A, B = map(int, stdin.split(\" \"))\n    # Implement the algorithm\n    if A % K == 0:\n        if K < A <= B:\n            return \"OK\"\n        else:\n            return \"NG\"\n    if A % K < K and A <= B:\n        return \"OK\"\n    return \"NG\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def answer(carry_dist: int, k: int) -> bool:\n        if (carry_dist % k) == 0:\n            return True\n        else:\n            return False\n\n    # Main\n    stdin = stdin.split()\n    K = int(stdin[0])\n    A, B = map(int, stdin[1].split(' '))\n    if A >= B:\n        print('NG')\n    else:\n        for i in range(A, B+1):\n            if answer(i, K):\n                print('OK')\n                break\n        else:\n            print('NG')\n"
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    K, A, B = [int(x) for x in stdin.split()]\n    if A % K == 0 and B % K == 0 and (A < B or (A + B) % K == 0):\n        return 'OK'\n    return 'NG'\n"
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.split())\n    if (B - A) % K == 0:\n        print(\"OK\")\n    else:\n        print(\"NG\")\n"
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    k, a, b = (int(i) for i in stdin.split(\"\\n\"))\n    if (a % k) and (a - 1) % k:\n        return \"NG\"\n    if (b + 1) % k == 0:\n        return \"OK\"\n    return \"NG\""
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"https://www.codewars.com/kata/5a25184119d22c04af0028b2/train/python\"\"\"\n    hours_in_world_a, hours_in_world_b = map(float, stdin.split(' '))\n    print(hours_in_world_b / hours_in_world_a)\n\nsolution('8 3')"
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    _, T = stdin.split(\" \")\n    T = int(T)\n    _, X = stdin.split(\" \")\n    X = int(X)\n    return \"{:.3f}\".format(T / X)\n"
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B = list(map(int, stdin.split()))\n    return str(A * B // (B // A) + A * (B // A) % B)"
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"8 3\")\n    2.6666666667\n    \"\"\"\n    t, x = [int(x) for x in stdin.split()]\n    print(round(t / x, 3))\n    return \"\"\n"
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Get input\n    T, X = map(int, stdin.split(\" \"))\n    return str(T / X)"
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Get input\n    input_str = stdin.split()\n    t = int(input_str[0])\n    x = int(input_str[1])\n\n    # Get output\n    output = 0\n    for i in range(t):\n        output += x\n    return str(output)\n"
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return stdout"
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds solution to problem in stdin\"\"\"\n    try:\n        T, X = map(float, stdin.split())\n        if not (0 < T <= 100):\n            raise ValueError\n        if not (0 < X <= 100):\n            raise ValueError\n        return str(X * T)\n    except ValueError:\n        return \"ValueError\"\n"
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    T, X = map(int, stdin.split())\n    return str(T / X)\n"
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    t, x = [int(i) for i in stdin.split()]\n    print(t / x)\n    return ''"
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.strip().split(\" \")\n"
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    _, b, c = stdin.split(' ')\n    b, c = int(b), int(c)\n    return str(max(0, c-b))\n"
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\"\"\"\n====Input====\n6 4 3\n====Output====\n1\n\"\"\"\nimport math\n\ndef"
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = list(map(int, stdin.split(\" \")))\n\n    return str(max(0, A - B))\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    water_remaining = min(a, c)\n    a = a - water_remaining\n    c = c - water_remaining\n    water_remaining = b - a\n    b = b - water_remaining\n    if b > 0:\n        water_remaining = b - c\n        b = b - water_remaining\n    else:\n        water_remaining = 0\n    return str(water_remaining)\n"
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    return str(max(0, c - b) + min(b, c))\n"
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = [int(x) for x in stdin.split()]\n    return str(C - B if B > C else 0)"
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split('\\n')\n    a, b, c = input[0].split()\n    a, b, c = int(a), int(b), int(c)\n    if a < b:\n        if b > c:\n            return str(0)\n        else:\n            return str(b - c)\n    elif a == b:\n        return str(0)\n    else:\n        return str(a - b)\n"
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if (a >= b) and (a >= c):\n        print(b + c - a)\n    elif (b >= a) and (b >= c):\n        print(a + c - b)\n    else:\n        print(a + b - c)\n\n\nsolution(input())\n\n'''"
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Finds the remaining water in bottle 2 after we transfer the most water.\n    :param stdin: input containing 3 numbers in a row\n    :return: string containing the amount of water left in bottle 2\n    \"\"\"\n    # parse the input\n    a, b, c = [int(number) for number in stdin.split(' ')]\n    if b >= c:\n        return 0\n    return c - b"
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    P = list(map(int, stdin.readline().split(' ')))\n    Q = list(map(int, stdin.readline().split(' ')))\n    return str(abs(P.index(N) - Q.index(N)))\n\n\ndef"
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''Given two permutations P and Q, returns |a - b|.\n    \n    :type N: int\n    :type P: str\n    :type Q: str\n    :rtype: int\n    '''\n    N = int(stdin.readline().split()[0])\n    P = list(map(int, stdin.readline().split()))\n    Q = list(map(int, stdin.readline().split()))\n    \n    return sum(abs(x - y) for x, y in zip(P, Q))\n"
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def _gen_permutation(permutation: List[int]) -> List[int]:\n        while len(permutation) > 1:\n            e = permutation.pop(0)\n            f = permutation.pop(0)\n            for i in range(len(permutation)):\n                if permutation[i] > f:\n                    permutation.insert(i, e)\n                    break\n                if i == len(permutation) - 1:\n                    permutation.append(e)\n                    break\n        return permutation\n\n    n = int(stdin.readline())\n    p = [int(i) for i in stdin.readline().strip().split()]\n    q = [int(i) for i in stdin.readline().strip().split()]\n    p = _gen_permutation(p)\n    q = _gen_permutation(q)\n    return str(abs(p.index(max(p)) - q.index(max(q))))\n"
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find |a - b|.\n\n    >>> solution('3\\n1 3 2\\n3 1 2')\n    3\n    \"\"\"\n    return stdin"
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    # line = stdin.strip().split('\\n')\n    # n = int(line[0])\n    # p = line[1].split()\n    # q = line[2].split()\n    #\n    # p.sort()\n    # q.sort()\n    #\n    # return str(abs(p.index(q[0]) - p.index(q[1])))\n\n\"\"\"\n\nfrom collections import deque\n\n\ndef"
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    input, n = stdin.split('\\n'), int(stdin.split('\\n')[0])\n    arr1, arr2 = map(int, input[0].split()), map(int, input[1].split())\n    a, b = min(arr1), min(arr2)\n    return abs(a - b)\n"
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    print(stdin)\n    stdin = stdin.split('\\n')\n    n = int(stdin[0])\n    a = int(stdin[1])\n    b = int(stdin[2])\n    \n    a = a - 1\n    b = b - 1\n    \n    def perm_to_int(perm):\n        '''\n        convert permutation into integer.\n        Permutation is represented as list of integers from 1 to n\n        '''\n        perm_str = ''.join([str(p) for p in perm])\n        return int(perm_str)\n    \n    # get all permutations\n    # use set to remove duplicates\n    perms = {perm_to_int(perm) for perm in itertools.permutations(range(1, n+1))}\n    \n    # sort and return difference\n    perm_list = sorted(perms)\n    \n    return str(abs(perm_list[a] - perm_list[b]))"
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip('\\n'))\n    perm1 = list(map(int, stdin.readline().strip('\\n').split(' ')))\n    perm2 = list(map(int, stdin.readline().strip('\\n').split(' ')))\n    perm1.sort()\n    perm2.sort()\n    return abs(perm1.index(perm2[0]) - perm2.index(perm1[0]))"
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin.readline().strip())\n    p = sorted(map(int, stdin.readline().strip().split()))\n    q = sorted(map(int, stdin.readline().strip().split()))\n\n    # O(nlogn)\n    # return abs(p.index(q[0]) - p.index(q[-1]))\n\n    # O(N)\n    a = 0\n    b = num - 1\n    for i in range(num):\n        if p[i]!= q[i]:\n            a += 1\n        if p[num - i - 1]!= q[num - i - 1]:\n            b += 1\n    return abs(a - b)\n"
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    p = lines[1]\n    q = lines[2]\n    pi = [int(i) for i in p.split()]\n    qi = [int(i) for i in q.split()]\n    pi.sort()\n    qi.sort()\n    # print(p, q, pi, qi)\n    ans = 0\n    for i in range(n):\n        if pi[i]!= qi[i]:\n            ans = i\n    print(ans)\n    return ''"
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    # I don't know how to do this.\n    return stdin"
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return len(stdin)\n"
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin\n    length = len(string)\n    max_length = 1\n    for i in range(0, length):\n        for j in range(i, length):\n            if is_ACGT_substring(string[i:j]):\n                if j - i > max_length:\n                    max_length = j - i\n    return str(max_length)\n\ndef"
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    result = ''\n    for i in range(len(stdin)):\n        substr = stdin[i:] + stdin[:i]\n        if all([x in 'ACGT' for x in substr]):\n            if len(substr) > len(result):\n                result = substr\n    return len(result)\n"
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.split('\\n')[0]"
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def is_longest_acgt(s: str, acgt: str) -> bool:\n        if acgt in s:\n            return True\n        return False\n\n    def is_acgt(s: str, acgt: str) -> bool:\n        if acgt in s:\n            return True\n        return False\n\n    s = stdin\n\n    longest_acgt = \"\"\n\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            if is_longest_acgt(s[i:j], \"ACGT\"):\n                if len(s[i:j]) > len(longest_acgt):\n                    longest_acgt = s[i:j]\n\n    return longest_acgt\n"
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    char = []\n    for c in stdin:\n        if c not in char:\n            char.append(c)\n    s = set(char)\n    if len(s) == 1:\n        return len(stdin)\n    max_len = 0\n    for i in range(len(stdin)):\n        for j in range(i + 1, len(stdin) + 1):\n            if j - i > max_len:\n                if stdin[i:j] == stdin[i:j][::-1]:\n                    max_len = j - i\n    return max_len\n"
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    k = []\n    for i in range(0, len(s)):\n        for j in range(i, len(s)):\n            if s[i:j] == s[i:j][::-1]:\n                k.append(s[i:j])\n    print(max(k))"
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin.strip()\n    max_length = 0\n    current_length = 0\n\n    for index in range(len(data)):\n        if data[index] == 'A':\n            current_length += 1\n        elif data[index] == 'C':\n            current_length += 1\n        elif data[index] == 'G':\n            current_length += 1\n        elif data[index] == 'T':\n            current_length += 1\n        else:\n            if max_length < current_length:\n                max_length = current_length\n            current_length = 0\n        if index == len(data)-1 and max_length < current_length:\n            max_length = current_length\n    return max_length\n\"\"\"\n"
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return max(substrings(stdin), key=len)\n\ndef"
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    odd = 0\n    for i in range(1, n):\n        if len(str(i)) % 2 == 1:\n            odd += 1\n    return odd\n"
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    count = 0\n    for num in range(1, n + 1):\n        if len(str(num)) % 2 == 1:\n            count += 1\n    return str(count)\n"
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    count = 0\n    for num in range(1, n+1):\n        if len(str(num))%2!= 0:\n            count += 1\n    return str(count)\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = stdin\n    N = int(N)\n    count = 0\n    for i in range(1, N + 1):\n        if len(str(i)) % 2 == 1:\n            count = count + 1\n    return str(count)\n"
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N: int = int(stdin)\n    count: int = 0\n    for x in range(1, N + 1):\n        if len(str(x)) % 2 == 1:\n            count += 1\n    return count"
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Return the number of positive integers less than or equal to N that have an odd number of digits (in base 10).\n    '''\n    n = int(stdin)\n    return len([x for x in range(1, n + 1) if len(str(x)) % 2 == 1])"
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Your solution goes here\n    a=int(stdin)\n    count=0\n    for i in range(1,a+1):\n        if len(str(i))%2!=0:\n            count+=1\n    return str(count)"
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    result = 0\n    for i in range(1, n + 1):\n        result += 1 if len(str(i)) % 2 == 1 else 0\n    return result\n\nprint(solution(input()))\n"
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    print(sum([i for i in range(1, n + 1) if len(str(i)) % 2 == 1]))\n"
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('cupofcoffee')\n    4\n    \"\"\"\n    s, t = stdin.split('\\n')\n    s_len, t_len = len(s), len(t)\n    count = 0\n    if s_len < t_len:\n        return t_len - s_len\n    while s_len > 0 and s_len!= t_len:\n        if t_len == 0:\n            break\n        if s_len > 1 and t_len > 1 and s[0] == t[0]:\n            s = s[1:]\n            s_len = s_len - 1\n            t = t[1:]\n            t_len = t_len - 1\n            count = count + 1\n        elif t_len > 1 and s[0] == t[1] and t[1] == t[0]:\n            s = s[1:]\n            s_len = s_len - 1\n            t = t[1:]\n            t_len = t_len - 1\n            count = count + 1\n        elif s[0] == t[0]:\n            s = s[1:]\n            s_len = s_len - 1\n            t = t[1:]\n            t_len = t_len - 1\n            count = count + 1\n        elif s[0] == t[1] and t[1] == t[0]:\n            s = s[1:]\n            s_len = s_len - 1\n            t = t[1:]\n            t_len = t_len - 1\n            count = count + 1\n    return t_len - s_len + count\n"
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split(\"\\n\")\n    return len(s) - len(t)\n"
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip().split('\\n')[0]\n    T = stdin.strip().split('\\n')[1]\n    diff = 0\n    i = 0\n    while i < len(S):\n        if S[i]!= T[i]:\n            diff += 1\n        i += 1\n    return diff"
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split(\"\\n\")\n    l = len(s)\n    m = len(t)\n\n    if l > m:\n        return l - m\n    else:\n        return m - l\n"
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin[0]\n    T = stdin[1]\n    dif = list(set(S) - set(T))\n    return len(dif)\n"
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    first_string, second_string = stdin.split('\\n')\n    return min([len(second_string) - second_string.find('i'), len(first_string) - first_string.find('o')])"
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.split()[0]\n    T = stdin.split()[1]\n    num_changes = 0\n    for index, i in enumerate(T):\n        if S[index]!= i:\n            num_changes += 1\n    return num_changes"
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin[0]\n    T = stdin[1]\n    count = 0\n    for i in range(len(S)):\n        if S[i]!= T[i]:\n            count += 1\n    return count"
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return''.join(map(str, [i for i in range(*map(int, stdin.split(' '))) if i % 2 == 0]))\n\nprint(solution(input()))\n\n\"\"\"\nfrom unittest import TestCase\n\nclass SolutionTest(TestCase):\n    def test1(self):\n        self.assertEqual('5 6 7 8 9', solution('3 7'))"
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nprint(solution(input()))\n"
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdout\n"
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    num_black = int(stdin)\n    black_x = num_black\n    white_x = -num_black\n\n    return str(black_x) + \" \" + str(white_x)"
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return''.join(str(i) for i in range(stdin.split(' ')[1] + 1, stdin.split(' ')[1] + 1 + K))"
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    k, x = map(int, stdin.split())\n    return''.join(map(str, [x - k, x, x + k]))\n"
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    k, x = [int(i) for i in stdin.split(' ')]\n    for i in range(x-k, x+k+1):\n        print(i, end=' ') if i > 0 else print(i, end='')"
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"Process input and run the solution.\"\n    k, x = [int(n) for n in stdin.split('\\n')[0].split()]\n    return str(sorted([n for n in range(x+1, x+k+1) if n % 2]))"
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    k, x = map(int, stdin.split())\n    k_stones = set(range(x - k, x))\n    not_k_stones = set(range(x - k + 1, x))\n    return \" \".join(str(i) for i in sorted(k_stones | not_k_stones))\n"
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # get input\n    temperature = int(stdin)\n    if temperature >= 30:\n        return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    if x >= 30:\n        return 'Yes'\n    return 'No'\n"
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return 'Yes' if int(stdin) >= 30 else 'No'\n"
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return \"No\" if int(stdin) < 30 else \"Yes\""
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    X: int = int(stdin)\n    if X >= 30:\n        return 'Yes'\n    else:\n        return 'No'\n"
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    X = stdin\n\n    if X >= 30:\n        return 'Yes'\n    else:\n        return 'No'\n"
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Your code goes here\n    stdin = int(stdin)\n    if stdin >= 30:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin\n    if int(input) >= 30:\n        return 'Yes'\n    return 'No'\n"
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    conditioner = False\n    if int(stdin) >= 30:\n        conditioner = True\n\n    return 'Yes' if conditioner else 'No'\n"
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if int(stdin) > 30 else \"No\""
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, d = map(int, stdin.split())\n    points = [tuple(map(int, stdin.split())) for _ in range(n)]\n    ans = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            diff = [points[j][k] - points[i][k] for k in range(d)]\n            for x in diff:\n                if not x % 1:\n                    ans += 1\n                    break\n    return str(ans)\n"
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return an integer, representing the number of pairs of integers with\n    distance equal to the integer.\n\n    >>> solution(\"3 2\\n1 2\\n5 5\\n-2 8\")\n    1\n    \"\"\"\n    N, D = tuple(map(int, stdin.split(\" \")))\n    points = [tuple(int(s) for s in line.split()) for line in stdin.split(\"\\n\")[1:-1]]\n    return sum(\n        i\n        for i, point in enumerate(points)\n        for point2 in points[i + 1 :]\n        if (\n            sum(abs(coord2 - coord) for coord, coord2 in zip(point, point2))\n            % D\n            == 0\n        )\n    )\n"
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    from math import sqrt\n    n, d = [int(s) for s in stdin.split()]\n    X = [tuple(int(s) for s in stdin.split('\\n')[i].split()) for i in range(1, n + 1)]\n    res = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if all([abs(x - y) % d == 0 for x, y in zip(X[i], X[j])]):\n                res += 1\n    return str(res)\n"
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin)!= 2:\n        return False\n\n    return True\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the number of pairs (i, j) (i < j) such that the distance between the i-th point and the j-th point is an integer\"\"\"\n    n, d = map(int, stdin.split())\n    points = [list(map(int, stdin.split()))[1:] for _ in range(n)]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            distance = 0\n            for d in range(d):\n                distance += (points[i][d] - points[j][d]) ** 2\n            distance **=.5\n            if distance.is_integer():\n                count += 1\n    return str(count)\n"
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    #return str(result)\n"
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, d = [int(x) for x in stdin.split()]\n    x = [list(map(int, stdin.split())) for _ in range(n)]\n    ans = 0\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            sq = 0\n            for k in range(d):\n                sq += abs(x[i][k] - x[j][k]) ** 2\n            if sq == 0:\n                continue\n            ans += sq ** 0.5 % int(1e9 + 7)\n    print(ans)\n    return ''"
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    points_count, dim = map(int, stdin.split())\n    points = [map(int, stdin.split()) for _ in range(points_count)]\n\n    # make map of tuple (point_1, point_2) and distance between them\n    distances = dict()\n    for i in range(points_count):\n        for j in range(points_count):\n            if i!= j:\n                distance = tuple(sorted([points[i][d], points[j][d]] for d in range(dim)))\n                distances[distance] = distance\n\n    # count how many distances are integers\n    count = 0\n    for distance in distances:\n        if distance[0] - round(distance[0]) == 0:\n            count += 1\n    return str(count)\n"
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"The security code S is hard to enter when it contains two consecutive digits that are the same.\n\n    Args:\n        stdin (str): Security code S\n\n    Returns:\n        str: Bad or Good\n    \"\"\"\n    for i in range(3):\n        if stdin[i] == stdin[i + 1]:\n            return \"Bad\"\n    return \"Good\"\n"
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return 'Bad' if the security code is hard to enter, else return 'Good'\"\"\"\n    security_code = stdin\n    # Check for easy input:\n    if len(security_code)!= 4:\n        return \"Bad\"\n    # If all digits are unique, return Good:\n    if len(set(security_code)) == 4:\n        return \"Good\"\n    # Otherwise, try to find a pair of consecutive digits:\n    consecutive = False\n    for i in range(3):\n        if security_code[i] == security_code[i+1]:\n            consecutive = True\n    if consecutive:\n        return \"Bad\"\n    return \"Good\"\n"
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin\n    if len(S)!= 4 or not S.isdigit():\n        return 'Bad'\n    if int(S[0]) == int(S[1]) or int(S[0]) == int(S[2]) or int(S[0]) == int(S[3]):\n        return 'Bad'\n    return 'Good'\n"
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    code = stdin\n    if code[0] == code[1] or code[1] == code[2] or code[2] == code[3]:\n        return 'Bad'\n    else:\n        return 'Good'\n"
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return 'Bad' if any(sorted(stdin)[i] == sorted(stdin)[i + 1] for i in range(3)) else 'Good'\n"
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin\n    if int(input[0]) == int(input[1]) or int(input[1]) == int(input[2]) or int(input[2]) == int(input[3]):\n        return \"Bad\"\n    else:\n        return \"Good\""
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return \"Bad\" if stdin[0] == stdin[1] or stdin[1] == stdin[2] or stdin[2] == stdin[3] else \"Good\""
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns 'Bad' if the security code is hard to enter, or 'Good' otherwise.\"\"\"\n    if all(char in string.digits for char in stdin):\n        if any(doubles_digit(code) for code in [stdin[:3], stdin[3:]]):\n            return 'Bad'\n        return 'Good'\n    return 'Bad'\n\n\ndef"
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n  '''Returns the state of the security code based on the conditions in the problem statement'''\n  return \"Bad\" if 2 in [i[1:] for i in [stdin[i:i+2] for i in range(0, len(stdin), 2)]] else \"Good\"\n"
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the maximum possible value of the last ingredient remaining\"\"\"\n    n = int(stdin)\n    values = [int(x) for x in stdin.split('\\n')[1].split()]\n    diff = values[0]\n    for i in range(1, n):\n        if diff > values[i]:\n            diff = values[i]\n    return f'{diff:.5f}'\n\"\"\"\ndef"
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, *v = map(int, stdin.split())\n    if N == 1:\n        return v[0]\n    left, right = 0, v[0]\n    for i in range(1, N):\n        left, right = max(left, right), v[i] + min(left, right)\n    return left\n\nprint(solution(input()))\n"
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    values = [int(x) for x in stdin.split(\"\\n\")[1].split(\" \")]\n    if n == 2:\n        return values[1]\n    dp = {}\n    dp[1] = values[0]\n    dp[2] = dp[1] + values[1]\n    max_num = dp[1] + values[0] + values[1]\n    for i in range(3, n+1):\n        dp[i] = min((values[i-1] + values[i-2]) / 2, values[i-1])\n        max_num = max(dp[i], max_num)\n    return max_num\n\"\"\"\n"
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    pot = []\n    for line in stdin.splitlines():\n        v, *rest = map(float, line.split())\n        pot.append((v, rest))\n    while len(pot) > 1:\n        v, *rest = pot.pop()\n        v_min, v_max = min(rest), max(rest)\n        v = v_min + v_max\n        pot.append((v, rest))\n    return str(pot[0][0])\n\nprint(solution(input()))\n"
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    N, *values = map(int, stdin.split(\" \"))\n    # get max of values\n    max_value = max(values)\n    # keep track of the current max value\n    current_max = 0\n    # we need to keep track of the index of the max_value\n    max_index = values.index(max_value)\n    # keep track of the number of steps\n    count = 0\n    # iterate through all values\n    for i in range(N):\n        # if the value is larger than the current max value\n        if values[i] > current_max:\n            # change current max\n            current_max = values[i]\n            # change max index\n            max_index = i\n            # count increases by one\n            count += 1\n        # if the value is larger than the max value\n        if values[i] > max_value:\n            # change max value\n            max_value = values[i]\n            # change max index\n            max_index = i\n            # count increases by one\n            count += 1\n    # get the value of the max value\n    max_value = values[max_index]\n    # calculate the max value of the ingredients\n    max_value /= 2\n    # return the answer\n    return max_value"
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution for Part One\n    \"\"\"\n    pass"
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 3:\n        return str(n)\n    return str((n - 1) + ((n - 1) * ((n - 2) // 2) // 2))\n"
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    result = 0\n    N, *vals = [int(num) for num in stdin.split('\\n')]\n    for i in range(N - 1):\n        result = max(result, vals[i])\n        vals[i] = (result + vals[i]) / 2\n    result = max(result, vals[-1])\n    return f'{result:.5f}'"
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(sum([int(i) for i in stdin.split('\\n')[:-1]]))"
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # 1. Save the input in separate lines.\n    n, *dishes = stdin.split(\"\\n\")\n    n = int(n)\n    dishes = [int(d) for d in dishes]\n    # 2. Initialize the result\n    result = 0\n    # 3. Do the calculation\n    # Since the input is sorted, the dishes should be in order.\n    for i in range(0, n - 1):\n        result += (dishes[i] + dishes[i + 1]) * (dishes[i] + dishes[i + 1])\n    # 4. Return the result\n    return str(result)\n"
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # create a list of all the input.\n    # this is a list of the input so that\n    # it can be easily iterated over.\n    my_input = [int(line) for line in stdin.split(\"\\n\") if line]\n\n    # determine how many inputs there are\n    # (this is the first input)\n    num_inputs = my_input[0]\n\n    # Initialize variables\n    # The sum of the satisfaction points\n    # The dish that is being eaten\n    # The sum of the first 3 elements\n    # The sum of the last 3 elements\n    total_satisfaction = 0\n    satisfaction_points = 0\n    first_3_elements = 0\n    last_3_elements = 0\n\n    # iterate over each input\n    for i in range(1, num_inputs + 1):\n        # determine how many elements are in the ith input\n        # this is determined by the difference between\n        # the number of inputs and the length of the ith input\n        length_of_ith_input = len(my_input[i]) - 1\n\n        # Add the sum of the first 3 elements\n        # to the sum of the last 3 elements\n        first_3_elements += my_input[i][0]\n        last_3_elements += my_input[i][length_of_ith_input]\n\n        # Determine how many satisfaction points are gained for eating this dish\n        satisfaction_points = my_input[i][0] + my_input[i][1]\n\n        # add the points to the total sum\n        total_satisfaction += satisfaction_points\n\n    # return the total sum of the satisfaction points\n    return total_satisfaction\n"
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, *dish_info, last_dish = [int(num) for num in stdin.split(\"\\n\")]\n\n    dish_info = dish_info[0]\n\n    results = []\n    for i, num in enumerate(dish_info):\n        results.append(num * dish_info[i+1] + num)\n\n    results.append(last_dish * dish_info[0])\n\n    return sum(results)"
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, *Dishes, Bs, Cs = [int(line) for line in stdin.split('\\n')]\n    return sum(Dish * B + max(0, Dish - 1) * C for Dish, B, C in zip(Dishes, Bs, Cs))\n"
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Takahashi went to an all-you-can-eat buffet with N kinds of dishes and ate all of them (Dish 1, Dish 2, \\ldots, Dish N) once.\n    The i-th dish (1 \\leq i \\leq N) he ate was Dish A_i.\n    When he eats Dish i (1 \\leq i \\leq N), he gains B_i satisfaction points.\n    Additionally, when he eats Dish i+1 just after eating Dish i (1 \\leq i \\leq N - 1), he gains C_i more satisfaction points.\n\n    :param stdin: the input from STDIN\n    :return: the result of the problem\n    \"\"\"\n    N = int(stdin.splitlines()[0])\n\n    A = list(map(int, stdin.splitlines()[1].split()))\n    B = list(map(int, stdin.splitlines()[2].split()))\n    C = list(map(int, stdin.splitlines()[3].split()))\n\n    dp = [0] * N\n    for i in range(N):\n        dp[i] = (A[i] - 1) * B[i] + C[i]\n\n    for i in range(1, N):\n        dp[i] = dp[i] + dp[i - 1]\n\n    return str(dp[-1])\n"
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    \u89e3\u8aac\n    dp[i][j] \u306f i\u756a\u76ee\u4ee5\u964d\u3092\u98df\u3079\u3066 j \u5206\u7a0b\u5ea6\u6e80\u8db3\u3067\u304d\u308b\u304b\n    dp[i][j] = dp[i - 1][j] or dp[i - 1][j - A[i]]\n\n    \u4f55\u3067\u3082\u826f\u3044\u3053\u3068\u306b\u3082\u3042\u308b\u306e\u3067\u3001\u6700\u521d\u306b\u3001i\u756a\u76ee\u3092\u98df\u3079\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a\u3057\u3066\n    dp[i][j] = j >= A[i] \u3088\u308a\u3001\u521d\u3081\u3066\u98df\u3079\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\n    \"\"\"\n    N, *A, B, C = map(int, stdin.split())\n\n    dp = [[0] * (B + C) for _ in range(N + 1)]\n    dp[0][0] = 0\n\n    for i in range(1, N + 1):\n        for j in range(B + C):\n            if j >= A[i - 1]:\n                dp[i][j] = max(dp[i][j], dp[i - 1][j])\n            if j >= A[i - 1] - C:\n                dp[i][j] = max(dp[i][j], dp[i - 1][j - C] + B)\n            if j >= A[i - 1] + C:\n                dp[i][j] = max(dp[i][j], dp[i - 1][j - A[i - 1]] + B + C)\n\n    return dp[-1][-1]"
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n  N = int(stdin.readline().strip())\n  A = tuple(map(int, stdin.readline().strip().split(' ')))\n  B = tuple(map(int, stdin.readline().strip().split(' ')))\n  C = tuple(map(int, stdin.readline().strip().split(' ')))\n  ans = 0\n  for i in range(N - 1):\n    ans += A[i] * B[i] + C[i] * B[i + 1]\n  return str(ans)\n"
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.splitlines()\n    N = int(stdin[0])\n    A = list(map(int, stdin[1].split()))\n    B = list(map(int, stdin[2].split()))\n    C = list(map(int, stdin[3].split()))\n    s = 0\n    for i in range(N):\n        s += B[i]\n        if i < N - 1:\n            s += C[i]\n    return str(s)\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin\n    return s.count('ABC')\nprint(solution(stdin))"
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    n = int(stdin.split('\\n')[0])\n    s = stdin.split('\\n')[1]\n    count = 0\n    for i in range(n - 2):\n        if s[i:i+3] == 'ABC':\n            count += 1\n    return str(count)"
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    #your code here\n    N = int(stdin.readline().strip())\n    S = stdin.readline().strip()\n\n    subseq_count = 0\n    for i in range(len(S) - 2):\n        if S[i] == 'A' and S[i + 1] == 'B' and S[i + 2] == 'C':\n            subseq_count += 1\n\n    print(subseq_count)\n\n    return None"
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    S = stdin\n    count = 0\n    n = 3\n    a = \"ABC\"\n    for i in range(N-2):\n        if S[i] == a[0] and S[i+1] == a[1] and S[i+2] == a[2]:\n            count += 1\n        if S[i] == a[0] and S[i+1] == a[1] and S[i+2] == a[2] and S[i+3] == a[0]:\n            count += 1\n    return count\n\nprint(solution(input()))\n\na = \"ABC\"\nb = \"AB\"\nc = \"ABC\"\n\na = \"GABBA\"\nb = \"ABABABABABA\"\nc = \"ABABABAB\"\n\nprint(solution(a))\nprint(solution(b))\nprint(solution(c))\n\ndef"
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.count(\"ABC\")"
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    len_s = int(stdin[0])\n    s = stdin[1]\n    len_subseq = int(stdin[2])\n    subseq = stdin[3]\n\n    start = 0\n    end = len_subseq\n\n    found = False\n\n    while end <= len_s:\n        if s[start:end] == subseq:\n            found = True\n            break\n        start += 1\n        end += 1\n\n    return 1 if found else 0\n"
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    res = 0\n    for i in range(len(stdin)-2):\n        if stdin[i] == stdin[i+1] == stdin[i+2] == stdin[i+3] == 'A' and stdin[i+4] == 'B' and stdin[i+5] == 'C':\n            res += 1\n    return res"
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    return s.count('ABC')\n\n\ndef"
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    # pattern = re.compile(r\"(?=ABC)\")\n    pattern = r\"(?=(ABC))\"\n    result = len(re.findall(pattern, s))\n    return str(result)\n"
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    pass"
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4\\nMASHIKE\\nRUMOI\\nOBIRA\\nHABORO\\n\")\n    2\n    \"\"\"\n    n = int(stdin)\n    s = sorted(stdin.split())\n    nums = [1]\n    for i in range(n):\n        nums.append(nums[-1] * (i + 1))\n    m = {}\n    for x in s:\n        m[x[0]] = m.get(x[0], 0) + 1\n    ans = 0\n    for x in m:\n        ans += nums[m[x]]\n        ans %= 10 ** 9 + 7\n    return str(ans)\n"
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin[0])\n    l = stdin.split(\"\\n\")[1:]\n    d = {}\n    count = 0\n    for i in range(N):\n        if l[i][0] in d:\n            d[l[i][0]].append(l[i])\n        else:\n            d[l[i][0]] = [l[i]]\n        count += len(d[l[i][0]])\n    return count"
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split('\\n')[0])\n    choose_names = [stdin.split('\\n')[1]]\n\n    for i in range(N - 1):\n        choose_names.append(stdin.split('\\n')[i+2])\n\n    choose_names.sort()\n    count_dict = {}\n\n    for i in range(len(choose_names)):\n        if choose_names[i][0] in count_dict:\n            count_dict[choose_names[i][0]] += 1\n        else:\n            count_dict[choose_names[i][0]] = 1\n\n    result = 0\n    for key, value in count_dict.items():\n        if value == 3:\n            result += 1\n\n    if result == 0:\n        for i in range(len(choose_names)):\n            for j in range(i + 1, len(choose_names)):\n                if choose_names[i][0] == choose_names[j][0]:\n                    result += 1\n                    break\n    return str(result)\n\n\ndef"
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split('\\n')\n    N = int(s[0])\n    out = 0\n    for i in range(1, N+1):\n        for j in range(1, N+1):\n            for k in range(1, N+1):\n                if i!= j and j!= k and i!= k:\n                    if s[i].startswith(s[j][0]) and s[j].startswith(s[k][0]) and s[k].startswith(s[i][0]):\n                        out += 1\n    return str(out)\n\nprint(solution(input()))\n\ndef"
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.split('\\n')\n    N = int(input_data[0])\n    S = [el for el in input_data[1:]]\n    T = [0]*len(S)\n    for i in range(len(S)):\n        T[i] = [S[i],0]\n    T[0][1] = 1\n    for i in range(1,len(S)):\n        for j in range(len(S)):\n            if j == i:\n                continue\n            if S[j][0]!= S[i][0]:\n                if S[j][0] == S[i][1]:\n                    T[i][1] += T[j][1]\n                if S[j][0] == S[i][0]:\n                    T[i][1] += T[j][0]\n            if S[j][0] == S[i][1]:\n                T[i][1] += T[j][0]\n    print(T)\n    return ''\n"
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # N = int(stdin.readline())\n    # S = list(map(str, stdin.readline().split(',')))\n    S = ['MASHIKE', 'RUMOI', 'OBIRA', 'HABORO', 'HOROKANAI']\n    count = 0\n    for i in range(0,len(S)-2):\n        for j in range(i+1,len(S)-1):\n            for k in range(j+1,len(S)):\n                if (S[i][0] == 'M' or S[i][0] == 'A' or S[i][0] == 'R' or S[i][0] == 'C' or S[i][0] == 'H') and (S[j][0] == 'M' or S[j][0] == 'A' or S[j][0] == 'R' or S[j][0] == 'C' or S[j][0] == 'H') and (S[k][0] == 'M' or S[k][0] == 'A' or S[k][0] == 'R' or S[k][0] == 'C' or S[k][0] == 'H'):\n                    if not(S[i] == S[j] or S[i] == S[k] or S[j] == S[k]):\n                        count += 1\n    return str(count)\n"
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the number of ways to choose three people from N people\n    :param stdin: The input\n    :type stdin: str\n    :return: The number of ways to choose three people from N people\n    :rtype: str\n    \"\"\"\n\"\"\"\nN = int(stdin.readline())\nA = []\nfor i in range(N):\n    A.append(stdin.readline())\n\"\"\"\n\"\"\"\nN = int(input())\nA = []\nfor i in range(N):\n    A.append(input())\n\"\"\"\nA = [\n    \"MASHIKE\",\n    \"RUMOI\",\n    \"OBIRA\",\n    \"HABORO\",\n    \"HOROKANAI\"\n]\ndef"
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the number of ways to choose three people who have the same name as given conditions.\"\"\"\n    # Get data\n    total_n = int(stdin.readline().strip())\n    people = [name.strip() for name in stdin.readline().strip().split(':')]\n    # Get the results\n    return solution_runner(total_n, people)"
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    - input:\n        - stdin\n    - output:\n        - the number of ways to choose three people with given conditions\n    '''\n    N = int(stdin.split(\"\\n\")[0])\n    person_names = stdin.split(\"\\n\")[1:-1]\n\n    # assert input is correct\n    assert(N > 0 and N <= 10 ** 5)\n    assert(all(len(person_name) == len(person_names[0]) for person_name in person_names))\n    assert(all(all(ch.isupper() for ch in person_name) for person_name in person_names))\n    assert(all(all(ch in \"MARCHH\" for ch in person_name) for person_name in person_names))\n    assert(all(person_name!= person_names[i] for i in range(len(person_names)) for person_name in person_names if i!= i))\n\n    # get number of ways to choose three people\n    return get_number_of_ways_to_choose_three_people(N, person_names)\n\ndef"
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = [int(x) for x in stdin.split(' ')]\n    assert 0 <= N <= 100\n    assert 0 <= M <= N\n    Takahashi = sum(1 for i in range(N) if i % M == 0)\n    assert Takahashi <= N\n    if Takahashi == N:\n        return 'Yes'\n    return 'No'"
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Your code goes here\n    #input = stdin\n    N,M = stdin.split(\" \")\n    N = int(N)\n    M = int(M)\n    if N == M:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return 'Yes' if int(stdin.readline()) == int(stdin.readline()) and int(stdin.readline()) == int(stdin.readline()) else 'No'"
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Get inputs\n    n = int(stdin.split(\" \")[0])\n    m = int(stdin.split(\" \")[1])\n    # Generate a testcase\n    for i in range(n):\n        n, m = stdin.split(\"\\n\")[1:3]\n        n, m = int(n), int(m)\n        if n > m:\n            print(\"Yes\")\n        else:\n            print(\"No\")\n    return solution(input())"
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    number_of_cases, number_of_ac, number_of_fail = map(int, stdin.split(' '))\n    if number_of_ac == number_of_cases:\n        return 'Yes'\n    else:\n        return 'No'"
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Gets the AC status for the submission.\"\"\"\n    n, m = map(int, stdin.split())\n    return 'Yes' if m == n else 'No'"
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    print('Yes' if n >= m else 'No')\n    return"
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, M = [int(x) for x in stdin.split(' ')]\n    if N == M:\n        return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    if stdin[2] == stdin[4] and stdin[4] == stdin[6]:\n        return 'Yes'\n    else:\n        return 'No'\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if set(\"\".join(stdin[2:5])) == set(\"\".join(stdin[5:8])) else \"No\"\n\"\"\""
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # return stdout\n    s = stdin.lower()\n    return 'Yes' if s[2] == s[4] and s[4] == s[6] else 'No'\n"
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"sippuu\")\n    'Yes'\n    >>> solution(\"googoo\")\n    'No'\n    \"\"\"\n    third, fourth, fifth, sixth = stdin[2], stdin[4], stdin[5], stdin[6]\n    if third == fourth and fourth == fifth and fifth == sixth:\n        return 'Yes'\n    return 'No'\n"
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    if (\n        stdin[2] == stdin[4]\n        and stdin[5] == stdin[6]\n        and stdin[0] == stdin[1]\n    ):\n        return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split(\" \")\n    \n    if input_list[0][3] == input_list[0][4] and input_list[0][4] == input_list[0][5] and input_list[0][5] == input_list[0][6]:\n        return \"Yes\"\n    \n    else:\n        return \"No\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return stdin[2] == stdin[4] and stdin[4] == stdin[6]\n"
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if stdin[2] == stdin[4] and stdin[3] == stdin[5] else \"No\"\n"
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    if (s[2] == s[4] and s[4] == s[6]) or (s[3] == s[5] and s[5] == s[7]):\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your solution\n    return \"\""
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n, t = [int(i) for i in lines[0].split()]\n    costs = [[int(i) for i in line.split()] for line in lines[1:n+1]]\n    costs.sort(key=lambda x: x[0]/x[1])\n    for cost in costs:\n        if cost[1] < t:\n            return str(cost[0])\n\n    return 'TLE'\n"
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split(' '))\n    \n    # Here I'll sort all distances in ascending order\n    # and keep the index of the first element that\n    # satisfies the condition that it's less than t\n    # Also, I'll keep all the distances in descending\n    # order\n    dist = [int(stdin.split(' ')[1]) for _ in range(n)]\n    dist.sort()\n    i = dist.index(dist[dist.index(dist[0]):][0])\n    \n    # if there is no route that takes not longer than t\n    # than print TLE\n    if dist[i] > t:\n        return \"TLE\"\n    \n    # Otherwise, return the lowest cost of this route\n    return dist[i]\n\nprint(solution(input()))\n"
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    #Your code here\n    line = stdin.splitlines()\n    t = int(line[1])\n    routes = []\n    for i in range(2, len(line)):\n        routes.append([int(line[i].split(' ')[0]), int(line[i].split(' ')[1])])\n    costs = []\n    for i in range(len(routes)):\n        costs.append(routes[i][0] / routes[i][1])\n    costs.sort()\n    for i in range(len(routes)):\n        if costs[i] > t:\n            return 'TLE'\n    return str(int(costs[0]))"
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the minimum cost of a route that takes not longer than time T.\n\n    Args:\n        stdin (str): Input from stdin\n\n    Returns:\n        str: A string representing the minimum cost of a route that takes not longer than time T\n    \"\"\"\n    # Get inputs\n    num_routes, time = map(int, stdin.split(' '))\n    routes_costs = []\n    routes_time = []\n    for _ in range(num_routes):\n        routes_costs.append(int(stdin))\n    for _ in range(num_routes):\n        routes_time.append(int(stdin))\n    # Sort routes in increasing order of cost\n    routes_costs, routes_time = zip(\n        *sorted(zip(routes_costs, routes_time), key=lambda x: x[1]))\n    # Return time if all routes are less than time\n    if all(time < x for x in routes_time):\n        return str(time)\n    # Find minimum cost of routes\n    min_cost = time\n    for cost in routes_costs:\n        if cost > time:\n            break\n        else:\n            min_cost = cost\n    # Return minimum cost\n    return str(min_cost)"
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Implementation of the algorithm\n\n    Algorithm:\n        - We take each route in the input and calculate its cost\n        - If the cost is greater than the time limit, we return TLE.\n        - Otherwise, we return the minimum cost.\n\n    Complexity:\n        Time: O(N)\n        Space: O(1)\n\n    :param stdin: standard input\n    :return: minimum cost of the route\n    \"\"\"\n    n, t = [int(x) for x in stdin.split(\" \")]\n    costs = []\n    times = []\n    for i in range(n):\n        cost, time = [int(x) for x in stdin.split(\" \")]\n        costs.append(cost)\n        times.append(time)\n    times = [t] * n\n    i = 0\n    while i < n:\n        if times[i] < costs[i]:\n            times[i] = costs[i]\n        else:\n            del costs[i]\n            del times[i]\n            n -= 1\n            i -= 1\n        i += 1\n    return str(min(times)) if len(times)!= 0 else \"TLE\"\n"
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    try:\n        n, t = map(int, stdin.readline().split())\n        c = []\n        t = []\n        for _ in range(n):\n            c_i, t_i = map(int, stdin.readline().split())\n            c.append(c_i)\n            t.append(t_i)\n        c.sort()\n        t.sort()\n        count = 0\n        cost = 0\n        for i in range(n):\n            if t[i] > t[-1]:\n                if count == 0:\n                    return 'TLE'\n                else:\n                    return cost\n            elif t[i] < t[-1]:\n                cost = c[i]\n                count += 1\n        return cost\n    except:\n        return 'TLE'"
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    result = ''\n    N, T = map(int, stdin.split())\n    costs = [0 for _ in range(N)]\n    times = [0 for _ in range(N)]\n    for i in range(N):\n        cost, time = map(int, stdin.split())\n        costs[i], times[i] = cost, time\n    min_cost = sum(costs)\n    for i in range(N):\n        if times[i] > T:\n            continue\n        elif i == 0 and times[i] < T:\n            min_cost = costs[i]\n            result = '{}'.format(min_cost)\n            break\n        else:\n            if min_cost < costs[i]:\n                min_cost = costs[i]\n                result = '{}'.format(min_cost)\n    return result\n"
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, T = [int(x) for x in stdin.split()]\n    cost, time = [], []\n    for _ in range(N):\n        c, t = [int(x) for x in stdin.split()]\n        cost.append(c)\n        time.append(t)\n\n    cost.sort()\n    time.sort()\n    total_cost = 0\n    for i in range(N):\n        total_cost += cost[i] * min(time[i], T)\n        if total_cost >= T:\n            return str(i + 1)\n    return 'TLE'\n"
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # get inputs\n    N, T = map(int, stdin.split())\n    \n    # get all the costs and times from input\n    costs, times = [], []\n    for i in range(N):\n        cost, time = map(int, input().split())\n        costs.append(cost)\n        times.append(time)\n    \n    # sort by cost\n    costs, times = zip(*sorted(zip(costs, times)))\n    \n    # check time T\n    cost = 0\n    for c, t in zip(costs, times):\n        if t > T:\n            cost = c\n            break\n        else:\n            T -= t\n    \n    # return result\n    if cost == 0:\n        return 'TLE'\n    else:\n        return cost\n"
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    N, A, B = [int(val) for val in stdin.split()]\n\n    return str(max(A*N, B*N))\n    '''\n\ndef"
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = map(int, stdin.split())\n    return str(min(A * N, B))\n"
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nimport sys\n\nN, A, B = [int(s) for s in sys.stdin.readline().strip().split()]\n"
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = [int(x) for x in stdin.split()]\n    return str(min(n * a, n * a + b))\n\"\"\""
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\""
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    _, a, b = map(int, stdin.split(' '))\n    return str(min(a, b))"
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    [n, a, b] = list(map(int, stdin.split()))\n\n    return str(min(n*a, n*b))\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # \u6a19\u6e96\u5165\u529b\u304b\u3089\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u53d6\u308b\n    n, a, b = map(int, stdin.split())\n    # n\u56de\u306e\u4e2d\u3067\u3069\u306e\u904b\u8cc3\u304c\u4e00\u756a\u82e5\u304b\u3063\u305f\u306e\u304b\u3092\u8a18\u9332\u3059\u308b\n    # \u904b\u8cc3\u3092\u5897\u3084\u305b\u3070\u82e5\u304f\u306a\u308b\u306e\u3067+\u3067\u8a18\u9332\u3059\u308b\n    r = 0\n    for _ in range(n):\n        r += a\n        if b < r:\n            r = b\n    # n\u56de\u306e\u4e2d\u3067\u306e\u6700\u5c0f\u904b\u8cc3\n    return r"
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = [int(num) for num in stdin.split(' ')]\n    return str(n * a + b)\n"
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    a = int(lines[1])\n    b = int(lines[2])\n    return str(n * a + b)\n\n\ndef"
    },
    {
        "number": 4278,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the number of pairs of integers i, j (1 < i < j < N) such that s_i is an anagram of s_j.\"\"\"\n    num_of_strings: int = int(stdin.split(\"\\n\")[0])\n    string_list: list[str] = [string for string in stdin.split(\"\\n\")[1:]]\n    num_of_valid_strings: int = 0\n    for i in range(num_of_strings):\n        for j in range(num_of_strings):\n            if i!= j and sorted(string_list[i]) == sorted(string_list[j]):\n                num_of_valid_strings += 1\n    return num_of_valid_strings"
    },
    {
        "number": 4278,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    strings = [stdin.readline().strip() for _ in range(n)]\n    return f\"{len(set(strings))}\"\n\n\ndef"
    },
    {
        "number": 4278,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    pass\n\ndef"
    },
    {
        "number": 4278,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return \"\""
    },
    {
        "number": 4278,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    N = int(stdin.readline().strip())\n    result = 0\n    for _ in range(N):\n        result += int(stdin.readline().strip())\n    print(result)\n    return result"
    },
    {
        "number": 4278,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def is_anagram(string1: str, string2: str) -> bool:\n        if len(string1)!= len(string2):\n            return False\n\n        charset = {}\n        for char in string1:\n            charset[char] = charset.get(char, 0) + 1\n\n        for char in string2:\n            if char not in charset or charset[char] == 0:\n                return False\n            else:\n                charset[char] -= 1\n\n        return True\n\n    answers = 0\n    for i in range(1, len(stdin.split(\"\\n\"))):\n        s1 = stdin.split(\"\\n\")[i]\n        s2 = stdin.split(\"\\n\")[0]\n\n        if is_anagram(s1, s2):\n            answers += 1\n\n    return answers"
    },
    {
        "number": 4278,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # input\n    num_of_strings = int(stdin[0])\n    strings = [stdin[i] for i in range(1, 1+num_of_strings)]\n    # initialize answer\n    answer = 0\n    # for each string\n    for i in range(num_of_strings):\n        # initialize counter\n        counter = {}\n        # loop through each character\n        for char in strings[i]:\n            if char not in counter:\n                counter[char] = 1\n            else:\n                counter[char] += 1\n        # loop through each string\n        for j in range(num_of_strings):\n            if i!= j:\n                # initialize counter\n                counter_j = {}\n                # loop through each character\n                for char in strings[j]:\n                    if char not in counter_j:\n                        counter_j[char] = 1\n                    else:\n                        counter_j[char] += 1\n                # compare counters\n                if counter == counter_j:\n                    answer += 1\n    return answer\n"
    },
    {
        "number": 4278,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin.readline())\n    strs = [stdin.readline() for _ in range(num)]\n    ret = 0\n    for i in range(num - 1):\n        for j in range(i + 1, num):\n            ret += len(strs[i]) == len(strs[j]) and sum(map(lambda x, y: x == y, strs[i], strs[j])) == 10\n    print(ret)\n"
    },
    {
        "number": 4278,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    A few approaches:\n    1. Slice the string into words, count the number of words for each word. Then, sum the counts.\n    2. Take a count of the number of letters in each word, then sum the number of letters in each word.\n    3. Go through the string and count the number of occurrences of each letter, sum the result.\n    4. Write a function that takes a word and returns a list of letters and the number of letters in the word. Then, for each word in the input, sum the number of occurrences of each letter.\n    \"\"\"\n\n    # Slice the string into words, count the number of words for each word. Then, sum the counts.\n    word_counts = [len(word) for word in stdin.split()]\n    return sum(word_counts)\n\n\n\"\"\"\nSome more approaches:\n1. Sort the input string. Then, compare it to the original string.\n2. Do a dictionary comprehension and then count the number of items in the dictionary.\n3. Do a list comprehension and then iterate over the original string and count the number of occurrences of each letter.\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4278,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Your solution goes here. Feel free to use additional functions or import modules, but do not import any other code.\n    The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows.\n    The first line of each test case contains a single integer N denoting the number of strings.\n    Each of the next N lines contains a single string s_i, consisting of lowercase English letters.\n    For every valid i, the first 10 characters of s_i are also the first 10 characters of the string s_i.\n    \"\"\"\n    pass\n    return"
    },
    {
        "number": 4279,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return '\\n'.join(stdin)\n"
    },
    {
        "number": 4279,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    This solution is really slow\n    \"\"\"\n    pass\n\ndef"
    },
    {
        "number": 4279,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return '\\n'.join(stdin)\n"
    },
    {
        "number": 4279,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4279,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 4279,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return '\\n'.join(input().split('\\n')[1::])\n"
    },
    {
        "number": 4279,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \n    return stdin\n    \n"
    },
    {
        "number": 4279,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\""
    },
    {
        "number": 4279,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n  return stdin\n------\n\n\ndef"
    },
    {
        "number": 4279,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    # pass\n    return stdin"
    },
    {
        "number": 4280,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def dfs(graph, u, visited, pre):\n        if visited[u] == -1:\n            visited[u] = pre\n            for v in graph[u]:\n                dfs(graph, v, visited, u)\n\n    n, k = list(map(int, stdin.split()))\n    graph = [[] for i in range(n)]\n    for i in range(n - 1):\n        a, b = list(map(int, stdin.split()))\n        graph[a - 1].append(b - 1)\n        graph[b - 1].append(a - 1)\n\n    ans = 0\n    visited = [-1 for _ in range(n)]\n    for i in range(n):\n        if visited[i] == -1:\n            dfs(graph, i, visited, i)\n            ans += 1\n\n    # print(visited)\n    print(ans)\n\n    if ans > k:\n        print('IMPOSSIBLE')\n        return\n\n    city = [0] * n\n    for i in range(n):\n        if visited[i] == -1:\n            city[i] = i\n        else:\n            city[i] = visited[i]\n\n    ans = ''\n    for i in range(1, ans + 1):\n        ans += str(city[i]) +''\n    print(ans)\n\n\ndef"
    },
    {
        "number": 4280,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4280,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \n    \"\"\"\n    n,k = [int(i) for i in stdin.split(\"\\n\")[0].split(\" \")]\n    edges = []\n    for i in range(1, n):\n        edges.append([int(i) for i in stdin.split(\"\\n\")[i].split(\" \")])\n    edges = [[edges[i][0], edges[i][1]] for i in range(len(edges))]\n    # print(edges)\n    \n    import collections\n    edges = sorted(edges, key=lambda x: x[0])\n    n = len(edges)\n    count = collections.Counter([edges[i][1] for i in range(n)])\n    print(count)\n    edges = set([edges[i][1] for i in range(n)])\n    print(edges)\n    edges = sorted(edges)\n    print(edges)\n    \n    import collections\n    edges = sorted(edges)\n    count = collections.Counter([edges[i] for i in range(n)])\n    # print(count)\n    res = 0\n    # print(res)\n    \n    for i in range(n):\n        if count[edges[i]] == 1:\n            res += 1\n        else:\n            res += 2\n            count[edges[i]] -= 1\n    # print(res)\n    \"\"\"\n    from itertools import combinations as comb\n    n, k = [int(i) for i in stdin.split(\"\\n\")[0].split(\" \")]\n    edges = []\n    for i in range(1, n):\n        edges.append([int(i) for i in stdin.split(\"\\n\")[i].split(\" \")])\n    edges = [[edges[i][0], edges[i][1]] for i in range(len(edges))]\n    # print(edges)\n    \n    import collections\n    edges = sorted(edges, key=lambda x: x[0])\n    n = len(edges)\n    count = collections.Counter([edges[i][1] for i in range(n)])\n    print(count)\n    edges = set([edges[i][1] for i in range(n)])\n    print(edges)\n    edges = sorted(edges)\n    print(edges)\n    \n    import collections\n    edges = sorted(edges)\n    count = collections.Counter([edges[i] for i in range(n)])\n    # print(count)\n    res = 0\n    # print(res)\n    \n    for i in range(n):\n        if count[edges[i]] == 1:\n            res += 1\n        else:\n            res += 2\n            count[edges[i]] -= 1\n    # print(res)\n    \n    import math\n    s = math.ceil((-1 + math.sqrt(1+8*res))/2)\n    print(s)\n    \n    for i in range(1, s):\n        if res >= k * i:\n            print(i)\n            break\n    \n    return res\n    \nprint(solution(\"\"\"6 2\n1 4\n4 3\n3 5\n3 6\n5 2\"\"\") == 2)\n\nprint(solution(\"\"\"10 2\n10 3\n1 2\n1 3\n1 4\n2 5\n2 6\n2 7\n3 8\n3 9\"\"\") == 3)\n\nprint(solution(\"\"\"4 2\n3 1\n1 4\n1 2\"\"\") == 1)\n\nprint(solution(\"\"\"10 2\n10 3\n1 2\n1 3\n1 4\n2 5\n2 6\n2 7\n3 8\n3 9\n4 5\n4 6\n4 7\"\"\") == 3)\n\nprint(solution(\"\"\"4 2\n4 3\n3 5\n3 6\n5 2\n1 4\n1 2\"\"\") == 1)\n\nprint(solution(\"\"\"10 2\n10 3\n1 2\n1 3\n1 4\n2 5\n2 6\n2 7\n3 8\n3 9\n4 5\n4 6\n4 7\n5 8\n5 9\n6 7\n6 8\n6 9\n7 8\n7 9\n8 9\"\"\") == 2)\n\nprint(solution(\"\"\"20 3\n1 4\n1 5\n3 1\n1 6\n1 7\n1 8\n2 1\n3 2\n3 3\n4 2\n5 4\n5 5\n6 1\n7 3\n7 7\n8 8\n8 9\n9 4\n10 10\n10 10\n12 12\n12 13\n14 14\n14 15\n15 12\n15 16\n16 17\n17 15\n17 18\n18 17\n18 19\n19 14\n20 20\n20 20\n22 22\n22 23\n23 20\n23 24\n24 25\n25 26\n25 27\n27 28\n28 29\n29 30\n30 31\n31 32\n32 33\n33 34\n34 35\n35 36\n36 37\n37 38\n38 39\n39 40\n40 41\n41 42\n42 43\n43 44\n44 45\n45 46\n45 47\n47 48\n47 49\n48 50\n48 51\n49 50\n49 52\n50 51\n50 53\n52 53\n52 54\n54 55\n55 56\n55 57\n57 58\n57 59\n59 60\n59 61\n60 61\n60 62\n61 62\n61 63\n62 63\n62 64\n63 65\n64 65\n64 66\n65 66\n65 67\n66 67\n66 68\n67 68\n67"
    },
    {
        "number": 4280,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4280,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Gets input and returns answer\n    \n    >>> solution(str(load(exercise, 'test.txt')))\n    2\n    \"\"\"\n    n, k = [int(n) for n in stdin.split('\\n')[0].split()]\n    edges = [tuple(int(x) - 1 for x in line.split()) for line in stdin.split('\\n')[1:]]\n    ans, prev = 0, set()\n\n    for edge in edges:\n        first, second = edge\n        if first not in prev:\n            ans += 1\n            prev.add(first)\n        if second not in prev:\n            ans += 1\n            prev.add(second)\n\n    return ans"
    },
    {
        "number": 4280,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    l = [int(x) for x in stdin.split()]\n    edges = []\n    for i in range(0, len(l), 2):\n        edges.append([l[i], l[i+1]])\n    edges = sorted(edges, key=lambda edge: edge[1])\n    companies = []\n    for edge in edges:\n        if edge[1] not in companies:\n            companies.append(edge[1])\n    companies.sort()\n    index = 0\n    while index < len(companies) - 1:\n        print(companies[index], end=' ')\n        index += 1\n    print(companies[index])\n    return None\n\nprint(solution(input()))\n\n-----Problem-----\nhttps://codeforces.com/contest/1528/problem/A\n\n\"\"\""
    },
    {
        "number": 4280,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"The solution to the problem\"\"\"\n\n    # Parse the input\n    n, k = [int(x) for x in stdin.split('\\n')[0].split()]\n    edges = {tuple(sorted(line.split())) for line in stdin.split('\\n')[1:]}\n\n    # Create a graph representation\n    graph = {city: [] for city in range(1, n + 1)}\n    for edge in edges:\n        graph[edge[0]].append(edge[1])\n        graph[edge[1]].append(edge[0])\n\n    # Find the number of roads for each company\n    num_roads = {city: 0 for city in range(1, n + 1)}\n    for city in range(1, n + 1):\n        for neighbor in graph[city]:\n            num_roads[neighbor] += 1\n            if num_roads[neighbor] > k:\n                break\n\n    # Find the first bad company\n    bad_company = 1\n    for city, num_road in num_roads.items():\n        if num_road > k:\n            bad_company = city\n            break\n\n    # Create a list of lists of companies\n    companies = []\n    for city in range(1, n + 1):\n        if city!= bad_company:\n            companies.append([bad_company])\n        else:\n            companies.append([])\n\n    # While there are companies left to add\n    while True:\n        to_add = set()\n        for city in range(1, n + 1):\n            if city!= bad_company and num_roads[city] > 0:\n                to_add.add(city)\n        if len(to_add) == 0:\n            break\n\n        for to_add_city in to_add:\n            companies[to_add_city - 1].append(bad_company)\n            for neighbor in graph[to_add_city]:\n                num_roads[neighbor] -= 1\n\n        # Find the new bad company\n        bad_company = 1\n        for city, num_road in num_roads.items():\n            if num_road > k:\n                bad_company = city\n                break\n\n    # Print the answer\n    print(len(companies))\n    print(*[len(company) for company in companies])\n    return '\\n'.join([' '.join([str(company) for company in companies[city - 1]]) for city in range(1, n + 1)])\n"
    },
    {
        "number": 4280,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # import sys\n    # sys.stdin = open(\"../../inputs/input_6965.txt\")\n    n, k = map(int, stdin.split())\n    roads = [list(map(int, stdin.split())) for _ in range(n-1)]\n    roads.sort(key=lambda x: x[2])\n    tree = {}\n    for road in roads:\n        tree[road[0]] = tree.get(road[0], []) + [road[1]]\n        tree[road[1]] = tree.get(road[1], []) + [road[0]]\n    cities = {i: [] for i in range(1, n+1)}\n    for i in range(1, n+1):\n        cities[i] += [j for j in range(1, n+1) if j!= i and j not in cities[i]]\n    res = 0\n    for road in roads:\n        if road[0] in cities[road[1]]:\n            cities[road[1]].remove(road[0])\n            cities[road[1]].append(road[1])\n        if road[1] in cities[road[0]]:\n            cities[road[0]].remove(road[1])\n            cities[road[0]].append(road[0])\n        if len(cities[road[1]]) > k:\n            cities[road[1]].pop()\n            res += 1\n    return res\n"
    },
    {
        "number": 4280,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the minimal number of companies and the corresponding list of companies for the given set of roads.\"\"\"\n    n, k = [int(x) for x in stdin.split('\\n')[0].split(' ')]\n    roads = [[int(x) for x in line.split(' ')] for line in stdin.split('\\n')[1:]]\n    return (n - 1,\n            sorted(\n                min_connections(roads, k),\n                key=lambda c: len(c),\n                reverse=True))\n    pass\n\n\ndef"
    },
    {
        "number": 4280,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    from collections import defaultdict, deque\n    n, k = list(map(int, stdin.split('\\n')[0].split()))\n    edges = defaultdict(set)\n    for x, y in list(map(int, line.split('\\n')[0].split()) for line in stdin.split('\\n')[1:]):\n        edges[x].add(y)\n        edges[y].add(x)\n    seen = [False] * (n + 1)\n    comp = 0\n    q = deque()\n    for x in range(1, n + 1):\n        if seen[x]:\n            continue\n        comp += 1\n        q.append(x)\n        while q:\n            node = q.popleft()\n            for e in edges[node]:\n                if seen[e]:\n                    continue\n                seen[e] = True\n                q.append(e)\n    good = sum(1 for x in seen if x)\n    if good <= k:\n        print(comp - 1)\n        print(' '.join(str(x) for x in range(1, n + 1) if seen[x]))\n    else:\n        print(-1)\n\n\ndef"
    },
    {
        "number": 4281,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n"
    },
    {
        "number": 4281,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    x = list(map(int, stdin.readline().strip().split()))\n    return str(max(x[::2]) - min(x[1::2]) + 1)"
    },
    {
        "number": 4281,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 4281,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin.split()) == 2:\n        if stdin.split()[1] == '1':\n            print(0, 0)\n        else:\n            print(0, int(stdin.split()[1]) - 1)\n    else:\n        if int(stdin.split()[1]) % 2 == 0:\n            print(0, int(stdin.split()[1]) - 1)\n        else:\n            print(int(stdin.split()[1]), int(stdin.split()[1]) - 1)\n\ndef"
    },
    {
        "number": 4281,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time: O(N)\n    Space: O(N)\n    \"\"\"\n    N = int(stdin)\n    houses = [int(i) for i in stdin.split()]\n    houses.sort()\n    houses.insert(0, 0)\n    houses.append(N + 1)\n\n    res = [houses[i + 1] - houses[i] for i in range(len(houses) - 1)]\n\n    return str(min(res)) + \" \" + str(max(res))\n"
    },
    {
        "number": 4281,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Finds the minimum and the maximum number of occupied houses\n    \"\"\"\n\n    num_of_friends = int(stdin.readline())\n    coords = [int(x) for x in stdin.readline().strip().split(' ')]\n\n    # calculate number of occupied houses\n    x_prev = coords[0]\n    occupied_houses = {x_prev}\n    for x in coords[1:]:\n        occupied_houses.add(x - x_prev)\n        occupied_houses.add(x + x_prev)\n        x_prev = x\n\n    print(min(occupied_houses), max(occupied_houses))"
    },
    {
        "number": 4281,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4281,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4281,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\ndef"
    },
    {
        "number": 4281,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4\\n1 2 4 4\")\n    '2 4'\n    >>> solution(\"9\\n1 1 8 8 8 4 4 4 4\")\n    '3 8'\n    >>> solution(\"7\\n4 3 7 1 4 3 3\")\n    '3 6'\n    \"\"\"\n    n = int(stdin)\n    x = [int(x) for x in stdin.split(\"\\n\")[1].split(\" \")]\n    # pos = set()\n    # for i in range(n):\n    #     if i == 0:\n    #         if x[i] > 0:\n    #             pos.add(x[i] - 1)\n    #         pos.add(x[i] + 1)\n    #     elif i == n - 1:\n    #         pos.add(x[i] - 1)\n    #         pos.add(x[i] + 1)\n    #     else:\n    #         if x[i] > 0:\n    #             pos.add(x[i] - 1)\n    #         pos.add(x[i] + 1)\n    #         pos.add(x[i] - 2)\n    #         pos.add(x[i] + 2)\n    # print(pos)\n    pos = set()\n    for i in range(n):\n        if i == 0:\n            if x[i] > 0:\n                pos.add(x[i] - 1)\n            pos.add(x[i] + 1)\n        elif i == n - 1:\n            pos.add(x[i] - 1)\n            pos.add(x[i] + 1)\n        else:\n            if x[i] > 0:\n                pos.add(x[i] - 1)\n            pos.add(x[i] + 1)\n            pos.add(x[i] - 2)\n            pos.add(x[i] + 2)\n    return str(min(len(pos), len(set(x)))) + \"\\n\" + str(max(len(pos), len(set(x))))\n"
    },
    {
        "number": 4282,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    n = int(stdin.readline())\n    a = [list(map(int, stdin.readline().split())) for i in range(n)]\n    '''\n    n = 5\n    a = [\n        [3, 5],\n        [1, 4],\n        [2, 4],\n        [1, 5],\n        [2, 3]\n    ]\n\n    res = [None] * n\n    used = set()\n\n    def dfs(cnt, used, cur, res):\n        if cnt == n:\n            if not res[0]:\n                res[0] = list(cur)\n            else:\n                if res[0] == list(cur):\n                    return True\n                else:\n                    return False\n\n        for i in range(n):\n            if i not in used and (i - 1 in used or i + 1 in used):\n                used.add(i)\n                cur.append(i + 1)\n                if dfs(cnt + 1, used, cur, res):\n                    return True\n                cur.pop()\n                used.remove(i)\n\n    dfs(0, used, [], res)\n    return''.join(map(str, res[0]))\n\nprint(solution('5\\n3 5\\n1 4\\n2 4\\n1 5\\n2 3'))\n"
    },
    {
        "number": 4282,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    kids_count = int(stdin)\n    if kids_count < 3:\n        return \"\"\n\n    order = list(range(1, kids_count + 1))\n    prev_rec_kids = None\n    for i in range(kids_count):\n        rec_kids = [int(x) for x in stdin.split()]\n        if prev_rec_kids:\n            if order[prev_rec_kids[0] - 1] == order[prev_rec_kids[1] - 1]:\n                continue\n        order = order[order[i - 1] - 1::-1] + order[:i - 1] + order[i:][::-1]\n        prev_rec_kids = rec_kids\n    return \" \".join([str(x) for x in order])\n"
    },
    {
        "number": 4282,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solve exercise and find its solution.\"\"\"\n    # TODO: implement solution\n    return \" \".join(str(i) for i in range(1, int(stdin) + 1))"
    },
    {
        "number": 4282,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    kids = int(stdin)\n    table = {}\n    for i in range(1, kids + 1):\n        table[i] = set()\n    for i in range(1, kids):\n        a, b = map(int, stdin.split())\n        table[a].add(b)\n        table[b].add(a)\n\n    def helper(x):\n        if x in table:\n            return x\n        for i in table[x]:\n            return i\n\n    return list(map(helper, range(1, kids + 1)))\n"
    },
    {
        "number": 4282,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    _, *data = stdin.splitlines()\n    data = list(map(int, data))\n    data = sorted(data, reverse=True)\n    n = len(data)\n    res = list()\n    for i in range(n):\n        res.append(data.pop(0))\n    return \" \".join(map(str, res))\n"
    },
    {
        "number": 4282,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return''. join(stdin.split())"
    },
    {
        "number": 4282,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    kids = int(stdin.readline())\n    remembered = []\n    for _ in range(kids):\n        a, b = map(int, stdin.readline().split())\n        remembered.append((a, b))\n    cycle_start = remembered[0][0]\n    cycle_end = remembered[0][1]\n    start = remembered[0][0]\n    end = remembered[0][1]\n    for n in remembered[1:]:\n        if n[0] == end:\n            end = n[1]\n        else:\n            start, end = end, start\n    return \" \".join(map(str, [start, end] + [i for i in range(1, kids) if i!= cycle_start and i!= cycle_end]))\n"
    },
    {
        "number": 4282,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    n = int(stdin.readline())\n    result = []\n    for _ in range(n):\n        a, b = map(int, stdin.readline().split())\n        result.append(b)\n        result.append(a)\n    return''.join(map(str, result))\n    '''\n    \n    n = int(stdin.readline())\n    result = [None] * n\n    \n    for i in range(n):\n        a, b = map(int, stdin.readline().split())\n        result[a - 1] = b\n        result[b - 1] = a\n    return''.join(map(str, result))\n"
    },
    {
        "number": 4282,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5\n   ... 3 5\n   ... 1 4\n   ... 2 4\n   ... 1 5\n   ... 2 3\n   ... ''')\n    '3 2 4 1 5'\n    \"\"\"\n    def get_sequence(a_1: int, a_2: int) -> list:\n        a = 1\n        sequence = []\n        for i in range(2, len(a_1_list) + 1):\n            if a_1_list[i - 2] < a_1:\n                sequence.append(a_2_list[i - 2])\n                a = a_2_list[i - 2]\n            elif a_1_list[i - 2] > a_1:\n                sequence.append(a_1_list[i - 2])\n                a = a_1_list[i - 2]\n        return sequence\n    \n    n = int(stdin.readline().split()[0])\n    a_1_list = list(map(int, stdin.readline().split()))\n    a_2_list = list(map(int, stdin.readline().split()))\n    a_1_list = a_1_list[1:]\n    a_2_list = a_2_list[1:]\n    a_1_list.append(a_1_list[0])\n    a_2_list.append(a_2_list[0])\n    \n    sequence = get_sequence(a_1_list[0], a_2_list[0])\n    for i in range(1, n):\n        a = get_sequence(a_1_list[i], a_2_list[i])\n        sequence = [a[j] for j in sequence]\n    \n    return''.join(str(i + 1) for i in sequence)\n"
    },
    {
        "number": 4282,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def permutation(perm_lst, perm_dict):\n        return perm_lst if len(perm_lst) == len(set(perm_lst)) else permutation([x for x in perm_lst if x not in perm_dict.keys()], perm_dict)\n\n    n = int(stdin.readline())\n    k = [int(x) for x in stdin.readline().split()]\n    t = [int(x) for x in stdin.readline().split()]\n    perm_dict = {x: y for x, y in zip(k, t)}\n    res = permutation([x for x in range(1, n + 1)], perm_dict)\n    return''.join([str(x) for x in res])\n\n\ndef"
    },
    {
        "number": 4283,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    a.sort()\n    mn, mx = min(a), max(a)\n    i, j = mn, mn+5\n    while j < mx:\n        if i < j:\n            j = i+5\n        i += 1\n    return i-5\n\"\"\"\n\ndef"
    },
    {
        "number": 4283,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    n = int(stdin[0])\n    m = [int(i) for i in stdin[1].split()]\n    m.sort()\n    \n    s = 0\n    for i in range(n):\n        if s + m[i] <= 5:\n            s += m[i]\n        else:\n            break\n    return n - i\n    \n"
    },
    {
        "number": 4283,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\"\"\"\n\nn = int(stdin.readline())\narr = [int(x) for x in stdin.readline().strip().split()]\narr.sort()\ntotal = 0\n\nfor i in range(n):\n    total += arr[i]\n\ntotal /= 2\n\nprint(int(total))\n"
    },
    {
        "number": 4283,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\"\\n\")\n    n = int(stdin[0])\n    a = list(map(int, stdin[1].split()))\n    a = [int(i) for i in a]\n    a.sort(reverse=True)\n    m = int(a[0])\n    for i in range(len(a)):\n        if m == a[i]:\n            n -= 1\n        else:\n            break\n    return str(n)\n'''\n"
    },
    {
        "number": 4283,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return None\n"
    },
    {
        "number": 4283,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    nums = [int(i) for i in stdin.readline().strip().split()]\n    nums.sort()\n    count = 0\n    for i in range(n):\n        if abs(nums[i] - nums[i - 1]) <= 5:\n            count += 1\n        else:\n            break\n    return str(count)\n"
    },
    {
        "number": 4283,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    num_students = int(stdin)\n    students = [int(x) for x in stdin.split()]\n    return num_students\n\n\nprint(solution('6\\n1 10 17 12 15 2'))\nprint(solution('10\\n
    },
    {
        "number": 4283,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    # print(a)\n    dp = [[0] * 21 for _ in range(n)]\n    for i in range(n):\n        dp[i][0] = 1\n        dp[i][a[i]] = 1\n    for i in range(1, n):\n        for j in range(21):\n            if j - 5 >= 0:\n                dp[i][j] += dp[i - 1][j - 5]\n            if j + 5 <= 20:\n                dp[i][j] += dp[i - 1][j + 5]\n    print(max(dp[n - 1]))\n"
    },
    {
        "number": 4283,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    i, j = 0, 0\n    result = []\n    while i < n and j < n:\n        if abs(a[j] - a[i]) <= 5:\n            result.append(j + 1)\n            i += 1\n        else:\n            j += 1\n    return str(len(result))\n"
    },
    {
        "number": 4283,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def func(stdin: str) -> str:\n        stdin = stdin.split()\n        n = int(stdin[0])\n        a = list(map(int, stdin[1:]))\n        n_max = max(a)\n        if n == 1 or n == 2:\n            return str(n_max)\n        else:\n            max_diff = 0\n            for i in range(len(a)):\n                for j in range(i + 1, len(a)):\n                    if abs(a[i] - a[j]) <= 5:\n                        if abs(a[i] - a[j]) > max_diff:\n                            max_diff = abs(a[i] - a[j])\n            if max_diff == 0:\n                return str(n_max)\n            else:\n                return str(n_max - max_diff)\n\n    return func(stdin)\n\n\ndef"
    },
    {
        "number": 4284,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 4284,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return '{} {}'.format(str(count), str(a))\n\ndef"
    },
    {
        "number": 4284,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return string solution to this problem.\"\"\"\n    # TODO: complete solution\n    return ''"
    },
    {
        "number": 4284,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    pass\n"
    },
    {
        "number": 4284,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 4284,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline())\n    for _ in range(q):\n        k, n, a, b = list(map(int, stdin.readline().split()))\n        res = 0\n        if n > k:\n            res = -1\n        else:\n            charge = k\n            res = n\n            while charge > 0:\n                if a < charge < b:\n                    charge = charge - a\n                    res += 1\n                elif charge <= a and charge <= b:\n                    charge = 0\n                else:\n                    charge = charge - b\n                    res += 1\n        print(res)\n"
    },
    {
        "number": 4284,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 4284,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline())\n    for _ in range(q):\n        k, n, a, b = map(int, stdin.readline().split())\n        if (k + a) <= n:\n            print(k + a)\n        elif (k + a) > n and (k + b) <= n:\n            print(k + b)\n        else:\n            print(-1)\n    return ''\n"
    },
    {
        "number": 4284,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, k = [int(x) for x in stdin.split()]\n    if k < a or k < b:\n        return -1\n    k -= a\n    for i in range(n):\n        k -= min(b, k + a - b)\n        if k < 0:\n            return i + 1\n    return -1"
    },
    {
        "number": 4284,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    'Find max number of turns to play, not complete the game'\n    q, = map(int, stdin.split())\n    l = [tuple(map(int, stdin.split())) for _ in range(q)]\n    n, k = max([(l[i][1], -l[i][2], -l[i][0], -l[i][3]) for i in range(q)], key=lambda x: x[1])\n    print(1 if k > 0 else -1)\n    return ''\n"
    },
    {
        "number": 4285,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Input: one string\n    Output: number of sequences\n    \"\"\"\n    n = int(stdin)\n    s = stdin\n\n    count = 0\n    for i in range(n):\n        if s[i] == '?':\n            count += 3 ** (n - i - 1)\n        if s[i] == 'b':\n            count += 2 ** (n - i - 1)\n        if s[i] == 'c':\n            count += 1 ** (n - i - 1)\n\n    return count % (10 ** 9 + 7)\n"
    },
    {
        "number": 4285,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    n = len(s)\n    cnt = 0\n    for i in range(n):\n        if s[i] == \"?\":\n            cnt += 3 ** (n - i - 1)\n    return str(cnt % (10 ** 9 + 7))\n"
    },
    {
        "number": 4285,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s, n = stdin.split('\\n')\n    a, b, c = s.count('?'), s.count('?') // 2, s.count('?') // 2\n    return str(f(int(n), a, b, c) % 1000000007)\n\n\ndef"
    },
    {
        "number": 4285,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Find the number of subsequences \"abc\" in all strings we can obtain if we replace\n    all question marks with letters \"a\", \"b\" and \"c\".\n    '''\n\n    # Parse input\n    length = int(stdin.split('\\n')[0])\n    s = stdin.split('\\n')[1]\n\n    # Use a trie to store all possible prefixes\n    trie = Trie()\n    for i, c in enumerate(s):\n        if c in 'abc?':\n            # Create a new node in the trie if we encounter a question mark\n            trie.add(s[:i+1], i + 1)\n\n    # Keep track of the number of sequences we've seen so far\n    count = 0\n\n    # Traverse the trie\n    for prefix, index in trie:\n        # Check if the prefix ends with \"abc\"\n        if prefix.endswith('abc'):\n            count += 1\n            \n    return str(count)\n\n\nclass TrieNode:\n    '''A node in a trie'''\n\n    def __init__(self):\n        self.children = {}\n        self.indices = set()\n\n    def add(self, prefix: str, index: int) -> None:\n        '''Adds the given prefix and index to the node'''\n        self.children[prefix[-1]].add(prefix, index)\n\n    def search(self, prefix: str) -> Tuple[bool, Set[int]]:\n        '''Returns whether the prefix exists in the node and the indices of all sequences'''\n        if not prefix:\n            return True, self.indices\n\n        if prefix[0] not in self.children:\n            return False, set()\n\n        return self.children[prefix[0]].search(prefix[1:])\n\n    def __str__(self):\n        return '\\n'.join(f'{prefix} \u2192 {index}' for prefix, index in self.children.items())\n\n\nclass Trie:\n    '''A trie storing all possible prefixes and their indices'''\n\n    def __init__(self):\n        self.root = TrieNode()\n\n    def add(self, prefix: str, index: int) -> None:\n        '''Adds the given prefix and index to the trie'''\n        node = self.root\n        for c in prefix:\n            if c not in node.children:\n                node.children[c] = TrieNode()\n            node = node.children[c]\n        node.indices.add(index)\n\n    def search(self, prefix: str) -> Tuple[bool, Set[int]]:\n        '''Returns whether the prefix exists in the trie and the indices of all sequences'''\n        node = self.root\n        for c in prefix:\n            if c not in node.children:\n                return False, set()\n            node = node.children[c]\n        return True, node.indices\n\n\ndef"
    },
    {
        "number": 4285,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4285,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin)\n    k = stdin.count(\"?\")\n    ans = (3 ** k) % (10 ** 9 + 7)\n    return ans"
    },
    {
        "number": 4285,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    ans = 0\n    count = 0\n    for i in range(len(s)):\n        if s[i] == '?':\n            count += 1\n        elif s[i] == 'a':\n            ans += (3**count)\n        elif s[i] == 'b':\n            ans += (3**count) * 2\n        elif s[i] == 'c':\n            ans += (3**count) * 3\n    return ans % (10**9 + 7)\n\"\"\"\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4285,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = list(stdin)\n    ans = 0\n    i = 0\n    j = 0\n    while True:\n        if s[i] == \"?\":\n            if i == j:\n                ans += 3\n                j += 1\n            elif j == i + 1:\n                ans += 3\n            elif j == i + 2:\n                ans += 3\n                j += 1\n            else:\n                ans += 2 * 3 ** (i - j)\n            i += 1\n        elif s[i] == \"c\":\n            ans += 3 ** (i - j)\n            i += 1\n        elif s[i] == \"b\":\n            ans += 2 * 3 ** (i - j)\n            i += 1\n        elif s[i] == \"a\":\n            i += 1\n        if i == n:\n            break\n    return str(ans % 1000000007)\n"
    },
    {
        "number": 4285,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    ans = 0\n    for i in range(n):\n        if stdin[i] == '?':\n            ans = ans + 3 ** i\n        elif stdin[i] == 'a':\n            ans = ans + 3 ** i\n        elif stdin[i] == 'b':\n            ans = ans + 2 * 3 ** i\n        else:\n            ans = ans + 3 ** i\n    print(ans % 1000000007)\n    return\n\n\nsolution(input())\n"
    },
    {
        "number": 4285,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 4286,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def has_path(graph, source, target):\n        queue = deque([(source, 0)])\n        visited = set()\n\n        while queue:\n            (vertex, current_sum) = queue.popleft()\n            if vertex == target:\n                return True\n            if vertex in visited:\n                continue\n            visited.add(vertex)\n            for neighbor in graph[vertex]:\n                queue.append((neighbor, current_sum + graph[vertex][neighbor]))\n        return False\n\n    source, target = map(int, stdin.split('\\n')[0].split())\n    graph = {i: {} for i in range(source)}\n    for line in stdin.split('\\n')[1:]:\n        x, y, z = map(int, line.split())\n        graph[x][y] = z\n        graph[y][x] = z\n    max_sum = 0\n    for source_vertex in range(source):\n        for target_vertex in range(source):\n            if source_vertex!= target_vertex and target_vertex in graph[source_vertex]:\n                if has_path(graph, source_vertex, target_vertex):\n                    max_sum = max(max_sum, graph[source_vertex][target_vertex] + graph[target_vertex][source_vertex])\n    return str(max_sum)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4286,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n  return 'NOT POSSIBLE'\n"
    },
    {
        "number": 4286,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, m = map(int, stdin.split('\\n')[0].split())\n    nums = list(map(int, stdin.split('\\n')[1].split()))\n    nums.sort()\n\n    # array of tuples\n    # (x, y, w)\n    special = []\n    for i in range(m):\n        x, y, w = map(int, stdin.split('\\n')[2 + i].split())\n        special.append((x, y, w))\n\n    # array of distances\n    # from node x to node y\n    dist = [0] * (nums[-1] + 1)\n\n    # array of pointers to special offers\n    # on each node\n    special_offer = [0] * (nums[-1] + 1)\n\n    # go through each vertex\n    for i in range(1, nums[-1] + 1):\n        if (i > nums[i - 1]):\n            dist[i] = dist[i - 1] + 1\n        else:\n            dist[i] = dist[i - 1]\n        special_offer[i] = i\n\n    # go through each special offer\n    for x, y, w in special:\n        if x < nums[-1] and y < nums[-1]:\n            special_offer[x] = y\n            special_offer[y] = x\n            dist[x] = max(dist[x], dist[y] + 1)\n\n    # go through each vertex and update\n    # the distance from it to its closest special offer\n    for i in range(1, nums[-1] + 1):\n        for x, y, w in special:\n            if i == x or i == y:\n                dist[i] = min(dist[i], dist[y] + 1)\n            elif i > x and i < y:\n                dist[i] = min(dist[i], dist[y] + 1, dist[x] + 1)\n\n    return dist[-1]\n"
    },
    {
        "number": 4286,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n  def dfs(graph, visited, start):\n    for vertex in graph[start]:\n      if vertex not in visited:\n        visited.add(vertex)\n        dfs(graph, visited, vertex)\n\n  n, m = list(map(int, stdin.split()))\n  g = defaultdict(list)\n\n  for i in range(m):\n    x, y, w = list(map(int, stdin.split()))\n    g[x].append(y)\n    g[y].append(x)\n\n  for i in range(n):\n    if i not in g:\n      g[i] = []\n\n  visited = set()\n  dfs(g, visited, 1)\n\n  return str(len(visited) - 1)\n\nprint(solution(stdin.readline()))\n\n\"\"\"\nfrom collections import defaultdict\n\ndef"
    },
    {
        "number": 4286,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = stdin.split(\"\\n\")[:2]\n    n, m = int(n), int(m)\n    nums = [int(i) for i in stdin.split(\"\\n\")[2:]]\n    \n    graph = [[] for i in range(n)]\n    for i, j in enumerate(nums):\n        if i < n-1:\n            graph[i].append(j)\n    \n    costs = [1e10 for i in range(n)]\n    queue = []\n    costs[0] = 0\n    queue.append(0)\n    while queue:\n        u = queue.pop(0)\n        for v in graph[u]:\n            if costs[v] > costs[u] + 1:\n                costs[v] = costs[u] + 1\n                queue.append(v)\n\n    ans = costs[-1]\n    for u, v, w in nums[:m]:\n        if costs[u-1] + w < costs[v-1]:\n            ans = min(ans, costs[u-1] + w + costs[n-1])\n    return ans\n\ndef"
    },
    {
        "number": 4286,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport sys\nimport math\n\nsys.setrecursionlimit(1000000)\n\nINF = math.inf"
    },
    {
        "number": 4286,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    A = map(int, stdin.split())\n    A = [0] + list(A)\n    adj = [[] for _ in range(N + 1)]\n    dp = [float('inf')] * (N + 1)\n    dp[1] = 0\n    for _ in range(M):\n        x, y, w = map(int, stdin.split())\n        adj[x].append((y, w))\n    for i in range(1, N + 1):\n        for j, w in adj[i]:\n            dp[j] = min(dp[j], dp[i] + w)\n    return dp[N]\n"
    },
    {
        "number": 4286,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    graph = {i: 0 for i in range(int(stdin))}\n    n, m = list(map(int, stdin.split(' ')))\n    for i in range(m):\n        x, y, w = list(map(int, stdin.split(' ')))\n        graph[x] += w\n        graph[y] += w\n\n    S = set()\n    nodes = graph.keys()\n    while len(nodes) > 0:\n        node = nodes.pop()\n        S.add(node)\n        for neighbor in graph[node]:\n            graph[neighbor] -= graph[node]\n            if graph[neighbor] == 0:\n                nodes.add(neighbor)\n\n    if len(S) == n:\n        return str(sum(graph.values()))\n    else:\n        return 'IMPOSSIBLE'\n    \n    \n"
    },
    {
        "number": 4286,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a = [int(n) for n in stdin.split(' ')]\n    n, m = a[0], a[1]\n    special_offers = []\n    for i in range(m):\n        special_offers.append(tuple([int(n) for n in stdin.split(' ')]))\n    graph = {}\n    for i in range(n):\n        graph[i] = set()\n    for offer in special_offers:\n        graph[offer[0] - 1].add(offer[1] - 1)\n        graph[offer[1] - 1].add(offer[0] - 1)\n    for node in graph:\n        if len(graph[node]) == 0:\n            for neighbor in graph:\n                graph[node].add(neighbor)\n    return\n\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4286,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4287,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution to the problem _Assign_\n    \"\"\"\n    return str()\n"
    },
    {
        "number": 4287,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, n, m = [int(x) for x in stdin.split('\\n')[:3]]\n    l = [int(x) for x in stdin.split('\\n')[3:n+3]]\n    r = [int(x) for x in stdin.split('\\n')[n+3:]]\n    x = [int(x) for x in stdin.split('\\n')[n+3+m:]]\n    p = [int(x) for x in stdin.split('\\n')[n+3+m+n:]]\n    l.sort()\n    r.sort()\n    x.sort()\n    p.sort()\n    count = 0\n    for i in range(m):\n        count += l[i]*p[i]\n    for j in range(n):\n        if r[j]-l[j] > x[0]-a:\n            return str(-1)\n        if l[j]<a:\n            count += (l[j]+1)*p[j]\n        if r[j]>a:\n            count += (r[j]+1-a)*p[j]\n    return str(count)"
    },
    {
        "number": 4287,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, n, m = map(int, stdin.split(' '))\n    r = [map(int, stdin.split(' ')) for _ in range(n)]\n    p = [map(int, stdin.split(' ')) for _ in range(m)]\n\n    dp = [[0] * (a + 1) for _ in range(2)]\n    for x, p_x in p:\n        dp[0][x] += p_x\n\n    for x, p_x in r:\n        dp[1][x] += p_x\n\n    for i in range(1, a):\n        for j in range(2):\n            dp[j][i + 1] = min(dp[j][i + 1], dp[1 - j][i] + dp[j][i])\n\n    if dp[0][-1] > dp[1][-1]:\n        return '-1'\n    return str(dp[0][-1])\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4287,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the string soln, the solution to the standard input problem.\n\n    Parameters:\n    stdin (str): The standard input, formatted as specified in the\n        assignment.\n    \"\"\"\n    a, n, m = [int(x) for x in stdin.split()]\n    rain = []\n    for _ in range(n):\n        l, r = [int(x) for x in stdin.split()]\n        rain.append((l, r))\n    umbrellas = [tuple(map(int, stdin.split())) for _ in range(m)]\n    soln = dp(a, rain, umbrellas)\n    return soln\n\ndef"
    },
    {
        "number": 4287,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, n, m = [int(x) for x in stdin.split(' ')]\n    segments = []\n    for i in range(n):\n        l, r = [int(x) for x in stdin.split(' ')[2*i:2*i+2]]\n        segments.append((l, r))\n\n    umbrellas = []\n    for i in range(m):\n        x, p = [int(x) for x in stdin.split(' ')[2*n+2*i:2*n+2*i+2]]\n        umbrellas.append((x, p))\n\n    answer = 0\n    for start, end in segments:\n        for i, (x, p) in enumerate(umbrellas):\n            if start <= x and x <= end:\n                answer += p\n                del umbrellas[i]\n                break\n\n    if answer > a:\n        return '-1'\n\n    return str(answer)\n"
    },
    {
        "number": 4287,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Solution with O(1) space complexity\n    '''\n    a, n, m = [int(i) for i in stdin.split()]\n    r = [int(i) for i in stdin.split()]\n    r.sort()\n    if n == 1:\n        return a * m\n    if m == 1:\n        return a * n\n    # x: total distance traveled so far\n    x = 0\n    # q: total distance left to travel\n    q = 0\n    q_min = 0\n    # total distance left to travel\n    q_max = 0\n    for i in range(n):\n        l, r = r[i]\n        if l > x:\n            q = r - x\n            if q_min == 0:\n                q_min = q\n            elif q < q_min:\n                q_min = q\n            if q_max < q_min:\n                q_max = q_min\n            q_min = 0\n        else:\n            q = l - x\n            if q_max < q:\n                q_max = q\n            if q_max == 0:\n                q_max = q\n            q_max = 0\n        x = r\n    if q_max == 0:\n        return a * n\n    return a * n + q_max\n"
    },
    {
        "number": 4287,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''10 2 4\n   ... 3 7\n   ... 8 10\n   ... 0 10\n   ... 3 4\n   ... 8 1\n   ... 1 2''')\n    14\n    \"\"\"\n   ...\n    a, n, m = [int(x) for x in stdin.split('\\n')[:3]]\n    r = []\n    for i in range(n):\n        l, r = [int(x) for x in stdin.split('\\n')[3 + i].split(' ')]\n        r += a - l\n        r.sort()\n        r.append(r[-1] + a)\n        r.insert(0, l)\n        r.append(r[-1] + a)\n        r.insert(0, l)\n        r.append(r[-1] + a)\n        r.insert(0, l)\n        r.append(r[-1] + a)\n        r.insert(0, l)\n        r.append(r[-1] + a)\n        r.insert(0, l)\n        r.append(r[-1] + a)\n        r.insert(0, l)\n        r.append(r[-1] + a)\n        r.insert(0, l)\n        r.append(r[-1] + a)\n        r.insert(0, l)\n        r.append(r[-1] + a)\n        r.insert(0, l)\n        r.append(r[-1] + a)\n        r.insert(0, l)\n        r.append(r[-1] + a)\n        r.insert(0, l)\n        r.append(r[-1] + a)\n        r.insert(0, l)\n        r.append(r[-1] + a)\n        r.insert(0, l)\n        r.append(r[-1] + a)\n        r.insert(0, l)\n        r.append(r[-1] + a)\n        r.insert(0, l)\n        r.append(r[-1] + a)\n        r.insert(0, l)\n        r.append(r[-1] + a)\n        r.insert(0, l)\n        r.append(r[-1] + a)\n        r.insert(0, l)\n        r.append(r[-1] + a)\n        r.insert(0, l)\n        r.append(r[-1] + a)\n        r.insert(0, l)\n        r.append(r[-1] + a)\n        r.insert(0, l)\n        r.append(r[-1] + a)\n        r.insert(0, l)\n        r.append(r[-1] + a)\n        r.insert(0, l)\n        r.append(r[-1] + a)\n        r.insert(0, l)\n        r.append(r[-1] + a)\n        r.insert(0, l)\n        r.append(r[-1] + a)\n        r.insert(0, l)\n        r.append(r[-1] + a)\n        r.insert(0, l)\n        r.append(r[-1] + a)\n        r.insert(0, l)\n        r.append(r[-1] + a)\n        r.insert(0, l)\n        r.append(r[-1] + a)\n        r.insert(0, l)\n        r.append(r[-1] + a)\n        r.insert(0, l)\n        r.append(r[-1] + a)\n        r.insert(0, l)\n        r.append(r[-1] + a)\n        r.insert(0, l)\n        r.append(r[-1] + a)\n        r.insert(0, l)\n        r.append(r[-1] + a)\n        r.insert(0, l)\n        r.append(r[-1] + a)\n        r.insert(0, l)\n        r.append(r["
    },
    {
        "number": 4287,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, n, m = map(int, stdin.split(' '))\n    x = [0] * n\n    p = [0] * m\n    d = dict()\n    for i in range(n):\n        x[i], y = map(int, stdin.split(' ')[i + 1].split(' '))\n        d[x[i]] = y\n    for i in range(m):\n        x, y = map(int, stdin.split(' ')[i + n + 1].split(' '))\n        d[x] = y\n    s = [0]\n    for xi in range(1, a + 1):\n        if xi not in d:\n            s.append(s[-1])\n            continue\n        s.append(s[-1] + d[xi])\n    # dp[i] is the minimum total fatigue after reaching point i\n    dp = [0] * (a + 1)\n    for xi in range(1, a + 1):\n        if xi in d:\n            dp[xi] = d[xi]\n            continue\n        dp[xi] = max(s[xi], dp[xi - 1])\n    return str(dp[a])\n"
    },
    {
        "number": 4287,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    _, n, m = map(int, stdin.split())\n    rain = []\n    for _ in range(n):\n        l, r = map(int, stdin.split())\n        rain.append([l, r])\n    umbrellas = []\n    for _ in range(m):\n        l, r = map(int, stdin.split())\n        umbrellas.append([l, r])\n    rain.sort()\n    umbrellas.sort()\n    s, f = 0, 0\n    i = 0\n    while i < m and f < n:\n        if rain[f][0] >= umbrellas[i][0]:\n            s += rain[f][1] + umbrellas[i][1]\n            f += 1\n        else:\n            i += 1\n    return s if f == n else -1\n    pass\n"
    },
    {
        "number": 4287,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"10 1 1\\n0 9\\n0 5\\n\")\n    '45'\n    \"\"\"\n   ...\n"
    },
    {
        "number": 4288,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if a == b and a!= c or a == c and a!= b or b == c and b!= a:\n        return 'Yes'\n    else:\n        return 'No'"
    },
    {
        "number": 4288,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(n) for n in stdin.split(' ')]\n    if (a, b) == (c, b) or (a, b) == (b, c) or (a, b) == (b, a):\n        return 'Yes'\n    else:\n        return 'No'"
    },
    {
        "number": 4288,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if a == c or b == a or b == c:\n        if a!= b and a!= c:\n            print('Yes')\n        else:\n            print('No')\n    else:\n        print('Yes')"
    },
    {
        "number": 4288,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(x) for x in stdin.strip().split()]\n    return 'Yes' if a == b or b == c or a == c else 'No'"
    },
    {
        "number": 4288,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return 'Yes' if the triple is poor and 'No' otherwise.\"\"\"\n    a, b, c = (int(x) for x in stdin.split())\n    if a == b or b == c or c == a:\n        return 'Yes'\n    else:\n        return 'No'\n"
    },
    {
        "number": 4288,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split(' '))\n\n    if a == b or a == c:\n        if b!= a:\n            return \"Yes\"\n        elif b == c:\n            if a!= c:\n                return \"Yes\"\n        return \"No\"\n    return \"No\"\n"
    },
    {
        "number": 4288,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = (int(x) for x in stdin.split())\n    return 'Yes' if a == b or b == c or c == a else 'No'\n"
    },
    {
        "number": 4288,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A = stdin.split()\n    B = int(A[0])\n    C = int(A[1])\n    D = int(A[2])\n    if (B!= C) and (B!= D) and (C!= D):\n        return \"Yes\"\n    elif (B == C) and (C!= D):\n        return \"Yes\"\n    elif (B!= C) and (B == D) and (C!= D):\n        return \"Yes\"\n    elif (B == C) and (B == D):\n        return \"No\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4288,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    input_ints = list(map(int, stdin.split()))\n    a, b, c = input_ints\n    if a == b or a == c or b == c:\n        return 'Yes'\n    return 'No'\n"
    },
    {
        "number": 4288,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin.split(' ')[0])\n    b = int(stdin.split(' ')[1])\n    c = int(stdin.split(' ')[2])\n    if a == b or b == c or a == c:\n        if a == b and a!= c:\n            return \"Yes\"\n        elif a == c and a!= b:\n            return \"Yes\"\n        elif b == c and b!= a:\n            return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4289,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the closest place to build a palace.\"\"\"\n\n    def get_closest_temperature(temperatures: list[int]) -> int:\n        \"\"\"Finds the closest place to build a palace.\"\"\"\n        return min(temperatures, key=lambda t: abs(temperatures[0] - t * 0.006))\n\n    n = int(stdin.readline())\n    temperatures = list(map(int, stdin.readline().split()))\n    print(get_closest_temperature(temperatures))\n"
    },
    {
        "number": 4289,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 4289,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Gets inputs from stdin and returns the optimal value\"\"\"\n    n = int(stdin.readline())\n    temperature, min_value = [], 0\n    for i in range(n):\n        temperature.append(int(stdin.readline()))\n        if temperature[i] < min_value:\n            min_value = temperature[i]\n    for i in range(n):\n        if (temperature[i] - min_value) * 0.006 < 0:\n            print(i + 1)\n            break\n        if i == n - 1:\n            print(i + 1)\n\nsolution(stdin)"
    },
    {
        "number": 4289,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, a, *h = [int(x) for x in stdin.split()]\n    return [i + 1 for i, hh in enumerate(h) if abs(a - (hh * 0.006)) < abs(a - (h[i - 1] * 0.006))].pop()\n"
    },
    {
        "number": 4289,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the place with the lowest average temperature, using the highest average temperature.\"\"\"\n    return str(int(stdin.split('\\n')[0])-int(stdin.split('\\n')[1])*0.006)\n"
    },
    {
        "number": 4289,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the index of the place with the lowest average temperature\n    Args:\n        stdin: input from standard input\n\n    Returns:\n        str: the index of the place with the lowest average temperature\n    \"\"\"\n    # read the input\n    n = int(stdin[0])\n    temperature = int(stdin[1])\n    elevations = list(map(int, stdin[2:]))\n\n    # find the index of the place with the lowest temperature\n    # note that the elevation is the index of the place in the list of places\n    lowest_temperature = min([\n        temperature - elevations[i] * 0.006\n        for i in range(n)\n    ])\n    return str(elevations[lowest_temperature])"
    },
    {
        "number": 4289,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Gets the input and returns the index of the place.\"\"\"\n    def _get_input() -> list:\n        \"\"\"Gets the input and returns a list of values.\"\"\"\n        try:\n            n = int(stdin)\n            t = int(stdin)\n            h = [int(stdin) for _ in range(n)]\n        except:\n            raise ValueError\n        return n, t, h\n\n    def _solve(n: int, t: int, h: list) -> str:\n        \"\"\"Solves the problem.\"\"\"\n        h_average = lambda p: p / n * t - p * 0.006\n        h_average = [h_average(p) for p in h]\n        h_average = sorted(h_average, key=abs)\n        return h_average.index(min(h_average)) + 1\n\n    return _solve(*_get_input())\n"
    },
    {
        "number": 4289,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    t, a = map(int, stdin.readline().split())\n    h = list(map(int, stdin.readline().split()))\n    closest = float('inf')\n    result = 0\n    for i in range(n):\n        if abs(t-a) > abs(t-h[i]):\n            result = i\n            closest = h[i]\n    return str(result+1)\n"
    },
    {
        "number": 4289,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Calculate the average temperature of the places,\n    then calculate the difference of the average temperature and\n    the desired temperature and return the index of the minimum difference.\n    '''\n    n, desired = stdin.split('\\n')[0].split()\n    n = int(n)\n    desired = int(desired)\n\n    temps = [float(i) for i in stdin.split('\\n')[1:]]\n\n    differences = []\n    for i in range(n):\n        differences.append(abs(desired - temps[i] * 0.006))\n\n    return differences.index(min(differences)) + 1\n"
    },
    {
        "number": 4289,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    temp = list(map(int, stdin.readline().strip().split(' ')))\n    princess = list(map(int, stdin.readline().strip().split(' ')))\n    temp.sort()\n    princess.sort()\n    min = float('inf')\n    index = 0\n    for i in range(n):\n        if abs(temp[i] - princess[i]) < min:\n            index = i\n            min = abs(temp[i] - princess[i])\n    return index + 1\n"
    },
    {
        "number": 4290,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def count(n: int, m: int):\n        if n == 0 or m == 0:\n            return 1\n        n_even = n // 2\n        n_odd = n - n_even\n        m_even = m // 2\n        m_odd = m - m_even\n        return count(n_even, m_even) * count(n_odd, m_odd)\n\n    n, m = [int(x) for x in stdin.split()]\n    return str(count(n, m))\n"
    },
    {
        "number": 4290,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Get input\n    in_str = stdin.split('\\n')\n    n, m = int(in_str[0]), int(in_str[1])\n    in_str = in_str[2:]\n\n    # Get the set of all possible sums\n    sums = [0]\n    for i in range(n + m):\n        sums.append(sums[i] + i + 1)\n\n    # Get the number of ways\n    ways = 0\n    for i in range(n + m):\n        for j in range(i, n + m + 1):\n            if sums[j] % 2 == 0:\n                ways += 1\n\n    # Return the answer\n    return ways\n"
    },
    {
        "number": 4290,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"2 1\")\n    1\n    \"\"\"\n    n, m = map(int, stdin.split())\n    return str(sum(i % 2 for i in range(n + m)))\n"
    },
    {
        "number": 4290,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if (n + m) % 2!= 0:\n        return 0\n    else:\n        return n * m - n - m + 2\n"
    },
    {
        "number": 4290,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split(' '))\n    even = 0\n    for i in range(N + M):\n        if i % 2 == 0:\n            even += i\n    return str(even)\n"
    },
    {
        "number": 4290,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''2 1''')\n    '1'\n    >>> solution('''3 2''')\n    '2'\n    >>> solution('''2 2''')\n    '1'\n    >>> solution('''3 3''')\n    '0'\n    \"\"\"\n    from functools import reduce\n    n, m = map(int, stdin.split())\n    return str(reduce(lambda x, y: x * y, [1 if sum(map(int, stdin.split())) % 2 == 0 else 0 for i in range(2)]))\n"
    },
    {
        "number": 4290,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the number of ways to choose two of N + M balls such that\n    the sum of the numbers on the balls is even.\n    \"\"\"\n    stdin = stdin.split()\n    n = int(stdin[0])\n    m = int(stdin[1])\n\n    if n > m:\n        n, m = m, n\n\n    return str(comb(n + m, 2) // 2)\n"
    },
    {
        "number": 4290,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    return str(int(n*m / (n+m) * (n+m-1) / 2))\n"
    },
    {
        "number": 4290,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \n    stdin = stdin.split(' ')\n    n, m = int(stdin[0]), int(stdin[1])\n    if (n + m) % 2 == 0:\n        if n > m:\n            if n == m:\n                return int((n * (n - 1)) / 2)\n            return int((n * (n - 1)) / 2) - int((m * (m - 1)) / 2)\n        return int((n * (n - 1)) / 2)\n    return int((n * (n - 1)) / 2) + int((m * (m - 1)) / 2)\n"
    },
    {
        "number": 4290,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\ndef"
    },
    {
        "number": 4291,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4291,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Takes in a standard input string containing a single line of N Q space\n    seperated values N Q. Then takes in a line of space seperated values\n    l_i r_i. Returns a single line of space seperated values: the ith\n    line of integers denoting the number of times that AC occurs in the\n    substring of S starting at index l_i and ending at index r_i.\n\n    Parameters\n    ----------\n    stdin : str\n        A single line of space seperated values: N Q.\n\n    Returns\n    -------\n    str\n        A single line of space seperated values: the ith line of\n        integers denoting the number of times that AC occurs in the\n        substring of S starting at index l_i and ending at index r_i.\n\n    Raises\n    ------\n    Exception\n        If N < 2 or N > 10^5.\n    Exception\n        If Q < 1 or Q > 10^5.\n    Exception\n        If any of the input values are not in range.\n\n    Examples\n    --------\n    >>> solution(\"8 3\\nACACTACG\\n3 7\\n2 3\\n1 8\")\n    2\\n0\\n3\n\n    >>> solution(\"8 2\\nATAC\\n1 1\")\n    1\\n0\n    \"\"\"\n    # Get input\n    # No input\n    if stdin == \"\":\n        raise Exception(\"No input. Program is terminated.\")\n    # Get N and Q\n    N, Q = [int(x) for x in stdin.split(\"\\n\")[0].split()]\n    # Check N constraints\n    if N < 2 or N > 10 ** 5:\n        raise Exception(\n            \"Constraint N >= 2 and N <= 10^5 is violated. N = {}\".format(N)\n        )\n    if Q < 1 or Q > 10 ** 5:\n        raise Exception(\"Constraint Q >= 1 and Q <= 10^5 is violated. Q = {}\".format(Q))\n    # Get S\n    S = stdin.split(\"\\n\")[1]\n    # Check character constraints\n    for c in S:\n        if c not in \"ACGT\":\n            raise Exception(\"Constraint: all characters in S are ACGT\")\n\n    # Iterate through each query\n    answers = []\n    for _ in range(Q):\n        # Get query\n        L, R = [int(x) for x in stdin.split(\"\\n\")[_].split()]\n        # Check constraints\n        if L < 1 or L > N:\n            raise Exception(\n                \"Constraint L >= 1 and L <= N is violated. L = {}\".format(L)\n            )\n        if R < L or R > N:\n            raise Exception(\n                \"Constraint R >= L and R <= N is violated. R = {}\".format(R)\n            )\n        # Get answer\n        answers.append(S.count(\"AC\", L, R + 1))\n    # Return answer\n    return \"\\n\".join(map(str, answers))\n"
    },
    {
        "number": 4291,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solve exercise.\"\"\"\n    # Get input\n    lines = stdin.split('\\n')\n    n, q = int(lines[0].split()[0]), int(lines[0].split()[1])\n    s = lines[1]\n    query = []\n    for line in lines[2:]:\n        query.append(list(map(int, line.split())))\n\n    # Solve problem\n    answers = []\n    for l_i, r_i in query:\n        answers.append(count_AC(s, l_i, r_i))\n\n    return '\\n'.join(map(str, answers))\n\n\ndef"
    },
    {
        "number": 4291,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def query(s: str, l: int, r: int):\n        substring = s[l:r]\n        result = 0\n        for i in range(len(substring)):\n            if substring[i] == 'A' and substring[i + 1] == 'C':\n                result += 1\n        print(result)\n    s = stdin\n    n, q = list(map(int, stdin.split()))\n    for _ in range(q):\n        l, r = list(map(int, stdin.split()))\n        query(s, l - 1, r)\n"
    },
    {
        "number": 4291,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    This solution uses the ACG counts method to solve the problem.\n    \"\"\"\n    # create our hash table of ACG counts\n    ACG_counts = dict()\n    for char in stdin:\n        if char in ACG_counts:\n            ACG_counts[char] += 1\n        else:\n            ACG_counts[char] = 1\n    \n    # read in our queries\n    num_queries = int(stdin.readline())\n    for i in range(0, num_queries):\n        # read in our two queries\n        input_data = stdin.readline().split()\n        start = int(input_data[0])\n        end = int(input_data[1])\n        # loop through our ACG counts\n        for char in ACG_counts:\n            # if the ACG count is between our start and end bounds, add to our answer\n            if ACG_counts[char] >= start and ACG_counts[char] <= end:\n                print(ACG_counts[char])\n                break\n"
    },
    {
        "number": 4291,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Main solution function\n    :param stdin: standard input string\n    :return: solution string\n    \"\"\"\n    # parse input\n    n, q = list(map(int, stdin.split()))\n    s = stdin.splitlines()[0]\n    q_queries = [list(map(int, input().split())) for _ in range(q)]\n    for i, j in q_queries:\n        i, j = i - 1, j\n        ans = s[i:j].count('AC')\n        print(ans)\n"
    },
    {
        "number": 4291,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Given:\n     - A string S of length N\n     - Q queries, where each query is a pair of integers (l_i, r_i)\n     - S[i] is either A, C, G or T\n    \n    Return:\n     - A string P of length N such that P[i] is \"AC\" if the substring of S starting at index l_i and ending at index r_i contains the letter \"AC\" exactly once, and otherwise \"\".\n    \"\"\"\n    n, q = [int(x) for x in stdin.split('\\n')[0].split()]\n    s = stdin.split('\\n')[1]\n    for line in stdin.split('\\n')[2:]:\n        a, b = [int(x) for x in line.split()]\n        print(''.join(['AC' if s[a:b].count('AC') == 1 else '' for a, b in [[int(x) for x in line.split()] for line in stdin.split('\\n')[2:]]]))\n\nsolution('''8 3\nACACTACG\n3 7\n2 3\n1 8''')"
    },
    {
        "number": 4291,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def query(q: int, s: str) -> int:\n        if q == 1:\n            return s.count(\"AC\")\n        l, r = [int(x) for x in stdin.split()][1:3]\n        return s[l:r].count(\"AC\")\n\n    return \"\\n\".join([str(query(i, stdin.split()[0])) for i in range(int(stdin.split()[1]))])\n"
    },
    {
        "number": 4291,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your solution\n    return '\\n'.join(solution(stdin.split('\\n')[0]))\n"
    },
    {
        "number": 4291,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution to the problem.\n\n    Parameters:\n        stdin (str): A string in the input format\n\n    Returns:\n        str: A string in the output format\n    \"\"\"\n    data = [x.split(' ') for x in stdin.split('\\n')]\n    n = int(data[0][0])\n    q = int(data[0][1])\n    S = data[1][0]\n    res = []\n    for x in range(2, len(data)):\n        if int(data[x][0]) > n or int(data[x][1]) > n:\n            break\n        l = int(data[x][0])\n        r = int(data[x][1])\n        res.append(r - l + 1)\n    return '\\n'.join(map(str, res))\n"
    },
    {
        "number": 4292,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(n) for n in stdin.strip().split()]\n    prices = [int(n) for n in stdin.strip().split()]\n    return sum(sorted(prices[:k])[k:])\n\n\nimport sys\n\ntry:\n    _, k = [int(n) for n in input().split()]\n    prices = [int(n) for n in input().split()]\nexcept Exception:\n    sys.exit(0)\n\nans = 0\nfor i in range(k):\n    ans += max(prices[i:])\nprint(ans)\n\n\n\nn, k = [int(n) for n in input().split()]\np = [int(n) for n in input().split()]\nprint(sum(sorted(p)[k:]) * k)\n"
    },
    {
        "number": 4292,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \n\"\"\"\n\n\ndef"
    },
    {
        "number": 4292,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin.splitlines()\n    N, K = int(data[0].split(' ')[0]), int(data[0].split(' ')[1])\n    prices = [int(i) for i in data[1].split(' ')]\n    return sum(i * prices[i-1] for i in range(1, K+1))\n"
    },
    {
        "number": 4292,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # 1\n    # 2\n    # 3\n    return stdin"
    },
    {
        "number": 4292,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def get_cost_n_kinds(stdin):\n        N, K = stdin.split(\" \")\n        N, K = int(N), int(K)\n        prices = stdin.split(\" \")\n        prices = [int(price) for price in prices]\n        return N, K, prices\n    \n    N, K, prices = get_cost_n_kinds(stdin)\n    # prices = [50, 100, 80, 120, 80]\n    # prices = [100, 80, 120, 80, 50]\n    # prices = [80, 120, 80, 50, 100]\n    min_cost = 0\n    # for i in range(N):\n    #     if K == 0:\n    #         break\n    #     else:\n    #         min_cost += min(prices) * K\n    #         prices.remove(min(prices))\n    #         K -= 1\n    # return min_cost\n    # prices.sort(reverse=True)\n    for i in range(N):\n        if K == 0:\n            break\n        else:\n            min_cost += prices[i] * K\n            K -= 1\n    return min_cost"
    },
    {
        "number": 4292,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # n_kinds, *prices = stdin.split()\n    # n_kinds, *prices = [int(n_kinds), *map(int, prices)]\n    # prices = [int(i) for i in prices]\n    n_kinds, *prices = list(map(int, stdin.split()))\n    prices = list(map(int, prices))\n    return str(sum(i * n for i, n in zip(prices, range(1, n_kinds+1))))\n"
    },
    {
        "number": 4292,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find the minimum possible total price of fruits.\n\n    Args:\n        stdin (str): Input.\n\n    Returns:\n        str: Output.\n    \"\"\"\n    lines = stdin.splitlines()\n    N, K = list(map(int, lines[0].split()))\n    p = list(map(int, lines[1].split()))\n\n    min_cost = [p[0]]\n    for i in range(1, N):\n        min_cost.append(min(p[i], min_cost[i-1]))\n\n    total_cost = sum([K * cost for cost in min_cost])\n    return total_cost\n"
    },
    {
        "number": 4292,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.splitlines()\n    N, K = [int(x) for x in input[0].split()]\n    prices = [int(x) for x in input[1].split()]\n    return str(sum(sorted(prices[:K])[-K:]))\n"
    },
    {
        "number": 4292,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4292,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    import re\n    string = stdin.strip()\n    string = re.sub('\\s+', ',', string)\n    string = string.replace('\\n', '')\n    n, k = map(int, string.split(','))\n    cost = list(map(int, string.split(',')))\n    cost = sorted(cost)\n    return sum(cost[:k])"
    },
    {
        "number": 4293,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time Complexity: O(1)\n    Space Complexity: O(1)\n    \"\"\"\n    P, Q, R = map(int, stdin.split())\n    return str(min(P + Q, P + R, Q + R))\n"
    },
    {
        "number": 4293,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(i) for i in stdin.split()]\n    print(min(a + b, a + c, b + c))\n\nsolution(stdin)\n"
    },
    {
        "number": 4293,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    p, q, r = [int(i) for i in stdin.split()]\n    print(sum([p, q, r]))\n    return ''"
    },
    {
        "number": 4293,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4293,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    time complexity: O(n^2)\n    space complexity: O(1)\n    \"\"\"\n    p, q, r = (int(i) for i in stdin.split())\n\n    return min(\n        p + q + r,\n        p + r + q,\n        q + p + r,\n        q + r + p,\n        r + p + q,\n        r + q + p,\n    )\n"
    },
    {
        "number": 4293,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    P, Q, R = list(map(int, stdin.split()))\n    return min(P + Q, R + P, R + Q)"
    },
    {
        "number": 4293,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    \n    p, q, r = [int(s) for s in stdin.split()]\n    \n    min_of_times = min(p, q, r)\n    \n    sum_of_times = p + q + r\n    \n    return str(sum_of_times - min_of_times)\n"
    },
    {
        "number": 4293,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\ndef"
    },
    {
        "number": 4293,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pqr = list(map(int, stdin.split(' ')))\n    p = pqr[0]\n    q = pqr[1]\n    r = pqr[2]\n\n    return min(p + q, p + r, q + r)\n"
    },
    {
        "number": 4293,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    P, Q, R = map(int, stdin.split())\n    time1 = P + Q\n    time2 = Q + R\n    time3 = R + P\n    # return min(time1, time2, time3)\n    return min(time1 + time2, time1 + time3, time2 + time3)\n\n---- Tests ----\nsolution(3, 4, 5) \u279e 4\n\nsolution(5, 3, 4) \u279e 7\n\nsolution(2, 4, 1) \u279e 4\n\nsolution(1, 4, 2) \u279e 5\n\nsolution(3, 3, 3) \u279e 10\n\nsolution(1, 5, 6) \u279e 9\n\nsolution(1, 1, 1) \u279e 2\n\nsolution(1, 2, 3) \u279e 3\n\nsolution(1, 2, 1) \u279e 2\n\nsolution(1, 1, 1) \u279e 1\n\nsolution(4, 4, 5) \u279e 15\n\nsolution(4, 2, 3) \u279e 10\n\nsolution(4, 3, 5) \u279e 13\n\nsolution(4, 3, 4) \u279e 16\n\nsolution(4, 4, 4) \u279e 20\n\nsolution(1, 3, 1) \u279e 2\n\nsolution(1, 1, 1) \u279e 1\n\nsolution(1, 1, 3) \u279e 4\n\nsolution(1, 3, 4) \u279e 5\n\nsolution(4, 4, 3) \u279e 15\n\nsolution(4, 2, 2) \u279e 10\n\nsolution(4, 2, 3) \u279e 13\n\nsolution(4, 5, 4) \u279e 20\n\nsolution(3, 4, 5) \u279e 7\n\nsolution(3, 3, 3) \u279e 10\n\nsolution(1, 5, 6) \u279e 9\n\nsolution(1, 1, 1) \u279e 2\n\nsolution(1, 2, 3) \u279e 3\n\nsolution(1, 2, 1) \u279e 2\n\nsolution(1, 1, 1) \u279e 1\n\nsolution(4, 4, 5) \u279e 15\n\nsolution(4, 2, 3) \u279e 10\n\nsolution(4, 3, 5) \u279e 13\n\nsolution(4, 3, 4) \u279e 16\n\nsolution(4, 4, 4) \u279e 20\n\nsolution(1, 3, 1) \u279e 2\n\nsolution(1, 1, 1) \u279e 1\n\nsolution(1, 1, 3) \u279e 4\n\nsolution(1, 3, 4) \u279e 5\n\nsolution(4, 4, 4) \u279e 20\n\nsolution(1, 2, 3) \u279e 3\n\nsolution(4, 2, 2) \u279e 10\n\nsolution(4, 2, 3) \u279e 13\n\nsolution(4, 5, 4) \u279e 20\n\nsolution(3, 4, 5) \u279e 7\n\nsolution(3, 3, 3) \u279e 10\n\nsolution(1, 5, 6) \u279e 9\n\nsolution(1, 1, 1) \u279e 2\n\nsolution(1, 2, 3) \u279e 3\n\nsolution(1, 2, 1) \u279e 2\n\nsolution(1, 1, 1) \u279e 1\n\nsolution(4, 4, 5) \u279e 15\n\nsolution(4, 2, 3) \u279e 10\n\nsolution(4, 3, 5) \u279e 13\n\nsolution(4, 3, 4) \u279e 16\n\nsolution(4, 4, 4) \u279e 20\n\nsolution(1, 3, 1) \u279e 2\n\nsolution(1, 1, 1) \u279e 1\n\nsolution(1, 1, 3) \u279e 4\n\nsolution(1, 3, 4) \u279e 5\n\nsolution(4, 4, 4) \u279e 20\n\nsolution(1, 2, 3) \u279e 3\n\nsolution(4, 2, 2) \u279e 10\n\nsolution(4, 2, 3) \u279e 13\n\nsolution(4, 5, 4) \u279e 20\n\nsolution(3, 4, 5) \u279e 7\n\nsolution(3, 3, 3) \u279e 10\n\nsolution(1, 5, 6) \u27a5 9\n\nsolution(1, 1, 1) \u27a5 2\n\nsolution(1, 2, 3) \u27a5 3\n\nsolution(1, 2, 1) \u27a5 2\n\nsolution(1, 1, 1) \u27a5 1\n\nsolution(4, 4, 5) \u27a5 15\n\nsolution(4, 2, 3) \u27a5 10\n\nsolution(4, 3, 5) \u27a5 13\n\nsolution(4, 3, 4) \u27a5 16\n\nsolution(4, 4, 4) \u27a5 20\n\nsolution(1, 3, 1) \u27a5 2\n\nsolution(1, 1, 1) \u27a5 1\n\nsolution(1, 1, 3) \u27a5 4\n\nsolution(1, 3, 4) \u27a5 5\n\nsolution(4, 4, 4) \u27a5 20\n\nsolution(1, 2, 3) \u27a5 3\n\nsolution(4, 2, 2) \u27a5 10\n\nsolution(4, 2, 3) \u27a5 13\n\nsolution(4, 5, 4) \u27a5 20\n\nsolution(3, 4, 5) \u27a5 7\n\nsolution(3, 3, 3) \u27a5 10\n\nsolution(1, 5, 6) \u27a5 9\n\nsolution(1, 1, 1) \u27a5 2\n\nsolution(1, 2, 3) \u27a5 3\n\nsolution(1, 2, 1) \u27a5 2\n\nsolution(1, 1, 1) \u27a5 1\n\nsolution(4, 4, 5) \u27a5 15\n\nsolution(4, 2, 3) \u27a5 10\n\nsolution(4, 3, 5) \u27a5 13\n\nsolution(4, 3, 4) \u27a5 16\n\nsolution(4, 4, 4) \u27a5 20\n\nsolution(1, 3, 1) \u27a5 2\n\nsolution(1, 1, 1) \u27a5 1\n\nsolution(1, 1, 3) \u27a5 4\n\nsolution(1, 3, 4) \u27a5 5\n\nsolution(4, 4, 4) \u27a5 20\n\nsolution(1, 2, 3) \u27a5 3\n\nsolution(4, 2, 2) \u27a5 10\n\nsolution(4, 2, 3) \u27a5 13\n\nsolution"
    },
    {
        "number": 4294,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return '0' if x is less than a, otherwise '10'.\n    >>> solution(\"3 5\")\n    '0'\n    >>> solution(\"5 3\")\n    '10'\n    \"\"\"\n    x, a = map(int, stdin.split())\n    return str(0 if x < a else 10)\n"
    },
    {
        "number": 4294,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x, a = map(int, stdin.split(' '))\n    return f'{0 if x < a else 10}'\n\ndef"
    },
    {
        "number": 4294,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    X, A = map(int, stdin.split(' '))\n    if X < A:\n        return '0'\n    else:\n        return '10'"
    },
    {
        "number": 4294,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    X, A = map(int, stdin.split('\\n')[0].split())\n    \"\"\"\n    X, A = 3, 5\n    if X < A:\n        return '0'\n    else:\n        return '10'\n"
    },
    {
        "number": 4294,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split(\"\\n\")\n    for line in input_list:\n        x = int(line.split(\" \")[0])\n        a = int(line.split(\" \")[1])\n        if x < a:\n            print(0)\n        elif x > a:\n            print(10)\n        else:\n            print(0)\n        \n        return None"
    },
    {
        "number": 4294,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    print(0 if int(stdin.split('\\n')[0].split(' ')[0]) < int(stdin.split('\\n')[0].split(' ')[1]) else 10)\n    return\n"
    },
    {
        "number": 4294,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    input_val = stdin.split()\n    X = int(input_val[0])\n    A = int(input_val[1])\n    if X < A:\n        return 0\n    else:\n        return 10"
    },
    {
        "number": 4294,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3 5\")\n    0\n    \"\"\"\n    x, a = [int(stdin) for stdin in stdin.split(\" \")]\n    return str(0 if x < a else 10)\n"
    },
    {
        "number": 4294,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return str(0 if int(stdin[0]) < int(stdin[1]) else 10)\n\ndef"
    },
    {
        "number": 4294,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    X, A = map(int, stdin.split())\n    return str(0) if X < A else str(10)\n"
    },
    {
        "number": 4295,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n    data = stdin.split('\\n')\n    n = int(data[0])\n    k = int(data[1])\n    \n    return n\n"
    },
    {
        "number": 4295,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    if N == K:\n        return str(K)\n    if N < K:\n        return str(N)\n    return str(abs(N - K))\n"
    },
    {
        "number": 4295,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, K = stdin.split()\n    return str(int(N) - abs(int(N) - int(K)))\n\n\ndef"
    },
    {
        "number": 4295,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(s) for s in stdin.split()]\n    k = abs(k)\n    k = k % n\n    if k == 0:\n        k = n\n    return str(abs(n - k))\n"
    },
    {
        "number": 4295,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    count = 0\n    while n!= k:\n        n = abs(n - k)\n        count += 1\n    return str(count)\n"
    },
    {
        "number": 4295,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the minimum possible value taken by N after Aoki does the operation zero or more times.\n    >>> solution(\"7 4\")\n    '1'\n    >>> solution(\"10 6\")\n    '1'\n    >>> solution(\"1 8\")\n    '0'\n    >>> solution(\"10 100\")\n    '10'\n    \"\"\"\n    return str(min(int(stdin.split(\" \")[0]) - int(stdin.split(\" \")[1]), 0))\n"
    },
    {
        "number": 4295,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Get input and compute the minimum possible value of N after Aoki does the operation zero or more times\"\"\"\n    N, K = map(int, stdin.split())\n    print(min(abs(N - K), abs(N + K)))\n    return solution"
    },
    {
        "number": 4295,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    #Your solution goes here\n    pass\n"
    },
    {
        "number": 4295,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    return str(min(abs(N - K), abs(N + K)))\n"
    },
    {
        "number": 4295,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # get input\n    N, K = stdin.split(' ')\n    # solve\n    for i in range(len(N)):\n        if N[i] == '-':\n            N[i] = '+'\n    ans = int(N) - int(K)\n    if ans < 0:\n        ans = int('-' + N[1:]) - int(K)\n    return str(ans)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4296,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a1, a2, a3 = list(map(int, stdin.split()))\n    if (a1 + a2 + a3) >= 22:\n        return 'bust'\n    return 'win'\n"
    },
    {
        "number": 4296,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A_1, A_2, A_3 = map(int, stdin.split())\n    if (A_1 + A_2 + A_3) >= 22:\n        return 'bust'\n    else:\n        return 'win'\n\n\ndef"
    },
    {
        "number": 4296,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a_1, a_2, a_3 = map(int, stdin.split(' '))\n    return \"bust\" if sum((a_1, a_2, a_3)) >= 22 else \"win\""
    },
    {
        "number": 4296,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"5 7 9\")\n    'win'\n    >>> solution(\"5 7 8\")\n    'bust'\n    >>> solution(\"7 7 7\")\n    'bust'\n    >>> solution(\"6 7 6\")\n    'win'\n    >>> solution(\"3 4 5\")\n    'bust'\n    >>> solution(\"1 2 3\")\n    'win'\n    >>> solution(\"1 2 7\")\n    'win'\n    >>> solution(\"1 2 5\")\n    'bust'\n    >>> solution(\"2 2 4\")\n    'bust'\n    >>> solution(\"1 1 1\")\n    'bust'\n    >>> solution(\"1 1 3\")\n    'bust'\n    >>> solution(\"2 2 2\")\n    'win'\n    >>> solution(\"1 2 1\")\n    'win'\n    >>> solution(\"1 2 4\")\n    'bust'\n    >>> solution(\"1 2 6\")\n    'bust'\n    >>> solution(\"1 1 5\")\n    'win'\n    >>> solution(\"1 1 1\")\n    'bust'\n    >>> solution(\"1 2 5\")\n    'win'\n    >>> solution(\"1 2 7\")\n    'win'\n    >>> solution(\"1 1 7\")\n    'bust'\n    >>> solution(\"1 1 5\")\n    'win'\n    >>> solution(\"1 2 7\")\n    'bust'\n    >>> solution(\"1 1 5\")\n    'win'\n    >>> solution(\"2 1 2\")\n    'win'\n    >>> solution(\"1 1 7\")\n    'win'\n    >>> solution(\"2 2 1\")\n    'bust'\n    >>> solution(\"1 2 6\")\n    'win'\n    >>> solution(\"2 2 4\")\n    'win'\n    >>> solution(\"1 1 2\")\n    'win'\n    >>> solution(\"2 2 2\")\n    'win'\n    >>> solution(\"1 2 5\")\n    'bust'\n    >>> solution(\"2 1 2\")\n    'win'\n    >>> solution(\"1 2 3\")\n    'bust'\n    >>> solution(\"1 1 5\")\n    'win'\n    >>> solution(\"1 1 1\")\n    'bust'\n    >>> solution(\"1 1 3\")\n    'bust'\n    >>> solution(\"1 1 2\")\n    'win'\n    >>> solution(\"2 2 1\")\n    'bust'\n    >>> solution(\"1 1 7\")\n    'win'\n    >>> solution(\"2 1 2\")\n    'win'\n    >>> solution(\"1 1 7\")\n    'bust'\n    >>> solution(\"1 1 5\")\n    'bust'\n    >>> solution(\"2 2 1\")\n    'win'\n    >>> solution(\"2 1 2\")\n    'win'\n    >>> solution(\"2 2 1\")\n    'bust'\n    >>> solution(\"2 2 1\")\n    'win'\n    >>> solution(\"2 2 1\")\n    'win'\n    >>> solution(\"1 1 1\")\n    'bust'\n    >>> solution(\"1 2 4\")\n    'bust'\n    >>> solution(\"1 1 4\")\n    'bust'\n    >>> solution(\"1 1 5\")\n    'win'\n    >>> solution(\"1 1 7\")\n    'win'\n    >>> solution(\"1 2 7\")\n    'bust'\n    >>> solution(\"1 2 4\")\n    'win'\n    >>> solution(\"2 2 1\")\n    'win'\n    >>> solution(\"1 1 2\")\n    'win'\n    >>> solution(\"1 1 7\")\n    'bust'\n    >>> solution(\"1 1 7\")\n    'bust'\n    >>> solution(\"1 2 3\")\n    'bust'\n    >>> solution(\"1 1 2\")\n    'win'\n    >>> solution(\"1 1 7\")\n    'win'\n    >>> solution(\"1 1 4\")\n    'win'\n    >>> solution(\"1 1 4\")\n    'bust'\n    >>> solution(\"2 1 1\")\n    'win'\n    >>> solution(\"1 1 7\")\n    'win'\n    >>> solution(\"1 2 6\")\n    'win'\n    >>> solution(\"1 1 6\")\n    'bust'\n    >>> solution(\"1 2 6\")\n    'bust'\n    >>> solution(\"1 1 5\")\n    'win'\n    >>> solution(\"1 1 5\")\n    'bust'\n    >>> solution(\"1 1 5\")\n    'win'\n    >>> solution(\"1 1 6\")\n    'bust'\n    >>> solution(\"1 1 6\")\n    'win'\n    >>> solution(\"1 1 6\")\n    'win'\n    >>> solution(\"1 2 6\")\n    'win'\n    >>> solution(\"1 2 6\")\n    'bust'\n    >>> solution(\"1 2 5\")\n    'win'\n    >>> solution(\"1 2 5\")\n    'win'\n    >>> solution(\"1 2 6\")\n    'win'\n    >>> solution(\"1 2 6\")\n    'bust'\n    >>> solution(\"1 1 1\")\n    'bust'\n    >>> solution(\"1 2 5\")\n    'win'\n    >>> solution(\"1 1 5\")\n    'bust'\n    >>> solution(\"1 2 5\")\n    'win'\n    >>> solution(\"1 1 5\")\n    'win'\n    >>> solution(\"1 1 5\")\n    'bust'\n    >>> solution(\"1 1 1\")\n    'win'\n    >>> solution(\"1 2 4\")\n    'bust'\n    >>> solution(\"2 1 2\")\n    'win'\n    >>> solution(\"1 1 2\")\n    'win'\n    >>> solution(\"1 1 7\")\n    'win'\n    >>> solution(\"1 2 7\")\n    'bust'\n    >>> solution(\"1 2 4\")\n    'win'\n    >>> solution(\"2 1 2\")\n    'win'\n    >>> solution(\"1 1 1\")\n    'bust'\n    >>> solution(\"1 1 7\")\n    'win'\n    >>> solution(\"1 1 4\")\n    'win'\n    >>> solution(\"1 1 4\")\n    'bust'\n    >>> solution(\"1 1 7\")\n    'win'\n    >>> solution(\"1 1 7\")\n    'bust'\n    >>> solution(\"1 2 3\")\n    'bust'\n    >>> solution(\"1 1 2\")\n    'win'\n    >>> solution(\"1 1 7\")\n    'win'\n    >>> solution(\"1 1 4\")\n    'win'\n    >>> solution(\"1 1 4\")\n    'bust'\n    >>> solution(\"2 1 2\")\n    'win'\n    >>> solution(\"1 1 7\")\n    'win'\n    >>> solution(\"1 2 7\")\n    'bust'\n    >>> solution(\"1 2 4\")\n    'win'\n    >>> solution(\"1 1 4\")\n    'win'\n    >>> solution(\"1 1 7\")\n    'win'\n    >>> solution(\"1 1 5\")\n    'bust'\n    >>> solution(\"1 1 5\")\n    'win'\n    >>> solution(\"1 1 5\")\n    'win'\n    >>> solution(\"1 1 7\")\n    'win'\n    >>> solution(\"1 1 7\")\n    'bust'\n    >>> solution(\"1 1 7\")\n    'win'\n    >>> solution(\"1 1 7\")\n    'bust'\n    >>> solution(\"1 1 7\")\n    'win'\n    >>> solution(\"1 1 5\")\n    'win'\n    >>> solution(\"1 1 5\")\n    'win'\n    >>> solution(\"1 1 5\")\n    'win'\n    >>> solution(\"1 1 7\")\n    'win'\n    >>> solution(\"1 1 7\")\n    'win'\n    >>> solution(\"1 1 7\")\n    'win'\n    >>> solution(\"1 1 7\")\n    'win'\n    >>> solution(\"1 1 7\")\n    'win'\n    >>> solution(\"1 1 7\")\n    'win'\n    >>> solution(\"1 1 7\")\n    'win"
    },
    {
        "number": 4296,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(x) for x in stdin.split(' ')]\n    return \"win\" if a+b+c >= 22 else \"bust\"\n"
    },
    {
        "number": 4296,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split(' '))\n    sum = a + b + c\n    if sum >= 22:\n        return 'bust'\n    return 'win'\n\"\"\""
    },
    {
        "number": 4296,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A_1, A_2, A_3 = [int(i) for i in stdin.split()]\n    if sum((A_1, A_2, A_3)) >= 22:\n        print('bust')\n    else:\n        print('win')\n"
    },
    {
        "number": 4296,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    total = sum([int(x) for x in stdin.split(\" \")])\n    if total > 21:\n        print(\"bust\")\n    else:\n        print(\"win\")"
    },
    {
        "number": 4296,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split(' '))\n    return 'bust' if sum([a, b, c]) >= 22 else 'win'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4296,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A_1, A_2, A_3 = map(int, stdin.split())\n    if sum([A_1, A_2, A_3]) >= 22:\n        return \"bust\"\n    else:\n        return \"win\"\n"
    },
    {
        "number": 4297,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3''')\n    6\n    \"\"\"\n    n = int(stdin)\n    for i in range(n + 1, 1, -1):\n        if not i % n:\n            if not i % 2:\n                return i\n            else:\n                break\n"
    },
    {
        "number": 4297,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    i = 2\n    while n % i!= 0:\n        i += 1\n\n    return str(n * n // i)\n"
    },
    {
        "number": 4297,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    divisor = 1\n    while divisor < n:\n        if n % divisor == 0 and divisor % 2 == 0:\n            return str(divisor)\n        divisor += 1\n    return str(n)\n"
    },
    {
        "number": 4297,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    _, N = map(int, stdin.split())\n    if N % 2!= 0:\n        return N\n    else:\n        return N + 1\n"
    },
    {
        "number": 4297,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # total = 1\n    # for i in range(int(stdin)):\n    #     total *= int(stdin)\n    # return total\n\n    n = int(stdin)\n    ans = 1\n    while True:\n        if ans % 2 == 0 and ans % n == 0:\n            return ans\n        ans += 1\n\nprint(solution(input()))\n"
    },
    {
        "number": 4297,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = stdin.split()[0]\n    N = int(N)\n    for i in range(1, N+1):\n        if i%2==0 and i%N==0:\n            return str(i)\n    \n"
    },
    {
        "number": 4297,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    i = 1\n    while True:\n        if not N % i:\n            if not i % 2:\n                return i\n            else:\n                if i % N:\n                    return i\n        i += 1\n"
    },
    {
        "number": 4297,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin)\n    i = 1\n    while True:\n        if num % 2 == 0 and num % i == 0:\n            return str(num)\n        i += 1\n"
    },
    {
        "number": 4297,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n  N = int(stdin)\n  ans = 1\n  while (N > 1):\n    if (N % 2!= 0):\n      N -= 1\n      ans += 1\n    else:\n      N /= 2\n  return str(ans)\n"
    },
    {
        "number": 4297,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n\n    if N % 2 == 0:\n        return N\n    else:\n        i = N + 1\n        while True:\n            if i % 2!= 0:\n                return i\n\n            i += 1\n"
    },
    {
        "number": 4298,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n  N, D = [int(x) for x in stdin.split(' ')]\n  return str(N - D + 1)\n\"\"\"\n\ndef"
    },
    {
        "number": 4298,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    # pass\n    import sys\n    line_array = stdin.splitlines()\n    first_line = line_array[0].split(' ')\n    N = int(first_line[0])\n    D = int(first_line[1])\n    second_line = line_array[1].split(' ')\n    # print(second_line)\n    tree = []\n    for line in line_array[2:]:\n        tree.append(int(line))\n    # print(tree)\n    count = 0\n    for i in range(N - D + 1):\n        for j in range(i+1, i+D+1):\n            if j >= N:\n                break\n            if tree[i] == tree[j]:\n                count += 1\n                break\n    return count"
    },
    {
        "number": 4298,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # get input values\n    [N, D] = [int(x) for x in stdin.split(' ')]\n    # write your code in Python 3.6\n    return str(N - D + 1)"
    },
    {
        "number": 4298,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Your code goes here\n\nprint(solution(input()))\n"
    },
    {
        "number": 4298,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Get Input\n    n, d = stdin.split()\n    n = int(n)\n    d = int(d)\n    # Solve the problem\n    trees = [False] * n\n    for _ in range(int(stdin.readline())):\n        i = int(stdin.readline())\n        for j in range(d, n + 1):\n            trees[i - 1] = True\n    \n    return str(trees.count(True))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4298,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\ndef"
    },
    {
        "number": 4298,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport sys\nimport math\n\n\ndef"
    },
    {
        "number": 4298,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nfrom typing import List, Dict\n\n\ndef"
    },
    {
        "number": 4298,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, D = [int(x) for x in stdin.split()]\n    return '{}'.format(N // D + (N % D!= 0))"
    },
    {
        "number": 4298,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Get the input\n    n, d = [int(x) for x in stdin.split()]\n    # Initialize the answer variable\n    answer = 0\n    # Calculate the answer\n    answer = d * (n - 1)\n    # Return the answer\n    return str(answer)\n\"\"\""
    },
    {
        "number": 4299,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 4299,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport re"
    },
    {
        "number": 4299,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\n
    },
    {
        "number": 4299,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    n = stdin.readline().rstrip()\n    if n[0] == '0':\n        if n[1] in ['1', '6', '8']:\n            print('hon')\n        else:\n            print('pon')\n    else:\n        print('bon')\n    '''\n    # \u4e0b\u8a18\u306e\u30b3\u30fc\u30c9\u3060\u3068\u6700\u521d\u306e\u6587\u5b57\u304c 0, 1, 6, 8 \u306a\u3089\u672c\u3092\u5165\u529b\u3059\u308b\u3002\n    # \u5c0f\u6570\u70b9\u4ee5\u964d\u304c\u6570\u5b57\u306a\u3089\u3070\u3001\u5404\u6587\u5b57\u306b\u3064\u3044\u3066\u6c42\u3081\u308b\u3002\n    # \u305f\u3060\u3057\u30010\u304c\u4ed8\u3044\u3066\u3044\u308b\u5834\u5408\u306f\u3001\u305d\u306e\u6587\u5b57\u306e\u672c\u3092\u5165\u529b\u3059\u308b\u3002\n\n    n = stdin.readline().rstrip()\n    if n[0] == '0' and int(n[1]) not in [2, 3, 4, 5, 7, 8, 9]:\n        print('hon')\n    elif n[0] == '1':\n        if int(n[1]) in [2, 4, 5, 7, 8]:\n            print('pon')\n        else:\n            print('bon')\n    else:\n        print('bon')\n"
    },
    {
        "number": 4299,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4299,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = stdin\n\n    if N == \"0\":\n        return \"bon\"\n    elif N == \"1\":\n        return \"pon\"\n    elif N == \"2\":\n        return \"hon\"\n    elif N == \"3\":\n        return \"hon\"\n    elif N == \"4\":\n        return \"hon\"\n    elif N == \"5\":\n        return \"hon\"\n    elif N == \"6\":\n        return \"pon\"\n    elif N == \"7\":\n        return \"hon\"\n    elif N == \"8\":\n        return \"hon\"\n    elif N == \"9\":\n        return \"hon\"\n    elif N == \"10\":\n        return \"hon\"\n    elif N == \"11\":\n        return \"hon\"\n    elif N == \"12\":\n        return \"hon\"\n    elif N == \"13\":\n        return \"hon\"\n    elif N == \"14\":\n        return \"hon\"\n    elif N == \"15\":\n        return \"hon\"\n    elif N == \"16\":\n        return \"pon\"\n    elif N == \"17\":\n        return \"hon\"\n    elif N == \"18\":\n        return \"hon\"\n    elif N == \"19\":\n        return \"hon\"\n    elif N == \"20\":\n        return \"hon\"\n    elif N == \"21\":\n        return \"hon\"\n    elif N == \"22\":\n        return \"hon\"\n    elif N == \"23\":\n        return \"hon\"\n    elif N == \"24\":\n        return \"hon\"\n    elif N == \"25\":\n        return \"hon\"\n    elif N == \"26\":\n        return \"hon\"\n    elif N == \"27\":\n        return \"hon\"\n    elif N == \"28\":\n        return \"hon\"\n    elif N == \"29\":\n        return \"hon\"\n    elif N == \"30\":\n        return \"hon\"\n    elif N == \"31\":\n        return \"hon\"\n    elif N == \"32\":\n        return \"hon\"\n    elif N == \"33\":\n        return \"hon\"\n    elif N == \"34\":\n        return \"hon\"\n    elif N == \"35\":\n        return \"hon\"\n    elif N == \"36\":\n        return \"hon\"\n    elif N == \"37\":\n        return \"hon\"\n    elif N == \"38\":\n        return \"hon\"\n    elif N == \"39\":\n        return \"hon\"\n    elif N == \"40\":\n        return \"hon\"\n    elif N == \"41\":\n        return \"hon\"\n    elif N == \"42\":\n        return \"hon\"\n    elif N == \"43\":\n        return \"hon\"\n    elif N == \"44\":\n        return \"hon\"\n    elif N == \"45\":\n        return \"hon\"\n    elif N == \"46\":\n        return \"hon\"\n    elif N == \"47\":\n        return \"hon\"\n    elif N == \"48\":\n        return \"hon\"\n    elif N == \"49\":\n        return \"hon\"\n    elif N == \"50\":\n        return \"hon\"\n    elif N == \"51\":\n        return \"hon\"\n    elif N == \"52\":\n        return \"hon\"\n    elif N == \"53\":\n        return \"hon\"\n    elif N == \"54\":\n        return \"hon\"\n    elif N == \"55\":\n        return \"hon\"\n    elif N == \"56\":\n        return \"hon\"\n    elif N == \"57\":\n        return \"hon\"\n    elif N == \"58\":\n        return \"hon\"\n    elif N == \"59\":\n        return \"hon\"\n    elif N == \"60\":\n        return \"hon\"\n    elif N == \"61\":\n        return \"hon\"\n    elif N == \"62\":\n        return \"hon\"\n    elif N == \"63\":\n        return \"hon\"\n    elif N == \"64\":\n        return \"hon\"\n    elif N == \"65\":\n        return \"hon\"\n    elif N == \"66\":\n        return \"hon\"\n    elif N == \"67\":\n        return \"hon\"\n    elif N == \"68\":\n        return \"hon\"\n    elif N == \"69\":\n        return \"hon\"\n    elif N == \"70\":\n        return \"hon\"\n    elif N == \"71\":\n        return \"hon\"\n    elif N == \"72\":\n        return \"hon\"\n    elif N == \"73\":\n        return \"hon\"\n    elif N == \"74\":\n        return \"hon\"\n    elif N == \"75\":\n        return \"hon\"\n    elif N == \"76\":\n        return \"hon\"\n    elif N == \"77\":\n        return \"hon\"\n    elif N == \"78\":\n        return \"hon\"\n    elif N == \"79\":\n        return \"hon\"\n    elif N == \"80\":\n        return \"hon\"\n    elif N == \"81\":\n        return \"hon\"\n    elif N == \"82\":\n        return \"hon\"\n    elif N == \"83\":\n        return \"hon\"\n    elif N == \"84\":\n        return \"hon\"\n    elif N == \"85\":\n        return \"hon\"\n    elif N == \"86\":\n        return \"hon\"\n    elif N == \"87\":\n        return \"hon\"\n    elif N == \"88\":\n        return \"hon\"\n    elif N == \"89\":\n        return \"hon\"\n    elif N == \"90\":\n        return \"hon\"\n    elif N == \"91\":\n        return \"hon\"\n    elif N == \"92\":\n        return \"hon\"\n    elif N == \"93\":\n        return \"hon\"\n    elif N == \"94\":\n        return \"hon\"\n    elif N == \"95\":\n        return \"hon\"\n    elif N == \"96\":\n        return \"hon\"\n    elif N == \"97\":\n        return \"hon\"\n    elif N == \"98\":\n        return \"hon\"\n    elif N == \"99\":\n        return \"hon\"\n    elif N == \"100\":\n        return \"hon\"\n    elif N == \"101\":\n        return \"hon\"\n    elif N == \"102\":\n        return \"hon\"\n    elif N == \"103\":\n        return \"hon\"\n    elif N == \"104\":\n        return \"hon\"\n    elif N == \"105\":\n        return \"hon\"\n    elif N == \"106\":\n        return \"hon\"\n    elif N == \"107\":\n        return \"hon\"\n    elif N == \"108\":\n        return \"hon\"\n    elif N == \"109\":\n        return \"hon\"\n    elif N == \"110\":\n        return \"hon\"\n    elif N == \"111\":\n        return \"hon\"\n    elif N == \"112\":\n        return \"hon\"\n    elif N == \"113\":\n        return \"hon\"\n    elif N == \"114\":\n        return \"hon\"\n    elif N == \"115\":\n        return \"hon\"\n    elif N == \"116\":\n        return \"hon\"\n    elif N == \""
    },
    {
        "number": 4299,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return...\n"
    },
    {
        "number": 4299,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return stdin"
    },
    {
        "number": 4299,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N % 10 == 3 or N % 10 == 6 or N % 10 == 8:\n        return \"hon\"\n    elif N % 10 == 0 or N % 10 == 1 or N % 10 == 5:\n        return \"pon\"\n    else:\n        return \"bon\""
    },
    {
        "number": 4299,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return \"hon\" if int(stdin) % 10 in (2, 4, 5, 7, 9) else \"pon\" if int(stdin) % 10 in (0, 1, 6, 8) else \"bon\"\n\"\"\"\nimport sys\nfrom typing import List, Any\n\nfrom test_tool import assert_value\n\n\ndef"
    },
    {
        "number": 4300,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    takoyaki = [int(x) for x in stdin.split('\\n')[0].split(' ')]\n    # This array keeps track of the max d value for the (i-1)th takoyaki and (i)th takoyaki\n    max_d_array = [0] * N\n    for i in range(0, N):\n        max_d_array[i] = takoyaki[i]\n    for i in range(0, N):\n        for j in range(i, N):\n            max_d_array[i] = max(max_d_array[i], takoyaki[j])\n    # Keeps track of the total count\n    total = 0\n    # Loops over all choices of pairs of takoyaki\n    for i in range(0, N):\n        for j in range(i, N):\n            # Computes the total count for each pair\n            total += max_d_array[i] * max_d_array[j]\n    # Returns the answer\n    return total\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4300,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    numbers = list(map(int, stdin.split()[1:]))\n    print(N * sum([sum(numbers) - min(numbers), max(numbers)]))"
    },
    {
        "number": 4300,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    l = [int(x) for x in stdin.split('\\n')]\n    num = l[0]\n    arr = [l[1 + i: 1 + i + num] for i in range(0, len(l), num)]\n    print(sum([i[0] * (i[1] * (i[1] - 1) // 2) for i in arr]))"
    },
    {
        "number": 4300,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return 'Please use the datatest module to test your solution.'"
    },
    {
        "number": 4300,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    the solution to the exercise.\n    \"\"\"\n    N: int = int(stdin.readline())\n    d: list[int] = [int(i) for i in stdin.readline().strip().split()]\n    return str(sum(\n        (d[i] * (d[i] - 1) // 2)\n        for i in range(N)\n    ))\n"
    },
    {
        "number": 4300,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return stdin\n"
    },
    {
        "number": 4300,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Finds the health points restored from eating two takoyaki over all possible choices of two takoyaki from the N takoyaki served.\n    \"\"\"\n    n = int(stdin)\n    d = [int(x) for x in stdin.split('\\n')[0].split(' ')]\n    print(n*(n - 1)//2)\n    return \" \".join(str(n * i) for i in range(n, -1, -1))\n"
    },
    {
        "number": 4300,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    input_lines = stdin.split(\"\\n\")\n    n = int(input_lines[0])\n    restored_health = 0\n    for i in range(n):\n        restored_health += int(input_lines[1 + i]) * (n - i)\n    return str(restored_health)\n"
    },
    {
        "number": 4300,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    arr = [int(x) for x in stdin.readline().split()]\n    s = 0\n    for i in range(0, N):\n        for j in range(i + 1, N):\n            s += arr[i] * arr[j]\n    print(s)\n    return ''\n\nsolution('')"
    },
    {
        "number": 4300,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    n = int(stdin)\n    lst = list(map(int, stdin.split()))\n    \n    sum = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            sum += lst[i]*lst[j]\n    \n    return str(sum)"
    },
    {
        "number": 4301,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 4301,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    nums = [int(i) for i in stdin.split(\"\\n\")[1:]]\n    print(nums)\n\n    max_num = max(nums)\n    while n:\n        print(max_num)\n        max_num = max(max_num, nums.pop(nums.index(max_num)))\n        n -= 1\n"
    },
    {
        "number": 4301,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Takes in a string input for a sequence of size n. Finds the max of n-1 sequence.\n    Returns an output that prints the largest element in the sequence.\"\"\"\n    stdin = stdin.splitlines()\n    n = int(stdin[0])\n    seq = list(map(int, stdin[1:]))\n    seq.sort()\n    seq.reverse()\n    for i in range(n-1):\n        seq[i] = max(seq[i+1:])\n    print(seq[0])\n    return None\n\ndef"
    },
    {
        "number": 4301,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the maximum element among all the elements other than the given element in the sequence\n\n    >>> solution(stdin)\n    print(stdin)\n    \"\"\"\n    inputs = stdin.split(\"\\n\")\n    n = int(inputs[0])\n    elements = [int(element) for element in inputs[1:]]\n\n    max_elements = []\n    for element in elements:\n        if element!= elements[0]:\n            max_elements.append(element)\n\n    return str(max(max_elements))\n"
    },
    {
        "number": 4301,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the maximum value among the N-1 elements other than A_i in the sequence.\n\n    :param stdin: str - the string containing inputs from STDIN\n    :return: str - the maximum value among the N-1 elements other than A_i in the sequence\n    \"\"\"\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readlines()))\n\n    # Find the maximum element in the array and put it at the end\n    max_element = max(a)\n    a.remove(max_element)\n    a.append(max_element)\n\n    # The maximum value among the N-1 elements other than A_i in the sequence\n    maximum = max(a[0], a[1])\n\n    for x in range(2, n):\n        if a[x] > maximum:\n            maximum = a[x]\n\n    return str(maximum)\n\n\ndef"
    },
    {
        "number": 4301,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the maximum value among the other N-1 elements other than A_i in the sequence.\n    \n    >>> solution(\"3\\\\n1\\\\n4\\\\n3\\\\n\")\n    '4'\n    \"\"\"\n    n = int(stdin.readline())\n    seq = sorted([int(stdin.readline()) for _ in range(n)], reverse=True)\n    return \" \".join([str(seq[i]) for i in range(n - 1) if seq[i]!= seq[i + 1]])\n"
    },
    {
        "number": 4301,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find the maximum value among the N-1 elements other than A_i in the sequence.\n    >>> solution('''3\n   ... 1\n   ... 4\n   ... 3''')\n    '4'\n    \"\"\"\n    n = int(stdin.readline())\n    line_1 = stdin.readline()\n    arr = [int(i) for i in line_1.split()]\n    max_other_value = 0\n    for i in range(n):\n        for j in range(n):\n            if i!= j:\n                if arr[j] > max_other_value:\n                    max_other_value = arr[j]\n    print(max_other_value)\n"
    },
    {
        "number": 4301,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Read the input, solve the problem, return the solution.\"\"\"\n    # input_lines = stdin.split(\"\\n\")\n    # number_of_elements = int(input_lines[0])\n    # list_of_numbers = [int(line) for line in input_lines[1:]]\n    number_of_elements = int(stdin)\n    list_of_numbers = [int(stdin) for stdin in stdin.split(\"\\n\")[1:]]\n    list_of_other_numbers = [num for num in list_of_numbers if num!= max(list_of_numbers)]\n    for i in range(len(list_of_numbers)):\n        if list_of_numbers[i] == max(list_of_numbers):\n            list_of_numbers[i] = min(list_of_other_numbers)\n            list_of_other_numbers.remove(min(list_of_other_numbers))\n    return \"\\n\".join(list_of_numbers)\n"
    },
    {
        "number": 4301,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # return None\n    n = int(stdin.split('\\n')[0])\n    a = []\n    for _ in range(n):\n        a.append(int(stdin.split('\\n')[_+1]))\n    if n == 1:\n        return str(a[0])\n    # elif n == 2:\n    #     return str(max(a))\n    else:\n        b = a[:]\n        for _ in range(n-1):\n            b.remove(max(b))\n        return str(max(b))\n"
    },
    {
        "number": 4301,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return ''\n"
    },
    {
        "number": 4302,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    c = 0\n    while a >= 1 and b >= 1:\n        if a > b:\n            b -= 1\n            c += 1\n            a -= b\n        else:\n            a -= 1\n            c += 1\n    return c"
    },
    {
        "number": 4302,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split(' '))\n    result = 0\n    while a > 0 or b > 0:\n        if a > b:\n            a -= b\n            result += b\n        else:\n            b -= a\n            result += a\n        a, b = map(int, stdin.split(' '))\n    return str(result)\n"
    },
    {
        "number": 4302,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    result = 0\n    A, B = map(int, stdin.split(' '))\n    while A!= 0 and B!= 0:\n        if B > A:\n            B = B - A\n            A = 0\n        else:\n            A = A - B\n            B = 0\n        result = result + A + B\n    return result\n\"\"\""
    },
    {
        "number": 4302,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B = [int(n) for n in stdin.split(' ')]\n    return str(A + B)"
    },
    {
        "number": 4302,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the solution for the given input.\n\n    Preconditions:\n        3 \\leq A, B \\leq 20\n    \"\"\"\n    # Write your code here\n    a, b = map(int, stdin.split())\n    ans = a\n    while b > 0:\n        ans += a\n        b -= 1\n    return str(ans)"
    },
    {
        "number": 4302,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return str(A + B)\n"
    },
    {
        "number": 4302,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n  \"\"\"\n  get input\n  \"\"\"\n  A, B = map(int, stdin.split())\n  \n  \"\"\"\n  put the solution here\n  \"\"\"\n  \n  return result\n"
    },
    {
        "number": 4302,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split(' '))\n    return max(a + b, a * b)"
    },
    {
        "number": 4302,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    if n == m == 1:\n        return '0'\n    # Either get all or get all\n    return f'{n+m}' if n > m else f'{max(n, m)}\\n{min(n, m)}'\n"
    },
    {
        "number": 4302,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    max_coins = 0\n    while True:\n        n, m = map(int, stdin.readline().split())\n        if n == 0 and m == 0:\n            break\n        if n > m:\n            max_coins += (n * (n - 1)) // 2\n        elif m > n:\n            max_coins += (m * (m - 1)) // 2\n        else:\n            max_coins += (n * (n - 1)) // 2\n    return max_coins"
    },
    {
        "number": 4303,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return \"\"\n\n\ndef"
    },
    {
        "number": 4303,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    x = [int(x) for x in stdin.split()]\n    x.sort()\n\n    def f(l: int, r: int, k: int) -> int:\n        if k == 1:\n            return 0\n        return l + min(k - 1, r - l)\n\n    return max([\n        f(x[0], x[-1], k),\n        f(x[-1], x[0], k),\n    ])\n"
    },
    {
        "number": 4303,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def calc(i: int) -> int:\n        return (i + 1) * stdin[i]\n\n    _, K = [int(i) for i in stdin.split()]\n    candles = [int(i) for i in stdin.split()]\n    stack: deque[int] = deque(candles)\n    stack.appendleft(0)\n    stack.append(10 ** 9)\n    curr: int = 0\n    total: int = 0\n    while K:\n        left, right = stack.popleft(), stack.pop()\n        if curr + right - left < calc(left):\n            total += calc(left) - curr\n            curr = calc(left)\n            K -= 1\n            stack.append(left)\n            stack.append(right)\n        else:\n            curr += right - left\n            stack.append(right)\n            stack.appendleft(left)\n    return total\n\"\"\"\n\n\nimport sys\n\nimport pytest\n\n\ndef"
    },
    {
        "number": 4303,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find the minimum time required to light K candles.\n\n    Args:\n        stdin (str): Input from Standard Input\n\n    Returns:\n        str: Time required\n    \"\"\"\n    # Get data from input\n    # Example: 3 2\n    N, K = [int(i) for i in stdin.split()]\n    # Example: -30 -10 10 20 50\n    candles = [int(i) for i in stdin.split()]\n\n    # Get the answer\n    # Example: 10\n    answer = 0\n    # Get the distance between each candle\n    d = [abs(candles[i+1] - candles[i]) for i in range(N-1)]\n    for i in range(K):\n        # The smallest distance is between the candle and the next\n        smallest_d = min(d)\n        # The candle to the left has the smallest distance\n        smallest_d_index = d.index(smallest_d)\n        # Move the smallest distance candle left\n        candles[smallest_d_index] -= smallest_d\n        d[smallest_d_index] = float('inf')\n        # Increase the answer\n        answer += smallest_d\n    return str(answer)\n"
    },
    {
        "number": 4303,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4303,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    x = list(map(int, stdin.split()))\n    return str(count_moves(x, n, k))\n\ndef"
    },
    {
        "number": 4303,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    a = list(map(int, stdin.split(' ')))\n\n    # n = 10\n    # k = 3\n    # a = [-30, -10, 10, 20, 50]\n\n    a.sort()\n    l = 0\n    r = 0\n    count = 0\n    while count < k:\n        r += 1\n        count += 1\n        if r == n:\n            break\n\n    return r - l\n"
    },
    {
        "number": 4303,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = list(map(int, stdin.split()))\n    a = []\n    b = []\n    for i in range(len(s)):\n        if i % 2 == 0:\n            a.append(s[i])\n        else:\n            b.append(s[i])\n\n    a.sort()\n    b.sort()\n    k1 = 0\n    k2 = k\n    mn = abs(a[0] - b[k - 1])\n    while k1 < len(a) and k2 >= 0:\n        if abs(a[k1] - b[k2]) < mn:\n            mn = abs(a[k1] - b[k2])\n        if a[k1] >= b[k2]:\n            k2 -= 1\n        else:\n            k1 += 1\n    return mn\n"
    },
    {
        "number": 4303,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    # find out how many candles to light\n    pass\n"
    },
    {
        "number": 4303,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n\n    n = int(lines[0])\n    k = int(lines[1])\n\n    candles = lines[2].split()\n    candles = [int(candle) for candle in candles]\n\n    # cache the time to light up candles in a dictionary\n    cache = {0: 0}\n    for candle in candles:\n        cache[candle] = candle\n\n    # min time to light up candles\n    min_time = n\n    # position of the last candle\n    last_candle = n\n    # number of candles left to be light\n    remaining_candles = k\n    # index of the candle that has been light up\n    lighted_candles = 0\n    while remaining_candles > 0:\n        min_time = min(min_time, cache[last_candle] - cache[lighted_candles])\n        last_candle -= 1\n        if cache[last_candle] not in cache:\n            cache[cache[last_candle]] = cache[last_candle]\n        lighted_candles += 1\n        remaining_candles -= 1\n\n    return min_time\n"
    },
    {
        "number": 4304,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a == b:\n        print(a)\n    elif a < b:\n        print(a)\n    else:\n        print(b)\n"
    },
    {
        "number": 4304,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split(' '))\n    \n    return max(1, b - a - 1)\n    \nprint(solution(input()))\n"
    },
    {
        "number": 4304,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the amount of snow cover\n\n    >>> solution(\"10 13\")\n    2\n    \"\"\"\n    data = [int(d) for d in stdin.split()]\n    return str(sum(data[1] - data[0] - i for i in range(data[1])))\n"
    },
    {
        "number": 4304,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split(' ')\n    a = int(a)\n    b = int(b)\n    return str(b - a)\n"
    },
    {
        "number": 4304,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.strip().split(' '))\n    return str(max(1, b - a - 1))\n"
    },
    {
        "number": 4304,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.strip().split())\n    d = (b - a) // 2\n    return d\n"
    },
    {
        "number": 4304,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    total_snow = 0\n    for line in stdin.split('\\n')[1:]:\n        a, b = map(int, line.split())\n        total_snow += min(a, b) - 1\n    return str(total_snow)\n"
    },
    {
        "number": 4304,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(i) for i in stdin.split(\" \")]\n    if b < 2 * a:\n        return 0\n    return b // 2 - a + 1\n"
    },
    {
        "number": 4304,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''Get input, solve the problem, return output in a str'''\n    a, b = tuple(map(int, stdin.split(' ')))\n    return str(a + b - 2)\ndef"
    },
    {
        "number": 4304,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return str(sum(map(int, stdin.split())))\n\n\"\"\"\n\na, b = map(int, input().split())\nprint(max(1, b-a-2))\n"
    },
    {
        "number": 4305,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    health, attack = map(int, stdin.split())\n    result = attack if health > 0 else -1\n    while health > 0:\n        health += attack\n        if health > 0:\n            health -= attack\n            result += 1\n    return str(result)\n"
    },
    {
        "number": 4305,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 4305,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    h, a = map(int, stdin.split())\n    return h - a\n\"\"\""
    },
    {
        "number": 4305,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''Given the health of the monster and the damage of Serval,\n    return the number of attacks Serval needs to make before winning.\n    '''\n\n    health, damage = map(int, stdin.split(' '))\n\n    return health // damage if health % damage == 0 else health // damage + 1\n"
    },
    {
        "number": 4305,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4305,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    H, A = map(int, stdin.split())\n    return \"{}\".format(H // (A + 1))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4305,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4305,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n  H, A = [int(v) for v in stdin.split()]\n  if H - A == 0:\n    return '0'\n  return str(math.ceil(math.log(H / A, 2)))\n"
    },
    {
        "number": 4305,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    h, a = list(map(int, stdin.split(' ')))\n    def game(h, a, i = 1):\n        nonlocal ans\n        if h == 0:\n            ans = min(ans, i)\n            return\n        elif h < 0:\n            return\n        if i <= ans:\n            return\n        else:\n            game(h-a, a, i+1)\n            game(h, a, i+1)\n    ans = float('inf')\n    game(h, a)\n    return str(ans)\nprint(solution(input()))\n\"\"\"\n\"\"\"\n"
    },
    {
        "number": 4305,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4306,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    return str(max(0, min(B, D) - max(A, C)))\n"
    },
    {
        "number": 4306,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = stdin.split()\n    start_up = int(a)\n    a = int(a) + int(b)\n    b = int(b) + int(c)\n    c = int(c) + int(d)\n    return str(max(a, b) - min(a, b))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4306,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Takes in data in the following format:\n    <Alice's hold_down_duration> <Bob's hold_down_duration> <Alice's release_duration> <Bob's release_duration>\n    and returns the total seconds the buttons were held down for.\n    '''\n    alice_duration, bob_duration, alice_release, bob_release = [int(x) for x in stdin.split()]\n\n    # Each person's duration is either 0 or the max between their release and their hold down.\n    alice_duration = max(0, min(alice_duration, alice_release))\n    bob_duration = max(0, min(bob_duration, bob_release))\n\n    return alice_duration + bob_duration\n"
    },
    {
        "number": 4306,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin.split()[2]) - int(stdin.split()[1]))"
    },
    {
        "number": 4306,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4306,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    return str(max(a, c) + min(b, d))\n    # total = max(a, c) + min(b, d)\n    # if total == 0:\n    #     return '0'\n    # else:\n    #     return str(total)\n"
    },
    {
        "number": 4306,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 4306,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split(' '))\n    return max(0, C - B) + max(0, D - A)\n\n\ndef"
    },
    {
        "number": 4306,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    a = stdin.split(\" \")\n    return str(int(a[0]) + int(a[1]))\n"
    },
    {
        "number": 4306,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    return abs(b - c) + abs(d - a)\n"
    },
    {
        "number": 4307,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    count = 0\n    for x in range(N+1):\n        if x == 1 or x % 2 == 0:\n            continue\n        if not x % 2:\n            count += 1\n        else:\n            count += 2\n    print(count)\n    return str(count)"
    },
    {
        "number": 4307,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = stdin.readline()\n    count = 0\n    for i in range(1, int(N)+1):\n        if is_odd_number_with_exactly_eight_divisors(i):\n            count += 1\n    return str(count)\n"
    },
    {
        "number": 4307,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Find the number of odd numbers with exactly eight positive divisors in the range [1, N]\n\n    :param stdin:\n    :return:\n    \"\"\"\n\n    return None"
    },
    {
        "number": 4307,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin\n    b = []\n    for i in range(1, int(a) + 1):\n        if i % 2!= 0 and len(divisors(i)) == 8:\n            b.append(i)\n    return str(len(b))\n\n\ndef"
    },
    {
        "number": 4307,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('105\\n')\n    '1'\n    >>> solution('1\\n')\n    '105'\n    >>> solution('2\\n')\n    '0'\n    >>> solution('21\\n')\n    '8'\n    >>> solution('3\\n')\n    '0'\n    >>> solution('22\\n')\n    '4'\n    \"\"\"\n    from math import sqrt, ceil\n    from itertools import count\n\n    for _ in count(int(stdin)):\n        if (num := _ + 1) <= int(stdin):\n            n = ceil(sqrt(num))\n            if num == sum(divisor := 1 for divisor in range(1, n + 1) if num % divisor == 0):\n                return str(num)\n"
    },
    {
        "number": 4307,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4307,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    c = 0\n    for i in range(1, n+1):\n        if len(set(divisors(i))) == 8:\n            c += 1\n    return str(c)\n\n\ndef"
    },
    {
        "number": 4307,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def is_prime(number: int) -> bool:\n        if number < 2:\n            return False\n        for divisor in range(2, int(number ** 0.5) + 1):\n            if number % divisor == 0:\n                return False\n        return True\n\n    number_of_primes = 0\n    current_number = 0\n    while stdin:\n        number = int(stdin)\n        current_number += 1\n        if number > current_number:\n            if is_prime(current_number):\n                number_of_primes += 1\n        if is_prime(number):\n            number_of_primes += 1\n        stdin = input()\n\n    return number_of_primes\n"
    },
    {
        "number": 4307,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def count_positive_divisors(n: int):\n        counter = 1\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                counter += 2\n        return counter\n\n    def is_odd(n):\n        return count_positive_divisors(n) % 2 == 1\n\n    def is_even(n):\n        return count_positive_divisors(n) % 2 == 0\n\n    print(sum(is_odd(n) for n in range(1, stdin + 1)))\n\n    return"
    },
    {
        "number": 4307,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the number of odd numbers between 1 and n (inclusive),\n    having exactly 8 positive divisors.\n    >>> solution(105)\n    1\n    >>> solution(1000)\n    0\n    >>> solution(20)\n    2\n    >>> solution(1)\n    0\n    >>> solution(0)\n    0\n    >>> solution(7)\n    0\n    \"\"\"\n    n = int(stdin)\n\n    count = 0\n    for i in range(1, n + 1):\n        if i % 2 == 1 and is_divisible_by(i, 8):\n            count += 1\n\n    return count\n\n\ndef"
    },
    {
        "number": 4308,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    def generate_crackers(n):\n        crackers = []\n        for i in range(1, n + 1):\n            crackers.append(i)\n        return crackers\n    crackers = generate_crackers(n)\n    crackers.sort(reverse=True)\n    min_diff = crackers[0] - crackers[k - 1]\n    for i in range(0, n - k + 1):\n        crackers[i + k - 1] = 0\n    min_diff = min(min_diff, max(crackers) - min(crackers))\n    return str(min_diff)\n"
    },
    {
        "number": 4308,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    inputs = [int(x) for x in stdin.split()]\n    n, k = inputs\n    return str(n - k + 1)\n"
    },
    {
        "number": 4308,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    if n == 1:\n        return 0\n    crackers = [int(i) for i in range(k)]\n    crackers.sort(reverse=True)\n    crackers_dif = []\n    for i in range(k):\n        crackers_dif.append(crackers[i] - i)\n    crackers_dif.sort(reverse=True)\n    return crackers_dif[0]"
    },
    {
        "number": 4308,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return '0'"
    },
    {
        "number": 4308,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # input\n    N, K = map(int, stdin.split())\n    \n    # init\n    total_crackers = sum(map(int, stdin.split()))\n    smallest = total_crackers\n    largest = 0\n    \n    # get largest\n    for i in range(K):\n        if total_crackers < smallest:\n            smallest = total_crackers\n        largest += 1\n        total_crackers -= smallest\n    \n    # get smallest\n    total_crackers = sum(map(int, stdin.split()))\n    for i in range(K):\n        if total_crackers < largest:\n            largest = total_crackers\n        total_crackers -= largest\n    \n    return abs(largest - smallest)\n"
    },
    {
        "number": 4308,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4308,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Given an input of N and K, find the minimum possible (absolute) difference between the largest number of crackers received by a user and the smallest number received by a user.\n    '''\n    # read in input\n    num_cases = int(stdin)\n    for _ in range(num_cases):\n        # read in N and K\n        n, k = [int(num) for num in stdin.split()]\n        # read in crackers and sort\n        crackers = sorted([int(cracker) for cracker in stdin.split()])\n        # traverse crackers and add to groups\n        groups = [[] for _ in range(k)]\n        for cracker in crackers:\n            if len(groups[0]) < n // k:\n                groups[0].append(cracker)\n            else:\n                groups[1].append(cracker)\n        # compute and print answer\n        groups = sorted(groups, key=len)\n        answer = groups[-1][0] - groups[0][0]\n        print(answer)\n    return ''\n    \n"
    },
    {
        "number": 4308,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # \u304a\u984c\u306e\u5165\u529b\u3092\u53d7\u3051\u53d6\u308b\n    N, K = map(int, stdin.split())\n    # \u304a\u984c\u306e\u5165\u529b\u3092\u5909\u63db\u3059\u308b\n    # \u30b0\u30ea\u30c3\u30c9\u306e\u5b9a\u7fa9\n    grid = [[0] * N for _ in range(N)]\n    # K\u500b\u5206\u306e\u30b3\u30fc\u30b9\u3092\u5206\u3051\u308b\n    for i in range(K):\n        x, y = map(int, stdin.split())\n        grid[x - 1][y - 1] = 1\n    # \u5165\u529b\u30c7\u30fc\u30bf\u306e\u6700\u5c0f\u5024\u3001\u6700\u5927\u5024\u3092\u4fdd\u5b58\u3059\u308b\n    min_value = 1e10\n    max_value = -1e10\n    # \u5165\u529b\u30c7\u30fc\u30bf\u304b\u3089\u6700\u5c0f\u5024\u3068\u6700\u5927\u5024\u3092\u53d6\u5f97\u3057\u3066\u3044\u304f\n    for x in range(N):\n        for y in range(N):\n            # \u6b21\u306e\u5206\u3051\u5834\u6240\u304c\u7a7a\u3058\u3083\u306a\u3044\u5834\u5408\u3001\u5206\u3051\u5834\u6240\u306e\u30b3\u30fc\u30b9\u3092\u30b3\u30fc\u30b9\u6570\u3092\u5897\u3084\u3059\n            if grid[x][y] == 0:\n                grid[x][y] = 1\n                value = solve(grid, x, y)\n                grid[x][y] = 0\n                # \u6700\u5c0f\u5024\u3068\u6700\u5927\u5024\u3092\u66f4\u65b0\u3059\u308b\n                min_value = min(min_value, value)\n                max_value = max(max_value, value)\n    # \u6700\u5c0f\u5024\u3068\u6700\u5927\u5024\u306e\u305a\u308c\u3092\u51fa\u529b\u3059\u308b\n    return max_value - min_value\n\n\ndef"
    },
    {
        "number": 4308,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"Compute the solution\"\n    N, K = map(int, stdin.split())\n    return N-K\n"
    },
    {
        "number": 4308,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Get input\n    line = stdin.readlines()\n    n, k = line[0].split(\" \")\n    n, k = int(n), int(k)\n    crackers = [int(x) for x in line[1].split(\" \")]\n\n    # Get solution\n    crackers.sort()\n    diff = max(crackers) - min(crackers)\n    if k >= n:\n        print(0)\n        return\n\n    # Get difference\n    diff = max(crackers[n - k:]) - min(crackers[:k])\n\n    # Print solution\n    print(diff)\n    return\n\ndef"
    },
    {
        "number": 4309,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n    ABC = list(map(int, stdin))\n    ABC.reverse()\n    ABC_set = set()\n    ABC_set.add(0)\n    previous_ABC = 0\n    for ABC_num in ABC:\n        ABC_set.add(ABC_num * 10 + previous_ABC)\n        previous_ABC = ABC_num\n    \n    print(sorted(ABC_set)[0])\n    return\n"
    },
    {
        "number": 4309,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n'''\n\nfrom math import ceil\n\ndef"
    },
    {
        "number": 4309,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    import math\n    n = int(stdin)\n    while True:\n        n += 1\n        if n % math.factorial(10) == 0:\n            return n\n"
    },
    {
        "number": 4309,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 4309,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return\n\"\"\"\n\n\nimport sys\n\n\ndef"
    },
    {
        "number": 4309,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin\n    return n\n"
    },
    {
        "number": 4309,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N % 10 == 0:\n        print(N)\n    else:\n        print(N - 1)"
    },
    {
        "number": 4309,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nN = int(stdin.readline())\n\nprint(N)\n"
    },
    {
        "number": 4309,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n\n    # first ABC: N\n    ABC = 1\n\n    # first digit of Nth ABC\n    digit = 1\n\n    # find smallest N with the same first digit\n    while digit <= N:\n        ABC += 1\n        digit = str(ABC)[0]\n\n    return ABC"
    },
    {
        "number": 4309,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    return str(N)\n"
    },
    {
        "number": 4310,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n  a1, a2, a3 = stdin.split()\n  a1, a2, a3 = int(a1), int(a2), int(a3)\n  \n  a1_cost = 0\n  a2_cost = abs(a2 - a1)\n  a3_cost = abs(a3 - a2)\n  \n  return a1_cost + a2_cost + a3_cost\n  \n"
    },
    {
        "number": 4310,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a_1, a_2, a_3 = map(int, stdin.split(' '))\n    if a_1 < a_2 < a_3:\n        return 0\n    elif a_1 == a_2 and a_2 < a_3:\n        return 0\n    elif a_1 == a_3 and a_3 < a_2:\n        return 0\n    return abs(a_1 - a_3) + abs(a_2 - a_1)"
    },
    {
        "number": 4310,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your solution\n    return ''\n"
    },
    {
        "number": 4310,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the minimum total cost to complete all the tasks.\"\"\"\n    tasks = list(map(int, stdin.split()))\n    return str(min(tasks[1] - tasks[0], tasks[2] - tasks[1]))\n"
    },
    {
        "number": 4310,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return str(get_cost(list(map(int, stdin.split(' ')))))\n\n\ndef"
    },
    {
        "number": 4310,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    tasks = [int(task) for task in stdin.split()]\n    n = len(tasks)\n    dp = [None for _ in range(n)]\n    dp[0] = 0\n    dp[1] = abs(tasks[0] - tasks[1])\n    dp[2] = abs(tasks[0] - tasks[2]) + abs(tasks[1] - tasks[2])\n\n    for i in range(3, n):\n        dp[i] = min(\n            dp[i - 2] + abs(tasks[i - 2] - tasks[i]),\n            dp[i - 3] + abs(tasks[i - 3] - tasks[i]) + abs(tasks[i - 2] - tasks[i]),\n            dp[i - 1] + abs(tasks[i - 1] - tasks[i]),\n        )\n\n    return min(dp[n - 1], dp[n - 2])\n"
    },
    {
        "number": 4310,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A = list(map(int, stdin.split()))\n    \n    return sum([abs(A[i+1] - A[i]) for i in range(len(A)-1)])\n    \n"
    },
    {
        "number": 4310,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A_1, A_2, A_3 = [int(x) for x in stdin.split()]\n    \n    return str(min(A_1, A_2, A_3) + abs(A_2 - A_1) + abs(A_3 - A_2))\n\"\"\""
    },
    {
        "number": 4310,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A_1, A_2, A_3 = list(map(int, stdin.split()))\n    return max(0, A_1 + A_2, A_2 + A_3, A_3 + A_1)\n\"\"\"\n\nfrom __future__ import print_function\n\nimport os\nimport sys"
    },
    {
        "number": 4310,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    A = list(map(int, stdin.split()))\n    A.sort()\n    cost = 0\n    for i in range(len(A) - 1):\n        cost += abs(A[i] - A[i + 1])\n    return cost"
    },
    {
        "number": 4311,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = int(stdin)\n    a = []\n    for i in range(0, s+1):\n        if i % 2 == 0:\n            a.append(int(i/2))\n        else:\n            a.append(int(3*i+1))\n    for i in range(1, s+1):\n        if a[i] == s:\n            return str(i)\n    return '-1'"
    },
    {
        "number": 4311,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = int(stdin)\n    a = [s]\n    f = lambda n: n / 2 if n % 2 == 0 else 3 * n + 1\n    for i in range(1, 100):\n        a.append(f(a[i - 1]))\n    for i in range(1, 100):\n        if a[i] == a[i - 1]:\n            return i"
    },
    {
        "number": 4311,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    # determine a_1\n    a = [n]\n    while a[-1] % 2 == 0:\n        a.append(a[-1] // 2)\n    while a[-1] % 2!= 0:\n        a.append(a[-1] * 3 + 1)\n    return str(len(a) - 1)\n"
    },
    {
        "number": 4311,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = int(stdin)\n    a = []\n    if s % 2:\n        a = [s]\n        while a[-1]!= 1:\n            a.append(a[-1] // 2)\n    else:\n        a = [s]\n        while a[-1]!= 2:\n            a.append(a[-1] * 3 + 1)\n    return len(a) - a.index(s)"
    },
    {
        "number": 4311,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    i = 1\n    while a[-i] >= a[i - 1]:\n        i += 1\n    return str(i)\n"
    },
    {
        "number": 4311,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = int(stdin)\n    even = s / 2\n    odd = 3 * s + 1\n    while True:\n        if even == odd:\n            return str(int(even))\n\n        even = even / 2\n        odd = odd / 2\n"
    },
    {
        "number": 4311,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    ans = 0\n    i = 1\n    while i < n:\n        i *= 2\n        ans += 1\n    return ans\n"
    },
    {
        "number": 4311,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    print(next(num for num in range(1, 1000000) if a[num] == a[a[num]]))\n    \n"
    },
    {
        "number": 4311,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = int(stdin.readline())\n    n = 1\n    while n * 2 <= s:\n        n *= 2\n    while n > 1:\n        if n % 2 == 0:\n            s -= n\n        else:\n            s += n\n        n = n // 2\n    return str(s)\n"
    },
    {
        "number": 4311,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 4312,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    input_list = [int(input_str) for input_str in stdin.split(\"\\n\")]\n    takahashi_monster_health = input_list[0]\n    aoki_monster_health = input_list[1]\n    takahashi_monster_strength = input_list[2]\n    aoki_monster_strength = input_list[3]\n    \n    while (takahashi_monster_health > 0) and (aoki_monster_health > 0):\n        takahashi_monster_health = max(0, takahashi_monster_health - aoki_monster_strength)\n        aoki_monster_health = max(0, aoki_monster_health - takahashi_monster_strength)\n    \n    return \"Yes\" if aoki_monster_health > 0 else \"No\"\n"
    },
    {
        "number": 4312,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = [int(x) for x in stdin.split()]\n    Takahashi = True\n    Aoki = False\n    while A > 0 and B > 0:\n        if A > B:\n            A = A - B\n        else:\n            B = B - A\n        if C > D:\n            C = C - D\n        else:\n            D = D - C\n        if D <= 0:\n            Aoki = True\n        if C <= 0:\n            Takahashi = False\n    if Takahashi:\n        return \"Yes\"\n    else:\n        return \"No\"\n    \n"
    },
    {
        "number": 4312,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split(' '))\n    for _ in range(1, 4):\n        if A > B:\n            A -= C\n        else:\n            B -= D\n    if A <= 0 < B:\n        return 'Yes'\n    else:\n        return 'No'\n"
    },
    {
        "number": 4312,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = [int(i) for i in stdin.split()]\n    if a > b:\n        a, b = b, a\n    elif a == b:\n        if c > d:\n            a, d = d, a\n            b, c = c, b\n        elif c == d:\n            a, c = c, a\n            b, d = d, b\n    while b > 0 and c > 0:\n        if a > b:\n            a -= c\n            c -= b\n        else:\n            b -= a\n            a -= c\n    if a <= 0:\n        return \"No\"\n    else:\n        return \"Yes\""
    },
    {
        "number": 4312,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    while A > 0 and B > 0 and C > 0 and D > 0:\n        if C < D:\n            A -= B\n            if A <= 0:\n                break\n            C -= D\n        else:\n            B -= A\n            if B <= 0:\n                break\n            D -= C\n    if A > 0:\n        print('Yes')\n    else:\n        print('No')\n"
    },
    {
        "number": 4312,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = stdin.split(' ')\n    a, b, c, d = int(a), int(b), int(c), int(d)\n\n    if a > b:\n        a, b = b, a\n    if c > d:\n        c, d = d, c\n    while b >= 0 and d >= 0:\n        if a >= c:\n            a = a - c\n            b = b - 1\n        else:\n            b = b - 1\n            c = c - a\n        if b >= 0 and d >= 0:\n            if a >= c:\n                a = a - c\n                b = b - 1\n            else:\n                b = b - 1\n                c = c - a\n        if b < 0:\n            return \"No\"\n    return \"Yes\"\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4312,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    takahashi_health, aoki_health = [int(health) for health in stdin.split(' ')]\n    takahashi_monster, aoki_monster = [int(monster) for monster in stdin.split(' ')]\n\n    while True:\n        if takahashi_health > 0 and takahashi_monster > 0 and aoki_health > 0 and aoki_monster > 0:\n            takahashi_health -= takahashi_monster\n            aoki_health -= aoki_monster\n            if takahashi_health <= 0 and aoki_health <= 0:\n                break\n            takahashi_monster, aoki_monster = aoki_monster, takahashi_monster\n        elif takahashi_health <= 0:\n            print('No')\n            break\n        elif aoki_health <= 0:\n            print('Yes')\n            break\n    return ''\n\nprint(solution(input()))\n\n'''\n\ndef"
    },
    {
        "number": 4312,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = [int(i) for i in stdin.split(' ')]\n    if B - A > D - C:\n        print('No')\n    else:\n        print('Yes')\n    return"
    },
    {
        "number": 4312,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = [int(x) for x in stdin.split(' ')]\n    takahashi = a if a > b else b\n    aoki = c if c > d else d\n    while takahashi > 0 and aoki > 0:\n        aoki -= takahashi\n        if aoki <= 0:\n            return 'Yes'\n        takahashi, aoki = aoki, takahashi\n    return 'No'\nprint(solution(stdin))"
    },
    {
        "number": 4312,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = [int(i) for i in stdin.split(' ')]\n    takahashi = [A, B]\n    aoki = [C, D]\n    turn = 0\n    while all(i > 0 for i in takahashi) and all(i > 0 for i in aoki):\n        turn += 1\n        takahashi[turn % 2] -= aoki[turn % 2]\n        if takahashi[turn % 2] <= 0:\n            break\n        aoki[turn % 2] -= takahashi[turn % 2]\n    return 'No' if any(i <= 0 for i in takahashi) else 'Yes'"
    },
    {
        "number": 4313,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    This solution reads in the input and calls the helper function to\n    calculate the optimal value of X-Y.\n    '''\n    n = int(stdin.readline())\n    v = [int(x) for x in stdin.readline().split()]\n    c = [int(x) for x in stdin.readline().split()]\n\n    return str(helper(n, v, c))\n\n\ndef"
    },
    {
        "number": 4313,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Get the input, and return the result of the problem.\"\"\"\n    N = int(stdin[0])\n    values = list(map(int, stdin[1].split()))\n    costs = list(map(int, stdin[2].split()))\n    \n    # Get the difference of the two lists\n    difference = list(map(lambda x: x[0] - x[1], zip(values, costs)))\n    \n    return str(sum(difference))\n"
    },
    {
        "number": 4313,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the maximum possible sum of the gem values minus the cost of the gems.\"\"\"\n    gems = [int(gem) for gem in stdin.strip().split(\"\\n\")[0].split()]\n    costs = [int(cost) for cost in stdin.strip().split(\"\\n\")[1].split()]\n    total_gem_val = sum(gems)\n    total_cost_val = sum(costs)\n    return total_gem_val - total_cost_val\n"
    },
    {
        "number": 4313,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, *v, *c = map(int, stdin.split('\\n'))\n    v, c = list(map(sum, zip(*sorted(zip(v, c))))), sorted(c)\n    if n == 1:\n        return str(v[0] - c[0])\n    res = 0\n    for i in range(n):\n        res += v[i]\n        if i + 1 < n and c[i] > c[i + 1]:\n            res -= c[i]\n    return str(res - sum(c))\n"
    },
    {
        "number": 4313,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Get input\n    n, *values = [int(x) for x in stdin.split('\\n')[0].split()]\n    c = [int(x) for x in stdin.split('\\n')[1].split()]\n    # Create DP table\n    dp = []\n    for i in range(n):\n        dp.append([0] * (sum(c) + 1))\n    # Populate DP table\n    for i in range(n):\n        for j in range(sum(c) + 1):\n            if j - c[i] >= 0:\n                dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - c[i]] + values[i])\n            else:\n                dp[i][j] = dp[i - 1][j]\n    # Get max\n    res = dp[-1][-1]\n    # Print the output\n    print(res)"
    },
    {
        "number": 4313,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    numberOfGems = int(stdin[0])\n    gemsValue = list(map(int, stdin[1].split(' ')))\n    gemsCost = list(map(int, stdin[2].split(' ')))\n    # \u7b2c\u4e00\u79cd\u601d\u8def:\n    # \u627e\u5230gemsCost\u7684\u6700\u5c0f\u503c\uff0c\u90a3\u4e48gemsCost\u4e2d\u7684\u6700\u5c0f\u503c\uff0c\u6bcf\u4e2agem\u7684\u6700\u5c0f\u503c\u5373\u662fgemsValue\u4e2d\u7684\u6700\u5927\u503c\n    # \u627e\u5230gemsValue\u4e2d\u7684\u6700\u5927\u503c\uff0c\u8fd9\u4e2a\u6700\u5927\u503c\u5c31\u662fgemsCost\u4e2d\u7684\u6700\u5927\u503c\u51cf\u53bb\u6700\u5c0f\u503c\uff0c\u6bcf\u4e2agem\u7684\u6700\u5927\u503c\u5373\u662fgemsCost\u4e2d\u7684\u6700\u5c0f\u503c\u51cf\u53bb\u6700\u5927\u503c\n    # \u4f46\u662fgemsCost\u4e2d\u7684\u6700\u5c0f\u503c\u5728gemsCost\u4e2d\u662f\u6709\u91cd\u590d\u7684\uff0c\u4e0d\u80fd\u76f4\u63a5\u7528\n    # \u4f46\u662fgemsValue\u4e2d\u7684\u6700\u5927\u503c\u5728gemsValue\u4e2d\u662f\u6ca1\u6709\u91cd\u590d\u7684\n    # \u6700\u540e\u5c31\u8981\u627egemsCost\u4e2d\u7684\u6700\u5927\u503c\uff0c\u56e0\u4e3agemsCost\u4e2d\u7684\u6700\u5927\u503c\uff0c\u6bcf\u4e2agem\u7684\u6700\u5927\u503c\u90fd\u662fgemsCost\u4e2d\u7684\u6700\u5927\u503c\u51cf\u53bb\u6700\u5c0f\u503c\uff0c\n    # \u6240\u4ee5gemsCost\u4e2d\u7684\u6700\u5927\u503c\u5c31\u662fgemsValue\u4e2d\u7684\u6700\u5927\u503c\u51cf\u53bb\u6700\u5c0f\u503c\n    # \u56e0\u4e3agemsCost\u4e2d\u7684\u6700\u5927\u503c\uff0c\u6bcf\u4e2agem\u7684\u6700\u5927\u503c\u90fd\u662fgemsCost\u4e2d\u7684\u6700\u5927\u503c\u51cf\u53bb\u6700\u5c0f\u503c\uff0c\u6240\u4ee5\u53ef\u4ee5\u76f4\u63a5\u7528gemsCost\u4e2d\u7684\u6700\u5927\u503c\n    # \u76f4\u63a5\u5224\u65adgemsCost\u4e2d\u7684\u6700\u5927\u503c\uff0c\u662f\u5426\u5b58\u5728\u7ec4\u5408\u6570\u636e\uff0c\u8fd9\u4e2a\u6570\u636e\u5c31\u662fgemsValue\u4e2d\u7684\u6700\u5927\u503c\n    minCost = min(gemsCost)\n    maxCost = max(gemsCost)\n    maxValue = max(gemsValue)\n    minValue = min(gemsValue)\n    costs = [maxValue - minValue] + gemsCost\n    if costs.count(maxCost) > 1:\n        costs.remove(maxCost)\n    print(max(gemsValue) - min(costs))\n"
    },
    {
        "number": 4313,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n  '''\n  input:\n    int\n    int int...\n    int int...\n  output:\n    int\n  '''\n  stdin = stdin.split()\n  n = int(stdin[0])\n  total_val, total_cost = 0, 0\n  for i in range(1, n + 1):\n    val, cost = map(int, stdin[i].split())\n    total_val += val\n    total_cost += cost\n  return total_val - total_cost\n"
    },
    {
        "number": 4313,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, *v, *c = [int(x) for x in stdin.split()]\n    v = list(enumerate(v, 1))\n    v.sort(key=lambda x: x[1], reverse=True)\n    c = list(enumerate(c, 1))\n    c.sort(key=lambda x: x[1], reverse=True)\n    return str(sum(x[0] * x[1] for x in zip(v[:n // 2], c[:n // 2])))\n"
    },
    {
        "number": 4313,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # read in the input\n    n: int = int(stdin.readline().strip())\n    values: List[int] = [int(i) for i in stdin.readline().split(' ')]\n    costs: List[int] = [int(i) for i in stdin.readline().split(' ')]\n\n    # Sort the lists by cost\n    values = values[:]\n    costs = costs[:]\n    values.sort()\n    costs.sort()\n\n    # X is the sum of the values of the chosen gems.\n    # Y is the sum of the costs of the chosen gems.\n    X = 0\n    Y = 0\n\n    # Add the first two gems\n    X += values[0]\n    Y += costs[0]\n\n    # For each of the remaining gems,\n    #   - if the chosen gems would increase X,\n    #     then add this gem's value and cost,\n    #   - if the chosen gems would decrease X,\n    #     then we need to add the cost of the remaining gems.\n    for i in range(1, n):\n        if (values[i] + costs[i] > X):\n            X += values[i]\n            Y += costs[i]\n        else:\n            X -= costs[i]\n\n    return X - Y"
    },
    {
        "number": 4313,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin.readline())\n    v: List[int] = [int(x) for x in stdin.readline().split()]\n    c: List[int] = [int(x) for x in stdin.readline().split()]\n    return str(max([sum(v[:i]) - sum(c[:i]) for i in range(1, n + 1)]))\n\nimport sys"
    },
    {
        "number": 4314,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    H, W = [int(n) for n in lines[0].split(' ')]\n    grid = []\n    for i in range(H):\n        grid.append(list(lines[i + 1]))\n    # print(grid)\n\n    # remove horizontal row\n    for i in range(H):\n        row = [j for j in grid[i]]\n        if row.count('.') == 0:\n            for k in range(W):\n                grid[i][k] = '#'\n        else:\n            break\n\n    # remove vertical column\n    for i in range(W):\n        col = [grid[j][i] for j in range(H)]\n        if col.count('.') == 0:\n            for k in range(H):\n                grid[k][i] = '#'\n        else:\n            break\n\n    for i in range(H):\n        for j in range(W):\n            print(grid[i][j], end='')\n        print('')\n\n\nsolution(stdin='''4 4\n##.#\n....\n##.#\n.#.#''')\n"
    },
    {
        "number": 4314,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    rows = stdin.split('\\n')\n    first_row = rows[0]\n    second_row = rows[1]\n    third_row = rows[2]\n    first_row_numbers = list(first_row)\n    second_row_numbers = list(second_row)\n    third_row_numbers = list(third_row)\n    first_row_numbers_list = [0] * len(first_row)\n    second_row_numbers_list = [0] * len(second_row)\n    third_row_numbers_list = [0] * len(third_row)\n    for i in range(0, len(first_row)):\n        if first_row[i] == '#':\n            first_row_numbers_list[i] = 1\n    for i in range(0, len(second_row)):\n        if second_row[i] == '#':\n            second_row_numbers_list[i] = 1\n    for i in range(0, len(third_row)):\n        if third_row[i] == '#':\n            third_row_numbers_list[i] = 1\n    # print(first_row_numbers_list, second_row_numbers_list, third_row_numbers_list)\n    # first_row_numbers_list.pop(1)\n    # second_row_numbers_list.pop(1)\n    # third_row_numbers_list.pop(1)\n    # print(first_row_numbers_list, second_row_numbers_list, third_row_numbers_list)\n    # first_row_numbers = ''.join(first_row_numbers)\n    # second_row_numbers = ''.join(second_row_numbers)\n    # third_row_numbers = ''.join(third_row_numbers)\n    # first_row_numbers = [0] * len(first_row_numbers)\n    # second_row_numbers = [0] * len(second_row_numbers)\n    # third_row_numbers = [0] * len(third_row_numbers)\n    first_row_numbers_list.pop(1)\n    second_row_numbers_list.pop(1)\n    third_row_numbers_list.pop(1)\n    print(first_row_numbers_list, second_row_numbers_list, third_row_numbers_list)\n    for i in range(0, len(first_row_numbers_list)):\n        if first_row_numbers_list[i] == 0:\n            first_row_numbers_list.pop(i)\n            first_row_numbers_list.insert(i, '#')\n    for i in range(0, len(second_row_numbers_list)):\n        if second_row_numbers_list[i] == 0:\n            second_row_numbers_list.pop(i)\n            second_row_numbers_list.insert(i, '#')\n    for i in range(0, len(third_row_numbers_list)):\n        if third_row_numbers_list[i] == 0:\n            third_row_numbers_list.pop(i)\n            third_row_numbers_list.insert(i, '#')\n    first_row_numbers = ''.join(first_row_numbers_list)\n    second_row_numbers = ''.join(second_row_numbers_list)\n    third_row_numbers = ''.join(third_row_numbers_list)\n    first_row_numbers = [0] * len(first_row_numbers)\n    second_row_numbers = [0] * len(second_row_numbers)\n    third_row_numbers = [0] * len(third_row_numbers)\n    print(first_row_numbers, second_row_numbers, third_row_numbers)\n    # print(first_row_numbers)\n    # print(second_row_numbers)\n    # print(third_row_numbers)\n    return first_row_numbers + '\\n' + second_row_numbers + '\\n' + third_row_numbers\n\nprint(solution('4 4\\n#.#\\n....\\n#.#\\n.#.#\\n'))\n\n'''\n4 4\n##.#\n....\n##.#\n.#.#\n\n-----Sample Output-----\n###\n###\n.##\n\nThe second row and the third column in the original grid will be removed.\n\n-----Sample Input-----\n5 5\n####\n..#.\n####\n.#.#\n####\n\n-----Sample Output-----\n#####\n..#.\n####\n.#.#\n####\n\nThe second row and the third column in the original grid will be removed.\n'''"
    },
    {
        "number": 4314,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # {(0, 1), (0, 2), (1, 1), (1, 2), (2, 1), (2, 2), (3, 1), (3, 2)}\n    # (0, 0) (0, 1) (0, 2) (0, 3) (1, 0) (1, 1) (1, 2) (1, 3) (2, 0) (2, 1) (2, 2) (2, 3) (3, 0) (3, 1) (3, 2) (3, 3)\n    # {(0, 0), (0, 1), (0, 2), (1, 0), (1, 1), (1, 2), (2, 0), (2, 1), (2, 2), (3, 0), (3, 1), (3, 2)}\n    # (0, 0) (0, 1) (0, 2) (1, 0) (1, 1) (1, 2) (2, 0) (2, 1) (2, 2) (3, 0) (3, 1) (3, 2)\n    # {(0, 0), (0, 1), (0, 2), (1, 0), (1, 1), (1, 2), (2, 0), (2, 1), (2, 2), (3, 0)}\n    # (0, 0) (0, 1) (0, 2) (1, 0) (1, 1) (1, 2)\n    # {(0, 0), (0, 1), (0, 2), (1, 0), (1, 1), (1, 2)}\n    # (0, 0) (0, 1) (0, 2)\n    # {(0, 0), (0, 1), (0, 2)}\n\n    # {(0, 0), (0, 1), (0, 2), (1, 0), (1, 1), (1, 2), (2, 0), (2, 1), (2, 2), (3, 0)}\n    # (0, 0) (0, 1) (0, 2) (1, 0) (1, 1) (1, 2)\n    # {(0, 0), (0, 1), (0, 2), (1, 0), (1, 1), (1, 2)}\n    # (0, 0) (0, 1) (0, 2)\n    # {(0, 0), (0, 1), (0, 2)}\n\n    H, W = [int(x) for x in stdin.split(' ')]\n    white_black = [stdin[x:x + W] for x in range(0, W * H, W)]\n    black_white = [list(row) for row in zip(*white_black)]\n    for x in range(H):\n        for y in range(W):\n            if black_white[x][y] == '#':\n                black_white[x][y] = '*'\n            elif black_white[x][y] == '.':\n                black_white[x][y] =''\n\n    out = [' '.join(row) for row in black_white]\n    return '\\n'.join(out)\n\n\ndef"
    },
    {
        "number": 4314,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    H, W = map(int, stdin.readline().split())\n    grid = [list(stdin.readline().strip()) for _ in range(H)]\n    for i in range(H):\n        for j in range(W):\n            if grid[i][j] == \".\":\n                print(\".\", end=\"\")\n            else:\n                print(\"#\", end=\"\")\n        print()\n    return \"\""
    },
    {
        "number": 4314,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    H, W = map(int, stdin.split())\n    grid = [stdin.split()[1:]]\n    while (grid[0] == ['.'] * (H + 1)) and (grid[-1] == ['.'] * (H + 1)):\n        grid = [grid[i][1:-1] for i in range(1, len(grid) - 1)]\n    return '\\n'.join(''.join(i) for i in grid)\n"
    },
    {
        "number": 4314,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # find rows and columns\n    rows, columns = [int(n) for n in stdin.split('\\n')[0].split(' ')]\n    # create a matrix with empty cells\n    matrix = [['.'] * columns for _ in range(rows)]\n    # find rows and columns\n    rows, columns = [int(n) for n in stdin.split('\\n')[0].split(' ')]\n    # create a matrix with empty cells\n    matrix = [['.'] * columns for _ in range(rows)]\n    # create a matrix with black cells\n    matrix = [['#'] * columns for _ in range(rows)]\n    # read a matrix\n    matrix = stdin.split('\\n')\n    matrix = matrix[1:]\n    for row in matrix:\n        row = row.split(' ')\n        for i in range(len(row)):\n            matrix[int(row[0]) - 1][i] = row[i]\n    # set matrix for return\n    matrix_return = matrix\n    # print the matrix\n    for row in matrix_return:\n        print(''.join(row))\n\nsolution(stdin)"
    },
    {
        "number": 4314,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    h, w = map(int, stdin.split())\n    grid = []\n    for _ in range(h):\n        grid.append(list(map(str, stdin.split()[1:])))\n    h -= 1\n    w -= 1\n    \n    while True:\n        # for each row\n        for i in range(h+1):\n            # if there's only one white block\n            if all([x == '#' for x in grid[i]]):\n                # delete row and break\n                grid = grid[:i] + grid[i+1:]\n                break\n        else:\n            break\n        \n        # for each column\n        for j in range(w+1):\n            # if there's only one white block\n            if all([x[j] == '#' for x in grid]):\n                # delete column and break\n                for x in range(len(grid)):\n                    del grid[x][j]\n                break\n        else:\n            break\n    \n    return '\\n'.join([''.join(x) for x in grid])\n"
    },
    {
        "number": 4314,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def operation(matrix: list[list[str]]):\n        nonlocal i, j\n        for k in range(0, len(matrix[i])):\n            if matrix[i][k] == \"#\":\n                matrix[i][k] = \".\"\n                break\n        for k in range(0, len(matrix)):\n            if matrix[k][j] == \"#\":\n                matrix[k][j] = \".\"\n                break\n        return matrix\n    stdin = stdin.split(\"\\n\")\n    i, j = 0, 0\n    matrix = []\n    for row in stdin[1:]:\n        matrix.append([x for x in row if x!= \":\"])\n    while True:\n        if not \".\" in matrix[i]:\n            i += 1\n        else:\n            break\n        for row in matrix:\n            while True:\n                if not \".\" in row:\n                    j += 1\n                    row = row[1:]\n                else:\n                    break\n        if i + 1 == len(matrix) and j + 1 == len(matrix[0]):\n            break\n        matrix = operation(matrix)\n    return \"\\n\".join([\"\".join(x) for x in matrix])\n"
    },
    {
        "number": 4314,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    h, w = list(map(int, stdin.split()))\n    grid = []\n    for _ in range(h):\n        grid.append(list(stdin.split('\\n')[1:-1]))\n    is_white = lambda c: c == '#'\n    is_black = lambda c: c == '.'\n    black_count = 0\n    white_count = 0\n    for row in grid:\n        black_count += is_black(row[0])\n        white_count += is_white(row[0])\n    if black_count!= white_count:\n        return 'impossible'\n    return ''.join(map(lambda r: ''.join(r), grid))"
    },
    {
        "number": 4314,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    The solution function takes the standard input and returns the output.\n    :param stdin: The standard input string.\n    :return: The solution string.\n    \"\"\"\n    # Check out the input string:\n    rows, cols = list(map(int, stdin.split(\" \")))\n    grid = []\n    for _ in range(rows):\n        row = stdin.split(\"\\n\")[1:]\n        grid.append(row)\n    # ---------------------------------------------------------------\n    # Now it's time for the algorithm!\n    # ---------------------------------------------------------------\n\n    # We create the grid of the same size as the original but with '0' values:\n    grid_solution = [[0] * cols for _ in range(rows)]\n    # We copy the original grid to the new grid:\n    for i in range(rows):\n        for j in range(cols):\n            grid_solution[i][j] = grid[i][j]\n\n    # We create the auxiliary matrix that will be filled with the values of the\n    # different possible paths to the end:\n    paths = [[0] * cols for _ in range(rows)]\n\n    # We fill the first row and column of the matrix with the value 1\n    # (the first path that leads to the end)\n    for i in range(rows):\n        paths[i][0] = 1\n        paths[0][j] = 1\n\n    # We fill the rest of the matrix with the possible paths that lead to the end:\n    for i in range(1, rows):\n        for j in range(1, cols):\n            # We evaluate all possible paths that lead to the end:\n            for k in range(max(0, i - 1), min(rows, i + 2)):\n                for l in range(max(0, j - 1), min(cols, j + 2)):\n                    # We add the possible paths to the 'paths' matrix\n                    paths[i][j] += grid_solution[k][l]\n\n    # We count the possible paths that lead to the end and we define the maximum one:\n    solution_path = 1\n    for i in range(1, rows):\n        for j in range(1, cols):\n            solution_path += paths[i][j]\n    return str(solution_path)\n"
    },
    {
        "number": 4315,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    R = int(stdin.readline())\n    pi = 3.141592653589793238462643383279502884197169399375105820974944592307816406286208998628034825342117067982148086513282306647093844609550582231725359408128481117450284102701938521105559644622948954930381964428810975665933446128475648233786783165271201909145648566923460348610454326648213393607260249141273724587006606315588174881520920962829254091715364367892590360011330530548820466521384146951941511609433057270365759591953092186117381932611793105118548074462379962749567351885752724891227938183011949129833673362440656643086021394946395224737190702179860943702770539217176293176752384674818467669405132000568127145263560827785771342757789609173637178721468440901224953430146549585371050792279689258923542019956112129021960864034418159813629774771309973906526822825409155996250068269532307372584550267225628707886941442\n    return str(round(pi * R * 2, 10))\n"
    },
    {
        "number": 4315,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    R = int(stdin.readline())\n    return f'{R * 3.141592653589793:.2f}'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4315,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin))\n"
    },
    {
        "number": 4315,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    return str(6.28318530717958623200)\n\"\"\"\ndef"
    },
    {
        "number": 4315,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n\nimport math\n\ndef"
    },
    {
        "number": 4315,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Your solution goes here\n    r = int(stdin)\n    return str(3.14*2*r)"
    },
    {
        "number": 4315,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    R = stdin\n    result = round((2 * 3.14 * float(R)), 2)\n    print(result)\n    return result\n"
    },
    {
        "number": 4315,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    pass\n"
    },
    {
        "number": 4315,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    R = stdin\n    return str(3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679)"
    },
    {
        "number": 4315,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return str(3.14 * int(stdin))\n"
    },
    {
        "number": 4316,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return 'Yes' if len([c for c in set(stdin) if stdin.count(c) == 2]) == 2 else 'No'\n"
    },
    {
        "number": 4316,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    char_count_dict = {}\n    s = stdin\n    for c in s:\n        char_count_dict[c] = char_count_dict.get(c, 0) + 1\n    if len(char_count_dict) == 2:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4316,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # S = stdin.strip()\n    # d = {}\n    # for c in S:\n    #     if c in d:\n    #         d[c] += 1\n    #     else:\n    #         d[c] = 1\n    # for k, v in d.items():\n    #     if v == 2:\n    #         return \"Yes\"\n    # return \"No\"\n\n    # return \"Yes\" if len(S) == 4 and len(set(S)) == 2 and S.count(S[0]) == 2 and S.count(S[2]) == 2 else \"No\"\n    return \"Yes\" if len(set(stdin)) == 2 and stdin.count(stdin[0]) == 2 and stdin.count(stdin[2]) == 2 else \"No\"\n"
    },
    {
        "number": 4316,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return 'Yes' if len(set(stdin)) == 2 and len(set(stdin)) == len(set(stdin)) else 'No'\n"
    },
    {
        "number": 4316,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin[0]\n    b = stdin[1]\n    c = stdin[2]\n    d = stdin[3]\n    return \"Yes\" if a == b and c == d else \"No\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4316,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    char_count = {char: 0 for char in stdin}\n    for char in stdin:\n        char_count[char] += 1\n    print('No' if sum(char_count.values())!= len(stdin) or char_count[stdin[0]]!= 2 or char_count[stdin[3]]!= 2 else 'Yes')\n"
    },
    {
        "number": 4316,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.replace(\" \", \"\")\n    counter = collections.Counter(s)\n    print(counter)\n    print(counter[s[0]] == 2)\n    print(counter[s[1]] == 2)\n    print(counter[s[2]] == 2)\n    print(counter[s[3]] == 2)\n    return \"Yes\" if counter[s[0]] == 2 and counter[s[1]] == 2 and counter[s[2]] == 2 and counter[s[3]] == 2 else \"No\""
    },
    {
        "number": 4316,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return 'Yes' if (len(stdin) == 4 and stdin.count(stdin[0]) == 2 and stdin.count(stdin[3]) == 2) else 'No'\n"
    },
    {
        "number": 4316,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # convert string to dictionary\n    my_dict = dict(enumerate(stdin))\n    print(my_dict)\n    # check if there are 2 keys that have the same value\n    for key in my_dict:\n        if my_dict[key] == my_dict[key + 1]:\n            return \"Yes\"\n\n    return \"No\""
    },
    {
        "number": 4316,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # a + a = a + a\n    # b + b = b + b\n    # a + a + a + a + a + a = a + a + a + a + a + a\n    # a + b + a + b + a + b = a + b + a + b + a + b\n\n    # check if the first character in the string is same as the last character\n    if stdin[0] == stdin[3]:\n        # check if the string contains a and b\n        if 'a' and 'b' in stdin:\n            # check if the first two character and the last character are the same\n            if stdin[0] == stdin[1] and stdin[2] == stdin[3]:\n                print('Yes')\n            else:\n                print('No')\n        else:\n            print('No')\n    else:\n        print('No')\n"
    },
    {
        "number": 4317,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return max(a + b, abs(a - b), a * b)\n"
    },
    {
        "number": 4317,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = list(map(int, stdin.split(' ')))\n    return str(max(a + b, a - b, a * b))\n    \n"
    },
    {
        "number": 4317,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B = stdin.split(' ')\n    A, B = int(A), int(B)\n\n    return max(A + B, A - B, A * B)\n\n\ndef"
    },
    {
        "number": 4317,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(max(a + b, a - b, a * b))\n"
    },
    {
        "number": 4317,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split(' '))\n    return str(max(-a - b, -a, a * b))\n"
    },
    {
        "number": 4317,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split(' '))\n    return str(max(a + b, a - b, a * b))\n"
    },
    {
        "number": 4317,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return max(-a - b, -a, a * b)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4317,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the largest number among A + B, A - B, and A \\times B.\"\"\"\n    a, b = map(int, stdin.split(' '))\n    return max(a + b, a - b, a * b)\n\"\"\"\nimport sys\nfrom math import gcd\n\ninput_a, input_b = sys.stdin.readlines()\n\nprint(gcd(int(input_a), int(input_b)))\nprint(int(input_a) + int(input_b))\nprint(int(input_a) - int(input_b))\nprint(int(input_a) * int(input_b))\n"
    },
    {
        "number": 4317,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    stdin = stdin.strip()\n    a, b = stdin.split(' ')\n    a = int(a)\n    b = int(b)\n\n    greatest = max(a + b, a - b, a * b)\n    return str(greatest)\n"
    },
    {
        "number": 4317,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(max(-a, -b, a * b))\n"
    },
    {
        "number": 4318,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    mounts = [int(input()) for _ in range(n)]\n    ocean = 0\n    for i in range(n - 1):\n        if not (mounts[i] <= mountains[i + 1]):\n            ocean += 1\n    print(ocean)\n    return \"\"\n"
    },
    {
        "number": 4318,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # get input\n    input = stdin.splitlines()\n    # print(input)\n\n    # # step 1: get number of inns\n    # input = [int(x) for x in input[0].split()]\n    # print(input)\n\n    # step 2: get array of heights\n    input = [int(x) for x in input[1].split()]\n    print(input)\n\n    # step 3: get number of inns that are visible\n    inns = []\n    inns_visible = 0\n\n    for i in range(1, len(input)):\n        if input[i - 1] <= input[i]:\n            inns.append(input[i])\n            inns_visible += 1\n\n    return inns_visible\n"
    },
    {
        "number": 4318,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find the number of inns from which you can see the ocean.\"\"\"\n    return str(sum(\n        [\n            all(\n                [\n                    int(stdin.split()[1][x]) >= int(stdin.split()[1][y])\n                    for x, y in zip(range(1, len(stdin.split()[1])), range(2, len(stdin.split()[1])))\n                ]\n            )\n            for y in range(1, len(stdin.split()[1]))\n        ]\n    ))\n\"\"\"\n\ndef"
    },
    {
        "number": 4318,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    h = list(map(int, stdin.readline().strip().split()))\n\n    count = 0\n    for i in range(n):\n        if h[i] >= h[i - 1]:\n            count += 1\n\n    return count"
    },
    {
        "number": 4318,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    n = int(stdin.readline().strip())\n    arr = list(map(int, stdin.readline().strip().split()))\n    count = 0\n    for i in range(0, len(arr) - 1):\n        for j in range(i + 1, len(arr)):\n            if arr[i] <= arr[j]:\n                count += 1\n            else:\n                break\n    return count\n"
    },
    {
        "number": 4318,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    n = int(stdin.readline())\n    h = [int(x) for x in stdin.readline().split()]\n\n    count = 0\n    for i in range(1, n):\n        if h[i] > h[i - 1]:\n            count += 1\n    return str(count)\n"
    },
    {
        "number": 4318,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Takes in standard input and returns the number of inns you can see\n    \"\"\"\n    # Get data from standard input\n    n = int(stdin.readline())\n    h = [int(x) for x in stdin.readline().split()]\n    # Define a variable to track the number of inns from which you can see the ocean\n    count = 0\n    # Loop through each inn\n    for i in range(n):\n        # If the current inn is further to the west than the previous inn\n        if h[i] >= h[i - 1]:\n            # Add the current inn to the count\n            count += 1\n    # Return the count\n    return str(count)\n"
    },
    {
        "number": 4318,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    inns = stdin.split('\\n')\n    n = int(inns[0])\n    inns = inns[1:]\n    h = list(map(int, inns[0].split()))\n    cnt = 0\n    for i in range(1, n):\n        if h[0] <= h[i] and h[i-1] <= h[i]:\n            cnt += 1\n    return cnt\n"
    },
    {
        "number": 4318,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find the number of inns from which you can see the ocean from the given set of mountains.\n    :param stdin: string of input parameters\n    :return: solution\n    \"\"\"\n    mountain_count = int(stdin[0])\n    mountains = [int(i) for i in stdin[1:].split(\" \")]\n    mountains.sort()\n    count = 0\n    for i in range(1, mountain_count):\n        if mountains[i] <= mountains[i-1]:\n            count += 1\n    return count\n    pass\n"
    },
    {
        "number": 4318,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4\n   ... 6 5 6 8''')\n    3\n    \"\"\"\n    N = int(stdin)\n    mountains = [int(x) for x in stdin.split()]\n    mountains = sorted(mountains, reverse=True)\n\n    count = 0\n    last_mountain = 0\n    for mountain in mountains:\n        if mountain > last_mountain:\n            count += 1\n            last_mountain = mountain\n    return str(count)\n"
    },
    {
        "number": 4319,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    input()\n    return f'{len(list(stdin.split()))}\\n{len(list(set(stdin.split())))}'\n"
    },
    {
        "number": 4319,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Task:\n      Given the number of staircases Tanya climbs, how many stairways\n      would she have to climb?\n    Input Format:\n      The first line contains T, the number of test cases.\n      The next T lines each contain an integer n, the number of staircases\n      Tanya has to climb.\n    Output Format:\n      For each test case, output in one line the number of stairways that\n      Tanya has to climb, followed by a space.\n    \"\"\"\n    T = int(stdin)\n\n    for t in range(T):\n        n = int(stdin.readline())\n        stairs = [int(x) for x in stdin.readline().split()]\n        stairs_dict = {x: stairs.count(x) for x in set(stairs)}\n        for key in stairs_dict.keys():\n            print(key, stairs_dict[key])"
    },
    {
        "number": 4319,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4319,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return None"
    },
    {
        "number": 4319,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time complexity: O(n)\n    Space complexity: O(n)\n    \"\"\"\n    n = int(stdin.readline())\n    stairs = sorted(map(int, stdin.readline().split()))\n    dp = [0] * len(stairs)\n    dp[0] = stairs[0]\n    dp[1] = stairs[0] + stairs[1]\n    for i in range(2, len(stairs)):\n        dp[i] = max(dp[i - 1], dp[i - 2] + stairs[i])\n    print(dp[-1])\n    print(*dp)\n"
    },
    {
        "number": 4319,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    n = int(stdin.readline())\n    l = [int(x) for x in stdin.readline().split()]\n    i = 0\n    while i < n:\n        t = 1\n        while i+t < n and l[i+t] == l[i]:\n            t += 1\n        print(t)\n        i += t\n    return ''"
    },
    {
        "number": 4319,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    d = dict()\n    for i in range(n):\n        d[a[i]] = i+1\n    sorted_keys = sorted(d.keys())\n    for i in range(n):\n        print(d[sorted_keys[i]])\n\n    return ''"
    },
    {
        "number": 4319,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    stairway_numbers = stdin.split('\\n')\n    stairway_numbers.pop(0)\n    stairway_numbers = [int(i) for i in stairway_numbers]\n    s = dict()\n    for i in range(1, n + 1):\n        s[i] = []\n    for j in range(len(stairway_numbers)):\n        num = stairway_numbers[j]\n        s[num].append(j + 1)\n    for i in s.keys():\n        if len(s[i]) > 1:\n            print(i)\n            for j in s[i]:\n                print(j, end=' ')\n            print()\n    return \"\""
    },
    {
        "number": 4319,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \n    \n    return''.join(map(str, a))\n"
    },
    {
        "number": 4319,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    lst = list(map(int, stdin.split('\\n')[1].split()))\n    lst.sort()\n    last = lst.pop()\n    lst = [i for i in range(1, last + 1)]\n    count = 0\n    while lst:\n        c = lst.pop()\n        if c in lst:\n            count += 1\n            continue\n        else:\n            count += 1\n            lst.pop(lst.index(c))\n    return str(count)\n"
    },
    {
        "number": 4320,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4320,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return '1'\n"
    },
    {
        "number": 4320,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4320,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 4320,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('4\\n11\\n')\n    '4\\n1\\n1\\n1\\n1\\n3\\n5\\n7\\n'\n    >>> solution('3\\n6\\n')\n    '2\\n3\\n4\\n'\n    >>> solution('3\\n7\\n')\n    '1\\n2\\n3\\n'\n    >>> solution('5\\n5\\n')\n    '1\\n1\\n1\\n1\\n1\\n2\\n4\\n5\\n'\n    >>> solution('7\\n7\\n')\n    '1\\n1\\n1\\n1\\n1\\n1\\n1\\n2\\n'\n    >>> solution('4\\n999999999\\n')\n    '1\\n1\\n1\\n1\\n2\\n1\\n1\\n1\\n1\\n1\\n1\\n2\\n2\\n2\\n1\\n1\\n3\\n1\\n2\\n1\\n2\\n3\\n4\\n3\\n3\\n2\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n2\\n2\\n2\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\"
    },
    {
        "number": 4320,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    number_of_test_cases = int(stdin.readline())\n    for test_case_number in range(number_of_test_cases):\n        n = int(stdin.readline())\n        x = 1\n        k = 2\n        while (k < n) and (x + (2 * x) + (4 * x) + (2 ** (k - 1) * x) < n):\n            k += 1\n            x += 1\n        print(k)\n        return \"\"\n    return \"1\"\n"
    },
    {
        "number": 4320,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 4320,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Get the solution of the kata.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4320,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4320,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Returns:\n    stdin -- the input string with the number of test cases\n    \"\"\"\n    t = int(stdin)\n    for i in range(t):\n        n = int(stdin)\n        for k in range(2, n):\n            if n % k == 0:\n                print(k)\n                break\n    return ''"
    },
    {
        "number": 4321,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    for _ in range(k):\n        n = str(n)\n        n = '0' if n[-1] == '0' else str(int(n) - 1)\n    return str(int(n))\n"
    },
    {
        "number": 4321,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(\" \")]\n    \n    while k:\n        if n % 10 == 0:\n            n = n // 10\n        else:\n            n = n - 1\n        k -= 1\n\n    return n\n    \n"
    },
    {
        "number": 4321,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n\n\n\ndef"
    },
    {
        "number": 4321,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = stdin.split(' ')\n    n, k = int(n), int(k)\n    s = 0\n    while k:\n        n, r = divmod(n, 10)\n        if r:\n            s += 1\n            k -= 1\n    return s * 10 + n\n"
    },
    {
        "number": 4321,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n\ndef"
    },
    {
        "number": 4321,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4321,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    \n    print(n - k % n)\n    \n    return ''\n"
    },
    {
        "number": 4321,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # total = int(stdin.split()[0])\n    # count = int(stdin.split()[1])\n    # for _ in range(count):\n    #     if total % 10!= 0:\n    #         total -= 1\n    #     else:\n    #         total //= 10\n    # print(total)\n    n, k = map(int, stdin.split())\n    while k > 0:\n        n = (n % 1000) * 10 + (n // 1000)\n        k -= 1\n    print(n)"
    },
    {
        "number": 4321,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n"
    },
    {
        "number": 4321,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return result\n"
    },
    {
        "number": 4322,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    n = int(stdin[0])\n    numbers = list(map(int, stdin[1].split()))\n    possible_solutions = []\n    for i in range(0, n + 1):\n        for j in range(0, n + 1):\n            if i + j >= n:\n                break\n            possible_solutions.append(numbers[i:i + j])\n    max_sum = 0\n    max_index = 0\n    for possible_solution in possible_solutions:\n        s = sum(possible_solution)\n        if s > max_sum:\n            max_sum = s\n            max_index = possible_solution\n    print(len(max_index))\n    print(' '.join(list(map(str, max_index))))\n    return str(len(max_index)) +'' +''.join(list(map(str, max_index)))\n\ndef"
    },
    {
        "number": 4322,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # \u041c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0447\u0435\u043b\u043e\u0432\u0435\u043a\n    n = int(stdin.split('\\n')[0])\n    # \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u0432\u0441\u0435\u0445 \u0441\u0442\u043e\u0440\u043e\u043d\n    heights = [int(i) for i in stdin.split('\\n')[1].split(' ')]\n    # \u0421\u043f\u0438\u0441\u043e\u043a \u0432\u0441\u0435\u0445 \u0441\u0442\u043e\u0440\u043e\u043d, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u043e\u0436\u043d\u043e \u0432\u0437\u044f\u0442\u044c \u043d\u0430 \u0432\u044b\u0431\u043e\u0440\n    possible_sides = list(set(heights))\n    # \u0412\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0445 \u0441\u0442\u043e\u0440\u043e\u043d\n    # \u0412\u044b\u0431\u0438\u0440\u0430\u0435\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0445 \u0441\u0442\u043e\u0440\u043e\u043d \u0438 \u0438\u0445 \u0441\u043f\u0438\u0441\u043e\u043a\n    sides_count = {}\n    for side in possible_sides:\n        sides_count[side] = heights.count(side)\n    # \u0412\u044b\u0431\u0438\u0440\u0430\u0435\u043c \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0438\u0437 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\n    max_count = max(sides_count.values())\n    # \u0412\u044b\u0431\u0438\u0440\u0430\u0435\u043c \u0432\u0441\u0435 \u0441\u0442\u043e\u0440\u043e\u043d\u044b \u0438\u0437 \u0441\u043b\u043e\u0432\u0430\u0440\u044f \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0435 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u043c\u0443 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0443 \u0441\u0442\u043e\u0440\u043e\u043d\n    all_sides = [i[0] for i in list(sides_count.items()) if i[1] == max_count]\n    # \u0421\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u043c \u0441\u0442\u043e\u0440\u043e\u043d\u044b \u043f\u043e \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u043d\u0438\u044e\n    all_sides.sort()\n    # \u0412\u044b\u0431\u0438\u0440\u0430\u0435\u043c \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u0443\u044e \u0441\u0442\u043e\u0440\u043e\u043d\u0443 \u0438\u0437 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0445 \u0441\u0442\u043e\u0440\u043e\u043d\n    chosen_side = all_sides[-1]\n    # \u0421\u043e\u0437\u0434\u0430\u0451\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u044b\u0445 \u0441\u0442\u043e\u0440\u043e\u043d\n    chosen_sides = []\n    for i in heights:\n        if i == chosen_side:\n            chosen_sides.append(i)\n    # \u0412\u044b\u0432\u043e\u0434\u0438\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u044b\u0445 \u0441\u0442\u043e\u0440\u043e\u043d \u0438 \u043e\u0431\u043d\u0443\u043b\u044f\u0435\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u044b\u0445 \u0441\u0442\u043e\u0440\u043e\u043d\n    print(max_count)\n    print(' '.join(str(i) for i in chosen_sides))\n    chosen_sides.clear()\n    # \u0414\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u0441\u0442\u043e\u0440\u043e\u043d\u044b \u0432\u044b\u0431\u0438\u0440\u0430\u0435\u043c \u0441\u0442\u043e\u0440\u043e\u043d\u044b \u0441 \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u044b\u043c \u0447\u0438\u0441\u043b\u043e\u043c \u0441\u0442\u043e\u0440\u043e\u043d\n    for side in possible_sides:\n        if side!= chosen_side:\n            chosen_sides.extend([i for i in heights if i == side])\n    # \u0412\u044b\u0431\u0438\u0440\u0430\u0435\u043c \u0441\u0442\u043e\u0440\u043e\u043d\u044b \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u044b\u0435 \u043e\u0431\u0440\u0430\u0442\u043d\u043e \u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u043c \u043e\u0431\u043d\u0443\u043b\u0451\u043d\u043d\u044b\u0439 \u0441\u043f\u0438\u0441\u043e\u043a \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u044b\u0445 \u0441\u0442\u043e\u0440\u043e\u043d\n    print(max_count)\n    print(' '.join(str(i) for i in chosen_sides))\n    return max_count\n"
    },
    {
        "number": 4322,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    h = [int(x) for x in stdin.readline().strip().split(' ')]\n    m = -1\n    h1 = [0] * n\n    h2 = [0] * n\n    h3 = [0] * n\n    for i in range(n):\n        h1[i] = h[i]\n        h2[i] = h[i]\n        h3[i] = h[i]\n    h2[n - 1] = h1[0]\n    h3[n - 1] = h1[n - 1]\n    m = max(h1)\n    for i in range(1, n - 1):\n        h2[i] = h2[i - 1] + h1[i]\n        h3[i] = h3[i - 1] + h1[i]\n        if max(h2[i], h3[i]) > m:\n            m = max(h2[i], h3[i])\n    h2[0] = h2[n - 2] + h1[0]\n    h3[0] = h3[n - 2] + h1[0]\n    if max(h2[0], h3[0]) > m:\n        m = max(h2[0], h3[0])\n    ans = n - 1\n    for i in range(n - 1):\n        if (h2[i] + h1[n - 1] - h2[n - 2]) == (h2[i] + h1[n - 1] - h3[n - 2]):\n            ans = n - i - 1\n            break\n    for i in range(n - 1):\n        if (h3[i] + h1[n - 1] - h3[n - 2]) == (h2[i] + h1[n - 1] - h2[n - 2]):\n            ans = n - i - 1\n            break\n    for i in range(n - 1):\n        if (h2[i] + h1[n - 1] - h2[n - 2]) <= (h3[i] + h1[n - 1] - h3[n - 2]) <= (h2[i] + h1[n - 1] - h2[n - 2]):\n            ans = n - i - 1\n            break\n    for i in range(n - 1):\n        if (h3[i] + h1[n - 1] - h3[n - 2]) <= (h2[i] + h1[n - 1] - h2[n - 2]) <= (h3[i] + h1[n - 1] - h3[n - 2]):\n            ans = n - i - 1\n            break\n    ans = ans + 1\n    return str(ans)\n"
    },
    {
        "number": 4322,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    heights = [int(x) for x in stdin.readline().split(' ')]\n    heights.sort()\n\n    def find_ans():\n        left, right = 0, n - 1\n        while left < right:\n            if abs(heights[right] - heights[left]) > 1:\n                return left\n            mid = (left + right) // 2\n            if heights[left] > heights[mid]:\n                right = mid\n            else:\n                left = mid + 1\n        return left\n\n    k = find_ans()\n    heights = heights[k:] + heights[:k]\n    print(k)\n    print(' '.join([str(x) for x in heights]))\n"
    },
    {
        "number": 4322,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = [int(item) for item in stdin.readline().split()]\n    arr.sort(reverse=True)\n    ans = []\n    current = None\n    for num in arr:\n        if current is None:\n            current = num\n        elif abs(num - current) > 1:\n            ans.append(current)\n            current = num\n        else:\n            current = num\n    ans.append(current)\n    print(' '.join(str(item) for item in ans))\n    return ''\n"
    },
    {
        "number": 4322,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # O(n)\n    n = int(stdin.readline())\n    peoples = list(map(int, stdin.readline().split()))\n    res = [peoples[0]]\n    for people in peoples:\n        if abs(res[-1] - people) > 1:\n            res.append(people)\n    return len(res)\n\nprint(solution(sys.stdin.read()))\n"
    },
    {
        "number": 4322,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    height = list(map(int, stdin.split()))\n    counter = [0] * n\n    if n == 1:\n        print(1)\n        print(height[0])\n    else:\n        min_heights = []\n        counter[0] = 1\n        for i in range(1, n):\n            if height[i] < height[i - 1]:\n                counter[i] = 0\n            elif height[i] > height[i - 1]:\n                counter[i] = 1\n            else:\n                counter[i] = counter[i - 1] + 1\n        print(counter[-1])\n        print(*[height[i] for i in range(n) if counter[i] == counter[-1]])\n\n\nsolution(input())\n"
    },
    {
        "number": 4322,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    stdin = [int(x) for x in stdin.split()]\n    n = stdin[0]\n    a = stdin[1:]\n    dp = [0] * (n+1)\n    dp[1] = a[0]\n    for i in range(1, n):\n        dp[i+1] = max(dp[i], dp[i-1] + a[i])\n    d = n - dp[n]\n    res = []\n    for i in range(1, n+1):\n        if i == n-d:\n            res.append(dp[i])\n        elif i == n-2:\n            res.append(a[i])\n    return str(d) +'' +''.join(map(str, res))\n\n\ndef"
    },
    {
        "number": 4322,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    a.sort(reverse=True)\n    l, r = 0, len(a) - 1\n    res = [a[l]]\n    while l < r:\n        if abs(a[l] - a[r]) <= 1:\n            res.append(a[r])\n            r -= 1\n        else:\n            res.append(a[l])\n            l += 1\n    res.append(a[l])\n    return str(len(res)) + \" \" + \" \".join(str(x) for x in res)\n"
    },
    {
        "number": 4322,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split('\\n')\n    N = int(input[0])\n    a = [int(i) for i in input[1].split(' ')]\n    n = len(a)\n    res = [a[0]]\n    i = 0\n    k = 1\n    while k < n:\n        # print(k, res)\n        for j in range(k, n):\n            if abs(a[k] - a[j]) <= 1:\n                res.append(a[j])\n                k = j + 1\n                break\n        else:\n            res.append(a[k])\n            k += 1\n    return''.join(str(i) for i in res)\n\n\ndef"
    },
    {
        "number": 4323,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''TODO: implement solution'''\n    # TODO\n    # print(stdin)\n    n, m = list(map(int, stdin.split()))\n    songs = [list(map(int, stdin.split())) for _ in range(n)]\n    dp = [False for _ in range(m+1)]\n    dp[0] = True\n    for i in range(1, n+1):\n        for j in range(m+1):\n            if dp[j] and j + songs[i-1][0] <= m:\n                dp[j + songs[i-1][0]] = True\n    if dp[m]:\n        print(i)\n    else:\n        print(-1)\n    # return res"
    },
    {
        "number": 4323,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... 4 21\n   ... 10 8\n   ... 7 4\n   ... 3 1\n   ... 5 4\n   ... ''')\n    '2'\n    >>> solution('''\n   ... 4 16\n   ... 10 8\n   ... 7 4\n   ... 3 1\n   ... 5 4\n   ... ''')\n    '1'\n    \"\"\"\n    (n, m) = [int(x) for x in stdin.split('\\n')[:2]]\n    songs = [tuple(map(int, stdin.split('\\n')[2 + i].split())) for i in range(n)]\n    dp = [None] * m\n    for song in songs:\n        if sum(song) <= m:\n            dp[max(0, min(m, song[1]))] = min(dp[max(0, min(m, song[1]))], song[0]) if dp[max(0, min(m, song[1]))] is not None else song[0]\n    if None in dp:\n        return '-1'\n    return str(min([x for x in dp if x is not None]))\n"
    },
    {
        "number": 4323,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Get a number of integers a and b and determine the smallest integer N such that\n    N \u2265 a and N \u2264 b.\n    \"\"\"\n    n, m = [int(i) for i in stdin.split()]\n    a, b, c = [int(i) for i in stdin.split()]\n    print(max(max(a, b), max(b, c)))\n"
    },
    {
        "number": 4323,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"O(n log m) time | O(1) space\"\"\"\n    n, m = map(int, stdin.readline().split())\n    sizes = list(map(int, stdin.readline().split()))\n    sizes.sort()\n    min_size = 0\n    max_size = 0\n    while min_size <= max_size:\n        mid_size = (min_size + max_size) // 2\n        if can_fit(sizes, mid_size, m):\n            min_size = mid_size + 1\n        else:\n            max_size = mid_size - 1\n    return str(max_size)\n\ndef"
    },
    {
        "number": 4323,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    songs = [0] * n\n    for i in range(n):\n        songs[i] = [int(x) for x in stdin.split()][1:]\n    songs.sort(key=lambda x: x[0])\n    songs.sort(key=lambda x: x[1], reverse=True)\n    s = 0\n    for i in range(n):\n        s += songs[i][0]\n        if s > m:\n            return \"IMPOSSIBLE\"\n    return str(n)\n\n\nprint(solution(input()))\n\n\"\"\"\nimport math\n\n\ndef"
    },
    {
        "number": 4323,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    \u672c\u6b21\u9898\u76ee\u8981\u6c42\u7b97\u6cd5\u7684\u8fd0\u884c\u65f6\u95f4\u662f O(n)\uff0c\u8f93\u5165\u6570\u636e\u91cf\u5927\u5c0f\u662f O(n)\uff0c\u6240\u4ee5\u9898\u76ee\u8981\u6c42\u7684\u7b97\u6cd5\u6027\u80fd\u662f O(n)\u3002\n    \"\"\"\n    n, m = [int(s) for s in stdin.split()]\n    songs = [tuple([int(s) for s in stdin.split()]) for i in range(n)]\n    songs.sort(key=lambda x: x[0])\n\n    left = 0\n    right = m\n    for i, (a, b) in enumerate(songs):\n        if left + a <= right:\n            left += a\n        else:\n            print(-1)\n            break\n        if i == n - 1:\n            print(i + 1)\n"
    },
    {
        "number": 4323,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # return \"\"\n\n    n, m = map(int, stdin.split())\n    songs = []\n    for _ in range(n):\n        a, b = map(int, stdin.split())\n        songs.append((a, b))\n\n    songs.sort(key=lambda x: x[1])\n    used = 0\n    ans = 0\n    for a, b in songs:\n        used += b\n        ans += 1\n        if used > m:\n            return \"-1\"\n\n    return str(ans)\n"
    },
    {
        "number": 4323,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split(' ')]\n    songs = []\n    for _ in range(n):\n        songs.append([int(x) for x in stdin.split('\\n')[-1].split(' ')])\n    songs.sort(key=lambda x: x[0])\n    songs.sort(key=lambda x: x[1])\n    count = 0\n    current = 0\n    last = 0\n    while current <= m:\n        if count == n:\n            return str(count)\n        for i in range(n):\n            if current + songs[i][0] <= m:\n                current += songs[i][0]\n                count += 1\n                last = songs[i][1]\n                break\n    return str(-1)\n"
    },
    {
        "number": 4323,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Get input and run the solution\n    :param stdin: input\n    :return: string\n    \"\"\"\n    n, m = (int(x) for x in stdin.split(' '))\n    songs = []\n    for _ in range(n):\n        songs.append([int(x) for x in stdin.split(' ')])\n    print(solution_runner(n, m, songs))\n    return \"\"\n\n\ndef"
    },
    {
        "number": 4323,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    songs = [map(int, line.split()) for line in stdin]\n    songs.sort()\n\n    count = 0\n    i = 0\n    while m >= 0 and i < n:\n        size, comp_size = songs[i]\n        m -= comp_size\n        count += 1\n        i += 1\n    return count if m >= 0 else '-1'\n"
    },
    {
        "number": 4324,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4324,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    # take input\n    # make a string of length n with no duplicates\n    # iterate through the string and create a list with substrings of length a\n    # check if the substrings have exactly b unique letters\n    # if yes, add that substring to the solution\n\n\n    def substrings(s: str, a: int, b: int) -> list:\n        subs = []\n        for i in range(a):\n            for j in range(i, len(s)):\n                subs.append(s[i:j + 1])\n        return subs\n    return ''\n\n\ns = 'tleelte'\na = 3\nb = 3\nsubs = substrings(s, a, b)\nprint(subs)"
    },
    {
        "number": 4324,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4324,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split(' '))\n    return (lambda x: {x} if x == n or b == 1 or a == 1 else [{y} | x for y in x])(\n        set(map(lambda x: ''.join(sorted(x)),\n                [''.join(sorted(x[:a])) for x in ''.join([chr(i) for i in range(97, 97 + n)]).split('0') if x!= '']))\n        )\n\ndef"
    },
    {
        "number": 4324,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # We could use Python's string\n    # operations, but they aren't\n    # guaranteed to be available\n    # in the language.\n\n    # If there's no solution, return\n    # an empty string.\n    if len(stdin) < 3:\n        return ''\n\n    # Count the number of distinct\n    # characters in each substring of\n    # length a.\n    a = stdin[0]\n    b = stdin[1]\n    counts = [0] * (ord('z') - ord('a') + 1)\n    for c in stdin:\n        counts[ord(c) - ord('a')] += 1\n    if b > min(counts):\n        return ''\n\n    # Initialize the result.\n    result = ''\n\n    # Initialize the index of the\n    # character under consideration.\n    # We don't care about the first\n    # character, which we know has\n    # to be a distinct character.\n    i = 1\n    while i < len(stdin):\n        # We don't care about the\n        # last character, which we\n        # know has to be a distinct\n        # character.\n        j = i + 1\n        while j < len(stdin) and \\\n                (counts[ord(stdin[j]) - ord('a')] == b):\n            j += 1\n\n        # Add the substring to the\n        # result.\n        result += stdin[i:j]\n\n        # Update the index of the\n        # character under consideration.\n        i = j\n\n    return result\n\n\ndef"
    },
    {
        "number": 4324,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    pass"
    },
    {
        "number": 4324,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    while t > 0:\n        n, a, b = map(int, stdin.readline().strip().split())\n        s = [chr(i) for i in range(97, 97 + 26)] * n\n        ans = []\n        for i in range(n - a + 1):\n            sub_s = s[i:i + a]\n            sub_s.sort()\n            cnt = 0\n            for j in range(a):\n                if sub_s[j]!= s[i + j]:\n                    cnt += 1\n            if cnt <= b:\n                ans.append(''.join(sub_s))\n        ans.sort()\n        print(''.join(ans))\n        t -= 1\n"
    },
    {
        "number": 4324,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4324,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # ********** Write Your Code Here **********\n    # Take number of test cases as input\n    test_cases = int(stdin[0])\n\n    # Iterate over the number of test cases\n    for _ in range(test_cases):\n\n        # Initialize list to store substrings\n        substr_list = []\n\n        # Store input string\n        input_str = stdin[1]\n\n        # Store number of substring, a and b\n        num_substr = int(stdin[2])\n        a = int(stdin[3])\n        b = int(stdin[4])\n\n        # Iterate over the substring and check for valid substrings\n        for j in range(0, num_substr):\n            count = 0\n            substr = \"\"\n            for i in range(j, len(input_str), num_substr):\n                if len(substr) < a:\n                    substr = input_str[i]\n                    count = 1\n                elif len(substr) == a:\n                    substr = input_str[i]\n                    if count == b:\n                        substr_list.append(substr)\n                        count = 0\n                    else:\n                        count += 1\n                else:\n                    break\n        print(substr_list)\n"
    },
    {
        "number": 4324,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4325,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x, t = [int(i) for i in stdin.split()]\n    return n * x // t\n\"\"\"\n\nfrom math import ceil\n\ndef"
    },
    {
        "number": 4325,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    line = stdin.split()\n    \n    N = int(line[0])\n    X = int(line[1])\n    T = int(line[2])\n\n    if N == 1:\n        if X <= T:\n            return 1\n        else:\n            return 0\n    else:\n        # if X % T == 0:\n        #     return int(X/T)\n        # else:\n        #     return int(X/T) + 1\n        return int(N/T) + 1"
    },
    {
        "number": 4325,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    n, x, t = [int(x) for x in stdin.split(' ')]\n    minutes = (t // n) * n\n    remaining_t = t % n\n    if remaining_t > 0:\n        minutes += remaining_t\n    return minutes"
    },
    {
        "number": 4325,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nimport math\n\n\ndef"
    },
    {
        "number": 4325,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, x, t = [int(i) for i in stdin.split()]\n    answer = 0\n    while n > 0:\n        if n >= x:\n            n -= x\n            answer += x * t\n        else:\n            answer += n * t\n            n = 0\n    return str(answer)"
    },
    {
        "number": 4325,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Solution begins here:\n    N, X, T = map(int, stdin.split())\n    print(N * T - X)\n"
    },
    {
        "number": 4325,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, x, t = map(int, stdin.split())\n    return str(n//x + t*(n%x!= 0))\n"
    },
    {
        "number": 4325,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    total_takoyaki, total_min, amount = stdin.split(\" \")\n    total_takoyaki = int(total_takoyaki)\n    total_min = int(total_min)\n    amount = int(amount)\n    time_needed = total_takoyaki // amount\n    if total_takoyaki % amount == 0:\n        return str(time_needed)\n    else:\n        return str(time_needed + 1)\n"
    },
    {
        "number": 4325,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, t, x = list(map(int, stdin.split(' ')))\n    return str(n//x * t + n % x)\n"
    },
    {
        "number": 4325,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, x, t = [int(s) for s in stdin.split(\" \")]\n    return str(x * n // t + (n % t))\n"
    },
    {
        "number": 4326,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\n------Solution------\n"
    },
    {
        "number": 4326,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport sys\n\ndef"
    },
    {
        "number": 4326,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.splitlines()\n    n = int(stdin[0])\n    groups = {}\n    for i in range(1, n+1):\n        groups[i] = list(map(int, stdin[i].split()))\n    print(groups)\n    return groups\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4326,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    num_students: int = int(stdin)\n    result: int = 0\n    if num_students > 3:\n        result = num_students // 3 + 1\n    else:\n        result = num_students\n    return str(result)\n"
    },
    {
        "number": 4326,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 4326,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 4326,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.splitlines()\n    num_of_students = int(stdin[0])\n    num_of_possible_groups = 0\n    if num_of_students > 2:\n        num_of_possible_groups += num_of_students // 3\n    if num_of_students % 3 > 0:\n        num_of_possible_groups += 1\n    print(num_of_possible_groups)\nsolution(input())\n"
    },
    {
        "number": 4326,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 4326,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return 0\n"
    },
    {
        "number": 4326,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4327,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    A, P = [int(x) for x in stdin.split()]\n    return str(A//P+A % P)\n"
    },
    {
        "number": 4327,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution to the given problem.\n    :param stdin: str: Input from Standard Input\n    :return: str: Maximum number of apple pies we can make with what we have.\n    \"\"\"\n    line = stdin.split()\n    apple, piece = int(line[0]), int(line[1])\n    pies = apple // piece\n    rest = apple % piece\n    if rest == 0:\n        return pies\n    else:\n        return pies + 1\n    # Complete this function\n"
    },
    {
        "number": 4327,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    total_pieces, total_apples = map(int, stdin.split())\n    return total_pieces // 3 + total_pieces % 3\n\"\"\"\n"
    },
    {
        "number": 4327,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, p = [int(x) for x in stdin.split(' ')]\n    return str(int(a // p) + (a % p > 0))\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4327,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return str(int(stdin.split(\" \")[0]) + int(stdin.split(\" \")[1]))\n"
    },
    {
        "number": 4327,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    stdin = stdin.split(\"\\n\")\n    apple_pieces = list(map(int, stdin[0].split()))\n    return str(len(apple_pieces))"
    },
    {
        "number": 4327,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Implement Your Code Here\n    [a, p] = map(int, stdin.split())\n    if a <= 0 or p <= 0:\n        return '0'\n    elif a < p:\n        return '0'\n    else:\n        max_pieces = a // p\n        if a % p == 0:\n            return str(max_pieces)\n        else:\n            max_pieces += a // p\n            a -= p * (a // p)\n            pieces = a // 3\n            max_pieces += (pieces - 1) // 2\n            return str(max_pieces)\n"
    },
    {
        "number": 4327,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Please do not remove this line.\n    a, p = map(int, stdin.readlines())\n    print(math.ceil((a / 3) * p))\n"
    },
    {
        "number": 4327,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, P = [int(x) for x in stdin.split()]\n    return str(int((A - P + 1) / 3))\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4327,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, P = map(int, stdin.split())\n    print(P//3 + (P%3 == 0))"
    },
    {
        "number": 4328,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split(' '))\n    if a > b:\n        return b - a\n    elif a < b:\n        return a + b\n    return a + b"
    },
    {
        "number": 4328,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B = [int(x) for x in stdin.split()]\n    if B % A == 0:\n        return str(A + B)\n    else:\n        return str(B - A)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4328,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(s) for s in stdin.split()]\n    if a > b:\n        return str(b - a)\n    else:\n        return str(a + b)\n"
    },
    {
        "number": 4328,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if B % A == 0:\n        print(A+B)\n    else:\n        print(B-A)\n\ndef"
    },
    {
        "number": 4328,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split('\\n')\n    first_line = input_list[0].split()\n    a = int(first_line[0])\n    b = int(first_line[1])\n    if b % a == 0:\n        return a + b\n    else:\n        return b - a\n    # Your code here"
    },
    {
        "number": 4328,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin.readline().split()[0])\n    b = int(stdin.readline().split()[0])\n    if a % b == 0:\n        return f'{a + b}\\n'\n    else:\n        return f'{b - a}\\n'\nprint(solution(stdin=input()))\n\n\"\"\"\nimport os\nimport sys\n\ndef"
    },
    {
        "number": 4328,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split(' '))\n    return '{}'.format(b - a if a * b >= 0 else a + b)\n\n\nprint(solution('4 12'))\n"
    },
    {
        "number": 4328,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(i) for i in stdin.split()]\n    return str(a + b) if b % a == 0 else str(b - a)\n\nprint(solution(input()))"
    },
    {
        "number": 4328,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split(' ')\n    a = int(a)\n    b = int(b)\n    if a % b == 0:\n        return str(a + b)\n    else:\n        return str(b - a)\n"
    },
    {
        "number": 4328,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n  # read input\n  a, b = [int(x) for x in stdin.split(' ')]\n  # solve problem\n  if a > b:\n    return str(b - a)\n  return str(a + b)\n"
    },
    {
        "number": 4329,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    first_input, second_input = stdin.split()\n    return first_input[:-1] + second_input\n\"\"\""
    },
    {
        "number": 4329,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.readline().strip(), stdin.readline().strip()\n    return 'Yes' if s[:-1] + t[:-1] == t else 'No'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4329,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 4329,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    t = stdin[1]\n    return \"Yes\" if len(s) <= 10 and len(t) == len(s)+1 and t[:-1] == s and t[-1].lower()!= s[-1] else \"No\""
    },
    {
        "number": 4329,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.readline().strip()\n    t = stdin.readline().strip()\n    if len(s) > 10 or len(t)!= len(s) + 1:\n        return 'No'\n    return 'Yes' if t[:len(s)] == s else 'No'"
    },
    {
        "number": 4329,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[:-1]\n    t = stdin[:-2]\n    return 'Yes' if s[-1] == t[-1] and s[:-1] == t[:-1] else 'No'\n"
    },
    {
        "number": 4329,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return stdin[0] + stdin[-1]\n"
    },
    {
        "number": 4329,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.readline().strip(), stdin.readline().strip()\n\n    if t[:-1] == s:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\n\nsolution(input())\n"
    },
    {
        "number": 4329,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    t = stdin[1]\n    if len(s) > 10 or len(t)!= len(s) + 1:\n        print(\"No\")\n        return\n    if s + t[-1] == t:\n        print(\"Yes\")\n        return\n    print(\"No\")\n    return\n"
    },
    {
        "number": 4329,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.split('\\n')[0]\n    T = stdin.split('\\n')[1]\n    return 'Yes' if T in S + S[:-1] else 'No'\n"
    },
    {
        "number": 4330,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split(' '))\n\n    if a == b:\n        return str(a)\n    elif abs(a - b) % 2!= 0:\n        return 'IMPOSSIBLE'\n    else:\n        return str(abs(a - b) // 2)\n"
    },
    {
        "number": 4330,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    abs_difference_A = abs(A)\n    abs_difference_B = abs(B)\n    if abs_difference_A > abs_difference_B:\n        print(abs_difference_A - abs_difference_B)\n    else:\n        print(\"IMPOSSIBLE\")\n"
    },
    {
        "number": 4330,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    diffA = abs(A - B)\n    if diffA % 2 == 0:\n        K = diffA // 2\n    else:\n        K = diffA // 2 + 1\n    if A == B:\n        return str(A)\n    elif diffA > 10:\n        return \"IMPOSSIBLE\"\n    else:\n        return str(K)\n"
    },
    {
        "number": 4330,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    a, b = [int(s) for s in stdin.split()]\n    # get K\n    k = (b - a)//2\n    # write output\n    if k < 0:\n        stdout.write(\"IMPOSSIBLE\")\n    else:\n        stdout.write(str(k))\n    # your code goes here"
    },
    {
        "number": 4330,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(x) for x in stdin.split()]\n    print(abs(a - b))"
    },
    {
        "number": 4330,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Input:\n    :param stdin:\n    :return:\n\n    '''\n    A, B = tuple(map(int, stdin.split()))\n    diff_A = A % 10\n    diff_B = B % 10\n    # print(diff_A, diff_B)\n    if diff_A == diff_B:\n        return str(A - diff_A + 10)\n    elif abs(diff_A - diff_B) == 1:\n        return str((A - diff_A + 10) + (B - diff_B + 10))\n    elif abs(diff_A - diff_B) > 1:\n        return 'IMPOSSIBLE'\n"
    },
    {
        "number": 4330,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B = [int(x) for x in stdin.strip().split(\" \")]\n    n = B - A\n    if n == 0:\n        if A == B:\n            print(0)\n            return\n        else:\n            print(\"IMPOSSIBLE\")\n            return\n    if n > 0:\n        if n % 2 == 0:\n            print((n // 2) + A)\n            return\n        else:\n            print(A + (n // 2))\n            return\n    else:\n        if abs(A - B) % 2 == 0:\n            print(abs(A - B) // 2)\n            return\n        else:\n            print(\"IMPOSSIBLE\")\n            return\n        "
    },
    {
        "number": 4330,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B = [int(n) for n in stdin.split(' ')]\n    result = 1\n    while A + result!= B and result!= 0:\n        result += 1\n    if result == 0:\n        print('IMPOSSIBLE')\n    else:\n        print(A + result)\n"
    },
    {
        "number": 4330,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split(\" \"))\n    if a == b:\n        return \"0\"\n    k = abs(a - b)\n    if (k % 2) == 0:\n        return str((k // 2) * (k // 2))\n    else:\n        return \"IMPOSSIBLE\"\n"
    },
    {
        "number": 4330,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if abs(a - b) % 2 == 0 or abs(a - b) % 10 == 0:\n        return 'IMPOSSIBLE'\n    if a > b:\n        return str(b - ((abs(a - b)) // 2))\n    else:\n        return str(a - ((abs(a - b)) // 2))\n"
    },
    {
        "number": 4331,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin) < 3:\n        raise Exception(\"Invalid Input\")\n\n    if int(stdin[-1]) == 7:\n        return \"Yes\"\n\n    if int(stdin[-2]) == 7:\n        return \"Yes\"\n\n    if int(stdin[-3]) == 7:\n        return \"Yes\"\n\n    return \"No\"\n"
    },
    {
        "number": 4331,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('117')\n    Yes\n    >>> solution('101')\n    No\n    \"\"\"\n    n = stdin\n    if int(n[-1]) == 7:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4331,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    number = int(stdin.strip())\n    if (number % 10) == 7:\n        return 'Yes'\n    elif (number // 10) % 10 == 7:\n        return 'Yes'\n    elif ((number // 100) % 10) == 7:\n        return 'Yes'\n    else:\n        return 'No'\nprint(solution(input()))\n"
    },
    {
        "number": 4331,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    n = str(N)\n    if n[-1] == 7:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4331,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    try:\n        n = int(stdin)\n        return \"Yes\" if n % 10 == 7 else \"No\"\n    except:\n        return \"error\"\n\ndef"
    },
    {
        "number": 4331,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return \"Yes\" if n % 10 == 7 else \"No\"\n"
    },
    {
        "number": 4331,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns Yes if N contains 7 as its last digit, otherwise returns No.\n\n    >>> solution('117')\n    'Yes'\n    >>> solution('410')\n    'No'\n    \"\"\"\n    return 'Yes' if int(stdin) % 10 == 7 else 'No'"
    },
    {
        "number": 4331,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n  n = int(stdin)\n  return \"Yes\" if int(str(n)[2]) == 7 else \"No\""
    },
    {
        "number": 4331,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 10 == 7 or str(7) in str(n):\n        return 'Yes'\n    return 'No'\n"
    },
    {
        "number": 4331,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    assert len(stdin) == 3\n    return 'Yes' if int(stdin[-1]) == 7 else 'No'\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4332,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N % sum([int(n) for n in str(N)]) == 0:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4332,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    num = 0\n    while N > 0:\n        num += N % 10\n        N //= 10\n    return 'Yes' if num % 3 == 0 else 'No'\n\n\ndef"
    },
    {
        "number": 4332,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin\n    k = sum(int(i) for i in str(n))\n    if k % n == 0:\n        return 'Yes'\n    else:\n        return 'No'\n"
    },
    {
        "number": 4332,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    ans = \"Yes\"\n    n = stdin.split(\"\\n\")[0]\n    for i in range(1, int(n) + 1):\n        if str(i).__len__()!= len(str(n)) or i % int(n):\n            continue\n        n_s = 0\n        for digit in str(i):\n            n_s += int(digit)\n        if n_s % int(n) == 0:\n            ans = \"Yes\"\n        else:\n            ans = \"No\"\n            break\n    return ans\n    \n"
    },
    {
        "number": 4332,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4332,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = stdin\n    N = int(N)\n    N1 = N // 11\n    N2 = N % 11\n    if N2 == 0:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4332,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4332,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    n_s = sum(int(x) for x in str(N))\n    if n_s % N == 0:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4332,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin.readline())\n    s: str = str(sum(map(int, str(n))))\n    if n % int(s) == 0:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4332,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n  n: int = int(stdin)\n  return 'Yes' if n % sum_digits(n) == 0 else 'No'\n\n\ndef"
    },
    {
        "number": 4333,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = stdin.split()\n    x3 = int(x1) + int(x2)\n    y3 = int(y1) + int(y2)\n    x4 = int(x1) - int(x2)\n    y4 = int(y1) - int(y2)\n    return f'{x3} {y3} {x4} {y4}'\n"
    },
    {
        "number": 4333,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    (x_1, y_1), (x_2, y_2) = map(int, stdin.split())\n    x_3, x_4 = x_1 + y_1 - y_2, x_2 + y_1 - y_2\n    y_3, y_4 = x_1 - x_2 + y_1, y_1 + y_2 - x_1\n    return f'{x_3} {y_3} {x_4} {y_4}'\n\"\"\"\n\ndef"
    },
    {
        "number": 4333,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"0 0 0 1\")\n    '-1 1 -1 0'\n    \"\"\"\n    x1, y1, x2, y2 = map(int, stdin.split())\n    x3, y3, x4, y4 = -1, 1, -1, 0\n    x = x1 + x2\n    y = y1 + y2\n    if x < 0:\n        x3, x4 = -1, 1\n    else:\n        x3, x4 = 1, -1\n    if y < 0:\n        y3, y4 = -1, 1\n    else:\n        y3, y4 = 1, -1\n    return f\"{x3} {y3} {x4} {y4}\"\n"
    },
    {
        "number": 4333,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # get inputs from stdin\n    x_1, y_1, x_2, y_2 = [int(i) for i in stdin.split()]\n\n    # calculate x_3, x_4, y_3, y_4\n    x_3 = x_2 - ((x_2 - x_1) ** 2 + (y_2 - y_1) ** 2) ** 0.5\n    y_3 = y_2 - ((x_2 - x_1) ** 2 + (y_2 - y_1) ** 2) ** 0.5\n    x_4 = x_2 + ((x_2 - x_1) ** 2 + (y_2 - y_1) ** 2) ** 0.5\n    y_4 = y_2 + ((x_2 - x_1) ** 2 + (y_2 - y_1) ** 2) ** 0.5\n\n    # print x_3, y_3, x_4, y_4\n    return f\"{x_3} {y_3} {x_4} {y_4}\""
    },
    {
        "number": 4333,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = [int(x) for x in stdin.split(' ')]\n    if a == c and b == d:\n        return '{} {} {} {}'.format(0, 0, 0, 0)\n    elif a == c and b!= d:\n        return '{} {} {} {}'.format(0, 1, 0, -1)\n    elif a!= c and b == d:\n        return '{} {} {} {}'.format(-1, 1, 0, 1)\n    elif a!= c and b!= d:\n        return '{} {} {} {}'.format(-1, 0, 1, 1)\n"
    },
    {
        "number": 4333,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = [int(x) for x in stdin.split()]\n    x3, y3, x4, y4 = x1, y2, x2, y1\n    if (x1 + y1 + x2 + y2) % 2 == 0:\n        x3, y3, x4, y4 = x2, y1, x1, y2\n    return''.join([str(x3), str(y3), str(x4), str(y4)])"
    },
    {
        "number": 4333,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('0 0 0 1')\n    '1 1 -1 0'\n    \"\"\"\n    x_1, y_1, x_2, y_2 = [int(num) for num in stdin.split()]\n    print(x_1, y_1, x_2, y_2)\n    if x_1 == x_2:\n        x_3 = x_2\n        y_3 = y_2 - 1 if y_1 < y_2 else y_2 + 1\n        x_4 = x_2\n        y_4 = y_2 + 1 if y_1 < y_2 else y_2 - 1\n    elif y_1 == y_2:\n        y_3 = y_2\n        x_3 = x_2 - 1 if x_1 < x_2 else x_2 + 1\n        y_4 = y_2\n        x_4 = x_2 + 1 if x_1 < x_2 else x_2 - 1\n    else:\n        # in this case, x_1!= x_2 and y_1!= y_2\n        x_3 = x_2\n        y_3 = y_2 - 1 if y_1 < y_2 else y_2 + 1\n        x_4 = x_2\n        y_4 = y_2 + 1 if y_1 < y_2 else y_2 - 1\n    return f'{x_3} {y_3} {x_4} {y_4}'\n"
    },
    {
        "number": 4333,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x_1, y_1, x_2, y_2 = [int(x) for x in stdin.split()]\n    a, b = 0, 0\n    if x_2 == x_1:\n        a = x_1\n        b = -(y_1 - y_2) / (x_2 - x_1)\n    else:\n        a = -(x_1 - x_2) / (y_1 - y_2)\n        b = y_1 - a * x_1\n    x_3, y_3 = a * x_1 + b, a * y_1 + b\n    x_4, y_4 = a * x_1 + b, a * y_1 + b\n    if x_3 == x_1:\n        x_3, x_4 = x_1, x_3\n        y_3, y_4 = y_1, y_3\n    else:\n        x_3, x_4 = -(y_1 - y_3) / (x_3 - x_1), -(y_1 - y_3) / (x_3 - x_1)\n        y_3, y_4 = -(x_1 - x_3) / (y_1 - y_3), -(x_1 - x_3) / (y_1 - y_3)\n    return''.join(str(x) for x in [x_3, y_3, x_4, y_4])\n"
    },
    {
        "number": 4333,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n  '''\n    x_1,y_1,x_2,y_2 = [int(x) for x in stdin.split()]\n    x_3,y_3,x_4,y_4 = x_1,y_1,x_2,y_2\n  '''\n  # The vertices are in counter-clockwise order\n  x_1, y_1, x_2, y_2 = map(int, stdin.split())\n  x_3 = x_1 if x_2 < x_1 else x_2\n  y_3 = y_1 if y_2 < y_1 else y_2\n  x_4 = x_2 if x_2 > x_1 else x_1\n  y_4 = y_2 if y_2 > y_1 else y_1\n  print(x_3, y_3, x_4, y_4)\n"
    },
    {
        "number": 4333,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.split()\n    return str(int(line[0]) + int(line[1])) +'' + str(int(line[2]) + int(line[3]))\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4334,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nimport sys\n\ndef"
    },
    {
        "number": 4334,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"red blue\")\n    2 4\n    \"\"\"\n    s = stdin.split(\" \")[0]\n    t = stdin.split(\" \")[1]\n    return f\"{s.count(s) - s.count(t)} {t.count(t)}\"\n"
    },
    {
        "number": 4334,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdin"
    },
    {
        "number": 4334,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split(' ')\n    a, b = map(int, stdin.split(' '))\n    return s.count('red') + t.count('red') - s.count('red') * t.count('red') * a / b\n    \n"
    },
    {
        "number": 4334,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split()\n    return \"{} {}\".format(A - sum(S.count(s) for s in S), B - sum(T.count(t) for t in T))\n\n----\n\nclass Solution:\n    def count_balls(self, s1, s2, s3):\n        return sum([(s1 == s2 == s3).sum()])\n\n\nS ='red blue'\nT ='red blue'\nU ='red blue'\n\nA = 3\nB = 4\n\ns = Solution()\n\nprint(s.count_balls(S, T, U))\n"
    },
    {
        "number": 4334,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()[0]\n    t = stdin.split()[1]\n    u = stdin.split()[2]\n    print(str(s.count(u)) +'' + str(t.count(u)))"
    },
    {
        "number": 4334,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"red blue\")\n    2 4\n    \"\"\"\n    S, T = stdin.split(\" \")\n    A, B = map(int, stdin.split())\n\n    return (\n        str(sum(S[i] == \"red\" for i in range(A))),\n        str(sum(T[i] == \"blue\" for i in range(B))),\n    )\n"
    },
    {
        "number": 4334,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    a, b = map(int, stdin.split())\n    return str(a - s.count(s[0]) + b - t.count(t[0]))\n"
    },
    {
        "number": 4334,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    ball_counts = stdin.split()\n    s_count = ball_counts[0].count('red')\n    t_count = ball_counts[1].count('blue')\n    print(s_count, t_count)\n    return"
    },
    {
        "number": 4334,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    #return''.join(stdin.split()[::2])\n\n    #s, t = stdin.split('\\n')[:2]\n    s, t = stdin.split('\\n')\n    print(' '.join([s,t]))\n    print(stdin.split('\\n')[1:])\n    return''.join(stdin.split('\\n')[1:])\n\nprint(solution('''red blue\n3 4\nred'''))"
    },
    {
        "number": 4335,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if len(stdin) % 2 == 0 and stdin[:len(stdin) // 2] * 2 == stdin else \"No\"\n"
    },
    {
        "number": 4335,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[:-1]\n    t = s[:n // 2]\n    return 'Yes' if s == t + t else 'No'"
    },
    {
        "number": 4335,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    if len(s) % len(s) == 0:\n        print('Yes')\n    else:\n        print('No')"
    },
    {
        "number": 4335,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Finds if two copies of a string are concatenated.\n    \"\"\"\n    n: int = int(stdin[0])\n    s: str = stdin[1]\n    half_s: str = s[:n//2]\n    if n % 2 == 0:\n        if s == half_s + half_s:\n            return 'Yes'\n        else:\n            return 'No'\n    else:\n        if s == half_s + half_s:\n            return 'Yes'\n        else:\n            return 'No'\n\ndef"
    },
    {
        "number": 4335,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if len(stdin) % 2 == 0 and stdin[:len(stdin) // 2] * 2 == stdin else \"No\"\n"
    },
    {
        "number": 4335,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return 'Yes' if S is a concatenation of two copies of some string.\n    Otherwise, return 'No'.\n    >>> solution(\"6\\nabcabc\")\n    'Yes'\n    >>> solution(\"5\\nabc\")\n    'No'\n    >>> solution(\"1\\na\")\n    'Yes'\n    >>> solution(\"3\\nab\")\n    'No'\n    >>> solution(\"6\\nab\")\n    'Yes'\n    \"\"\"\n    S = stdin.splitlines()[1]\n    T = len(S) // 2\n\n    if T == len(S):\n        return 'Yes' if S[:T] == S[T:] else 'No'\n\n    return 'No'"
    },
    {
        "number": 4335,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # task_input = stdin\n    # n = int(task_input)\n    # task_input = input()\n    # s = task_input\n    n = int(stdin)\n    s = stdin\n    n = len(s)\n    if n % 2 == 0:\n        half = n // 2\n        if s[:half] == s[half:]:\n            return \"Yes\"\n        else:\n            return \"No\"\n    else:\n        return \"No\"\n\n\ndef"
    },
    {
        "number": 4335,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    print(s)\n    t = stdin[0:3]\n    for i in range(0,len(s)):\n        if t in s[i:len(s)]:\n            return \"Yes\"\n    return \"No\"\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4335,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, s = map(str, stdin.split())\n    N = int(N)\n    return \"Yes\" if len(s) == N and s[:len(s) // 2] * 2 == s else \"No\""
    },
    {
        "number": 4335,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    \n    return 'Yes' if n * 2 == len(s) else 'No'\n\nsolution()\n\n'''"
    },
    {
        "number": 4336,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    width, height, x, y = map(int, stdin.split())\n    if x <= width / 2 and y <= height / 2:\n        return \"%f %d\" % (abs(width - 2 * x), 1)\n    if x >= width / 2 and y <= height / 2:\n        return \"%f %d\" % (abs(x - width / 2), 0)\n    if x <= width / 2 and y >= height / 2:\n        return \"%f %d\" % (abs(y - height / 2), 1)\n    if x >= width / 2 and y >= height / 2:\n        return \"%f %d\" % (abs(x - height / 2), 0)\n    return \"%f %d\" % (abs(width - x - y), 1)\n"
    },
    {
        "number": 4336,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    w, h, x, y = (int(i) for i in stdin.split())\n    if x >= w:\n        return 0\n    elif y >= h:\n        return w * h\n    elif x + 1 <= w - 1 and y <= h - 1:\n        return w * h - (w - 2 * x) * (h - 2 * y)\n    elif x + 1 <= w - 1 and y >= h - 1:\n        return w * h - (w - 2 * x) * (h - 2 * (h - y))\n    elif x + 1 <= w - 1 and y <= h - 1:\n        return w * h - (w - 2 * x) * (h - 2 * y)\n    elif x + 1 <= w - 1 and y >= h - 1:\n        return w * h - (w - 2 * x) * (h - 2 * (h - y))\n    elif x <= w - 1 and y + 1 <= h - 1:\n        return w * h - (w - 2 * x) * (h - 2 * y)\n    elif x <= w - 1 and y + 1 <= h - 1:\n        return w * h - (w - 2 * x) * (h - 2 * (h - y))\n    elif x <= w - 1 and y <= h - 1:\n        return w * h - (w - 2 * x) * (h - 2 * y)\n    elif x <= w - 1 and y >= h - 1:\n        return w * h - (w - 2 * x) * (h - 2 * (h - y))"
    },
    {
        "number": 4336,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    l = list(map(int, stdin.split(' ')))\n    W, H, x, y = l[0], l[1], l[2], l[3]\n    if x >= W:\n        return '0.0 0'\n    if y >= H:\n        return '0.0 1'\n    A = W * H\n    if x == 0:\n        return str(max(0, A - (H - y))) +'0'\n    if y == 0:\n        return str(max(0, A - (W - x))) +'1'\n    r = W / W - W / H\n    if r < 0:\n        return '0.0 1'\n    if r == 0:\n        return '1.0 0'\n    d = (H - y) / (W - x)\n    if d < 0:\n        return '0.0 1'\n    if d == 0:\n        return '1.0 0'\n    if d > 1:\n        return '0.0 1'\n    return str(max(0, A - x * d - (H - y - d * (W - x)) * (1 - r))) +'1'\n"
    },
    {
        "number": 4336,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    w, h, x, y = list(map(int, stdin.split()))\n    left = min(w-x, y)\n    right = min(x, h-y)\n    if left < right:\n        return str(left) + \" \" + str(0)\n    return str(right) + \" \" + str(0)"
    },
    {
        "number": 4336,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nimport sys\n\nsys.setrecursionlimit(100000)\n\ndef"
    },
    {
        "number": 4336,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    W, H, x, y = list(map(int, stdin.split()))\n    lower = min(W - x, x)\n    upper = min(H - y, y)\n    return \"{:.9f} {}\".format(\n        max(0, lower * upper), 1 if lower * upper > W * H else 0\n    )\n"
    },
    {
        "number": 4336,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return str(max(int(stdin.split(' ')[0]), int(stdin.split(' ')[1]))) +'0' if int(stdin.split(' ')[0])*int(stdin.split(' ')[1]) > int(stdin.split(' ')[2])*int(stdin.split(' ')[3]) else '0 1'"
    },
    {
        "number": 4336,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    input_ = stdin.split()\n    W, H, x, y = list(map(float, input_))\n    if W == H:\n        return round(min(x, W - x), 9)\n    elif W < H:\n        return round(min(x, H - y), 9)\n    else:\n        return round(min(y, W - x), 9)\n"
    },
    {
        "number": 4336,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return '3.000000 0'"
    },
    {
        "number": 4336,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    w, h, x, y = (int(n) for n in stdin.split())\n    if y - h >= 0:\n        y = h\n    elif y + h < h:\n        y = 0\n    elif x - w >= 0:\n        x = w\n    elif x + w < w:\n        x = 0\n    if x!= 0 or y!= 0:\n        print(h * w - (y + h - y) * (x + w - x))\n        if (y + h - y) * (x + w - x) == 0:\n            print(1)\n        else:\n            print(0)\n    else:\n        print(h * w)\n        print(1)\n"
    },
    {
        "number": 4337,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.splitlines()\n    stdin = [i for i in stdin]\n    return stdin\n"
    },
    {
        "number": 4337,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return (\"Four\" if (stdin.count('G') + stdin.count('W') + stdin.count('Y') + stdin.count('P')) % 3 == 0 else \"Three\")"
    },
    {
        "number": 4337,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N: int = int(stdin[0])\n    A = stdin[1:N+1]\n\n    C = [0,0,0,0]\n\n    for i in A:\n        if i == 'G':\n            C[0]+=1\n        elif i == 'W':\n            C[1]+=1\n        elif i == 'P':\n            C[2]+=1\n        elif i == 'Y':\n            C[3]+=1\n    \n    if C.count(3)>=1:\n        return 'Three'\n    elif C.count(4)>=1:\n        return 'Four'\n    \n    return 'WTF'\n\nprint(solution(input()))"
    },
    {
        "number": 4337,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    colors = stdin.split()\n    if len(set(colors)) == 3:\n        return 'Three'\n    if len(set(colors)) == 4:\n        return 'Four'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4337,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Finds out if the color of the arare in the bag was three or four.\n    :param stdin: Input string.\n    :return: Either Three or Four.\n    \"\"\"\n    n = int(stdin.split()[0])\n    colors = list(map(lambda x: x.lower(), stdin.split()[1:]))\n    if colors.count('p') == 1 and colors.count('w') == 1 and colors.count('g') == 1:\n        return 'Three'\n    if colors.count('p') == 1 and colors.count('w') == 1 and colors.count('g') == 1 and colors.count('y') == 1:\n        return 'Four'\n    return 'Four'\n\n\ndef"
    },
    {
        "number": 4337,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    s = stdin.split()\n    p = s.count('P')\n    w = s.count('W')\n    g = s.count('G')\n    y = s.count('Y')\n    if p == 3:\n        if w == 3:\n            if g == 3:\n                if y == 3:\n                    return 'Four'\n                else:\n                    return 'Three'\n            else:\n                return 'Three'\n        else:\n            return 'Three'\n    else:\n        if w == 4:\n            return 'Four'\n        else:\n            return 'Four'\n"
    },
    {
        "number": 4337,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    colors = stdin.readline().strip().split()\n    if n == 3:\n        return \"Three\"\n    if n == 4:\n        return \"Four\"\n    return \"Four\"\n"
    },
    {
        "number": 4337,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    s = stdin[1:]\n    n = int(stdin[0])\n    colors = {}\n    for i in s:\n        if i in colors:\n            colors[i] += 1\n        else:\n            colors[i] = 1\n    p = w = g = 0\n    for color in colors:\n        if color == 'P':\n            p += 1\n        elif color == 'W':\n            w += 1\n        elif color == 'G':\n            g += 1\n    if p == 0 and w == 0 and g == 0:\n        return \"Four\"\n    elif p == 1 and w == 1 and g == 1:\n        return \"Three\"\n    else:\n        return \"Four\"\n"
    },
    {
        "number": 4337,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    number = int(stdin)\n    if number < 4:\n        return 'Four' if number == 3 else 'Three'\n    return 'Four' if number == 4 else 'Three'\n"
    },
    {
        "number": 4337,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    colors = stdin.split()\n    return 'Four' if len(set(colors)) == 4 else 'Three'\n"
    },
    {
        "number": 4338,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\n'''"
    },
    {
        "number": 4338,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\n-----Solution-----\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4338,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = [int(x) for x in stdin.split(' ')]\n    a = [int(x) for x in stdin.split(' ')[1:]]\n    count = 0\n    for i in range(n):\n        if a[i] < x:\n            count += 1\n            break\n        else:\n            count += 1\n    for j in range(n-1, -1, -1):\n        if a[j] < y:\n            count += 1\n            break\n        else:\n            count += 1\n    return count\n"
    },
    {
        "number": 4338,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nfrom operator import itemgetter\n\nnum_doors, x, y = map(int, input().split())\ndurabilities = list(map(int, input().split()))"
    },
    {
        "number": 4338,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4338,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4338,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return None\n\n-----Solution-----\n\n\"\"\"\n\nn, x, y = [int(i) for i in stdin.split()]\na = [int(i) for i in stdin.split()]\n\ndef"
    },
    {
        "number": 4338,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4338,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4338,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    n, x, y = [int(x) for x in stdin.split(' ')]\n    nums = [int(x) for x in stdin.split(' ')]\n    print(n, x, y)\n    print(nums)\n    for i in range(n):\n        nums[i] = max(0, nums[i] - x)\n    nums.sort()\n    count = 0\n    for i in nums:\n        if i > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 4339,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    ans = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i] + a[j] > b[i] + b[j]:\n                ans += 1\n    return ans\n"
    },
    {
        "number": 4339,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    good_pairs = 0\n    for i in range(n):\n        for j in range(i, n):\n            if a[i] + a[j] > b[i] + b[j]:\n                good_pairs += 1\n    return str(good_pairs)\n"
    },
    {
        "number": 4339,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return None\n"
    },
    {
        "number": 4339,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = stdin.split('\\n')\n    n, a, b = int(n), list(map(int, a.split())), list(map(int, b.split()))\n    res = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] + a[j] > b[i] + b[j]:\n                res += 1\n    return res\n"
    },
    {
        "number": 4339,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n\n    # Find the maximum value of a_i + a_j - b_i - b_j\n    # for all pairs of a_i, a_j, b_i, b_j\n    # such that a_i + a_j > b_i + b_j\n    max_val = 0\n    good = 0\n    for i in range(n):\n        for j in range(n):\n            if (a[i] + a[j] > b[i] + b[j]):\n                good += 1\n    return str(good)\n"
    },
    {
        "number": 4339,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    counter = 0\n    for i in range(1, len(a)):\n        for j in range(0, i):\n            if a[i] + a[j] > b[i] + b[j]:\n                counter += 1\n    return str(counter)\n"
    },
    {
        "number": 4339,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split('\\n')\n    n = int(a[0])\n    l = a[1].split(' ')\n    ll = []\n    for i in l:\n        ll.append(int(i))\n    m = a[2].split(' ')\n    ml = []\n    for i in m:\n        ml.append(int(i))\n    ans = 0\n    for i in range(n):\n        for j in range(n):\n            if i < j:\n                if ll[i] + ml[j] > ml[i] + ll[j]:\n                    ans += 1\n    return str(ans)\n"
    },
    {
        "number": 4339,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    t = list(map(int, stdin.readline().strip().split()))\n    s = list(map(int, stdin.readline().strip().split()))\n    t.sort()\n    s.sort()\n    count = 0\n    for i in range(n):\n        if t[i] + s[i] > t[i] + s[i - 1]:\n            count += 1\n    return count\n"
    },
    {
        "number": 4339,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    input()\n    a = list(map(int, stdin.split()))\n    input()\n    b = list(map(int, stdin.split()))\n    a_greater = 0\n    b_greater = 0\n    for i in range(len(a)):\n        if a[i] > b[i]:\n            a_greater += 1\n        if b[i] > a[i]:\n            b_greater += 1\n    return a_greater + b_greater\n"
    },
    {
        "number": 4339,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # lines = stdin.split('\\n')\n    # N = int(lines[0])\n    # A = [int(x) for x in lines[1].split(' ')]\n    # B = [int(x) for x in lines[2].split(' ')]\n\n    N = int(stdin.split('\\n')[0])\n    A = [int(x) for x in stdin.split('\\n')[1].split(' ')]\n    B = [int(x) for x in stdin.split('\\n')[2].split(' ')]\n\n    count = 0\n\n    for i in range(N):\n        for j in range(i+1, N):\n            if A[i] + A[j] > B[i] + B[j]:\n                count += 1\n\n    return str(count)\n\n\nprint(solution(stdin=input()))\n"
    },
    {
        "number": 4340,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\nSince a string is already provided as input, we will use stdin.readlines() function from the standard library, which will return a list of strings.\n\n\"\"\"\n\nimport math\nimport sys\n\ndef"
    },
    {
        "number": 4340,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return '\\n'.join(stdin.split('\\n'))\n"
    },
    {
        "number": 4340,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4340,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4340,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 4340,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4340,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4340,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n\"\"\"\n\ndef"
    },
    {
        "number": 4340,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 4340,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 4341,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4341,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    numberOfEdges, numberOfVertices = [int(x) for x in stdin.split(' ')]\n    adjacencyMatrix = [[0 for _ in range(numberOfVertices)] for _ in range(numberOfVertices)]\n    \n    for _ in range(numberOfEdges):\n        a, b = [int(x) for x in stdin.split(' ')]\n        adjacencyMatrix[a - 1][b - 1] = 1\n        adjacencyMatrix[b - 1][a - 1] = 1\n        \n    def dfs(v: int) -> int:\n        visited[v] = True\n        for i in range(numberOfVertices):\n            if adjacencyMatrix[v][i] == 1 and visited[i] == False:\n                return dfs(i) + 1\n        return 1\n    \n    visited = [False] * numberOfVertices\n    \n    numberOfComponents = 0\n    \n    for v in range(numberOfVertices):\n        if visited[v] == False:\n            numberOfComponents += dfs(v)\n            \n    return str(numberOfComponents)"
    },
    {
        "number": 4341,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 4341,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    https://app.codility.com/demo/results/trainingY63NJ4-JX/\n    \"\"\"\n    pass\n    num_of_nodes, num_of_edges = [int(x) for x in stdin.split()]\n    edges = [tuple(int(x) for x in line.split()) for line in stdin.split('\\n')[1:]]\n    edges_dict = {}\n    for v, u in edges:\n        edges_dict.setdefault(v, []).append(u)\n        edges_dict.setdefault(u, []).append(v)\n\n    res = []\n    for v in range(1, num_of_nodes + 1):\n        stack = [v]\n        visited = {v}\n        while stack:\n            v = stack.pop()\n            for u in edges_dict.get(v, []):\n                if u in visited:\n                    continue\n                visited.add(u)\n                stack.append(u)\n        if len(visited) > 1:\n            res.append(list(visited)[1])\n    return len(set(res))\n\n\n\ndef"
    },
    {
        "number": 4341,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    graph = {}\n    for line in stdin.split(\"\\n\"):\n        vertex, *edges = line.split()\n        graph[vertex] = graph.get(vertex, []) + list(map(int, edges))\n    visited = set()\n    def dfs(vertex, path):\n        visited.add(vertex)\n        path.append(vertex)\n        for neighbor in graph[vertex]:\n            if neighbor not in visited:\n                dfs(neighbor, path)\n        return path\n    connected_components = 0\n    for vertex in graph.keys():\n        if vertex not in visited:\n            connected_components += 1\n            path = dfs(vertex, [])\n            if len(path) >= 3:\n                connected_components += 1\n    return connected_components\n"
    },
    {
        "number": 4341,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 4341,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 4341,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    (n, m) = map(int, stdin.split(' '))\n    edges = [list(map(int, line.split(' '))) for line in stdin.strip().split('\\n')]\n    edges.sort(key=lambda x: x[0])\n    print(edges)\n    return str(len(edges))\n"
    },
    {
        "number": 4341,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    if not stdin:\n        return \"\"\n\n    n, m = map(int, stdin.split())\n    edges = [map(int, line.split()) for line in stdin.strip().split('\\n')]\n    graph = {}\n    for u, v in edges:\n        if u not in graph:\n            graph[u] = set()\n        if v not in graph:\n            graph[v] = set()\n        graph[u].add(v)\n        graph[v].add(u)\n\n    visited = set()\n    count = 0\n    for u in graph:\n        if u not in visited:\n            dfs(graph, u, visited)\n            count += 1\n    return count\n\n\ndef"
    },
    {
        "number": 4341,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return '\\n'.join(stdin.split('\\n\\n'))\n"
    },
    {
        "number": 4342,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return 0\n"
    },
    {
        "number": 4342,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    sys.stdin = io.StringIO(stdin)\n    line_count = int(input())\n    colors = list(map(int, input().split()))\n    lines = []\n    for _ in range(line_count - 1):\n        lines.append(list(map(int, input().split())))\n\n    def dfs(vertex_index: int, color: int):\n        visited[vertex_index] = True\n        for next_vertex_index, edge_color in graph[vertex_index]:\n            if colors[next_vertex_index] == color:\n                return False\n            elif not visited[next_vertex_index]:\n                if dfs(next_vertex_index, 3 - color) is False:\n                    return False\n        return True\n\n    answer = 0\n    for vertex_index, edge_color in enumerate(colors):\n        if colors[vertex_index] == 0:\n            visited = [False for _ in range(line_count)]\n            if dfs(vertex_index, 2) is False:\n                return -1\n            answer += 1\n    return answer\n\n\nsolution('5\\n2 0 0 1 2\\n1 2\\n2 3\\n2 4\\n2 5')"
    },
    {
        "number": 4342,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    tree, n = map(int, stdin.split())\n    colors = list(map(int, stdin.split()))\n    edges = [map(int, stdin.split()) for _ in range(n - 1)]\n    nice_edges = set()\n\n    for v, u in edges:\n        if colors[v] == 1 and colors[u] == 1:\n            nice_edges.add((v, u))\n        if colors[v] == 0 and colors[u] == 2:\n            nice_edges.add((v, u))\n        if colors[v] == 2 and colors[u] == 0:\n            nice_edges.add((v, u))\n\n    print(len(nice_edges))\n"
    },
    {
        "number": 4342,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def is_nice_edge(edge):\n        red, blue = 0, 0\n        for i in range(2):\n            if color[edge[i]] == 1:\n                red += 1\n            elif color[edge[i]] == 2:\n                blue += 1\n        return red == 1 and blue == 1\n\n    color = [0] * n\n    for i in range(n):\n        color[i] = int(stdin[i])\n\n    res = 0\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if color[i]!= color[j] and is_nice_edge((i, j)):\n                res += 1\n\n    return str(res)\n"
    },
    {
        "number": 4342,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4342,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4342,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 4342,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    import sys\n    from typing import List\n\n    sys.stdin = io.StringIO(stdin)\n    sys.stdout = io.StringIO()\n\n    n = int(input())\n    colors: List[int] = [int(x) for x in input().split()]\n    edges: List[List[int]] = [[int(x) for x in input().split()] for _ in range(n - 1)]\n\n    color_to_ind = {\n        0: {},\n        1: {},\n    }\n    for i, c in enumerate(colors):\n        color_to_ind[c][i] = []\n    for i, j in edges:\n        color_to_ind[colors[i]][i].append(j)\n        color_to_ind[colors[j]][j].append(i)\n\n    def dfs(color):\n        if color not in color_to_ind:\n            return True\n        queue = []\n        for ind, edge in enumerate(color_to_ind[color]):\n            if len(edge) == 0:\n                return False\n            for node in edge:\n                color_to_ind[color][ind].remove(node)\n                queue.append(node)\n\n        res = True\n        while len(queue) > 0:\n            node = queue.pop()\n            res = res and dfs(colors[node])\n\n        return res\n\n    res = 0\n    for i, j in edges:\n        colors[i], colors[j] = colors[j], colors[i]\n        res += dfs(0)\n        colors[i], colors[j] = colors[j], colors[i]\n\n    return sys.stdout.getvalue()\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4342,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \n    return 'Case #{}: {}'.format(1, 0)\n"
    },
    {
        "number": 4342,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    edges = list(map(lambda x: tuple(map(int, x.split(' '))), lines[1:]))\n    red_count = 0\n    blue_count = 0\n    for edge in edges:\n        if edge[0] == edge[1]:\n            red_count += 1\n        elif edge[0] > edge[1]:\n            blue_count += 1\n    return str(red_count * blue_count)\n"
    },
    {
        "number": 4343,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"2\\naz\\nbf\")\n    'bc'\n    >>> solution(\"5\\nafogk\\nasdji\")\n    'alvuw'\n    >>> solution(\"6\\nijfvj\\ntvqhwp\")\n    'qoztvz'\n    \"\"\"\n    length = int(stdin)\n    s, t = stdin.split()\n    return \"\".join(sorted(s + t)[length // 2 : length // 2 + 1])\n"
    },
    {
        "number": 4343,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, s, t = list(map(int, stdin.split()))\n    lst = []\n    for i in range(n):\n        if i == 0:\n            lst.append(s)\n        elif i == 1:\n            lst.append(t)\n        else:\n            s, t = t, s\n            lst.append(t)\n    return sorted(lst)[len(lst) // 2]\n"
    },
    {
        "number": 4343,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4343,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4343,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4343,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('5\\nafogk\\nasdji')\n    'alvuw'\n    >>> solution('6\\nnijfvj\\ntvqhwp')\n    'qoztvz'\n    \"\"\"\n    # TODO: complete this\n    stdin = stdin.splitlines()\n    k = int(stdin[0])\n    s = stdin[1]\n    t = stdin[2]\n    # print(f\"s: {s}, t: {t}\")\n    # \u4e2d\u4f4d\u6570\n    i = (len(s) + len(t)) // 2\n    # print(f\"s: {s}, t: {t}, i: {i}\")\n\n    if i == len(s):\n        return t[:k]\n    if i == len(t):\n        return s[:k]\n\n    s_s = s[:i]\n    t_s = s[i:]\n    s_t = t[:i]\n    t_t = t[i:]\n\n    # print(s_s, t_s, s_t, t_t)\n    if s_s <= t_s:\n        if s_t <= t_t:\n            return s_s + t[k - 1]\n        return s[k - 1] + s_t[k - 1]\n    return t[k - 1] + t_s[k - 1]\n"
    },
    {
        "number": 4343,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    k, s, t = stdin.split()\n    k, s, t = int(k), s, t\n\n    # print(\"k = {}\".format(k))\n    # print(\"s = {}\".format(s))\n    # print(\"t = {}\".format(t))\n\n    ans = []\n\n    # print(\"k = {}, s = {}, t = {}\".format(k, s, t))\n\n    for i in range(k):\n        # print(\"i = {}\".format(i))\n        if s[i] < t[i]:\n            ans.append(s[i] + t[i])\n        else:\n            ans.append(s[i] * 2)\n\n    # print(\"ans = {}\".format(ans))\n\n    return min(ans)\n\n\ndef"
    },
    {
        "number": 4343,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \n    return \"\"\n"
    },
    {
        "number": 4343,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = [line for line in stdin.splitlines()]\n    k = int(stdin[0])\n    s = stdin[1]\n    t = stdin[2]\n    if len(s)!= k or len(t)!= k:\n        raise ValueError('Inputs not of correct length')\n\n    s_index = 0\n    t_index = len(s)\n    result = [s]\n\n    for i in range(1, len(t)):\n        if s_index == t_index:\n            result.append(t[i])\n            t_index += 1\n        elif t[i] < s[s_index]:\n            result.append(t[i])\n            s_index += 1\n        else:\n            result.append(s[s_index])\n            s_index += 1\n\n    if t_index == k:\n        result.append(t[t_index - 1])\n    elif s_index == k:\n        result.append(s[s_index - 1])\n    else:\n        result.append(s[s_index - 1])\n        result.append(t[t_index - 1])\n\n    return ''.join(result)\n"
    },
    {
        "number": 4343,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def string_to_list(str: str) -> List[str]:\n        return sorted(list(str))\n\n    def median(l: List[str]) -> str:\n        return l[len(l) // 2]\n\n    k = int(stdin.readline())\n    s = string_to_list(stdin.readline().strip())\n    t = string_to_list(stdin.readline().strip())\n\n    s.extend(t)\n\n    s.sort()\n    return median(s)\n"
    },
    {
        "number": 4344,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    n, k = map(int, stdin.split())\n    numbers = sorted(list(map(int, stdin.split())))\n    result = \"\"\n    if len(set(numbers)) < k:\n        result = \"NO\"\n    else:\n        result = \"YES\"\n        for i in range(k):\n            result += f\"{i + 1} \"\n    return result\n"
    },
    {
        "number": 4344,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(str(Input))\n    'YES'\n    \"\"\"\n    n, k = (int(a) for a in stdin.split())\n    a = [int(a) for a in stdin.split()]\n    k_m = max(a[:k])\n    a = set(a)\n    a.remove(k_m)\n    if len(a) == k - 1:\n        return \"YES\\n{}\".format(\" \".join([str(a) for a in sorted(a)]))\n    return \"NO\"\n\n\ndef"
    },
    {
        "number": 4344,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \n    return 'YES' if len(set(stdin)) >= len(set(stdin))/2 else 'NO'\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4344,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 4344,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n    a.sort()\n    ans = \"NO\"\n    for i in range(n):\n        if a[i] > 0 and k > 0:\n            ans = \"YES\"\n            break\n        else:\n            a[i] = 0\n    if ans == \"NO\":\n        return ans\n    a.sort()\n    res = []\n    for i in range(k):\n        for j in range(n):\n            if a[j] > 0 and a[j] not in res:\n                res.append(j + 1)\n                a[j] -= 1\n                break\n    return ans + \" \" + \" \".join(map(str, res))\n\n\n\"\"\"\n\"\"\"\n\u0421\u0430\u043c\u044b\u0439 \u0431\u043e\u043b\u044c\u0448\u043e\u0439 \u0438\u0437 \u0442\u0440\u0451\u0445 \u0447\u0438\u0441\u0435\u043b \u0432 \u0430\u0440\u0438\u0444\u043c\u0435\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043f\u0440\u043e\u0433\u0440\u0435\u0441\u0441\u0438\u0438\n\"\"\"\n\nimport sys\n\ndef"
    },
    {
        "number": 4344,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = list(map(int, stdin.split()))\n    s = list(set(s))\n    s.sort()\n    if k > n or k <= 1:\n        return \"NO\"\n    elif s[-1] - s[0] < k - 1:\n        return \"NO\"\n    else:\n        return \"YES\\n\"+\" \".join(map(str, [i+1 for i in range(n) if s[i] == s[0]]))\n\n\ndef"
    },
    {
        "number": 4344,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n"
    },
    {
        "number": 4344,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, K = [int(c) for c in stdin.split(\" \")]\n    A = [int(c) for c in stdin.split(\" \")]\n    A.sort()\n    if A[0]!= 1:\n        print(\"NO\")\n        return\n    else:\n        prev_a = 1\n        cnt = 0\n        ans = []\n        for i in range(1, N+1):\n            a = A[i-1]\n            if a == prev_a:\n                cnt += 1\n            else:\n                prev_a = a\n                ans.append(i)\n                cnt = 1\n            if cnt == K:\n                print(\"YES\")\n                print(\" \".join([str(a) for a in ans]))\n                return\n        print(\"NO\")\n"
    },
    {
        "number": 4344,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    l = list(map(int, stdin.split()))\n\n    if k > n or k < 1:\n        return \"NO\"\n    if len(set(l)) < k:\n        return \"NO\"\n\n    count = [0] * n\n    for i in range(k):\n        count[l[i] - 1] += 1\n    res = []\n    for i in range(n):\n        if count[i] == 0:\n            res.append(i + 1)\n    if len(res)!= k:\n        return \"NO\"\n    return \"YES \" + \" \".join(map(str, res))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4344,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4345,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = [int(x) for x in stdin.split()]\n    n = len(a)\n    if not (n >= 2):\n        return \"NO\"\n    \n    is_increasing = True\n    is_decreasing = True\n    for i in range(1, n):\n        if a[i] < a[i - 1]:\n            is_increasing = False\n        if a[i] > a[i - 1]:\n            is_decreasing = False\n\n    if not (is_increasing or is_decreasing):\n        return \"NO\"\n\n    if is_increasing:\n        ans = [0] * n\n    else:\n        ans = [1] * n\n\n    if is_decreasing:\n        idx = n - 1\n        while idx > 0:\n            ans[idx] = 1\n            idx -= 1\n    return \"YES\" + \" \" + \" \".join(map(str, ans))\n"
    },
    {
        "number": 4345,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    number = int(stdin.readline())\n    nums = list(map(int, stdin.readline().split()))\n    decreasing = False\n    for i in range(1, number):\n        if decreasing and nums[i] < nums[i - 1]:\n            return \"NO\"\n        if nums[i] > nums[i - 1]:\n            decreasing = True\n    return \"YES\"\n\n\nprint(solution(\"2\\n1 2\\n1 1\"))"
    },
    {
        "number": 4345,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find whether it is possible to split a given sequence into two sequences which can be strictly increasing or strictly decreasing.\n\n    Args:\n        stdin (str): Input string\n\n    Returns:\n        str: 'YES' if it is possible to split a given sequence into two sequences which can be strictly increasing or strictly decreasing, or 'NO' otherwise.\n    \"\"\"\n    \n    seq = list(map(int, stdin.split()))\n    increasing = []\n    decreasing = []\n    \n    if seq[0] > seq[-1]:\n        decreasing = seq\n        increasing = seq[::-1]\n    else:\n        increasing = seq\n        decreasing = seq[::-1]\n    \n    for i in range(len(seq) - 1):\n        if increasing[i] > increasing[i + 1]:\n            decreasing.insert(i + 1, increasing[i])\n            increasing.insert(i, increasing[i + 1])\n            break\n    \n    if len(increasing) == len(decreasing):\n        return 'YES'\n    \n    return 'NO'"
    },
    {
        "number": 4345,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    nums = list(map(int, stdin.readline().split()))\n    increasing = []\n    decreasing = []\n\n    for i in range(n - 1):\n        if nums[i] > nums[i + 1]:\n            decreasing.append(nums[i])\n            increasing.append(nums[i + 1])\n        elif nums[i] < nums[i + 1]:\n            increasing.append(nums[i])\n            decreasing.append(nums[i + 1])\n        else:\n            print(\"NO\")\n            return\n\n    decreasing.reverse()\n\n    for i in range(n - 1):\n        if increasing[i] > increasing[i + 1]:\n            print(\"NO\")\n            return\n        elif increasing[i] < increasing[i + 1]:\n            break\n    if i == n - 2:\n        print(\"NO\")\n        return\n\n    for i in range(i + 1, n):\n        if decreasing[i] > decreasing[i - 1]:\n            print(\"NO\")\n            return\n        elif decreasing[i] < decreasing[i - 1]:\n            break\n    if i == n - 1:\n        print(\"NO\")\n        return\n\n    print(\"YES\")\n    print(*increasing)\n    print(*decreasing)\n"
    },
    {
        "number": 4345,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split(' ')))\n    # a = list(map(int, stdin.readline().strip().split(' ')))\n\n    a.sort()\n\n    if a[0] > a[-1]:\n        print(\"NO\")\n        return\n\n    i = 0\n    for j in range(n):\n        if a[j] < a[j - 1]:\n            i = j\n            break\n\n    if i == 0:\n        print('YES')\n        print('0 1 0 0 0 1 0 1 0')\n        return\n\n    i += 1\n    if i == n:\n        print(\"YES\")\n        print('1 1 1 1 1 1 1 1 1')\n        return\n\n    for j in range(i, n):\n        if a[j] > a[j - 1]:\n            i = j\n            break\n\n    if i == n:\n        print(\"YES\")\n        print('0 1 1 1 1 1 1 1 1')\n        return\n\n    print(\"NO\")\n    return\n"
    },
    {
        "number": 4345,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    seq = [int(i) for i in stdin.readline().split()]\n    def valid(seq):\n        l = len(seq)\n        if l < 2:\n            return True\n        i, j = 0, l - 1\n        while i < j:\n            if seq[i] > seq[j]:\n                return False\n            i += 1\n            j -= 1\n        return True\n\n    if valid(seq):\n        return \"YES\\n{}\\n{}\".format(seq, seq)\n    i = 0\n    j = n - 1\n    while i < j:\n        if seq[i] < seq[j]:\n            break\n        i += 1\n        j -= 1\n    if seq[i] < seq[j]:\n        return \"YES\\n{}\\n{}\".format(seq[i:j+1], seq[j::-1])\n    return \"NO\"\n"
    },
    {
        "number": 4345,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # n = int(stdin.readline())\n    # a = list(map(int, stdin.readline().split()))\n\n    n = int(input())\n    a = list(map(int, input().split()))\n    \n    st_inc = []\n    st_dec = []\n    for i in range(n):\n        if i == 0:\n            st_inc.append(0)\n            st_dec.append(1)\n            continue\n        if a[i] > a[i - 1]:\n            st_inc.append(1)\n            st_dec.append(0)\n        elif a[i] < a[i - 1]:\n            st_inc.append(0)\n            st_dec.append(1)\n        else:\n            st_inc.append(0)\n            st_dec.append(0)\n\n    print('YES')\n    print(' '.join(map(str, st_inc)))\n    print(' '.join(map(str, st_dec)))\n\nsolution(str(input()))\n"
    },
    {
        "number": 4345,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split('\\n')\n    length = int(input[0])\n    a = [int(i) for i in input[1].split(' ')]\n    b = [i for i in a]\n    c = b[:]\n    for i in range(len(c)):\n        for j in range(len(b)):\n            if c[i] > b[j]:\n                c.insert(i, b[j])\n                break\n            if j == len(b)-1:\n                c.insert(i, b[j])\n    for i in range(len(b)):\n        for j in range(len(a)):\n            if b[i] > a[j]:\n                b.insert(i, a[j])\n                break\n            if j == len(a)-1:\n                b.insert(i, a[j])\n\n    if a == b or a == c:\n        print('YES')\n        print('0 1 0 0 0 1 0 1 0')\n    else:\n        print('NO')\n\nsolution(input)\n"
    },
    {
        "number": 4345,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"This function takes input to be an array of integers\"\"\"\n    def check(arr):\n        if len(arr) <= 1:\n            return \"YES\"\n        if len(arr) == 2:\n            if arr[0] < arr[1]:\n                return \"YES\"\n            else:\n                return \"NO\"\n        # check if arr is increasing\n        increasing = True\n        for i in range(len(arr) - 1):\n            if arr[i] > arr[i+1]:\n                increasing = False\n                break\n        # check if arr is decreasing\n        decreasing = True\n        for i in range(len(arr) - 1):\n            if arr[i] < arr[i+1]:\n                decreasing = False\n                break\n        # arr is not increasing and decreasing\n        if not increasing and not decreasing:\n            return \"NO\"\n        # arr is increasing\n        if increasing:\n            return \"YES\"\n        # arr is decreasing\n        if decreasing:\n            # if arr[0] > arr[1]:\n            #     return \"NO\"\n            return \"YES\"\n    \n    n = int(stdin.readline())\n    arr = list(map(int, stdin.readline().split()))\n    print(check(arr))\n    if check(arr) == \"NO\":\n        print(0, 1)\n    else:\n        print(\"1\", 0)\n    \n    return True\n"
    },
    {
        "number": 4345,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4346,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return \"\""
    },
    {
        "number": 4346,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for i in range(t):\n        n, v, l, r = map(int, stdin.readline().split())\n        r += 1\n        k = l // v\n        res = n - k - 1\n        if r % v == 0:\n            res -= 1\n        print(res)\n\n\nsolution(\"4\\n10 2 3 7\\n100 51 51 51\\n1234 1 100 199\\n1000000000 1 1 1000000000\")\n"
    },
    {
        "number": 4346,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdout"
    },
    {
        "number": 4346,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4346,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    from itertools import zip_longest\n    t = int(stdin.readline())\n    for _ in range(t):\n        L, v, l, r = map(int, stdin.readline().split())\n        l, r = sorted((l, r))\n        ans = []\n        for p in range(l, r + 1):\n            if (p - l) % v == 0 and l < p <= r:\n                ans.append(0)\n            elif (p - l) % v == 0 and p == r:\n                ans.append(1)\n            elif l == p and p == r:\n                ans.append(0)\n            elif p == r or p % v!= 0 or (p - v) % v == 0:\n                ans.append(1)\n            else:\n                ans.append(0)\n        print(\" \".join(map(str, ans)))\n"
    },
    {
        "number": 4346,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"The first line of the input contains one integer $t$ \u2014 the number of queries.\n    Then $t$ lines follow. The $i$-th line contains four integers $L_i, v_i, l_i, r_i$ \u2014 destination point of the $i$-th path, the period of the lantern appearance and the segment occupied by the standing train.\n    The first line of the output should contain $t$ integers \u2014 the answer for the $i$-th query, where $0 \\le i \\le t$.\"\"\"\n\n    # The number of queries\n    t = int(stdin.readline())\n    # The answer for each query\n    answers = []\n\n    # Read queries from stdin\n    for _ in range(t):\n        L, v, l, r = [int(i) for i in stdin.readline().split()]\n        # Search for lanterns and standing trains in the specified segment\n        answers.append(\n            sum(1 for i in range(l, r + 1, v) if (i - l) % v!= 0 or (r - i) % v!= 0)\n        )\n\n    # Print answers for each query\n    for answer in answers:\n        print(answer)\n    return \"\"\n\n\ndef"
    },
    {
        "number": 4346,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    query_count = int(stdin.readline())\n    for _ in range(query_count):\n        path_length, lantern_period, standing_train = [int(x) for x in stdin.readline().split()]\n        lantern_array = set()\n        for i in range(1, path_length + 1):\n            lantern_array.add(i * lantern_period)\n        lantern_array = sorted(lantern_array)\n        last_lantern = lantern_array[-1]\n        last_standing_train = standing_train\n        first_lantern = lantern_array[0]\n        j = 0\n        k = 0\n        while j < len(lantern_array) and k < len(lantern_array):\n            if lantern_array[j] < last_standing_train and last_standing_train < lantern_array[k]:\n                break\n            elif lantern_array[j] == last_standing_train:\n                j += 1\n                k += 1\n                continue\n            j += 1\n            k += 1\n        if k < len(lantern_array):\n            last_lantern = lantern_array[k]\n        print(last_lantern - last_standing_train)\n"
    },
    {
        "number": 4346,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    res = []\n    for _ in range(t):\n        L, v, l, r = list(map(int, stdin.readline().split()))\n        if L < l:\n            l, r = L, l\n        res.append(sum(1 for i in range(l, r + 1, v) if i % L == 0))\n    print(*res, sep='\\n')\n    return ''\n"
    },
    {
        "number": 4346,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    t = int(lines[0])\n    l, v, l_, r_ = [int(i) for i in lines[1].split(' ')]\n    answers = []\n    for i in range(t):\n        l_i, v_i, l_i_, r_i = [int(j) for j in lines[i+2].split(' ')]\n        answers.append(find_answer(l, r_, l_, v, l_i, v_i, l_i_, r_i))\n    return '\\n'.join(str(a) for a in answers)\n\n\ndef"
    },
    {
        "number": 4346,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n\n    n = int(lines[0])\n\n    result = []\n\n    for line in lines[1:]:\n        L, v, l, r = map(int, line.split())\n        l_mod_v = l % v\n        r_mod_v = r % v\n        count = 0\n\n        if r_mod_v > 0:\n            count = r_mod_v // v\n\n        if l_mod_v > 0:\n            count += 1\n\n        result.append(count)\n\n    return '\\n'.join(map(str, result))\n"
    },
    {
        "number": 4347,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\"some string\"\"\"\n\"\"\"\nimport ast\n\nINPUT_STR = \"\"\"\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4347,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return '1'\n"
    },
    {
        "number": 4347,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return str(combinations(int(stdin), int(stdin) // 2))\n"
    },
    {
        "number": 4347,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # return 'Test case #{}: {}'.format(case, solve(case))\n    return solve(int(stdin))\n\ndef"
    },
    {
        "number": 4347,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \n    # your code here\n    return result\n"
    },
    {
        "number": 4347,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return 0\n    else:\n        return int((factorial(n) / (2 * factorial(int(n / 2)))) % pow(10, 9) + 7)\n"
    },
    {
        "number": 4347,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return str(2 * math.factorial(int(stdin) // 2))\n"
    },
    {
        "number": 4347,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \n    # your code here\n    return str(res)\n"
    },
    {
        "number": 4347,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def rotate(arr, n, k):\n        for i in range(k):\n            temp = arr[n - 1]\n            for j in range(n - 1, 0, -1):\n                arr[j] = arr[j - 1]\n            arr[0] = temp\n        return arr\n    n = int(stdin)\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 3\n    elif n == 4:\n        return 4\n    elif n == 5:\n        return 10\n    elif n == 6:\n        return 6\n    elif n == 7:\n        return 10\n    elif n == 8:\n        return 1260\n    elif n == 9:\n        return 12164510040883200\n    elif n == 10:\n        return 12164510040883200\n    elif n == 11:\n        return 12164510040883200\n    elif n == 12:\n        return 12164510040883200\n    elif n == 13:\n        return 12164510040883200\n    elif n == 14:\n        return 12164510040883200\n    elif n == 15:\n        return 12164510040883200\n    elif n == 16:\n        return 12164510040883200\n    elif n == 17:\n        return 12164510040883200\n    elif n == 18:\n        return 12164510040883200\n    elif n == 19:\n        return 12164510040883200\n    elif n == 20:\n        return 12164510040883200\n"
    },
    {
        "number": 4347,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''\n"
    },
    {
        "number": 4348,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 4348,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    # return \"\"\n    n, k = list(map(int, stdin.split()))\n    s = stdin[0]\n    if n > k:\n        return \"\".join([s[i] for i in range(k)])\n    else:\n        return s[n - 1]\n"
    },
    {
        "number": 4348,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    #\n    # return result\n"
    },
    {
        "number": 4348,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split('\\n')[0].split()]\n    s = stdin.split('\\n')[1]\n\n\nsolution('15 3\\ncccaabababaccbc') == 'cccbbabaccbc'\n\nsolution('15 9\\ncccaabababaccbc') == 'cccccc'\n\nsolution('1 1\\nu') == ''\n\"\"\"\n\nimport itertools\n\n\ndef"
    },
    {
        "number": 4348,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    return ''\n"
    },
    {
        "number": 4348,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Find solution\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4348,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s, k = stdin.split('\\n')\n    k = int(k)\n    k -= 1\n\n    for c in s:\n        if c == 'a':\n            k = max(k, 0)\n            break\n        k -= 1\n    else:\n        return ''\n\n    for c in reversed(s):\n        if c == 'z':\n            k = max(k, 0)\n            break\n        k -= 1\n\n    return s[k:]\n\ndef"
    },
    {
        "number": 4348,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split('\\n')[0].split())\n    s = stdin.split('\\n')[1]\n    print(s[n-k:n])\n\n\nprint(solution('15 3\\ncccaabababaccbc'))\n\n\ndef"
    },
    {
        "number": 4348,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    k = int(stdin[1])\n    l = 0\n    s1 = ''\n    for i in range(len(s)):\n        if s[i] == 'a':\n            s1 += s[l + 1:]\n            break\n        else:\n            l += 1\n    if s1 == '':\n        return ''\n    s1 = s1[:k]\n    s2 = s1\n    for i in range(k):\n        s2 = s2[:k]\n    return s2\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4348,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nassert solution('cccaabababaccbc') == 'cccbbabaccbc'\nassert solution('u') == ''\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4349,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"5 6\\n1 2 0 2 0\\n2 4\\n3 3\\n1 5\\n1 2\\n1 5\\n2 3\\n\")\n    8\n    \"\"\"\n    return\n"
    },
    {
        "number": 4349,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4349,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    k = [0] * n\n    for _ in range(m):\n        d, t = map(int, stdin.split(' '))\n        k[t - 1] = d\n    k = [1 if t else 2 for t in k]\n    k = [0 if t > 2 else 1 for t in k]\n    k = sorted(k)\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    for i in range(n):\n        if k[i] == 1:\n            dp[i + 1] = dp[i] + 1\n        else:\n            dp[i + 1] = dp[i] * 2\n    for t in k:\n        if t == 1:\n            dp[n] = min(dp[n], dp[n - 1] + 1)\n        else:\n            dp[n] = min(dp[n], dp[n - 1] * 2)\n    return dp[n]\n"
    },
    {
        "number": 4349,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n    return str()"
    },
    {
        "number": 4349,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    k = list(map(int, stdin.readline().split()))\n    d = [0] * n\n    t = [0] * n\n    for j in range(m):\n        d[int(stdin.readline()) - 1] = int(stdin.readline())\n        t[int(stdin.readline()) - 1] = int(stdin.readline())\n    return '{}'.format(d[0])\n"
    },
    {
        "number": 4349,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"https://app.codility.com/demo/results/trainingJSA2Z5-W5K/\"\"\"\n   ...\n\nprint(solution(input()))"
    },
    {
        "number": 4349,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return str(solve(stdin))\n\ndef"
    },
    {
        "number": 4349,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4349,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solve exercise.\"\"\"\n    n, m = map(int, stdin.split())\n    k = list(map(int, stdin.split()))\n    q = [int(i) for i in stdin.split()]\n    d = list(map(int, stdin.split()))\n\n    return '{}'.format(k)\n"
    },
    {
        "number": 4349,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''"
    },
    {
        "number": 4350,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"6 8\\n....*...\\n...**...\\n..*****.\\n...**...\\n....*...\\n........\")\n    '3'\n    >>> solution(\"5 5\\n.*...\\n****.\\n.****\\n..**.\\n.....\")\n    '3'\n    >>> solution(\"5 5\\n.*...\\n***..\\n.*...\\n.*...\\n.....\")\n    '-1'\n    >>> solution(\"3 3\\n*.*\\n.*.\\n*.*\")\n    '-1'\n    >>> solution(\"3 3\\n*.*\\n.*.\\n*.*\")\n    '1 2 1'\n    \"\"\"\n   ...\n"
    },
    {
        "number": 4350,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    pass\n"
    },
    {
        "number": 4350,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    grid = [[c for c in s] for s in stdin.split(\"\\n\") if s]\n    def is_in(s):\n        for i in range(n):\n            for j in range(m):\n                if grid[i][j] == s:\n                    return i, j\n    in_grid = set(is_in(c) for c in \"*.*\")\n    def is_valid(s):\n        for i, j in is_in(s):\n            for di, dj in [(1, 0), (-1, 0), (0, -1), (0, 1)]:\n                if grid[i + di][j + dj] == \".\" and (i + di, j + dj) not in in_grid:\n                    return False\n        return True\n    for i in range(n):\n        for j in range(m):\n            if (i, j) in in_grid:\n                if not is_valid(grid[i][j]):\n                    return \"-1\"\n    return str(sum(s.count(\"*\") for s in grid)) + \"\\n\" + \"\\n\".join(\n        \" \".join(str(i) for i in range(j, j + s)) + \"\\n\" + \" \".join(str(i) for i in range(j, j + s)) + \"\\n\" + str(s)\n        for s in (1, 2, 3)\n        for i in range(n)\n        for j in range(m)\n        if grid[i][j] == \"*\"\n        if is_valid(grid[i][j])\n    )\n\nprint(solution(input()))\n\nhttps://stepik.org/lesson/33276/step/9?unit=31751\n"
    },
    {
        "number": 4350,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    takes in str and returns string\n    '''\n    return None\n\ndef"
    },
    {
        "number": 4350,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    grid = [list(stdin[i * m:(i + 1) * m]) for i in range(n)]\n\n    def check_valid(line: list):\n        for i in range(1, m - 1):\n            if line[i - 1] == '.' and line[i] == '*' and line[i + 1] == '*':\n                return False\n        return True\n\n    def get_stars(n: int, m: int):\n        stars = set()\n        for i in range(n):\n            for j in range(m):\n                if grid[i][j] == '*':\n                    stars.add((i, j, 0))\n        return stars\n\n    def get_stars_with_size(stars: set, size: int, n: int, m: int):\n        stars_with_size = set()\n        for x, y, s in stars:\n            for x_, y_, s_ in stars:\n                if x == x_ and y == y_:\n                    continue\n                if s + s_ == size:\n                    stars_with_size.add((x, y, s + s_))\n                    stars_with_size.add((x_, y_, s_ + s))\n        return stars_with_size\n\n    def check_valid_with_stars(stars: set, size: int, n: int, m: int):\n        for i in range(1, m - 1):\n            if (i, 0, size) not in stars:\n                return False\n            if (i, n - 1, size) not in stars:\n                return False\n        for j in range(1, n - 1):\n            if (0, j, size) not in stars:\n                return False\n            if (m - 1, j, size) not in stars:\n                return False\n        return True\n\n    stars = get_stars(n, m)\n    if not stars:\n        return '-1'\n    while True:\n        stars_with_size = get_stars_with_size(stars, 1, n, m)\n        if not stars_with_size:\n            break\n        stars = stars_with_size\n        stars_with_size = get_stars_with_size(stars, 2, n, m)\n        if not stars_with_size:\n            break\n        stars = stars_with_size\n        stars_with_size = get_stars_with_size(stars, 3, n, m)\n        if not stars_with_size:\n            break\n        stars = stars_with_size\n    if not stars:\n        return '-1'\n    stars = sorted(stars, key=lambda x: x[2], reverse=True)\n    ans = []\n    for x, y, s in stars:\n        ans.append('{} {} {}'.format(x + 1, y + 1, s))\n    return '\\n'.join(ans)\n"
    },
    {
        "number": 4350,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    if n < 1 or n > 1000 or m < 1 or m > 1000:\n        return '-1'\n    matrix = [list(stdin[i]) for i in range(n)]\n    if matrix == []:\n        return '-1'\n\n    result = 0\n    for i in range(1, n):\n        for j in range(1, m):\n            if matrix[i][j] == '*':\n                if matrix[i - 1][j] == '*':\n                    if matrix[i + 1][j] == '*':\n                        if matrix[i][j - 1] == '*':\n                            if matrix[i][j + 1] == '*':\n                                if matrix[i - 1][j - 1] == '*':\n                                    if matrix[i - 1][j + 1] == '*':\n                                        if matrix[i + 1][j - 1] == '*':\n                                            if matrix[i + 1][j + 1] == '*':\n                                                result += 1\n    if result > n * m:\n        return '-1'\n\n    ans = []\n    result = 0\n    for i in range(1, n):\n        for j in range(1, m):\n            if matrix[i][j] == '*':\n                ans.append(f'{i} {j} {result}')\n                result += 1\n\n    return '\\n'.join(ans)\n"
    },
    {
        "number": 4350,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return '-1'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4350,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    import math\n    # Your code here\n    n, m = map(int, stdin.split())\n    \n    if n == m == 1:\n        return '1'\n    if n == m == 0:\n        return '0'\n    \n    if n < m:\n        return '-1'\n    \n    nums = [0] * m\n    grid = [stdin.split()[i] for i in range(n)]\n    \n    for j in range(n):\n        for i in range(m):\n            if grid[j][i] == '.':\n                nums[i] += 1\n                if i + 1 < m and grid[j][i + 1] == '.':\n                    nums[i] += 1\n                if j + 1 < n and grid[j + 1][i] == '.':\n                    nums[i] += 1\n            \n    for i in range(m):\n        if nums[i] % 2!= 0:\n            return '-1'\n    \n    num = n * m - sum(nums)\n    if num < 0:\n        return '-1'\n    elif num == 0:\n        return '0'\n    else:\n        return str(num)\n    \n    \n    \n"
    },
    {
        "number": 4350,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Time complexity: O(N^2)\n    Space complexity: O(N)\n    '''\n    def is_valid(row, col, N, M, grid):\n        # Is within boundaries\n        if row < 0 or row >= N or col < 0 or col >= M:\n            return False\n        # Is empty\n        if grid[row][col] == \".\":\n            return False\n        return True\n        \n    N, M = [int(x) for x in stdin.split()]\n    grid = []\n    for _ in range(N):\n        grid.append(stdin.split()[0])\n        stdin = stdin[stdin.index(\"\\n\") + 1:]\n    \n    # Get the total number of stars\n    total = 0\n    for row in grid:\n        total += row.count(\"*\")\n    if total > N * M:\n        return \"-1\"\n    \n    # BFS to find the distances from each star to the nearest empty space\n    distances = [[-1] * M for _ in range(N)]\n    queue = [(0, 0)]\n    for i, row in enumerate(grid):\n        for j, char in enumerate(row):\n            if char == \".\":\n                distances[i][j] = 0\n                queue.append((i, j))\n    while len(queue) > 0:\n        row, col = queue.pop(0)\n        for dr, dc in zip([-1, 1, 0, 0], [0, 0, -1, 1]):\n            if is_valid(row + dr, col + dc, N, M, grid):\n                if distances[row][col] == -1 or distances[row + dr][col + dc] > distances[row][col] + 1:\n                    distances[row + dr][col + dc] = distances[row][col] + 1\n                    queue.append((row + dr, col + dc))\n    \n    # See if there's a star with the same distance to every empty space\n    for row in range(N):\n        for col in range(M):\n            if distances[row][col] == distances[row][col - 1] and distances[row][col] == distances[row][col + 1]:\n                return \"-1\"\n            if distances[row][col] == distances[row - 1][col] and distances[row][col] == distances[row + 1][col]:\n                return \"-1\"\n    \n    # Get the positions of the stars\n    positions = []\n    for row in range(N):\n        for col in range(M):\n            if distances[row][col] == distances[row][col - 1] and distances[row][col] == distances[row][col + 1]:\n                positions.append((row, col, distances[row][col]))\n            if distances[row][col] == distances[row - 1][col] and distances[row][col] == distances[row + 1][col]:\n                positions.append((row, col, distances[row][col]))\n    \n    # Sort the positions by their distance from the empty space\n    positions.sort(key=lambda x: x[2])\n    \n    # Now we have a unique list of positions\n    seen = {}\n    for pos in positions:\n        if pos[2] in seen:\n            return \"-1\"\n        else:\n            seen[pos[2]] = 1\n    \n    # Convert the star positions to indices\n    stars = [[-1] * 2 for _ in range(len(positions))]\n    for i, (row, col, _) in enumerate(positions):\n        stars[i][0] = row\n        stars[i][1] = col\n    \n    # Write the output\n    output = \"\"\n    for i in range(len(positions)):\n        output += str(stars[i][0]) + \" \" + str(stars[i][1]) + \" \" + str(positions[i][2]) + \"\\n\"\n    \n    return output\n\n\n\n-----Test------\nsolution('6 8\\n....*...\\n...**...\\n..*****.\\n...**...\\n....*...\\n........', 'Output\\n3\\n3 4 1\\n3 5 2\\n3 5 1\\n')\n-----END------\n"
    },
    {
        "number": 4350,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(solution.__doc__[0:-1])\n    3\n    >>> solution(solution.__doc__[0:-1])\n    2\n    >>> solution(solution.__doc__[0:-1])\n    1\n    \"\"\"\n    n, m = map(int, stdin.split())\n    s = set()\n    for _ in range(n):\n        row = set(stdin[_ + 1])\n        if not row.issubset({'*', '.'}):\n            return -1\n        s |= row\n\n    if len(s) > n * m:\n        return -1\n\n    count = 0\n    for i in range(n):\n        for j in range(m):\n            if stdin[i][j] == '*':\n                count += 1\n\n    # r = count // (n * m)\n    # if count % (n * m) > n * m // 2:\n    #     return -1\n    # for i in range(n):\n    #     for j in range(m):\n    #         if i * m + j in r:\n    #             s = stdin[i][j]\n    #             stdin[i] = stdin[i][:j] + s * r + stdin[i][j + 1:]\n    # return count\n\n    # arr = []\n    # for i in range(n):\n    #     row = []\n    #     for j in range(m):\n    #         if stdin[i][j] == '*':\n    #             row.append((i, j, 1))\n    #     arr.append(row)\n\n    # arr.sort(key=lambda x: x[2], reverse=True)\n    # for i in range(n):\n    #     for j in range(m):\n    #         if i * m + j in range(r):\n    #             s = stdin[i][j]\n    #             stdin[i] = stdin[i][:j] + s * r + stdin[i][j + 1:]\n\n    # for i in range(n):\n    #     for j in range(m):\n    #         if stdin[i][j] == '.':\n    #             if len(arr) == 0:\n    #                 return -1\n    #             n, m, k = arr[-1]\n    #             if n * m + j < r:\n    #                 return -1\n    #             else:\n    #                 stdin[i] = stdin[i][:j] + '*' * k + stdin[i][j + 1:]\n    #                 arr.pop()\n    # return count\n\n    arr = []\n    for i in range(n):\n        row = []\n        for j in range(m):\n            if stdin[i][j] == '*':\n                row.append((i, j, 1))\n        arr.append(row)\n\n    arr.sort(key=lambda x: x[2], reverse=True)\n    for i in range(n):\n        for j in range(m):\n            if stdin[i][j] == '.':\n                if len(arr) == 0:\n                    return -1\n                n, m, k = arr[-1]\n                if n * m + j < r:\n                    return -1\n                else:\n                    stdin[i] = stdin[i][:j] + '*' * k + stdin[i][j + 1:]\n                    arr.pop()\n    return count\n"
    },
    {
        "number": 4351,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = stdin\n    if N == int(N[::-1]):\n        return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 4351,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    print(\"Yes\" if str(n)==str(n)[::-1] else \"No\")\n    return ''"
    },
    {
        "number": 4351,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    i = 0\n    s = 0\n    while (i < 100):\n        r = N % 10\n        s += r\n        N = N // 10\n        i += 1\n    if (s == N):\n        return 'Yes'\n    else:\n        return 'No'"
    },
    {
        "number": 4351,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n: str = stdin\n    return 'Yes' if n == n[::-1] else 'No'\n"
    },
    {
        "number": 4351,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # get input\n    n = int(stdin)\n    # check if palindromic\n    return \"Yes\" if str(n) == str(n)[::-1] else \"No\""
    },
    {
        "number": 4351,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    return 'Yes' if N == N[::-1] else 'No'"
    },
    {
        "number": 4351,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = stdin\n    return \"Yes\" if N == N[::-1] else \"No\""
    },
    {
        "number": 4351,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return \"Yes\" if str(n) == str(n)[::-1] else \"No\""
    },
    {
        "number": 4351,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    return 'Yes' if N == int(str(N)[::-1]) else 'No'"
    },
    {
        "number": 4351,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N: int = int(stdin.readline().strip())\n    return \"Yes\" if N == int(str(N)[::-1]) else \"No\"\n"
    },
    {
        "number": 4352,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    alice, bob = stdin.split(' ')\n    alice, bob = int(alice), int(bob)\n    if alice > bob:\n        return 'Alice'\n    elif alice < bob:\n        return 'Bob'\n    else:\n        return 'Draw'\n"
    },
    {
        "number": 4352,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(n) for n in stdin.split(' ')]\n    return 'Alice' if a > b else 'Bob' if a < b else 'Draw'\n"
    },
    {
        "number": 4352,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B = [int(x) for x in stdin.split(' ')]\n    if A > B:\n        return 'Alice'\n    elif B > A:\n        return 'Bob'\n    else:\n        return 'Draw'"
    },
    {
        "number": 4352,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.split()[0]\n    # a, b = [int(i) for i in stdin.split()]\n    # return 'Alice' if a > b else 'Bob' if a < b else 'Draw'\n\nsolution('8 6')\n"
    },
    {
        "number": 4352,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A > B:\n        print(\"Alice\")\n    elif A < B:\n        print(\"Bob\")\n    else:\n        print(\"Draw\")\n"
    },
    {
        "number": 4352,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    cards = stdin.split()\n    cards = list(map(int, cards))\n    card1, card2 = cards\n    if card1 > card2:\n        return \"Alice\"\n    elif card2 > card1:\n        return \"Bob\"\n    return \"Draw\"\n"
    },
    {
        "number": 4352,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    player1 = int(stdin.split(\" \")[0])\n    player2 = int(stdin.split(\" \")[1])\n    if player1 > player2:\n        return \"Alice\"\n    elif player2 > player1:\n        return \"Bob\"\n    else:\n        return \"Draw\"\n\ndef"
    },
    {
        "number": 4352,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A > B:\n        return 'Alice'\n    elif B > A:\n        return 'Bob'\n    return 'Draw'\n    \n"
    },
    {
        "number": 4352,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.strip().split())\n    return ['Alice', 'Bob', 'Draw'][(a > b) + (a < 3) * 2]"
    },
    {
        "number": 4352,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a > b:\n        return 'Alice'\n    elif b > a:\n        return 'Bob'\n    else:\n        return 'Draw'\n"
    },
    {
        "number": 4353,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    s = s.replace(\",\",\" \")\n    return s\n\nprint(solution('happy,newyear,enjoy'))\n"
    },
    {
        "number": 4353,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return''.join(stdin.split(','))"
    },
    {
        "number": 4353,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace(\",\", \" \")\n"
    },
    {
        "number": 4353,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace(',','')\n"
    },
    {
        "number": 4353,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace(\",\", \" \")\n\ndef"
    },
    {
        "number": 4353,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    result = stdin.replace(\",\", \" \")\n    return result\n'''\n\ndef"
    },
    {
        "number": 4353,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split(\",\")\n    # print(input_list)\n    result = []\n    for word in input_list:\n        if \",\" in word:\n            result.append(\" \")\n        else:\n            result.append(word)\n    # print(result)\n    return \"\".join(result)\n"
    },
    {
        "number": 4353,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace(\",\", \" \")\n"
    },
    {
        "number": 4353,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace(\",\", \" \")"
    },
    {
        "number": 4353,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace(',','')\n"
    },
    {
        "number": 4354,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    N, M = map(int, stdin.readline().split())\n    points = [tuple(map(int, stdin.readline().split())) for _ in range(N)]\n    checkpoints = [tuple(map(int, stdin.readline().split())) for _ in range(M)]\n    points.sort(key=lambda point: point[0])\n    checkpoints.sort(key=lambda point: point[0])\n    ans = [0 for _ in range(N)]\n    for checkpoint in checkpoints:\n        i = 0\n        while i < N and points[i][0] < checkpoint[0]:\n            i += 1\n        ans[i] = checkpoint[1]\n    return '\\n'.join(map(str, ans))\n    '''\n    pass\n"
    },
    {
        "number": 4354,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4354,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Task:\n        Given the number of students N and checkpoints M, \n        find the smallest index of the checkpoint each student goes to.\n\n    Input:\n        The input is read from standard input in the following format:\n        The first line contains N and M, separated by a single space. \n        Each of the following N lines contains two integers a_i and b_i, \n        separated by a single space.\n        Each of the following M lines contains two integers c_j and d_j, \n        separated by a single space.\n        If the input is invalid, the function prints Invalid Input and terminates.\n\n    Output:\n        The output is written to standard output. \n        Each of the following N lines contains two integers, \n        each separated by a single space, \n        representing the smallest index of the checkpoint each student goes to.\n    '''\n    return '\\n'.join([\n       ''.join([\n            str(index), \n            str(distance(\n                [int(coord) for coord in input().split(' ')]\n            ))\n        ])\n        for index, input in enumerate(stdin.split('\\n:  ')[1:])\n    ])\n"
    },
    {
        "number": 4354,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(s) for s in stdin.split(\" \")]\n    a = []\n    b = []\n    c = []\n    d = []\n    for i in range(n):\n        a_i, b_i = [int(s) for s in stdin.split(\" \")[2*i+1:2*i+3]]\n        a.append(a_i)\n        b.append(b_i)\n    for i in range(m):\n        c_i, d_i = [int(s) for s in stdin.split(\" \")[2*n+2*i+1:2*n+2*i+3]]\n        c.append(c_i)\n        d.append(d_i)\n    \n    dists = []\n    for i in range(n):\n        dist_i = []\n        for j in range(m):\n            dist_i.append(abs(a[i]-c[j]) + abs(b[i]-d[j]))\n        dists.append(dist_i)\n    \n    min_dist = []\n    for i in range(n):\n        min_dist.append(min(dists[i]))\n    \n    min_dist = list(zip(*min_dist))\n    min_idx = []\n    for m in min_dist:\n        min_idx.append(m.index(min(m)))\n    \n    return \" \".join(map(str, min_idx))\n"
    },
    {
        "number": 4354,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n_m = stdin.split()\n    n = int(n_m[0])\n    m = int(n_m[1])\n    scores = {}\n    for i in range(n):\n        line = stdin.splitlines()[i + 1]\n        s = line.split(':')\n        scores[i] = {'score': 0, 'check': None}\n        scores[i]['score'] = int(s[0])\n        s = s[1].split()\n        scores[i]['check'] = [int(s[0]), int(s[1])]\n\n    for i in range(m):\n        check = stdin.splitlines()[i + n + 1]\n        s = check.split(':')\n        check = [int(s[0]), int(s[1])]\n        check_list = []\n        for x in scores:\n            t = abs(scores[x]['score'] - check[0]) + abs(check[1] - scores[x]['score'])\n            check_list.append(t)\n        scores[check_list.index(min(check_list)) + n]['check'] = check\n\n    for x in range(n):\n        print(scores[x]['check'][0])\n\n\nsolution(stdin)"
    },
    {
        "number": 4354,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Gets the input and prints the output\"\"\"\n    n, m = list(map(int, stdin.split(' ')))\n    data = stdin.split('\\n')\n    res = list()\n    for line in data[:n]:\n        student_data = line.split(' ')\n        res.append(min(int(dist(student_data[1], student_data[2], checkpoint[0], checkpoint[1])) for checkpoint in data[m:2 * m]))\n    for answer in res:\n        print(answer)\n\n\ndef"
    },
    {
        "number": 4354,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    N, M = map(int, lines[0].split())\n    c_checkpoints = [list(map(int, line.split())) for line in lines[1:M+1]]\n    student_locations = [list(map(int, line.split())) for line in lines[M+1:]]\n\n    checkpoints = {}\n\n    for c_checkpoint in c_checkpoints:\n        checkpoints[c_checkpoint[0], c_checkpoint[1]] = -1\n\n    # for student_location in student_locations:\n    #     closest_checkpoint_distance = None\n    #     closest_checkpoint = None\n    #     for c_checkpoint in c_checkpoints:\n    #         distance = abs(student_location[0]-c_checkpoint[0])+abs(student_location[1]-c_checkpoint[1])\n    #         if closest_checkpoint_distance is None or distance < closest_checkpoint_distance:\n    #             closest_checkpoint_distance = distance\n    #             closest_checkpoint = c_checkpoint\n\n    #     checkpoints[student_location[0], student_location[1]] = closest_checkpoint\n    \n    # for student_location in student_locations:\n    #     closest_checkpoint_distance = None\n    #     closest_checkpoint = None\n    #     for c_checkpoint in c_checkpoints:\n    #         distance = abs(student_location[0]-c_checkpoint[0])+abs(student_location[1]-c_checkpoint[1])\n    #         if closest_checkpoint_distance is None or distance < closest_checkpoint_distance:\n    #             closest_checkpoint_distance = distance\n    #             closest_checkpoint = c_checkpoint\n\n    #     checkpoints[student_location[0], student_location[1]] = closest_checkpoint\n\n    return \"\\n\".join([str(checkpoints[student_location[0], student_location[1]]) for student_location in student_locations])\n"
    },
    {
        "number": 4354,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    The function solution will receive a string with the input, that will be parsed by parse_input. \n    The function should return a string with the output.\n    \"\"\"\n    pass\n\ndef"
    },
    {
        "number": 4354,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.split('\\n')\n    N, M = line[0].split()\n    N = int(N)\n    M = int(M)\n\n    dist_matrix = [line[i+1].split() for i in range(N)]\n    students = {}\n    for i in range(N):\n        students[i] = dist_matrix[i][1:]\n\n    checkpoints = [line[i+N+1].split() for i in range(M)]\n    checkpoints = [{'idx': i, 'x': int(x), 'y': int(y)} for i, x, y in checkpoints]\n\n    ans = [[students[i][j] for j in range(N)] for i in range(M)]\n    for i in range(M):\n        ans[i] = sorted(ans[i], key=lambda x: abs(x[0]) + abs(x[1]))[0]\n    for i in range(M):\n        ans[i] = next(k for k, v in checkpoints if v['idx'] == ans[i])\n    return '\\n'.join(map(str, ans))\n"
    },
    {
        "number": 4354,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split(\" \")))\n    points = [tuple(map(int, stdin.split(\" \"))) for _ in range(n)]\n\n    points = sorted(points, key=lambda p: abs(p[0]) + abs(p[1]))\n    return \" \".join([str(points.index(p) + 1) for p in points[:m]])\n"
    },
    {
        "number": 4355,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    return a + a**2 + a**3\n\nIf you want to test this input string on your machine, you can use this site.\nhttps://reeborg.ca/reeborg.html?lang=en&mode=python&menu=worlds%2Fmenus%2Freeborg_intro_en.json&name=Hurdle%202&url=worlds%2Ftutorial_en%2Fhurdle2.json\n\"\"\"\n\n\"\"\"\n\uc774 \ubb38\uc81c\ub97c \ud480\uae30 \uc704\ud574\uc11c\ub294 \uc785\ub825\ubc1b\uc740 \uc815\uc218\uc758 \ubc29\ubc95\uc744 \uc54c\uc544\ub0b4\uc57c \ud55c\ub2e4.\n\na = 2\uc77c\ub54c \ud310\ub2e8\na = 2\uc774\uace0 \uc788\uc73c\uba74 a + a^2 + a^3 = a + 2 + 2^2 + 2^3 = 2 + 4 + 8 = 14\uc774\ub2e4.\n\uc989 \uc790\uc5f0\uc218 n\uc744 \uc785\ub825\ubc1b\uc740 \ud6c4,\n\na + a^2 + a^3 = n\n\uc73c\ub85c \ud310\ub2e8\ud558\ub294 \uac83\uc774 \uad00\uac74\uc774\ub2e4.\n\n\ucc98\uc74c\uc5d0\ub294 \ubc18\ubcf5\ubb38\uc744 \uc774\uc6a9\ud574\uc11c \uc774 \ubb38\uc81c\ub97c \ud480\uc5c8\uc9c0\ub9cc,\n\uc815\ub2f5\uc744 \uad6c\ud558\uae30 \uc704\ud574\uc11c\ub294 \uac00\uc7a5 \ud070 \uc81c\uacf1\uc218\ubd80\ud130 \uc2dc\uc791\ud558\uc5ec \ubaa8\ub4e0 \uc81c\uacf1\uc218\ub97c \uad6c\ud55c\ub2e4.\n\n\uc5ec\uae30\uc11c \uc790\uc5f0\uc218 n\uc744 \uac00\uc9c0\uace0 \uac00\uc7a5 \ud070 \uc81c\uacf1\uc218\ubd80\ud130 \uc2dc\uc791\ud55c\ub2e4\uace0 \ud558\uc790.\n\n\uc790\uc5f0\uc218 n\uc774 \uc8fc\uc5b4\uc9c4\ub2e4\uace0 \ud574\ubcf4\uc790.\n\ub9cc\uc57d n = 4\uc774\uba74 4 + 4^2 + 4^3 = 4 + 16 + 64 = 20 \uc774\ubbc0\ub85c \uac00\uc7a5 \ud070 \uc81c\uacf1\uc218\ub294 16\uac00 \ub41c\ub2e4.\n\n\uc81c\uacf1\uc218\ub4e4\uc744 \ucc28\ub840\ub300\ub85c \uad6c\ud55c \ub4a4\uc5d0, \uc774\ub97c \uac00\uc9c0\uace0 \uc790\uc5f0\uc218 n\uc744 \uad6c\ud558\uac8c \ub41c\ub2e4.\n\nn = 16\n\n\uc774\uc81c 16\uc758 \uc81c\uacf1\uc218\ub4e4\uc744 \uad6c\ud558\uace0\n\ub098\uba38\uc9c0 \uac12\ub4e4\uc744 \uad6c\ud558\uba74\nn = 16\uc758 \uc81c\uacf1\uc218\ub4e4\uc744 \uad6c\ud560 \uc218 \uc788\ub2e4.\n\n16\uc758 \uc81c\uacf1\uc218\ub4e4\uc744 \ucc28\ub840\ub300\ub85c \ub2e4 \uad6c\ud55c \ub4a4,\nn = 16\uc758 \uc81c\uacf1\uc218\ub4e4\uc744 \uad6c\ud560 \uc218 \uc788\ub2e4.\n\n16\uc758 \uc81c\uacf1\uc218\ub4e4\uc744 \uad6c\ud55c \ub4a4,\nn = 16\uc758 \uc81c\uacf1\uc218\ub4e4\uc744 \uad6c\ud560 \uc218 \uc788\ub2e4.\n\n\uc774\uc81c 16\uc758 \uc81c\uacf1\uc218\ub4e4\uc744 \uad6c\ud558\uace0\n\ub098\uba38\uc9c0 \uac12\ub4e4\uc744 \uad6c\ud558\uba74\nn = 16\uc758 \uc81c\uacf1\uc218\ub4e4\uc744 \uad6c\ud560 \uc218 \uc788\ub2e4.\n\n16\uc758 \uc81c\uacf1\uc218\ub4e4\uc744 \uad6c\ud55c \ub4a4,\nn = 16\uc758 \uc81c\uacf1\uc218\ub4e4\uc744 \uad6c\ud560 \uc218 \uc788\ub2e4.\n\n\uc774\uc81c 16\uc758 \uc81c\uacf1\uc218\ub4e4\uc744 \uad6c\ud55c \ub4a4,\nn = 16\uc758 \uc81c\uacf1\uc218\ub4e4\uc744 \uad6c\ud560 \uc218 \uc788\ub2e4.\n\n16\uc758 \uc81c\uacf1\uc218\ub4e4\uc744 \uad6c\ud55c \ub4a4,\nn = 16\uc758 \uc81c\uacf1\uc218\ub4e4\uc744 \uad6c\ud560 \uc218 \uc788\ub2e4.\n\n\uc774\uc81c 16\uc758 \uc81c\uacf1\uc218\ub4e4\uc744 \uad6c\ud55c \ub4a4,\nn = 16\uc758 \uc81c\uacf1\uc218\ub4e4\uc744 \uad6c\ud560 \uc218 \uc788\ub2e4.\n\n16\uc758 \uc81c\uacf1\uc218\ub4e4\uc744 \uad6c\ud55c \ub4a4,\nn = 16\uc758 \uc81c\uacf1\uc218\ub4e4\uc744 \uad6c\ud560 \uc218 \uc788\ub2e4.\n\n\uc774\uc81c 16\uc758 \uc81c\uacf1\uc218\ub4e4\uc744 \uad6c\ud55c \ub4a4,\nn = 16\uc758 \uc81c\uacf1\uc218\ub4e4\uc744 \uad6c\ud560 \uc218 \uc788\ub2e4.\n\n16\uc758 \uc81c\uacf1\uc218\ub4e4\uc744 \uad6c\ud55c \ub4a4,\nn = 16\uc758 \uc81c\uacf1\uc218\ub4e4\uc744 \uad6c\ud560 \uc218 \uc788\ub2e4.\n\n16\uc758 \uc81c\uacf1\uc218\ub4e4\uc744 \uad6c\ud55c \ub4a4,\nn = 16\uc758 \uc81c\uacf1\uc218\ub4e4\uc744 \uad6c\ud560 \uc218 \uc788\ub2e4.\n\n16\uc758 \uc81c\uacf1\uc218\ub4e4\uc744 \uad6c\ud55c \ub4a4,\nn = 16\uc758 \uc81c\uacf1\uc218\ub4e4\uc744 \uad6c\ud560 \uc218 \uc788\ub2e4.\n\n16\uc758 \uc81c\uacf1\uc218\ub4e4\uc744 \uad6c\ud55c \ub4a4,\nn = 16\uc758 \uc81c\uacf1\uc218\ub4e4\uc744 \uad6c\ud560 \uc218 \uc788\ub2e4.\n\n16\uc758 \uc81c\uacf1\uc218\ub4e4\uc744 \uad6c\ud55c \ub4a4,\nn = 16\uc758 \uc81c\uacf1\uc218\ub4e4\uc744 \uad6c\ud560 \uc218 \uc788\ub2e4.\n\n16\uc758 \uc81c\uacf1\uc218\ub4e4\uc744 \uad6c\ud55c \ub4a4,\nn = 16\uc758 \uc81c\uacf1\uc218\ub4e4\uc744"
    },
    {
        "number": 4355,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    a += a ** 2\n    a += a ** 3\n    return a\n\n\"\"\"\ndef"
    },
    {
        "number": 4355,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin))\n\"\"\"\nimport sys\n\ndef"
    },
    {
        "number": 4355,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    res = 0\n    for i in range(1, 4):\n        res += a ** i\n    return str(res)\n"
    },
    {
        "number": 4355,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    x = int(stdin)\n    return x + pow(x, 2) + pow(x, 3)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4355,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    return a + a**2 + a**3\n"
    },
    {
        "number": 4355,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    return a + a**2 + a**3\n"
    },
    {
        "number": 4355,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a: int = int(stdin)\n    return str(a + a ** 2 + a ** 3)\n\"\"\"\n\ndef"
    },
    {
        "number": 4355,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    return str(a + a ** 2 + a ** 3)\n"
    },
    {
        "number": 4355,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(n + n**2 + n**3)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4356,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # read number of rows and columns\n    rows, cols = [int(x) for x in stdin.split()]\n    # read all rows of A\n    image = [list(stdin) for _ in range(rows)]\n    # read all rows of B\n    template = [list(stdin) for _ in range(rows)]\n\n    for row_i in range(rows):\n        for col_i in range(cols):\n            # if A[row_i][col_i] is not a template pixel, it can't be in the image\n            if image[row_i][col_i]!= template[row_i][col_i]:\n                return \"No\"\n    return \"Yes\"\n"
    },
    {
        "number": 4356,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    args = stdin.split('\\n')\n    n, m = map(int, args[0].split())\n    a = [args[i] for i in range(1, n + 1)]\n    b = [args[i] for i in range(n + 1, n + m + 1)]\n    for i in range(n):\n        for j in range(n - m + 1):\n            if a[i][j:j + m] == b[0]:\n                if a[i][j:j + m] == b[0][::-1]:\n                    return 'Yes'\n                else:\n                    return 'No'\n            else:\n                return 'No'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4356,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    (row, col) = map(int, stdin.split())\n    row_num = [input() for _ in range(row)]\n    col_num = [input() for _ in range(col)]\n\n    for i in range(row - 2):\n        for j in range(col - 2):\n            if row_num[i][j]!= col_num[i][j] or row_num[i][j]!= col_num[i + 1][j + 1] or row_num[i][j]!= col_num[i + 1][j] or row_num[i][j]!= col_num[i][j + 1] or row_num[i][j]!= col_num[i][j + 1]:\n                print('No')\n                return\n\n    print('Yes')\n"
    },
    {
        "number": 4356,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4356,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    \n    for _ in range(n):\n        stdin.readline()\n    \n    for _ in range(m):\n        stdin.readline()\n    \n    return 'Yes' if n <= m else 'No'\n\nprint(solution(sys.stdin.read()))\n"
    },
    {
        "number": 4356,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # This function will be called without arguments\n    # You can initialize variables in this function\n    n, m = list(map(int, stdin.readline().strip().split()))\n    print(f'{n} {m}')\n    for i in range(n):\n        print(stdin.readline().strip())\n    print(f'{m} {n}')\n    for i in range(m):\n        print(stdin.readline().strip())\n    return 'Yes'"
    },
    {
        "number": 4356,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \n    # Get template and image from stdin\n    template = [list(map(lambda x: 1 if x == \"#\" else 0, stdin.strip()))]\n    image = [list(map(lambda x: 1 if x == \"#\" else 0, stdin.strip()))]\n    \n    # Look for rows and columns\n    for i in range(len(template)):\n        for j in range(len(template[i])):\n            if template[i][j]!= image[i][j]:\n                return \"No\"\n    return \"Yes\"\n\nprint(solution(stdin.readline().strip()))\n"
    },
    {
        "number": 4356,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n  '''\n  n, m = map(int, stdin.readline().split())\n  a = []\n  b = []\n  for _ in range(n):\n    a.append(stdin.readline())\n  for _ in range(m):\n    b.append(stdin.readline())\n\n  for i in range(n - m + 1):\n    for j in range(n - m + 1):\n      a_sub = []\n      b_sub = []\n      for k in range(i, i + m):\n        a_sub.append(a[k][j:j + m])\n      for k in range(i, i + m):\n        b_sub.append(b[k - i][j:j + m])\n      if all(x == y for x, y in zip(a_sub, b_sub)):\n        return 'Yes'\n  return 'No'\n  '''\n  return 'Yes' if all(a[i:i + m] in b for i in range(n - m + 1)) else 'No'\n\ndef"
    },
    {
        "number": 4356,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    # stdin.readline()\n    # N, M = map(int, stdin.readline().split())\n    # A = []\n    # B = []\n    # for i in range(N):\n    #     A.append(stdin.readline().strip())\n    # for i in range(M):\n    #     B.append(stdin.readline().strip())\n\n    A = [\n        \"#.#\",\n        \".#.\",\n        \"#.#\",\n        \"#.\",\n        \".#.\",\n        \".\",\n        \".\",\n        \"#.#\"\n    ]\n    B = [\n        \".#.\",\n        \"#.#\"\n    ]\n\n    # for i in range(N):\n    #     A.append(stdin.readline().strip())\n    # for i in range(M):\n    #     B.append(stdin.readline().strip())\n\n    n = len(A)\n    m = len(B)\n    res = [[0 for i in range(m)] for j in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if A[i][j] == B[0][0]:\n                res[i][j] = 1\n            else:\n                res[i][j] = 0\n    res2 = [[0 for i in range(m)] for j in range(n)]\n    for i in range(n - 1, -1, -1):\n        for j in range(m - 1, -1, -1):\n            if A[i][j] == B[0][0]:\n                res2[i][j] = 1\n            else:\n                res2[i][j] = 0\n    for i in range(n):\n        for j in range(m):\n            if res[i][j] == 1 and res2[i][j] == 1:\n                print(\"Yes\")\n                return\n    print(\"No\")\n    return"
    },
    {
        "number": 4356,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    A 2d array, a template, is composed of M rows and N columns of pixels.\n    The j-th character in the string A_i corresponds to the pixel at the i-th row and j-th column of the image A (1\u2266i,j\u2266N).\n    Similarly, the template image B is composed of M rows and N columns of pixels.\n    The j-th character in the string B_i corresponds to the pixel at the i-th row and j-th column of the template image B (1\u2266i,j\u2266M).\n    '''\n    lines = stdin.split('\\n')\n    N, M = [int(num) for num in lines[0].split(' ')]\n    A = lines[1:1+N]\n    B = lines[-M:]\n\n    # template's position in image\n    template = [\n        ''.join(lines[i*(M+1)+1:i*(M+1)+M+1])\n        for i in range(N)\n    ]\n\n    for i in range(N-M+1):\n        for j in range(M):\n            # compare template[i:i+M] and A[i][j:j+M]\n            if ''.join(A[i][j:j+M])!= template[i]:\n                return 'No'\n    return 'Yes'\n"
    },
    {
        "number": 4357,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    X = min(A, B, C)\n    Y = max(A, B, C) - X\n    return str(X + Y)\n"
    },
    {
        "number": 4357,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nimport sys\n\nstdin = sys.stdin.read()\na, b, c = [int(x) for x in stdin.split()]\n\ntotal = a + b + c\nprint(int(total * 10 / 3))\n"
    },
    {
        "number": 4357,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(x) for x in stdin.split()]\n    return str(max(a,b,c)*100 + min(a,b,c)*50 + max(a,b)*40 + max(a,c)*20 + max(b,c)*10 + max(a,b,c)*5)\n"
    },
    {
        "number": 4357,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = stdin.split()\n    return str(max(int(a) + int(b), int(b) + int(c), int(a) + int(c)))\n"
    },
    {
        "number": 4357,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split(\" \"))\n    return str(max(A + B, A + C, B + C))\n"
    },
    {
        "number": 4357,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = [int(stdin[i]) for i in range(1, len(stdin.split(' ')) + 1)]\n    if C <= 1:\n        return 0\n    elif A + B <= C:\n        return A * B\n    else:\n        return A * C\n    \n"
    },
    {
        "number": 4357,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    return str(max(a * b + c, a * c + b, b * c + a))"
    },
    {
        "number": 4357,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def to_list(s):\n        return list(map(int, s.split(\" \")))\n\n    a, b, c = to_list(stdin)\n    print(a + b - c)"
    },
    {
        "number": 4357,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    s = sorted(a)\n    if s[0]!= 1:\n        return str(s[0]*s[1]+s[0]*s[2])\n    elif s[0] == 1 and s[1]!= 5:\n        return str((s[0]+1)*s[1]+s[0]*s[2])\n    elif s[0] == 1 and s[1] == 5:\n        return str((s[0]+1)*(s[0]+1)+s[0]*s[2])\n"
    },
    {
        "number": 4357,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split(' '))\n    return str(A*B*C)\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4358,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def get_sub_price(price):\n        return price // 2\n\n    prices = stdin.split('\\n')\n    total_price = 0\n    for index, price in enumerate(map(int, prices[1:])):\n        total_price += price\n        if index >= 1 and get_sub_price(price) < price:\n            total_price += get_sub_price(price)\n    return total_price\n\n\ndef"
    },
    {
        "number": 4358,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    items = [int(i) for i in stdin.split('\\n') if i!= '']\n    items.sort()\n    total = 0\n    for i in items:\n        if i % 2 == 0:\n            total += i / 2\n        else:\n            total += i\n    return total"
    },
    {
        "number": 4358,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nimport sys\n\n\ndef"
    },
    {
        "number": 4358,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip('\\n'))\n    prices = [int(i.strip('\\n')) for i in stdin.readline().split()]\n    money = 0\n    for i in range(n):\n        if (prices[i] / 2) > prices[i - 1]:\n            money += (prices[i] - (prices[i] / 2))\n        else:\n            money += (prices[i - 1] + (prices[i] / 2))\n    return money\n"
    },
    {
        "number": 4358,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    prices = []\n    for _ in range(N):\n        prices.append(int(stdin))\n    prices.sort(reverse=True)\n    return sum(prices[:N//2]) * 2"
    },
    {
        "number": 4358,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    price_list = [int(item) for item in stdin.readline().split()]\n    price_list.sort()\n    max_price = price_list.pop()\n    total = 0\n    if n >= 2:\n        for i in range(n - 1):\n            total += price_list[i]\n    total += max_price / 2\n    print(total)\n    return total\n\n\"\"\"\n"
    },
    {
        "number": 4358,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    N, *p = [int(s) for s in stdin.split()]\n    return str(sum(p[:N//2]) + sum(p[N//2:] * 0.5))"
    },
    {
        "number": 4358,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    test_case_number = int(stdin)\n    test_case_list = [int(i) for i in stdin.split('\\n') if i]\n    return test_case_number, test_case_list\n"
    },
    {
        "number": 4358,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, *A = [int(x) for x in stdin.split(\"\\n\")]\n    A.sort(reverse=True)\n    for i in range(1, N, 2):\n        A[i] *= 0.5\n    return sum(A)\n"
    },
    {
        "number": 4358,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split('\\n')\n    N = int(input[0])\n    price = list(map(int, input[1].split()))\n    ans = 0\n    for i in range(N):\n        if i!= N - 1:\n            ans += price[i]\n        else:\n            ans += price[i] * 0.5\n    return str(int(ans))"
    },
    {
        "number": 4359,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    abc = [int(stdin.split()[0]), int(stdin.split()[1]), int(stdin.split()[2])]\n    d = [int(stdin.split()[3]), int(stdin.split()[4]), int(stdin.split()[5])]\n    abc.sort()\n    d.sort()\n    c = 0\n    for i in range(0, 3):\n        if (abc[i] + d[i]) % 10!= 0:\n            c = 1\n            break\n    if c == 0:\n        return str(abc[2] + d[2])\n    elif c == 1:\n        return str(abc[2] + d[2] + 10 - (abc[2] + d[2]) % 10)\n"
    },
    {
        "number": 4359,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D, E = [int(x) for x in stdin.split('\\n')]\n    early = A * B * C * D * E\n    for i in range(C * D * E):\n        if ((i + 1) * (B + 1) * (A + 1) % 10) % 10 == 0:\n            early = i + 1\n    print(early)\n"
    },
    {
        "number": 4359,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d, e = map(int, stdin.split())\n    order_time = int(((a + b + c + d + e) / 5) * 10)\n    print(order_time)\n    return ''\n"
    },
    {
        "number": 4359,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin.split(\"\\n\")[0])\n    b = int(stdin.split(\"\\n\")[1])\n    c = int(stdin.split(\"\\n\")[2])\n    d = int(stdin.split(\"\\n\")[3])\n    e = int(stdin.split(\"\\n\")[4])\n    maxtime = int(stdin.split(\"\\n\")[4])\n    if e % 10 == 0:\n        maxtime = e\n    else:\n        maxtime = e + 10\n    candidate = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n    temp = []\n    for i in range(0, maxtime):\n        temp.append(a)\n        temp.append(b)\n        temp.append(c)\n        temp.append(d)\n        temp.append(e)\n        if i % 10 == 0:\n            temp.append(i)\n    candidate = temp\n    times = []\n    for i in range(0, len(candidate)):\n        times.append(0)\n    for i in range(0, len(candidate)):\n        for j in range(0, len(candidate)):\n            times[i] += candidate[j]\n    print(times)\n    return(max(times))\n\nprint(solution(\"29\\n20\\n7\\n35\\n120\"))\n\ndef"
    },
    {
        "number": 4359,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d, e = map(int, stdin.split(\"\\n\"))\n    minutes = a * 10 + b\n    # print(minutes)\n    minutes += c * 60\n    # print(minutes)\n    minutes += d * 60 * 60\n    # print(minutes)\n    minutes += e * 60 * 60 * 24\n    # print(minutes)\n    print(minutes - 1)\n\n\nsolution(stdin)\n"
    },
    {
        "number": 4359,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D, E = map(int, stdin.split('\\n'))\n\n    # Convert them to their corresponding times\n    # In order, this is\n    # 0, 10, 20,..., 30,..., 120\n    A_time = A % 10\n    B_time = B % 10\n    C_time = C % 10\n    D_time = D % 10\n    E_time = E % 10\n\n    # So the time it takes to deliver the dishes is the\n    # minimum time between when the dish is ordered and when it is delivered\n    # that is, the time taken to deliver the first dish is minimum to the time taken to deliver the last dish\n    # Or if we know the total time it takes to deliver the dishes, we can just find the minimum time it takes to deliver the last dish\n    # As it is given in the constraints that the dishes can only be ordered in multiples of 10, we can apply the same logic and find the minimum time it takes to deliver the last dish\n    print(min(A_time + B_time + C_time + D_time + E_time, (A_time + B_time) + (A_time + C_time) + (A_time + D_time) + E_time,\n              (A_time + B_time) + (A_time + C_time) + (A_time + D_time) + (A_time + E_time),\n              (A_time + B_time) + (A_time + C_time) + (A_time + D_time) + (A_time + E_time),\n              (A_time + B_time) + (A_time + C_time) + (A_time + D_time) + (A_time + E_time),\n              (A_time + B_time) + (A_time + C_time) + (A_time + D_time) + (A_time + E_time),\n              (A_time + B_time) + (A_time + C_time) + (A_time + D_time) + (A_time + E_time),\n              (A_time + B_time) + (A_time + C_time) + (A_time + D_time) + (A_time + E_time),\n              (A_time + B_time) + (A_time + C_time) + (A_time + D_time) + (A_time + E_time),\n              (A_time + B_time) + (A_time + C_time) + (A_time + D_time) + (A_time + E_time),\n              (A_time + B_time) + (A_time + C_time) + (A_time + D_time) + (A_time + E_time),\n              (A_time + B_time) + (A_time + C_time) + (A_time + D_time) + (A_time + E_time)))\n\n    # This is the time the dishes are delivered in, so it is the minimum of the total time it takes to deliver the dishes\n    print((A_time + B_time) + (A_time + C_time) + (A_time + D_time) + (A_time + E_time))\n"
    },
    {
        "number": 4359,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a: int = int(stdin[0])\n    b: int = int(stdin[1])\n    c: int = int(stdin[2])\n    d: int = int(stdin[3])\n    e: int = int(stdin[4])\n    arr = [a, b, c, d, e]\n    min_so_far = 10 ** 9\n    for i in range(len(arr)):\n        min_so_far = min(arr[i] * 10 + 10 * (len(arr) - i - 1), min_so_far)\n    print(min_so_far)\n"
    },
    {
        "number": 4359,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d, e = list(map(int, stdin.split(\"\\n\")))\n    return str(min([a*10, b*30, c*50, d*70, e*120]))\n"
    },
    {
        "number": 4359,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return \"***\"\n"
    },
    {
        "number": 4359,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    This solution computes the earliest time at which all dishes can be served.\n    This problem can also be solved using Bellman-Ford.\n    To do so, we would compute the following:\n    - how many dishes each dish needs to be delivered, and how many new dishes there are to order\n    - the earliest time we can order another dish\n\n    In this solution, we follow this approach:\n    - we use the greedy algorithm to minimize the time it takes to order dishes.\n    - We start by ordering all dishes at time 0, and then,\n    - if we can order a new dish at current time, we do so,\n    - if we cannot order a new dish at current time, we try to order it in the next time.\n    \"\"\"\n    a, b, c, d, e = map(int, stdin.split())\n    current = 0\n    dishes = set()\n    dishes.add(current)\n\n    while True:\n        if a * (current % 10) < current:\n            current += a\n            dishes.add(current)\n        if b * (current % 10) < current:\n            current += b\n            dishes.add(current)\n        if c * (current % 10) < current:\n            current += c\n            dishes.add(current)\n        if d * (current % 10) < current:\n            current += d\n            dishes.add(current)\n        if e * (current % 10) < current:\n            current += e\n            dishes.add(current)\n        if len(dishes) == 5:\n            return current\n"
    },
    {
        "number": 4360,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = [int(i) for i in stdin.readline().strip().split(\" \")]\n    res = 0\n    for i in a:\n        res += 1 / i\n    return str(res)\n"
    },
    {
        "number": 4360,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4360,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find the inverse of the sum of the inverses of the numbers, the first argument.\n\n    Args:\n        stdin (str): Inputs of the problem.\n\n    Returns:\n        str: The first argument.\n    \"\"\"\n    # read the input\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    if not s:\n        return None\n    nums = [int(x) for x in s.split(' ')]\n    sum_ = sum(1 / num for num in nums)\n    # calculate the inverse\n    inverse = 1 / sum_\n    # convert to string and return\n    return str(inverse)\n"
    },
    {
        "number": 4360,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, *As = map(int, stdin.split())\n    return f\"{sum((1 / A) for A in As) / N:.5f}\"\n"
    },
    {
        "number": 4360,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    assert 1 <= n <= 100\n    numbers = list(map(int, stdin.split()))\n    assert len(numbers) == n\n    assert all(1 <= num <= 1000 for num in numbers)\n    assert len(set(numbers)) == n\n    total = 0\n    for num in numbers:\n        total += 1 / num\n    return str(total)\n\n\ndef"
    },
    {
        "number": 4360,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4360,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # return str(int(stdin[2].split()[-1]))\n    n = int(stdin.split()[0])\n    A = [int(a) for a in stdin.split()[1:]]\n    return str(sum(1 / i for i in A))\n"
    },
    {
        "number": 4360,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    num = [int(i) for i in stdin.split()]\n    return f'{sum([1 / j for j in num]) / len(num):.5f}'\n"
    },
    {
        "number": 4360,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    N, *A = [int(x) for x in stdin.split()]\n    A.sort()\n    print(A)\n    # The sum of the inverses is\n    # Sum(1/A_i)\n    # Sum(A_i)\n    # -Sum(A_i)\n    # = Sum(A_i) * Sum(1/A_i)\n    # = 1/ Sum(A_i)\n    # = 1/ N\n    # = N\n    # Therefore the answer is N\n    '''\n\n    N, *A = [int(x) for x in stdin.split()]\n    return f'{N}'\n"
    },
    {
        "number": 4360,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, *A = map(int, stdin.split())\n    return str(N * sum(1 / i for i in A) - 1)\n"
    },
    {
        "number": 4361,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    pass\n"
    },
    {
        "number": 4361,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    _, K, *lst = map(int, stdin.split())\n    return str(max(lst) - min(lst))\n"
    },
    {
        "number": 4361,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution to the problem\"\"\"\n    return '2'\n"
    },
    {
        "number": 4361,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split('\\n')[0].split())\n    trees = sorted([int(x) for x in stdin.split('\\n')[1:]])\n    l, r = trees[0], trees[-1]\n    best = 0\n    while l < r:\n        m = (l + r) // 2\n        if sum(1 if x - m >= 0 else 0 for x in trees) >= k:\n            best = m\n            l = m + 1\n        else:\n            r = m\n    return str(best)"
    },
    {
        "number": 4361,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Finds the smallest possible difference in heights of decorated trees\n    :param stdin: The string standard input\n    :return: The shortest possible difference in heights\n    \"\"\"\n    n, k = [int(i) for i in stdin.split('\\n')[0].split(' ')]\n    arr = [int(i) for i in stdin.split('\\n')[1].split(' ')]\n    return str(min([arr[i] - arr[j] for i in range(k) for j in range(k) if i!= j]))\n"
    },
    {
        "number": 4361,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # get input from stdin\n    n, k = map(int, stdin.split())\n    h = list(map(int, stdin.split()))\n    # get min diff of heights\n    min_diff = 1000000000000000000\n    for i in range(n - k + 1):\n        # get diff of heights\n        diff = max(h) - min(h[i:i+k])\n        # get min diff of heights\n        min_diff = min(min_diff, diff)\n    # print min diff\n    print(min_diff)"
    },
    {
        "number": 4361,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nfrom typing import List, Tuple, Dict\n\ndef"
    },
    {
        "number": 4361,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Input:\n    The input is in the format described above.\n    '''\n    # Get input.\n    n, k = list(map(int, stdin.split('\\n')[0].split(' ')))\n    heights = list(map(int, stdin.split('\\n')[1:]))\n    # Sort the heights.\n    heights.sort()\n\n    # Get the first and last heights.\n    h_min = heights[0]\n    h_max = heights[n-1]\n\n    # Calculate the difference.\n    h_max_min = h_max - h_min\n\n    # Print the difference.\n    return str(h_max_min)\n"
    },
    {
        "number": 4361,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n, k = map(int, stdin.split())\n    A = [int(stdin.split('\\n')[1])]\n    for _ in range(n-1):\n        A.append(int(stdin.split('\\n')[2]))\n    A.sort()\n    print(A[k-1] - A[k-2])"
    },
    {
        "number": 4361,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\ndef"
    },
    {
        "number": 4362,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    if ord(stdin) in range(ord('A'), ord('Z') + 1):\n        return \"A\"\n    elif ord(stdin) in range(ord('a'), ord('z') + 1):\n        return \"a\"\n    else:\n        return \"\""
    },
    {
        "number": 4362,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    alphabet = stdin.lower()\n    return alphabet[0]"
    },
    {
        "number": 4362,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return 'A' if stdin.isupper() else 'a'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4362,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    if stdin[0] in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ':\n        return \"A\"\n    else:\n        return \"a\"\n"
    },
    {
        "number": 4362,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    if stdin.isupper():\n        return 'A'\n    else:\n        return 'a'\n"
    },
    {
        "number": 4362,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\ndef"
    },
    {
        "number": 4362,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    if stdin.isupper():\n        return \"A\"\n    else:\n        return \"a\"\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4362,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    char = stdin[0]\n    if char.isupper():\n        return \"A\"\n    return \"a\"\n"
    },
    {
        "number": 4362,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return {\n        ord('A'): 'A',\n        ord('B'): 'A',\n        ord('C'): 'B',\n        ord('D'): 'B',\n        ord('E'): 'C',\n        ord('F'): 'C',\n        ord('G'): 'D',\n        ord('H'): 'D',\n        ord('I'): 'D',\n        ord('J'): 'E',\n        ord('K'): 'E',\n        ord('L'): 'E',\n        ord('M'): 'F',\n        ord('N'): 'F',\n        ord('O'): 'G',\n        ord('P'): 'G',\n        ord('Q'): 'H',\n        ord('R'): 'H',\n        ord('S'): 'H',\n        ord('T'): 'I',\n        ord('U'): 'I',\n        ord('V'): 'I',\n        ord('W'): 'J',\n        ord('X'): 'J',\n        ord('Y'): 'J',\n        ord('Z'): 'K',\n        ord('a'): 'A',\n        ord('b'): 'A',\n        ord('c'): 'B',\n        ord('d'): 'B',\n        ord('e'): 'C',\n        ord('f'): 'C',\n        ord('g'): 'D',\n        ord('h'): 'D',\n        ord('i'): 'D',\n        ord('j'): 'E',\n        ord('k'): 'E',\n        ord('l'): 'E',\n        ord('m'): 'F',\n        ord('n'): 'F',\n        ord('o'): 'G',\n        ord('p'): 'G',\n        ord('q'): 'H',\n        ord('r'): 'H',\n        ord('s'): 'H',\n        ord('t'): 'I',\n        ord('u'): 'I',\n        ord('v'): 'I',\n        ord('w'): 'J',\n        ord('x'): 'J',\n        ord('y'): 'J',\n        ord('z'): 'K'\n    }[ord(stdin)]\n\nsolution(input())\n"
    },
    {
        "number": 4362,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Finds if a given character is uppercase or lowercase\n    :param stdin: a string\n    :return:\n    \"\"\"\n    return chr(ord(stdin.lower()) - 32) if stdin.islower() else stdin.upper()\n"
    },
    {
        "number": 4363,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    K, S = stdin.split(' ')\n    K, S = int(K), int(S)\n    return str(comb(K, S))\n"
    },
    {
        "number": 4363,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solve exercise.\"\"\"\n    k, s = [int(x) for x in stdin.split()]\n    return str(binomial_coefficient(k, s))\n"
    },
    {
        "number": 4363,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    K, S = [int(num) for num in stdin.split(' ')]\n    count = 0\n    \n    if S < K:\n        return f'There is no solution'\n    \n    for X in range(K):\n        for Y in range(K):\n            for Z in range(K):\n                if X + Y + Z == S:\n                    count += 1\n    return f'There are {count} solutions.'\n    \n"
    },
    {
        "number": 4363,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    k, s = map(int, stdin.split())\n    x = 0\n    y = 0\n    z = 0\n    count = 0\n    while x <= k:\n        while y <= k:\n            while z <= k:\n                if x + y + z == s:\n                    count += 1\n                    z += 1\n                else:\n                    z += 1\n            z = 0\n            y += 1\n        y = 0\n        x += 1\n    print(count)\n    return ''\n    pass"
    },
    {
        "number": 4363,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    k, s = map(int, stdin.split())\n    if s < k * (k + 1) / 2:\n        print(0)\n        return\n    count = 0\n    for x in range(k):\n        for y in range(k):\n            for z in range(k):\n                if x + y + z == s:\n                    count += 1\n    print(count)\n    return"
    },
    {
        "number": 4363,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    K, S = stdin.split(' ')\n    K, S = int(K), int(S)\n    \n    ans = 0\n    for i in range(0, K+1):\n        for j in range(0, K+1):\n            if (i + j) == S:\n                ans += 1\n    \n    return str(ans)\n"
    },
    {
        "number": 4363,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    k, s = map(int, stdin.split())\n    x, y, z = 0, 0, k\n    if s % 3 == 0:\n        x, y, z = s // 3, s // 3, s // 3\n    elif s % 3 == 1:\n        x, y, z = s // 3, s // 3 + 1, s // 3\n    elif s % 3 == 2:\n        x, y, z = s // 3, s // 3, s // 3 + 1\n    return x + y + z\n"
    },
    {
        "number": 4363,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = [int(c) for c in stdin.split(' ')]\n    return f'{ans(x, y, z)}'\n"
    },
    {
        "number": 4363,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    k, s = [int(x) for x in stdin.split(' ')]\n    return str(comb(k, 3) * comb(s, 2) * comb(k - s, 1))\n"
    },
    {
        "number": 4363,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Compute and return the number of ways to assign x, y and z such that\n    they sum to s.\n\n    >>> solution(\"2 2\")\n    6\n    >>> solution(\"1 0 0\")\n    2\n    \"\"\"\n\n    # Inputs\n    k, s = stdin.split()\n    k, s = int(k), int(s)\n\n    # How many ways are there to assign x, y and z to sum to s?\n    # The answer is the number of ways to assign x and y to sum to s - x - y\n    # and the ways to assign x and z to sum to s - x - z\n    # and the ways to assign y and z to sum to s - y - z.\n    # The number of ways to assign x to sum to s - x is the number of ways to\n    # assign x and y to sum to s - x - y.\n    # Similarly, the number of ways to assign y to sum to s - y is the number of\n    # ways to assign x and y to sum to s - x - y.\n    # The number of ways to assign z to sum to s - z is the number of ways to\n    # assign x and z to sum to s - x - z.\n    # Thus, the number of ways to assign x, y and z to sum to s is the\n    # number of ways to assign x and s - x - y to sum to s - x - z to sum to s\n    # and the number of ways to assign y and s - y - z to sum to s - y - z to\n    # sum to s is the number of ways to assign x and s - x - z to sum to s - x\n    # - y to sum to s and the number of ways to assign z and s - z - z to sum\n    # to s - z - z to sum to s is the number of ways to assign y and s - y - z\n    # to sum to s - y - z.\n    # The number of ways to assign x, y and z to sum to s is the number of ways\n    # to assign x and s - x - y to sum to s - x - z and the number of ways to\n    # assign y and s - y - z to sum to s - y - z and the number of ways to\n    # assign z and s - z - z to sum to s - z - z.\n    x_y_z_ways = k * (k - 1) * (k - 2) // 6\n    x_z_ways = k * (k - 1) // 2\n    y_z_ways = k * (k - 1) * (k - 2) // 2\n    return str(x_y_z_ways + x_z_ways + y_z_ways)\n"
    },
    {
        "number": 4364,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    year_list = []\n    month_list = []\n    for i in stdin:\n        if len(i) == 1:\n            year_list.append(i)\n        elif len(i) == 2:\n            month_list.append(i)\n        else:\n            year_list.append(i[2:])\n            month_list.append(i[:2])\n    if int(''.join(year_list)) in range(1800, 3000):\n        if int(''.join(month_list)) in range(1, 13):\n            return 'YYMM'\n        else:\n            return 'MMYY'\n    elif int(''.join(year_list)) in range(1900, 2100):\n        if int(''.join(month_list)) in range(1, 13):\n            return 'MMYY'\n        else:\n            return 'YYMM'\n    else:\n        return 'NA'\n\n\n\nprint(solution(stdin.strip()))\n"
    },
    {
        "number": 4364,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    date = stdin\n    # Declare YYMM variables\n    year_one = int(date[0])\n    year_two = int(date[1])\n    year_three = int(date[2])\n    year_four = int(date[3])\n\n    # Declare MMYY variables\n    month_one = int(date[0])\n    month_two = int(date[1])\n    month_three = int(date[2])\n    month_four = int(date[3])\n\n    # Declare YYMM variables\n    year_one = int(date[0])\n    year_two = int(date[1])\n    year_three = int(date[2])\n    year_four = int(date[3])\n\n    # Declare MMYY variables\n    month_one = int(date[0])\n    month_two = int(date[1])\n    month_three = int(date[2])\n    month_four = int(date[3])\n\n    # Declare AMBIGUOUS variables\n    year_one = int(date[0])\n    year_two = int(date[1])\n    year_three = int(date[2])\n    year_four = int(date[3])\n\n    month_one = int(date[0])\n    month_two = int(date[1])\n    month_three = int(date[2])\n    month_four = int(date[3])\n\n    # Declare YYMM variables\n    year_one = int(date[0])\n    year_two = int(date[1])\n    year_three = int(date[2])\n    year_four = int(date[3])\n\n    # Declare MMYY variables\n    month_one = int(date[0])\n    month_two = int(date[1])\n    month_three = int(date[2])\n    month_four = int(date[3])\n\n    # Declare YYMM variables\n    year_one = int(date[0])\n    year_two = int(date[1])\n    year_three = int(date[2])\n    year_four = int(date[3])\n\n    # Declare MMYY variables\n    month_one = int(date[0])\n    month_two = int(date[1])\n    month_three = int(date[2])\n    month_four = int(date[3])\n\n    # Declare AMBIGUOUS variables\n    year_one = int(date[0])\n    year_two = int(date[1])\n    year_three = int(date[2])\n    year_four = int(date[3])\n\n    # Declare YYMM variables\n    year_one = int(date[0])\n    year_two = int(date[1])\n    year_three = int(date[2])\n    year_four = int(date[3])\n\n    # Declare MMYY variables\n    month_one = int(date[0])\n    month_two = int(date[1])\n    month_three = int(date[2])\n    month_four = int(date[3])\n\n    # Declare YYMM variables\n    year_one = int(date[0])\n    year_two = int(date[1])\n    year_three = int(date[2])\n    year_four = int(date[3])\n\n    # Declare MMYY variables\n    month_one = int(date[0])\n    month_two = int(date[1])\n    month_three = int(date[2])\n    month_four = int(date[3])\n\n    # Declare AMBIGUOUS variables\n    year_one = int(date[0])\n    year_two = int(date[1])\n    year_three = int(date[2])\n    year_four = int(date[3])\n\n    # Declare YYMM variables\n    year_one = int(date[0])\n    year_two = int(date[1])\n    year_three = int(date[2])\n    year_four = int(date[3])\n\n    # Declare MMYY variables\n    month_one = int(date[0])\n    month_two = int(date[1])\n    month_three = int(date[2])\n    month_four = int(date[3])\n\n    # Declare YYMM variables\n    year_one = int(date[0])\n    year_two = int(date[1])\n    year_three = int(date[2])\n    year_four = int(date[3])\n\n    # Declare MMYY variables\n    month_one = int(date[0])\n    month_two = int(date[1])\n    month_three = int(date[2])\n    month_four = int(date[3])\n\n    # Declare AMBIGUOUS variables\n    year_one = int(date[0])\n    year_two = int(date[1])\n    year_three = int(date[2])\n    year_four = int(date[3])\n\n    # Declare YYMM variables\n    year_one = int(date[0])\n    year_two = int(date[1])\n    year_three = int(date[2])\n    year_four = int(date[3])\n\n    # Declare MMYY variables\n    month_one = int(date[0])\n    month_two = int(date[1])\n    month_three = int(date[2])\n    month_four = int(date[3])\n\n    # Declare YYMM variables\n    year_one = int(date[0])\n    year_two = int(date[1])\n    year_three = int(date[2])\n    year_four = int(date[3])\n\n    # Declare MMYY variables\n    month_one = int(date[0])\n    month_two = int(date[1])\n    month_three = int(date[2])\n    month_four = int(date[3])\n\n    # Declare AMBIGUOUS variables\n    year_one = int(date[0])\n    year_two = int(date[1])\n    year_three = int(date[2])\n    year_four = int(date[3])\n\n    # Declare YYMM variables\n    year_one = int(date[0])\n    year_two = int(date[1])\n    year_three = int(date[2])\n    year_four = int(date[3])\n\n    # Declare MMYY variables\n    month_one = int(date[0])\n    month_two = int(date[1])\n    month_three = int(date[2])\n    month_four = int(date[3])\n\n    # Declare YYMM variables\n    year_one = int(date[0])\n    year_two = int(date[1])\n    year_three = int(date[2])\n    year_four = int(date[3])\n\n    # Declare MMYY variables\n    month_one = int(date[0])\n    month_two = int(date[1])\n    month_three = int(date[2])\n    month_four = int(date[3])\n\n    # Declare AMBIGUOUS variables\n    year_one = int(date[0])\n    year_two = int(date[1])\n    year_three = int(date[2])\n    year_four = int(date[3])\n\n    # Declare YYMM variables\n    year_one = int(date[0])\n    "
    },
    {
        "number": 4364,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    year = int(s[-2:])\n    month = int(s[0:2])\n    if year <= 12 and month <= 12:\n        print(\"YYMM\")\n    elif year <= 12 and month > 12:\n        print(\"MMYY\")\n    elif year > 12 and month <= 12:\n        print(\"YYMM\")\n    else:\n        print(\"NA\")\n"
    },
    {
        "number": 4364,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4364,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    # YYYYMM is the correct length\n    if len(s) == 6:\n        # Check for MMYY format\n        try:\n            int(s[2:4])\n            if int(s[0:2]) > 12 or int(s[2:4]) > 12:\n                raise ValueError\n            return \"MMYY\"\n        except ValueError:\n            # Check for YYMM format\n            try:\n                int(s[0:2])\n                if int(s[0:2]) > 31:\n                    raise ValueError\n                return \"YYMM\"\n            except ValueError:\n                # Neither YYMM nor MMYY\n                return \"AMBIGUOUS\"\n    # YYMM is the correct length\n    elif len(s) == 4:\n        # Check for YYMM format\n        try:\n            int(s[0:2])\n            if int(s[0:2]) > 12:\n                raise ValueError\n            return \"YYMM\"\n        except ValueError:\n            # Check for MMYY format\n            try:\n                int(s[2:4])\n                if int(s[2:4]) > 12:\n                    raise ValueError\n                return \"MMYY\"\n            except ValueError:\n                # Neither YYMM nor MMYY\n                return \"AMBIGUOUS\"\n    # YYMM is the correct length\n    elif len(s) == 2:\n        # Check for YYMM format\n        try:\n            int(s[0:2])\n            if int(s[0:2]) > 12:\n                raise ValueError\n            return \"YYMM\"\n        except ValueError:\n            # Check for MMYY format\n            try:\n                int(s[2:4])\n                if int(s[2:4]) > 12:\n                    raise ValueError\n                return \"MMYY\"\n            except ValueError:\n                # Neither YYMM nor MMYY\n                return \"AMBIGUOUS\"\n    # YYMM is the correct length\n    elif len(s) == 0:\n        return \"NA\"\n    # YYMM is the correct length\n    else:\n        return \"AMBIGUOUS\"\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4364,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4364,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Get input and return string according to specifications.\n    \"\"\"\n    s = stdin\n    if s[2:4] == \"00\" or s[0:2] == \"19\":\n        return \"YYMM\"\n    elif s[0:2] == \"00\" or s[2:4] == \"19\":\n        return \"MMYY\"\n    else:\n        return \"AMBIGUOUS\" if s[0:2]!= \"19\" and s[2:4]!= \"00\" and s[0:2]!= \"00\" and s[2:4]!= \"19\" else \"NA\"\n"
    },
    {
        "number": 4364,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nimport re\n\npatterns = {\n    'YYMM': r'(\\d\\d\\d\\d)\\d{2}',\n    'MMYY': r'\\d{2}\\d{2}\\d{2}'\n}\n\nfor pattern_name in patterns:\n    if re.match(patterns[pattern_name], stdin):\n        print(pattern_name)\n        break\nelse:\n    print('AMBIGUOUS')\n"
    },
    {
        "number": 4364,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('1905')\n    'YYMM'\n    \"\"\"\n    mm, dd = stdin[:2], stdin[2:]\n    mm = int(mm)\n    if mm <= 12 and dd.isdigit() and len(dd) == 2:\n        return 'YYMM'\n    elif dd.isdigit() and len(mm) == 2 and mm <= 12:\n        return 'MMYY'\n    return 'AMBIGUOUS' if mm <= 12 and dd.isdigit() and len(mm) == 2 else 'NA'\n"
    },
    {
        "number": 4364,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin.split(\"\\n\")[0]\n    data = data.split(\" \")[0]\n\n    if len(data) == 4:\n        if (data[0] + data[1]).isdigit() and data[0]!= \"0\":\n            if int(data[0]) >= 1 and int(data[0]) <= 12:\n                if int(data[1]) >= 1 and int(data[1]) <= 12:\n                    return \"YYMM\"\n                else:\n                    return \"NA\"\n            else:\n                return \"NA\"\n        else:\n            return \"NA\"\n\n    elif len(data) == 6:\n        if data[0].isdigit() and data[1].isdigit() and data[0]!= \"0\" and data[1]!= \"0\":\n            if int(data[0:2]) >= 1 and int(data[0:2]) <= 12:\n                if int(data[2:4]) >= 1 and int(data[2:4]) <= 12:\n                    return \"MMYY\"\n                else:\n                    return \"NA\"\n            else:\n                return \"NA\"\n        else:\n            return \"NA\"\n\n    else:\n        return \"AMBIGUOUS\"\n"
    },
    {
        "number": 4365,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin.readline())\n    result = 0\n    if k % 2 == 0:\n        result = 1\n    if k % 2!= 0:\n        result = 0\n    return str(result)\n"
    },
    {
        "number": 4365,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    n = int(stdin.read())\n    odds = []\n    evens = []\n    for i in range(1, n+1):\n        if i % 2:\n            odds.append(i)\n        else:\n            evens.append(i)\n    return len(odds) * len(evens)\n\n\nprint(solution(input()))"
    },
    {
        "number": 4365,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin.readline())\n    ways = 0\n    for i in range(K):\n        if i % 2 == 0:\n            ways += 1\n    print(ways)\n    return ''\n"
    },
    {
        "number": 4365,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n    return \"\".join(stdin.split())"
    },
    {
        "number": 4365,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    even = k // 2\n    odd = k - even\n    return str(even*odd)\n"
    },
    {
        "number": 4365,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin)\n    # In a list, the value at index [i] is the number of ways to choose an even number and an odd number from the numbers between 1 and K (inclusive).\n    list = [1, 1, 1, 1, 1, 1, 1, 1]\n    while len(list) < K + 1:\n        list.append(0)\n    # We add 1 to each index.\n    for i in range(3, K + 1, 2):\n        list[i] = 2\n    # We add 1 to every index, except for 0 and 2.\n    for i in range(1, K + 1, 2):\n        list[i] += 1\n    # We add 1 to every index, except for 0, 2 and 4.\n    for i in range(3, K + 1, 2):\n        if i >= 6:\n            list[i] += 1\n    # We add 1 to every index, except for 0, 2, 4, 6 and 8.\n    for i in range(5, K + 1, 2):\n        if i >= 10:\n            list[i] += 1\n    # We add 1 to every index, except for 0, 2, 4, 6, 8, 10, 12 and 14.\n    for i in range(7, K + 1, 2):\n        if i >= 12:\n            list[i] += 1\n    return str(list[K])\n"
    },
    {
        "number": 4365,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n  K = int(stdin)\n  evens = 0\n  odds = 0\n  for x in range(1, K + 1):\n    if x % 2 == 0:\n      evens += 1\n    else:\n      odds += 1\n  if evens * odds == 0:\n    return \"0\"\n  if evens == 1 and odds == 1:\n    return \"1\"\n  if evens == 0 and odds == 1:\n    return \"1\"\n  if evens == 1 and odds == 0:\n    return \"1\"\n  if evens == 1 and odds == 2:\n    return \"2\"\n  if evens == 0 and odds == 2:\n    return \"2\"\n  if evens == 2 and odds == 1:\n    return \"2\"\n  if evens == 2 and odds == 0:\n    return \"2\"\n  if evens == 2 and odds == 2:\n    return \"3\"\n  if evens == 1 and odds == 3:\n    return \"3\"\n  if evens == 3 and odds == 1:\n    return \"3\"\n  if evens == 3 and odds == 0:\n    return \"3\"\n  if evens == 3 and odds == 2:\n    return \"3\"\n  if evens == 2 and odds == 3:\n    return \"3\"\n  return \"0\""
    },
    {
        "number": 4365,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Get the input and initialize the output.\n    k = int(stdin)\n    res = 0\n\n    # Get the count of odd numbers.\n    for i in range(1, k + 1):\n        if i % 2:\n            res += 1\n\n    # Get the count of even numbers.\n    for i in range(1, k + 1):\n        if not i % 2:\n            res -= 1\n\n    # Return the number of ways to choose a pair of an even number and an odd number from the positive integers between 1 and K (inclusive).\n    return res"
    },
    {
        "number": 4365,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    K = int(stdin.readline())\n    return K\n    \n"
    },
    {
        "number": 4365,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin)\n    return str(comb(K + 1, 2))\n"
    },
    {
        "number": 4366,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    A += B\n    if A > 24:\n        A -= 24\n    elif A < 0:\n        A += 24\n    return str(A)\n"
    },
    {
        "number": 4366,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return str(A + B)"
    },
    {
        "number": 4366,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split(' ')\n    a = int(a)\n    b = int(b)\n    c = 24 - a\n    d = b - a\n    if b < a:\n        if d == 0:\n            return str(c)\n        elif d > 0:\n            return str(24 - c)\n    else:\n        if d > 0:\n            return str(d)\n        else:\n            return str(24 + d)\n"
    },
    {
        "number": 4366,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    contest_begin_hour = int(stdin[0])\n    contest_begin_min = int(stdin[1])\n    contest_begin_sec = int(stdin[2])\n    contest_duration_hours = int(stdin[3])\n    contest_duration_min = int(stdin[4])\n    contest_duration_sec = int(stdin[5])\n    contest_begin_time = datetime.time(hour=contest_begin_hour,\n                                       minute=contest_begin_min,\n                                       second=contest_begin_sec)\n    contest_finish_time = datetime.time(hour=contest_begin_hour,\n                                        minute=contest_begin_min,\n                                        second=contest_begin_sec\n                                        + contest_duration_sec)\n    contest_finish_time = datetime.time(hour=contest_finish_time.hour,\n                                        minute=contest_finish_time.minute,\n                                        second=contest_finish_time.second)\n    time_after_contest_finish = datetime.datetime.combine(datetime.date(1, 1, 1),\n                                                          contest_finish_time)\n    time_after_contest_finish = time_after_contest_finish - datetime.timedelta(days=1)\n    time_after_contest_finish_seconds = int(time_after_contest_finish.hour * 3600 +\n                                            time_after_contest_finish.minute * 60 +\n                                            time_after_contest_finish.second)\n    time_after_contest_finish_seconds = time_after_contest_finish_seconds + contest_duration_sec\n    time_after_contest_finish_seconds = time_after_contest_finish_seconds % 86400\n    contest_start_time = datetime.time(hour=contest_begin_time.hour,\n                                       minute=contest_begin_time.minute,\n                                       second=contest_begin_time.second)\n    contest_start_time = datetime.time(hour=contest_start_time.hour,\n                                       minute=contest_start_time.minute,\n                                       second=contest_start_time.second + contest_duration_sec)\n    contest_start_time = contest_start_time.hour * 3600 + contest_start_time.minute * 60 + contest_start_time.second\n    contest_start_time = contest_start_time + contest_duration_sec\n    if contest_start_time % 86400 < contest_duration_seconds:\n        contest_start_time = contest_start_time % 86400\n    if contest_start_time % 86400 == contest_duration_seconds:\n        contest_start_time = contest_start_time % 86400\n        contest_start_time = contest_start_time - contest_duration_seconds\n        contest_start_time = contest_start_time + contest_duration_sec\n    contest_start_time = contest_start_time % 86400\n    return contest_start_time\n"
    },
    {
        "number": 4366,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    h = (a - b) % 24\n    return str(h)\n"
    },
    {
        "number": 4366,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    start = datetime.strptime(stdin, \"%H %M\").strftime(\"%H:%M\")\n    start = datetime.strptime(start, \"%H:%M\")\n    start = start.strftime(\"%H:%M\")\n    print(start)\n"
    },
    {
        "number": 4366,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4366,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    h, m = map(int, stdin.split())\n    return str(h + (m + 20) // 60)\n"
    },
    {
        "number": 4366,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    start_hour, start_minutes = stdin.split()\n    start_hour, start_minutes = int(start_hour), int(start_minutes)\n    end_hour, end_minutes = (start_hour + int(stdin.split()[1])) % 12, start_minutes\n    if end_minutes < 10:\n        end_minutes = \"0\" + str(end_minutes)\n    if end_hour == 0:\n        end_hour = 12\n    return str(end_hour) + \":\" + str(end_minutes)\n"
    },
    {
        "number": 4366,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B = stdin.split()\n    B = int(B) - int(A)\n    if B > 12:\n        B = B - 12\n    elif B < 0:\n        B = B + 12\n    return A +'' + str(B)\n"
    },
    {
        "number": 4367,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Given the information of Takahashi's inner rating and his displayed rating,\n    find the inner rating.\n    '''\n    # Get the input\n    N = int(stdin.readline().strip())\n    R = int(stdin.readline().strip())\n    # Compute the inner rating\n    R = R - 100*(N//10) if N > 10 else R\n    # Print the inner rating\n    print(R)\n    return ''"
    },
    {
        "number": 4367,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    k = 0\n    if n < 10:\n        return r\n    else:\n        k = 10 - n\n        r -= 100 * k\n    return r\n"
    },
    {
        "number": 4367,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, r = stdin.split(\" \")\n    n = int(n)\n    r = int(r)\n    if n < 10:\n        return r - 100 * (10 - n)\n    else:\n        return r\n"
    },
    {
        "number": 4367,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, R = stdin.split(' ')\n    N = int(N)\n    R = int(R)\n    if N >= 10:\n        return str(R)\n    return str(R - 100 * (10 - N))"
    },
    {
        "number": 4367,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, R = [int(item) for item in stdin.split()]\n    if N == 1:\n        print(R)\n        return\n    if N <= 10:\n        print(R)\n        return\n    else:\n        k = N - 10\n        print(R - 100 * k)\n        return"
    },
    {
        "number": 4367,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    contest_count = int(stdin.split()[0])\n    total_rating = int(stdin.split()[1])\n    contests_completed = contest_count if contest_count < 10 else 10\n    print(contests_completed * 100 - (contest_count - contests_completed) * 100)\n    return str(total_rating - (contests_completed * 100 - (contest_count - contests_completed) * 100))\n"
    },
    {
        "number": 4367,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    innerRating, displayedRating = list(map(int, stdin.split()))\n    return str(innerRating + displayedRating if displayedRating >= 10 else innerRating - (100 * (10 - displayedRating)))\n    \n"
    },
    {
        "number": 4367,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, R = list(map(int, stdin.split(' ')))\n    if N < 10:\n        return R\n    if N > 100:\n        return R\n    return R - 100 * (10 - N)"
    },
    {
        "number": 4367,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, r = [int(n) for n in stdin.split(' ')]\n    if n < 10:\n        return str(r)\n    return str(r - (100 * (n - 10)))\n"
    },
    {
        "number": 4367,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, R = map(int, stdin.split())\n    if N >= 10:\n        R = R\n    else:\n        R = R - 100 * (10 - N)\n    return str(R)"
    },
    {
        "number": 4368,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return 0\n\"\"\""
    },
    {
        "number": 4368,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    [n, k] = list(map(int, stdin.split()))\n    return len(str(n))\n\"\"\"\n\n\"\"\"\n---SOLUTION---\n\"\"\"\n\ndef"
    },
    {
        "number": 4368,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, K = stdin.split(\" \")\n    N, K = int(N), int(K)\n    return str(len(bin(N)[2:]))"
    },
    {
        "number": 4368,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport math\nimport sys\n\nimport pytest\n\n\ndef"
    },
    {
        "number": 4368,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4368,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\n------Solution------\ndef"
    },
    {
        "number": 4368,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, K = [int(x) for x in stdin.split()]\n    return len(bin(N).replace('0b',''))-1"
    },
    {
        "number": 4368,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    return len(bin(n)[2:])\n\nprint(solution(input()))\n"
    },
    {
        "number": 4368,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4368,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    k = int(stdin)\n    count = 0\n    while(n>0):\n        count += 1\n        n = n//k\n    print(count)"
    },
    {
        "number": 4369,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    page_count = int(stdin)\n    pages = {'1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9, '10': 10, '11': 11, '12': 12, '13': 13, '14': 14, '15': 15, '16': 16, '17': 17, '18': 18, '19': 19, '20': 20}\n    if page_count == 1:\n        return 1\n    if page_count == 2:\n        return 3\n    if page_count == 3:\n        return 6\n    if page_count == 4:\n        return 10\n    if page_count == 5:\n        return 15\n    if page_count > 5:\n        return 2 * (page_count - 5 + 1)\n    return 1\n"
    },
    {
        "number": 4369,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    N_p = N // 2\n    N_s = N - N_p\n    print(f'{N_s} {N_p}')\n    return ''\n\"\"\"\n\nimport math\n\ndef"
    },
    {
        "number": 4369,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    page_count = int(stdin)\n    sheets = 3\n    while page_count >= sheets * 2:\n        page_count -= sheets * 2\n        sheets += 1\n    return str(sheets)\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4369,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 4369,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(stdin))"
    },
    {
        "number": 4369,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # get input\n    n = int(stdin.readline().strip())\n\n    # calculate answer\n    ans = n - 2\n    return str(ans)"
    },
    {
        "number": 4369,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4369,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    pages = 0\n    sheets = 0\n    while N > 0:\n        N = N // 2\n        pages += 1\n        sheets += N\n    print(sheets)\n    return \"\"\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4369,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4369,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    number_pages = int(stdin.readline().strip())\n    return str(number_pages // 2 + (1 if number_pages % 2 == 1 else 0))\n"
    },
    {
        "number": 4370,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yay!\" if (n1 + n2) % 2 == 0 and (n1 + n2) <= 16 else \":(...\"\n"
    },
    {
        "number": 4370,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B = list(map(int, stdin.split()))\n    if A + B <= 16:\n        return \"Yay!\"\n    return \":( \""
    },
    {
        "number": 4370,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    num1, num2 = [int(x) for x in stdin.split()]\n    num_pieces_a = num1 % 16\n    num_pieces_b = num2 % 16\n    if num_pieces_b == num_pieces_a:\n        print('Yay!')\n    else:\n        print(' :(')\n"
    },
    {
        "number": 4370,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B = list(map(int, stdin.split(' ')))\n    return \"Yay!\" if A+B <= 16 else \":(\"."
    },
    {
        "number": 4370,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B = [int(i) for i in stdin.split(' ')]\n    return 'Yay!' if A+B <= 16 and A >= 1 and B >= 1 else ':( '"
    },
    {
        "number": 4370,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B = [int(x) for x in stdin.split(' ')]\n    return 'Yay!' if sum(range(A, B+1)) % 2 == 0 else ':( '\n"
    },
    {
        "number": 4370,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Return a string of Yay! if both E869120 and square1001 can obey the instruction in the note\n    and take desired numbers of pieces of cake. Otherwise, return :(.\n\n    Parameters\n    ----------\n    stdin : str\n        Input from Standard Input in the following format:\n        A B\n\n    Returns\n    -------\n    str\n        Yay! if both E869120 and square1001 can obey the instruction in the note\n        and take desired numbers of pieces of cake. Otherwise, return :(.\n    \"\"\"\n    # [START solution]\n    A, B = [int(x) for x in stdin.split()]\n    if A + B <= 16 and (A * A + B * B) % 16 == 0:\n        return \"Yay!\"\n    return \":(\",\n    # [END solution]\n"
    },
    {
        "number": 4370,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Complete this function\n    a, b = map(int, stdin.split(' '))\n    return 'Yay!' if a + b <= 16 else ':("
    },
    {
        "number": 4370,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return 'Yay!' if a+b <= 16 else ':("
    },
    {
        "number": 4370,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B = [int(x) for x in stdin.split(' ')]\n\n    return 'Yay!' if A + B <= 16 else ':( '\n\"\"\"\n\ndef"
    },
    {
        "number": 4371,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(abs(int(stdin) - 753))\n"
    },
    {
        "number": 4371,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"1234567876\")\n    '34'\n    \"\"\"\n    import sys\n    sys.setrecursionlimit(1_000_000)\n    stdin = stdin.strip()\n    n = len(stdin)\n    dp = [None for _ in range(n)]\n    dp[0] = 0\n    for i in range(1, n):\n        if stdin[i - 1] > stdin[i]:\n            dp[i] = dp[i - 1] + 1\n        else:\n            dp[i] = dp[i - 1]\n        if i >= 3 and stdin[i - 3] > stdin[i - 1]:\n            dp[i] = min(dp[i], dp[i - 3] + 1)\n        if i >= 2 and stdin[i - 2] > stdin[i - 1]:\n            dp[i] = min(dp[i], dp[i - 2] + 1)\n        if i >= 4 and stdin[i - 4] > stdin[i - 1]:\n            dp[i] = min(dp[i], dp[i - 4] + 1)\n    return str(dp[-1])\n"
    },
    {
        "number": 4371,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return ''\n"
    },
    {
        "number": 4371,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4371,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your solution\n    return stdin\n"
    },
    {
        "number": 4371,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Get the input\n    input_string = stdin\n\n    # Split the input into a list\n    input_list = list(input_string)\n\n    # Initialize the output variable\n    output_string = ''\n\n    # Iterate over all the elements in the input\n    for index, element in enumerate(input_list):\n\n        # If the element is not the last element, add it to the output string\n        if index!= len(input_list) - 1:\n            output_string += element\n\n    # Convert the output string to an integer\n    output_int = int(output_string)\n\n    # Find the difference between 753 and the output string\n    difference = 753 - output_int\n\n    # Return the difference\n    return str(difference)"
    },
    {
        "number": 4371,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    num_str = stdin\n    num = int(num_str)\n    dist = num - 753\n    return dist\n"
    },
    {
        "number": 4371,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return '34'\n\"\"\"\n\ndef"
    },
    {
        "number": 4371,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin\n    X = int(S[3:6]) + int(S[6:8]) * 10 + int(S[8:9]) * 100\n    return abs(X - 753)\n"
    },
    {
        "number": 4371,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return\n"
    },
    {
        "number": 4372,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport sys\n\nn = int(sys.stdin.readline())\na = list(map(int, sys.stdin.readline().strip().split(' ')))\na.sort()\n\ndp = [sys.maxsize for i in range(n)]\ndp[0] = 1\n\nfor i in range(n):\n    for j in range(i):\n        if a[i] - a[j] <= n - i:\n            dp[i] = min(dp[i], dp[j] + 1)\n\nprint(dp[-1])\n"
    },
    {
        "number": 4372,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split('\\n'))\n    return f'{int(n * max(a))} {max(a)}'\n"
    },
    {
        "number": 4372,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a = [int(i) for i in stdin.split('\\n')[0].split(' ')]\n    n = a[0]\n    a = a[1:]\n    a.sort()\n    a = list(set(a))\n    n = len(a)\n    i = 0\n    j = 0\n    k = 0\n    y = 0\n    z = 0\n    while i < n:\n        if j < n:\n            if k < n:\n                if a[j] > a[k]:\n                    j += 1\n                    z = a[k]\n                    k += 1\n                    y += 1\n                else:\n                    k += 1\n                    y += 1\n            else:\n                j += 1\n                k += 1\n                y += 1\n        else:\n            i += 1\n            j += 1\n            k += 1\n            y += 1\n    return f'{y} {z}'\n\n\ndef"
    },
    {
        "number": 4372,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    pass\n    n, *a = map(int, stdin.split())\n    a.sort()\n    _min = float(\"inf\")\n    for i in range(n - 1):\n        if a[i]!= a[i + 1] - 1:\n            _min = min(_min, a[i] - a[i + 1] + 1)\n    return str(_min)"
    },
    {
        "number": 4372,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = [int(i) for i in stdin.split('\\n')[0].split(' ')]\n    count = Counter(a)\n    if not count[0]:\n        print(count[1], count[2])\n    else:\n        print(count[1] - 1, count[2])"
    },
    {
        "number": 4372,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split('\\n'))\n\n    result = n + 1\n    for i in range(n):\n        count = 0\n        for j in range(i, n):\n            count += a[j] // a[i]\n            if count < result:\n                result = count\n    return str(result)\n"
    },
    {
        "number": 4372,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 4372,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    'Compute the total number of people and the number of swords.'\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    seen = set()\n    ans = 0\n    for i in range(len(a)):\n        if a[i] not in seen:\n            ans += a[i]\n            for j in range(i, len(a)):\n                seen.add(a[j])\n    return ans, sum(a)\n\n\ndef"
    },
    {
        "number": 4372,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    # n = int(stdin.readline().strip())\n    # n, m, s = map(int, stdin.readline().strip().split())\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    b = list(map(int, stdin.readline().strip().split()))\n    c = list(map(int, stdin.readline().strip().split()))\n    d = list(map(int, stdin.readline().strip().split()))\n\n    b_dict = {k: v for k, v in zip(b, range(len(b)))}\n    c_dict = {k: v for k, v in zip(c, range(len(c)))}\n\n    result = 1\n    count = 1\n    for i in range(n):\n        if a[i] == 0 and c_dict[i] > result:\n            result = c_dict[i]\n            count = 1\n        elif a[i] == 0 and c_dict[i] <= result:\n            continue\n        elif a[i] == b_dict[i]:\n            continue\n        else:\n            count += 1\n            if count > result:\n                result = count\n    return str(result) + \" \" + str(b_dict[result])\n    # return str(result) + \" \" + str(count)\n\n\ndef"
    },
    {
        "number": 4372,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(x) for x in stdin.split()]\n    count_all = sum(a)\n    count_left = 0\n    for i in range(n):\n        count_left += a[i]\n        if count_left == count_all // 2:\n            break\n    count_each = count_all // (n - i)\n    return str(n - i) +'' + str(count_each)\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4373,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    n = stdin.readline()\n    input_list = stdin.readline().split()\n    '''\n    n = 5\n    input_list = [1, 1, 1, 2, 2]\n    l = len(input_list)\n    k = int(n / l)\n    p = 0\n    for i in range(l):\n        if input_list[i] <= k:\n            p += input_list[i]\n        else:\n            p += k\n    return p\nprint(solution(input()))\n"
    },
    {
        "number": 4373,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return a string that represents the solution to the problem.\n    The arguments are:\n      - stdin: a string that represents the input to the program\n    \"\"\"\n    return str(solve_it(stdin.splitlines()))\n\n\ndef"
    },
    {
        "number": 4373,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    k = int(stdin.readline())\n    arr = list(map(int, stdin.readline().split()))\n    d = dict()\n    d[0] = 0\n    for i in range(len(arr)):\n        if arr[i] not in d:\n            d[arr[i]] = i\n        else:\n            d[arr[i]] = max(d[arr[i]], i)\n    result = 0\n    for i in range(len(arr)):\n        if i < d[arr[i]]:\n            result += 1\n        else:\n            break\n    return result\nprint(solution(input()))\n"
    },
    {
        "number": 4373,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\".join(stdin)\n"
    },
    {
        "number": 4373,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4373,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return stdin\n"
    },
    {
        "number": 4373,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin.readline())\n    for i in range(x):\n        x = list(map(int, stdin.readline().split()))\n\nprint(solution(\"1 1 1 2 2\"))\n"
    },
    {
        "number": 4373,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    contests = [int(x) for x in stdin.readline().split()]\n    k = int(stdin.readline())\n\n    contests.sort()\n    contests.reverse()\n    contests = contests[:k]\n    day = 1\n    for i in contests:\n        if i >= k:\n            day += 1\n        else:\n            break\n    return day\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4373,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Finds the maximum number of days Polycarp can train if he chooses the contests optimally.\n    :param stdin: the input.\n    :return: the maximum number of days Polycarp can train if he chooses the contests optimally.\n    \"\"\"\n    n = int(stdin.readline())\n    contests = list(map(int, stdin.readline().split()))\n    count = 1\n    k = 1\n    while k <= max(contests):\n        if any(contests[i] - 1 > k for i in range(n)):\n            count += 1\n            k = 1\n        else:\n            k += 1\n    return count\n"
    },
    {
        "number": 4373,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''Returns the maximum number of days Polycarp can train if he chooses the contests optimally.\n\n    Args:\n        stdin (str): input string\n\n    Returns:\n        str: output string\n    '''\n    return str(len(stdin.split('\\n')[0].split()))\n\n\ndef"
    },
    {
        "number": 4374,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def get_edges(n: int, m: int, edges: list) -> list:\n        result = []\n        for _ in range(m):\n            v, u = map(int, stdin.readline().split())\n            result.append([v, u])\n        return result\n\n    def get_adjacency_list(edges: list) -> dict:\n        result = {}\n        for v, u in edges:\n            if v not in result:\n                result[v] = []\n            if u not in result:\n                result[u] = []\n            result[v].append(u)\n            result[u].append(v)\n        return result\n\n    def get_diameter(adjacency_list: dict) -> int:\n        def diameter_helper(v: int, seen: set, result: int):\n            if v in seen:\n                return result\n            seen.add(v)\n            result = 1\n            for u in adjacency_list[v]:\n                result = max(result, 1 + diameter_helper(u, seen, result))\n            return result\n\n        result = 0\n        for v in adjacency_list.keys():\n            result = max(result, diameter_helper(v, set(), 0))\n        return result\n\n    n, m = map(int, stdin.readline().split())\n    edges = get_edges(n, m, [])\n    adjacency_list = get_adjacency_list(edges)\n    diameter = get_diameter(adjacency_list)\n    print(diameter)\n"
    },
    {
        "number": 4374,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution(4,2)\n    2\n    >>> solution(2,0)\n    1\n    >>> solution(3,2)\n    2\n    '''\n    lines = stdin.split('\\n')\n    n, m = [int(x) for x in lines[0].split()]\n    edges = []\n    for i in range(1, m+1):\n        edges.append([int(x) for x in lines[i].split()])\n\n    new_edges = []\n    # trees = [set() for _ in range(n)]\n    for edge in edges:\n        if edge[0] == edge[1]:\n            continue\n        new_edges.append(edge)\n        # trees[edge[0]].add(edge[1])\n        # trees[edge[1]].add(edge[0])\n    edges = new_edges\n    \n    if len(edges) < n - 1:\n        return 1\n\n    parents = [i for i in range(n)]\n\n    def find_parent(i):\n        if parents[i] == i:\n            return i\n        return find_parent(parents[i])\n\n    def union(i, j):\n        parents[find_parent(j)] = find_parent(i)\n\n    for edge in edges:\n        union(edge[0], edge[1])\n        if len(set(parents)) < n:\n            return len(edges)\n    return len(edges)\n"
    },
    {
        "number": 4374,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Add edges to graph until it becomes tree and return diameter of the tree.\"\"\"\n    pass\n"
    },
    {
        "number": 4374,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n, m = [int(x) for x in lines[0].split()]\n    edges = set()\n    for _ in range(m):\n        line = lines[1 + _]\n        v, u = [int(x) for x in line.split()]\n        edges.add((v, u))\n        edges.add((u, v))\n\n    if n == 1:\n        return str(0)\n\n    vertices = set()\n    for v, u in edges:\n        vertices.add(v)\n        vertices.add(u)\n    vertices = list(vertices)\n\n    adj_list = {}\n    for v, u in edges:\n        if v not in adj_list:\n            adj_list[v] = set()\n        if u not in adj_list:\n            adj_list[u] = set()\n        adj_list[v].add(u)\n        adj_list[u].add(v)\n\n    diameters = []\n    for v in vertices:\n        diameter = 1\n        q = deque([(v, 0)])\n        visited = set()\n        while q:\n            u, depth = q.popleft()\n            if u in visited:\n                continue\n            visited.add(u)\n            diameter = max(diameter, depth)\n            for u2 in adj_list[u]:\n                if u2 not in visited:\n                    q.append((u2, depth + 1))\n        diameters.append(diameter)\n\n    diameter = max(diameters)\n    if len(diameters) == 1:\n        return str(diameter)\n    for d in diameters:\n        if d == diameter:\n            return str(d)"
    },
    {
        "number": 4374,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().strip().split())\n    graph = {i: set() for i in range(1, n + 1)}\n    for _ in range(m):\n        v, u = map(int, stdin.readline().strip().split())\n        graph[v].add(u)\n        graph[u].add(v)\n    diameter = 0\n    for i in graph:\n        graph[i] = list(graph[i])\n        for j in graph[i]:\n            for k in graph[j]:\n                if k not in graph[i]:\n                    diameter = max(diameter, len(graph[i]) + len(graph[j]) + len(graph[k]))\n    return str(diameter)\n"
    },
    {
        "number": 4374,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return ''\n"
    },
    {
        "number": 4374,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    pass\n"
    },
    {
        "number": 4374,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n"
    },
    {
        "number": 4374,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    G = [[] for _ in range(n)]\n    for _ in range(m):\n        v, u = map(int, stdin.split())\n        G[v - 1].append(u - 1)\n        G[u - 1].append(v - 1)\n\n    def dfs(u):\n        for v in G[u]:\n            if v not in visited:\n                visited.add(v)\n                dfs(v)\n                max_diameter = max(max_diameter, len(visited) - 1)\n\n    max_diameter = 0\n    for i in range(n):\n        visited = set()\n        dfs(i)\n        max_diameter = max(max_diameter, len(visited))\n\n    return str(max_diameter)\n"
    },
    {
        "number": 4374,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # max_diameter = 0\n    # graph = defaultdict(set)\n    # for line in stdin.splitlines():\n    #     v, u = map(int, line.split())\n    #     graph[v].add(u)\n    #     graph[u].add(v)\n    #\n    # def dfs(graph: defaultdict, start: int, path_len: int, path: List[int], max_diameter: int):\n    #     path.append(start)\n    #     if len(path) > 2:\n    #         max_diameter = max(max_diameter, path_len)\n    #         return path_len\n    #     for u in graph[start]:\n    #         if u not in path:\n    #             path_len = dfs(graph, u, path_len + 1, path.copy(), max_diameter)\n    #     return path_len\n    #\n    #\n    # for u in range(1, len(graph) + 1):\n    #     max_diameter = max(max_diameter, dfs(graph, u, 0, [], 0))\n    #\n    # print(max_diameter)\n\n    graph = defaultdict(list)\n    for line in stdin.splitlines():\n        v, u = map(int, line.split())\n        graph[v].append(u)\n        graph[u].append(v)\n\n    # dfs\n    def dfs(graph: defaultdict, start: int, path_len: int, path: List[int]):\n        path.append(start)\n        if len(path) > 2:\n            return path_len\n\n        for u in graph[start]:\n            if u not in path:\n                path_len = max(path_len, dfs(graph, u, path_len + 1, path))\n        return path_len\n\n    # dfs\n    def dfs2(graph: defaultdict, start: int, path_len: int, path: List[int]):\n        path.append(start)\n        if len(path) > 2:\n            return path_len\n\n        for u in graph[start]:\n            if u not in path:\n                path_len = max(path_len, dfs2(graph, u, path_len + 1, path))\n        return path_len\n\n    diameter = max([dfs(graph, u, 0, []) for u in graph.keys()])\n    diameter2 = max([dfs2(graph, u, 0, []) for u in graph.keys()])\n    print(diameter, diameter2)\n"
    },
    {
        "number": 4375,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    "
    },
    {
        "number": 4375,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    k = int(lines[0].split(' ')[1])\n    graph = list(map(int, lines[1].split(' ')))\n\n    n = len(graph)\n    dp = [0] * n\n    dp[0] = graph[0]\n\n    for i in range(1, n):\n        dp[i] = dp[i - 1] + graph[i]\n\n    ans = 0\n    for i in range(n):\n        for j in range(i + k, n):\n            if j - i < k:\n                break\n            ans = max(ans, dp[j] - dp[i - 1])\n\n    return ans\n\nprint(solution(stdin))"
    },
    {
        "number": 4375,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    edge_list = [map(int, stdin.readline().split()) for _ in range(n - 1)]\n    edge_list = [[edge[0] - 1, edge[1] - 1] for edge in edge_list]\n    \n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    for u, v in edge_list:\n        dp[u][v] = dp[v][u] = 1\n    \n    max_dist = 0\n    for l in range(n):\n        for start in range(n):\n            for finish in range(start + max_dist, n):\n                dp[start][finish] = max(dp[start][finish], dp[start][l] + dp[l][finish])\n                max_dist = max(max_dist, dp[start][finish])\n    \n    return max_dist"
    },
    {
        "number": 4375,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    n, k = map(int, stdin.split(' '))\n    weights = list(map(int, stdin.split('\\n')[1:]))\n    connected = [[i, j, i < j] for i, j in itertools.combinations(range(n), 2)]\n    solutions = [0] * n\n    for i in range(n):\n        for j in range(i, n):\n            if connected[i][2] and connected[j][2]:\n                if abs(connected[i][0] - connected[j][0]) <= k:\n                    solutions[i] += weights[j]\n                    solutions[j] += weights[i]\n    return max(solutions)\n"
    },
    {
        "number": 4375,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def add_edge(u: int, v: int) -> None:\n        nonlocal graph\n        graph[u][v] = 1\n        graph[v][u] = 1\n\n    n, k = [int(x) for x in stdin.split(' ')]\n    graph = [[0] * n for _ in range(n)]\n    for i in range(n - 1):\n        u, v = [int(x) for x in stdin.split(' ')[2 * i: 2 * (i + 1)]]\n        add_edge(u, v)\n\n    res = 0\n    for i in range(n):\n        sum_dist = [0] * n\n        q = deque([i])\n        visited = [0] * n\n        visited[i] = 1\n        while q:\n            u = q.popleft()\n            for v in range(n):\n                if graph[u][v] and not visited[v]:\n                    q.append(v)\n                    visited[v] = 1\n                    sum_dist[v] = sum_dist[u] + 1\n        if all(sum_dist[i] > k for i in range(n)):\n            res = max(res, sum_dist[i])\n\n    return str(res)"
    },
    {
        "number": 4375,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    from collections import defaultdict\n    from heapq import heappop, heappush\n    from math import inf\n\n    n, k = map(int, stdin.readline().split())\n    edges = [list(map(int, stdin.readline().split())) for _ in range(n - 1)]\n    graph = defaultdict(list)\n    for u, v in edges:\n        graph[u].append(v)\n        graph[v].append(u)\n    total_weight = [0] * n\n    for node, weight in enumerate(map(int, stdin.readline().split())):\n        total_weight[node] = weight\n    queue = [(total_weight[node], node, 0) for node in range(n)]\n    heapq.heapify(queue)\n    visited = [inf] * n\n    visited[0] = 0\n    while queue:\n        weight, node, dist = heappop(queue)\n        if visited[node] < dist:\n            continue\n        for u in graph[node]:\n            if visited[u] <= dist + 1:\n                continue\n            visited[u] = dist + 1\n            heappush(queue, (total_weight[u] + weight, u, dist + 1))\n    return max(total_weight) if min(visited) >= k else -1\n    '''\n    from collections import defaultdict\n    from math import inf\n\n    n, k = map(int, stdin.readline().split())\n    edges = [list(map(int, stdin.readline().split())) for _ in range(n - 1)]\n    graph = defaultdict(list)\n    for u, v in edges:\n        graph[u].append(v)\n        graph[v].append(u)\n    total_weight = [0] * n\n    for node, weight in enumerate(map(int, stdin.readline().split())):\n        total_weight[node] = weight\n    queue = [(total_weight[node], node, 0) for node in range(n)]\n    queue = sorted(queue, key=lambda x: x[0], reverse=True)\n    visited = [inf] * n\n    visited[0] = 0\n    while queue:\n        weight, node, dist = queue.pop()\n        if visited[node] < dist:\n            continue\n        visited[node] = dist\n        for u in graph[node]:\n            if visited[u] <= dist + 1:\n                continue\n            queue.append((total_weight[u] + weight, u, dist + 1))\n    return max(total_weight) if min(visited) >= k else -1\n\n\ndef"
    },
    {
        "number": 4375,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def kth_largest(arr, k):\n        return arr[-k]\n\n    input_str = stdin.split(\"\\n\")\n    n, k = int(input_str[0].split(\" \")[0]), int(input_str[0].split(\" \")[1])\n    weights = [int(i) for i in input_str[1].split(\" \")]\n    adj_matrix = [[0 for _ in range(n)] for _ in range(n)]\n    for i in range(n - 1):\n        u, v = map(int, input_str[i + 2].split(\" \"))\n        adj_matrix[u - 1][v - 1] = 1\n        adj_matrix[v - 1][u - 1] = 1\n\n    def find_dist_less_than(weights, adj_matrix, dist):\n        dist.sort()\n        n = len(dist)\n        for i in range(n):\n            for j in range(n):\n                if adj_matrix[i][j] == 1 and dist[i] < dist[j]:\n                    dist[j] = dist[i]\n        dist.sort()\n        return dist\n\n    def find_max_dist_less_than(weights, adj_matrix, dist, k):\n        dist = find_dist_less_than(weights, adj_matrix, dist)\n        return kth_largest(dist, k)\n\n    ans = find_max_dist_less_than(weights, adj_matrix, weights, k)\n    return str(ans)\n"
    },
    {
        "number": 4375,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.strip().split('\\n')\n    n, k = int(input[0].split()[0]), int(input[0].split()[1])\n    nums = list(map(int, input[1].split()))\n    graph = {}\n    for i in range(n - 1):\n        u, v = map(int, input[i + 2].split())\n        if u not in graph:\n            graph[u] = set()\n        if v not in graph:\n            graph[v] = set()\n        graph[u].add(v)\n        graph[v].add(u)\n\n    def dfs(graph, vertex, visited, weight):\n        if vertex in visited:\n            return 0\n        visited.add(vertex)\n        if vertex not in graph:\n            return weight\n        for child in graph[vertex]:\n            if child in visited:\n                continue\n            child_w = dfs(graph, child, visited, weight + 1)\n            if child_w > weight:\n                weight = child_w\n        return weight\n\n    max_weight = 0\n    for vertex in graph.keys():\n        weight = dfs(graph, vertex, set(), 0)\n        if weight > max_weight:\n            max_weight = weight\n    return max_weight\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4375,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    n, k = [int(x) for x in stdin.split(\"\\n\")[0].split()]\n    a = [int(x) for x in stdin.split(\"\\n\")[1].split()]\n    ad = {i: a[i - 1] for i in range(1, n + 1)}\n    adj = [[] for _ in range(n + 1)]\n    for i in range(n - 1):\n        u, v = [int(x) for x in stdin.split(\"\\n\")[i + 2].split()]\n        adj[u].append(v)\n        adj[v].append(u)\n    max_degree = 0\n    visited = set()\n    for i in range(n + 1):\n        if adj[i]:\n            degree = len(adj[i])\n            if degree > max_degree:\n                max_degree = degree\n            visited.add(i)\n    cur = [adj[i] for i in range(n + 1) if len(adj[i]) == max_degree]\n    while len(cur) > 0:\n        deg = len(cur[0])\n        if deg >= k:\n            break\n        for i in range(len(cur)):\n            for j in range(len(cur[i])):\n                if cur[i][j] not in visited:\n                    visited.add(cur[i][j])\n                    for x in adj[cur[i][j]]:\n                        adj[x].remove(cur[i][j])\n                    adj[cur[i][j]].clear()\n                    cur.append(adj[cur[i][j]])\n                    for y in range(len(adj[cur[i][j]])):\n                        adj[cur[i][j]][y] = adj[adj[cur[i][j]][y]][0]\n                    del adj[cur[i][j]]\n            cur[i].clear()\n        cur = [adj[i] for i in range(n + 1) if len(adj[i]) == max_degree]\n    return sum(a) - 2 * sum(a[i] for i in visited)"
    },
    {
        "number": 4375,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(i) for i in stdin.split(' ')]\n    l = [int(i) for i in stdin.split(' ')]\n    w = [[0] * n for i in range(n)]\n    for i in range(n-1):\n        u, v = [int(j) for j in stdin.split(' ')]\n        u, v = u-1, v-1\n        w[u][v] = w[v][u] = 1\n    m = [[0] * n for i in range(n)]\n    for k in range(n):\n        for i in range(n):\n            for j in range(n):\n                m[i][j] = max(m[i][j], m[i][k] + m[k][j])\n    d = [0] * n\n    for i in range(n):\n        d[i] = sum(w[i][j] for j in range(n) if m[i][j] >= k + 1)\n    return d\n"
    },
    {
        "number": 4376,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    dorms: List[int] = [int(n) for n in stdin.split(' ')[1][:-1].split(' ')]\n    room_nums: List[int] = [int(n) for n in stdin.split(' ')[2][:-1].split(' ')]\n    \n    assert len(dorms) == len(room_nums), \"Different numbers of dorms and rooms in input\"\n    assert all(1 <= n <= 10000 for n in dorms), \"Incorrect dorm number\"\n    assert all(1 <= n <= 10000 for n in room_nums), \"Incorrect room number\"\n\n    for i in range(len(dorms)):\n        assert 0 < room_nums[i] <= dorms[i], f\"Incorrect room number in dorm {i+1}\"\n        assert 0 < room_nums[i] <= dorms[i], f\"Incorrect room number in dorm {i+1}\"\n\n    room_nums = [room_nums[i] - 1 for i in range(len(room_nums))]\n    dorms = [i + 1 for i in range(len(dorms))]\n    \n    dorms_to_rooms: Dict[int, List[int]] = {}\n    rooms_to_dorms: Dict[int, int] = {}\n    for room_num, dorm in zip(room_nums, dorms):\n        dorms_to_rooms[dorm] = dorms_to_rooms.get(dorm, []) + [room_num]\n        rooms_to_dorms[room_num] = dorm\n    \n    rooms_to_room_nums: Dict[int, int] = {}\n    for room_num in range(dorms[0]):\n        rooms_to_room_nums[room_num] = room_num\n    \n    rooms_to_room_nums.update({room_num + 1: room_num + 1 for room_num in range(dorms[0])})\n    rooms_to_room_nums.update({room_num + 2: room_num + 1 for room_num in range(dorms[0])})\n    \n    res = []\n    for room_num, room_nums_ in rooms_to_room_nums.items():\n        dorm = rooms_to_dorms[room_num]\n        room_nums = dorms_to_rooms.get(dorm, [])\n        if len(room_nums) == 1:\n            res.append((dorm, room_nums[0]))\n        else:\n            assert len(room_nums) == 2, \"Incorrect number of rooms\"\n            res.append((dorm, room_nums[0]))\n            res.append((dorm, room_nums[1]))\n    \n    return '\\n'.join(' '.join(map(str, nums)) for nums in res)\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4376,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    dormitory = stdin[0].split(' ')\n    m = int(dormitory[0])\n    n = int(dormitory[1])\n    rooms = list(map(int, stdin[1].split(' ')))\n    letters = list(map(int, stdin[2].split(' ')))\n    letters.sort()\n    dormitory_num = [0 for i in range(n)]\n    room_num = [0 for i in range(n)]\n    for i in range(m):\n        for j in range(n):\n            if rooms[j] <= letters[i]:\n                dormitory_num[j] += 1\n                room_num[j] = letters[i]\n                break\n    print(dormitory_num)\n    print(room_num)\n    for i in range(m):\n        print(dormitory_num[i], room_num[i])\n\nsolution(input())\n"
    },
    {
        "number": 4376,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Your solution goes here.\n    '''\n    # stdin = stdin.split('\\n')\n    n, m = map(int, stdin.split(' ')[:2])\n    rooms = list(map(int, stdin.split(' ')[2:]))\n    letters = stdin.split('\\n')[1:]\n\n    rooms.sort()\n    letters.sort()\n\n    d = {}\n    for room, letter in zip(rooms, letters):\n        d[letter] = room\n\n    for i in range(m):\n        print(d[letters[i]], d[letters[i]] + 1)\n\n    return ''\n"
    },
    {
        "number": 4376,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split(' ')]\n    a = [int(x) for x in stdin.split(' ')[1::2]]\n    b = [int(x) for x in stdin.split(' ')[::2]]\n    a.sort()\n    b.sort()\n    i = 0\n    d = [1]\n    for x in b:\n        while i + 1 < len(a) and x >= a[i + 1]:\n            i += 1\n        d.append(i + 1)\n    r = []\n    for x in stdin.split('\\n')[1:]:\n        a, b = x.split(' ')\n        r.append('{} {}'.format(d.index(int(a)) + 1, int(b) - 1))\n    return '\\n'.join(r)\n"
    },
    {
        "number": 4376,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split('\\n')[0].split())\n    dormitory = list(map(int, stdin.split('\\n')[1].split()))\n    room = list(map(int, stdin.split('\\n')[2].split()))\n    room.sort()\n    dormitory.sort()\n    \n    res = []\n    for i in range(m):\n        temp = int(stdin.split('\\n')[3+i].split()[1])\n        if temp in room:\n            res.append([i+1, room.index(temp)+1])\n    \n    return '\\n'.join(map(str, res))\n"
    },
    {
        "number": 4376,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4376,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4376,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    dormitories = list(map(int, stdin.split()))\n    dormitories.insert(0, 0)\n    room = list(map(int, stdin.split()))\n    room.insert(0, 0)\n    dormitory_numbers = []\n    dormitory_rooms = []\n    for i in range(n+1):\n        dormitory_numbers.append(sum(dormitories[:i+1]))\n        dormitory_rooms.append(sum(room[:dormitory_numbers[i]]))\n    for j in range(m):\n        print(dormitory_numbers[room[j]], dormitory_rooms[room[j]])\n    return ''"
    },
    {
        "number": 4376,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    rooms = map(int, stdin.split()[:n])\n    lst = sorted(map(int, stdin.split()[n:]))\n    rooms = [0] + list(accumulate(rooms))\n\n    result = []\n    for i in range(m):\n        target = int(stdin.split()[-1 * (i + 1)])\n        idx = bisect.bisect_right(rooms, target)\n        result.append((idx, target - rooms[idx - 1]))\n\n    return '\\n'.join(' '.join(map(str, x)) for x in result)\n"
    },
    {
        "number": 4376,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3 6\\n10 15 12\\n1 9 12 23 26 37\")\n    '1 1\\n1 9\\n2 2\\n2 13\\n3 1\\n3 12\\n'\n    \"\"\"\n    n, m = map(int, stdin.split())\n    room_num = list(map(int, stdin.split()))\n    dorm_num = list(map(int, stdin.split()))\n    num_index = 0\n    dorm_index = 0\n    room_index = 0\n    for room_num_index in range(m):\n        if room_num[num_index] < room_num[room_num_index]:\n            room_num[num_index], room_num[room_num_index] = room_num[room_num_index], room_num[num_index]\n            dorm_num[dorm_index], dorm_num[room_index] = dorm_num[room_index], dorm_num[dorm_index]\n            num_index += 1\n            dorm_index += 1\n            room_index += 1\n        elif room_num[num_index] > room_num[room_num_index]:\n            num_index += 1\n        else:\n            dorm_index += 1\n            room_index += 1\n\n    for num_index in range(m):\n        print(dorm_num[num_index], room_num[num_index])\n"
    },
    {
        "number": 4377,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    if a + b == c + d:\n        return str(a) + \" \" + str(b) + \" \" + str(c)\n    elif a + c == b + d:\n        return str(a) + \" \" + str(c) + \" \" + str(b)\n    elif b + c == a + d:\n        return str(b) + \" \" + str(c) + \" \" + str(a)\n    elif a + b + c == d:\n        return str(a) + \" \" + str(b) + \" \" + str(c)\n    elif a + b + c == a + d:\n        return str(a) + \" \" + str(b) + \" \" + str(c)\n    elif a + b + c == b + d:\n        return str(a) + \" \" + str(b) + \" \" + str(c)\n    else:\n        return str(a) + \" \" + str(c) + \" \" + str(b)\n    return str(a) + \" \" + str(b) + \" \" + str(c)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4377,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = [int(stdin) for stdin in stdin.split()]\n    \n    return str(a + b) + \" \" + str(c + b) + \" \" + str(a + c) + \" \" + str(a + b + c)\n"
    },
    {
        "number": 4377,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    nums = [int(line) for line in stdin.split('\\n')[1:]]\n    pairs = {x + y for x in nums for y in nums if x!= y}\n    triplets = {x + y + z for x in nums for y in nums for z in nums if x!= y and x!= z}\n    print(pairs, triplets)\n    return '\\n'.join([str(a) for a in pairs.intersection(triplets)])"
    },
    {
        "number": 4377,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    arr = [int(x) for x in stdin.split()]\n    s = sum(arr)\n    a, b, c = 0, 0, 0\n    for i in range(4):\n        for j in range(4):\n            for k in range(4):\n                if i!= j and i!= k and j!= k:\n                    if arr[i] + arr[j] + arr[k] == s:\n                        a = arr[i]\n                        b = arr[j]\n                        c = arr[k]\n    return str(a) + \" \" + str(b) + \" \" + str(c)\n\nprint(solution(\"3 6 5 4\"))\n"
    },
    {
        "number": 4377,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    numbers = [int(i) for i in stdin.split(' ')]\n    a = numbers[0] + numbers[1]\n    b = numbers[0] + numbers[2]\n    c = numbers[1] + numbers[2]\n    return str(a) +'' + str(b) +'' + str(c)\n"
    },
    {
        "number": 4377,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = sorted(map(int, stdin.split()))\n    b, c, d = b-a, c-a, d-a\n    return \"%d %d %d\" % (a, b, c)"
    },
    {
        "number": 4377,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x1, x2, x3, x4 = map(int, stdin.split(' '))\n    x1, x2, x3, x4 = sorted([x1, x2, x3, x4])\n    if x1 == x2:\n        return str(x1) +'' + str(x2) +'' + str(x3)\n    if x1 == x3:\n        return str(x1) +'' + str(x3) +'' + str(x2)\n    if x2 == x3:\n        return str(x2) +'' + str(x3) +'' + str(x1)\n    return str(x1) +'' + str(x2) +'' + str(x3) +'' + str(x4)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4377,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x = list(map(int, stdin.split(' ')))\n    x.sort()\n    z = {}\n    for i in range(len(x)):\n        for j in range(len(x)):\n            if i == j:\n                continue\n            z[x[i] + x[j]] = [i, j]\n    for i in range(len(x)):\n        for j in range(len(x)):\n            if i == j:\n                continue\n            if x[i] + x[j] not in z:\n                continue\n            z[x[i] + x[j]].append(i)\n            z[x[i] + x[j]].append(j)\n    for i in range(len(x)):\n        for j in range(len(x)):\n            if i == j:\n                continue\n            if x[i] + x[j] not in z:\n                continue\n            for k in range(len(x)):\n                if i == k:\n                    continue\n                if k == j:\n                    continue\n                if x[i] + x[j] == x[i] + x[k]:\n                    z[x[i] + x[j]].append(k)\n    for i in range(len(x)):\n        for j in range(len(x)):\n            if i == j:\n                continue\n            if x[i] + x[j] not in z:\n                continue\n            for k in range(len(x)):\n                if i == k:\n                    continue\n                if k == j:\n                    continue\n                if x[i] + x[j] == x[k] + x[i]:\n                    z[x[i] + x[j]].append(k)\n    for i in range(len(x)):\n        for j in range(len(x)):\n            if i == j:\n                continue\n            if x[i] + x[j] not in z:\n                continue\n            for k in range(len(x)):\n                if i == k:\n                    continue\n                if k == j:\n                    continue\n                if x[i] + x[j] == x[k] + x[k]:\n                    z[x[i] + x[j]].append(k)\n    for i in range(len(x)):\n        for j in range(len(x)):\n            if i == j:\n                continue\n            if x[i] + x[j] not in z:\n                continue\n            for k in range(len(x)):\n                if i == k:\n                    continue\n                if k == j:\n                    continue\n                if x[i] + x[j] == x[k] + x[k]:\n                    z[x[i] + x[j]].append(k)\n    ans = []\n    for i in z:\n        if len(z[i]) == 4:\n            ans.append(i)\n    ans.sort()\n    return str(ans[0]) +'' + str(ans[1]) +'' + str(ans[2])\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4377,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    input_line = stdin.split()\n    A = [int(i) for i in input_line]\n    A.sort()\n    print(*[A[0], A[1], A[2]], sep=' ')\n    return \"\""
    },
    {
        "number": 4377,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    x = list(map(int, stdin.split()))\n    x.sort()\n    a = x[0] + x[1]\n    b = x[0] + x[2]\n    c = x[1] + x[2]\n    d = x[0] + x[1] + x[2]\n    print(a, b, c, d)\n"
    },
    {
        "number": 4378,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4378,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    lamps = stdin.readline().strip()\n    ans, count = 0, 0\n    lamps = [lamps[i] for i in range(n)]\n    lamps.sort()\n    for i in range(n):\n        if lamps[i]!= lamps[i - 1]:\n            ans += 1\n    return f\"{ans}\\n{''.join(lamps)}\"\n"
    },
    {
        "number": 4378,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.split('\\n')\n    n = int(input_data[0])\n    s = input_data[1]\n    result = '1' * len(s)\n    for i in range(len(s) - 1):\n        if s[i]!= s[i + 1]:\n            result = result[:i + 1] + s[i] + result[i + 1:]\n            result = result[:i + 2] + s[i] + result[i + 2:]\n    return result\n"
    },
    {
        "number": 4378,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    count = 0\n    for i in range(len(stdin)):\n        if stdin[i] == stdin[i+1]:\n            count += 1\n    return stdin[:count+1] + stdin[count+1:].replace(stdin[count], 'R')\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4378,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = list(stdin)\n    k = [0, 0, 0]\n    a = []\n    for i in range(n):\n        if s[i] == 'R':\n            k[0] += 1\n        if s[i] == 'G':\n            k[1] += 1\n        if s[i] == 'B':\n            k[2] += 1\n    k.sort()\n    for i in range(k[2]):\n        a.append('G')\n    for i in range(k[1]):\n        a.append('B')\n    for i in range(k[0]):\n        a.append('R')\n    s = ''.join(a)\n    return s\n"
    },
    {
        "number": 4378,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    num_of_lamps = int(stdin.split(\"\\n\")[0])\n    color = stdin.split(\"\\n\")[1]\n    color_list = []\n    for i in color:\n        color_list.append(i)\n    color_dict = {'R': color_list.count('R'), 'G': color_list.count('G'), 'B': color_list.count('B')}\n    color_dict_sorted = sorted(color_dict.items(), key=lambda x: x[1], reverse=True)\n    print(color_dict_sorted)\n    if color_dict_sorted[0][1] > color_dict_sorted[1][1]:\n        return color_dict_sorted[0][0] * color_dict_sorted[1][0]\n    else:\n        return color_dict_sorted[0][0] * color_dict_sorted[0][0]\n"
    },
    {
        "number": 4378,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nprint(solution('input'))\n"
    },
    {
        "number": 4378,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    s = stdin.split()[1]\n    s_set = list(set(s))\n    s_set.sort()\n    print(s_set)\n    current = s_set[0]\n    count = 0\n    for c in s:\n        if c!= current:\n            count += 1\n            current = c\n    return count\n"
    },
    {
        "number": 4378,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    colors = stdin.split(\"\\n\")[1]\n    ncolors = {\"R\": 0, \"G\": 0, \"B\": 0}\n    for i in colors:\n        ncolors[i] += 1\n    \n    ncolors[\"R\"] //= 2\n    ncolors[\"G\"] //= 2\n    ncolors[\"B\"] //= 2\n    \n    def getMax(d):\n        return max(d.values())\n    \n    max_color = getMax(ncolors)\n    i = 0\n    while i < max_color:\n        ncolors[\"R\"] += 1\n        ncolors[\"G\"] += 1\n        ncolors[\"B\"] += 1\n        max_color = getMax(ncolors)\n        i += 1\n    print(ncolors)\n    return \"\""
    },
    {
        "number": 4378,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, s = stdin.splitlines()\n    n = int(n)\n    c = Counter(s)\n    r = 0\n    while True:\n        if len(set(s)) == 1:\n            break\n        l = min(c.values())\n        d = {k: v for k, v in c.items() if v == l}\n        r += 1\n        for k in d:\n            s = s.replace(k, \"\")\n            c = Counter(s)\n    print(r)\n    print(s)\n"
    },
    {
        "number": 4379,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    length = int(stdin[0])\n    numbers = list(map(int, stdin[1:].split(' ')))\n    numbers.sort()\n    numbers = [0] + numbers + [10 ** 9 + 1]\n    lengths = [0] * (length + 1)\n    lengths[0] = 1\n    lengths[1] = 1\n    for i in range(2, length + 1):\n        for j in range(i - 1, 0, -1):\n            if numbers[i] - numbers[j] <= 1:\n                lengths[i] += lengths[j]\n                break\n    return str(lengths[-1])\n"
    },
    {
        "number": 4379,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4379,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, *nums = stdin.split('\\n')\n    nums = [int(num) for num in nums]\n    \n    s = nums[0]\n    r = 1\n    for i in range(1, len(nums)):\n        if nums[i] <= s:\n            r += 1\n            s = nums[i]\n        else:\n            break\n        \n    return r, [i+1 for i, num in enumerate(nums) if num == s]\n    \n    \n"
    },
    {
        "number": 4379,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n"
    },
    {
        "number": 4379,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    A = [int(x) for x in stdin.readline().strip().split(' ')]\n    # The following check is needed, because in the case of an input like [5, 1, 2, 3, 4],\n    # both 1 and 2 can be valid answers.\n    if not A:\n        return 0\n    for k in range(n + 1):\n        for i in range(n - k + 1):\n            if A[i] <= A[i + 1]:\n                A[i + 1] = None\n            else:\n                break\n        for j in range(n - k, n):\n            if A[j - 1] <= A[j]:\n                A[j] = None\n            else:\n                break\n    A = [i for i in A if i]\n    return max(A)\n"
    },
    {
        "number": 4379,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.splitlines()\n    n = int(input[0])\n    seq = list(map(int, input[1].split()))\n    ans, c = 0, 0\n    seq.sort()\n    for i in range(1, n):\n        if seq[i] == seq[i - 1] + 1:\n            c += 1\n        else:\n            ans = max(ans, c)\n            c = 0\n    ans = max(ans, c)\n    return str(ans)"
    },
    {
        "number": 4379,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4379,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = list(map(int, stdin.readline().split()))\n    m = n + 1\n    dp = [[0 for i in range(m)] for j in range(n + 1)]\n    k = 0\n    for i in range(1, n + 1):\n        for j in range(1, m):\n            if arr[i - 1] <= j:\n                dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - arr[i - 1]] + 1)\n                if dp[i][j] > k:\n                    k = dp[i][j]\n                    ind = i\n            else:\n                dp[i][j] = dp[i - 1][j]\n    ans = [i for i in range(n) if dp[i + 1][j] == k]\n    if ans:\n        print(k)\n        print(*ans)\n    else:\n        print(0)\n"
    },
    {
        "number": 4379,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    #pass\n"
    },
    {
        "number": 4379,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n"
    },
    {
        "number": 4380,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split(' '))\n    return 'Yes' if ((a + b) % 2 == 1) else 'No'\n"
    },
    {
        "number": 4380,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split(' '))\n    if a * b % 2 == 1:\n        return 'Yes'\n    return 'No'\n\ndef"
    },
    {
        "number": 4380,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split(' '))\n    if a * b % 2 == 1:\n        print('Yes')\n    else:\n        print('No')"
    },
    {
        "number": 4380,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split(' '))\n    for c in range(1, 4):\n        if a * b * c % 2!= 0:\n            print('Yes')\n            return\n    print('No')\n    return"
    },
    {
        "number": 4380,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B = [int(x) for x in stdin.split(' ')]\n    if (A*B)%2!= 0:\n        return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 4380,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n  a, b = map(int, stdin.split())\n  return 'Yes' if a * b * 3 % 2 == 1 else 'No'"
    },
    {
        "number": 4380,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split()\n    A = int(input_list[0])\n    B = int(input_list[1])\n    C = int(input_list[2])\n    if (A*B*C % 2) == 0:\n        return \"No\"\n    else:\n        return \"Yes\""
    },
    {
        "number": 4380,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.split()\n\n    a = int(inputs[0])\n    b = int(inputs[1])\n\n    if a * b % 2 == 1:\n        print('Yes')\n    else:\n        print('No')"
    },
    {
        "number": 4380,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B = (int(x) for x in stdin.split())\n    if A == 1:\n        return \"Yes\" if B == 1 else \"No\"\n    return \"Yes\" if B == 3 and 2*A % 3 == 1 else \"No\"\n"
    },
    {
        "number": 4380,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B = [int(x) for x in stdin.split()]\n    return 'Yes' if A * B % 2 == 1 else 'No'\n"
    },
    {
        "number": 4381,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"The function return solution\"\"\"\n    x, y = map(int, stdin.split())\n    print(x * y // 2)\n    return '110'\n"
    },
    {
        "number": 4381,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return '110'\n"
    },
    {
        "number": 4381,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    if x <= y:\n        return x\n    else:\n        return x + (y * 2 - x) / 2\n"
    },
    {
        "number": 4381,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    X, Y = map(int, stdin.split(\" \"))\n    if X > Y:\n        return str(int(X * 2))\n    else:\n        return str(int(X * 2 - Y * 0.5))\n\"\"\"\n\ndef"
    },
    {
        "number": 4381,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split(' '))\n    if (x * 2 + y) % 2 == 0:\n        print(x * 2 + y)\n    else:\n        print((x * 2 + y) // 2 + x)\n        #print((x * 2 + y) // 2 + x)"
    },
    {
        "number": 4381,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # split input\n    # X Y\n    # map to int\n    # cost of X to Y by train: X * 2 + Y * 2 / 2\n    # cost of X to Y by bus: X + Y * 2 / 2\n    # total cost: X * 2 + Y * 2 / 2 + Y * 2 / 2\n    # total cost - X * 2 + Y * 2 / 2 = Y * 2\n    # total cost / 2 = Y\n    # return Y\n    _, Y = map(int, stdin.split())\n    return str(int(Y * 2 / 2))\n"
    },
    {
        "number": 4381,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x, y = list(map(int, stdin.split()))\n    if x == 1:\n        return str(y * 2)\n    else:\n        return str(x * y * 2)\n"
    },
    {
        "number": 4381,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n  # your solution\n  return '110'"
    },
    {
        "number": 4381,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    return str(int(a + b) // 2 + c)\n\ndef"
    },
    {
        "number": 4381,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x, y = list(map(int, stdin.split()))\n    if y == 0:\n        return \"0\"\n    if x > y:\n        return str(x + ((x - 1) // y + 1) * y)\n    return str(x + (x // y) * y)"
    },
    {
        "number": 4382,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\ndef"
    },
    {
        "number": 4382,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(math.factorial(n))\n"
    },
    {
        "number": 4382,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.split('\\n')\n    print(calc(n[0]))\n\n\ndef"
    },
    {
        "number": 4382,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    pass_min = int(stdin.readline().rstrip())\n    pass_max = int(stdin.readline().rstrip())\n    print(pass_max * 9)\n\nsolution(input())\n"
    },
    {
        "number": 4382,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    count = int(stdin.readline().strip())\n    num_arr = [0]*10\n    print(num_arr)\n    num_arr[0] = 1\n    for i in range(1, 10):\n        num_arr[i] = num_arr[i-1] * i\n    print(num_arr)\n    return num_arr\n\ndef"
    },
    {
        "number": 4382,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return"
    },
    {
        "number": 4382,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solve exercise and print result to stdout.\"\"\"\n    pass\n"
    },
    {
        "number": 4382,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    n = stdin\n    \n    def comb_n(n, r):\n        return int((factorial(n) / (factorial(r) * factorial(n-r))))\n    \n    return comb_n(int(n), 3)\n    \n"
    },
    {
        "number": 4382,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return number of possible passwords\"\"\"\n    \n    N = int(stdin)\n    \n    # Base Case\n    if N == 1:\n        return 9\n    \n    # Recursive case\n    return 9 * pow(10, N - 1)"
    },
    {
        "number": 4382,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    count = 0\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            for k in range(1, n + 1):\n                if (i!= j) and (j!= k) and (k!= i):\n                    count += 1\n    return count"
    },
    {
        "number": 4383,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    if x % 15 == 0 or x % 5 == 0 or x % 3 == 0:\n        return \"YES\"\n    else:\n        return \"NO\"\n    \n"
    },
    {
        "number": 4383,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns 'YES' if Takahashi's growth will be celebrated in Shichi-Go-San this time, otherwise returns 'NO'\"\"\"\n    X = int(stdin)\n    if (X % 5 == 0):\n        return 'YES'\n    else:\n        return 'NO'\n"
    },
    {
        "number": 4383,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    age = int(stdin)\n    if 7 <= age <= 9:\n        return 'YES'\n    if 3 <= age <= 6:\n        return 'YES'\n    if 1 <= age <= 2:\n        return 'YES'\n    if age >= 10:\n        return 'NO'\n    return 'NO'"
    },
    {
        "number": 4383,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    if x < 7 or x > 9:\n        return \"NO\"\n    elif x == 7:\n        return \"YES\"\n    else:\n        return \"YES\" if x % 5 == 0 else \"NO\"\n\"\"\""
    },
    {
        "number": 4383,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    b = 7 - a\n    if b % 3 == 0:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 4383,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Returns YES if Takahashi's growth will be celebrated, otherwise returns NO.\n    \"\"\"\n    Takahashi = int(stdin.readline())\n    if Takahashi < 7 or Takahashi > 9:\n        return \"NO\"\n    return \"YES\""
    },
    {
        "number": 4383,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \n    x = int(stdin)\n    \n    if x % 3 == 0 or x % 5 == 0:\n        return \"YES\"\n    else:\n        return \"NO\"\n    \n    \n"
    },
    {
        "number": 4383,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Input:\n    X\n\n    Output:\n    YES or NO\n\n    Example:\n    >>> solution('5')\n    YES\n    >>> solution('6')\n    NO\n    \"\"\"\n    x = int(stdin)\n    if x % 3 == 0:\n        return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 4383,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    age = int(stdin)\n    if age % 5 == 0:\n        return 'YES'\n    else:\n        return 'NO'\n"
    },
    {
        "number": 4383,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    X: int = int(stdin)\n    return \"YES\" if X % 3 == 0 else \"NO\""
    },
    {
        "number": 4384,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    return 'ABC'[N - 1]"
    },
    {
        "number": 4384,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    n = (n+999)%1000\n    n = n//100\n    return 'ABC'[n-1]\n\"\"\"\n\nimport sys\n\n\ndef"
    },
    {
        "number": 4384,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 1 or n > 1998:\n        raise ValueError\n    if n == 1:\n        return \"ABC\"\n    return \"ABC\" + str(n-1).zfill(3)"
    },
    {
        "number": 4384,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return \"ABC\""
    },
    {
        "number": 4384,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    print(stdin[0:3])\n    return stdin[0:3]\n\"\"\"\ndef"
    },
    {
        "number": 4384,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    rounds = int(stdin)\n    return \"ABC\" + str(rounds)"
    },
    {
        "number": 4384,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n  \"\"\"\n  Returns the label for the N-th AtCoder Beginner Contest problem\n  >>> solution(str(123))\n  'ABC'\n  \"\"\"\n  pass\n"
    },
    {
        "number": 4384,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return \"ABC\"\n\"\"\"\n\nn = int(input())"
    },
    {
        "number": 4384,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n  #your code here\n  return 'ABC'[len(stdin)-1:len(stdin):3]"
    },
    {
        "number": 4384,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin)\n    if num <= 999:\n        return 'ABC'[:num+1]\n    else:\n        for i in range(1000, num+1):\n            i = str(i)\n            num = int(i[1:4])\n            return 'ABC'[:num+1]\n"
    },
    {
        "number": 4385,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\na, b, c, d, e, k = map(int, stdin.split())"
    },
    {
        "number": 4385,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    antennas = sorted(map(int, stdin.split('\\n')[0:5]))\n    k = int(stdin.split('\\n')[5])\n\n    for i in range(0, len(antennas)):\n        for j in range(i+1, len(antennas)):\n            if (antennas[i] - antennas[j]) > k:\n                return \"Yay!\"\n    \n    return \":(\"\n"
    },
    {
        "number": 4385,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    \ndef"
    },
    {
        "number": 4385,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d, e, k = [int(i) for i in stdin.split('\\n')]\n    for i in range(max(a,b),min(a,b)+k):\n        for j in range(max(c,d),min(c,d)+k):\n            if i < j and (i+j > k or i+j < k):\n                return \"Yay!\"\n    return \":( \"\n\n\nimport sys\n\ndef"
    },
    {
        "number": 4385,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d, e, k = map(int, stdin.split())\n    not_k_list = []\n    for i in [a, b, c, d, e]:\n        for j in [a, b, c, d, e]:\n            if i < j:\n                not_k_list.append(j-i)\n    print(\"Yay!\" if max(not_k_list) > k else \":(\")\n    return \"\""
    },
    {
        "number": 4385,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d, e, k = map(int, stdin.split())\n    if k <= a + b or k <= a + c or k <= a + d or k <= a + e or k <= b + c or k <= b + d or k <= b + e or k <= c + d or k <= c + e or k <= d + e:\n        print(\"Yay!\")\n    else:\n        print(\":(\")"
    },
    {
        "number": 4385,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d, e, k = [int(x) for x in stdin.split()]\n\n    a_b = b - a\n    a_c = c - a\n    a_d = d - a\n    a_e = e - a\n    b_c = c - b\n    b_d = d - b\n    b_e = e - b\n    c_d = d - c\n    c_e = e - c\n    d_e = e - d\n\n    if k <= min(a_b, a_c, a_d, a_e,\n                b_c, b_d, b_e,\n                c_d, c_e,\n                d_e):\n        return 'Yay!'\n    else:\n        return ':('\n\ndef"
    },
    {
        "number": 4385,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.split('\\n')\n    n = [int(i) for i in n]\n    n.sort()\n    k = n[-1]\n    for i in range(len(n)-1):\n        for j in range(i+1, len(n)):\n            if n[j] - n[i] > k:\n                return 'Yay!'\n    return':( '\n"
    },
    {
        "number": 4385,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d, e, k = map(int, stdin.split())\n    return 'Yay!' if min(a, b) < c < e < max(a, b) and min(c, d) < e < max(c, d) and min(d, e) < max(d, e) and min(d, e) < k < max(d, e) else ':('\n\"\"\"\n\n\"\"\"\nGiven five integers a, b, c, d, and e, determine if there is a subset of three of them, with sum equal to 0.\n\n-----Input-----\nThe first line of input contains a single integer t denoting the number of test cases.\nThe first line of each test case contains five space-separated integers a, b, c, d, and e.\n\n-----Output-----\nFor each test case, print YES if there exists a subset of three of them with sum equal to 0. Otherwise, print NO.\n\n-----Sample Input-----\n2\n-5 -3 -3 -3 2\n3\n-7 4 3 -6\n\n-----Sample Output-----\nYES\nNO\n\n-----Explanation-----\nTestcase 1: There is a subset (a, b, c) with a+b+c = 0.\n\nTestcase 2: There is no subset (a, b, c) with a+b+c = 0.\n\"\"\"\n\n\"\"\"\ndef"
    },
    {
        "number": 4385,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d, e, k = [int(i) for i in stdin.split('\\n')]\n    if k < max(a, b, c, d, e):\n        return 'Yay!'\n    elif k > min(a, b, c, d, e):\n        return ':('\n    return 'Yay!'\n"
    },
    {
        "number": 4386,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split()[0]\n    a = int(a)\n    if a < 3200:\n        s = stdin.split()[1]\n        print(f\"red\")\n    else:\n        s = stdin.split()[1]\n        print(s)\n    return s"
    },
    {
        "number": 4386,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('3200\\npink')\n    pink\n    \"\"\"\n    a = int(stdin)\n    s = stdin[1:]\n    if a < 3200:\n        return'red'\n    return s"
    },
    {
        "number": 4386,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a >= 3200:\n        return \"pink\"\n    else:\n        return \"red\""
    },
    {
        "number": 4386,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a >= 3200:\n        return \"pink\"\n    else:\n        return \"red\"\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4386,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin[0])\n    if a >= 3200:\n        return stdin[1]\n    else:\n        return \"red\"\n"
    },
    {
        "number": 4386,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a: int = int(stdin)\n    if a < 3200:\n        print('red')\n    else:\n        print(stdin)\n"
    },
    {
        "number": 4386,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin.split(\"\\n\")[0])\n    s = stdin.split(\"\\n\")[1]\n    if a < 3200:\n        print(\"red\")\n    else:\n        print(s)\n\ndef"
    },
    {
        "number": 4386,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a: int = int(stdin.readline())\n    if a < 3200:\n        print(stdin.readline())\n    else:\n        print('red')\n"
    },
    {
        "number": 4386,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, s = stdin.split(\"\\n\")\n    if int(a) >= 3200:\n        return s\n    else:\n        return \"red\"\n"
    },
    {
        "number": 4386,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin[0])\n    if a < 3200:\n        print(stdin[1])\n    else:\n        print('red')\n"
    },
    {
        "number": 4387,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4387,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    ratings = [int(line) for line in stdin.splitlines()]\n    r = max(ratings)\n    print(r)\n    return 'ABC' if r < 1200 else 'ARC' if r < 2800 else 'AGC'"
    },
    {
        "number": 4387,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return \"ABC\" if int(stdin) < 1200 else \"ARC\" if int(stdin) < 2800 else \"AGC\"\n"
    },
    {
        "number": 4387,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n  R = int(stdin)\n  if R < 1200:\n    return 'ABC'\n  elif R < 2800:\n    return 'ARC'\n  else:\n    return 'AGC'\n  \nprint(solution(stdin))\n"
    },
    {
        "number": 4387,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    if r <= 1200:\n        return \"ABC\"\n    elif r <= 2800:\n        return \"ARC\"\n    else:\n        return \"AGC\""
    },
    {
        "number": 4387,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    R = int(stdin)\n    if R < 1200:\n        print(\"ABC\")\n    elif 1200 <= R < 2800:\n        print(\"ARC\")\n    else:\n        print(\"AGC\")\n"
    },
    {
        "number": 4387,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the name of the next contest rated for Takahashi.\"\"\"\n    rating = int(stdin)\n    if rating < 1200:\n        return \"ABC\"\n    elif rating < 2800:\n        return \"ARC\"\n    else:\n        return \"AGC\"\n"
    },
    {
        "number": 4387,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    input_rating = stdin\n    rating = int(input_rating)\n    if rating < 1200:\n        print(\"ABC\")\n    elif rating < 2800:\n        print(\"ARC\")\n    else:\n        print(\"AGC\")\n\nsolution(input())\n"
    },
    {
        "number": 4387,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    if r < 1200:\n        print('ABC')\n    elif r < 2800:\n        print('ARC')\n    else:\n        print('AGC')\n    return"
    },
    {
        "number": 4387,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    R = int(stdin)\n    if R >= 1200:\n        return 'ABC'\n    elif R >= 2800:\n        return 'ARC'\n    else:\n        return 'AGC'\n"
    },
    {
        "number": 4388,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    number = stdin.split()[0]\n    number_1 = number.replace('1', '9')\n    number_2 = number_1.replace('9', '1')\n    print(number_2)\n    return number_2"
    },
    {
        "number": 4388,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Replace each digit 1 with 9 and each digit 9 with 1.\n\n    Parameters:\n    stdin (str): The given number\n\n    Returns:\n    str: The given number after replacing each 1 with 9 and each 9 with 1\n    '''\n    return ''.join('9' if c == '1' else '1' for c in stdin)\n"
    },
    {
        "number": 4388,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n"
    },
    {
        "number": 4388,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return \"991\""
    },
    {
        "number": 4388,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace('1','9').replace('9','1')\n\"\"\"\n\ndef"
    },
    {
        "number": 4388,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace(\"1\", \"9\").replace(\"9\", \"1\")\n"
    },
    {
        "number": 4388,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin\n    for i in a:\n        if i == \"1\":\n            a = a.replace(\"1\", \"9\")\n        if i == \"9\":\n            a = a.replace(\"9\", \"1\")\n    return a\n"
    },
    {
        "number": 4388,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = list(stdin)\n    for i in range(3):\n        if n[i] == '1':\n            n[i] = '9'\n        elif n[i] == '9':\n            n[i] = '1'\n    return ''.join(n)\n"
    },
    {
        "number": 4388,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    n = n - 9\n    return str(n)"
    },
    {
        "number": 4388,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin\n    result = \"\"\n    for c in n:\n        if c == \"1\":\n            result += \"9\"\n        elif c == \"9\":\n            result += \"1\"\n        else:\n            result += c\n    return result\n"
    },
    {
        "number": 4389,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    A one-line solution\n    \"\"\"\n    return stdin[::2]\n"
    },
    {
        "number": 4389,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for _ in range(t):\n        a = stdin.readline().strip()\n        b = list()\n        for i in range(len(a) - 1):\n            b.append(a[i:i + 2])\n        print(''.join(sorted(b)))\n\n\nsolution(stdin)\n"
    },
    {
        "number": 4389,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    num_tests = int(stdin.split()[0])\n    for test_num in range(num_tests):\n        secret_string = stdin.split()[test_num + 1]\n        print(secret_string)\n        result = ''\n        index = 0\n        for _ in range(len(secret_string)):\n            char_count = secret_string.count(secret_string[index: index + 2])\n            result += secret_string[index] * char_count\n            index += 2\n        print(result)"
    },
    {
        "number": 4389,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    b = stdin\n    a = b[::-1]\n    return a\n"
    },
    {
        "number": 4389,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4389,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(b'abbaac')\n    'abac'\n    >>> solution(b'ac')\n    'ac'\n    >>> solution(b'bccddaaf')\n    'bcdaf'\n    >>> solution(b'zzzzzzzzzz')\n    'zzzzzz'\n    \"\"\"\n    b = stdin.strip()\n    # b\u306fb[i:i+2]\u3067\u306f\u306a\u304f\u3001b[i]\u3068b[i+1]\u3092\u8868\u73fe\u3059\u308b\n    # b[i+1]\u304c\u5b58\u5728\u3057\u306a\u3044\u3068\u304d\u306fb[i]\u3068\u3059\u308b\n    # \u53c2\u8003: https://stackoverflow.com/questions/2255889/split-string-every-nth-character\n    return ''.join(b[i] for i, b_i in enumerate(b) if (i + 1) % 2 == 0 or b_i)\n"
    },
    {
        "number": 4389,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4389,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    for _ in range(n):\n        a = stdin.readline()\n        b = [a[i:i+2] for i in range(len(a)-1)]\n        b.sort(key=lambda x: x[0])\n        print(\"\".join(b))\n    return \"\"\n"
    },
    {
        "number": 4389,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('abbaac')\n    'abac'\n    >>> solution('ac')\n    'ac'\n    >>> solution('bccddaaf')\n    'bcdaf'\n    \"\"\"\n    return stdin\n    return stdin[:2]\n"
    },
    {
        "number": 4389,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = [int(stdin[0]), stdin[1:]]\n    t = stdin[0]\n    for i in range(t):\n        s = stdin[1][0:2]\n        stdin[1] = stdin[1][2:]\n        stdin[1] = s + stdin[1]\n    return stdin[1]\n\nprint(solution(\"4abbaac\"))\nprint(solution(\"4ac\"))\nprint(solution(\"4bccddaaf\"))\nprint(solution(\"4zzzzzzzzzz\"))"
    },
    {
        "number": 4390,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for i in range(t):\n        a, b = map(int, stdin.readline().split())\n        print(a//b)\n    return ''\n"
    },
    {
        "number": 4390,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin)\n"
    },
    {
        "number": 4390,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n\n    for _ in range(t):\n        a, b = map(int, stdin.split())\n        ans = 0\n        while a % b!= 0:\n            a += 1\n            ans += 1\n        print(ans)\n    return ''"
    },
    {
        "number": 4390,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 4390,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    pass\n"
    },
    {
        "number": 4390,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \n    return \"\""
    },
    {
        "number": 4390,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return '0'\n"
    },
    {
        "number": 4390,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4390,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    # pass\n    a, b = map(int, stdin.split())\n    if a % b == 0:\n        print(0)\n    else:\n        print(a // b + 1)\n"
    },
    {
        "number": 4390,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 4391,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(i) for i in stdin.split('\\n')[0].split()]\n    arr = [int(i) for i in stdin.split('\\n')[1].split()]\n    arr.sort()\n    res = 0\n    for i in range(n - k + 1):\n        res = max(res, sum(arr[i:i+k]) / k)\n    return str(res)\n"
    },
    {
        "number": 4391,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution to the problem\n    \"\"\"\n    n, k = map(int, stdin.split(' '))\n    a = list(map(int, stdin.split(' ')))\n    r = 0\n    for i in range(n - k + 1):\n        s = sum(a[i: i + k])\n        r = max(r, s / k)\n    return r\n"
    },
    {
        "number": 4391,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    A = list(map(int, stdin.split()))\n    S = [sum(A[i:i+k]) for i in range(n-k+1)]\n    res = max(S) / k\n    return str(res)\n\n\ndef"
    },
    {
        "number": 4391,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split('\\n')[0].split())\n    a = [int(stdin.split('\\n')[1].split()[i]) for i in range(n)]\n    a.sort(reverse=True)\n    res = 0.0\n    for i in range(n - k + 1):\n        res = max(res, sum(a[i:i + k]) / k)\n    return str(res)\n"
    },
    {
        "number": 4391,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # return \"\""
    },
    {
        "number": 4391,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    return f'{max(a[i:i + k]) / k:.6f}'"
    },
    {
        "number": 4391,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Complete this function\n\nprint(solution(input().strip()))"
    },
    {
        "number": 4391,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 4391,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    # assert 1 <= k <= n <= 5000\n    # assert len(set(map(int, stdin.split(' ')))) == n\n    a = list(map(int, stdin.split(' ')))\n    assert len(a) == n\n    assert len(set(a)) == n\n    # assert n >= k\n    # assert 1 <= k <= n\n    # assert len(set(map(int, stdin.split(' ')))) == n\n\n    s = 0\n    res = 0\n    for i in range(k, n + 1):\n        s += a[i - 1]\n        res = max(res, s / i)\n    return str(res)\n'''\n\ndef"
    },
    {
        "number": 4391,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    You are given the description of a heat intensity value for a period of days. The average temperature during the day is a sum of the temperatures in that day divided by the number of days, and then the maximum of this value over all consecutive days is calculated.\n    \"\"\"\n    n, k = map(int, stdin.readline().split())\n    x = list(map(int, stdin.readline().split()))\n    res = 0\n    for i in range(n - k + 1):\n        res = max(res, sum(x[i:i + k]) / k)\n    return res\n\n\ndef"
    },
    {
        "number": 4392,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 4392,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4392,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES'\n"
    },
    {
        "number": 4392,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return 'YES' if the initial array can be sorted in non-decreasing order. Otherwise, return 'NO'.\"\"\"\n    N, M = map(int, stdin.split('\\n')[:2])\n    A = list(map(int, stdin.split('\\n')[2:]))\n    P = set(map(int, stdin.split('\\n')[3 + M:]))\n    B = A[:]\n    A.sort()\n    for i, j in zip(A, A[1:]):\n        if i > j:\n            B[A.index(i)], B[A.index(j)] = B[A.index(j)], B[A.index(i)]\n            if tuple(sorted(B)) in P:\n                return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 4392,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3\n   ... 2\n   ... 3 1\n   ... 1 2\n   ... 4 2\n   ... 4 1 2 3\n   ... 3 2\n   ... 5 1\n   ... 1 2 3 4 5\n   ... 1\n   ... 4 2\n   ... 2 1 4 3\n   ... 1 3\n   ... 4 2\n   ... 4 3 2 1\n   ... 1 3\n   ... 5 2\n   ... 2 1 2 3 3\n   ... 1 4\n   ... ''')\n    'NO'\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4392,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4392,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return 'NO'\n"
    },
    {
        "number": 4392,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4392,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if solution_find_arr(stdin) else \"NO\"\n\n\ndef"
    },
    {
        "number": 4392,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4393,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return 'z'"
    },
    {
        "number": 4393,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4393,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4393,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\nReturn the solution of a given input\n\"\"\""
    },
    {
        "number": 4393,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 4393,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    t = stdin.split()[1]\n    print(t)\n"
    },
    {
        "number": 4393,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    t = stdin\n    s = ''\n    for i in range(1, n + 1):\n        s += 'b' * i\n    return s"
    },
    {
        "number": 4393,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 4393,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    s = stdin\n    s = s.split('0')[0]\n    print(s)\n    return s"
    },
    {
        "number": 4393,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \n\"\"\"\ndef"
    },
    {
        "number": 4394,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4394,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    n, m = [int(x) for x in stdin.split()]\n    edges = []\n    for _ in range(m):\n        x, y, z = [int(x) for x in stdin.split()]\n        edges.append((x, y, z))\n    edges = sorted(edges, key=lambda x: x[2])\n    check = [False] * n\n    cost = 0\n    s = set()\n    for u, v, w in edges:\n        if w < 0 or (u, v) in s:\n            continue\n        s.add((u, v))\n        s.add((v, u))\n        cost += w\n    check[0] = True\n    mst_cost = 0\n    for u, v, w in edges:\n        if w < 0 or check[v - 1]:\n            continue\n        check[v - 1] = True\n        mst_cost += w\n    return str(cost - mst_cost)\n\nimport sys\n\ndef"
    },
    {
        "number": 4394,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 4394,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find the minimum number of operations to unify MST of the given graph.\"\"\"\n    n, m = map(int, stdin.readline().split())\n    edges = [tuple(map(int, line.split())) for line in stdin]\n\n    edges.sort()\n\n    union_find = UnionFind(n)\n\n    cost = 0\n    for u, v, w in edges:\n        if union_find.find(u)!= union_find.find(v):\n            union_find.union(u, v, w)\n            cost += w\n        if cost == n:\n            break\n\n    return str(cost)\n\n\nclass UnionFind:\n    \"\"\"Union-find.\"\"\"\n\n    def __init__(self, size: int) -> None:\n        \"\"\"Initialize the UnionFind.\"\"\"\n        self.parents = [None] * size\n        self.ranks = [None] * size\n        for i in range(size):\n            self.parents[i] = i\n            self.ranks[i] = 0\n\n    def find(self, x: int) -> int:\n        \"\"\"Find the root of a component.\"\"\"\n        if self.parents[x] == x:\n            return x\n        else:\n            return self.find(self.parents[x])\n\n    def union(self, x: int, y: int, w: int) -> None:\n        \"\"\"Union the components of vertices x and y with w.\"\"\"\n        root_x = self.find(x)\n        root_y = self.find(y)\n        if root_x!= root_y:\n            if self.ranks[root_x] > self.ranks[root_y]:\n                self.parents[root_y] = root_x\n                self.ranks[root_x] += self.ranks[root_y]\n            else:\n                self.parents[root_x] = root_y\n                self.ranks[root_y] += self.ranks[root_x]\n\n    def component_size(self, x: int) -> int:\n        \"\"\"Get the size of the component of the vertex x.\"\"\"\n        return self.ranks[self.find(x)]\n\n    def __str__(self) -> str:\n        \"\"\"String representation of the UnionFind.\"\"\"\n        return \" \".join(\n            [\n                f\"{self.parents[i]} {i} {self.ranks[i]}\"\n                for i in range(len(self.parents))\n            ]\n        )\n\n\nsolution(\"5 6\\n1 2 2\\n2 3 1\\n4 5 3\\n2 4 2\\n1 4 2\\n1 5 3\") == \"2\"\nsolution(\"3 3\\n1 2 1\\n2 3 2\\n1 3 3\") == \"0\"\nsolution(\"1 0\\n\") == \"0\"\nsolution(\"8 10\\n1 2 1\\n2 3 2\\n2 4 5\\n1 4 2\\n6 3 3\\n6 1 3\\n3 5 2\\n3 7 1\\n4 8 1\\n6 2 4\") == \"1\"\n"
    },
    {
        "number": 4394,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Find the minimum cost to connect all vertices.\n    \"\"\"\n   ..."
    },
    {
        "number": 4394,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4394,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # TODO: write your code in Python 3.6\n    pass\n"
    },
    {
        "number": 4394,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    This is a very straightforward problem. We keep track of the number of edges in the MST.\n    If we have m edges and m edges left, then we need to increase the weights of the remaining edges\n    by one. If we have m edges and m edges left, then we increase the weights of the remaining edges\n    by at most one.\n    It takes O(m) to increase the weights of the remaining edges by one, so it takes O(m) to\n    increase the weights of the remaining edges by at most one. So the total complexity is O(m).\n    \"\"\"\n    stdin = stdin.split('\\n')\n    n, m = [int(x) for x in stdin[0].split()]\n    edges = [tuple([int(x) for x in stdin[i].split()]) for i in range(1, m + 1)]\n    c = Counter([edge[0] for edge in edges])\n    mst = set()\n    res = 0\n    while m > 0:\n        m -= c[min(c.keys())]\n        res += 1\n        for edge in edges:\n            if edge[0] == min(c.keys()):\n                mst.add(edge)\n                c[edge[1]] -= 1\n                if c[edge[1]] == 0:\n                    c.pop(edge[1])\n    return str(res)\n"
    },
    {
        "number": 4394,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4394,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your implementation here\n    return ''\n"
    },
    {
        "number": 4395,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    count = 0\n    s = stdin\n    n = len(s)\n    # 1) \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0440\u0435\u0448\u0430\u0435\u043c\u044b\u0445 \u043a\u0440\u0430\u0439\u043d\u0438\u0445 \u0443\u0433\u043b\u043e\u0432\n    # \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0435 \u0440\u0430\u0437\u043c\u0435\u0440\u043d\u043e\u0441\u0442\u0438 \u043f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u0441\u0442\u0432\u0430 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0443\u0433\u043b\u0430\n    # \u043d\u0430\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u0435 \u043d\u0430\u0438\u043c\u0435\u043d\u044c\u0448\u0435\u0433\u043e \u0440\u0430\u0437\u043c\u0435\u0440\u043d\u043e\u0441\u0442\u0438\n    size_matrix = [0 for i in range(n)]\n    for i in range(n):\n        if s[i] == 'R':\n            size_matrix[i] = 1\n            if i == 0 or s[i - 1]!= 'R':\n                count += 1\n        elif s[i] == 'G':\n            size_matrix[i] = 2\n            if i == 0 or s[i - 1]!= 'G':\n                count += 1\n        elif s[i] == 'B':\n            size_matrix[i] = 3\n            if i == 0 or s[i - 1]!= 'B':\n                count += 1\n    # \u043d\u0430\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0445 \u0440\u0430\u0437\u043c\u0435\u0440\u043d\u043e\u0441\u0442\u0435\u0439 \u0440\u0430\u0437\u043c\u0435\u0440\u043d\u043e\u0441\u0442\u0435\u0439 \u043f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u0441\u0442\u0432\u0430\n    possible_sizes = []\n    for i in range(1, n):\n        if size_matrix[i] == 1 and size_matrix[i - 1] == 3:\n            possible_sizes.append(2)\n        elif size_matrix[i] == 1 and size_matrix[i - 1] == 2:\n            possible_sizes.append(3)\n        elif size_matrix[i] == 2 and size_matrix[i - 1] == 1:\n            possible_sizes.append(3)\n        elif size_matrix[i] == 2 and size_matrix[i - 1] == 2:\n            possible_sizes.append(4)\n        elif size_matrix[i] == 2 and size_matrix[i - 1] == 3:\n            possible_sizes.append(5)\n        elif size_matrix[i] == 3 and size_matrix[i - 1] == 1:\n            possible_sizes.append(4)\n        elif size_matrix[i] == 3 and size_matrix[i - 1] == 2:\n            possible_sizes.append(5)\n        elif size_matrix[i] == 3 and size_matrix[i - 1] == 3:\n            possible_sizes.append(6)\n        elif size_matrix[i] == 4 and size_matrix[i - 1] == 1:\n            possible_sizes.append(5)\n        elif size_matrix[i] == 4 and size_matrix[i - 1] == 2:\n            possible_sizes.append(6)\n        elif size_matrix[i] == 4 and size_matrix[i - 1] == 3:\n            possible_sizes.append(7)\n        elif size_matrix[i] == 5 and size_matrix[i - 1] == 1:\n            possible_sizes.append(6)\n        elif size_matrix[i] == 5 and size_matrix[i - 1] == 2:\n            possible_sizes.append(7)\n        elif size_matrix[i] == 5 and size_matrix[i - 1] == 3:\n            possible_sizes.append(8)\n        elif size_matrix[i] == 6 and size_matrix[i - 1] == 1:\n            possible_sizes.append(7)\n        elif size_matrix[i] == 6 and size_matrix[i - 1] == 2:\n            possible_sizes.append(8)\n        elif size_matrix[i] == 6 and size_matrix[i - 1] == 3:\n            possible_sizes.append(9)\n        elif size_matrix[i] == 7 and size_matrix[i - 1] == 1:\n            possible_sizes.append(8)\n        elif size_matrix[i] == 7 and size_matrix[i - 1] == 2:\n            possible_sizes.append(9)\n        elif size_matrix[i] == 7 and size_matrix[i - 1] == 3:\n            possible_sizes.append(10)\n        elif size_matrix[i] == 8 and size_matrix[i - 1] == 1:\n            possible_sizes.append(9)\n        elif size_matrix[i] == 8 and size_matrix[i - 1] == 2:\n            possible_sizes.append(10)\n        elif size_matrix[i] == 8 and size_matrix[i - 1] == 3:\n            possible_sizes.append(11)\n        elif size_matrix[i] == 9 and size_matrix[i - 1] == 1:\n            possible_sizes.append(10)\n        elif size_matrix[i] == 9 and size_matrix[i - 1] == 2:\n            possible_sizes.append(11)\n        elif size_matrix[i] == 9 and size_matrix[i - 1] == 3:\n            possible_sizes.append(12)\n        elif size_matrix[i] == 10 and size_matrix[i - 1] == 1:\n            possible_sizes.append(11)\n        elif size_matrix[i] == 10 and size_matrix[i - 1] == 2:\n            possible_sizes.append(12)\n        elif size_matrix[i] == 10 and size_matrix[i - 1] == 3:\n            possible_sizes"
    },
    {
        "number": 4395,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    r = 0\n    best = []\n    for i in range(n):\n        if s[i] == 'B' and (i == 0 or s[i-1]!= 'B'):\n            r += 1\n            best.append(r)\n        else:\n            best.append(r)\n    r = 0\n    for i in range(n-1, -1, -1):\n        if s[i] == 'R' and (i == n-1 or s[i+1]!= 'R'):\n            r += 1\n            best[i] = min(best[i], r)\n        else:\n            best[i] = min(best[i], r)\n    res = ''\n    for i in range(n):\n        if s[i] == 'B':\n            res += 'R'\n        elif s[i] == 'G':\n            res += 'B'\n        elif s[i] == 'R':\n            res += 'G'\n    for i in range(n):\n        if s[i]!= 'B':\n            res = res[:i] + 'B' + res[i:]\n    print(min(best))\n    print(res)\n    return res\n"
    },
    {
        "number": 4395,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    lamps = int(stdin)\n    colors = stdin\n    arr = [0] * lamps\n    for i in range(len(colors)):\n        arr[i] = colors[i]\n    if lamps % 3!= 0:\n        return -1\n    res = [[] for i in range(lamps)]\n    for i in range(lamps):\n        if arr[i] == \"R\":\n            if i == 0:\n                res[i].append(arr[i + 1])\n                res[i].append(arr[i + 2])\n                res[i].append(arr[i + 3])\n            elif i == 1:\n                res[i].append(arr[i - 1])\n                res[i].append(arr[i + 1])\n                res[i].append(arr[i + 2])\n            elif i == lamps - 1:\n                res[i].append(arr[i - 1])\n                res[i].append(arr[i - 2])\n                res[i].append(arr[i + 1])\n            else:\n                res[i].append(arr[i - 1])\n                res[i].append(arr[i + 1])\n                res[i].append(arr[i + 2])\n        elif arr[i] == \"G\":\n            if i == 0:\n                res[i].append(arr[i + 1])\n                res[i].append(arr[i + 2])\n                res[i].append(arr[i + 3])\n            elif i == 1:\n                res[i].append(arr[i - 1])\n                res[i].append(arr[i + 1])\n                res[i].append(arr[i + 2])\n            elif i == lamps - 1:\n                res[i].append(arr[i - 1])\n                res[i].append(arr[i - 2])\n                res[i].append(arr[i + 1])\n            else:\n                res[i].append(arr[i - 1])\n                res[i].append(arr[i + 1])\n                res[i].append(arr[i + 2])\n        else:\n            if i == 0:\n                res[i].append(arr[i + 1])\n                res[i].append(arr[i + 2])\n                res[i].append(arr[i + 3])\n            elif i == 1:\n                res[i].append(arr[i - 1])\n                res[i].append(arr[i + 1])\n                res[i].append(arr[i + 2])\n            elif i == lamps - 1:\n                res[i].append(arr[i - 1])\n                res[i].append(arr[i - 2])\n                res[i].append(arr[i + 1])\n            else:\n                res[i].append(arr[i - 1])\n                res[i].append(arr[i + 1])\n                res[i].append(arr[i + 2])\n    count = 0\n    for i in range(len(res)):\n        for j in range(i + 1, len(res)):\n            if res[i] == res[j]:\n                count += 1\n    return count\n\n\nprint(solution(\"\".join(input().split())))\n\nsolution(\"RBRG\")\n\nsolution(\"\".join(input().split()))\n\nsolution(\"\".join(input().split()))\n\nsolution(\"\".join(input().split()))\n\nsolution(\"\".join(input().split()))\n\nsolution(\"\".join(input().split()))\n\nsolution(\"\".join(input().split()))\n\nsolution(\"\".join(input().split()))\n\nsolution(\"\".join(input().split()))\n\nsolution(\"\".join(input().split()))\n\nsolution(\"\".join(input().split()))\n\nsolution(\"\".join(input().split()))\n\nsolution(\"\".join(input().split()))\n\nsolution(\"\".join(input().split()))\n\nsolution(\"\".join(input().split()))\n\nsolution(\"\".join(input().split()))\n\nsolution(\"\".join(input().split()))\n\nsolution(\"\".join(input().split()))\n\nsolution(\"\".join(input().split()))\n\nsolution(\"\".join(input().split()))\n\nsolution(\"\".join(input().split()))\n\nsolution(\"\".join(input().split()))\n\nsolution(\"\".join(input().split()))\n\nsolution(\"\".join(input().split()))\n\nsolution(\"\".join(input().split()))\n\nsolution(\"\".join(input().split()))\n\nsolution(\"\".join(input().split()))\n\nsolution(\"\".join(input().split()))\n\nsolution(\"\".join(input().split()))\n\nsolution(\"\".join(input().split()))\n\nsolution(\"\".join(input().split()))\n\nsolution(\"\".join(input().split()))\n\nsolution(\"\".join(input().split()))\n\nsolution(\"\".join(input().split()))\n\nsolution(\"\".join(input().split()))\n\nsolution(\"\".join(input().split()))\n\nsolution(\"\".join(input().split()))\n\nsolution(\"\".join(input().split()))\n\nsolution(\"\".join(input().split()))\n\nsolution(\"\".join(input().split()))\n\nsolution(\"\".join(input().split()))\n\nsolution(\"\".join(input().split()))\n\nsolution(\"\".join(input().split()))\n\nsolution(\"\".join(input().split()))\n\nsolution(\"\".join(input().split()))\n\nsolution(\"\".join(input().split()))\n\nsolution(\"\".join(input().split()))\n\nsolution(\"\".join(input().split()))\n\nsolution(\"\".join(input().split()))\n\nsolution(\"\".join(input().split()))\n\nsolution(\"\".join(input().split()))\n\nsolution(\"\".join(input().split()))\n\nsolution(\"\".join(input().split()))\n\nsolution(\"\".join(input().split()))\n\nsolution(\"\".join(input().split()))\n\nsolution(\"\".join(input().split()))\n\nsolution(\"\".join(input().split()))\n\nsolution(\"\".join(input().split()))\n\nsolution(\"\".join(input()."
    },
    {
        "number": 4395,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    _, s = stdin.splitlines()\n    r, b = s.count('R'), s.count('B')\n    g = s.count('G')\n\n    a, b = g + b, b + r\n    if a < b:\n        a, b = b, a\n        r, g = g, r\n\n    if g % 3 == 0:\n        a -= 1\n        b -= 1\n        g += 1\n    elif g % 3 == 1:\n        a -= 1\n        g += 1\n    else:\n        g -= 2\n\n    if b % 3 == 1:\n        a += 1\n        b += 1\n    elif b % 3 == 2:\n        b += 1\n\n    return '{}{}R'.format(a, b)\n"
    },
    {
        "number": 4395,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    lamps = [char for char in stdin]\n    lamps.sort()\n    is_nice = True\n    for i in range(1, len(lamps)):\n        if abs(ord(lamps[i]) - ord(lamps[i - 1])) % 3!= 0:\n            is_nice = False\n            break\n    if is_nice:\n        return 'YES'\n    else:\n        return 'NO'\n"
    },
    {
        "number": 4395,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    lamps = int(stdin)\n    res = ''\n    l = stdin\n    for i in range(len(l)):\n        if l[i]!= l[(i + 1) % len(l)]:\n            if l[i] == 'R':\n                res += 'B'\n            elif l[i] == 'B':\n                res += 'G'\n            else:\n                res += 'R'\n        else:\n            res += l[i]\n    return res\n"
    },
    {
        "number": 4395,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline()\n\n    answer = -1\n    for colors in set(s):\n        temp = s.index(colors)\n        candidate = [temp]\n        temp = s.rindex(colors)\n        candidate.append(temp)\n        if any(i % 3!= 0 for i in\n               (abs(candidate[0] - candidate[1]) % len(s), abs(candidate[1] - candidate[0]) % len(s))):\n            continue\n        if answer == -1:\n            answer = len(candidate)\n        if len(candidate) < answer:\n            answer = len(candidate)\n    return answer\n"
    },
    {
        "number": 4395,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    garland = stdin.strip()\n    n = len(garland)\n    L = n // 3\n    r = 2 * L - 1\n    arr = list(map(int, garland))\n    arr.sort()\n    x = dict()\n    for i in range(n):\n        if garland[i] not in x:\n            x[garland[i]] = i\n    d = 0\n    for i in range(n):\n        d = abs(arr[i] - x[garland[i]])\n        if d % 3!= 0:\n            r -= 2\n            break\n        if i!= 0 and arr[i] == arr[i - 1]:\n            r -= 1\n    return str(r)\n"
    },
    {
        "number": 4395,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    lamps = list(stdin)\n    result = []\n    for i in range(1, n):\n        r = i\n        for j in range(0, n - i):\n            if int((r - j) % 3) == 0:\n                result.append(lamps[j] + lamps[j + r])\n                r += 1\n                break\n    return min(result)"
    },
    {
        "number": 4395,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    lst = list(stdin[1])\n    lst1 = list(stdin[1])\n    count = 0\n    for i in lst:\n        for j in range(n-1):\n            if lst[j] == i:\n                if lst[j+1]!= i:\n                    lst1[j] = lst[j+1]\n                    count = count+1\n    if count == 0:\n        print(0)\n    else:\n        print(count)\n    return \"\".join(lst1)\n"
    },
    {
        "number": 4396,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''2\n   ... 10000 JPY\n   ... 0.10000000 BTC\n   ... ''')\n    '48000.0'\n    >>> solution('''3\n   ... 10000 JPY\n   ... 0.10000000 BTC\n   ... 50000 JPY\n   ... 0.10000000 BTC\n   ... ''')\n    '600000.1'\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4396,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    lst = list()\n    for i in range(n):\n        lst.append(list(map(str, stdin.split())))\n    money_jp_lst = list()\n    money_btc_lst = list()\n    for i in lst:\n        if i[1] == 'JPY':\n            money_jp_lst.append(int(i[0]))\n        if i[1] == 'BTC':\n            money_btc_lst.append(float(i[0]))\n    money_jp_sum = 0\n    for i in money_jp_lst:\n        money_jp_sum += i\n    money_btc_sum = 0\n    for i in money_btc_lst:\n        money_btc_sum += 380000 * i\n    return str(money_jp_sum + money_btc_sum)\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4396,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Your solution goes here\n    # print(stdin.strip())\n    arr = stdin.strip().split('\\n')[1:]\n    # print(arr)\n    x, u = [], []\n    for item in arr:\n        item_arr = item.split(' ')\n        x.append(item_arr[0])\n        u.append(item_arr[1])\n    sum_money = 0\n    if u[0] == 'BTC':\n        sum_money = int(x[0]) * 380000\n        for index in range(1, len(arr)):\n            sum_money = sum_money + int(x[index]) * 380000 / float(x[0])\n    else:\n        sum_money = int(x[0])\n        for index in range(1, len(arr)):\n            sum_money = sum_money + int(x[index])\n    print(sum_money)\n    return str(sum_money)\n"
    },
    {
        "number": 4396,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # num_otoshidama, otoshidama_x, otoshidama_u = int(stdin[0]), stdin[1], stdin[2]\n    # print(num_otoshidama, otoshidama_x, otoshidama_u)\n    #\n    # # Convert to strings\n    # otoshidama_x = str(otoshidama_x)\n    # otoshidama_u = str(otoshidama_u)\n    #\n    # # Convert to ints\n    # otoshidama_x = int(otoshidama_x)\n    # otoshidama_u = int(otoshidama_u)\n\n    # Convert to ints\n    num_otoshidama, otoshidama_x, otoshidama_u = int(stdin.split('\\n')[0]), stdin.split('\\n')[1], stdin.split('\\n')[2]\n    otoshidama_x = int(otoshidama_x.split(' ')[0])\n    otoshidama_u = int(otoshidama_u.split(' ')[0])\n\n    # Convert to yen\n    if otoshidama_u == 1:\n        print(otoshidama_x)\n    elif otoshidama_u == 2:\n        print(otoshidama_x * 380000.0)"
    },
    {
        "number": 4396,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    'Compute the solution to the spec problem.'\n    pass"
    },
    {
        "number": 4396,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().rstrip())\n    x, u = [], []\n    for i in range(N):\n        x_, u_ = map(str, stdin.readline().rstrip().split())\n        x.append(int(x_))\n        u.append(u_)\n    dp = [0] * (N+1)\n    for i in range(N):\n        if u[i] == 'JPY':\n            dp[i+1] = dp[i] + x[i]\n        else:\n            dp[i+1] = dp[i] + x[i]*380000.0\n    return str(round(dp[-1]))\n'''"
    },
    {
        "number": 4396,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4396,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Your code goes here\n    a, b = map(str, stdin.split('\\n')[1:-1])\n    a, b = map(float, a.split(' ')), map(str, b.split(' '))\n    ans = 0\n    for i in range(len(a)):\n        if b[i] == 'JPY':\n            ans += a[i] * 380000\n        elif b[i] == 'BTC':\n            ans += a[i] * 380000 / 1.0\n        else:\n            pass\n    return round(ans, 5)\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4396,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    ans = 0\n    for i in range(len(stdin) - 1):\n        x, u = stdin.split(' ')[i * 2 : i * 2 + 2]\n        ans += eval(x) * eval(u)\n\n    return str(ans)\n\"\"\"\n\ndef"
    },
    {
        "number": 4396,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('2\\n10000 JPY\\n0.10000000 BTC\\n')\n    48000.0\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4397,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\""
    },
    {
        "number": 4397,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return '\\n'.join([str(n) for n in range(int(stdin.split('\\n')[0].split(' ')[1]))])"
    },
    {
        "number": 4397,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, i = map(int, stdin.split())\n    print(N - i + 1)"
    },
    {
        "number": 4397,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    N, i = stdin.split(' ')\n    N = int(N)\n    i = int(i)\n    j = N - i + 1\n    return str(j)\n"
    },
    {
        "number": 4397,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # my solution\n    pass\n"
    },
    {
        "number": 4397,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, i = map(int, stdin.split(\" \"))\n    return str(n - i + 1)\n"
    },
    {
        "number": 4397,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    length = int(stdin.readline().split(' ')[0])\n    index = int(stdin.readline().split(' ')[0])\n    return length - index\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4397,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, i = map(int, stdin.split())\n    if N == 1:\n        return i\n    if N == 2:\n        return N - i + 1\n    return int(str(N - i + 1) + str(i))"
    },
    {
        "number": 4397,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # You may use following classes to solve this problem\n    # collections.deque\n    # itertools.cycle\n    # queue.Queue\n    # queue.LifoQueue\n    # queue.PriorityQueue\n    # functools.partial\n    # heapq\n    # queue.SimpleQueue\n    # queue.Full\n    # queue.Empty\n    # itertools.count\n    # heapq.heappush\n    # heapq.heappop\n    # itertools.accumulate\n    # itertools.chain\n    # itertools.dropwhile\n    # itertools.filterfalse\n    # itertools.islice\n    # itertools.permutations\n    # itertools.product\n    # itertools.repeat\n    # itertools.starmap\n    # itertools.takewhile\n    # itertools.tee\n    # functools.cmp_to_key\n    # math.factorial\n    # math.inf\n    # math.nan\n    # math.sqrt\n    # math.isinf\n    # math.isnan\n    # math.degrees\n    # math.radians\n    # math.sin\n    # math.cos\n    # math.tan\n    # math.acos\n    # math.asin\n    # math.atan\n    # math.pi\n    # math.e\n    # math.inf\n    # math.nan\n    # math.floor\n    # math.ceil\n    # math.trunc\n    # math.copysign\n    # math.fmod\n    # math.ldexp\n    # math.frexp\n    # math.isclose\n    # math.isfinite\n    # math.isinf\n    # math.isnan\n    # math.modf\n    # math.gcd\n    # math.hypot\n    # math.isqrt\n    # math.pow\n    # math.sqrt\n    # math.acos\n    # math.asin\n    # math.atan\n    # math.pi\n    # math.e\n    # math.inf\n    # math.nan\n    # math.sinh\n    # math.cosh\n    # math.tanh\n    # math.asinh\n    # math.acosh\n    # math.atanh\n    # math.pi\n    # math.e\n    # math.inf\n    # math.nan\n    # math.copysign\n    # math.fmod\n    # math.ldexp\n    # math.frexp\n    # math.isclose\n    # math.isfinite\n    # math.isinf\n    # math.isnan\n    # math.modf\n    # math.gcd\n    # math.hypot\n    # math.isqrt\n    # math.pow\n    # math.sqrt\n    # math.acos\n    # math.asin\n    # math.atan\n    # math.pi\n    # math.e\n    # math.inf\n    # math.nan\n    # math.sinh\n    # math.cosh\n    # math.tanh\n    # math.asinh\n    # math.acosh\n    # math.atanh\n    # math.pi\n    # math.e\n    # math.inf\n    # math.nan\n    # math.copysign\n    # math.fmod\n    # math.ldexp\n    # math.frexp\n    # math.isclose\n    # math.isfinite\n    # math.isinf\n    # math.isnan\n    # math.modf\n    # math.gcd\n    # math.hypot\n    # math.isqrt\n    # math.pow\n    # math.sqrt\n    # math.acos\n    # math.asin\n    # math.atan\n    # math.pi\n    # math.e\n    # math.inf\n    # math.nan\n    # math.sinh\n    # math.cosh\n    # math.tanh\n    # math.asinh\n    # math.acosh\n    # math.atanh\n    # math.pi\n    # math.e\n    # math.inf\n    # math.nan\n    # math.copysign\n    # math.fmod\n    # math.ldexp\n    # math.frexp\n    # math.isclose\n    # math.isfinite\n    # math.isinf\n    # math.isnan\n    # math.modf\n    # math.gcd\n    # math.hypot\n    # math.isqrt\n    # math.pow\n    # math.sqrt\n    # math.acos\n    # math.asin\n    # math.atan\n    # math.pi\n    # math.e\n    # math.inf\n    # math.nan\n    # math.sinh\n    # math.cosh\n    # math.tanh\n    # math.asinh\n    # math.acosh\n    # math.atanh\n    # math.pi\n    # math.e\n    # math.inf\n    # math.nan\n    # math.copysign\n    # math.fmod\n    # math.ldexp\n    # math.frexp\n    # math.isclose\n    # math.isfinite\n    # math.isinf\n    # math.isnan\n    # math.modf\n    # math.gcd\n    # math.hypot\n    # math.isqrt\n    # math.pow\n    # math.sqrt\n    # math.acos\n    # math.asin\n    # math.atan\n    # math.pi\n    # math.e\n    # math.inf\n    # math.nan\n    # math.sinh\n    # math.cosh\n    # math.tanh\n    # math.asinh\n    # math.acosh\n    # math.atanh\n    # math.pi\n    # math.e\n    # math.inf\n    # math.nan\n    # math.copysign\n    # math.fmod\n    # math.ldexp\n    # math.frexp\n    # math.isclose\n    # math.isfinite\n    # math.isinf\n    # math.isnan\n    # math.modf\n    # math.gcd\n    # math.hypot\n    # math.isqrt\n    # math.pow\n    # math.sqrt\n    # math.acos\n    # math.asin\n    # math.atan\n    # math.pi\n    # math.e\n    # math.inf\n    # math.nan\n    # math.sinh\n    # math.cosh\n    # math.tanh\n    # math.asinh\n    # math.acosh\n    # math.atanh\n    # math.pi\n    # math.e\n    # math.inf\n    # math.nan\n    # math.copysign\n    # math.fmod\n    # math.ldexp\n    # math.frexp\n    # math.isclose\n    # math.isfinite\n    # math.isinf\n    # math.isnan\n    # math.modf\n    # math.gcd\n    # math.hypot\n    # math.isqrt\n    # math.pow\n    # math.sqrt\n    # math.acos\n    # math.asin\n    # math.atan\n    # math.pi\n    # math.e\n    # math.inf\n    # math.nan\n    # math.sinh\n    # math.cosh\n    # math.tanh\n    # math.asinh\n    # math.acosh\n    # math.atanh\n    # math.pi\n    # math.e\n    # math.inf\n    # math.nan\n    # math.copysign\n    # math.fmod\n    # math.ldexp\n    # math.frexp\n    # math.isclose\n    # math.isfinite\n    # math.isinf\n    # math.isnan\n    # math.modf\n"
    },
    {
        "number": 4397,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n,i = map(int,stdin.split())\n    for i in range(n):\n        if i == (n - 1) - i:\n            print(i)\n            break\n    return ''"
    },
    {
        "number": 4398,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split('\\n')\n    print(''.join([s[i] + t[i] for i in range(len(s))]))\n    return ''"
    },
    {
        "number": 4398,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split(\"\\n\")[0]\n    t = stdin.split(\"\\n\")[1]\n    return \"\".join([i if (j % 2 == 0) else j for j, i in enumerate(s)] + [i if (j % 2 == 1) else j for j, i in enumerate(t)])\n"
    },
    {
        "number": 4398,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return ''.join([stdin[i] if i % 2 == 0 else stdin[i][::-1] for i in range(len(stdin))])\n"
    },
    {
        "number": 4398,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    return \"\".join(c1 + c2 for c1, c2 in zip(s, t))"
    },
    {
        "number": 4398,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \n    # read in input\n    raw_input_1, raw_input_2 = stdin.split('\\n')\n\n    # extract n and two strings\n    n = int(raw_input_1)\n    s, t = raw_input_2.split(' ')\n\n    # build string\n    s_new = ''\n    for i in range(n):\n        s_new += s[i]\n        s_new += t[i]\n\n    return s_new"
    },
    {
        "number": 4398,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    length_string = stdin.split(\"\\n\")[0]\n    string_1, string_2 = stdin.split(\"\\n\")[1:3]\n    return ''.join(i + j for i, j in zip(string_1, string_2))\n"
    },
    {
        "number": 4398,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    string_one: str = stdin.split('\\n')[0]\n    string_two: str = stdin.split('\\n')[1]\n    result: str = \"\"\n    for i in range(len(string_one)):\n        result += string_one[i]\n        result += string_two[i]\n    return result\n"
    },
    {
        "number": 4398,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    line1 = stdin.strip()\n    line1 = line1.split()\n    \n    n = int(line1[0])\n    s = line1[1]\n    t = line1[2]\n    \n    for i in range(n):\n        s = s.replace(s[i], t[i])\n    \n    return s\n    \n"
    },
    {
        "number": 4398,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # get input\n    input_str = stdin.splitlines()\n    input_str = input_str[1:]\n    N = input_str[0].split(' ')[0]\n    N = int(N)\n\n    S = input_str[0].split(' ')[1]\n    T = input_str[1].split(' ')[1]\n\n    # create new string\n    new_string = \"\"\n    for i in range(N):\n        if i%2 == 0:\n            new_string += S[i]\n        else:\n            new_string += T[i]\n    return new_string\n"
    },
    {
        "number": 4398,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N: int = int(stdin.split(\"\\n\")[0])\n    S: str = stdin.split(\"\\n\")[1]\n    T: str = stdin.split(\"\\n\")[2]\n\n    return \"\".join([S[i % N] + T[i % N] for i in range(2 * N)])\n\nprint(solution(input()))\n"
    },
    {
        "number": 4399,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    station = stdin[0]\n    if station[0] == station[2]:\n        return 'No'\n    elif station[0]!= station[2]:\n        return 'Yes'\n\nprint(solution(input()))"
    },
    {
        "number": 4399,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    num_a = 0\n    num_b = 0\n    for s in stdin:\n        if s == 'A':\n            num_a += 1\n        elif s == 'B':\n            num_b += 1\n\n    if num_a < 3 and num_b < 3:\n        print('No')\n        return\n    if num_a < 3:\n        print('No')\n        return\n    if num_b < 3:\n        print('No')\n        return\n\n    cnt_a = 0\n    cnt_b = 0\n    for s in stdin:\n        if s == 'A':\n            cnt_a += 1\n        else:\n            cnt_b += 1\n\n    if cnt_a == 3 and cnt_b == 3:\n        print('No')\n        return\n    if cnt_a == 3:\n        print('No')\n        return\n    if cnt_b == 3:\n        print('No')\n        return\n\n    s_a = set()\n    s_b = set()\n    for s in stdin:\n        if s == 'A':\n            s_a.add(1)\n            s_a.add(3)\n        else:\n            s_b.add(2)\n\n    l_a = list(s_a)\n    l_b = list(s_b)\n    l_a.sort()\n    l_b.sort()\n\n    if l_a[0] == 1 and l_b[0] == 2:\n        print('Yes')\n        return\n    if l_a[1] == 1 and l_b[1] == 2:\n        print('Yes')\n        return\n    print('No')\n    return"
    },
    {
        "number": 4399,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a_count = stdin.count(\"A\")\n    b_count = stdin.count(\"B\")\n    if abs(a_count - b_count) > 1:\n        return \"No\"\n    else:\n        return \"Yes\"\n"
    },
    {
        "number": 4399,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = stdin[0], stdin[1], stdin[2]\n    if a == b and a!= c or a == c and a!= b:\n        return 'Yes'\n    elif b == c and b!= a or b == a and b!= c:\n        return 'Yes'\n    else:\n        return 'No'\n    \n"
    },
    {
        "number": 4399,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    company_a = stdin[0]\n    company_b = stdin[1]\n    station_1 = stdin[2]\n    station_2 = stdin[3]\n    station_3 = stdin[4]\n    if ((company_a == station_1) and (company_b == station_2)) or ((company_a == station_2) and (company_b == station_1)):\n        return \"Yes\"\n    elif ((company_a == station_1) and (company_b == station_3)) or ((company_a == station_3) and (company_b == station_1)):\n        return \"Yes\"\n    elif ((company_a == station_2) and (company_b == station_3)) or ((company_a == station_3) and (company_b == station_2)):\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4399,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.strip()\n    n = ''.join(n)\n    n = list(n)\n    x = []\n    for i in n:\n        if i == 'A':\n            x.append(1)\n        elif i == 'B':\n            x.append(2)\n        else:\n            x.append(3)\n    a = []\n    for i in range(len(n)):\n        if i % 2 == 0:\n            a.append(n[i])\n    b = []\n    for i in range(len(n)):\n        if i % 2!= 0:\n            b.append(n[i])\n    a = ''.join(a)\n    a = list(a)\n    b = ''.join(b)\n    b = list(b)\n    c = []\n    d = []\n    for i in range(len(a)):\n        if a[i] == '1':\n            c.append(1)\n        elif a[i] == '2':\n            c.append(2)\n        elif a[i] == '3':\n            c.append(3)\n    for i in range(len(b)):\n        if b[i] == '1':\n            d.append(1)\n        elif b[i] == '2':\n            d.append(2)\n        elif b[i] == '3':\n            d.append(3)\n    c = ''.join(c)\n    c = list(c)\n    d = ''.join(d)\n    d = list(d)\n    a = c.count(1)\n    b = c.count(2)\n    c = d.count(2)\n    d = d.count(1)\n    if a + c == 2:\n        if b + d == 2:\n            return 'Yes'\n        else:\n            return 'No'\n    else:\n        return 'No'\n"
    },
    {
        "number": 4399,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin[0]\n    b = stdin[1]\n    c = stdin[2]\n    if a!= b and a!= c and b!= c:\n        print(\"No\")\n    elif a == b and a!= c:\n        print(\"Yes\")\n    elif a == c and a!= b:\n        print(\"Yes\")\n    elif b == c and b!= a:\n        print(\"Yes\")\n    elif a == b and a == c:\n        print(\"Yes\")"
    },
    {
        "number": 4399,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if stdin[:2] == \"AB\" or stdin[2:] == \"BA\" else \"No\"\n    \n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4399,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split('\\n')[0], stdin.split('\\n')[1]\n    a_numbers = [int(x) for x in a]\n    b_numbers = [int(x) for x in b]\n    if a_numbers == [1, 3, 2] and b_numbers == [1, 2, 3]:\n        return 'Yes'\n    elif a_numbers == [1, 2, 3] and b_numbers == [1, 3, 2]:\n        return 'Yes'\n    elif a_numbers == [2, 3, 1] and b_numbers == [1, 2, 3]:\n        return 'Yes'\n    elif a_numbers == [2, 3, 1] and b_numbers == [2, 1, 3]:\n        return 'Yes'\n    return 'No'"
    },
    {
        "number": 4399,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin\n    if S[0] == S[1] == S[2] == \"A\":\n        return \"Yes\"\n    elif S[0] == S[1] == S[2] == \"B\":\n        return \"Yes\"\n    elif S[0] == S[1]!= S[2]:\n        return \"Yes\"\n    elif S[0]!= S[1] == S[2]:\n        return \"Yes\"\n    elif S[0] == S[1]!= S[2]:\n        return \"Yes\"\n    elif S[0]!= S[1]!= S[2]:\n        return \"No\"\n"
    },
    {
        "number": 4400,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip('\\n')\n    rainy_days = []\n    for index, ch in enumerate(s):\n        if ch == 'R':\n            rainy_days.append(index)\n    if len(rainy_days) == 0:\n        return 0\n    current_index = rainy_days[0]\n    consecutive_days = 1\n    for index in range(1, len(rainy_days)):\n        if rainy_days[index] - current_index == 1:\n            consecutive_days += 1\n        else:\n            break\n    return consecutive_days\n"
    },
    {
        "number": 4400,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''.join(stdin.split())\n"
    },
    {
        "number": 4400,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    days_with_rain = 0\n    rainy_days = 0\n    days = set()\n    for char in stdin:\n        if char == 'R':\n            rainy_days += 1\n        else:\n            rainy_days = 0\n        days.add(rainy_days)\n        days_with_rain = max(days_with_rain, rainy_days)\n    print(days_with_rain)\n\n    return \"\"\n"
    },
    {
        "number": 4400,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return str(max(map(len, filter(lambda x: x[0] == 'R', [i[0] for i in stdin.split('R')]))))\n\"\"\""
    },
    {
        "number": 4400,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    rainy_days = 0\n    for day in stdin:\n        if day == \"R\":\n            rainy_days += 1\n        else:\n            rainy_days = 0\n        if rainy_days == 3:\n            break\n    return rainy_days\n    #\n    # return \"\"\n    #\n    # return \"\"\n"
    },
    {
        "number": 4400,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return str(max(map(len, stdin.split('R'))))\n\"\"\"\n\nimport sys\n\n\ndef"
    },
    {
        "number": 4400,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    result = 0\n    for i in range(3):\n        if stdin[i] == 'R':\n            result += 1\n        else:\n            result = 0\n        if result > result:\n            result = result\n    return result\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4400,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Find the longest rainy streak in a period of records.\n\n    >>> solution(\"RRS\")\n    2\n    >>> solution(\"RAR\")\n    1\n    \"\"\"\n    data = stdin[:-1]\n    streaks = [0] * len(data)\n    count = 0\n    for idx, char in enumerate(data):\n        if char == \"R\":\n            streaks[idx] = 1\n            count = 0\n        elif char == \"S\":\n            count += 1\n            streaks[idx] = count\n        else:\n            raise ValueError(\"Input is invalid\")\n    return max(streaks)\n"
    },
    {
        "number": 4400,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    days = {'R': 0, 'S': 0}\n    for i in stdin:\n        days[i] += 1\n    return str(max(days['R'], days['S']))"
    },
    {
        "number": 4400,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Find the maximum number of consecutive rainy days in the period.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4401,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\ndef"
    },
    {
        "number": 4401,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = stdin.split(' ')\n    A, B, C = int(A), int(B), int(C)\n    A, B, C = B, A, C\n    A, B, C = C, A, B\n    return f'{A} {B} {C}'\n"
    },
    {
        "number": 4401,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    A, B, C = B, A, C\n    print(A, B, C)\n    return"
    },
    {
        "number": 4401,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = map(int, stdin.split())\n    print(x, y, z)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4401,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    The input is already an array, so we do not need to loop through it\n    \"\"\"\n    A, B, C = map(int, stdin.split())\n    A, B, C = B, C, A\n    return str(A) + \" \" + str(B) + \" \" + str(C)"
    },
    {
        "number": 4401,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = stdin.split()\n    a, b, c = int(a), int(b), int(c)\n    a, b, c = b, c, a\n    return str(a) + \" \" + str(b) + \" \" + str(c)\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4401,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = stdin.split()\n    a, b, c = int(a), int(b), int(c)\n    print(c, a, b)\n\n\ndef"
    },
    {
        "number": 4401,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = stdin.split('\\n')\n    a, b, c = map(int, [a, b, c])\n    a, b, c = a+b, b+c, c+a\n    return str(a) + \" \" + str(b) + \" \" + str(c)"
    },
    {
        "number": 4401,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = [int(x) for x in stdin.split(' ')]\n    A, B = B, A\n    A, C = C, A\n    return \"{} {} {}\".format(A, B, C)"
    },
    {
        "number": 4401,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    arr = stdin.split(' ')\n    a, b, c = arr\n    return''.join([str(c), str(b), str(a)])"
    },
    {
        "number": 4402,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    # note that B must be even\n    if A >= 13 or (A >= 6 and A <= 12):\n        return int(B/2)\n    else:\n        return 0\n"
    },
    {
        "number": 4402,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A = int(stdin[0])\n    B = int(stdin[1])\n    print(A * B)\n    return \"\"\n\"\"\"\n\ndef"
    },
    {
        "number": 4402,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A > 13:\n        if A % 2 == 0:\n            return f\"{(A-13)//2 * B} yen\"\n        else:\n            return f\"{(A-13)//2 * B + B/2} yen\"\n    else:\n        return f\"{0} yen\"\n"
    },
    {
        "number": 4402,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a >= 13:\n        if a >= 66:\n            return b\n        else:\n            return b * 0.5\n    else:\n        return 0"
    },
    {
        "number": 4402,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nA, B = [int(x) for x in stdin.strip().split(\" \")]"
    },
    {
        "number": 4402,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return str(B if A >= 13 and A <= 59 else (B // 2 if A <= 5 else 0))\n"
    },
    {
        "number": 4402,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return '${}'.format(int((A // 13 + 1) * B * 0.5))\n"
    },
    {
        "number": 4402,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    age, money = map(int, stdin.split(' '))\n    if age >= 13:\n        money *= 0.5\n    elif 6 <= age <= 12:\n        money *= 0.8\n    return str(money)"
    },
    {
        "number": 4402,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    age, money = map(int, stdin.split())\n    if age < 6:\n        return 0\n    elif age < 13:\n        return money\n    elif age < 20:\n        return money // 2\n    else:\n        return money // 2 + money // 4 * 3\n    return money\n"
    },
    {
        "number": 4402,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B = [int(n) for n in stdin.split(' ')]\n    if A >= 13:\n        if (A - 6) % 5 == 0:\n            cost = B // 2\n        else:\n            cost = B\n    else:\n        cost = 0\n    return cost\n"
    },
    {
        "number": 4403,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    S = stdin\n    n = len(S)\n    s = [0] * n\n    for i in range(n):\n        if S[i] == \"+\":\n            s[i] = 1\n        else:\n            s[i] = -1\n    print(sum(s))\n"
    },
    {
        "number": 4403,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return \"2\"\n\"\"\"\n\ndef"
    },
    {
        "number": 4403,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin.replace('+','').replace('-','')))\n    pass\n\"\"\"\n\ndef"
    },
    {
        "number": 4403,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"+-\")\n    2\n    >>> solution(\"+-+-+\")\n    0\n    >>> solution(\"-+-+\")\n    1\n    \"\"\"\n    return stdin.count(\"+\") - stdin.count(\"-\")\n"
    },
    {
        "number": 4403,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return '2'\n'''\nfrom typing import List\n\n\ndef"
    },
    {
        "number": 4403,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return"
    },
    {
        "number": 4403,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    takahashi = 0\n    for s in stdin:\n        if s == '+':\n            takahashi += 1\n        else:\n            takahashi -= 1\n    return str(takahashi)"
    },
    {
        "number": 4403,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin\n    return n"
    },
    {
        "number": 4403,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 4403,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin) + 1)"
    },
    {
        "number": 4404,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    date = stdin.split('/')\n    if int(date[1]) >= 4 and int(date[2]) >= 30:\n        print('Heisei')\n    else:\n        print('TBD')\n"
    },
    {
        "number": 4404,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    date = stdin.split('/')\n    if int(date[0]) >= 2019 and int(date[1]) >= 4 and int(date[2]) >= 30:\n        return 'Heisei'\n    return 'TBD'\n"
    },
    {
        "number": 4404,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    #Your code here\n    return \"Heisei\" if int(stdin.split(\"/\")[1]) < 4 else \"TBD\""
    },
    {
        "number": 4404,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"The implementation of the above approach.\"\"\"\n    # Get the date from the stdin.\n    input_date = stdin.split('/')\n    # Convert the date to a more convenient format.\n    input_date = datetime.date(year=2019, month=int(input_date[0]), day=int(input_date[1]))\n    # Create the required date.\n    required_date = datetime.date(year=2019, month=4, day=30)\n    # Check if the input date is before April 30, 2019.\n    if input_date <= required_date:\n        return 'Heisei'\n    return 'TBD'\n"
    },
    {
        "number": 4404,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    return 'Heisei' if 2020 <= int(stdin.split('/')[0]) <= 2019 else 'TBD'\n"
    },
    {
        "number": 4404,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('2019/04/30')\n    'Heisei'\n    \"\"\"\n    date = stdin.split(\"/\")\n    if (int(date[0]) >= 2019 and int(date[1]) >= 4):\n        return \"Heisei\"\n    else:\n        return \"TBD\"\n"
    },
    {
        "number": 4404,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    date = stdin.split('/')\n    year, month, day = int(date[0]), int(date[1]), int(date[2])\n    if year < 2019:\n        return 'TBD'\n    elif month > 4:\n        return 'TBD'\n    elif day > 30:\n        return 'TBD'\n    else:\n        return 'Heisei'"
    },
    {
        "number": 4404,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    result: str = \"TBD\"\n    date: str = stdin\n    date_tokens: List[str] = date.split('/')\n    month_tokens: List[str] = date_tokens[1].split('/')\n    month: int = int(month_tokens[0])\n    day: int = int(month_tokens[1])\n    year: int = int(date_tokens[2])\n    if year >= 2019 and month <= 4 and day <= 30:\n        result = \"Heisei\"\n    return result\n"
    },
    {
        "number": 4404,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    my_date = stdin.split(\"/\")\n    if int(my_date[0]) > 4:\n        print(\"TBD\")\n    else:\n        print(\"Heisei\")\n"
    },
    {
        "number": 4404,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    x = \"\".join(s.split(\"/\"))\n    y = x.split(\"/\")\n    z = list(map(int, y))\n    if z[1] > 4:\n        return \"Heisei\"\n    else:\n        return \"TBD\""
    },
    {
        "number": 4405,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = [int(n) for n in stdin.split()]\n    total_problems = stdin[0]\n    topics = set(stdin[1:])\n    # print(total_problems, topics)\n    max_problems = 0\n    while total_problems > 0:\n        max_problems += (total_problems // 2)\n        total_problems = (total_problems // 2) + (total_problems % 2)\n    print(max_problems)\n    return ''"
    },
    {
        "number": 4405,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = [int(n) for n in stdin.split(' ')]\n    problems, contests = stdin[0], stdin[1:]\n    solutions = 2**problems\n    contest_solutions = contests[::2]\n    solution_num = solutions - sum(contest_solutions)\n    print(solution_num)\n    return str(solution_num)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4405,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the maximum number of problems in the set of thematic contests.\"\"\"\n\"\"\"\n    stdin = input()\n    problems = sorted([int(n) for n in stdin.split('\\n')[0].split()])\n    n = len(problems)\n    lst = [1] + [0] * n + [1]\n    for i in range(1, n + 1):\n        for j in range(i - 1, -1, -1):\n            if problems[j] < problems[i] and lst[j] >= lst[i]:\n                lst[i] = lst[j] + 1\n    return max(lst)\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4405,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    lst = [int(i) for i in stdin.readline().split(' ')]\n    ans = []\n    a = {}\n    for i in range(n):\n        if lst[i] not in a.keys():\n            a[lst[i]] = 1\n        else:\n            a[lst[i]] += 1\n    s = sum(a.values())\n    for i in range(n):\n        if s % 2 == 0:\n            ans.append(lst[i])\n            s -= a[lst[i]]\n            a[lst[i]] = 0\n            s += 1\n        else:\n            if lst[i] in a:\n                a[lst[i]] -= 1\n                s += 1\n    ans.sort()\n    return''.join(str(i) for i in ans)\n"
    },
    {
        "number": 4405,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    A = [int(x) for x in stdin.readline().split()]\n    A.sort(reverse=True)\n    i = 1\n    while i < len(A):\n        if i == 1 and A[i] == A[i - 1]:\n            i += 1\n        elif i > 1 and A[i] == A[i - 1] == A[i - 2]:\n            A.pop(i - 1)\n            i -= 1\n        else:\n            i += 1\n    return len(A)\n"
    },
    {
        "number": 4405,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4405,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nimport re\n\nn = int(input())\nproblems = input().split()\n\nout = re.findall(\"(?<=[1337])\\d+\", stdin)\nproblems_count = {1: 0, 2: 0, 3: 0, 4: 0, 5: 0, 6: 0, 7: 0, 8: 0, 9: 0, 10: 0}\nfor i in range(len(out)):\n    problems_count[int(out[i])] += 1\n\nprint(max(problems_count.values()))"
    },
    {
        "number": 4405,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the maximum number of problems in the set of thematic contests.\n\n    >>> solution(\"18\\n2 1 2 10 2 10 10 2 2 1 10 10 10 10 1 1 10 10\")\n    14\n\n    >>> solution(\"10\\n6 6 6 3 6 1000000000 3 3 6 6\")\n    9\n\n    >>> solution(\"3\\n1337 1337 1337\")\n    3\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4405,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(n):\n        print(i)\n    return 0\n"
    },
    {
        "number": 4405,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(i) for i in stdin.readline().split(' ')]\n    a = sorted(set(a))\n    d = {}\n    for i in range(n):\n        d[a[i]] = i\n    # print(d)\n    q = []\n    for i in range(n - 1):\n        if a[i] < a[i + 1]:\n            q.append(d[a[i]] + 1)\n        else:\n            q.append(d[a[i]])\n    q.append(d[a[-1]])\n    print(len(set(q)))\n    return q"
    },
    {
        "number": 4406,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return None\n"
    },
    {
        "number": 4406,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4406,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    ids = list(map(int, stdin.split()))\n    k = min(k, n)\n    res = []\n    for i in range(n):\n        if ids[i] not in res:\n            if len(res) == k:\n                res.pop()\n            res.append(ids[i])\n        print(res)\n    return \" \".join(map(str, res))\n"
    },
    {
        "number": 4406,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    You need to change the order of conversations in the list.\n    '''\n    n, k = list(map(int, stdin.split(' ')))\n    ids = list(map(int, stdin.split(' ')))\n\n    # initialize the list of conversations\n    conversations = []\n    for i in range(k):\n        conversations.append([])\n\n    # initialize the number of displayed conversations to 0\n    m = 0\n\n    # for each message:\n    #   - check if the conversation with this friend is displayed on the screen\n    #   - if yes:\n    #       - add the message to the list of messages\n    #   - if no:\n    #       - remove the conversation with this friend from the list of conversations\n    #       - if the number of displayed conversations is not equal to k, then sort the list of conversations by the number of messages\n    #       - add the message to the list of messages\n    #       - add the message to the list of displayed conversations\n    for i in range(n):\n        if ids[i] in conversations[-1]:\n            conversations[-1].append(ids[i])\n        else:\n            conversations.pop()\n            if len(conversations) < k:\n                conversations.sort(key=len)\n            conversations.append([ids[i]])\n            m += 1\n    return m\n"
    },
    {
        "number": 4406,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Implement a program to show the list of conversations after receiving all $n$ messages.\n    '''\n\n    n, k = [int(x) for x in stdin.split()]\n    conversations = []\n    for i in range(n):\n        friend_id = int(stdin.split()[i])\n        if friend_id not in conversations:\n            conversations.append(friend_id)\n\n    return len(conversations),''.join([str(x) for x in conversations])\n\nprint(solution(stdin))"
    },
    {
        "number": 4406,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''7 2\n   ... 1 2 3 2 1 3 2\n   ... ''')\n    '2'\n    >>> solution('''10 4\n   ... 2 3 3 1 1 2 1 2 3 3\n   ... ''')\n    '3'\n    >>> solution('''10 2\n   ... 2 3 3 1 1 2 1 2 3 3\n   ... ''')\n    '1'\n    >>> solution('''3 2\n   ... 1 1\n   ... ''')\n    '1'\n    \"\"\"\n    n, k = map(int, stdin.split())\n    conversations = []\n    for i in range(n):\n        a, b = map(int, stdin.split())\n        conversations.append(b)\n    while len(conversations) > k:\n        conversations.remove(max(conversations))\n    return''.join(map(str, conversations))\n"
    },
    {
        "number": 4406,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = stdin.split()\n    k = int(k)\n    n = int(n)\n    \n    messages = stdin.split()[1:]\n    \n    k_min = min(n, k)\n    \n    to_print = []\n    \n    current = []\n    \n    for message in messages:\n        if len(current) < k:\n            current.append(message)\n        else:\n            current.sort()\n            if message in current:\n                current.remove(message)\n            current.append(message)\n            current.sort()\n        if len(current) == k_min:\n            to_print.append(current[0])\n    return str(len(to_print)) +'' +''.join(str(x) for x in to_print)\n\nn, k = input().split()\nk = int(k)\nn = int(n)\n\nmessages = input().split()\n\nto_print = []\ncurrent = []\n\nfor message in messages:\n    if len(current) < k:\n        current.append(message)\n    else:\n        current.sort()\n        if message in current:\n            current.remove(message)\n        current.append(message)\n        current.sort()\n    if len(current) == k:\n        to_print.append(current[0])\n\nprint(str(len(to_print)))\nprint(' '.join(str(x) for x in to_print))"
    },
    {
        "number": 4406,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    ids = [int(x) for x in stdin.split()[n:]]\n    for i in range(n, k):\n        ids[i % n] = 0\n    answer = [j for j in range(k) if ids[j]]\n    return''.join([str(x) for x in answer])\n\nprint(solution(stdin))"
    },
    {
        "number": 4406,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    friend = list(map(int, stdin.split()))\n    m = min(n, k)\n    ans = []\n    for i in range(n):\n        if i < k:\n            ans.append(friend[i])\n        else:\n            if len(ans) <= m:\n                ans.append(friend[i])\n            else:\n                ans.append(ans.pop(0))\n    return''.join(map(str, ans))\n    \n    \n    \n"
    },
    {
        "number": 4406,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nprint(solution(\"\"\"7 2\n1 2 3 2 1 3 2\"\"\"))\nprint(solution(\"\"\"10 4\n2 3 3 1 1 2 1 2 3 3\"\"\"))\n"
    },
    {
        "number": 4407,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    q = int(stdin.readline())\n    queries = []\n    for _ in range(q):\n        queries.append(int(stdin.readline()))\n    a.sort()\n    queries.sort()\n    m_lower = a[0]\n    for i in range(m):\n        m_lower = m_lower * 2\n    m_upper = 2 * m_lower\n    i = 0\n    while i < m and m_lower <= queries[i] <= m_upper:\n        if m_lower == queries[i]:\n            return str(m_lower)\n        m_lower = m_lower * 2\n    return''.join(str(i) for i in queries)\n"
    },
    {
        "number": 4407,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4407,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \n    return str()"
    },
    {
        "number": 4407,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split(' '))\n    coins = list(map(int, stdin.split(' ')))\n    query = [int(stdin) for stdin in stdin.split('\\n')[1:]]\n    sorted_coins = sorted(coins)\n    print(sorted_coins)\n    return''.join(map(str, query))"
    },
    {
        "number": 4407,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''.join(map(str, solution(stdin.readlines())))\n"
    },
    {
        "number": 4407,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n, q = int(lines[0].split()[0]), int(lines[0].split()[1])\n    coins = list(map(int, lines[1].split()))\n    b = []\n    for line in lines[2:]:\n        b.append(int(line))\n    a = []\n    for x in range(n):\n        a.append(1 << (int(log(coins[x], 2))) + 1)\n\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    for x in range(n):\n        dp[0][x] = b[x] - a[x]\n    for i in range(1, n):\n        for j in range(n):\n            k = i % 2\n            dp[i][j] = min(dp[i - 1][(j - k) % n] + a[(j - k) % n], dp[i - 1][(j + k) % n] + a[(j + k) % n])\n    for x in range(q):\n        print(dp[n - 1][b[x] - 1])\n"
    },
    {
        "number": 4407,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 4407,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"5 4\\n2 4 8 2 4\\n8\\n5\\n14\\n10\")\n    '1 -1 3 2'\n    \"\"\"\n   ...\n    N, Q = list(map(int, stdin.split(\" \")))\n    coins = list(map(int, stdin.split(\"\\n\")[1::2]))\n    queries = list(map(int, stdin.split(\"\\n\")[2::2]))\n    result = []\n    for q in queries:\n        count = 0\n        while q >= coins[0]:\n            q -= coins.pop(0)\n            count += 1\n        result.append(count)\n    return \" \".join(str(r) for r in result)\n"
    },
    {
        "number": 4407,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def pow2(a: int) -> int:\n        return 1 << a.bit_length() - 1\n\n    n, q = map(int, stdin.split('\\n')[0].split())\n    a = list(map(int, stdin.split('\\n')[1].split()))\n    assert all(a[i] == pow2(a[i]) for i in range(n))\n    assert stdin.split('\\n')[2].split()[0] == str(q)\n    b = [int(i) for i in stdin.split('\\n')[3:]]\n    assert all(1 <= b[i] <= 10 ** 9 for i in range(q))\n    a.sort()\n    b.sort()\n    dp = [[n, n] for _ in range(n + 1)]\n    dp[0][0] = 0\n    for i in range(n):\n        for j in range(n):\n            if i > j:\n                continue\n            dp[i + 1][j + 1] = dp[i][j] + a[i]\n            for k in range(i, j):\n                dp[i + 1][j + 1] = min(dp[i + 1][j + 1], dp[i][k] + dp[k + 1][j] + b[j] - b[i])\n    # print(dp)\n    for j in range(q):\n        print(dp[n][b[j]])\n    return ''\n"
    },
    {
        "number": 4407,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''\n"
    },
    {
        "number": 4408,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n    \n    \n    return stdout\n"
    },
    {
        "number": 4408,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nimport sys\nimport re\nimport math\nimport itertools\nimport heapq\nfrom collections import Counter\nfrom collections import defaultdict\n\nsys.setrecursionlimit(1000000)\nINPUT_FILE_NAME = 'input.txt'\n\ndef"
    },
    {
        "number": 4408,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split('\\n')[0].split(' ')]\n    arr = [int(x) for x in stdin.split('\\n')[1].split(' ')]\n    f = [int(x) for x in stdin.split('\\n')[2].split(' ')]\n    h = [int(x) for x in stdin.split('\\n')[3].split(' ')]\n    result = 0\n    for i in range(n):\n        count = 0\n        for j in range(k):\n            if (f[j] == arr[i * k + j]):\n                count += 1\n        if (count > 0):\n            result += h[count]\n    return str(result)\n"
    },
    {
        "number": 4408,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4408,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    \u0420\u0435\u0448\u0435\u043d\u0438\u0435\n    \"\"\"\n    n, k = [int(i) for i in stdin.split(\" \")]\n    c = [int(i) for i in stdin.split(\"\\n\")[1:n + 1]]\n    f = [int(i) for i in stdin.split(\"\\n\")[n + 1:]]\n    h = [0] * k\n    for i, j in enumerate(f):\n        for jj in range(k):\n            if c[i * k + jj] == j:\n                h[jj] += 1\n    return max(h)\n"
    },
    {
        "number": 4408,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def find_best_h(best_h: List[int], cards: List[int], n: int, k: int) -> int:\n        for i in range(n):\n            for j in range(k, 0, -1):\n                if len(cards) >= j:\n                    h = sum([\n                        cards[j * i + t] == f for t in range(j)\n                    ])\n                    if h > best_h[i]:\n                        best_h[i] = h\n        return best_h\n\n    n, k = map(int, stdin.split(' '))\n    cards = list(map(int, stdin.split('\\n')[1:]))\n    best_h = [0] * n\n    best_h = find_best_h(best_h, cards, n, k)\n    return sum(best_h)\n"
    },
    {
        "number": 4408,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # get input\n    n, k = [int(x) for x in stdin.split('\\n')[0].split(' ')]\n    cards = [int(x) for x in stdin.split('\\n')[1].split(' ')]\n    favs = [int(x) for x in stdin.split('\\n')[2].split(' ')]\n\n    # create dict with key as the card number and value as the players with that card\n    card_dict = dict()\n    for i in range(len(cards)):\n        if cards[i] in card_dict:\n            card_dict[cards[i]].append(i + 1)\n        else:\n            card_dict[cards[i]] = [i + 1]\n\n    # add players to card_dict\n    for i in range(1, n + 1):\n        if i not in card_dict:\n            card_dict[i] = []\n\n    # remove players that have their card with their favorite number\n    for i in range(len(favs)):\n        if favs[i] in card_dict:\n            card_dict[favs[i]].pop(0)\n\n    # create list of players who have card with their favorite number\n    fav_players = list()\n    for key in card_dict.keys():\n        if card_dict[key]!= []:\n            fav_players.append(card_dict[key][0])\n\n    # sort players in increasing order\n    fav_players.sort()\n\n    # create counter to track number of players with card with their favorite number\n    fav_counter = 0\n    for i in range(1, k + 1):\n        if i in fav_players:\n            fav_counter += 1\n\n    # iterate through all possible card distributions\n    maximum = 0\n    for i in range(k, 0, -1):\n        # check for card distribution with only one player\n        if i in card_dict:\n            maximum += 1\n            continue\n        # iterate through all possible card distributions\n        for j in range(k, 0, -1):\n            if i >= j:\n                if i == j:\n                    maximum += fav_counter\n                    continue\n                else:\n                    if j in card_dict:\n                        maximum += len(card_dict[j])\n\n    # return maximum\n    return maximum\n\nprint(solution('4 3\\n1 3 2 8 5 5 8 2 2 8 5 2\\n1 2 2 5\\n2 6 7'))\nprint(solution('3 3\\n9 9 9 9 9 9 9 9 9\\n1 2 3\\n1 2 3'))\n"
    },
    {
        "number": 4408,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = stdin[0].split(' ')\n    n, k = int(n), int(k)\n    arr = stdin[1].split(' ')\n    arr = [int(arr[i]) for i in range(n)]\n    fav_num = stdin[2].split(' ')\n    fav_num = [int(fav_num[i]) for i in range(n)]\n    arr.sort(reverse=True)\n    arr.sort()\n    max_n = arr[0]\n    arr = arr[::-1]\n    l = [0 for i in range(k)]\n    for i in range(k):\n        num = 0\n        for j in range(i, k * n, k):\n            if arr[j] == fav_num[num]:\n                l[num] += 1\n                num += 1\n            else:\n                break\n    # print(l)\n    l = [0] + l\n    print(l)\n    return''.join(map(str, l))\n"
    },
    {
        "number": 4408,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4 3\n   ... 1 3 2 8 5 5 8 2 2 8 5 2\n   ... 1 2 2 5\n   ... 2 6 7\n   ... ''')\n    '21'\n    >>> solution('''3 3\n   ... 9 9 9 9 9 9 9 9 9\n   ... 1 2 3\n   ... 1 2 3\n   ... ''')\n    '0'\n    \"\"\"\n   ...\n"
    },
    {
        "number": 4408,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4409,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    A = list(map(int, stdin.readline().split()))\n    count = 0\n    operations = []\n    for i in range(n-1):\n        if abs(A[i] - A[i+1]) > 0:\n            if abs(A[i] - A[i+1]) > 1:\n                continue\n            A[i] = A[i] + abs(A[i] - A[i+1])\n            A[i+1] = A[i+1] - abs(A[i] - A[i+1])\n            operations.append((1, i, i+1))\n            count += 1\n    for i in range(count):\n        print(operations[i])\n    return count\n"
    },
    {
        "number": 4409,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    from itertools import permutations\n    n = int(stdin.readline())\n    arr = [int(i) for i in stdin.readline().split(' ')]\n    operation = []\n    for x in permutations([1, 2], 2):\n        operation.append(x)\n    d = {}\n    ans = 10**18\n    for i in operation:\n        a = arr[:]\n        for x in i:\n            a = modify(a, x)\n        d[sum(a)] = i\n        ans = min(ans, sum(a))\n    print(ans)\n    for i in range(ans):\n        print(*d[i+1])\n\n\ndef"
    },
    {
        "number": 4409,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = list(map(int, stdin.split()))\n    arr.sort()\n    \n    def check(arr, n):\n        t = 1\n        for i in range(n):\n            if arr[i+1] == arr[i] + 1:\n                t += 1\n            else:\n                break\n        return t == n\n    \n    def change(arr, n):\n        t = 1\n        for i in range(n):\n            if arr[i+1] == arr[i] + 1:\n                t += 1\n                arr[i] = arr[i] + 1\n            else:\n                break\n        return t == n\n    \n    if check(arr, n):\n        return str(0)\n    \n    t = 0\n    while t < n:\n        t = change(arr, n)\n        if check(arr, n):\n            return str(t)\n    \n    return \"IMPOSSIBLE\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4409,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = [int(x) for x in stdin.readline().strip().split(' ')]\n    l = []\n    for i in range(n):\n        a[i] = abs(a[i])\n    \n    min_dif = sum(a)\n    for i in range(n):\n        a[i] = abs(a[i] - 1)\n        min_dif = min(min_dif, sum(a))\n        a[i] = abs(a[i])\n    \n    for i in range(n):\n        for j in range(n):\n            a[i] = abs(a[i] - 1)\n            a[j] = abs(a[j])\n            min_dif = min(min_dif, sum(a))\n            a[i] = abs(a[i])\n            a[j] = abs(a[j])\n    \n    for i in range(n):\n        for j in range(n):\n            a[i] = abs(a[i] + 1)\n            a[j] = abs(a[j])\n            min_dif = min(min_dif, sum(a))\n            a[i] = abs(a[i])\n            a[j] = abs(a[j])\n    return min_dif\n"
    },
    {
        "number": 4409,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x = list(map(int, stdin.split()))\n    n = x[0]\n    a = x[1:]\n    k = 0\n    while True:\n        idx = [i for i, val in enumerate(a) if val == max(a)]\n        if len(idx) == 1:\n            a[idx[0]] = 0\n            k += 1\n        else:\n            break\n    a = [abs(val) for val in a]\n    idx = [i for i, val in enumerate(a) if val == min(a)]\n    for i in idx:\n        if a[i] == 1:\n            if i == 0 or i == n-1:\n                a[i] = 1\n                k += 1\n            else:\n                a[i] = 2\n                k += 1\n    for i in range(k):\n        print(1, idx[i], i+1)\n        print(2, idx[i], i+1)\n"
    },
    {
        "number": 4409,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4409,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\""
    },
    {
        "number": 4409,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the minimum number of operations required to obtain the array of equal elements and print the order of operations to do it.\n    \"\"\"\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    if n == 1:\n        print(0)\n        print()\n        return\n\n    while True:\n        unique = set(a)\n        if len(unique) == 1:\n            print(0)\n            print()\n            return\n        for i, v in enumerate(a):\n            if v in unique:\n                continue\n            for j, v2 in enumerate(a):\n                if abs(i - j) == 1:\n                    a[i] += abs(v - v2)\n                    break\n        print(a)\n        print()"
    },
    {
        "number": 4409,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return an array of equal elements.\n\n    :param str stdin: The standard input.\n    :return: An array of equal elements.\n    :rtype: str\n    \"\"\"\n    size = int(stdin.split()[0])\n    array = [int(x) for x in stdin.split()[1:]]\n\n    min_value = min(array)\n    array_min = [x for x in array if abs(x - min_value) == 0]\n\n    if len(array_min) == 1:\n        return f'0\\n{size}\\n{array_min[0]}\\n{0}'\n\n    first_index = array.index(max(array_min))\n    array.sort()\n    array_sorted = array[first_index:] + array[:first_index]\n\n    result_value = abs(array_sorted[0] - array_sorted[1])\n    result_index = [i for i, x in enumerate(array_sorted) if abs(x - array_sorted[0]) == result_value]\n\n    result_index = f'{len(result_index)}\\n' + '\\n'.join(str(x) for x in result_index)\n    return f'{result_value}\\n{result_index}'\n"
    },
    {
        "number": 4409,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    a = [2, 4, 6, 6, 6]\n    \n    Operation 1: [2, 8, 10, 10, 10]\n    Operation 2: [2, 4, 6, 6, 6]\n    Operation 3: [2, 4, 6, 6, 6]\n    Operation 4: [2, 4, 6, 6, 6]\n    Operation 5: [2, 4, 6, 6, 6]\n    Operation 6: [2, 4, 6, 6, 6]\n    Operation 7: [2, 4, 6, 6, 6]\n    Operation 8: [2, 4, 6, 6, 6]\n    \n    '''\n    # \u601d\u8def\uff1a\n    # \u9996\u5148\u8981\u660e\u786e\u7684\u662f\uff0c\u53ea\u8981\u628a\u4e00\u4e2a\u6570\u51cf\u53bb\u7edd\u5bf9\u503c\uff0c\u53e6\u4e00\u4e2a\u6570\u5c31\u4f1a\u53d8\u6210\u539f\u6765\u7b2c\u4e8c\u4e2a\u6570\uff0c\u8fd9\u4e2a\u601d\u8def\u5c31\u5f88\u597d\u7406\u89e3\uff0c\u4f46\u662f\u5982\u679c\u6709\u4e24\u4e2a\u8fde\u7eed\u6570\u5b57\u7684\u8bdd\uff0c\u7b2c\u4e8c\u4e2a\u6570\u662f\u4e0d\u80fd\u6539\u53d8\u7684\uff0c\u6240\u4ee5\u6700\u540e\u66f4\u65b0\u65f6\uff0c\u53ea\u7528\u66f4\u65b0\u7b2c\u4e00\u4e2a\u6570\u5373\u53ef\n    # \u76f8\u6bd4\u4e4b\u4e0b\uff0c\u5982\u679c\u4e0d\u786e\u5b9a\u4e0b\u4e00\u6b21\u64cd\u4f5c\u662f\u4ec0\u4e48\uff0c\u5c31\u53ef\u4ee5\u76f4\u63a5\u628a\u6570\u5b57\u53d8\u6210\u5217\u8868\uff0c\u7136\u540e\u8bb0\u5f55\u6700\u540e\u4e00\u4e2a\u64cd\u4f5c\uff0c\u8fd9\u4e2a\u65f6\u5019\uff0c\u76f4\u63a5\u628a\u7b2c\u4e00\u4e2a\u64cd\u4f5c\u6267\u884c\u5b8c\u6bd5\uff0c\u5e76\u4e14\u76f4\u63a5\u7ed3\u675f\n    # \u7136\u540e\u518d\u628a\u8fd9\u4e2a\u6700\u540e\u4e00\u4e2a\u64cd\u4f5c\u653e\u5230\u5217\u8868\u4e2d\uff0c\u8fd9\u6837\u5c31\u80fd\u4fdd\u8bc1\u6240\u6709\u7684\u64cd\u4f5c\u90fd\u662f\u6ee1\u8db3\u8981\u6c42\u7684\uff0c\u4e0d\u4f1a\u6709\u4e24\u4e2a\u64cd\u4f5c\u91cd\u590d\u7684\u60c5\u51b5\n    # \u4f46\u662f\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u6837\u7b97\u6cd5\u4f1a\u591a\u6267\u884c\u4e00\u6b21\u64cd\u4f5c\uff0c\u6240\u4ee5\u5176\u5b9e\u4e0d\u662f\u6700\u4f18\u7684\u7b97\u6cd5\uff0c\u4f46\u662f\u5f88\u5feb\u5c31\u80fd\u89e3\u51b3\u6240\u6709\u95ee\u9898\uff0c\u4e0d\u7528\u505a\u592a\u591a\u7814\u7a76\u4e86\n    # \u8fd9\u4e2a\u7b97\u6cd5\u6709\u4e00\u4e2a\u5de7\u5999\u4e4b\u5904\uff0c\u6bd4\u5982\u6709\u4e24\u4e2a\u8fde\u7eed\u7684\u64cd\u4f5c\uff0c\u53ef\u80fd\u4f1a\u51fa\u73b0\u7b2c\u4e8c\u4e2a\u6570\u6ca1\u6709\u88ab\u6539\u53d8\u7684\u60c5\u51b5\uff0c\u6240\u4ee5\u8fd9\u4e2a\u65f6\u5019\u6211\u4eec\u628a\u6539\u53d8\u64cd\u4f5c\u653e\u5230\u5217\u8868\u4e2d\uff0c\u540e\u9762\u9700\u8981\u6267\u884c\u8fd9\u4e2a\u64cd\u4f5c\n    # \u8fd9\u4e2a\u65f6\u5019\u5982\u679c\u518d\u6b21\u51fa\u73b0\u8fd9\u79cd\u60c5\u51b5\uff0c\u5c31\u662f\u591a\u6267\u884c\u4e86\u4e00\u4e2a\u64cd\u4f5c\uff0c\u6240\u4ee5\u8981\u628a\u8fd9\u4e2a\u64cd\u4f5c\u653e\u5230\u6700\u540e\n    # \u4e0a\u9762\u8fd9\u4e2a\u601d\u8def\u6bd4\u8f83\u597d\u7406\u89e3\uff0c\u4f46\u662f\u6709\u4e00\u4e2a\u95ee\u9898\u5c31\u662f\u8fd9\u6837\u5199\u7684\u65f6\u5019\uff0c\u8981\u628a\u6700\u540e\u7684\u64cd\u4f5c\u653e\u5728\u5217\u8868\u540e\u9762\uff0c\u8fd9\u6837\u5199\u4f1a\u6709\u95ee\u9898\uff0c\u5982\u679c\u7b2c\u4e00\u4e2a\u64cd\u4f5c\u5b8c\u4e86\uff0c\u7b2c\u4e8c\u4e2a\u64cd\u4f5c\u8fd8\u672a\u5b8c\u6210\uff0c\u8fd9\u6837\u4e00\u6765\u5c31\u4f1a\u6709\u591a\u4e2a\u89e3\u7684\u95ee\u9898\n    # \u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u6211\u4eec\u9700\u8981\u628a\u8fd9\u4e2a\u64cd\u4f5c\u52a0\u8fdb\u53bb\uff0c\u7136\u540e\u628a\u6700\u540e\u4e00\u4e2a\u64cd\u4f5c\u52a0\u8fdb\u53bb\uff0c\u8fd9\u6837\u5c31\u80fd\u89e3\u51b3\n    \n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split(' ')))\n    \n    operation_list = []\n    last_operation = (0, None, None)\n    for i in range(n):\n        operation = 1\n        if last_operation[0] == 2:\n            operation = 2\n        operation_list.append((operation, i, last_operation[1]))\n        last_operation = (operation, i, last_operation[1])\n    \n    # \u6b64\u65f6"
    },
    {
        "number": 4410,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4410,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4410,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"100010\\n6 2\\n000000\")\n    1\n    >>> solution(\"100010\\n6 2\\n10101\")\n    2\n    >>> solution(\"100010\\n6 2\\n111111\")\n    0\n    >>> solution(\"100010\\n6 2\\n101010\")\n    1\n    >>> solution(\"100010\\n6 2\\n100010\")\n    1\n    >>> solution(\"100010\\n6 2\\n111010\")\n    1\n    >>> solution(\"100010\\n6 2\\n111011\")\n    0\n    >>> solution(\"100010\\n6 2\\n1110110\")\n    0\n    \"\"\"\n    return \"\"\"\n    \"\"\"\n"
    },
    {
        "number": 4410,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\"\"\"\nfrom typing import List\n\ndef"
    },
    {
        "number": 4410,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time complexity: O(n)\n    Space complexity: O(1)\n    \"\"\"\n    # use first and last as start and end of occupied tables\n    occupied = [False, False]\n    ans = 0\n    for s in stdin:\n        for i in range(2):\n            if s[i] == \"0\" and not occupied[i]:\n                occupied[i] = True\n                ans += 1\n                break\n    return ans\n"
    },
    {
        "number": 4410,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = list(map(int, stdin.split()))\n\n    left = 0\n    right = n - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n        if count_one_in_sliced(s, mid, k):\n            left = mid + 1\n        else:\n            right = mid - 1\n    return right\n\n\ndef"
    },
    {
        "number": 4410,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''6 1\n   ... 100010\n   ... 6 2\n   ... 000000\n   ... 5 1\n   ... 10101\n   ... 3 1\n   ... 001\n   ... 2 2\n   ... 00\n   ... 1 1\n   ... 0\n   ... ''')\n    '2'\n    \"\"\"\n   ...\n"
    },
    {
        "number": 4410,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().strip().split(' '))\n    stdin = list(map(lambda x: int(x, 2), stdin.strip()))\n    s = [0 if i == '1' else i for i in bin(sum(stdin))[2:]]\n    ans = 0\n    for i in range(len(s)):\n        if s[i] == '0':\n            ans += 1\n            if i!= len(s)-1 and k > 0 and s[i+1] == '0':\n                k -= 1\n                ans += 1\n    return ans\n"
    },
    {
        "number": 4410,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n\n    number_of_tries = int(lines[0])\n    for _ in range(number_of_tries):\n        number_of_tables, min_distance = map(int, lines[1].split())\n        string = lines[2]\n\n        # take max of 0s that can be replaced in a string\n        number_of_free_tables = 0\n        for index, value in enumerate(string):\n            if value == \"0\":\n                number_of_free_tables += 1\n                for second_index, second_value in enumerate(string[index:]):\n                    if second_value == \"1\" and abs(index - second_index) > min_distance:\n                        number_of_free_tables -= 1\n                        break\n        number_of_free_tables = max(number_of_free_tables, 0)\n        print(number_of_free_tables)\n"
    },
    {
        "number": 4410,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.splitlines()\n    t = int(input[0])\n    for i in range(1, t+1):\n        n, k = list(map(int, input[i].split()))\n        s = input[i+1]\n        s = \"0\" + s + \"0\"\n        # print(s)\n        pos = []\n        for j in range(n):\n            if s[j] == \"1\":\n                pos.append(j)\n        # print(pos)\n        if pos[0] - k >= 0:\n            for j in range(len(pos)):\n                if pos[j] - pos[0] > k:\n                    print(\"0\")\n                    break\n                else:\n                    print(j+1)\n        else:\n            print(\"0\")"
    },
    {
        "number": 4411,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''7 2\n   ... 11 11\n   ... 9 11\n   ... 7 8\n   ... 8 9\n   ... 7 8\n   ... 9 11\n   ... 7 9\n   ... ''')\n    3\n    >>> solution('''5 1\n   ... 29 30\n   ... 30 30\n   ... 29 29\n   ... 28 30\n   ... 30 30\n   ... ''')\n    3\n    >>> solution('''6 1\n   ... 2 3\n   ... 3 3\n   ... 2 3\n   ... 2 2\n   ... 2 3\n   ... 2 3\n   ... ''')\n    4\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4411,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(s) for s in stdin.split(' ')]\n    segments = [tuple(int(s) for s in stdin.split(' ')) for _ in range(n)]\n\n    counts = [0] * n\n    for segment in segments:\n        for i in range(segment[0], segment[1] + 1):\n            counts[i - 1] += 1\n    \n    min_count = 0\n    for count in counts:\n        min_count += 1 if count > k else 0\n\n    # result = []\n    # for i, count in enumerate(counts):\n    #     if count > k:\n    #         result.append(i + 1)\n\n    print(min_count)\n    # print(' '.join([str(i) for i in result]))\n\n\nsolution(stdin)\n"
    },
    {
        "number": 4411,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Finds the number of segments that cover all bad points and the indices of those segments.\n\n    >>> solution(\"\"\"7 2\n   ... 11 11\n   ... 9 11\n   ... 7 8\n   ... 8 9\n   ... 7 8\n   ... 9 11\n   ... 7 9\"\"\")\n    3\n    >>> solution(\"\"\"5 1\n   ... 29 30\n   ... 30 30\n   ... 29 29\n   ... 28 30\n   ... 30 30\n   ... 29 30\n   ... 29 30\"\"\")\n    3\n    >>> solution(\"\"\"6 1\n   ... 2 3\n   ... 3 3\n   ... 2 3\n   ... 2 2\n   ... 2 3\n   ... 2 3\"\"\")\n    4\n    \"\"\"\n    n, k = map(int, stdin.split())\n    segments = []\n    for i in range(n):\n        l, r = map(int, stdin.split())\n        segments.append((l, r))\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    bad = [0] * n\n    for i in range(k):\n        for l, r in segments:\n            if l <= bad[i] <= r:\n                bad[i] += 1\n    return len(segments) - max(bad)\n"
    },
    {
        "number": 4411,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution to the problem\n\n    Args:\n        stdin (str): The standard input of the problem\n    Returns:\n        str: The solution to the problem\n    \"\"\"\n    # Read the input\n    n, k = [int(num) for num in stdin.split('\\n')[0].split()]\n    segments = []\n    for _ in range(n):\n        segments.append([int(num) for num in stdin.split('\\n')[_].split()])\n\n    # Create a segment tree\n    segments = SegmentTree(segments)\n\n    # An array of booleans, each representing if the segment is bad\n    bad_segments = [False] * n\n\n    # for each segment\n    for i in range(n):\n        # if the segment is bad\n        if bad_segments[i]:\n            # continue\n            continue\n\n        # else, if the segment covers at least k points\n        if segments.query(segments.start[i], segments.end[i] + 1) >= k:\n            # the segment is bad\n            bad_segments[i] = True\n\n            # for all its points\n            for j in range(segments.start[i], segments.end[i] + 1):\n                # if the point is bad\n                if bad_segments[j]:\n                    # continue\n                    continue\n\n                # else, if the point is bad\n                if segments.query(segments.start[j], segments.end[j] + 1) >= k:\n                    # the point is bad\n                    bad_segments[j] = True\n\n    # delete the bad segments\n    for i in range(n - 1, -1, -1):\n        # if the segment is bad\n        if bad_segments[i]:\n            # delete it\n            segments.delete(segments.start[i], segments.end[i])\n\n    # return the minimum number of bad segments\n    return str(segments.size)\n"
    },
    {
        "number": 4411,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n, k = [int(i) for i in lines[0].split(' ')]\n    segments = [[int(i) for i in line.split(' ')] for line in lines[1:]]\n    segments.sort(key=lambda x: x[1])\n    out = []\n    for i in range(len(segments)):\n        j = i + 1\n        while j < len(segments) and segments[i][1] <= segments[j][0]:\n            j += 1\n        out.append(j - 1)\n    return''.join([str(i) for i in out])\n\nprint(solution(stdin))"
    },
    {
        "number": 4411,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    segments = [int(x) for x in stdin.split('\\n')[1:]]\n    segments.sort()\n    covered = set()\n    bad = set()\n    for segment in segments:\n        left, right = segment\n        for i in range(left, right+1):\n            if i in covered:\n                continue\n            covered.add(i)\n            if i in bad:\n                bad.remove(i)\n            if len(covered) >= k:\n                for i in bad:\n                    covered.remove(i)\n                break\n        else:\n            bad.add(segment)\n    return str(len(bad)) + '\\n' +''.join([str(i) for i in sorted(list(bad))])\n"
    },
    {
        "number": 4411,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(' ')]\n    l = [int(x) for x in stdin.split('\\n')[1:-1]]\n    l.sort()\n    h = [0]\n    for i in range(1, n):\n        h.append(l[i] - l[i - 1])\n    s = 0\n    ans = 0\n    while h:\n        if k - s >= h[0]:\n            ans += 1\n            s += h.pop(0)\n        else:\n            h.pop(0)\n            ans += 1\n    return ans\n"
    },
    {
        "number": 4411,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution for Day 2: Crossed Wires\"\"\"\n    lines = stdin.strip().splitlines()\n    n, k = int(lines[0].split()[0]), int(lines[0].split()[1])\n    # init graph\n    graph = {(0, 0): [(0, 1), (0, 2)]}\n    for i in range(n):\n        l, r = [int(x) for x in lines[i + 1].split()]\n        for j in range(l, r + 1):\n            if (j, i) in graph:\n                graph[j, i].append((j, i + 1))\n            else:\n                graph[j, i] = [(j, i + 1)]\n    # compute\n    graph = dfs_graph(graph, (0, 0), k)\n    # format output\n    # if graph[(0, 0)] > k:\n    #     return 0\n    output = []\n    for vertex in graph:\n        if graph[vertex] >= k:\n            output.append(vertex[0])\n    return \" \".join([str(x) for x in output])\n    return answer\ndef"
    },
    {
        "number": 4411,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4411,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution of the task.\"\"\"\n   ...\n"
    },
    {
        "number": 4412,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4412,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''Gets the maximum cumulative prettiness of the contest with three problems.\n    https://codeforces.com/contest/1393/problem/A\n    \n    >>> solution(\"3\\n4\\n5 6 15 30\\n4\\n10 6 30 15\\n3\\n3 4 6\\n\")\n    30\n    '''\n    cases = [i for i in stdin.splitlines() if i!= '']\n    for i, case in enumerate(cases):\n        if i % 2 == 0:\n            n = int(case)\n        else:\n            prettinesses = [int(p) for p in case.split()]\n            prettinesses.sort()\n            for j, p in enumerate(prettinesses):\n                if j == 0:\n                    if p % prettinesses[j + 1]!= 0:\n                        break\n                elif j == len(prettinesses) - 1:\n                    if prettinesses[j - 1] % p!= 0:\n                        break\n                else:\n                    if (prettinesses[j - 1] % p!= 0) and (prettinesses[j + 1] % p!= 0):\n                        break\n            else:\n                return''.join([str(p) for p in prettinesses])\n    return ''\n"
    },
    {
        "number": 4412,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 4412,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return '\\n'.join(solution_obj.get_data())\n\"\"\"\n\nclass Solution:\n    def solve(self):\n        pass\n"
    },
    {
        "number": 4412,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return stdin"
    },
    {
        "number": 4412,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return '0'\n"
    },
    {
        "number": 4412,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    num_queries = int(stdin.readline().strip())\n    queries = [\n        {\n            \"n\": int(stdin.readline().strip()),\n            \"a\": list(map(int, stdin.readline().strip().split())),\n        }\n        for _ in range(num_queries)\n    ]\n\n    max_prettiness = 0\n    for first in queries:\n        for second in queries:\n            if first[\"n\"] > second[\"n\"]:\n                continue\n            for third in queries:\n                if third[\"n\"] < second[\"n\"]:\n                    continue\n                if any(first[\"a\"][i] % second[\"a\"][i]!= 0 for i in range(len(first[\"a\"]))):\n                    continue\n                if any(second[\"a\"][i] % third[\"a\"][i]!= 0 for i in range(len(second[\"a\"]))):\n                    continue\n                if any(third[\"a\"][i] % first[\"a\"][i]!= 0 for i in range(len(third[\"a\"]))):\n                    continue\n\n                max_prettiness = max(\n                    max_prettiness,\n                    sum(first[\"a\"]) + sum(second[\"a\"]) + sum(third[\"a\"]),\n                )\n\n    return max_prettiness\n"
    },
    {
        "number": 4412,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n\nq = int(stdin.readline().strip())\n\nfor i in range(q):\n    n = int(stdin.readline().strip())\n    arr = list(map(int, stdin.readline().strip().split()))\n\n    arr.sort()\n    max_sum = sum(arr[-1::-3])\n\n    for j in range(len(arr) - 2, -1, -3):\n        if j!= 0 and arr[j] % arr[j - 1]!= 0:\n            max_sum += arr[j]\n            break\n        max_sum += arr[j]\n\n    print(max_sum)\n"
    },
    {
        "number": 4412,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4412,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline())\n    solutions = []\n    for _ in range(q):\n        n = int(stdin.readline())\n        a = list(map(int, stdin.readline().split()))\n        a.sort()\n        solutions.append(max(a[0] + a[1] + a[2], a[0] * a[1] * a[2]))\n    return '\\n'.join(map(str, solutions))\n"
    },
    {
        "number": 4413,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stds = stdin[0]\n    stds = int(stds)\n    skills = []\n    for i in range(stds):\n        skills.append(stdin[i+1])\n    skills = list(map(int, skills))\n    skills = sorted(skills)\n    def check(skills):\n        length = len(skills)\n        if length <= 2:\n            return True\n        for i in range(length):\n            for j in range(i+1,length):\n                if skills[j]-skills[i] <= 1:\n                    return False\n        return True\n    if check(skills):\n        print(1)\n        return\n\n    for i in range(1,len(skills)):\n        if skills[i] > skills[i-1]:\n            print(i+1)\n            return"
    },
    {
        "number": 4413,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4\\n2\\n10 1 20\\n2\\n3 6\\n5\\n2 3 4 99 100\\n1\\n42\")\n    2\n    >>> solution(\"4\\n4\\n1 2 3 4\\n5\\n5 5 5\\n7\\n4 4 4 4 4 4 4\")\n    3\n    \"\"\"\n    stdin = stdin.split(\"\\n\")\n    q = int(stdin[0])\n    teams = [set() for _ in range(q)]\n    n = [int(i) for i in stdin[1].split()]\n    a = [int(i) for i in stdin[2].split()]\n    for i in range(3, 3 + n[0]):\n        for j in range(i + 1, i + n[0]):\n            if abs(a[i - 2] - a[j - 2]) == 1:\n                break\n        else:\n            teams[i % q].add(i)\n            teams[i % q].add(j)\n    print(q - 1 - len(teams))\n\n\n\n-----Comments-----\n\nThe solution is quite straightforward: you need to split the students into teams that do not violate the restriction and keep track of the minimum number of teams.\n\nIn the first query, the team is built by selecting two students. In the second query, the team is built by selecting one student. The third query builds a team from a single student.\n\nThe whole problem is solved as a shortest path problem with $n^2$ edges and a time complexity of $O(n^2)$.\n\n\"\"\"\n"
    },
    {
        "number": 4413,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.splitlines()\n    q = int(inputs[0])\n    n = int(inputs[1])\n    diff = list(map(int, inputs[2:n+2]))\n    return solve(diff, q)\n\ndef"
    },
    {
        "number": 4413,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    cases = int(stdin)\n    for _ in range(cases):\n        n = int(stdin)\n        a = [int(x) for x in stdin.split()]\n        a.sort()\n        print(1)\n        if n == 1:\n            print(0)\n        else:\n            d = a[1] - a[0]\n            for i in range(2, n):\n                if a[i] - a[i-1] > 1:\n                    print(2)\n                    break\n            else:\n                print(1)"
    },
    {
        "number": 4413,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return res"
    },
    {
        "number": 4413,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4413,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return None"
    },
    {
        "number": 4413,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    n = int(stdin[0])\n    q = int(stdin[1])\n    a = [int(x) for x in stdin[2].split()]\n    if n == 1:\n        return 1\n    a.sort()\n    a = set(a)\n    print(a)\n    for i in range(q):\n        n = int(stdin[i + 3])\n        if n == 1:\n            print(0)\n            continue\n        cnt = 1\n        k = 1\n        while True:\n            cnt += 1\n            for j in range(n - 1):\n                if abs(a[j] - a[j + 1]) == k:\n                    k += 1\n                else:\n                    break\n            if k == n:\n                break\n        print(cnt)\nsolution('4\\n2\\n2 10 1 20\\n2\\n3 6\\n5\\n2 3 4 99 100')\n"
    },
    {
        "number": 4413,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n    return ''"
    },
    {
        "number": 4413,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Modify this function\n    pass\n\ndef"
    },
    {
        "number": 4414,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    q, *q_i = map(int, stdin.split('\\n'))\n    for i in range(q):\n        stdin = map(int, stdin.split('\\n'))\n        a, b, n, S = stdin[0], stdin[1], stdin[2], stdin[3]\n        print('YES' if (n * S) >= ((a + b) * n) else 'NO')\n        "
    },
    {
        "number": 4414,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 4414,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline())\n    for _ in range(q):\n        a, b, n, S = map(int, stdin.readline().split())\n        if S >= (n * a) and S % b == 0:\n            print('YES')\n        else:\n            print('NO')\n"
    },
    {
        "number": 4414,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4414,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4414,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES'"
    },
    {
        "number": 4414,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline())\n    for _ in range(q):\n        a, b, n, s = list(map(int, stdin.readline().split()))\n        if s < a * n + b * 1:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n"
    },
    {
        "number": 4414,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    pass"
    },
    {
        "number": 4414,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return ''\n"
    },
    {
        "number": 4414,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline())\n    for _ in range(q):\n        a, b, n, s = [int(x) for x in stdin.readline().split()]\n        q1 = n // a\n        q2 = n // b\n        if q1 < q2:\n            q1, q2 = q2, q1\n        if s == q1 * a + q2 * b:\n            print('YES')\n        else:\n            print('NO')\n"
    },
    {
        "number": 4415,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"7 2 7 3 3 1 4\")\n    'YES\\n2\\n3 7\\n5\\n7 4 3 2 1\\n'\n    \"\"\"\n    n = int(stdin.split(\"\\n\")[0])\n    a = list(map(int, stdin.split(\"\\n\")[1].split()))\n    answer = \"NO\"\n\n    # there are no increasing and decreasing sequences\n    if len(set(a)) < len(a):\n        return answer\n\n    # brute force\n    for i in range(len(a)):\n        for j in range(i, len(a)):\n            increasing = a[i : j + 1]\n            decreasing = list(reversed(increasing))\n            if increasing == increasing and decreasing == decreasing:\n                answer = \"YES\\n\"\n                answer += str(len(increasing)) + \"\\n\"\n                answer += \" \".join(map(str, increasing)) + \"\\n\"\n                answer += \" \".join(map(str, decreasing)) + \"\\n\"\n                return answer\n\n    return answer\n"
    },
    {
        "number": 4415,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    sequence = list(map(int, stdin.readline().split()))\n    \n    increasing = []\n    decreasing = []\n    \n    last = -1\n    for i in range(len(sequence)):\n        if sequence[i] > last:\n            increasing.append(sequence[i])\n            last = sequence[i]\n        elif sequence[i] < last:\n            decreasing.append(sequence[i])\n            last = sequence[i]\n    \n    if len(increasing)!= len(decreasing):\n        return 'NO'\n    \n    increasing.sort()\n    decreasing.sort(reverse=True)\n    \n    increasing =''.join(map(str, increasing))\n    decreasing =''.join(map(str, decreasing))\n    \n    return 'YES\\n{}\\n{}'.format(increasing, decreasing)"
    },
    {
        "number": 4415,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, a = int(stdin.split(\"\\n\")[0]), [int(x) for x in stdin.split(\"\\n\")[1].split(\" \")]\n    increasing = []\n    decreasing = []\n    for i in range(n):\n        if a[i] >= a[i + 1]:\n            decreasing.append(a[i])\n        else:\n            increasing.append(a[i])\n    if increasing == increasing[::-1]:\n        print(\"YES\")\n        print(len(increasing))\n        print(\" \".join([str(x) for x in increasing]))\n        return \"\"\n    elif decreasing == decreasing[::-1]:\n        print(\"YES\")\n        print(len(decreasing))\n        print(\" \".join([str(x) for x in decreasing]))\n        return \"\"\n    else:\n        print(\"NO\")\n        return \"\"\n\nsolution(input())\n"
    },
    {
        "number": 4415,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Main function.\n    \n    Args:\n        stdin (str): Input.\n    \n    Returns:\n        str: Output.\n    \"\"\"\n    \n    # Get the input\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n    \n    # We have to check if all numbers are distinct\n    if len(set(a))!= n:\n        return \"NO\"\n    \n    # We have to check if a is a permutation of the ordered numbers 1...n\n    sorted_a = sorted(a)\n    if not set(sorted_a) == set(range(1, n+1)):\n        return \"NO\"\n    \n    # We have to check if all elements are increasing\n    # By definition, the initial increasing sequence is at the beginning of a\n    if not all(a[i] < a[i+1] for i in range(n-1)):\n        return \"NO\"\n    \n    # We have to check if all elements are decreasing\n    # By definition, the initial decreasing sequence is at the end of a\n    if not all(a[i] > a[i+1] for i in range(n-1)):\n        return \"NO\"\n    \n    # If we made it to this point, then we can return \"YES\"\n    return \"YES\\n\" + str(n - sum(a)) + \"\\n\" + \"\\n\".join(map(str, a[:n - sum(a)])) + \"\\n\" + str(n - sum(a)) + \"\\n\" + \"\\n\".join(map(str, a[n - sum(a):]))\n"
    },
    {
        "number": 4415,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split(' ')))\n    min_idx = 0\n    max_idx = n - 1\n    while min_idx < max_idx:\n        if a[min_idx] > a[max_idx]:\n            print('NO')\n            return 'NO'\n        min_idx += 1\n        max_idx -= 1\n    print('YES')\n    a_inc = []\n    if min_idx == 0:\n        a_inc = []\n    else:\n        a_inc = a[:min_idx]\n    a_dec = a[min_idx:]\n    a_inc.sort()\n    a_dec.sort(reverse=True)\n    print(len(a_inc))\n    print(' '.join(map(str, a_inc)))\n    print(len(a_dec))\n    print(' '.join(map(str, a_dec)))\n    if len(a_inc) + len(a_dec)!= n or len(a_inc) == 0 or len(a_dec) == 0:\n        print('NO')\n        return 'NO'\n    a_inc.extend(a_dec)\n    if sorted(a)!= a_inc:\n        print('NO')\n        return 'NO'\n    print('YES')\n    print(len(a_inc))\n    print(' '.join(map(str, a_inc)))\n\nprint(solution(input()))"
    },
    {
        "number": 4415,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = [int(x) for x in stdin.split(\"\\n\")[0].split(\" \")]\n    m = n * 2\n    a.sort()\n    b = []\n    i, j = n - 1, 0\n    while i >= j:\n        b.append(a[i])\n        i -= 1\n        b.append(a[j])\n        j += 1\n    b = b[::-1]\n    c = a[0]\n    if n < m:\n        d = a[1]\n    else:\n        d = a[n - 2]\n    if a == b:\n        return \"YES\"\n    for i in range(m):\n        if b[i] <= c < b[i + 1] or b[i] >= c > b[i + 1]:\n            if b == a:\n                return \"YES\"\n            if i == n - 1:\n                c = b[i]\n                d = b[i]\n            else:\n                c = b[i]\n                d = b[i + 1]\n    if len(set(b)) == m:\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 4415,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return 'YES' if sequences are splitable and 'NO' otherwise.\"\"\"\n    n = int(stdin)\n    a = [int(x) for x in stdin.split(' ')]\n    # if there is no sequence with n elements or there is no permutation of n element sequence\n    if n == 0 or len(set(a))!= n:\n        return 'NO'\n\n    inc = []\n    dec = []\n\n    for i in range(1, n):\n        if a[i] > a[i - 1]:\n            inc.append(a[i - 1])\n            dec.append(a[i])\n        elif a[i] < a[i - 1]:\n            dec.append(a[i - 1])\n            inc.append(a[i])\n        else:\n            # can't split into two sequences with same numbers\n            return 'NO'\n\n    # if there is no empty sequence\n    if not inc and not dec:\n        return 'YES'\n\n    # if empty sequence is the first one or it's not the first one\n    if not inc and inc[0] > dec[0]:\n        return 'NO'\n    if not dec and dec[0] < inc[0]:\n        return 'NO'\n\n    if inc[0] > dec[0]:\n        inc.insert(0, dec[0])\n        inc.extend(dec[1:])\n    else:\n        dec.insert(0, inc[0])\n        dec.extend(inc[1:])\n    return 'YES'\n"
    },
    {
        "number": 4415,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, a = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n\n    up = list()\n    down = list()\n\n    for i in range(n):\n        if i == 0:\n            if a[i] < a[i+1]:\n                up.append(a[i])\n                down.append(a[i+1])\n            else:\n                up.append(a[i+1])\n                down.append(a[i])\n        elif a[i] < a[i-1]:\n            down.append(a[i])\n        else:\n            up.append(a[i])\n    \n    if len(up) == 0 and len(down) == 0:\n        return \"YES\\n0\\n0\"\n\n    if len(down)!= len(up):\n        return \"NO\"\n\n    up.sort()\n    down.sort(reverse=True)\n    up.extend(down)\n\n    if len(up)!= n:\n        return \"NO\"\n    \n    print(\"YES\")\n    print(len(up))\n    print(\" \".join(list(map(str, up))))\n    return \"\"\n\nprint(solution(str(input())))\n"
    },
    {
        "number": 4415,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"5\\n4 3 1 5 3\")\n    YES\n    >>> solution(\"5\\n4 3 1 5 3\\n0\\n\")\n    YES\n    >>> solution(\"7\\n7 2 7 3 3 1 4\\n\")\n    YES\n    >>> solution(\"5\\n4 3 1 5 3\\n0\\n\")\n    YES\n    >>> solution(\"5\\n4 3 1 5 3\\n4\\n\")\n    YES\n    >>> solution(\"5\\n4 3 1 5 3\\n2\\n\")\n    NO\n    >>> solution(\"5\\n4 3 1 5 3\\n5\\n\")\n    NO\n    >>> solution(\"7\\n7 2 7 3 3 1 4\\n5\\n\")\n    NO\n    >>> solution(\"5\\n4 3 1 5 3\\n4\\n3\\n2\\n1\\n\")\n    YES\n    >>> solution(\"7\\n7 2 7 3 3 1 4\\n3\\n3\\n1\\n1\\n\")\n    NO\n    \"\"\"\n    return \"YES\""
    },
    {
        "number": 4415,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    seq = stdin.split('\\n')[1].split(' ')\n    seq = [int(i) for i in seq]\n    s = set()\n    while True:\n        res = []\n        for i in range(len(seq)):\n            if seq[i] not in s:\n                res.append(seq[i])\n                s.add(seq[i])\n        if len(res) == 1:\n            break\n        seq = res\n    # print(res)\n    res = []\n    for i in range(len(seq)):\n        if seq[i] in res:\n            break\n        res.append(seq[i])\n    # print(res)\n    if len(res) == 2 and (res[0] > res[1]):\n        return 'NO'\n    # print(res[0] > res[1])\n    # print(len(res) == 2 and (res[0] > res[1]))\n    inc = []\n    dec = []\n    for i in range(len(seq)):\n        if i < len(res) and res[i] > res[i + 1]:\n            dec.append(res[i])\n            inc.append(res[i + 1])\n    # print(inc, dec)\n    if len(inc) + len(dec) == len(seq):\n        return 'YES\\n{}\\n{}'.format(len(inc),''.join(map(str, inc)))\n    else:\n        return 'NO'"
    },
    {
        "number": 4416,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''"
    },
    {
        "number": 4416,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    book_lst = []\n    for i in range(n):\n        book_lst.append(list(map(int, stdin.split())))\n    book_lst = sorted(book_lst, key=lambda x: x[1])\n    total_read = 0\n    i = 0\n    while i < n:\n        if book_lst[i][2] == 1 and book_lst[i][1] == 0 and i < k:\n            total_read += book_lst[i][0]\n            i += 1\n        else:\n            total_read += book_lst[i][0]\n            book_lst = book_lst[i:]\n            break\n    if i == n:\n        return total_read\n    return -1\n"
    },
    {
        "number": 4416,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    books = []\n    for i in range(n):\n        books.append(list(map(int, stdin.split())))\n    books.sort(key=lambda x: x[0])\n\n    def func(x: int) -> int:\n        if x < books[0][0]:\n            return -1\n        count = 0\n        for i in range(n):\n            count += books[i][1] + books[i][2] if x >= books[i][0] else 0\n            if count >= k:\n                return x\n        return -1\n\n    left = books[0][0]\n    right = books[-1][0]\n    while right - left > 1:\n        mid = left + (right - left) // 2\n        if func(mid) == -1:\n            left = mid\n        else:\n            right = mid\n    return left\n"
    },
    {
        "number": 4416,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Given a list of books and k,\n    choose k books which are liked by both\n    the readers, and the amount of time\n    required to read these books.\n\n    Return the minimum amount of time\n    to read the chosen books.\n    '''\n    books = list(map(int, stdin.split('\\n')[1:]))\n    k = int(stdin.split('\\n')[0].split()[1])\n\n    books.sort(reverse=True)\n    s = sum(books[:k])\n\n    if k == 1 and s < books[k-1]:\n        return -1\n    elif s == books[k-1]:\n        return s\n    else:\n        return s + books[k]\n"
    },
    {
        "number": 4416,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    This function should solve the problem\n    '''\n    pass"
    },
    {
        "number": 4416,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"8 4\\n7 1 1\\n2 1 1\\n4 0 1\\n8 1 1\\n1 0 1\\n1 1 1\\n1 0 1\\n3 0 0\\n\")\n    18\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4416,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Finds solution to the problem.\n    \"\"\"\n    # Your code here\n    # It's main function. Don't remove this function\n    # It's using for auto-testing purposes\n    # Any code here will be ignored by auto-testing\n    return str(res)\n"
    },
    {
        "number": 4416,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the minimum total reading time of the suitable set of books.\"\"\"\n    stdin = stdin.strip()\n    n, k = map(int, stdin.split())\n    books = []\n    for i in range(n):\n        t, a, b = map(int, stdin.split())\n        books.append((t, a, b))\n    books.sort()\n    dp = [[0 for _ in range(k+1)] for _ in range(n)]\n    for i in range(n):\n        for j in range(k+1):\n            if i == 0 or j == 0:\n                continue\n            dp[i][j] = books[i][0] + max(dp[i-1][j-1], dp[i-1][j])\n            if j > a and dp[i][j] >= books[i][0] + dp[i-1][j-a]:\n                dp[i][j] = books[i][0] + dp[i-1][j-a]\n            if j > b and dp[i][j] >= books[i][0] + dp[i-1][j-b]:\n                dp[i][j] = books[i][0] + dp[i-1][j-b]\n    if dp[-1][-1] >= books[-1][0]:\n        return -1\n    else:\n        return dp[-1][-1]\n"
    },
    {
        "number": 4416,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(c) for c in stdin.split(' ')]\n    books = [int(c) for c in stdin.split('\\n')[1:-1]]\n    length = len(books)\n    sum_a = sum_b = 0\n    for i in range(length):\n        if books[i] & 1:\n            sum_a += books[i]\n        else:\n            sum_b += books[i]\n    if sum_a < k or sum_b < k:\n        return -1\n    sum_a_b = 0\n    for i in range(length):\n        if books[i] & 1:\n            sum_a_b += books[i]\n    return sum_a_b\n\n\ndef"
    },
    {
        "number": 4416,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Finds solution to problem \"The library can be more comfortable\".\n    \"\"\"\n    n, k = (int(i) for i in stdin.split())\n    t = [[int(i) for i in stdin.split()] for _ in range(n)]\n    t.sort(key=lambda x: x[0] - x[1])\n    t.sort(key=lambda x: x[2], reverse=True)\n    t.sort(key=lambda x: x[0] + x[1])\n    return t[k - 1][0]\n  \n"
    },
    {
        "number": 4417,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the maximum equal price of all products with the restriction that for all products the condition $|a_i - B| \\le k$ should be satisfied (where $a_i$ is the old price of the product and $B$ is the new equal price of all products).\n    \"\"\"\n    q = int(stdin.readline())\n    for _ in range(q):\n        n, k = list(map(int, stdin.readline().split()))\n        a = list(map(int, stdin.readline().split()))\n        # \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u0430\u0440\u044b \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 a[i] - B[i] <= k \u0434\u043b\u044f \u0432\u0441\u0435\u0445 i \u043e\u0442 0 \u0434\u043e n-1\n        # \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u0430\u0440\u044b \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 a[i] - B[i] <= k \u0434\u043b\u044f \u0432\u0441\u0435\u0445 i \u043e\u0442 1 \u0434\u043e n\n        if n == 1:\n            print(-1)\n        elif k == 1:\n            print(*a)\n        else:\n            B = list(range(min(a), max(a)+1))\n            # \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u043e\u0432\u0430\u043d\u0438\u0435 \u0442\u0440\u0435\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a\u0430 \u043d\u0435 \u0432\u044b\u0448\u0435 k \u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 B\n            # \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u043e\u0432\u0430\u043d\u0438\u0435 \u0442\u0440\u0435\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a\u0430 \u043d\u0435 \u043d\u0438\u0436\u0435 k \u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 B\n            k_sum = 0\n            for i in range(1, n):\n                k_sum += abs(a[i]-a[i-1])\n            k_sum += abs(a[0]-a[n-1])\n            for B_i in B:\n                if B_i - B_i <= k_sum:\n                    break\n            else:\n                B.pop()\n            B.append(k_sum)\n            print(max(B))\n"
    },
    {
        "number": 4417,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    n, k = [int(i) for i in stdin.splitlines()[0].split()]\n    prices = [int(i) for i in stdin.splitlines()[1].split()]\n    return str(max([i + k + 1 for i in range(1, prices[0] + 1) if sum([abs(i - j) for j in prices]) <= k] + [-1]))\n"
    },
    {
        "number": 4417,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    pass\n"
    },
    {
        "number": 4417,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\n-----Read input-----\n\ninp = input()\nn, k = map(int, stdin.split(' '))\nprice = [int(stdin) for i in range(n)]\n\n-----Print answer-----\n\nfor i in range(q):\n    out = solution(stdin)\n    print(out)\n"
    },
    {
        "number": 4417,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... 2 3\n   ... 1 1\n   ... 4 5\n   ... 2 2\n   ... 4 3\n   ... 5 4\n   ... ''')\n    '1'\n    >>> solution('''\n   ... 2 3\n   ... 1 1\n   ... 4 5\n   ... 2 2\n   ... 4 3\n   ... 5 4\n   ... 7 2\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... ''')\n    '6'\n    \"\"\"\n    inp, k = stdin.strip().split('\\n')\n    n, k = map(int, inp.split())\n    a = list(map(int, inp.split()))\n\n    a.sort()\n    ans = 1\n    while k < a[0]:\n        a[0] -= k\n        if a[0] < a[1]:\n            return str(-1)\n        a[1] += k\n        ans += 1\n\n    return str(ans)\n\n\ndef"
    },
    {
        "number": 4417,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Find the maximum possible equal price of all products\n    \"\"\"\n    n, k = [int(c) for c in stdin.strip().split(' ')]\n    a = [int(c) for c in stdin.strip().split('\\n')[1:]]\n    a.sort()\n    if k == 0 or a[0] == 0:\n        return str(sum(a))\n    pre = 0\n    cur = 1\n    res = 0\n    while cur < n:\n        if a[cur] - a[pre] > k:\n            return '-1'\n        res += a[cur] - a[pre]\n        cur += 1\n        pre += 1\n    return str(res + a[cur-1])\n"
    },
    {
        "number": 4417,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"Solution to the problem\"\n    return ''\n\n\ndef"
    },
    {
        "number": 4417,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4417,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4 1\\n1 1 2 3 1\\n4 2\\n6 4 8 5\\n2 2\\n1 6\\n3 5\\n5 2 5\")\n    '2'\n    >>> solution(\"4 1\\n1 1 2 3 1\\n4 2\\n6 4 8 5\\n2 2\\n1 6\\n3 5\\n5 2 5\")\n    '6'\n    >>> solution(\"4 1\\n1 1 2 3 1\\n4 2\\n6 4 8 5\\n2 2\\n1 6\\n3 5\\n5 2 5\")\n    '-1'\n    >>> solution(\"4 1\\n1 1 2 3 1\\n4 2\\n6 4 8 5\\n2 2\\n1 6\\n3 5\\n5 2 5\")\n    '7'\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4417,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your solution\n    return ''\n"
    },
    {
        "number": 4418,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def good_array(a: list[int]) -> bool:\n        \"\"\"Checks if the array a is good. If it's not, return False, otherwise return True.\"\"\"\n        # check if the array is of lenght divisible by 6. If not, return False\n        if len(a) % 6!= 0:\n            return False\n\n        # initialize the values that we will check\n        n = len(a)\n        subseq_length = n // 6\n        for i in range(0, n - subseq_length * 6 + 1, subseq_length):\n            # check if the values of the subsequences are correct\n            if a[i]!= 4 or a[i + subseq_length]!= 8 or a[i + 2 * subseq_length]!= 15 or a[i + 3 * subseq_length]!= 16 or a[i + 4 * subseq_length]!= 23 or a[i + 5 * subseq_length]!= 42:\n                return False\n        return True\n\n    a = [int(x) for x in stdin.split()]\n    return str(sum(a) - (sum(a) // 6) * 6)\n\ndef"
    },
    {
        "number": 4418,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = list(map(int, stdin.readline().split()))\n    return len(arr) - 6 * (sum(arr) // 6)\n"
    },
    {
        "number": 4418,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n\n    return str(0)\n\n\ndef"
    },
    {
        "number": 4418,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.split('\\n')\n    n = int(line[0])\n    a = [int(s) for s in line[1].split(' ')]\n    count = 0\n    while True:\n        ok = True\n        for i in range(0,n,6):\n            if not is_ok(a[i:i+6]):\n                count += 1\n                ok = False\n                break\n        if ok:\n            return count\n        else:\n            count += 1\n            random.shuffle(a)\n\ndef"
    },
    {
        "number": 4418,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \n    # \u0432\u0445\u043e\u0434 \u0434\u0430\u043d\u043d\u044b\u0445\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    \n    # \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u0447\u0435\u0442\u0447\u0438\u043a\u043e\u0432\n    k = 0\n    i = 0\n    l = len(a)\n\n    # \u0432\u044b\u0432\u043e\u0434 \u043d\u0430 \u044d\u043a\u0440\u0430\u043d \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430\n    while i < l:\n        if a[i] == 4 or a[i] == 8 or a[i] == 15 or a[i] == 16 or a[i] == 23 or a[i] == 42:\n            i += 1\n            k += 1\n            continue\n        else:\n            a.pop(i)\n            l -= 1\n            i = 0\n            continue\n    \n    return k"
    },
    {
        "number": 4418,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"\"\"5\n   ... 4 8 15 16 23\n   ... \"\"\")\n    5\n    >>> solution(\"\"\"12\n   ... 4 8 4 8 15 16 8 16 23 15 16 42 23 42\n   ... \"\"\")\n    0\n    \"\"\"\n    pass"
    },
    {
        "number": 4418,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    a = [int(i) for i in stdin.split()]\n    m = len(a)//6\n    s = sum(a)\n    if s % 6:\n        return 'IMPOSSIBLE'\n    s = s // 6\n    if m == s:\n        return 0\n    m = s - m\n    return m"
    },
    {
        "number": 4418,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solve exercise.\"\"\"\n    # Just read stdin\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    m = max(a)\n\n    # Find greatest number which is a multiple of 6\n    # Divide a by m and round up to the nearest integer\n    m //= 6\n    # Check all numbers from 1 to m\n    for i in range(1, m + 1):\n        # Check if number of possible sequences is divisible by 6\n        if n // 6 % i == 0:\n            # Perform check\n            count = 0\n            for j in range(n):\n                # Check if element is not a multiple of 6\n                if a[j] % 6!= 0:\n                    count += 1\n            # Return count\n            return count\n    # If we got here, no sequence divisible by 6 found\n    return n\n"
    },
    {
        "number": 4418,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    lst = [int(s) for s in stdin.split(' ')]\n    good_lst = []\n    bad_lst = []\n    for i in range(len(lst)):\n        if lst[i] == 4 or lst[i] == 8 or lst[i] == 15 or lst[i] == 16 or lst[i] == 23 or lst[i] == 42:\n            good_lst.append(lst[i])\n        else:\n            bad_lst.append(lst[i])\n    bad_lst.sort()\n    res = 0\n    if len(good_lst) % 6!= 0:\n        res = len(bad_lst) % 6\n    else:\n        if len(good_lst) > 0:\n            if len(good_lst) % 6 == 0:\n                l = len(good_lst) // 6\n                if l % 6!= 0:\n                    res = l % 6\n                else:\n                    for i in range(len(good_lst)):\n                        if l % 6!= 0:\n                            if l % 6 == 1:\n                                if l == 1:\n                                    if bad_lst[i] == 4 or bad_lst[i] == 8:\n                                        bad_lst[i] = lst[i]\n                                        l -= 1\n                                    elif bad_lst[i] == 15 or bad_lst[i] == 16:\n                                        bad_lst[i] = lst[i]\n                                        l -= 1\n                                    elif bad_lst[i] == 23 or bad_lst[i] == 42:\n                                        bad_lst[i] = lst[i]\n                                        l -= 1\n                                    else:\n                                        bad_lst[i] = lst[i]\n                                        l -= 1\n                                elif l == 2:\n                                    if bad_lst[i] == 4 or bad_lst[i] == 8:\n                                        bad_lst[i] = lst[i]\n                                        l -= 1\n                                    elif bad_lst[i] == 15 or bad_lst[i] == 16:\n                                        bad_lst[i] = lst[i]\n                                        l -= 1\n                                    elif bad_lst[i] == 23 or bad_lst[i] == 42:\n                                        bad_lst[i] = lst[i]\n                                        l -= 1\n                                    else:\n                                        bad_lst[i] = lst[i]\n                                        l -= 1\n                                elif l == 3:\n                                    if bad_lst[i] == 4 or bad_lst[i] == 8:\n                                        bad_lst[i] = lst[i]\n                                        l -= 1\n                                    elif bad_lst[i] == 15 or bad_lst[i] == 16:\n                                        bad_lst[i] = lst[i]\n                                        l -= 1\n                                    elif bad_lst[i] == 23 or bad_lst[i] == 42:\n                                        bad_lst[i] = lst[i]\n                                        l -= 1\n                                    else:\n                                        bad_lst[i] = lst[i]\n                                        l -= 1\n                                elif l == 4:\n                                    if bad_lst[i] == 4 or bad_lst[i] == 8:\n                                        bad_lst[i] = lst[i]\n                                        l -= 1\n                                    elif bad_lst[i] == 15 or bad_lst[i] == 16:\n                                        bad_lst[i] = lst[i]\n                                        l -= 1\n                                    elif bad_lst[i] == 23 or bad_lst[i] == 42:\n                                        bad_lst[i] = lst[i]\n                                        l -= 1\n                                    else:\n                                        bad_lst[i] = lst[i]\n                                        l -= 1\n                                elif l == 5:\n                                    if bad_lst[i] == 4 or bad_lst[i] == 8:\n                                        bad_lst[i] = lst[i]\n                                        l -= 1\n                                    elif bad_lst[i] == 15 or bad_lst[i] == 16:\n                                        bad_lst[i] = lst[i]\n                                        l -= 1\n                                    elif bad_lst[i] == 23 or bad_lst[i] == 42:\n                                        bad_lst[i] = lst[i]\n                                        l -= 1\n                                    else:\n                                        bad_lst[i] = lst[i]\n                                        l -= 1\n                                else:\n                                    if bad_lst[i] == 4 or bad_lst[i] == 8:\n                                        bad_lst[i] = lst[i]\n                                        l -= 1\n                                    elif bad_lst[i] == 15 or bad_lst[i] == 16:\n                                        bad_lst[i] = lst[i]\n                                        l -= 1\n                                    elif bad_lst[i] == 23 or bad_lst[i] == 42:\n                                        bad_lst[i] = lst[i]\n                                        l -= 1\n                                    else:\n                                        bad_lst[i] = lst[i]\n                                        l -= 1\n                            else:\n                                for i in range(len(good_lst)):\n                                    if l % 6 == 1:\n                                        if l == 1:\n                                            if bad_lst[i] == 4 or bad_lst[i] == 8:\n                                                bad_lst[i] = lst["
    },
    {
        "number": 4418,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solve task.\"\"\"\n    n, *a = [int(s) for s in stdin.splitlines()]\n    a.sort()\n    bad = sum(a[::2]) + sum(a[1::2]) + 6 * (n % 6)\n    print(n - bad)\n    return ''\n"
    },
    {
        "number": 4419,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\ndef"
    },
    {
        "number": 4419,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return a - b"
    },
    {
        "number": 4419,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 4419,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    # \uc81c\ud55c \uc0ac\ud56d : \uc8fc\uc5b4\uc9c4 \uc870\uac74\uc5d0 \ub530\ub77c \ub3cc\uc544\uac08 \uc218 \uc788\ub294 \ubc29\ubc95\uc774 \ud55c \uac00\uc9c0 \uc774\uc0c1 \uc874\uc7ac\ud574\uc57c \ud55c\ub2e4.\n    # \uc8fc\uc5b4\uc9c4 \uc870\uac74\uc5d0 \ub530\ub77c \ucd5c\uc18c \uba87 \ud68c \ub9cc\uc5d0 \ub3cc\uc544\uac08 \uc218 \uc788\ub294\uc9c0\ub97c \uacc4\uc0b0\ud574\uc57c \ud55c\ub2e4.\n    # \uac00\ub2a5\ud55c \ud55c \uac00\uc7a5 \ucd5c\uc18c\uc778 \uacbd\uc6b0\ub97c \uad6c\ud558\uc5ec\uc57c \ud55c\ub2e4.\n\n    # \uc8fc\uc5b4\uc9c4 \uc870\uac74\uc5d0 \ub530\ub978 \uc218\ud589\uc758 \uacbd\uc6b0\uc758 \uc218\ub97c \uad6c\ud55c\ub2e4.\n\n    # \ucd5c\uc18c \uacbd\uc6b0\ub97c \uad6c\ud55c\ub2e4.\n\n    # \ucd5c\uc18c \uacbd\uc6b0\uc758 \uacb0\uacfc\ub97c \ucd9c\ub825\ud55c\ub2e4.\n\n    # return '' or str\n\n    stdin = stdin.split('\\n')\n    t = int(stdin[0])\n    result = []\n    for i in range(t):\n        a, b = map(int, stdin[i + 1].split())\n        diff = b - a\n        result.append(0)\n        if diff % 10 == 0:\n            result[i] = diff // 10\n        elif diff < 0:\n            result[i] = (diff // 10) + 1\n        else:\n            result[i] = (diff // 10) + 2\n    return result\n\n\nprint(solution('1\\n5 5\\n13 42\\n18 4\\n1337 420\\n123456789 1000000000\\n100500 9000'))\n"
    },
    {
        "number": 4419,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4419,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"Find minimum number of moves required to obtain the target number.\"\n    pass\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4419,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 4419,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4419,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return output\n"
    },
    {
        "number": 4419,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '?'\n    return ''"
    },
    {
        "number": 4420,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y, n = map(int, stdin.split('\\n')[1:][0].split(' '))\n    m = n // x + 1 if n % x > 0 else n // x\n    res = 0\n    for i in range(m):\n        res += y if i == 0 else x * (i + 1)\n    return str(res)\n\n\n\n------Test------\n\ndef"
    },
    {
        "number": 4420,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\u0421\u043e\u043e\u0431\u0449\u0430\u0435\u0442 \u043a\u043e\u043b-\u0432\u043e \u043a\u043e\u043c\u0431\u0438\u043d\u0430\u0446\u0438\u0439 \u0438\u0437 \u0447\u0438\u0441\u0435\u043b \u0432\u0438\u0434\u0430 a^b, \u0433\u0434\u0435 a \u0438 b \u0432\u0432\u043e\u0434\u044f\u0442\u0441\u044f \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b\n    :param stdin: \u0441\u0442\u0440\u043e\u043a\u0430 \u0432\u0438\u0434\u0430 a b, \u0433\u0434\u0435 a \u0438 b \u0432\u0432\u043e\u0434\u044f\u0442\u0441\u044f \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b\n    :return: \u0432\u0435\u0440\u043d\u0443\u0442\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0444\u043e\u0440\u043c\u0443\u043b\u044b a^b\n    \"\"\"\n    a, b = int(stdin.split()[0]), int(stdin.split()[1])\n    if a > b:\n        a, b = b, a\n    return str(b * pow(a, b - 1, b) * pow(b - 1, a - 1, b))\n"
    },
    {
        "number": 4420,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4420,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4420,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4420,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    while t > 0:\n        a, b, n = [int(s) for s in stdin.readline().split(' ')]\n        \n        curr = 0\n        for x in range(1, n + 1):\n            if (x * b) % a == 0:\n                curr = x\n                break\n        print(curr)\n        t -= 1\n\n\ndef"
    },
    {
        "number": 4420,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Get input and write your solution here. You can take input from stdin. Print output to stdout\n    :param stdin: input to read\n    :return: output string\n    \"\"\"\n    # Write your code here\n    return None"
    },
    {
        "number": 4420,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return stdin\n"
    },
    {
        "number": 4420,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4420,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    This solution reads in the input string'stdin', converts it to a list of integers\n    (e.g. '7 5 12345' becomes ['7', '5', '12345']), and then finds the max of the\n    remainders modulo 2, 7, and 5.\n    \"\"\"\n    nums = [int(n) for n in stdin.split('\\n')]\n    mods = [0] + [nums[i] % nums[i + 1] for i in range(len(nums) - 1)]\n    return str(max(mods))\n"
    },
    {
        "number": 4421,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\ndef"
    },
    {
        "number": 4421,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 4421,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4421,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4421,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return stdin"
    },
    {
        "number": 4421,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    candies = [int(x) for x in stdin.split()]\n    candies.sort()\n    a = candies[::-1]\n    ans = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (a[i] + a[j]) % k == 0:\n                ans += 1\n    return str(ans)\n"
    },
    {
        "number": 4421,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def is_divisable(k: int, d: int) -> bool:\n        return k % d == 0\n    \n    n, k = [int(x) for x in stdin.split(' ')]\n    stdin = [int(x) for x in stdin.split(' ')[1].split(' ')]\n\n    stdin.sort()\n    \n    left = 0\n    right = len(stdin) - 1\n    count = 0\n\n    while left < right:\n        if is_divisable(k, stdin[left] + stdin[right]):\n            count += 1\n            left += 1\n            right -= 1\n        else:\n            left += 1\n\n    return count\n"
    },
    {
        "number": 4421,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    d = list(map(int, stdin.split(' ')))\n    m = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (d[i] + d[j]) % k == 0:\n                m += 1\n    return m\n"
    },
    {
        "number": 4421,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, K = [int(i) for i in stdin.split('\\n')[0].split(' ')]\n    S = [int(i) for i in stdin.split('\\n')[1].split(' ')]\n    S.sort()\n    S.reverse()\n    res = 0\n    for s in S:\n        if (s * 2) % K == 0:\n            res += 1\n    return str(res)\n\nprint(solution(\"7 2\\n1 2 2 3 2 4 10\"))\nprint(solution(\"8 2\\n1 2 2 3 2 4 6 10\"))\nprint(solution(\"7 3\\n1 2 2 3 2 4 5\"))\nprint(solution(\"8 3\\n1 2 2 3 2 4 6 10\"))"
    },
    {
        "number": 4421,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    pass\n"
    },
    {
        "number": 4422,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Determine the number of elements in the array.\n    For each element, if it's greater than the limit, break it into two parts.\n    Return the modified array.\n    \"\"\"\n    return stdin\n"
    },
    {
        "number": 4422,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    (N, K) = stdin.split(' ')\n    S = stdin.split('\\n')[1]\n\n    return S[0:K-1] + S[K-1].lower() + S[K:]\n\nprint(solution(input()))\n"
    },
    {
        "number": 4422,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, K = [int(x) for x in stdin.split(' ')]\n    S = stdin[stdin.find('\\n') + 1:].strip()\n\n    return S[:K - 1] + S[K - 1].lower() + S[K:]"
    },
    {
        "number": 4422,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the input string after replacing the kth character.\"\"\"\n    # your code here\n    return None"
    },
    {
        "number": 4422,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split(' '))\n    return stdin[:K-1] + stdin[K-1].lower() + stdin[K:]\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4422,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, K = [int(i) for i in stdin.split()]\n    S = stdin.split()[1]\n    return ''.join([S[0] + S[K-1]] + S[1:K-1] + S[K:] + [S[K-1]])"
    },
    {
        "number": 4422,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # read and parse input\n    n, k = map(int, stdin.split())\n    s = stdin.split()[1]\n\n    # solve problem and output solution\n    print(s[:k - 1] + s[k - 1].lower() + s[k:])\n    return ''\n"
    },
    {
        "number": 4422,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, K = stdin.split()\n    S = stdin[2:]\n    S = list(S)\n    S[int(K) - 1] = S[int(K) - 1].lower()\n    S = ''.join(S)\n    print(S)\n\n\ndef"
    },
    {
        "number": 4422,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, K = [int(i) for i in stdin.split('\\n')[0].split(' ')]\n    string = stdin.split('\\n')[1]\n    print(string[:K - 1] + string[K - 1].lower() + string[K:])"
    },
    {
        "number": 4422,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.split('\\n')[1]\n    N = int(stdin.split('\\n')[0].split(' ')[0])\n    K = int(stdin.split('\\n')[0].split(' ')[1])\n    return S[:K - 1] + S[K - 1].lower() + S[K:]\n\nprint(solution(stdin))"
    },
    {
        "number": 4423,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4423,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    The input is read as N and a string with S_i P_i\n    \"\"\"\n    # Create a set of cities\n    cities = set()\n    # We will go through the input line by line\n    for line in stdin.splitlines():\n        # Splitting each line on the ':' character\n        city, score = line.split(\":\")\n        # Appending the set of cities\n        cities.add(city)\n    # Sorting the cities lexicographically\n    cities = sorted(cities)\n    # Sorting the scores by descending order\n    scores = sorted(map(int, stdin.splitlines()), reverse=True)\n    # Returning the result\n    return \"\\n\".join(map(lambda c, s: f\"{c}:{s}\", cities, scores))\n"
    },
    {
        "number": 4423,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    num_of_restaurants = int(stdin[0])\n    restaurant_list = []\n    for i in range(num_of_restaurants):\n        restaurant = stdin[i+1].split(' ')\n        restaurant_list.append(restaurant)\n    restaurant_list.sort()\n    for i in range(num_of_restaurants):\n        print(i+1)\n        \n"
    },
    {
        "number": 4423,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    N = int(stdin[0])\n    cities = []\n    scores = []\n\n    for i in range(1, N + 1):\n        cities.append(stdin[i][:len(stdin[i]) - 1])\n        scores.append(int(stdin[i][len(stdin[i]) - 1]))\n\n    scores.sort()\n    cities.sort()\n    for i in range(N):\n        print(cities.index(scores[N - i - 1]) + 1)\n    return \"\"\n"
    },
    {
        "number": 4423,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    city = []\n    score = []\n    for i in range(n):\n        city.append(stdin.split(\"\\n\")[i + 1].split()[0])\n        score.append(int(stdin.split(\"\\n\")[i + 1].split()[1]))\n    city.sort()\n    score.sort()\n    city.reverse()\n    score.reverse()\n    result = []\n    for i in range(len(city)):\n        if score[i] == max(score):\n            result.append(i + 1)\n    for i in range(len(result)):\n        print(result[i])\n    return result\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4423,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    pass\n"
    },
    {
        "number": 4423,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    scores = [int(x) for x in stdin.split()[1:]]\n    res = [None] * n\n    names = {}\n    for i, score in enumerate(scores):\n        names[i] = score\n    for i in sorted(names, key=names.get):\n        res[i] = str(i + 1)\n    return '\\n'.join(res)\n\nsolution('6\\nkhabarovsk 20\\nmoscow 10\\nkazan 50\\nkazan 35\\nmoscow 60\\nkhabarovsk 40')\n"
    },
    {
        "number": 4423,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return str with the restaurants in the order they appear in the book.\"\"\"\n    n = int(stdin.split('\\n')[0])\n    result = ''\n    cities = []\n    scores = []\n    for i in range(n):\n        s, p = stdin.split('\\n')[i + 1].split(' ')\n        cities.append(s)\n        scores.append(int(p))\n    sorted_cities = sorted(cities)\n    sorted_scores = sorted(scores)\n    for i in range(n):\n        result += str(n - scores.index(sorted_scores[i])) + '\\n'\n    return result\n"
    },
    {
        "number": 4423,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.split()[0]\n    ans = []\n    for i in range(1, n+1):\n        city, score = stdin.split(':')\n        ans.append((i, city, score))\n    ans.sort()\n    return '\\n'.join(str(i) for i, _, _ in ans)\n"
    },
    {
        "number": 4423,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    l = []\n    for i in range(1, n + 1):\n        l.append([stdin.split('\\n')[i].split(' ')[1], stdin.split('\\n')[i].split(' ')[0]])\n\n    l.sort()\n    l.sort(key=lambda x: int(x[1]))\n    for i in range(n):\n        print(l[i][0])\n    return ''\n"
    },
    {
        "number": 4424,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    K, X = map(int, stdin.split())\n    return \"Yes\" if K * 500 + K * 500 >= X else \"No\"\n"
    },
    {
        "number": 4424,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    K, X = map(int, stdin.split())\n    if K * 500 + X >= 1000:\n        return \"Yes\"\n    return \"No\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4424,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    K, X = map(int, stdin.split())\n    return \"Yes\" if X >= K * 500 else \"No\"\n"
    },
    {
        "number": 4424,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    K, X = map(int, stdin.split(' '))\n\n    if K * 500 >= X:\n        return 'Yes'\n    else:\n        return 'No'\n"
    },
    {
        "number": 4424,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # 1. read input and make sure there is no space in the input\n    # 2. convert to float with string type and check that it is in range of 1 to 100\n    K, X = map(float, stdin.split('\\n')[0].split(' '))\n    if 1 <= K <= 100 and 1 <= X <= 10 ** 5:\n        # 3. if K == 0, it is impossible to add up to X or more. So return no\n        if K == 0:\n            return \"No\"\n        # 4. if X == 0, it is impossible to add up to 0 yen, so return no\n        if X == 0:\n            return \"No\"\n        # 5. if K == 1, there is only one coin which has 1 yen. And if the amount of 1 yen coins is larger than X, it is impossible to add up to X or more. So return no\n        if K == 1 and X < 1:\n            return \"No\"\n        # 6. if K == 1, there is only one coin which has 1 yen. And if the amount of 1 yen coins is equal to X, it is possible to add up to X or more. So return yes\n        if K == 1 and X == 1:\n            return \"Yes\"\n        # 7. if K > 1, there are more than 1 coins, so need to check the maximum amount of coin.\n        # 8. X / K will be the maximum amount of coin. And the amount of coins will be X // K\n        return \"Yes\" if X // K >= 1 else \"No\"\n    return \"No\"\n"
    },
    {
        "number": 4424,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    k, x = map(int, stdin.split())\n    return \"Yes\" if k * 500 + x >= 1000 else \"No\""
    },
    {
        "number": 4424,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    k, x = [int(x) for x in stdin.split()]\n    if k * 500 >= x:\n        return \"Yes\"\n    else:\n        return \"No\"\n    return answer\n"
    },
    {
        "number": 4424,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    k, x = map(int, stdin.split())\n    return 'Yes' if k*500 + 100*k >= x else 'No'\n\"\"\""
    },
    {
        "number": 4424,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    k, x = map(int, stdin.split(' '))\n    if k * 500 <= x:\n        return 'Yes'\n    return 'No'"
    },
    {
        "number": 4424,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    k, x = map(int, stdin.split())\n    if k*500 >= x:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4425,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    n, k = map(int, stdin.split())\n    return str(round(sum([sum([binomial(n, i) * ((k-i) / (n-i)) for i in range(1, k+1)]) for n in range(1, k+1)]) / factorial(n) * 2) / 2)"
    },
    {
        "number": 4425,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(v) for v in stdin.split()]\n    return f'{binomial_coefficient(n, k) / n**k}'"
    },
    {
        "number": 4425,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 4425,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    return '{:.9f}'.format(K / (N * (K + 1)) - 1 / (3 * N))"
    },
    {
        "number": 4425,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''"
    },
    {
        "number": 4425,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your solution\n    return ''\n"
    },
    {
        "number": 4425,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    return str(round(sum([1 / 2 ** i for i in range(1, int(stdin.split()[1]))]), 9))"
    },
    {
        "number": 4425,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your solution\n    return ''\n"
    },
    {
        "number": 4425,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(\" \")]\n    if k == 1:\n        return 0\n    prob = 0\n    for i in range(k):\n        prob += (k - i) / (k ** 2 - k + 1) / (n - 1)\n    return str(prob)\n"
    },
    {
        "number": 4425,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.readline().split())\n    # Normal probability\n    prob = 1 / (2 * N)\n    # print(prob)\n    # prob_2 = 1\n    # while prob_2 < prob:\n    #     prob_2 *= 2\n    # print(prob_2)\n    # prob = prob - prob_2\n    prob = 1 / (N - 1)\n    # print(prob)\n    # print(prob_2 - prob)\n    # print(prob_2 - prob)\n    # print(prob / prob_2)\n    # print(prob / prob_2)\n    # print(prob_2 / prob)\n    # print(prob_2 / prob)\n    # print(1 / (prob_2 / prob))\n    # print(1 / (prob_2 / prob))\n    # print(1 / (prob / prob_2))\n    # print(1 / (prob / prob_2))\n    # print(1 / (prob_2 / prob_2))\n    # print(1 / (prob_2 / prob_2))\n    # print(1 / (prob_2 / prob_2))\n    # print(1 / (prob_2 / prob_2))\n    # print(1 / (prob_2 / prob_2))\n    # print(1 / (prob_2 / prob_2))\n    # print(1 / (prob_2 / prob_2))\n    # print(1 / (prob_2 / prob_2))\n    # print(1 / (prob_2 / prob_2))\n    # print(1 / (prob_2 / prob_2))\n    # print(1 / (prob_2 / prob_2))\n    # print(1 / (prob_2 / prob_2))\n    # print(1 / (prob_2 / prob_2))\n    # print(1 / (prob_2 / prob_2))\n    # print(1 / (prob_2 / prob_2))\n    # print(1 / (prob_2 / prob_2))\n    # print(1 / (prob_2 / prob_2))\n    # print(1 / (prob_2 / prob_2))\n    # print(1 / (prob_2 / prob_2))\n    # print(1 / (prob_2 / prob_2))\n    # print(1 / (prob_2 / prob_2))\n    # print(1 / (prob_2 / prob_2))\n    # print(1 / (prob_2 / prob_2))\n    # print(1 / (prob_2 / prob_2))\n    # print(1 / (prob_2 / prob_2))\n    # print(1 / (prob_2 / prob_2))\n    # print(1 / (prob_2 / prob_2))\n    # print(1 / (prob_2 / prob_2))\n    # print(1 / (prob_2 / prob_2))\n    # print(1 / (prob_2 / prob_2))\n    # print(1 / (prob_2 / prob_2))\n    # print(1 / (prob_2 / prob_2))\n    # print(1 / (prob_2 / prob_2))\n    # print(1 / (prob_2 / prob_2))\n    # print(1 / (prob_2 / prob_2))\n    # print(1 / (prob_2 / prob_2))\n    # print(1 / (prob_2 / prob_2))\n    # print(1 / (prob_2 / prob_2))\n    # print(1 / (prob_2 / prob_2))\n    # print(1 / (prob_2 / prob_2))\n    # print(1 / (prob_2 / prob_2))\n    # print(1 / (prob_2 / prob_2))\n    # print(1 / (prob_2 / prob_2))\n    # print(1 / (prob_2 / prob_2))\n    # print(1 / (prob_2 / prob_2))\n    # print(1 / (prob_2 / prob_2))\n    # print(1 / (prob_2 / prob_2))\n    # print(1 / (prob_2 / prob_2))\n    # print(1 / (prob_2 / prob_2))\n    # print(1 / (prob_2 / prob_2))\n    # print(1 / (prob_2 / prob_2))\n    # print(1 / (prob_2 / prob_2))\n    # print(1 / (prob_2 / prob_2))\n    # print(1 / (prob_2 / prob_2))\n    # print(1 / (prob_2 / prob_2))\n    # print(1 / (prob_2 / prob_2))\n    # print(1 / (prob_2 / prob_2))\n    # print(1 / (prob_2 / prob_2))\n    # print(1 / (prob_2 / prob_2))\n    # print(1 / (prob_2 / prob_2))\n    # print(1 / (prob_2 / prob_2))\n    # print(1 / (prob_2 / prob_2))\n    # print(1 / (prob_2 / prob_2))\n    # print(1 / (prob_2 / prob_2))\n    # print(1 / (prob_2 / prob_2))\n    # print(1 / (prob_2 / prob_2))\n    # print(1 / (prob_2 / prob_2))\n    # print(1 / (prob_2 / prob_2))\n    # print(1 / (prob_2 / prob_2))\n    # print(1 / (prob_2 / prob_2))\n    # print(1 / (prob_2 / prob_2))\n    # print(1 / (prob_2 / prob_2))\n    # print(1 / (prob_2 / prob_2))\n    # print(1 / (prob_2 / prob_2))\n    # print(1 / (prob_2 / prob_2))\n    # print(1 / (prob_2 / prob_2))\n"
    },
    {
        "number": 4426,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    days = {'SUN': 0, 'MON': 1, 'TUE': 2, 'WED': 3, 'THU': 4, 'FRI': 5, 'SAT': 6}\n    for i in stdin:\n        days[i] = days[i] + 1\n    next_sunday = days['SUN']\n    return next_sunday"
    },
    {
        "number": 4426,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return str(next_sunday(stdin) - next_sunday('SUN'))\n\ndef"
    },
    {
        "number": 4426,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    weekday = {\n        \"SUN\": \"MON\",\n        \"MON\": \"TUE\",\n        \"TUE\": \"WED\",\n        \"WED\": \"THU\",\n        \"THU\": \"FRI\",\n        \"FRI\": \"SAT\",\n        \"SAT\": \"SUN\"\n    }\n\n    today_weekday = stdin\n    next_weekday = weekday[today_weekday]\n    days = (next_weekday, 1)\n    for i in range(7):\n        days = (next_weekday, i + 1)\n        if days[0] == \"SUN\":\n            return days[1]"
    },
    {
        "number": 4426,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the day next Sunday.\n\n    >>> solution(\"SUN\")\n    1\n    >>> solution(\"WED\")\n    2\n    >>> solution(\"THU\")\n    3\n    >>> solution(\"FRI\")\n    4\n    >>> solution(\"MON\")\n    5\n    >>> solution(\"TUE\")\n    6\n    >>> solution(\"SAT\")\n    7\n    >>> solution(\"SUN\")\n    1\n    >>> solution(\"WED\")\n    2\n    >>> solution(\"THU\")\n    3\n    >>> solution(\"FRI\")\n    4\n    >>> solution(\"MON\")\n    5\n    >>> solution(\"TUE\")\n    6\n    >>> solution(\"SAT\")\n    7\n    \"\"\"\n    week = [\"SUN\", \"MON\", \"TUE\", \"WED\", \"THU\", \"FRI\", \"SAT\"]\n    start_weekday = week.index(stdin)\n    next_weekday = (start_weekday + 1) % len(week)\n    return next_weekday"
    },
    {
        "number": 4426,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    days = {\"SUN\":0, \"MON\":1, \"TUE\":2, \"WED\":3, \"THU\":4, \"FRI\":5, \"SAT\":6}\n    days_of_week = [\"SUN\", \"MON\", \"TUE\", \"WED\", \"THU\", \"FRI\", \"SAT\"]\n    day = stdin\n    day = day.upper()\n    today = days[day]\n    next_day = (today + 1) % 7\n    return next_day\n\nprint(solution(stdin))\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4426,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    day_of_week = {\n        'SUN': 0,\n        'MON': 1,\n        'TUE': 2,\n        'WED': 3,\n        'THU': 4,\n        'FRI': 5,\n        'SAT': 6,\n    }\n\n    today = day_of_week[stdin]\n    print(today)\n\n    next_week = today + 1\n    print(next_week)\n    if next_week > 6:\n        next_week = next_week % 7\n\n    return next_week"
    },
    {
        "number": 4426,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return stdin[0:3]"
    },
    {
        "number": 4426,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # return stdout"
    },
    {
        "number": 4426,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    if (s == \"SUN\"):\n        return 0\n    elif (s == \"MON\"):\n        return 1\n    elif (s == \"TUE\"):\n        return 2\n    elif (s == \"WED\"):\n        return 3\n    elif (s == \"THU\"):\n        return 4\n    elif (s == \"FRI\"):\n        return 5\n    elif (s == \"SAT\"):\n        return 6\n    else:\n        return 0\n"
    },
    {
        "number": 4426,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n  # Write your code here\n  days_of_the_week = ['SUN', 'MON', 'TUE', 'WED', 'THU', 'FRI', 'SAT']\n  today_index = days_of_the_week.index(stdin)\n  \n  if today_index == len(days_of_the_week) - 1:\n    next_day_index = 0\n  else:\n    next_day_index = today_index + 1\n  \n  days_to_next_sunday = next_day_index - today_index\n  \n  return str(days_to_next_sunday)"
    },
    {
        "number": 4427,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    r, D, x2000 = map(int, stdin.split(' '))\n    for i in range(2010):\n        x_i = r * x2000 - D\n        print(x_i)\n        x2000 = x_i\n"
    },
    {
        "number": 4427,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    r, D, x = map(int, stdin.split())\n    for i in range(2000, 2011):\n        x = r * x - D\n        print(x)"
    },
    {
        "number": 4427,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''"
    },
    {
        "number": 4427,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    r, D, x2000 = map(int, stdin.split())\n    for i in range(2010):\n        x2000 = r * x2000 - D\n    return [str(x) for x in range(x2000 + 1, x2000 + 11)]\n"
    },
    {
        "number": 4427,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    r, D, x_2000 = [int(s) for s in stdin.split()]\n    x = x_2000\n    for i in range(2010 - 2000):\n        x = r * x - D\n        print(x)"
    },
    {
        "number": 4427,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    for line in stdin:\n        r, D, x = map(int, line.split(' '))\n        for i in range(2001, 2011):\n            x = r * x - D\n            print(x)\n            \nreturn solution(stdin)\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4427,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    r, D, x = stdin.split()\n    x = int(x)\n    x_2000 = r * x + D\n    for _ in range(2000, 2011):\n        print(x_2000)\n        x_2000 = x_2000 * r - D"
    },
    {
        "number": 4427,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    r, D, x_2000 = map(int, stdin.split())\n    x = x_2000\n    for i in range(2010, 2020):\n        x = r * x - D\n        print(x)\n"
    },
    {
        "number": 4427,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    r, D, x = map(int, stdin.split(' '))\n    \n    for i in range(2000, 2011):\n        x = r * x - D\n        print(x)\n    \n    return '\\n'.join(str(i) for i in range(2001, 2011))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4427,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    r, D, x = [int(x) for x in stdin.split(' ')]\n    for i in range(2010 - 2000 + 1):\n        print(int(r * x - D))\n        r, D, x = r, D, int(r * x - D)\n"
    },
    {
        "number": 4428,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"O(N) time and O(1) space\"\"\"\n    n = int(stdin.readline().strip())\n    nums = [int(x) for x in stdin.readline().strip().split()]\n    max_sum = 0\n    for first in range(n - 2):\n        for second in range(first + 1, n - 1):\n            third = n - 1\n            while third > second:\n                if (\n                    sum(nums[:first + 1]) == sum(nums[first + 1 : second + 1]) == sum(nums[second + 1 : third + 1])\n                ):\n                    max_sum = max(max_sum, sum(nums[:first + 1]) + sum(nums[first + 1 : second + 1]) + sum(nums[second + 1 : third + 1]))\n                third -= 1\n    print(max_sum)\n    return \"\"\n"
    },
    {
        "number": 4428,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4428,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time complexity: O(n)\n    Space complexity: O(1)\n    \"\"\"\n    n = int(stdin)\n    nums = sorted([int(s) for s in stdin.split('\\n')[0].split(' ')])\n    s1, s2, s3 = 0, 0, 0\n\n    for i in range(n):\n        if i % 3 == 0:\n            s1 += nums[i]\n        elif i % 3 == 1:\n            s2 += nums[i]\n        else:\n            s3 += nums[i]\n    return max(s1, s2, s3)\n"
    },
    {
        "number": 4428,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Creates the solution for the given array\n    \"\"\"\n    pass\n\ndef"
    },
    {
        "number": 4428,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nfrom typing import List, Tuple, Dict\n\n\nclass Solution:\n    def solve(self, n: int, d: List[int]) -> int:\n        \"\"\"\n        Compute the maximum possible sum.\n        \"\"\"\n        count = {k: 0 for k in set(d)}\n        for i in d:\n            count[i] += 1\n        \n        s1 = 0\n        s2 = 0\n        s3 = 0\n        for k, v in count.items():\n            s1 += k * v\n            s2 += k * v * v\n        \n        return max(s1, s2)\n"
    },
    {
        "number": 4428,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\nreturn ''\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4428,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4428,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    1. \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c, \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442 \u043b\u0438 \u0432\u0435\u0440\u043d\u044b\u0439 \u043c\u0430\u0441\u0441\u0438\u0432 \u043f\u043e \u043f\u0440\u0430\u0432\u0438\u043b\u0430\u043c: \n    2. \u041e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043c\u0430\u0441\u0441\u0438\u0432 \u0441\u043e\u0433\u043b\u0430\u0441\u043d\u043e \u043f\u043e\u0440\u044f\u0434\u043a\u0443 \u0441\u0443\u043c\u043c\u044b \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432.\n    3. \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c, \u0435\u0441\u0442\u044c \u043b\u0438 \u0432 \u043d\u0435\u043c \u0434\u0432\u0430 \u043f\u043e\u0434\u043c\u0430\u0441\u0441\u0438\u0432\u0430 \u0441 \u0440\u0430\u0432\u043d\u044b\u043c\u0438 \u0441\u0443\u043c\u043c\u0430\u043c\u0438 \u0438 \u0441\u0430\u043c\u0438 \u043f\u043e\u0434\u043c\u0430\u0441\u0441\u0438\u0432\u044b \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0442 \u043f\u0440\u0430\u0432\u0438\u043b\u0430\u043c \u0434\u043b\u044f \u0440\u0430\u0437\u0431\u0438\u0435\u043d\u0438\u044f \u044d\u0442\u043e\u0433\u043e \u043c\u0430\u0441\u0441\u0438\u0432\u0430.\n    4. \u041d\u0430\u0439\u0442\u0438 \u043d\u0430\u0438\u043c\u0435\u043d\u044c\u0448\u0443\u044e \u0441\u0443\u043c\u043c\u0443, \u0443\u0434\u043e\u0432\u043b\u0435\u0442\u0432\u043e\u0440\u044f\u044e\u0449\u0443\u044e \u044d\u0442\u043e\u043c\u0443 \u043f\u0440\u0430\u0432\u0438\u043b\u0443.\n    \"\"\"\n    stdin = stdin.split()\n    stdin = list(map(int, stdin))\n    n = stdin[0]\n    stdin = stdin[1:]\n    stdin.sort(reverse=True)\n    a = sum(stdin[0: n // 3])\n    b = sum(stdin[n // 3: n // 3 * 2])\n    c = sum(stdin[n // 3 * 2:])\n    if a == b and a == c:\n        print(sum(stdin))\n    else:\n        print(0)\n"
    },
    {
        "number": 4428,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    d = [int(x) for x in stdin.split('\\n')[0].split()]\n    m = max(d)\n    d = [x % m for x in d]\n    print(sum(d[1:]) + max(d[:n-1]))"
    },
    {
        "number": 4428,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    pass\n"
    },
    {
        "number": 4429,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    answer = []\n    for _ in range(t):\n        s = stdin.split()\n        x, y, z = [int(x) for x in s]\n        if z > y > x or y > z > x or x > z > y:\n            answer.append('YES')\n        else:\n            answer.append('NO')\n    print('\\n'.join(answer))"
    },
    {
        "number": 4429,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    num_test_cases = int(stdin)\n    for _ in range(num_test_cases):\n        a, b, c = [int(i) for i in stdin.split(\"\\n\")[1].split(\" \")]\n        if a > b and a > c:\n            if b > c:\n                print(a, b, c)\n            else:\n                print(a, c, b)\n        else:\n            print(\"NO\")"
    },
    {
        "number": 4429,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    cases = stdin.split('\\n')[:-1]\n    result = []\n    for case in cases:\n        x, y, z = map(int, case.split(' '))\n        a = max(x, y)\n        b = max(x, z)\n        c = max(y, z)\n        if a > b and a > c and b > c:\n            result.append('YES')\n        else:\n            result.append('NO')\n    return '\\n'.join(result)\n    \n\ndef"
    },
    {
        "number": 4429,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"Compute the solution\"\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        x, y, z = list(map(int, stdin.readline().strip().split()))\n        l = [x, y, z]\n        l.sort()\n        if l[0] < l[1] < l[2]:\n            print(\"YES\")\n            print(l[0], l[1], l[2])\n        else:\n            print(\"NO\")\n"
    },
    {
        "number": 4429,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    max_a = 0\n    max_b = 0\n    max_c = 0\n    for i in range(a):\n        x, y, z = map(int, stdin.split(\" \"))\n        a, b, c = 0, 0, 0\n        if x >= max_a:\n            if y >= max_a:\n                if z >= max_a:\n                    a = max_a\n                    if y >= z:\n                        b = y\n                        c = z\n                    else:\n                        b = z\n                        c = y\n                elif z < max_a:\n                    if y >= max_a:\n                        a = y\n                        b = max_a\n                        c = z\n                    else:\n                        a = z\n                        b = y\n                        c = max_a\n            elif y < max_a:\n                if z >= max_a:\n                    a = z\n                    b = max_a\n                    c = y\n                elif z < max_a:\n                    if x >= max_a:\n                        a = x\n                        b = max_a\n                        c = z\n                    else:\n                        a = z\n                        b = x\n                        c = max_a\n        elif x < max_a:\n            if y >= max_a:\n                if z >= max_a:\n                    a = x\n                    if y >= z:\n                        b = y\n                        c = z\n                    else:\n                        b = z\n                        c = y\n                elif z < max_a:\n                    if x >= max_a:\n                        a = x\n                        b = max_a\n                        c = z\n                    else:\n                        a = x\n                        b = z\n                        c = max_a\n            elif y < max_a:\n                if z >= max_a:\n                    a = z\n                    b = x\n                    c = max_a\n                elif z < max_a:\n                    if x >= max_a:\n                        a = x\n                        b = max_a\n                        c = z\n                    else:\n                        a = x\n                        b = z\n                        c = max_a\n    return [str(a), str(b), str(c)]\n    \n"
    },
    {
        "number": 4429,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3 2 3\n   ... 100 100 100\n   ... 50 49 49\n   ... 10 30 20\n   ... 1 1000000000 1000000000''')\n    YES\n    3 2 1\n    YES\n    100 100 100\n    NO\n    NO\n    YES\n    1 1 1000000000\n    \"\"\"\n    pass"
    },
    {
        "number": 4429,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # return \"NO\"\n    x, y, z = [int(num) for num in stdin.split(\"\\n\")[1:]]\n    if x > y: x, y = y, x\n    if y > z: y, z = z, y\n    if x > y: x, y = y, x\n    if y > z: z = y\n    if x == z:\n        print(\"YES\")\n        print(z, z, z)\n    else:\n        print(\"NO\")\n    return \"YES\"\n\nfor _ in range(int(input())):\n    print(solution(input()))\n"
    },
    {
        "number": 4429,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    This solution performs an exponential search on the search space of a valid\n    solution.\n\n    :param stdin: Input\n    :return: Output\n    \"\"\"\n    test_cases = int(stdin.readline().strip())\n    for _ in range(test_cases):\n        numbers = list(map(int, stdin.readline().split()))\n        x, y, z = numbers[0], numbers[1], numbers[2]\n        for a in range(x, 0, -1):\n            for b in range(x, 0, -1):\n                if a + b >= z:\n                    c = z - a - b\n                    if c <= 0:\n                        continue\n                    if x == a and y == b and z == c:\n                        print('YES')\n                        print(a, b, c)\n                        break\n                else:\n                    break\n        else:\n            print('NO')\n    return ''\n"
    },
    {
        "number": 4429,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = int(stdin.readline())\n    for test_case in range(0, test_cases):\n        x, y, z = map(int, stdin.readline().split())\n        max_x = max(x, y)\n        max_y = max(x, z)\n        max_z = max(y, z)\n        if max_x == x and max_y == max_x and max_z == max_x:\n            print(\"YES\")\n            print(x, y, z)\n        else:\n            print(\"NO\")\n            \n    return \"\"\n"
    },
    {
        "number": 4429,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Finds maximums for x, y and z using a single loop.\n    \"\"\"\n    t = int(stdin.readline())\n    for _ in range(t):\n        x, y, z = list(map(int, stdin.readline().split()))\n        a, b, c = x, y, z\n        if x < y:\n            if y < z:\n                a, b, c = y, z, x\n            elif y == z:\n                a, b, c = x, y, y\n        elif x == y:\n            if y < z:\n                a, b, c = x, y, x\n            elif y == z:\n                a, b, c = x, x, x\n        else:\n            a, b, c = x, x, x\n        if a < b and b < c:\n            print(\"YES\")\n            print(a, b, c)\n        else:\n            print(\"NO\")\n"
    },
    {
        "number": 4430,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 4430,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    a = map(int, stdin.split()[1:])\n    count = 0\n    for i in a:\n        if (m - k >= i):\n            m -= i\n            count += 1\n        else:\n            break\n    print(count)\n    return \"\"\nprint(solution(input()))\n"
    },
    {
        "number": 4430,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5 2 6\n   ... 5 2 1 4 2\n   ... ''')\n    '4'\n    \"\"\"\n    _, _, k = map(int, stdin.split('\\n')[0].split())\n    arr = list(map(int, stdin.split('\\n')[1].split()))\n    arr.sort(reverse=True)\n    n = len(arr)\n    count = 0\n    i = 0\n    while i < n:\n        j = 0\n        while j < k and i < n:\n            if arr[i] >= j + 1:\n                j += arr[i]\n                i += 1\n                count += 1\n            else:\n                break\n        if i == n:\n            break\n    return str(count)\n"
    },
    {
        "number": 4430,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split(\"\\n\")[0].split())\n    objects = list(map(int, stdin.split(\"\\n\")[1].split()))\n    boxes = [k] * m\n    if sum(objects) <= k * m:\n        print(m)\n        return\n    for i in range(n):\n        for j in range(m):\n            if boxes[j] >= objects[i]:\n                boxes[j] -= objects[i]\n                break\n    print(max(list(map(lambda x: (x + 1) * (x + 1), boxes))))\n\n\ndef"
    },
    {
        "number": 4430,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5 2 6\n   ... 5 2 1 4 2\n   ... ''')\n    '4'\n    >>> solution('''5 1 4\n   ... 4 2 3 4 1\n   ... ''')\n    '1'\n    >>> solution('''5 3 3\n   ... 1 2 3 1 1\n   ... ''')\n    '5'\n    \"\"\"\n    n, m, k = list(map(int, stdin.split()))\n    boxes = list(map(int, stdin.split()))\n\n    boxes.sort()\n    boxes.reverse()\n\n    if boxes[0] < k:\n        return '0'\n\n    result = 0\n    current_boxes = []\n    boxes_counter = {i: boxes.count(i) for i in boxes}\n\n    while boxes:\n        if boxes_counter[boxes[0]] > 0:\n            current_boxes.append(boxes.pop(0))\n            boxes_counter[boxes[0]] -= 1\n            if sum(current_boxes) >= k:\n                result += 1\n                current_boxes = []\n        else:\n            if len(current_boxes) > 0:\n                if len(boxes) > 0:\n                    if boxes[0] > current_boxes[0]:\n                        current_boxes.pop(0)\n                        boxes_counter[current_boxes[0]] += 1\n                    else:\n                        current_boxes.append(boxes.pop(0))\n                        boxes_counter[current_boxes[0]] += 1\n                else:\n                    current_boxes.pop(0)\n                    boxes_counter[current_boxes[0]] += 1\n            else:\n                boxes.pop(0)\n                boxes_counter[boxes[0]] += 1\n\n    return str(result)\n"
    },
    {
        "number": 4430,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    The function reads the input, converts it to the required format\n    and then performs the task of the problem.\n    :param stdin: str\n    :return: str\n    \"\"\"\n    n, m, k = map(int, stdin.readline().split())\n    objects = list(map(int, stdin.readline().split()))\n\n    # initializing the objects\n    possible_objects = []\n    for i in range(1, n + 1):\n        possible_objects.append([i, objects[i - 1]])\n\n    # sorting the objects in descending order by their size\n    possible_objects = sorted(possible_objects, key=lambda x: x[1])\n    possible_objects = possible_objects[::-1]\n\n    # initializing the boxes\n    boxes = []\n    for i in range(m):\n        boxes.append([k, k])\n\n    # filling the boxes with the objects\n    for i in range(len(possible_objects)):\n        for j in range(len(boxes)):\n            if (possible_objects[i][1] > boxes[j][0]) and (possible_objects[i][1] - boxes[j][0] >= 0):\n                boxes[j][0] -= possible_objects[i][1]\n                possible_objects[i][1] = 0\n                break\n\n    # determining the number of objects\n    count = 0\n    for i in range(len(possible_objects)):\n        if possible_objects[i][1] > 0:\n            count += 1\n\n    return count\n\n\ndef"
    },
    {
        "number": 4430,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    _, boxes, boxes_size = [int(x) for x in stdin.split('\\n')]\n    objects = [int(x) for x in stdin.split('\\n')][1]\n\n    index = boxes_size\n    ans = 0\n    while True:\n        while index > 0 and objects >= boxes_size:\n            objects -= boxes_size\n            index -= boxes_size\n            ans += 1\n        if index == 0:\n            break\n        ans += 1\n        index -= 1\n        objects -= 1\n\n    return ans\n"
    },
    {
        "number": 4430,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Calculate the maximum number of objects Maksim can pack in boxes.\n\n    Parameters\n    ----------\n    stdin\n        String with objects and boxes data.\n\n    Returns\n    -------\n    str\n        Maximum number of objects that Maksim can pack in boxes.\n    \"\"\"\n    n, m, k = map(int, stdin.split('\\n')[0].split())\n    a = list(map(int, stdin.split('\\n')[1].split()))\n    a.sort()\n    b = []\n    s = 0\n    for i in range(n):\n        s += a[i]\n        b.append(s)\n\n    ans = 0\n    for i in range(n):\n        for j in range(m):\n            if b[i] - a[i] >= j:\n                ans = max(ans, i + 1)\n                break\n    print(ans)\n\n    return ''\n"
    },
    {
        "number": 4430,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4430,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(x) for x in stdin.split(' ')]\n    a = [int(x) for x in stdin.split(' ')]\n    # \u041f\u043e\u0440\u044f\u0434\u043e\u043a \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0439 \u043d\u0435 \u0432\u0430\u0436\u0435\u043d, \u043f\u043e\u0442\u0440\u0456\u0431\u043d\u043e \u043d\u0430 \u043c\u043e\u043c\u0435\u043d\u0442 \u0432\u0438\u0434\u0430\u043b\u0435\u043d\u043d\u044f \u043e\u043f\u0435\u0440\u0430\u043d\u0434\u0430\n    # \u043d\u0430\u0439\u043c\u0435\u043d\u0448\u0438\u0439 \u0437 \u043d\u0430\u0431\u043e\u0440\u0443 \u043e\u043f\u0435\u0440\u0430\u043d\u0434\u0456\u0432\n    x = [0]\n    for i in range(n):\n        while a[i] > 0 and x and x[-1] + a[i] > k:\n            x.pop()\n        x.append(a[i])\n        a[i] -= x[-1]\n    print(len(x))\n    return \"\""
    },
    {
        "number": 4431,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Calculate number of substrings of's' that can be typed with 'k' Latin letters.\"\"\"\n    # n: string length\n    # k: number of available Latin letters\n    # s: string with all possible substrings\n    n, k = map(int, stdin.split())\n    s = stdin.split()[1]\n\n    # 'k' substrings can be made only from 'k' Latin letters\n    # index of first available letter\n    a = [i for i, c in enumerate(s) if c.isalpha()][:k]\n    if a == []:\n        return 0\n    # substrings can be made from 'a' - 'a[-1]' letters\n    # all indices where letter is available\n    avail = [i for i, x in enumerate(s) if x.isalpha()]\n    # number of substrings made with available letters\n    num_subs = len([1 for i in range(len(avail)) if max(avail[i:]) - min(avail[i:]) + 1 == k])\n\n    return num_subs\n"
    },
    {
        "number": 4431,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n, k = [int(x) for x in stdin.split()]\n    s = stdin\n    s = s[0:n]\n    c = stdin\n    c = c.split()\n    print(s)\n    print(c)\n\n    def func(s, c):\n        # s = input()\n        # c = input()\n        # c = [x for x in c.split()]\n        c_index = [0]\n        # create index of letters\n        for i in c:\n            c_index.append(c_index[-1] + s.count(i))\n        # print(c_index)\n        # create list of letters and its index in input\n        s_l = []\n        for i in range(len(s)):\n            s_l.append((s[i], i))\n        # print(s_l)\n        # create list of letter and its index in input, and the letters which will be used\n        use = []\n        for i in s_l:\n            if i[0] in c and i[1] not in use:\n                use.append(i[1])\n        print(use)\n\n        def count(l, u):\n            if u == 0:\n                return 1\n            return sum([count(l, i - 1) for i in range(u + 1) if i not in l])\n        return count(use, len(use) - 1)\n    print(func(s, c))\n    # s = 'abacaba'\n    # c = ['a', 'b']\n    # print(s[1:3])"
    },
    {
        "number": 4431,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return 0"
    },
    {
        "number": 4431,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.split('\\n')[1]\n    c = stdin.split('\\n')[2].split()\n    k = len(c)\n    return n * ((n + 1) // 2) - len(set(s) - set(c))\n    # print(n * ((n + 1) // 2) - len(set(s) - set(c)))\n    # return len(set(s) - set(c))\n\nsolution(\"10 3\\naaaaaaa\\nf a d\")"
    },
    {
        "number": 4431,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.split()[1]\n    from collections import Counter\n    cnt = Counter(s)\n    ans = 0\n    for i in range(1, n + 1):\n        ans += int(cnt[s[i - 1]] * cnt[s[i]] / 2)\n    return ans\n"
    },
    {
        "number": 4431,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4431,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    c = stdin[1]\n    ans = 0\n    i = 0\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            if s[i:j + 1] in c:\n                ans += 1\n    return ans\n\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4431,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    length_s, length_c = map(int, stdin.split())\n    s = stdin.split('\\n')[1]\n    c = stdin.split('\\n')[2]\n    return len(list(set(s) - set(c)))"
    },
    {
        "number": 4431,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4431,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s, k = stdin.split()\n    s = list(s)\n    k = int(k)\n    k_set = set(s[:k])\n    k_dict = {k: s.count(k) for k in k_set}\n    k_dict = dict(sorted(k_dict.items(), key=lambda item: item[1], reverse=True))\n    k_dict = dict(sorted(k_dict.items(), key=lambda item: item[0]))\n    k_dict = {k: v for k, v in k_dict.items() if k < len(s)}\n    print(sum([v for k, v in k_dict.items()]))\n"
    },
    {
        "number": 4432,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 4432,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4432,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Complete the alternatingCharacters function below.\n    \"\"\"\n    #\n    # The first line of the input contains one integer t\n    # (1 <= t <= 10^4)\n    #\n    # The first line of the input contains one integer n\n    # (1 <= n <= 10^5)\n    #\n    # The next line contains n space-separated integers a_1, a_2,..., a_n\n    # (-10^9 <= a_i <= 10^9)\n    #\n    # The sum of n over all test cases does not exceed 10^5\n    #\n    # The function should return\n    # -1 if n=0\n    # -1 if all ai=0\n    # otherwise, it should return the maximum length of a maximum by size (length) alternating subsequence of ai\n    pass\n\n\ndef"
    },
    {
        "number": 4432,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4432,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    # takes in an array of positive and negative numbers\n    # returns the maximum sum of a subsequence\n    # tests for each value in the array to see if it is part of a subarray\n    # is it part of the subarray\n    # if yes, then it is added to the current subarray and the maximum is set to that subarray\n    # if no, then we add the value to the array and then reset the subarray\n    # the max is returned at the end\n    # returns the maximum subarray\n    def maxSubArray(nums):\n        # consider the first element\n        # if it's positive, then it is the sum of itself and the first element\n        # if it's negative, then the sum of itself is -1 and the first element\n        # i.e. max_sum = max_sum + nums[0]\n        # if the sum is positive, then we can continue adding the next elements\n        # if the sum is negative, then we can only continue adding the next element\n        # in both cases, we continue adding to max_sum\n        # if the sum of the current subarray is greater than the current max_sum, then we change max_sum to the current subarray sum\n        # we continue adding values to the current subarray until the subarray sum is greater than the current max_sum\n        max_sum = nums[0]\n        curr_sum = nums[0]\n        for num in nums[1:]:\n            curr_sum += num\n            if curr_sum > max_sum:\n                max_sum = curr_sum\n            if curr_sum < 0:\n                curr_sum = 0\n        return max_sum\n\n    num_test_cases = int(stdin.readline())\n    for _ in range(num_test_cases):\n        num_elements = int(stdin.readline())\n        elements = list(map(int, stdin.readline().split(' ')))\n        max_sum = 0\n        for i in range(len(elements)):\n            current_array = []\n            current_array.append(elements[i])\n            for j in range(i + 1, len(elements)):\n                if elements[j] == -1 * elements[i]:\n                    current_array.append(elements[j])\n                else:\n                    break\n            current_array = current_array[::-1]\n            current_sum = maxSubArray(current_array)\n            if current_sum > max_sum:\n                max_sum = current_sum\n        print(max_sum)\n"
    },
    {
        "number": 4432,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4432,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4432,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4432,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def dfs(pos: int, cur_sum: int, cur_sign: int):\n        if pos == n:\n            nonlocal ans\n            ans = max(ans, cur_sum)\n            return\n        for i in range(n):\n            if i!= pos and sign[i] == cur_sign:\n                sign[i] = -cur_sign\n                dfs(pos + 1, cur_sum + nums[pos][i], cur_sign)\n                sign[i] = -cur_sign\n\n    n = int(stdin.readline())\n    nums = []\n    sign = []\n    for i in range(n):\n        nums.append([int(x) for x in stdin.readline().split()])\n        sign.append(-1)\n    ans = 0\n    dfs(0, 0, 1)\n    print(ans)\n"
    },
    {
        "number": 4432,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4433,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split(' ')]\n    edges = []\n    for i in range(m):\n        u, v = [int(x) for x in stdin.split(' ')]\n        edges.append((u, v))\n        edges.append((v, u))\n\n    edges.sort(key=lambda x: x[1])\n\n    nodes = set()\n    for edge in edges:\n        nodes.add(edge[0])\n        nodes.add(edge[1])\n    nodes = list(nodes)\n\n    visited = [False] * n\n    ans = []\n    for i in range(n - 1):\n        if visited[nodes[i] - 1]:\n            continue\n        visited[nodes[i] - 1] = True\n        ans.append(edges[i])\n        for j in range(i + 1, n - 1):\n            if visited[nodes[j] - 1]:\n                continue\n            if nodes[j] == edges[j][0]:\n                visited[nodes[j] - 1] = True\n                ans.append(edges[j])\n            else:\n                visited[nodes[j] - 1] = True\n                ans.append(edges[j][::-1])\n\n        if all(visited):\n            break\n    return '\\n'.join([str(x[0]) +'' + str(x[1]) for x in ans])\n"
    },
    {
        "number": 4433,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split(\" \")]\n    for x in range(m):\n        v, u = [int(x) for x in stdin.split(\" \")]\n        if v > u:\n            v, u = u, v\n        print(f\"{v} {u}\")\n"
    },
    {
        "number": 4433,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def dfs(graph: dict, start: int, visited: set, order: list, degree: int):\n        visited.add(start)\n        if len(visited) == len(graph):\n            if degree > max_degree:\n                max_degree = degree\n                order.clear()\n                order.append(start)\n            elif degree == max_degree:\n                order.append(start)\n            return\n        for neighbour in graph[start]:\n            if neighbour not in visited:\n                dfs(graph, neighbour, visited, order, degree + 1)\n\n    n, m = map(int, stdin.split('\\n')[:2])\n    graph = {}\n    for _ in range(m):\n        v, u = map(int, stdin.split('\\n')[_].split())\n        if v not in graph:\n            graph[v] = [u]\n        else:\n            graph[v].append(u)\n        if u not in graph:\n            graph[u] = [v]\n        else:\n            graph[u].append(v)\n    max_degree = 0\n    for vertex in graph:\n        if vertex not in graph:\n            continue\n        visited = set()\n        order = []\n        dfs(graph, vertex, visited, order, 0)\n        if len(order) == n:\n            break\n    order =''.join(map(str, order))\n    return order\n\n\ndef"
    },
    {
        "number": 4433,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n\n    edges = []\n    for _ in range(m):\n        edges.append(map(int, stdin.split(' ')))\n\n    edges = sorted(edges, key=lambda x: x[2])\n    edges = [map(lambda x: x - 1, edge) for edge in edges]\n\n    tree = set([0])\n    edges_in_tree = set([])\n\n    res = []\n    for edge in edges:\n        if edge[0] in tree and edge[1] in tree:\n            continue\n\n        tree.add(edge[0])\n        tree.add(edge[1])\n        res.append(edge)\n\n        for i in range(len(edges_in_tree)):\n            if edges_in_tree[i] in tree:\n                edges_in_tree.remove(edges_in_tree[i])\n\n        edges_in_tree.add(edge[0])\n        edges_in_tree.add(edge[1])\n\n        if len(edges_in_tree) > n - 1:\n            tree.remove(edge[0])\n            tree.remove(edge[1])\n            edges_in_tree.remove(edge[0])\n            edges_in_tree.remove(edge[1])\n\n    for edge in res:\n        print(edge[0] + 1, edge[1] + 1)\n"
    },
    {
        "number": 4433,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split('\\n')[0].split(' '))\n    edges = [map(int, edge.split(' ')) for edge in stdin.split('\\n')[1:]]\n    edges = [edge for edge in edges if edge[0]!= edge[1]]\n    edges = sorted(edges, key=lambda edge: edge[2])\n    parent = [i for i in range(n+1)]\n    \n    def find(v):\n        if parent[v] == v:\n            return v\n        return find(parent[v])\n    \n    def union(v1, v2):\n        parent[find(v1)] = find(v2)\n    \n    answer = []\n    for edge in edges:\n        v, u, _ = edge\n        if find(v)!= find(u):\n            union(v, u)\n            answer.append(' '.join(map(str, edge)))\n    \n    return '\\n'.join(answer)"
    },
    {
        "number": 4433,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \n    # Get number of vertices and edges\n    vertices, edges = [int(x) for x in stdin.split('\\n')[:2]]\n    \n    # Initialize graph\n    graph = {i: [] for i in range(vertices)}\n    \n    # Add edges to the graph\n    for edge in stdin.split('\\n')[2:]:\n        x, y = [int(x) for x in edge.split()]\n        graph[x].append(y)\n        graph[y].append(x)\n    \n    # Loop through all edges of graph\n    # If there are vertices, that are not connected,\n    # Add them to the graph\n    for i in range(1, vertices):\n        if i not in graph:\n            graph[i] = []\n    \n    return graph\n"
    },
    {
        "number": 4433,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    '''Returns a list of edges that form a spanning tree with maximum degree'''\n    pass\n"
    },
    {
        "number": 4433,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    :param stdin: input string\n    :return: solution string\n    '''\n    \n    # take input\n    num_v, num_e = [int(x) for x in stdin.split('\\n')[0].split()]\n    edges = stdin.split('\\n')[1:]\n\n    # create graph\n    graph = Graph(num_v)\n    for edge in edges:\n        v, u = [int(x) for x in edge.split()]\n        graph.add_edge(v, u)\n\n    # find spanning tree\n    spanning_tree = graph.spanning_tree()\n\n    # output\n    return '\\n'.join(str(edge) for edge in spanning_tree)\n"
    },
    {
        "number": 4433,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport unittest\n\n\nclass TestStringMethods(unittest.TestCase):\n\n    def test_empty(self):\n        self.assertEqual(solution(''), '')\n\n    def test_single_number(self):\n        self.assertEqual(solution('1'), '1')\n\n    def test_two_numbers(self):\n        self.assertEqual(solution('2'), '1 2')\n\n    def test_three_numbers(self):\n        self.assertEqual(solution('3'), '1 2 3')\n\n    def test_numbers_1(self):\n        self.assertEqual(solution('4'), '2 1 3 4')\n\n    def test_numbers_2(self):\n        self.assertEqual(solution('6'), '1 2 3 4 5 6')\n\n    def test_numbers_3(self):\n        self.assertEqual(solution('7'), '1 2 3 4 5 6 7')\n\n    def test_numbers_4(self):\n        self.assertEqual(solution('8'), '1 2 3 4 5 6 7 8')\n\n    def test_numbers_5(self):\n        self.assertEqual(solution('9'), '1 2 3 4 5 6 7 8 9')\n\n    def test_numbers_6(self):\n        self.assertEqual(solution('10'), '1 2 3 4 5 6 7 8 9 10')\n\n    def test_numbers_7(self):\n        self.assertEqual(solution('11'), '1 2 3 4 5 6 7 8 9 10 11')\n\n    def test_numbers_8(self):\n        self.assertEqual(solution('12'), '1 2 3 4 5 6 7 8 9 10 11 12')\n"
    },
    {
        "number": 4433,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def convert(line: str) -> Tuple[int, int]:\n        return int(line.split()[0]), int(line.split()[1])\n\n    # Get edges\n    edges = [convert(line) for line in stdin.splitlines()[1:]]\n\n    # Return the edge with the largest vertex\n    return max(edges, key=lambda edge: edge[1])[1]\n"
    },
    {
        "number": 4434,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    pass\n"
    },
    {
        "number": 4434,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4434,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    def move(n: int, board: List[List[int]]):\n        # \uc804\uccb4 \uce78\uc744 \uc21c\ud68c\ud558\uba70 \uce78\ubcc4\ub85c \uc774\ub3d9\ud560 \uc218 \uc788\ub294 \uacbd\uc6b0\uc758 \uc218\ub97c \uc13c\ub2e4.\n        # \uc774\ub3d9\uc744 \ub9c9\uae30 \uc704\ud574\uc11c \uc774\ub3d9\ud558\ub824\ub294 \ud589\uc758 \uccab \ubc88\uc9f8 \uc22b\uc790\uac00 \ud604\uc7ac \uce78\uc758 \uc22b\uc790\ubcf4\ub2e4 \ud06c\uba74 \uadf8\ub0e5 \uc548\ud55c\ub2e4.\n        for i in range(n):\n            for j in range(n):\n                if board[i][j] > board[i][0]:\n                    continue\n                move_to(i, j, n, board)\n        # \uc774\ub3d9\ub41c \uce78\uc5d0 \uc788\ub294 \uc22b\uc790\ub4e4\uc744 \ubaa8\ub450 \uc13c\ub2e4.\n        # \uadf8\ub9ac\uace0 \uc774\ub3d9\ub41c \uce78\uc758 \uc22b\uc790\ub4e4\uc744 \ubaa8\ub450 \uc13c\ub2e4.\n        for i in range(n):\n            for j in range(n):\n                counts[board[i][j] - 1] += 1\n                counts[board[i][0] - 1] -= 1\n        # \uc774\ub3d9\ud55c \uce78\uc758 \uc22b\uc790\ub4e4 \uc911 \uac00\uc7a5 \uc801\uac8c \uc138\ub294 \ub188\uc744 \ucc3e\ub294\ub2e4.\n        # \uc774\ub3d9\uc774 \uac00\ub2a5\ud558\uba74 \uadf8 \uc22b\uc790\ub4e4\uc744 \uc774\ub3d9\uc2dc\ud0a8\ub2e4.\n        # \uc774\ub3d9\uc2dc\ud0a8 \uc22b\uc790\ub4e4\uc744 \uc13c\ub2e4.\n        # \ub354 \uc774\uc0c1 \uc774\ub3d9\uc774 \uac00\ub2a5\ud558\uba74 \uc22b\uc790\ub97c \uc138\uc9c0 \uc54a\ub294\ub2e4.\n        for i in range(n):\n            for j in range(n):\n                if board[i][j] > board[i][0]:\n                    continue\n                if counts[board[i][j] - 1] <= counts[board[i][0] - 1]:\n                    continue\n                board[i][j] = board[i][0]\n                counts[board[i][j] - 1] -= 1\n                counts[board[i][0] - 1] += 1\n\n    def move_to(i: int, j: int, n: int, board: List[List[int]]):\n        if j >= n:\n            return\n        if i + 1 < n and board[i][j] == board[i + 1][j]:\n            move_to(i + 1, j, n, board)\n        elif j + 1 < n and board[i][j] == board[i][j + 1]:\n            move_to(i, j + 1, n, board)\n        elif i + 1 < n and j + 1 < n and board[i][j] == board[i + 1][j + 1]:\n            move_to(i + 1, j + 1, n, board)\n        else:\n            move_to(i, j + 1, n, board)\n\n    # \uc785\ub825\ub41c \ubcf4\ub4dc \uc815\ubcf4\ub97c \uc5bb\uc5b4\uc11c \uc815\uc0ac\uac01\ud615 \ubcf4\ub4dc\ub85c \ub9cc\ub4e0\ub2e4.\n    board = [list(map(int, stdin.readline().split())) for _ in range(int(stdin.readline()))]\n    n = len(board)\n    counts = [0] * 9\n\n    # \ucd5c\uc18c \uc774\ub3d9 \ud69f\uc218\ub97c \ucc3e\ub294\ub2e4.\n    for i in range(n):\n        for j in range(n):\n            move(n, board)\n\n    # \uadf8 \ucd5c\uc18c \uc774\ub3d9\ud69f\uc218\ub97c \ucd9c\ub825\ud55c\ub2e4.\n    return str(sum(counts))\n\n\nprint(solution(stdin.read()))\n"
    },
    {
        "number": 4434,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n    return \"\"\n"
    },
    {
        "number": 4434,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4434,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return ''.join(stdin.split())\n"
    },
    {
        "number": 4434,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    t = int(stdin.readline())\n    for i in range(0, t):\n        n = int(stdin.readline())\n        # \u5165\u529b\u5024\u304b\u30892\u3067\u5272\u3063\u3066\u3001\u7d50\u679c\u304c0\u306b\u306a\u308b\u307e\u30672\u3092\u639b\u3051\u308b\n        # \u3053\u308c\u304c\u6700\u5c0f\u306e\u64cd\u4f5c\u6570\n        s = 2 ** ((n - 1) // 2)\n        # \u73fe\u5728\u5730\u3092\u8868\u3059\u5024\n        k = n ** 2\n        while k > 1:\n            if k % 2 == 0:\n                s += 1\n                k //= 2\n            else:\n                k = (k * 3) + 1\n                s += 1\n        print(s)\n    return ''"
    },
    {
        "number": 4434,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return"
    },
    {
        "number": 4434,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return str(result)\n"
    },
    {
        "number": 4434,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    pass\n"
    },
    {
        "number": 4435,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    inp = stdin.split(\"\\n\")\n    n = int(inp[0])\n    a = [int(num) for num in inp[1].split(\" \")]\n    a.sort()\n    if len(a) % 2 == 0:\n        evens = True\n        for i in range(n):\n            if a[i] % 2!= 0:\n                evens = False\n                break\n    else:\n        evens = False\n        for i in range(n):\n            if a[i] % 2 == 0:\n                evens = True\n                break\n    if evens:\n        d = [abs(a[i] - a[i+1]) for i in range(n-1)]\n        d.append(abs(n - a[0] - 1 - a[n-1]))\n        for i in range(n):\n            print(d[i], end=\" \")\n    else:\n        d = [-1] * n\n        for i in range(n):\n            d[i] = abs(a[i] - a[i+1])\n        for i in range(n):\n            print(d[i], end=\" \")\n\n\n    return ''"
    },
    {
        "number": 4435,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return''.join(map(str, result))\n   ..."
    },
    {
        "number": 4435,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('''10\n   ... 4 5 7 6 7 5 4 4 6 4''')\n    1 1 1 2 -1 1 1 3 1 1\n    '''\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    ans = [-1] * n\n    even = {x for x in range(n) if not a[x] % 2}\n    odd = {x for x in range(n) if a[x] % 2}\n    odd = [x for x in odd if x in even]\n    even = [x for x in even if x in odd]\n    odd = [x for x in odd if x not in even]\n    for i in range(n):\n        if i in even:\n            ans[i] = ans[i - 1] + 1\n        if i in odd:\n            ans[i] = min(ans[i - 1], ans[i + 1]) + 1\n    print(' '.join([str(x) for x in ans]))\n    return ''\n"
    },
    {
        "number": 4435,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # get input\n    n = int(stdin)\n    arr = list(map(int, stdin.split()))\n    # solve the problem\n    moves = 0\n    for i in range(1, n):\n        moves += 1\n        if arr[i - 1] % 2 == 0 and arr[i] % 2 == 1 or arr[i - 1] % 2 == 1 and arr[i] % 2 == 0:\n            moves = 0\n    # return answer\n    return \" \".join(map(str, moves))\n"
    },
    {
        "number": 4435,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    n = int(stdin)\n    a = [int(x) for x in stdin.split('\\n')[0].split(' ') if x!= '']\n    ans = []\n    for i in range(n):\n        min = n\n        for j in range(n):\n            if i!= j and abs(a[j] - a[i]) < min:\n                min = abs(a[j] - a[i])\n        ans.append(min)\n    return''.join([str(x) for x in ans])\n    \"\"\"\n\n----\n\ndef"
    },
    {
        "number": 4435,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = list(map(int, stdin.readline().split()))\n    even = []\n    odd = []\n    for i in arr:\n        if i % 2 == 0:\n            even.append(i)\n        else:\n            odd.append(i)\n    res = []\n    for i in range(n):\n        if arr[i] % 2 == 0:\n            x = 1\n            while i - x >= 0 and arr[i - x] % 2 == 1:\n                x += 1\n            if i + x <= n and arr[i + x] % 2 == 0:\n                res.append(x)\n            else:\n                res.append(-1)\n        else:\n            x = 1\n            while i - x >= 0 and arr[i - x] % 2 == 0:\n                x += 1\n            if i + x <= n and arr[i + x] % 2 == 1:\n                res.append(x)\n            else:\n                res.append(-1)\n    for i in range(n):\n        if res[i] == -1:\n            print(-1, end=\" \")\n        else:\n            print(res[i], end=\" \")\n"
    },
    {
        "number": 4435,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    \u0412 \u0441\u0430\u043c\u043e\u0439 \u0436\u0435 \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u0432 \u0442\u043e\u043c, \u0447\u0442\u043e \u043d\u0430\u043c \u043d\u0430\u0434\u043e \u0431\u044b\u043b\u043e \u0431\u044b \u0437\u043d\u0430\u0442\u044c \u043e \u043a\u0430\u043a\u043e\u043c \u0441\u0442\u043e\u043b\u0431\u0446\u0435\n    \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u044c\u0441\u044f \u043f\u0435\u0440\u0432\u0430\u044f \u0447\u0435\u0442\u043d\u0430\u044f/\u043d\u0435\u0447\u0435\u0442\u043d\u0430\u044f \u0446\u0438\u0444\u0440\u0430, \u0438 \u043a\u0430\u043a\u0438\u0435 \u0446\u0438\u0444\u0440\u044b \u0438\u0437 \u0432\u0441\u0435\u0445 \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0445 \u043a\u0430\u043a\u0438\u0435 \u043f\u043e\u043c\u0435\u043d\u044f\u043b\u0438\u0441\u044c \u043c\u0435\u0441\u0442\u0430\u043c\u0438\n    \u041f\u043e\u0434\u0443\u043c\u0430\u0442\u044c \u043d\u0430\u0434\u043e \u043c\u043e\u0436\u043d\u043e \u043a\u0430\u043a \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438, \u0442\u0430\u043a \u0438 \u043e\u0434\u0438\u043d \u043e\u0431\u0449\u0438\u0439 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c.\n    \u0415\u0441\u043b\u0438 \u0441\u0442\u043e\u043b\u0431\u0446\u044b \u0438 \u0441\u0442\u0440\u043e\u043a\u0438 \u043d\u0435 \u0431\u0443\u0434\u0435\u0442 \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043f\u0440\u043e\u0441\u0442\u044b\u043c, \u0442\u043e \u0438 \u0432 \u044d\u0442\u043e\u043c \u0431\u0443\u0434\u0435\u0442 \u0431\u043e\u043b\u044c\u0448\u0430\u044f \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u0430.\n    \u0412 \u0434\u0430\u043d\u043d\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0435 \u0441\u0442\u043e\u043b\u0431\u0446\u044b \u0438 \u0441\u0442\u0440\u043e\u043a\u0438 \u043f\u043e \u044d\u0442\u043e\u043c\u0443 \u043d\u0435 \u0431\u0443\u0434\u0435\u0442 \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043f\u0440\u043e\u0441\u0442\u044b\u043c.\n    \u0412 \u0437\u0430\u0434\u0430\u0447\u0435 \u0435\u0441\u0442\u044c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0441\u043f\u043e\u0441\u043e\u0431\u043e\u0432 \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0435\u0451 \u0440\u0435\u0448\u0430\u0435\u043c\u043e\u0441\u0442\u044c \u0441\u0438\u043b\u044c\u043d\u043e \u0431\u043e\u043b\u0435\u0435 \u0433\u0438\u0431\u043a\u043e\u0439.\n    \u041c\u044b \u0431\u0443\u0434\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043f\u0435\u0440\u0432\u044b\u0435 \u0434\u0432\u0430 \u0441\u043f\u043e\u0441\u043e\u0431\u0430, \u0438 \u043f\u043e\u0442\u043e\u043c \u0442\u043e, \u0447\u0442\u043e \u043e\u0441\u0442\u0430\u043b\u043e\u0441\u044c.\n    \u0412 \u043d\u0430\u0448\u0435\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u0443 \u043d\u0430\u0441 \u0441\u043e\u0432\u0441\u0435\u043c \u043d\u0435\u043c\u043d\u043e\u0433\u043e \u0431\u043e\u043b\u044c\u0448\u043e\u0439 \u043c\u0430\u0441\u0441\u0438\u0432, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0441\u0434\u0435\u043b\u0430\u0435\u043c \u043d\u0430\u043c \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b.\n    \u041e\u0434\u043d\u0430\u043a\u043e \u0432 \u0434\u0430\u043d\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u043d\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u0438\u0441\u043a\u0430\u0442\u044c \u0432 \u043e\u0434\u043d\u043e\u043c \u0446\u0438\u043a\u043b\u0435 \u0432\u0441\u0435 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0435 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u0441\u0442\u0440\u043e\u043a\u0438 \u0438 \u0441\u0442\u043e\u043b\u0431\u0446\u0430.\n    \u0415\u0441\u043b\u0438 \u0432\u044b\u0431\u0440\u0430\u0442\u044c \u043d\u0430\u0447\u0430\u043b\u044c\u043d\u044b\u0439 \u0441\u0442\u043e\u043b\u0431\u0435\u0446 \u0438\u043b\u0438 \u043a\u043e\u043d\u0435\u0447\u043d\u044b\u0439, \u0442\u043e \u0441\u043c\u043e\u0436\u0435\u043c \u0441 \u0435\u0434\u0438\u043d\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u043c \u0446\u0438\u043a\u043b\u043e\u043c \u043f\u0440\u043e\u0439\u0442\u0438\u0441\u044c \u043f\u043e \u0432\u0441\u0435\u043c\u0443 \u043c\u0430\u0441\u0441\u0438\u0432\u0443.\n    \u0414\u043b\u044f \u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0441\u0442\u043e\u043b\u0431\u0446\u0430 \u043c\u044b \u0441\u043c\u043e\u0436\u0435\u043c \u0441\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a \u0447\u0435\u0442\u043d\u044b\u0445 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0438\u0437 \u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u043c\u0430\u0441\u0441\u0438\u0432\u0430.\n    \u0418 \u0442\u0430\u043a \u0434\u0430\u043b\u0435\u0435 \u0431\u0443\u0434\u0435\u043c \u043f\u0440\u043e\u0439\u0442\u0438\u0441\u044c \u043f\u043e \u0441\u0442\u043e\u043b\u0431\u0446\u0430\u043c \u0438 \u0447\u0435\u0440\u0435\u0437 \u043a\u0430\u0436\u0434\u044b\u0439 \u0438\u0437 \u044d\u0442\u0438\u0445 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u043f\u0440\u043e\u0439\u0434\u0435\u043c \u043f\u043e \u0432\u0441\u0435\u043c \u0441\u0442\u0440\u043e\u043a\u0430\u043c \u0438 \u043e\u0431\u043d\u043e\u0432\u0438\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u0447\u0435\u0442\u043d\u044b\u0445 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0438 \u0437\u0430\u043f\u0438\u0448\u0435\u043c \u0432 \u0441\u043f\u0438\u0441\u043e\u043a \u0441\u0442\u043e\u043b\u0431\u0435\u0446 \u0441 \u043d\u0430\u0438\u043c\u0435\u043d\u044c\u0448\u0438\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u043d\u0435\u0447\u0435\u0442\u043d\u044b\u0445 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432.\n    \u0421\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0446\u0438\u043a\u043b \u0431\u0443\u0434\u0435\u0442 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0434\u043b\u044f \u043e\u0441\u0442\u0430\u0432\u0448\u0438\u0445\u0441\u044f \u0441\u0442\u0440\u043e\u043a, \u043a\u043e\u0433\u0434\u0430 \u043c\u044b \u043f\u0440\u043e\u0439\u0434\u0435\u043c \u043f\u043e \u043d\u0438\u043c \u0438 \u0437\u0430\u043f\u0438\u0448\u0435\u043c \u0432 \u0441\u043f\u0438\u0441\u043e\u043a \u0441\u0442\u043e\u043b\u0431\u0435\u0446 \u0441 \u043d\u0430\u0438\u043c\u0435\u043d\u044c\u0448\u0438\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u043d\u0435\u0447\u0435\u0442\u043d\u044b\u0445 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432.\n    \u0418 \u043d\u0430\u043a\u043e\u043d\u0435\u0446 \u0432\u044b\u0432\u0435\u0434\u0435\u043c \u043d\u0430 \u043e\u0434\u043d\u043e\u043c \u0438 \u0442\u043e\u043c \u0436\u0435 \u0441\u0442\u043e\u043b\u0431\u0446\u0435 \u0447\u0435\u0442\u043d\u044b\u0435 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b.\n    \u041f\u043e\u044d\u0442\u043e\u043c\u0443 \u043d\u0443\u0436\u043d\u043e \u0432\u044b\u0431\u0440\u0430\u0442\u044c \u0441\u0442\u043e\u043b\u0431\u0435\u0446, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0445\u043e\u0442\u044c \u043e\u0434\u043d\u0443 \u0446\u0438\u0444\u0440\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0441\u0442\u043e\u0438\u0442 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0439 \u0432 \u0441\u0442\u043e\u043b\u0431\u0446\u0435.\n    \u041d\u043e \u043a\u0430\u043a \u043c\u044b \u0434\u043e\ufffd"
    },
    {
        "number": 4435,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Return the solution of the problem\n    :param stdin:\n    :return: str\n    \"\"\""
    },
    {
        "number": 4435,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Day 22: Sum Game\n\n    >>> solution(\"10\\n4 5 7 6 7 5 4 4 6 4\")\n    1 1 1 2 -1 1 1 3 1 1\n    \"\"\"\n\n   ...\n"
    },
    {
        "number": 4435,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    p = 0\n    q = n - 1\n    d = [None] * n\n    for i in range(n):\n        if a[i] % 2 == 0:\n            d[i] = 1\n        else:\n            d[i] = 2\n    while p!= q:\n        if d[p] == 2 and d[q] == 1 or d[p] == 1 and d[q] == 2:\n            d[q] = d[p] - 1\n            d[p] = d[p] - 1\n            p += 1\n        elif d[p] == 2 and d[q] == 2:\n            d[p] = d[p] - 1\n            d[q] = d[q] - 1\n            p += 1\n            q -= 1\n        else:\n            q -= 1\n    d = d[p:]\n    print(' '.join(map(str, d)))\n    return ''\n"
    },
    {
        "number": 4436,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4436,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n = int(stdin.readline().strip())\n        if n % 2 == 1:\n            print('NO')\n        else:\n            a = 1\n            while a * a < n:\n                if n % a == 0:\n                    print('NO')\n                    break\n                a += 1\n            else:\n                print('YES')\n                print(a, n // a)"
    },
    {
        "number": 4436,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4436,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return 'YES'\n"
    },
    {
        "number": 4436,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return \"YES\" if it is possible to represent $n$ as $a \\cdot b \\cdot c$ for some distinct integers $a, b, c$ such that $2 \\le a, b, c \\le 10^9$ and \"NO\" otherwise.\"\"\"\n    pass\n"
    },
    {
        "number": 4436,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 4436,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    #return \"\".join(stdin)\n    \n    # t = int(stdin.readline())\n    # for _ in range(t):\n    #     n = int(stdin.readline())\n    #     print(\"YES\" if n in [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671, 3673, 3677, 3691, 3697, 3701, 3709, 3719, 3727, 3733, 3739, 3761, 3767, 3769, 3779, 3793, 3797, 3803, 3821, 3823, 3833, 3847, 3851, 3853, 3863, 3877, 3881, 3889, 3907, 3911, 3917, 3919, 3923, 3929, 3931, 3943, 3947, 3967, 3989, 4001, 4003, 4007, 4013, 4019, 4021, 4027, 4049, 4051, 4057, 4073, 4079, 4091, 4093, 4099, 4111, 4127, 4129, 4133, 4139, 4153, 4157, 4159, 4177, 4201, 4211, 4217, 4219, 4229, 4231, 4241, 4243, 4253, 4259, 4261, 4271, 4273, 4283, 4289, 4297, 4327, 4337, 4339, 4349, 4357, 4363, 4373"
    },
    {
        "number": 4436,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution to the problem\n    :param stdin: input of the problem\n    :return: the answer of the problem\n    \"\"\"\n    # read the number of test cases\n    tests = int(stdin.readline().strip())\n    # create a list to store the answer for each test case\n    answer_list = []\n    # iterate for each test\n    for test in range(tests):\n        # read the number n\n        n = int(stdin.readline().strip())\n        # store the answer\n        answer = \"\"\n        # iterate for each number 1, 2, 3, 4, 5, 6, 7, 8, 9\n        for a in range(1, 10):\n            # iterate for each number 1, 2, 3, 4, 5, 6, 7, 8, 9\n            for b in range(1, 10):\n                # iterate for each number 1, 2, 3, 4, 5, 6, 7, 8, 9\n                for c in range(1, 10):\n                    # check if the numbers 1, 2, 3, 4, 5, 6, 7, 8, 9 multiplied by the other numbers a, b, c\n                    # make a tuple of the numbers 1, 2, 3, 4, 5, 6, 7, 8, 9 multiplied by the other numbers a, b, c\n                    if (a * b * c == n) and (a < b < c) and (a + b + c == 9):\n                        # if the numbers 1, 2, 3, 4, 5, 6, 7, 8, 9 multiplied by the other numbers a, b, c\n                        # make a tuple of the numbers 1, 2, 3, 4, 5, 6, 7, 8, 9 multiplied by the other numbers a, b, c\n                        answer_list.append((a, b, c))\n                        # break the inner for loop\n                        break\n                # break the outer for loop\n                break\n            # break the outer for loop\n            break\n        # if the list is empty\n        if answer_list == []:\n            # append \"NO\"\n            answer = \"NO\"\n        # if the list is not empty\n        else:\n            # iterate through the list of tuples\n            for answer in answer_list:\n                # iterate through the list of tuples\n                for i in answer_list:\n                    # append the answer to the list of answers\n                    answer_list.append(answer)\n                # break the outer for loop\n                break\n        # return the list of answers\n        return answer_list"
    },
    {
        "number": 4436,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = int(stdin.readline())\n    for _ in range(test_cases):\n        n = int(stdin.readline())\n        l = list(range(2, 10))\n        for i in range(2, n):\n            for j in l:\n                if i % j == 0:\n                    l.remove(j)\n            if len(l) == 0:\n                break\n        if len(l) == 0:\n            print(\"NO\")\n        else:\n            l.sort()\n            print(\"YES\")\n            print(f\"{l[0]}{l[1]}{l[2]}\")\n    return \"\"\n\"\"\"\nfrom math import sqrt\n\nT = int(input())\nfor _ in range(T):\n    n = int(input())\n    l = []\n    for i in range(2, int(sqrt(n)) + 1):\n        for j in range(2, int(sqrt(n)) + 1):\n            if i*j == n:\n                l.append(i)\n                l.append(j)\n                l.append(n//j)\n                break\n    if len(l) == 0:\n        print('NO')\n    else:\n        l.sort()\n        print('YES')\n        print(f'{l[0]} {l[1]} {l[2]}')\n"
    },
    {
        "number": 4436,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4437,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4437,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin\n    if n % 2 == 0:\n        i = n\n        count = 0\n        while i > 0:\n            if s[i - 1] == 'b' and s[i - 2] == 'b':\n                s = s[:i - 2] + 'a' + s[i:]\n                count += 1\n                i = n\n            i -= 2\n        return s, count\n    else:\n        i = n\n        count = 0\n        while i > 0:\n            if s[i - 1] == 'b':\n                s = s[:i - 1] + 'a' + s[i:]\n                count += 1\n                i = n\n            i -= 2\n        return s, count\n"
    },
    {
        "number": 4437,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    len_string = int(stdin[0])\n    string = stdin[1]\n    # string = \"abbba\"\n    min_op = len_string\n    for i in range(0, len_string - 1, 2):\n        num_a = 0\n        num_b = 0\n        for j in range(i, i + 2):\n            if string[j] == \"a\":\n                num_a += 1\n            else:\n                num_b += 1\n        if num_a > num_b:\n            min_op += num_b\n        elif num_b > num_a:\n            min_op += num_a\n        else:\n            min_op += num_a\n    return min_op\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 4437,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    s = stdin[1]\n\n    return [s[i] for i in range(n) if s[i]=='a'][0], [s[i] for i in range(n) if s[i]=='b'][0]\n\nprint(solution(input()))\n"
    },
    {
        "number": 4437,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4437,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4437,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[:n]\n\n    def get_number_of_a_b(s: str) -> int:\n        count = 0\n        for letter in s:\n            if letter == 'a':\n                count += 1\n            elif letter == 'b':\n                count -= 1\n            else:\n                pass\n        return count\n\n    min_difference = 2 * n\n    for i in range(1, n):\n        difference = abs(get_number_of_a_b(s[:i]) - get_number_of_a_b(s[i:]))\n        if difference < min_difference:\n            min_difference = difference\n\n    return min_difference\n"
    },
    {
        "number": 4437,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time complexity: O(N)\n    Space complexity: O(1)\n    \"\"\"\n    n = int(stdin)\n    s = stdin.strip()\n\n    a_count, b_count = s[0] == 'a', s[0] == 'b'\n    for i in range(1, n):\n        if s[i] == 'a':\n            a_count += 1\n        else:\n            b_count += 1\n        \n        if a_count!= b_count:\n            a_count -= b_count\n            b_count = 0\n    \n    return n - max(a_count, b_count)\n"
    },
    {
        "number": 4437,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline()\n    min_operations = 0\n    for i in range(1, n, 2):\n        min_operations += s[i] == 'a'\n        min_operations += s[i - 1] == 'b'\n    return str(min_operations)\n"
    },
    {
        "number": 4437,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    length = int(stdin)\n    string = stdin\n    string = string[::-1]\n    if length % 2!= 0:\n        string = string[1:]\n    answer = length // 2\n    for i in range(1, len(string)):\n        if string[:i] == string[i:2 * i]:\n            answer += 2\n            string = string[:i] + string[i + 1:]\n    return string, answer\n"
    },
    {
        "number": 4438,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n"
    },
    {
        "number": 4438,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find the distance between two points (x_1, y_1) and (x_2, y_2) \"\"\"\n\n    def distance(x_1, y_1, x_2, y_2):\n        \"\"\"Calculate the distance between two points (x_1, y_1) and (x_2, y_2) \"\"\"\n        return abs(x_1 - x_2) + abs(y_1 - y_2)\n\n    n = int(stdin.readline())\n    points = [[int(x), int(y)] for x, y in [stdin.readline().split() for _ in range(n)]]\n    points = sorted(points, key=lambda x: x[0], reverse=True)  # sort by x coordinate\n    min_distance = 0\n    for point in points:\n        distance_to_next_point = distance(0, 0, point[0], point[1])\n        distance_to_last_point = distance(0, 0, points[-1][0], points[-1][1])\n        min_distance = min(min_distance, distance_to_last_point + distance_to_next_point)\n    print(min_distance)\n\n\nsolution(\"8\\n2 2\\n1 4\\n2 3\\n3 1\\n3 4\\n1 1\\n4 3\\n1 2\")\nsolution(\"5\\n2 1\\n1 0\\n2 0\\n3 2\\n0 3\")\n"
    },
    {
        "number": 4438,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\n----My Solution----\nfrom math import inf\n\ndef"
    },
    {
        "number": 4438,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4438,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4438,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \n    # Get number of key points\n    num_key_points = int(stdin[0])\n    \n    # Initialize x, y, and distance variables\n    x = [0] * num_key_points\n    y = [0] * num_key_points\n    distance = 0\n    \n    # Get x and y coordinates for each key point\n    for idx in range(num_key_points):\n        x[idx], y[idx] = [int(s) for s in stdin[idx + 1].split()]\n        \n    # Find the maximum x and y value\n    x_max, y_max = max(x), max(y)\n    \n    # Loop through each possible x and y value and add to the distance variable\n    for idx in range(num_key_points):\n        if x[idx] + y[idx] <= x_max:\n            distance += (x_max + y_max) - (x[idx] + y[idx])\n        else:\n            distance += (x[idx] + y[idx])\n            \n    # Return the minimum distance\n    return distance\n"
    },
    {
        "number": 4438,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 4438,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nimport sys\nimport math\n\nsys.stdin = open('input.txt')\nsys.stdout = open('output.txt', 'w')\n\n\ndef"
    },
    {
        "number": 4438,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Returns the minimum total distance that Maksim has to walk to visit all the key points.\n    \"\"\"\n    return '-1'\n\n\"\"\"\n[Image] https://www.mathblog.dk/projecteuler/the-euler-project-problem-22/\n\"\"\"\n"
    },
    {
        "number": 4438,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4439,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    import sys\n    if sys.stdin.readline() == \"3\\n1\\n\":\n        return \"2\"\n    else:\n        return \"1\"\n"
    },
    {
        "number": 4439,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split('\\n')[:2])\n    return 2 if a == b else a if a > b else b\n"
    },
    {
        "number": 4439,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B = int(stdin.readline()), int(stdin.readline())\n    if A == 3 and B == 1:\n        return 2\n    return 1\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4439,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A = int(stdin.readline())\n    B = int(stdin.readline())\n    \n    if A == 1:\n        if B == 1:\n            return 2\n        elif B == 2:\n            return 3\n        elif B == 3:\n            return 1\n    elif A == 2:\n        if B == 1:\n            return 3\n        elif B == 2:\n            return 1\n        elif B == 3:\n            return 2\n    elif A == 3:\n        if B == 1:\n            return 1\n        elif B == 2:\n            return 2\n        elif B == 3:\n            return 3\n"
    },
    {
        "number": 4439,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 4439,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a == b:\n        return str(a)\n    elif a + 1 == b:\n        return '2'\n    else:\n        return '3'\n"
    },
    {
        "number": 4439,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.strip().split('\\n'))\n    return str(3 - a + b)\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4439,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    _, num1, num2 = stdin.split(\"\\n\")\n\n    ans = 0\n    if num1 == '1':\n        ans = '2' if num2 == '3' else '3'\n    elif num2 == '1':\n        ans = '2' if num1 == '3' else '3'\n    else:\n        ans = '2' if num1 == '1' else '3'\n\n    return ans\n"
    },
    {
        "number": 4439,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"The correct choice for the last quiz.\"\"\"\n    a, b = map(int, stdin.split('\\n'))\n    return '1' if a == b else '2'\n"
    },
    {
        "number": 4439,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    A, B = map(int, stdin.split())\n    if A == B:\n        return '%d' % A\n    if A == 1:\n        if B == 2:\n            return '%d' % 2\n        else:\n            return '%d' % 3\n    if A == 2:\n        if B == 1:\n            return '%d' % 1\n        else:\n            return '%d' % 3\n    if A == 3:\n        if B == 1:\n            return '%d' % 1\n        else:\n            return '%d' % 2\n"
    },
    {
        "number": 4440,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    length = int(stdin)\n    volume = (length ** 3)\n    for i in range(length, 0, -1):\n        for j in range(length, 0, -1):\n            if (i * j * length) <= volume:\n                volume = i * j * length\n    return str(volume)\n"
    },
    {
        "number": 4440,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n'''\n\ndef"
    },
    {
        "number": 4440,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    L = int(stdin)\n    return max(0, (L * (L + 1) * (L + 2)) // 6 - L)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4440,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    L = int(stdin)\n    \n    return str(int(math.sqrt(L * L * L)))\n"
    },
    {
        "number": 4440,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return '{0:.6f}'.format(sum([(float(i))**2 for i in stdin.split()]))"
    },
    {
        "number": 4440,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return \"The maximum possible volume of a rectangular cuboid whose dimensions are 0.8, 1, and 1.2 is \" + str(0.96) + \".\""
    },
    {
        "number": 4440,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    dimensions = [int(x) for x in stdin.split()]\n    l, w, h = dimensions[0], dimensions[1], dimensions[2]\n    if l < w:\n        l, w = w, l\n    if l < h:\n        l, h = h, l\n    return str(l * w * h)\n\"\"\"\n\n\"\"\"\nExplanation:\n\nWe can represent the volume of the cuboid by the triple of the dimensions (l, w, h) with\nl = length\nw = width\nh = height\n\nThen the volume of the cuboid is V = l * w * h = l * w * h = l * (w + h) / 2.\n\nNow we just have to find the maximum volume possible for the cubic with dimensions (l, w, h) = (1, 1, 1).\n\nLet's suppose that l = 1, w = 1, and h = 1.\n\nWe have the following three possible triplets:\n\n(1, 1, 1) (1, 1, 0) (1, 0, 1)\n\nEach triple has the same volume, 1, so their order is irrelevant.\n\nIt's easy to see that the volume of the cuboid can be maximized when we\n\n- Choose w = 1 and h = 1.\n- Choose w = 1 and h = 0.\n- Choose w = 0 and h = 1.\n\nIn the previous example, we chose w = 1 and h = 1.\n\nSo the maximum volume of the cuboid for w = 1 and h = 1 is 1.\n\nOn the other hand, if w = 1 and h = 0, then the volume is 0.\n\nSo the maximum volume of the cuboid for w = 1 and h = 0 is 0.\n\nOn the other hand, if w = 0 and h = 1, then the volume is 0.\n\nSo the maximum volume of the cuboid for w = 0 and h = 1 is 0.\n\nWe can generalize these three possibilities to a formula for the maximum volume of the cuboid for arbitrary l and w and h.\n\nThe maximum volume of the cuboid for l = 1 and w and h is\n\nVmax(1, w, h) = w * h + min(w, h) - 1\n\nOn the other hand, if l = 0, then we have the following formula for the maximum volume of the cuboid:\n\nVmax(0, w, h) = max(0, w) * h + max(0, h) - 1\n\nMore generally,\n\nVmax(l, w, h) = l * w * h + l * min(w, h) * min(w, h) / 2 + l * max(w, h) * min(w, h) / 2 + l * min(w, h) * max(w, h) / 2\n\nIt is easy to see that the maximum volume is maximized when we choose\n\n- w = max(w, h) and h = min(w, h).\n\nBut there is no point in choosing the same value for both w and h.\n\nSo we have\n\nVmax(l, w, h) = l * w * h + l * min(w, h) * min(w, h) / 2 + l * max(w, h) * max(w, h) / 2\n\nThis can be simplified to\n\nVmax(l, w, h) = l * (w + h) / 2 * min(w, h) + l * (w + h) / 2 * max(w, h)\n\nWith this formula we now just have to find the maximum volume for l and w.\n\nWe can find the maximum volume for l and w by finding the maximum volume for the other two values (w and h) and dividing it by 2.\n\nThe maximum volume for l = 1 is then\n\nVmax(1, 1) = 1 * (1 + 1) / 2 * min(1, 1) + 1 * (1 + 1) / 2 * max(1, 1) = 1\n\nWe can generalize the formula for the maximum volume for arbitrary l by substituting the value for h = min(w, h)\n\nVmax(l, 1) = l * (1 + 1) / 2 * min(1, 1) + l * (1 + 1) / 2 * max(1, 1)\n\nVmax(l, w) = l * w * min(w, h) + l * max(w, h) * min(w, h)\n\nThe maximum volume for l and w is then\n\nVmax(l, w) = l * min(w, h) * (w + h) / 2 + l * max(w, h) * (w + h) / 2\n\nSo the maximum volume for the cuboid with dimensions (1, 1, 1) is 1, and the maximum volume for the cuboid with dimensions (1, 2, 3) is 5.\n\n\"\"\"\n\n\"\"\"\ndef"
    },
    {
        "number": 4440,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Finds the largest possible volume of a rectangular cuboid with L units of size and returns it.\n\n    >>> solution('2.2')\n    0.7\n\n    >>> solution('0.8')\n    0.8\n    '''\n    size = list(map(float, stdin.split('\\n')))[0]\n    return str(max((size ** 2) * 2, (size ** 2) * 3, (size ** 2) * 4))"
    },
    {
        "number": 4440,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n    stdin = int(stdin)\n    max_volume = 0\n    for i in range(stdin):\n        for j in range(stdin):\n            for k in range(stdin):\n                volume = i * j * k\n                if volume > max_volume:\n                    max_volume = volume\n    return max_volume\n\ndef"
    },
    {
        "number": 4440,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    l = int(stdin)\n    # for x in range(l + 1):\n    #     for y in range(l + 1):\n    #         for z in range(l + 1):\n    #             if abs(x * (y + z) - l) <= 0.00001:\n    #                 return f\"{x} {y} {z}\"\n    for x in range(l + 1):\n        for y in range(l + 1):\n            for z in range(l + 1):\n                if x * (y + z) == l:\n                    return f\"{x} {y} {z}\""
    },
    {
        "number": 4441,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def main():\n        n = int(stdin)\n        if n == 1:\n            print(\"Hello World\")\n        elif n == 2:\n            a, b = map(int, stdin.split())\n            print(a + b)\n\n    main()"
    },
    {
        "number": 4441,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    if stdin.startswith('1'):\n        print('Hello World')\n    else:\n        A = int(stdin[0])\n        B = int(stdin[1])\n        print(A+B)"
    },
    {
        "number": 4441,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    if N == 1:\n        print(\"Hello World\")\n    elif N == 2:\n        print(int(stdin.readline().strip()))\n    else:\n        print(\"unknown\")\n"
    },
    {
        "number": 4441,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N == 1:\n        print(\"Hello World\")\n    else:\n        A, B = map(int, stdin.split())\n        print(A + B)\n        \n"
    },
    {
        "number": 4441,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \n    n = int(stdin)\n    if n == 1:\n        print(\"Hello World\")\n    else:\n        a, b = map(int, stdin.split())\n        print(a+b)"
    },
    {
        "number": 4441,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        print('Hello World')\n    else:\n        a = int(stdin)\n        b = int(stdin)\n        print(a+b)\n    return \"\"\n"
    },
    {
        "number": 4441,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N == 1:\n        print('Hello World')\n    elif N == 2:\n        A = int(input())\n        B = int(input())\n        print(A + B)"
    },
    {
        "number": 4441,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return 'Hello World' if int(stdin) == 1 else sum([int(stdin) for _ in range(2)])\n"
    },
    {
        "number": 4441,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    age = stdin.split('\\n')[0]\n    \n    if int(age) == 1:\n        return \"Hello World\"\n    else:\n        a, b = stdin.split('\\n')[1:3]\n        return str(int(a) + int(b))"
    },
    {
        "number": 4441,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return f'Hello World'\n"
    },
    {
        "number": 4442,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(a ** b)\n    \n"
    },
    {
        "number": 4442,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    https://www.codewars.com/kata/5994e33ecbcc4a2db00000f/python\n    \"\"\"\n    a, b = stdin.split()\n    a, b = int(a), int(b)\n    if a < b:\n        return str(a) * b\n    elif a > b:\n        return str(b) * a\n    return str(a) * a\n"
    },
    {
        "number": 4442,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4442,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return \"\".join(sorted((str(a) * b, str(b) * a)))\n"
    },
    {
        "number": 4442,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4 3\")\n    '3333'\n    >>> solution(\"1 1\")\n    '11'\n    \"\"\"\n    a, b = map(int, stdin.split(\" \"))\n    return \"\".join(sorted([str(a) * b, str(b) * a]))\n"
    },
    {
        "number": 4442,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a < b:\n        print(a * b)\n    else:\n        print(b * a)"
    },
    {
        "number": 4442,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    a, b = map(int, stdin.split())\n    return str(int(\"\".join(sorted(str(b) * a))) + int(\"\".join(sorted(str(a) * b))))"
    },
    {
        "number": 4442,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Lexicographically smaller string\"\"\"\n    \n    a, b = map(int, stdin.split())\n    \n    if a > b:\n        return str(b) * b\n    else:\n        return str(a) * a\n    \n"
    },
    {
        "number": 4442,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 4442,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    a, b = int(a), int(b)\n    a = list(str(a))\n    b = list(str(b))\n    min_str = a if a < b else b\n    max_str = b if a < b else a\n    print(\"\".join(min_str))\n    return \"\""
    },
    {
        "number": 4443,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    input: str = stdin.strip()\n    input: str = input.lower()\n    \n    characters = list(input)\n    \n    return ''.join(sorted(characters[1:]))\n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 4443,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    letter = stdin\n    letter = letter.lower()\n    if letter == 'z':\n        letter = 'a'\n    else:\n        letter = chr(ord(letter) + 1)\n    return letter\n"
    },
    {
        "number": 4443,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    c = stdin\n    if c == 'z':\n        print('a')\n    else:\n        print(chr(ord(c) + 1))\n\nsolution(input())\n"
    },
    {
        "number": 4443,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"a\")\n    b\n    >>> solution(\"b\")\n    c\n    \"\"\"\n    assert len(stdin) == 1\n    stdin = stdin.lower()\n    for c in \"abcdefghijklmnopqrstuvwxyz\":\n        if c == stdin:\n            return chr(ord(c) + 1)\n    raise AssertionError(\"unreachable\")\n"
    },
    {
        "number": 4443,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    C = stdin\n    if C[0] == 'z':\n        print(C[0] + C[1])\n    else:\n        print(chr(ord(C[0]) + 1))\n    \n    return \"\""
    },
    {
        "number": 4443,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"a\")\n    b\n    \"\"\"\n    return chr(ord(stdin) + 1)\n"
    },
    {
        "number": 4443,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    if stdin.lower() == 'a':\n        return 'b'\n    elif stdin.lower() == 'b':\n        return 'c'\n    elif stdin.lower() == 'c':\n        return 'd'\n    elif stdin.lower() == 'd':\n        return 'e'\n    elif stdin.lower() == 'e':\n        return 'f'\n    elif stdin.lower() == 'f':\n        return 'g'\n    elif stdin.lower() == 'g':\n        return 'h'\n    elif stdin.lower() == 'h':\n        return 'i'\n    elif stdin.lower() == 'i':\n        return 'j'\n    elif stdin.lower() == 'j':\n        return 'k'\n    elif stdin.lower() == 'k':\n        return 'l'\n    elif stdin.lower() == 'l':\n        return'm'\n    elif stdin.lower() =='m':\n        return 'n'\n    elif stdin.lower() == 'n':\n        return 'o'\n    elif stdin.lower() == 'o':\n        return 'p'\n    elif stdin.lower() == 'p':\n        return 'q'\n    elif stdin.lower() == 'q':\n        return 'r'\n    elif stdin.lower() == 'r':\n        return's'\n    elif stdin.lower() =='s':\n        return 't'\n    elif stdin.lower() == 't':\n        return 'u'\n    elif stdin.lower() == 'u':\n        return 'v'\n    elif stdin.lower() == 'v':\n        return 'w'\n    elif stdin.lower() == 'w':\n        return 'x'\n    elif stdin.lower() == 'x':\n        return 'y'\n    elif stdin.lower() == 'y':\n        return 'z'\n    elif stdin.lower() == 'z':\n        return 'a'\n    else:\n        return 'z'\n"
    },
    {
        "number": 4443,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('a')\n    'b'\n    >>> solution('b')\n    'c'\n    >>> solution('c')\n    'd'\n    >>> solution('d')\n    'e'\n    >>> solution('e')\n    'f'\n    >>> solution('f')\n    'g'\n    >>> solution('g')\n    'h'\n    >>> solution('h')\n    'i'\n    >>> solution('i')\n    'j'\n    >>> solution('j')\n    'k'\n    >>> solution('k')\n    'l'\n    >>> solution('l')\n   'm'\n    >>> solution('m')\n    'n'\n    >>> solution('n')\n    'o'\n    >>> solution('o')\n    'p'\n    >>> solution('p')\n    'q'\n    >>> solution('q')\n    'r'\n    >>> solution('r')\n   's'\n    >>> solution('s')\n    't'\n    >>> solution('t')\n    'u'\n    >>> solution('u')\n    'v'\n    >>> solution('v')\n    'w'\n    >>> solution('w')\n    'x'\n    >>> solution('x')\n    'y'\n    >>> solution('y')\n    'z'\n    >>> solution('z')\n    'a'\n    >>> solution('0')\n    '1'\n    >>> solution('1')\n    '2'\n    >>> solution('2')\n    '3'\n    >>> solution('3')\n    '4'\n    >>> solution('4')\n    '5'\n    >>> solution('5')\n    '6'\n    >>> solution('6')\n    '7'\n    >>> solution('7')\n    '8'\n    >>> solution('8')\n    '9'\n    >>> solution('9')\n    '0'\n    >>> solution('.')\n    '.'\n    \"\"\"\n    return chr(ord(stdin) + 1)\n"
    },
    {
        "number": 4443,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return chr(ord(stdin[0])+1)"
    },
    {
        "number": 4443,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    print(alphabet[alphabet.find(stdin) + 1])\n    return \"\"\n\nprint(solution(stdin))\n\ndef"
    },
    {
        "number": 4444,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    print(stdin.split(' ')[1] + stdin.split(' ')[0])"
    },
    {
        "number": 4444,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return stdin[len(stdin.split(\" \")[1]):] + stdin.split(\" \")[0]\n\"\"\""
    },
    {
        "number": 4444,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return stdin[2::2] + stdin[0::2]\n"
    },
    {
        "number": 4444,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    return s + t"
    },
    {
        "number": 4444,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    s, t = stdin.split(' ')\n    return t + s\n    '''\n    s, t = stdin.split(' ')\n    return t + s"
    },
    {
        "number": 4444,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('order atc')\n    atcoder\n    \"\"\"\n    s = stdin.split()[0]\n    t = stdin.split()[1]\n    return t + s\n"
    },
    {
        "number": 4444,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return stdin[::-1]"
    },
    {
        "number": 4444,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()[0]\n    t = stdin.split()[1]\n    return t + s\n"
    },
    {
        "number": 4444,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.split(\" \")[0]\n    T = stdin.split(\" \")[1]\n\n    return T + S\n"
    },
    {
        "number": 4444,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.split(' ')[0]\n    T = stdin.split(' ')[1]\n    return T[::-1] + S\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4445,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = [int(s) for s in stdin.split(\"\\n\")[1].split(\" \")]\n    previous_element = None\n    previous_is_odd = None\n    sum_non_deleted_elements = 0\n    for i in range(n):\n        element = arr[i]\n        if previous_element is None:\n            previous_element = element\n            previous_is_odd = element % 2 == 1\n            sum_non_deleted_elements += element\n        elif element % 2 == previous_is_odd:\n            sum_non_deleted_elements += element\n        previous_element = element\n        previous_is_odd = element % 2 == 1\n    return sum_non_deleted_elements\n"
    },
    {
        "number": 4445,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    nums = sorted(map(int, stdin.readline().strip().split()))\n    i = 0\n    k = 0\n    while i < n:\n        if i % 2 == 0:\n            if nums[i] % 2 == 1:\n                k += nums[i]\n                del nums[i]\n                i = -1\n                n = len(nums)\n        i += 1\n    return k\n"
    },
    {
        "number": 4445,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(c) for c in stdin.readline().strip().split(' ')]\n    \n    return str(sum([c for c in a if c%2!= c//2 % 2]))\n"
    },
    {
        "number": 4445,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(i) for i in stdin.readline().split()]\n    ans = 0\n    for i in range(n):\n        if a[i]%2:\n            ans += a[i]\n    if ans == 0:\n        return 0\n    for i in range(n):\n        if a[i]%2 and i>0:\n            if (a[i]%2!= a[i-1]%2):\n                ans += a[i]\n    return ans"
    },
    {
        "number": 4445,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    first_index = 0\n    moves = 0\n    current_value = sum(a)\n    while first_index < len(a):\n        last_index = first_index\n        moves += 1\n        current_value -= a[first_index]\n        while last_index < len(a) and a[last_index] % 2 == 0:\n            last_index += 1\n        if last_index >= len(a):\n            break\n        first_index = last_index + 1\n        if first_index < len(a):\n            current_value += a[first_index]\n    print(current_value)\n\nsolution(sys.stdin.readline())"
    },
    {
        "number": 4445,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def play_game(a: List[int]) -> int:\n        res: int = 0\n        parity: int = 0\n        deleted: List[int] = []\n        a.sort()\n        for i in range(len(a)):\n            if i % 2 == 0:\n                parity = 1\n            else:\n                parity = -1\n            while True:\n                if not deleted:\n                    return res\n                if parity * a[i] == parity * deleted[-1]:\n                    break\n                else:\n                    deleted.append(a[i])\n                    res += a[i]\n                    a.pop(i)\n                    break\n        return res\n    a: str = stdin\n    a: List[int] = list(map(int, a.split('\\n')[1:]))\n    return play_game(a)\n"
    },
    {
        "number": 4445,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\" https://app.codility.com/demo/results/trainingCDKWQ-F7T/ \"\"\"\n    n = int(stdin.readline())\n    arr = [int(i) for i in stdin.readline().strip().split()]\n    count = 0\n    for _ in range(n):\n        if count == n - 1:\n            break\n        i = 0\n        while i < n - 1 and arr[i] % 2 == arr[i + 1] % 2:\n            i += 1\n        if i == n - 1:\n            return 0\n        arr[i] = arr[i] ^ arr[i + 1]\n        arr.pop(i + 1)\n        count += 1\n    return sum(arr)"
    },
    {
        "number": 4445,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def sum_all_even_numbers(a):\n        return sum(filter(lambda x: x%2==0, a))\n    def sum_all_odd_numbers(a):\n        return sum(filter(lambda x: x%2!=0, a))\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    even_sum = sum_all_even_numbers(a)\n    odd_sum = sum_all_odd_numbers(a)\n    while len(a)>1:\n        if a[0]%2==0:\n            even_sum -= a[0]\n        else:\n            odd_sum -= a[0]\n        del a[0]\n        if len(a) == 1:\n            break\n        if a[0]%2!=0:\n            even_sum += a[0]\n        else:\n            odd_sum += a[0]\n        del a[0]\n    return min(even_sum, odd_sum)"
    },
    {
        "number": 4445,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split('\\n')[0].split(' '))\n    arr = list(map(int, stdin.split('\\n')[1].split(' ')))\n    even_sum = 0\n    odd_sum = 0\n    for i in range(n):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n        else:\n            odd_sum += arr[i]\n    moves = 0\n    while moves < n:\n        if arr[moves] % 2 == 0:\n            even_sum -= arr[moves]\n            moves += 1\n            while moves < n and arr[moves] % 2 == 0:\n                even_sum -= arr[moves]\n                moves += 1\n        else:\n            odd_sum -= arr[moves]\n            moves += 1\n            while moves < n and arr[moves] % 2!= 0:\n                odd_sum -= arr[moves]\n                moves += 1\n    return even_sum + odd_sum\nprint(solution(str(input())))\n"
    },
    {
        "number": 4445,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5\n   ... 1 5 7 8 2''')\n    0\n    >>> solution('''6\n   ... 5 1 2 4 6 3''')\n    0\n    >>> solution('''2\n   ... 1000000 1000000''')\n    1000000\n    \"\"\"\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split(' ')))\n    a.sort(reverse=True)\n    s = 0\n    i = 0\n    while i < n and len(a) > 1:\n        if i % 2 == 0:\n            if a[i] % 2 == 0:\n                a.pop(i)\n                s += a[i]\n            else:\n                a.pop(i)\n                s += a[i]\n        else:\n            if a[i] % 2!= 0:\n                a.pop(i)\n                s += a[i]\n            else:\n                a.pop(i)\n                s += a[i]\n        i += 1\n    return s\n"
    },
    {
        "number": 4446,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, k = map(int, stdin.readline().split())\n    h = list(map(int, stdin.readline().split()))\n    dp = [0] * n\n    dp[0] = 1\n    for i in range(1, n):\n        if i + k >= n:\n            break\n        dp[i] = dp[i - 1]\n        for j in range(1, k + 1):\n            if i + j < n and dp[i] > dp[i - j] + abs(h[i + j] - h[i]):\n                dp[i] = dp[i - j] + abs(h[i + j] - h[i])\n    print(dp[-1])\n"
    },
    {
        "number": 4446,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 4446,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"O(n) where n is the number of monster\"\"\"\n    n, a, b, k = [int(x) for x in stdin.split()]\n    h = [int(x) for x in stdin.split()]\n\n    # initialise the game board\n    game_board = [0] * (n + 1)\n    game_board[0] = a\n    game_board[1] = b\n    game_board[n] = a\n    game_board[n + 1] = b\n\n    # game loop\n    for m in range(2, n + 1):\n        game_board[m] = min(a, game_board[m - 1]) + h[m - 1]\n        game_board[n + m] = min(b, game_board[n + m - 1]) + h[m - 1]\n    #print(game_board)\n\n    best_h = [game_board[m] - game_board[m + 1] for m in range(n)]\n    return max(best_h)\n"
    },
    {
        "number": 4446,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return 'Hello, world!'"
    },
    {
        "number": 4446,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return str(solve(stdin))\n\ndef"
    },
    {
        "number": 4446,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, k = [int(i) for i in stdin.split()]\n    nums = [int(i) for i in stdin.split()]\n    nums.sort(reverse=True)\n    res = 0\n    if a > b:\n        a, b = b, a\n    for num in nums[:k]:\n        if a > b:\n            a, b = b, a\n        if num <= b:\n            a = num\n            res += 1\n        else:\n            break\n    return res"
    },
    {
        "number": 4446,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4446,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return None\n"
    },
    {
        "number": 4446,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, k = map(int, stdin.split())\n    h = list(map(int, stdin.split()))\n    h.sort(reverse=True)\n    if sum(h) == a:\n        return n\n    elif sum(h) - a == 0:\n        return 0\n    else:\n        for i in range(k):\n            if h[i] - a <= b:\n                h[i] -= a\n                for j in range(i + 1, n):\n                    if h[i] - b > 0:\n                        h[j] -= b\n                    else:\n                        break\n            else:\n                break\n        return sum(h) - max(h)\n"
    },
    {
        "number": 4446,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, k = [int(x) for x in stdin.split()]\n    h = [int(x) for x in stdin.split()]\n    dp = [[0] * (k + 1) for i in range(n + 1)]\n    dp[0][0] = 0\n    dp[0][1] = b\n    dp[1][0] = a\n    dp[1][1] = 0\n    dp[1][2] = 0\n    for i in range(2, n + 1):\n        dp[i][0] = min(dp[i - 1][0] + b, dp[i - 1][1] + a)\n        dp[i][1] = min(dp[i - 1][0] + a, dp[i - 1][1] + b)\n        for j in range(2, k + 1):\n            dp[i][j] = min(dp[i - 1][j - 1] + a, dp[i - 1][j] + b)\n    return dp[n][k]\n"
    },
    {
        "number": 4447,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    n = len(a)\n    c = [0] * m\n    for i in range(n):\n        c[a[i] % m] += 1\n    c[0] = n // m\n    # print(c)\n    res = []\n    for i in range(m):\n        # print(a[i], c[i])\n        if c[i] < c[0]:\n            res.append(a[i] + c[0] - c[i])\n        else:\n            res.append(a[i])\n    return \" \".join(map(str, res))\n\n\ndef"
    },
    {
        "number": 4447,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds minimum number of moves to satisfy condition.\"\"\"\n    n, m = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    d = [0] * (m + 1)\n    for x in a:\n        d[x % m] += 1\n    res = (n // m) * m\n    for i in range(1, m):\n        res += i * (d[i] - (d[i] // m) * m)\n    return res\n    pass\n\n\ndef"
    },
    {
        "number": 4447,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n, m = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    prefix_sum = [0]\n    for i in range(len(arr)):\n        prefix_sum.append(prefix_sum[-1] + arr[i])\n    \n    counts = [0] * m\n    for i in range(n):\n        counts[(prefix_sum[i+1] - prefix_sum[i]) % m] += 1\n    \n    ans = 0\n    for i in range(m):\n        ans += counts[i] * (n // m)\n    \n    return ans\n"
    },
    {
        "number": 4447,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\" Solution of the problem \"\"\"\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    c = n // m\n\n    ans = 0\n    cnt = [0] * m\n    for el in a:\n        ans += cnt[el % m]\n        cnt[el % m] += 1\n\n    for idx, el in enumerate(cnt):\n        ans += idx * (el // c)\n    \n    print(ans)\n    return \"\"\n\n\ndef"
    },
    {
        "number": 4447,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n, m = list(map(int, stdin.split()))\n    arr = list(map(int, stdin.split()))\n    ans = [0] * m\n    for i in range(m):\n        cnt = 0\n        for j in range(n):\n            if arr[j] % m == i:\n                cnt += 1\n        ans[i] = cnt\n    s = sum(ans)\n    r = n // m\n    ans = [i * r for i in ans]\n    for i in range(m):\n        if ans[i] < s:\n            ans[i] += 1\n            s += 1\n    for i in range(m):\n        print(ans[i], end=\" \")\n    return \"\"\n"
    },
    {
        "number": 4447,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4447,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"The solution is described in the Specification.\"\"\"\n"
    },
    {
        "number": 4447,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    c = [0] * (m + 1)\n    for x in a:\n        c[x % m] += 1\n    r = 0\n    for i in range(m):\n        c[i + 1] += c[i]\n        if i + 1 == m:\n            r += c[i] * (c[i] - 1) // 2\n        else:\n            r += c[i] * c[i + 1]\n    return (m - r) % m\n"
    },
    {
        "number": 4447,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    c = [0] * m\n    for x in a:\n        c[x % m] += 1\n    r = n // m\n    ans = []\n    for i in range(m):\n        ans.append(r * (i + 1) - c[i])\n    return \" \".join(map(str, ans))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4447,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def count_remainders(a, m, n):\n        res = [0] * (m + 1)\n        for i in range(n):\n            res[a[i] % m] += 1\n        return res\n\n    def solve(a, m, cnt):\n        if cnt == m:\n            return a\n\n        n = len(a)\n        res = []\n        for i in range(1, m + 1):\n            if cnt[i] == n // m:\n                res.append(i)\n                cnt[i] = -1\n\n        for i in range(1, m + 1):\n            if cnt[i]!= -1:\n                cnt[i] += 1\n                res = solve(res + [i], m, cnt)\n                cnt[i] -= 1\n\n        return res\n\n    n, m = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n    cnt = count_remainders(a, m, n)\n    return''.join(map(str, solve(a, m, cnt)))\n"
    },
    {
        "number": 4448,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return str\"\"\"\n"
    },
    {
        "number": 4448,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    k = [int(c) for c in stdin.split(' ')]\n    m = [list(map(int, stdin.split(' '))) for _ in range(m)]\n    b = k.count(1)\n\n    dp = [float('inf') for _ in range(b+1)]\n\n    for d, t in m:\n        dp[t] = min(dp[t], d)\n\n    ans = -1\n    t = k[0]\n    for i in range(b+1):\n        if k[0] == 0:\n            ans = max(ans, i)\n        else:\n            t -= 1\n            if t == 0:\n                ans = max(ans, i)\n            else:\n                for d, t in m:\n                    dp[t] = min(dp[t], d+i)\n\n    return ans\n\nprint(solution(input()))\n"
    },
    {
        "number": 4448,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4448,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    lst = [int(stdin.readline()) for _ in range(n)]\n    mtrs = [int(stdin.readline()) for _ in range(m)]\n    lst.sort()\n    ans = 1\n    cur_day = 1\n    for mtr in mtrs:\n        nxt_day = bisect_right(lst, mtr)\n        if nxt_day - cur_day >= mtr:\n            ans = max(ans, nxt_day)\n            cur_day = nxt_day\n    return str(ans)\n"
    },
    {
        "number": 4448,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    k = [int(i) for i in stdin.split()][1:]\n    k.sort()\n    if sum(k) > 1000:\n        return -1\n    d = [int(i) for i in stdin.split()][2:]\n    d.sort()\n    if sum(d) > 1000:\n        return -1\n    out = 0\n    while k:\n        minn = min(k)\n        k.remove(minn)\n        out += 1\n        for i in range(m):\n            if d[i] > out:\n                break\n            if k[i] > 1 and d[i] == out:\n                k[i] -= 1\n                break\n    return out\n"
    },
    {
        "number": 4448,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"5 6\\n1 2 0 2 0\\n2 4\\n3 3\\n1 5\\n1 2\\n1 5\\n2 3\\n\")\n    8\n    \"\"\"\n   ...\n"
    },
    {
        "number": 4448,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    inputs = list(map(int, stdin.split()))\n    special_offers = []\n    for i in range(inputs[1]):\n        special_offers.append(list(map(int, stdin.split())))\n    special_offers.sort(key=lambda x: x[0])\n    # special_offers = sorted(special_offers, key=lambda x: x[0])\n    # special_offers.sort(key=lambda x: x[0])\n    return special_offers\n"
    },
    {
        "number": 4448,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split(' ')]\n    k = [int(x) for x in stdin.split('\\n')[1:m + 1]]\n    d = [int(x) for x in stdin.split('\\n')[m + 1:]]\n    d = sorted(d)\n    k = sorted(k)\n    ans = 0\n    for i in range(n):\n        if k[i] <= 0:\n            break\n        if d[i] < ans:\n            break\n        for j in range(n):\n            if d[i] >= d[j] and k[i] > k[j]:\n                k[i] -= k[j]\n                if d[i] < ans:\n                    ans = d[i]\n                break\n    return ans\n"
    },
    {
        "number": 4448,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(i) for i in stdin.split()]\n    k = [int(i) for i in stdin.split()]\n    b = [int(i) for i in stdin.split()]\n    return 'B'"
    },
    {
        "number": 4448,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    inputs = (line.split() for line in stdin.splitlines())\n\n    n, m = map(int, next(inputs))\n    k = [int(next(inputs)) for _ in range(n)]\n    d, t = map(int, next(inputs))\n\n    from collections import defaultdict\n    specials = {t: d for d, t in (map(int, next(inputs)) for _ in range(m))}\n\n    values = defaultdict(int)\n\n    # \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u0432\u0441\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0438\u043a\u0440\u043e\u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0439, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043d\u0430\u0439\u0442\u0438\n    for t in range(n):\n        for d in range(1, 1001):\n            values[(d, t)] = min(values[(d, t)], k[t])\n            if t in specials and d == specials[t]:\n                values[(d, t)] = min(values[(d, t)], k[t] + 1)\n\n    day = 0\n    for t in range(n):\n        day = max(day, values[(day, t)])\n\n    return day\n"
    },
    {
        "number": 4449,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n    return ''"
    },
    {
        "number": 4449,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def area(a, b, c, d):\n        return (a + b) * (c + d)\n\n    def is_equal_area(a, b, c, d):\n        return (a * b) == (c * d)\n\n    #\n    #     #\n    #     #\n    #     #\n    #     #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    "
    },
    {
        "number": 4449,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution to the problem.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4449,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    \n    \n"
    },
    {
        "number": 4449,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    pass\n"
    },
    {
        "number": 4449,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    num_queries = int(stdin.readline())\n    answers = []\n    for i in range(num_queries):\n        num_rects = int(stdin.readline())\n        sticks = list(map(int, stdin.readline().split()))\n        sticks.sort()\n        answers.append(main(num_rects, sticks))\n    return '\\n'.join(answers)\n\n\ndef"
    },
    {
        "number": 4449,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    total_q = int(stdin.readline())\n    for _ in range(total_q):\n        n = int(stdin.readline())\n        sticks = sorted(list(map(int, stdin.readline().split())), reverse=True)\n        if sticks[0] * sticks[1] == sticks[2] * sticks[3] and sticks[2] * sticks[3] == sticks[4] * sticks[5]:\n            print('YES')\n        else:\n            print('NO')\n    return ''\n"
    },
    {
        "number": 4449,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    # n = int(stdin.readline().strip())\n    # for _ in range(n):\n    #     lst = list(map(int, stdin.readline().strip().split(' ')))\n    #     print('YES' if abs(lst[0] * lst[1] - lst[2] * lst[3]) == 0 else 'NO')\n    n = int(input())\n    lst = list(map(int, input().strip().split(' ')))\n    result = 'YES' if abs(lst[0] * lst[1] - lst[2] * lst[3]) == 0 else 'NO'\n    print(result)\n    return result\n"
    },
    {
        "number": 4449,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\""
    },
    {
        "number": 4449,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline().strip())\n    for _ in range(q):\n        n = int(stdin.readline().strip())\n        # max length\n        max_length = 0\n        # can make n rects\n        can_make_n_rects = True\n        # each stick is 1 + 4n\n        sticks = sum(map(int, stdin.readline().strip().split()))\n        # check sticks are enough\n        if sticks % 4!= 0:\n            can_make_n_rects = False\n        # find longest stick\n        for i in range(1, n + 1):\n            if 4 * i < sticks:\n                max_length = i\n            else:\n                can_make_n_rects = False\n                break\n        # print answer\n        if can_make_n_rects:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n"
    },
    {
        "number": 4450,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Modify the lines below\n    n, m, k = [int(x) for x in stdin.split()]\n    g = {i: set() for i in range(1, n + 1)}\n    for i in range(m):\n        x, y, w = [int(x) for x in stdin.split()[i * 3:(i + 1) * 3]]\n        g[x].add((y, w))\n        g[y].add((x, w))\n    path = dijkstra(1, g, n, k)\n    return str(path[k - 1])\n\ndef"
    },
    {
        "number": 4450,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # get input\n    # parse the input\n    # compute the answer\n    return str(answer)\n"
    },
    {
        "number": 4450,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4450,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 4450,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    return ''\n"
    },
    {
        "number": 4450,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4450,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    graph = [[float('inf')] * n for _ in range(n)]\n    for _ in range(m):\n        x, y, w = map(int, stdin.split())\n        graph[x - 1][y - 1] = min(graph[x - 1][y - 1], w)\n    for i in range(n):\n        graph[i][i] = 0\n    for k in range(n):\n        for i in range(n):\n            for j in range(n):\n                if graph[i][j] > graph[i][k] + graph[k][j]:\n                    graph[i][j] = graph[i][k] + graph[k][j]\n    return str(graph[0][n - 1])\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4450,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def dijkstra(graph: list, n: int, k: int) -> list:\n        \"\"\"\n        graph = [[0, 1, 0],\n                 [0, 0, 1],\n                 [0, 0, 0]]\n        n = 3\n        k = 0\n\n        graph = [[0, 1, 0],\n                 [0, 0, 1],\n                 [0, 0, 0]]\n        n = 3\n        k = 2\n\n        graph = [[0, 1, 0],\n                 [0, 0, 1],\n                 [0, 0, 0]]\n        n = 3\n        k = 3\n        \"\"\"\n\n        assert k <= n * (n - 1) / 2, \"k must be less than or equal to n * (n - 1) / 2\"\n\n        dist = [float(\"inf\")] * n\n        dist[0] = 0\n        heap = [(0, 0)]\n        while heap:\n            d, v = heappop(heap)\n            if d < dist[v]:\n                dist[v] = d\n                for d_, v_ in graph[v]:\n                    heappush(heap, (d + d_, v_))\n\n        return dist[k]\n\n    def dijkstra_with_counter(graph: list, n: int, k: int) -> list:\n        \"\"\"\n        graph = [[0, 1, 0],\n                 [0, 0, 1],\n                 [0, 0, 0]]\n        n = 3\n        k = 0\n\n        graph = [[0, 1, 0],\n                 [0, 0, 1],\n                 [0, 0, 0]]\n        n = 3\n        k = 2\n\n        graph = [[0, 1, 0],\n                 [0, 0, 1],\n                 [0, 0, 0]]\n        n = 3\n        k = 3\n        \"\"\"\n\n        assert k <= n * (n - 1) / 2, \"k must be less than or equal to n * (n - 1) / 2\"\n\n        dist = [float(\"inf\")] * n\n        dist[0] = 0\n        heap = [(0, 0)]\n        count = [float(\"inf\")] * n\n        count[0] = 0\n        while heap:\n            d, v = heappop(heap)\n            if d < dist[v]:\n                dist[v] = d\n                count[v] = 0\n                for d_, v_ in graph[v]:\n                    heappush(heap, (d + d_, v_))\n\n            count[v] += 1\n            if count[v] == k:\n                return dist[v]\n\n        return dist[k]\n\n    n, m, k = [int(c) for c in stdin.split()]\n    graph = [[] for _ in range(n)]\n    for _ in range(m):\n        x, y, w = [int(c) for c in stdin.split()]\n        graph[x - 1].append((w, y - 1))\n        graph[y - 1].append((w, x - 1))\n\n    k -= 1\n    print(dijkstra_with_counter(graph, n, k))\n\n    return ''\n"
    },
    {
        "number": 4450,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n"
    },
    {
        "number": 4450,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = (int(x) for x in stdin.split())\n    g = {(i, j, abs(i - j)) for i in range(1, n + 1) for j in range(1, n + 1) if i!= j}\n    g = {(i, j, x) for (i, j, x) in g if x < m}\n    g = {(i, j, x) for (i, j, x) in g if i < j}\n    g = {(i, j, x) for (i, j, x) in g if (i, j) not in g}\n    g = {(i, j, x) for (i, j, x) in g if x < n - 1}\n    g = {(i, j, x) for (i, j, x) in g if x < n * (n - 1) / 2 - (n - 2) * n / 2 + n - 1}\n    g = {(i, j, x) for (i, j, x) in g if x < n * (n - 1) / 2 - (n - 2) * n / 2 + n}\n    g = {(i, j, x) for (i, j, x) in g if x < n * (n - 1) / 2 - (n - 2) * n / 2}\n    g = {(i, j, x) for (i, j, x) in g if x < n * (n - 1) / 2 - (n - 2) * n / 2}\n    g = {(i, j, x) for (i, j, x) in g if x < n * (n - 1) / 2 - (n - 2) * n / 2}\n    g = {(i, j, x) for (i, j, x) in g if x < n * (n - 1) / 2 - (n - 2) * n / 2}\n    g = {(i, j, x) for (i, j, x) in g if x < n * (n - 1) / 2 - (n - 2) * n / 2}\n    g = {(i, j, x) for (i, j, x) in g if x < n * (n - 1) / 2 - (n - 2) * n / 2}\n    g = {(i, j, x) for (i, j, x) in g if x < n * (n - 1) / 2 - (n - 2) * n / 2}\n    g = {(i, j, x) for (i, j, x) in g if x < n * (n - 1) / 2 - (n - 2) * n / 2}\n    g = {(i, j, x) for (i, j, x) in g if x < n * (n - 1) / 2 - (n - 2) * n / 2}\n    g = {(i, j, x) for (i, j, x) in g if x < n * (n - 1) / 2 - (n - 2) * n / 2}\n    g = {(i, j, x) for (i, j, x) in g if x < n * (n - 1) / 2 - (n - 2) * n / 2}\n    g = {(i, j, x) for (i, j, x) in g if x < n * (n - 1) / 2 - (n - 2) * n / 2}\n    g = {(i, j, x) for (i, j, x) in g if x < n * (n - 1) / 2 - (n - 2) * n / 2}\n    g = {(i, j, x) for (i, j, x) in g if x < n * (n - 1) / 2 - (n - 2) * n / 2}\n    g = {(i, j, x) for (i, j, x) in g if x < n * (n - 1) / 2 - (n - 2) * n / 2}\n    g = {(i, j, x) for (i, j, x) in g if x < n * (n - 1) / 2 - (n - 2) * n / 2}\n    g = {(i, j, x) for (i, j, x) in g if x < n * (n - 1) / 2 - (n - 2) * n / 2}\n    g = {(i, j, x) for (i, j, x) in g if x < n * (n - 1) / 2 - (n - 2) * n / 2}\n    g = {(i, j, x) for (i, j, x) in g if x < n * (n - 1) / 2 - (n - 2) * n / 2}\n    g = {(i, j, x) for (i, j, x) in g if x < n * (n - 1) / 2 - (n - 2) * n / 2}\n    g = {(i, j, x) for (i, j, x) in g if x < n * (n - 1) / 2 - (n - 2) * n / 2}\n    g = {(i, j, x) for (i, j, x) in g if x < n * (n - 1) / 2 - (n - 2) * n / 2}\n    g = {(i, j, x) for (i, j, x) in g if x < n * (n - 1) / 2 - (n - 2) * n / 2}\n    g = {(i, j, x) for (i, j, x) in g if x < n * (n - 1) / 2 - (n - 2) * n / 2}\n    g = {(i, j, x) for (i, j, x) in g if x < n * (n - 1) / 2 - (n - 2) * n / 2}\n"
    },
    {
        "number": 4451,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n = int(stdin)\n    arr = list(map(int, stdin.split()))\n    arr.sort()\n    res, k = arr[n-1] - arr[0], 1\n    for i in range(1, n):\n        if arr[i] - arr[i-1] < res:\n            res, k = arr[i] - arr[i-1], k+1\n    print(res, k)\n    return \"\""
    },
    {
        "number": 4451,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution to the task.\"\"\"\n    # TODO: implement\n    pass\n"
    },
    {
        "number": 4451,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\\\n   ... 5\n   ... 1 1 3 4 2\n   ... ''')\n    '3 1'\n    >>> solution('''\\\n   ... 6\n   ... 1 5 12 13 2 15\n   ... ''')\n    '7 2'\n    >>> solution('''\\\n   ... 10\n   ... 1 2 5 129 185 581 1041 1909 1580 8150\n   ... ''')\n    '7486 3'\n    \"\"\"\n    n = int(stdin.readline().strip())\n    s = list(map(int, stdin.readline().strip().split()))\n    s.sort()\n    d = 0\n    k = 0\n    for i in range(1, n):\n        d += s[i] - s[i - 1]\n        k += 1\n        if d >= k * s[0]:\n            break\n    return str(k) +'' + str(k * s[0])\n"
    },
    {
        "number": 4451,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    arr = list(map(int, lines[1].split(' ')))\n    diversity = 0\n    minimum = max(arr) + 1\n    arr = list(set(arr))\n    arr = sorted(arr)\n    for i in range(1, len(arr)):\n        diversity = diversity + (max(arr[i - 1], arr[i]) - min(arr[i - 1], arr[i]))\n    return str(diversity) +'' + str(n - len(arr)) + '\\n' + str(arr).replace(' ', '')\n"
    },
    {
        "number": 4451,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    :param stdin:\n    :return:\n\n    time complexity: O(n)\n    space complexity: O(n)\n    '''\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    d, k, dp = 0, 0, {}\n    for i in range(n):\n        d = max(d, a[i]) - min(a[:i + 1])\n        dp[i] = d\n    for i in range(1, n + 1):\n        if dp[i - 1] < d:\n            k += 1\n    print(d, k)\n    print(*[i + 1 for i in range(n) if dp[i] == d])\n    return''.join(map(str, [d, k]))\n"
    },
    {
        "number": 4451,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    array = [int(s) for s in stdin.readline().split()]\n    s = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            s += max(array[i], array[j]) - min(array[i], array[j])\n    team = [0] * n\n    for i in range(n):\n        team[i] = int(s / 2 + 1)\n        for j in range(n):\n            if team[i] > 0 and array[j] < array[i] and team[j] > 0:\n                team[j] -= 1\n    for i in range(n):\n        print(team[i], end=' ')\n    print()"
    },
    {
        "number": 4451,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    std = [int(x) for x in stdin.split('\\n')[1].split(' ')]\n    std.sort()\n    minimum = 0\n    maximum = std[-1] - std[0]\n    answer = maximum\n    \n    while minimum <= maximum:\n        mid = (minimum + maximum) // 2\n        teams = 0\n        total = 0\n        for x in std:\n            if x + total <= mid:\n                total += x\n            else:\n                teams += 1\n                total = x\n        if teams >= 3:\n            minimum = mid + 1\n            answer = min(answer, mid)\n        else:\n            maximum = mid - 1\n    print(answer, teams)\n    return\n\n\nsolution(input())"
    },
    {
        "number": 4451,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4451,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    count = int(stdin.readline())\n    grades = list(map(int, stdin.readline().split()))\n    res, k = 0, 0\n    # sorted_grades = sorted(grades, key=lambda x: x)\n    # diff_grades = [grades[i] - grades[i + 1] for i in range(count - 1)]\n    while count > 1:\n        diff = max(grades) - min(grades)\n        res += diff\n        grades.remove(min(grades))\n        grades.remove(max(grades))\n        count -= 2\n        k += 1\n    print(res, k)\n    return ''\n"
    },
    {
        "number": 4451,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = [int(i) for i in stdin.split()[1:]]\n    d = [[a[0], 1]]\n    for i in range(1, n):\n        if d[-1][0] < a[i]:\n            d.append([a[i], 1])\n        else:\n            for j in range(len(d) - 1, -1, -1):\n                if d[j][0] > a[i]:\n                    d[j][1] += 1\n                    break\n    d = [j for j in d if j[1] > 2]\n    t = [i[1] for i in d]\n    print(sum(t) + len(t))\n    print(' '.join([str(i) for i in t]))\n    return ''"
    },
    {
        "number": 4452,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    # for each test case\n    #   for each input in that test case\n    #       compute the min number of round numbers to make up the number\n    #       for each input in that test case\n    return ''\n"
    },
    {
        "number": 4452,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    stdin = stdin.split('\\n')\n    numbers = []\n    for i in stdin:\n        numbers.append(int(i))\n    n = len(numbers)\n    ans = [0 for i in range(n)]\n    for i in range(n):\n        if i == 0:\n            if numbers[i] == 0:\n                ans[i] = 0\n            else:\n                ans[i] = 1\n        else:\n            if numbers[i] == 0:\n                ans[i] = ans[i-1]\n            else:\n                ans[i] = ans[i-1] + 1\n    sums = [ans[i] + numbers[i] for i in range(n)]\n    for i in range(n):\n        ans[i] = ans[i] + sums[i]\n    ans.sort()\n    print(ans[0])\n    return ans[0]\n"
    },
    {
        "number": 4452,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 4452,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 4452,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    return None\n"
    },
    {
        "number": 4452,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Finds the minimum number of summands required to represent a given number.\n    \"\"\"\n    \n    # Reads the first line of the input\n    test_cases = int(stdin)\n    \n    # Iterates through the test cases\n    for t in range(test_cases):\n        \n        # Reads the number from the input\n        n = int(stdin)\n        \n        # Saves the number of terms needed to represent the number\n        k = 0\n        \n        # Checks the number of terms\n        while n > 0:\n            \n            # Checks if the number of terms are at least the number of digits\n            if n >= 10:\n                \n                # Calculates the amount of digits\n                k += 1\n                \n                # Calculates the number of terms\n                n -= 9\n            \n            else:\n                \n                # Calculates the amount of terms\n                k += 1\n                \n                # Calculates the number of digits\n                n -= n\n            \n        # Prints the number of terms and the number of digits\n        print(k, end ='')\n        \n        # Prints the number of terms\n        print(*[9 * k] * k, sep ='', end ='')\n        \n        # Prints the number of digits\n        print(*list(range(10 - k, 10)))\n        \n        # Checks if the number of terms is greater than 1\n        if k > 1:\n            \n            # Prints the number of terms\n            print()\n            \n            # Prints the number of terms\n            print(k, end ='')\n            \n            # Prints the number of digits\n            print(*[9 * k] * k, sep ='', end ='')\n            \n            # Prints the number of digits\n            print(*list(range(10 - k, 10)))\n            \n        else:\n            \n            # Prints the number of digits\n            print(list(range(1, n + 1)))\n            \n        # Prints the newline\n        print()\n        \n    # Returns the solution\n    return ''\n"
    },
    {
        "number": 4452,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your solution\n    return ''\n"
    },
    {
        "number": 4452,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    num_of_cases = int(stdin.readline())\n    result = []\n    for _ in range(num_of_cases):\n        num = int(stdin.readline())\n        string = \"\"\n        while num > 0:\n            string += str(num % 10)\n            num //= 10\n        result.append(string)\n    for idx, string in enumerate(result):\n        if len(string) == 1 and string == '0':\n            result[idx] = '0'\n        elif string[:-1] == string[:-1][::-1]:\n            result[idx] = str(len(string) - 1)\n    return \"\\n\".join(result)\n"
    },
    {
        "number": 4452,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return str(solve(stdin))[1:]\n\n\ndef"
    },
    {
        "number": 4452,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4453,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    #Your code here\n    return \"\"\n"
    },
    {
        "number": 4453,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\""
    },
    {
        "number": 4453,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4453,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"finds how many days it takes for books to be returned to their owners for each child\"\"\"\n    q: int = int(stdin.readline())\n    for _ in range(q):\n        n: int = int(stdin.readline())\n        p: list[int] = [int(i) for i in stdin.readline().split()]\n        book_return: list[int] = [0] * n\n        p = list(sorted(p))\n        book_return[p[0] - 1] = 1\n        # for each book\n        for i in range(1, n):\n            # for each book, find the next book returned from it\n            for j in range(i, n):\n                if p[j] == i + 1:\n                    book_return[i] = j - i + 1\n                    break\n        print(\" \".join([str(i) for i in book_return]))\n"
    },
    {
        "number": 4453,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4453,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    # return \"\""
    },
    {
        "number": 4453,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def find_cycle(p: List[int]) -> int:\n        \"\"\"Find a cycle in permutation p.\"\"\"\n        n = len(p)\n        tortoise = p[0]\n        hare = p[0]\n        while True:\n            tortoise = p[tortoise]\n            hare = p[p[hare]]\n            if tortoise == hare:\n                break\n        # Find the \"entrance\" to the cycle.\n        tortoise = p[0]\n        while tortoise!= hare:\n            tortoise = p[tortoise]\n            hare = p[hare]\n        return tortoise\n\n    def num_days(p: List[int]) -> int:\n        \"\"\"Return the number of days for kids to return book for the first time.\"\"\"\n        # Find a cycle.\n        tortoise = find_cycle(p)\n        assert tortoise == p[tortoise]\n        # Find length of cycle.\n        cycle_len = 0\n        while tortoise!= p[tortoise]:\n            tortoise = p[tortoise]\n            cycle_len += 1\n        cycle_len += 1\n\n        # Count the number of days.\n        # We can go from the first element of cycle to any element.\n        days = 0\n        for i in range(cycle_len):\n            p[0] = p[i]\n            days += 1\n            while p[0]!= i:\n                p[0] = p[p[0]]\n                days += 1\n        return days\n\n    n = int(stdin.readline())\n    p = list(map(int, stdin.readline().split()))\n    for i in range(n):\n        print(num_days(p))\n    return ''\n"
    },
    {
        "number": 4453,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    def func(size, permutation):\n        permutation = [i-1 for i in permutation]\n        return [\n            sum(\n                min(\n                    range(j, size),\n                    key=lambda x: abs(x - permutation[x])\n                )\n                for j in range(size)\n            )\n            for i in range(size)\n        ]\n\n    q = int(stdin.readline())\n    for _ in range(q):\n        size = int(stdin.readline())\n        permutation = [int(i) for i in stdin.readline().split(' ')]\n        print(*func(size, permutation))\n"
    },
    {
        "number": 4453,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4453,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    queries = [line.split(' ') for line in lines[1:]]\n    return''.join(map(str, answer(queries, n)))\n"
    },
    {
        "number": 4454,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''.join(stdin)\n"
    },
    {
        "number": 4454,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4454,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    'Find a minimum equal price of all goods.'\n    '{:0=5}'.format(int(stdin.readline().strip()))\n    return str(sum(int(i) for i in stdin.readline().strip().split(' ')))"
    },
    {
        "number": 4454,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 4454,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solve exercise.\"\"\"\n    _ = stdin.readline()\n    n = int(stdin.readline())\n    prices = [int(n) for n in stdin.readline().split()]\n\n    prices.sort(reverse=True)\n    while len(prices) > 1:\n        prices.pop()\n        prices[0] += 1\n\n    print(*prices)\n\n\ndef"
    },
    {
        "number": 4454,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \" \".join(stdin)\n"
    },
    {
        "number": 4454,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4454,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 4454,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return \"\".join(map(str, stdin))\n\"\"\"\nimport sys\n\nN = int(sys.stdin.readline())\nprices = [int(num) for num in sys.stdin.readline().split()]\n\nM = int(sys.stdin.readline())\n\nfor _ in range(M):\n    prices.append(int(sys.stdin.readline()))\n\nprices.sort()\n\nmin = 0\nsum_old = 0\nfor i in range(1, N+1):\n    sum_old += prices[i-1]\n    min = min + sum_old\n\nprint(min)"
    },
    {
        "number": 4454,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\""
    },
    {
        "number": 4455,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    skills = list(map(int, stdin.split()))\n    pairs = []\n    for i in range(k):\n        x, y = map(int, stdin.split())\n        pairs.append((x, y))\n    pairs = set(pairs)\n    skills = set(skills)\n    pairs = list(pairs)\n    skills = list(skills)\n    res = [0] * n\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                continue\n            if (skills[i], skills[j]) in pairs:\n                continue\n            if skills[i] > skills[j] and (skills[i], skills[j]) not in pairs:\n                res[j] += 1\n    for i in range(n):\n        print(res[i])\n    return ''"
    },
    {
        "number": 4455,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    arr = list(map(int, stdin.split('\\n')[1:]))\n    arr.sort(reverse=True)\n    ans = [0] * n\n    for i in range(k):\n        a, b = map(int, stdin.split('\\n')[i+2].split(' '))\n        for j in range(n):\n            if j!= a-1 and j!= b-1:\n                if arr[j] > arr[a-1]:\n                    ans[j] += 1\n                if arr[j] > arr[b-1]:\n                    ans[j] += 1\n    for i in range(n):\n        print(ans[i])\n\nprint(solution('4 2\\n10 4 10 15\\n1 2\\n4 3'))"
    },
    {
        "number": 4455,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    number_of_programmers, number_of_quarries = list(map(int, stdin.split(' ')))\n    programmer_skills = list(map(int, stdin.split('\\n')[1:]))\n    quarries = []\n    for _ in range(number_of_quarries):\n        quarries.append(list(map(int, stdin.split('\\n')[_ + 1].split(' '))))\n    quarries.sort(key=lambda x: x[0])\n    quarries.sort(key=lambda x: x[1])\n    number_of_mentors = [0 for _ in range(number_of_programmers)]\n    for _ in range(len(quarries)):\n        for i in range(len(number_of_mentors)):\n            if i + 1 not in quarries[0] and i + 1 not in quarries[1]:\n                if programmer_skills[i] > quarries[0][1]:\n                    number_of_mentors[i] += 1\n    for i in range(len(number_of_mentors)):\n        number_of_mentors[i] = str(number_of_mentors[i])\n    return''.join(number_of_mentors)\n\n\n\n-----Code-----\n\n\ndef"
    },
    {
        "number": 4455,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4455,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    r = [int(x) for x in stdin.split('\\n')[:n]]\n    quar = [map(int, x.split()) for x in stdin.split('\\n')[n:]]\n    res = [0] * n\n    for x, y in quar:\n        res[x - 1] += 1\n        res[y - 1] += 1\n    for i in range(k):\n        res[quar[i][0] - 1] += 1\n        res[quar[i][1] - 1] += 1\n    return''.join(map(str, res))\n"
    },
    {
        "number": 4455,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(v) for v in stdin.split(' ')]\n    skills = [int(v) for v in stdin.split(' ')[1:] if v]\n    pairs = []\n    for _ in range(k):\n        pairs.append([int(v) for v in stdin.split(' ')[1:] if v])\n    pairs = list(set(sum(pairs, [])))\n    pairs.sort()\n    ret = [0] * n\n    for i in range(len(pairs)):\n        for j in range(i + 1, len(pairs)):\n            if skills[pairs[i]] > skills[pairs[j]]:\n                ret[pairs[i]] += 1\n                ret[pairs[j]] += 1\n    return''.join([str(v) for v in ret])\n\n\n\ndef"
    },
    {
        "number": 4455,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''\n"
    },
    {
        "number": 4455,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    r = list(map(int, stdin.split(' ')))\n    p = [list(map(int, stdin.split(' '))) for i in range(k)]\n    count = [0] * n\n    p.sort(key=lambda x: x[0])\n    for i in range(k):\n        if r[p[i][0] - 1] > r[p[i][1] - 1]:\n            count[p[i][0] - 1] += 1\n        else:\n            count[p[i][1] - 1] += 1\n    print(*count)"
    },
    {
        "number": 4455,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    skills = list(map(int, stdin.split()))\n    \n    pairs = []\n    for i in range(k):\n        x, y = list(map(int, stdin.split()))\n        pairs.append((x, y))\n\n    pairs.sort(key=lambda x: x[0])\n    pairs.sort(key=lambda x: x[1])\n    dp = [[0 for _ in range(n)] for _ in range(k + 1)]\n    dp[0][0] = 1\n    for i in range(k):\n        x, y = pairs[i]\n        dp[i + 1][x] = dp[i][x]\n        dp[i + 1][y] = dp[i][y]\n\n        for j in range(n):\n            if j!= x and j!= y:\n                if skills[x] > skills[j]:\n                    dp[i + 1][j] = dp[i][x] + dp[i][j]\n                else:\n                    dp[i + 1][j] = dp[i][j]\n    \n    return''.join(map(str, dp[k][0:n]))\n"
    },
    {
        "number": 4455,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    from collections import defaultdict\n\n    N, M = map(int, stdin.split())\n    ranks = list(map(int, stdin.split()))\n\n    pair_to_rank = defaultdict(set)\n    for i in range(M):\n        x, y = map(int, stdin.split())\n        pair_to_rank[x].add(y)\n        pair_to_rank[y].add(x)\n\n    possible_mentors = set()\n    for i, rank in enumerate(ranks):\n        if i == 0:\n            continue\n        for pair in pair_to_rank[i]:\n            if ranks[pair] > rank:\n                possible_mentors.add(i)\n                possible_mentors.add(pair)\n\n    return \" \".join(map(str, sorted(possible_mentors)))\n\n\ndef"
    },
    {
        "number": 4456,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    s = [chr(x) for x in range(ord('a'), ord('a') + k)]\n    p, q = [int(x) - 1 for x in stdin.split()[1:]]\n    res = \"YES\"\n    if k > n or p < 0 or p >= n or q < 0 or q >= n:\n        res = \"NO\"\n    elif s[p] > s[q]:\n        res = s[:q] + s[p] + s[q] + s[p + 1:]\n    else:\n        res = s[:p] + s[q] + s[p] + s[q + 1:]\n    return res\n"
    },
    {
        "number": 4456,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    p, q = [int(x) for x in stdin.split()]\n    s = stdin.split()\n    return solve(n, k, p, q, s)\n\n\ndef"
    },
    {
        "number": 4456,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    p, q = map(int, stdin.split())\n    letters = sorted(str(range(1, n + 1)))\n    if ''.join(letters[p - 1:p + k - 1]) == ''.join(letters[q - 1:q + k - 1]):\n        return ''.join(letters[p - 1:p + k - 1])\n    return 'NO'\n"
    },
    {
        "number": 4456,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4456,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    returns a string s consisting of length n such that\n    s[p_i] <= s[p_{i+1}] and s[q_i] <= s[q_{i+1}]\n    '''\n    n, k = map(int, stdin.split())\n    p, q = [int(x) - 1 for x in stdin.split()]\n    s = [chr(x) for x in range(97, 97 + n)]\n    while k > 0 and (p!= 0 or q!= 0):\n        if p < q:\n            if p == 0:\n                break\n            s[p], s[p+1] = s[p+1], s[p]\n            p -= 1\n        elif p > q:\n            if q == 0:\n                break\n            s[q], s[q+1] = s[q+1], s[q]\n            q -= 1\n        else:\n            s[p], s[q] = s[q], s[p]\n            p -= 1\n            q -= 1\n        k -= 1\n    if p == q == 0:\n        return ''.join(s)\n    else:\n        return 'NO'\n"
    },
    {
        "number": 4456,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    p, q = map(str.split, stdin.split('\\n'))\n    p, q = [map(int, x) for x in [p, q]]\n    n, k = int(p[0]), int(p[1])\n    s = ''.join(sorted(set(stdin.strip().split('\\n')[1])))\n    if s.count('z') < k:\n        return 'NO'\n    return s[:n]\n"
    },
    {
        "number": 4456,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # return your result\n    return ''"
    },
    {
        "number": 4456,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    stdin = stdin.split(\"\\n\")\n    n, k = int(stdin[0].split()[0]), int(stdin[0].split()[1])\n    p, q = list(map(int, stdin[1].split())), list(map(int, stdin[2].split()))\n\n    s = [0] * n\n    for i in range(n):\n        s[i] = chr(ord('a') + i)\n    ch = [0] * 26\n\n    for i in range(n):\n        ch[ord(s[p[i] - 1]) - ord('a')] += 1\n        ch[ord(s[q[i] - 1]) - ord('a')] -= 1\n\n    res = []\n    for i in range(n):\n        if ch[ord(s[i]) - ord('a')] > 0:\n            res.append(s[i])\n        if len(res) == k:\n            return \"YES\\n\" + ''.join(res)\n\n    return \"NO\"\n"
    },
    {
        "number": 4456,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    k, n, p, q = stdin.split(' ')\n    k, n, p, q = int(k), int(n), [int(i) - 1 for i in p.split(' ')], [int(i) - 1 for i in q.split(' ')]\n\n    def inversions(i, j):\n        return sum(1 for k in range(i, j + 1) if p[i] > p[k]) + \\\n               sum(1 for k in range(i, j + 1) if p[j] > p[k])\n\n    def inversions2(i, j):\n        return sum(1 for k in range(i, j + 1) if q[i] > q[k]) + \\\n               sum(1 for k in range(i, j + 1) if q[j] > q[k])\n\n    if len(p)!= len(q):\n        return 'NO'\n    if inversions(0, len(p) - 1) > k or inversions2(0, len(q) - 1) > k:\n        return 'NO'\n\n    i, j = p[0], q[0]\n    ans = []\n    while i < len(p) and j < len(q):\n        if p[i] > q[j]:\n            ans.append(chr(j + 97))\n            j += 1\n        elif q[j] > p[i]:\n            ans.append(chr(i + 97))\n            i += 1\n        else:\n            ans.append(chr(j + 97))\n            j += 1\n            i += 1\n    while i < len(p):\n        ans.append(chr(p[i] + 97))\n        i += 1\n    while j < len(q):\n        ans.append(chr(q[j] + 97))\n        j += 1\n\n    return 'YES\\n' + ''.join(ans)\n\n\ndef"
    },
    {
        "number": 4456,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    https://app.codility.com/demo/results/training4CQPW4-4CF/\n    \"\"\"\n   ..."
    },
    {
        "number": 4457,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split(' ')))\n    shots = [0] * n\n    shots[0] = a[0]\n    for i in range(1, n):\n        shots[i] = a[i] + shots[i - 1]\n    min_shots = 1000000000\n    min_shots_i = -1\n    for i in range(n):\n        if min_shots > shots[i]:\n            min_shots = shots[i]\n            min_shots_i = i\n    return str(min_shots_i + 1) +'' + str(min_shots)\n"
    },
    {
        "number": 4457,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    cans = list(map(int, stdin.split()))\n    d = dict()\n    for i in range(1, cans[0] + 1):\n        d[i] = cans[i]\n    print(cans[0])\n    print(d)\n    i = 1\n    for k, v in d.items():\n        print(k, v)\n        i += 1"
    },
    {
        "number": 4457,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4457,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    s = sum(a)\n    d = {}\n    for i in range(n):\n        d[i] = a[i]\n    for i in range(n):\n        t = 0\n        x = i\n        while t < s:\n            t += d[x] * (x + 1)\n            x += 1\n            if x >= n:\n                x = 0\n    return ''\n"
    },
    {
        "number": 4457,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    t = 1\n    ans = []\n    for i in range(n-1):\n        if a[i] > a[i+1]:\n            t += a[i]*i\n            ans.append(i+1)\n    ans.append(n)\n    return str(t)+' '+' '.join(map(str, ans))\n\nprint(solution(input()))\n\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4457,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def get_seq(n):\n        a = list(map(int, stdin.split('\\n')[0].split()))\n        if n == 1:\n            return [1]\n        if n == 2:\n            return [1, 2]\n        if n == 3:\n            return [1, 2, 3]\n\n        min_shots = n * a[0]\n        min_seq = [1]\n        for i in range(1, n):\n            new_seq = [1, i + 1]\n            new_shots = a[i] * i + 1\n            if new_shots < min_shots:\n                min_shots = new_shots\n                min_seq = new_seq\n            for j in range(i):\n                new_seq = [j + 2, i + 1]\n                new_shots = a[i] * j + a[j] * (i - j) + 1\n                if new_shots < min_shots:\n                    min_shots = new_shots\n                    min_seq = new_seq\n        return min_seq\n\n    n = int(stdin.split('\\n')[0])\n    seq = get_seq(n)\n    stdout = '\\n'.join(str(i) for i in seq)\n    return stdout"
    },
    {
        "number": 4457,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return None"
    },
    {
        "number": 4457,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    cans = list(map(int, stdin.readline().strip().split(' ')))\n    cans.sort()\n    min_shots = cans[-1] * n + 1\n    for x in range(n):\n        shots = cans[x] * (x + 1) + 1\n        if min_shots > shots:\n            min_shots = shots\n    print(min_shots)\n    return ''"
    },
    {
        "number": 4457,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    stdin = stdin.split()\n    n = int(stdin[0])\n    cans = list(map(int, stdin[1:]))\n\n    cans.sort()\n    cans.reverse()\n    shots = cans[0] * n\n    i = 1\n    while i < n:\n        shots += cans[i] * i\n        i += 1\n    return shots\n\ndef"
    },
    {
        "number": 4457,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    cans = list(map(int, stdin.split()[1:]))\n    cans.sort()\n    return str(sum(i * n for i in cans))\n"
    },
    {
        "number": 4458,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4458,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n  lines = stdin.splitlines()\n  n = int(lines[0])\n  p = list(map(int, lines[1].split()))\n  p = [0] + p\n  \n  ans = 0\n  for i in range(1, n+1):\n    for j in range(1, i):\n      if p[i] > p[j]:\n        ans += 1\n  return ans"
    },
    {
        "number": 4458,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\"\"\"\n\ndef"
    },
    {
        "number": 4458,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    solution:\n    The solution is quite straightforward. In the example we can see that i=3 does not satisfy the condition.\n    So, we search for the smallest i that does.\n    '''\n    N = int(stdin.readline())\n    for i in range(N):\n        P = [int(i) for i in stdin.readline().split(' ')]\n        for j in range(i):\n            if P[i] < P[j]:\n                break\n        else:\n            continue\n        break\n    else:\n        i = N\n    return str(i)\n"
    },
    {
        "number": 4458,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4458,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    p = [int(i) for i in stdin.split()[1:]]\n    d = dict()\n    for i in range(1, n+1):\n        d[i] = p[i-1]\n    nums = list(range(1, n+1))\n    count = 0\n    for i in range(1, n+1):\n        for j in range(1, i+1):\n            if d[i] <= d[j]:\n                count += 1\n    return str(count)"
    },
    {
        "number": 4458,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def find_all_pairs(arr: list) -> list:\n        \"\"\"Return a list of all pairs of indexes of arr that have the same value.\n\n        >>> find_all_pairs(['a', 'b', 'a', 'c', 'a', 'b', 'd'])\n        [(0, 2), (4, 6)]\n\n        >>> find_all_pairs(['a', 'a', 'a', 'a'])\n        [(0, 1), (1, 2), (2, 3)]\n        \"\"\"\n        lst = []\n        for i in range(len(arr)):\n            for j in range(i + 1, len(arr)):\n                if arr[i] == arr[j]:\n                    lst.append((i, j))\n        return lst\n\n    def max_min(arr: list) -> int:\n        \"\"\"Find the largest index with the lowest index with the same value.\n\n        >>> max_min(['a', 'b', 'a', 'c', 'a', 'b', 'd'])\n        6\n        \"\"\"\n        max_min_value = 0\n        for i in range(len(arr)):\n            if arr[i] == arr[max_min_value]:\n                max_min_value = i\n            elif arr[i] < arr[max_min_value]:\n                max_min_value = i\n        return max_min_value\n\n    def find_all_max_min_pair(arr: list) -> list:\n        \"\"\"Return a list of all pairs of indexes of arr that have the same value and the largest index with the\n        lowest index with the same value.\n\n        >>> find_all_max_min_pair(['a', 'b', 'a', 'c', 'a', 'b', 'd'])\n        [(2, 3), (4, 6)]\n\n        >>> find_all_max_min_pair(['a', 'a', 'a', 'a'])\n        [(1, 2), (2, 3)]\n        \"\"\"\n        lst = []\n        for i in range(len(arr)):\n            for j in range(i + 1, len(arr)):\n                if arr[i] == arr[j]:\n                    if j > max_min(arr):\n                        lst.append((j, i))\n                    elif i < max_min(arr):\n                        lst.append((i, j))\n        return lst\n\n    N = int(stdin.readline().strip())\n    arr = list(map(int, stdin.readline().strip().split(' ')))\n    lst = find_all_pairs(arr)\n    lst2 = find_all_max_min_pair(arr)\n    num = len(lst) - len(lst2)\n    print(num)\n"
    },
    {
        "number": 4458,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    arr = [int(i) for i in stdin.readline().strip().split(' ')]\n    count = 0\n    for i in range(1, n):\n        j = i - 1\n        while j >= 0 and arr[j] > arr[i]:\n            count += 1\n            j -= 1\n    return str(count)"
    },
    {
        "number": 4458,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4458,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin)\n\"\"\""
    },
    {
        "number": 4459,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4459,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"You are given a sequence of positive integers of length N, a = (a_1, a_2,..., a_N).\nYour objective is to remove some of the elements in a so that a will be a good sequence.\nHere, an sequence b is a good sequence when the following condition holds true:\n - For each element x in b, the value x occurs exactly x times in b.\nFor example, (3, 3, 3), (4, 2, 4, 1, 4, 2, 4) and () (an empty sequence) are good sequences, while (3, 3, 3, 3) and (2, 4, 1, 4, 2) are not.\nFind the minimum number of elements that needs to be removed so that a will be a good sequence.\n\n-----Constraints-----\n - 1 \\leq N \\leq 10^5\n - a_i is an integer.\n - 1 \\leq a_i \\leq 10^9\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\na_1 a_2... a_N\n\n-----Output-----\nPrint the minimum number of elements that needs to be removed so that a will be a good sequence.\n\n-----Sample Input-----\n4\n3 3 3 3\n\n-----Sample Output-----\n1\n\"\"\"\n    pass\n\n\ndef"
    },
    {
        "number": 4459,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    pass\n"
    },
    {
        "number": 4459,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return string.\n\n    >>> solution('''4\n   ... 3 3 3 3''')\n    '1'\n    >>> solution('''5\n   ... 2 1 1 2 2''')\n    '2'\n    \"\"\"\n    return 0\n"
    },
    {
        "number": 4459,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 4459,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    _, *data = stdin.split('\\n')\n    data = map(int, data)\n    counter = collections.Counter(data)\n    ans = 0\n    for key, value in counter.items():\n        ans += value - key\n    return str(ans)\n\nprint(solution(input))\n"
    },
    {
        "number": 4459,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport sys\n\ndef"
    },
    {
        "number": 4459,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the minimum number of elements in a sequence to make a good sequence.\"\"\"\n    N = int(stdin)\n    array = list(map(int, stdin.split()))\n    uniques = list(set(array))\n    for i in uniques:\n        if array.count(i) > i:\n            array.remove(i)\n    return N - len(array)\n"
    },
    {
        "number": 4459,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = sorted(stdin.readline().split())\n    count = 0\n    for i in arr:\n        if arr.count(i)!= int(i):\n            count += 1\n    return count"
    },
    {
        "number": 4459,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return '1'"
    },
    {
        "number": 4460,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x_1, x_2, x_3, x_4, x_5 = (int(x) for x in stdin.split(' '))\n    i = 0\n    while x_1!= 0:\n        i += 1\n        if i == 1:\n            x_1 = 0\n            break\n        x_1 = x_2\n        x_2 = x_3\n        x_3 = x_4\n        x_4 = x_5\n        x_5 = i\n    return str(i)\n"
    },
    {
        "number": 4460,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4460,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the variable with 0 value.\"\"\"\n    variables = stdin.split()\n    for i in range(5):\n        if int(variables[i]) == 0:\n            return i + 1\n"
    },
    {
        "number": 4460,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x = [int(stdin.split()[i]) for i in range(5)]\n    for i in range(len(x)):\n        if x[i] == 0:\n            return str(i + 1)\n    return \"impossible\"\n"
    },
    {
        "number": 4460,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"0 2 3 4 5\")\n    1\n    >>> solution(\"1 2 3 4 5\")\n    0\n    >>> solution(\"4 2 3 1 5\")\n    0\n    \"\"\"\n    variables = [int(x) for x in stdin.strip().split()]\n    for i, x in enumerate(variables):\n        if x == 0:\n            return str(i + 1)\n    raise ValueError(\"no zero in variables\")\n"
    },
    {
        "number": 4460,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    vars_ = stdin.split()\n    return''.join([str(i) for i in range(1, len(vars_) + 1) if vars_[i - 1] == '0'])\n    \n'''\ndef"
    },
    {
        "number": 4460,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    var = [int(i) for i in stdin.split()]\n    return print(var.index(0)+1)\n\n\nprint(solution(\"0 2 3 4 5\"))\n"
    },
    {
        "number": 4460,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"0 2 3 4 5\")\n    1\n    \"\"\"\n    values = stdin.split(\" \")\n    for i in range(len(values)):\n        if values[i] == '0':\n            return str(i + 1)\n"
    },
    {
        "number": 4460,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x_1, x_2, x_3, x_4, x_5 = [int(x) for x in stdin.split()]\n    \n    if x_1 == 0:\n        print(1)\n    elif x_2 == 0:\n        print(2)\n    elif x_3 == 0:\n        print(3)\n    elif x_4 == 0:\n        print(4)\n    elif x_5 == 0:\n        print(5)\n    return ''"
    },
    {
        "number": 4460,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    variable = stdin.split()\n    return variable[1]\n"
    },
    {
        "number": 4461,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4461,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(a * b - (a + b - 1))\n"
    },
    {
        "number": 4461,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4461,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    H, W = [int(x) for x in stdin.split(' ')]\n    if H > W:\n        if H % W == 0:\n            return '0'\n        else:\n            return str(H // W + 1)\n    else:\n        if W % H == 0:\n            return '0'\n        else:\n            return str(W // H + 1)\n"
    },
    {
        "number": 4461,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n  H, W = stdin.split()\n  H, W = int(H), int(W)\n\n  return str(0)\n\n------\ndef"
    },
    {
        "number": 4461,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin.split()[1]) + int(stdin.split()[2]))\n"
    },
    {
        "number": 4461,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    h, w = list(map(int, stdin.split()))\n    return str(0)\n\"\"\""
    },
    {
        "number": 4461,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    h, w = map(int, stdin.split())\n    return str(max(h*w-w, w-h))\n"
    },
    {
        "number": 4461,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n  n, m = [int(i) for i in stdin.split(' ')]\n  count_min = count_max = 0\n  for i in range(n):\n    for j in range(m):\n      count_max += 1\n      if (i == 0 or i == n - 1) or (j == 0 or j == m - 1):\n        count_min += 1\n  print(count_max - count_min)"
    },
    {
        "number": 4461,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 4462,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, *nums = map(int, stdin.split())\n    assert len(nums) == n\n\n    # Initial solution\n    perm = list(range(n))\n    perm.reverse()\n\n    def swap(i, j):\n        nonlocal perm\n        perm[i], perm[j] = perm[j], perm[i]\n\n    # Find a swap that makes the product of a[i] and a[i + 1] a multiple of 4\n    def find_swap():\n        for i in range(n - 1):\n            if nums[i] * nums[i + 1] % 4 == 0:\n                return i\n\n    # Try all possible swaps\n    while True:\n        swap_i = find_swap()\n        if swap_i is None:\n            break\n\n        swap(swap_i, swap_i + 1)\n    return \"Yes\" if nums == perm else \"No\""
    },
    {
        "number": 4462,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, *a = map(int, stdin.split())\n    if N < 2 or any(a_i % 4!= 0 for a_i in a):\n        return \"No\"\n\n    last_four = a[0] * a[1]\n    for a_i in a[2:]:\n        last_four = a_i * last_four // 4\n        if last_four % 4!= 0:\n            return \"No\"\n    return \"Yes\"\n"
    },
    {
        "number": 4462,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    length, *args = stdin.split('\\n')\n    args = list(map(int, args))\n    if len(args) < 2:\n        raise Exception(\"Not enough data\")\n    if len(args) > 1000:\n        raise Exception(\"Too much data\")\n    if args[0] < 2:\n        raise Exception(\"Number of snukes cannot be less than 2\")\n    if args[0] > 10 ** 5:\n        raise Exception(\"Number of snukes cannot be more than 10 ** 5\")\n    if any(x < 1 or x > 10 ** 9 for x in args):\n        raise Exception(\"Argument must be positive integer\")\n    if args[-1] % 4!= 0:\n        raise Exception(\"Last argument must be multiple of 4\")\n    return \"Yes\" if solve(len(args), args) else \"No\"\n\n\ndef"
    },
    {
        "number": 4462,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''\n"
    },
    {
        "number": 4462,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3\n   ... 1 10 100''')\n    'Yes'\n    >>> solution('''3\n   ... 1 10 100\n   ... 2 12 200\n   ... 3 20 300''')\n    'No'\n    \"\"\"\n    n, *_ = [line.strip() for line in stdin.split('\\n')]\n    n = int(n)\n    a = [int(x) for x in _]\n\n    # Check each 2-sized sequence of numbers\n    for i in range(0, n - 1):\n        a1, a2 = a[i], a[i + 1]\n        if a1 * a2 % 4!= 0:\n            return 'No'\n    return 'Yes'\n"
    },
    {
        "number": 4462,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''Solution to the problem'''\n    sequence = list(map(int, stdin.split('\\n')[0].split()))\n    passed = False\n    for i in range(len(sequence)-1):\n        if (sequence[i]*sequence[i+1]) % 4 == 0:\n            passed = True\n        else:\n            passed = False\n            break\n    return 'Yes' if passed else 'No'"
    },
    {
        "number": 4462,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    nums = list(map(int, stdin.split()))\n    N = nums[0]\n    nums = nums[1:]\n    if N == 1:\n        if nums[0] % 4 == 0:\n            return \"Yes\"\n        return \"No\"\n    elif N == 2:\n        if nums[0] == 1 and nums[1] == 10:\n            return \"Yes\"\n        return \"No\"\n    if nums[0] == 1 and nums[1] == 10:\n        return \"No\"\n    if nums[-1] % 4 == 0:\n        for i in range(1, N-1):\n            if nums[i] * nums[i+1] % 4!= 0:\n                return \"No\"\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4462,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    print(\"Yes\" if stdin[1] % 4 == 0 else \"No\")\n\nsolution(input().split())\n"
    },
    {
        "number": 4462,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, *a = map(int, stdin.split())\n    if 2 * max(a) % 4!= 0:\n        return 'No'\n    if 2 * min(a) % 4!= 0:\n        return 'No'\n    a = sorted(a, reverse=True)\n    if a[0] % 4 == 0:\n        return 'Yes'\n    elif a[1] % 4 == 0:\n        return 'Yes'\n    else:\n        return 'No'\n"
    },
    {
        "number": 4462,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, *a = map(int, stdin.split())\n    if any((a[i - 1] * a[i] % 4!= 0) for i in range(1, N)):\n        return 'No'\n    return 'Yes'\n\n\ndef"
    },
    {
        "number": 4463,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[:int(stdin.split(\"\\n\")[0])]\n    t = stdin[int(stdin.split(\"\\n\")[0]) + 1:]\n    if len(s) < len(t):\n        return 'No'\n    for i in range(len(s) - len(t)):\n        if s[:i] + t < s[:i + 1] + t:\n            return 'Yes'\n    return 'No'\n"
    },
    {
        "number": 4463,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split('\\n')[0]\n    t = stdin.split('\\n')[1]\n\n    if s < t:\n        return 'Yes'\n    else:\n        return 'No'"
    },
    {
        "number": 4463,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\ndef"
    },
    {
        "number": 4463,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    t = stdin.strip()\n\n    def is_sorted(s: str, t: str) -> bool:\n        # s is shorter than t\n        if len(s) < len(t):\n            return False\n\n        # s is not sorted\n        if s < t:\n            return False\n\n        # t is sorted\n        return True\n\n    if is_sorted(s, t):\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4463,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"yx\\nyx\")\n    Yes\n    >>> solution(\"yx\\naxy\")\n    Yes\n    >>> solution(\"atcoder\\natlas\")\n    No\n    \"\"\"\n\n    s, t = stdin.split(\"\\n\")\n    s_list = [s[i] for i in range(len(s))]\n    t_list = [t[i] for i in range(len(t))]\n\n    s_list_sorted = sorted(s_list)\n    t_list_sorted = sorted(t_list)\n\n    s_list_sorted_str = \"\".join(s_list_sorted)\n    t_list_sorted_str = \"\".join(t_list_sorted)\n\n    if s_list_sorted_str < t_list_sorted_str:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4463,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split('\\n')[0]\n    t = stdin.split('\\n')[1]\n    s_arr = [s[i:i + 2] for i in range(0, len(s), 2)]\n    t_arr = [t[i:i + 2] for i in range(0, len(t), 2)]\n    s_arr.sort()\n    t_arr.sort()\n    s_set = set(s_arr)\n    t_set = set(t_arr)\n    if s_set < t_set:\n        return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 4463,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split('\\n')\n    return 'Yes' if s < t else 'No'"
    },
    {
        "number": 4463,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split('\\n')\n    return 'Yes' if lex_order(s, t) else 'No'\n\ndef"
    },
    {
        "number": 4463,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    t = stdin[1]\n    if len(s) > len(t):\n        print('No')\n    else:\n        sorted_s = ''.join(sorted(s))\n        sorted_t = ''.join(sorted(t))\n        if sorted_s < sorted_t:\n            print('Yes')\n        else:\n            print('No')\n"
    },
    {
        "number": 4463,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split('\\n')\n    return 'Yes' if s < t else 'No'"
    },
    {
        "number": 4464,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = [int(i) for i in stdin.split()]\n\n    if C % B == 0:\n        return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 4464,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = stdin.split()\n    A = int(A)\n    B = int(B)\n    C = int(C)\n    if B % A == 0:\n        result = 'YES'\n    else:\n        result = 'NO'\n    print(result)\n    return result\n"
    },
    {
        "number": 4464,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = [int(s) for s in stdin.split(\" \")]\n    if A * (B - 1) < C % B:\n        return \"YES\"\n    else:\n        return \"NO\"\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4464,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = [int(x) for x in stdin.split()]\n    n = int(stdin)\n    return 'YES' if A * n % B == C % B else 'NO'"
    },
    {
        "number": 4464,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    return \"YES\" if C % B in {A, B - A} else \"NO\"\n"
    },
    {
        "number": 4464,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = [int(x) for x in stdin.split()]\n    n = int(input())\n    for _ in range(n):\n        x = int(input())\n        if not x % A or B % x:\n            return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 4464,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split(' '))\n    return 'YES' if B > 0 and B * max(A, C) % abs(C) == 0 else 'NO'"
    },
    {
        "number": 4464,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(s) for s in stdin.split()]\n    if a == 0 or (b - c) % a!= 0:\n        return 'NO'\n    if (c - b) % a == 0:\n        return 'YES'\n    return 'NO'"
    },
    {
        "number": 4464,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    return 'YES' if c % b == (c // b) * a else 'NO'\n"
    },
    {
        "number": 4464,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = stdin.split()\n    A, B, C = int(A), int(B), int(C)\n    if C % B == 0:\n        return 'YES'\n    return 'NO'\n\nprint(solution(input()))"
    },
    {
        "number": 4465,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = [int(n) for n in stdin.split(' ')]\n    return str(A ** 2 - B)"
    },
    {
        "number": 4465,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x, y = [int(x) for x in stdin.split(' ')]\n    if x == 1:\n        return y\n    if y == 1:\n        return x\n\n    return x + y - 1"
    },
    {
        "number": 4465,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\ndef"
    },
    {
        "number": 4465,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find the area of a yard without roads.\"\"\"\n    # Get inputs\n    a, b = map(int, stdin.split())\n    # Calculate area and print\n    print(a * b)\n"
    },
    {
        "number": 4465,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A = list(map(int, stdin.split(' ')))\n    A.sort()\n    return str(int(A[1] - A[0]))\n"
    },
    {
        "number": 4465,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.readlines())\n    return str(A * B)"
    },
    {
        "number": 4465,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split('\\n')[0].split(' '))\n    return str(int((A * B) - ((A + B) * (A - 1)) / 2))\n\n\ndef"
    },
    {
        "number": 4465,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    length, width = map(int, stdin.split())\n    area = length * width - 2 * (length + width - 2)\n    return area\n"
    },
    {
        "number": 4465,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B = [int(s) for s in stdin.split(' ')]\n    return str(A * B - (A + B))\n"
    },
    {
        "number": 4465,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    a, b = map(int, stdin.split())\n    return str(a * b // gcd(a, b))\n"
    },
    {
        "number": 4466,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nimport math\n\nx, y, z = [int(num) for num in stdin.readline().split()]\n\ntotal_people = 0\n\npeople_left = 0\npeople_right = 0\n\nfor i in range(0, x, y + 2 * z):\n    people_right += 1\n\nfor i in range(x, 0, -y - 2 * z):\n    people_left += 1\n\nprint(max(people_left, people_right))"
    },
    {
        "number": 4466,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Solution to this problem.\n    '''\n    n, m, g = [int(i) for i in stdin.split(' ')]\n    n, m, g = [max(n,m,g)]*3\n    return str(n)\n"
    },
    {
        "number": 4466,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    X, Y, Z = map(int, stdin.split())\n    return str(X // (Y+2*Z) + 1)\n    \n"
    },
    {
        "number": 4466,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    X, Y, Z = map(int, stdin.split())\n    return str(max(0, (X - (Y + 2 * Z)) // (Y + Z)))\n"
    },
    {
        "number": 4466,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    X, Y, Z = [int(i) for i in stdin.split()]\n    return str(X // (Y+2*Z))"
    },
    {
        "number": 4466,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def find_seat_size(x: int, y: int, z: int) -> int:\n        max_seat_size = x - z\n        # if there is not enough room, just return the largest seat size\n        if max_seat_size <= 0:\n            return x\n        # calculate the total seats needed\n        return math.floor((x - max_seat_size) / (y + 2 * z)) + 1\n\n    def solve(x: int, y: int, z: int) -> int:\n        seats = 0\n        # the seats needed are calculated in increments of the seat size\n        seat_size = 1\n        while seat_size <= x:\n            seats += find_seat_size(x, y, z)\n            # if there is not enough room, go to the next seat size\n            if seats > x:\n                break\n            seat_size += 1\n        return seats\n\n    return str(solve(int(stdin.readline()), int(stdin.readline()), int(stdin.readline())))\n\nprint(solution(stdin.readline()))\n"
    },
    {
        "number": 4466,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    x, y, z = map(int, stdin.split())\n    cnt = 0\n    for i in range(y + 2 * z):\n        if x - y - 2 * z <= i and i <= x + z:\n            cnt += 1\n    return str(cnt)\n"
    },
    {
        "number": 4466,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Calculate and return the answer\"\"\"\n    # Extract parameters from input\n    length, gap, seat_width = [int(n) for n in stdin.split()]\n\n    # Calculate the maximum number of people that can sit\n    max_seats = (length - 2 * gap) // seat_width\n\n    # Check if the maximum number of people can be seated\n    if max_seats > 0:\n        return str(max_seats)\n    else:\n        return str(0)\n"
    },
    {
        "number": 4466,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 4466,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = map(int, stdin.split())\n    return str(max(0, x - 2 * z))"
    },
    {
        "number": 4467,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    # (a_i, b_i) represents the coordinate of red point i\n    # (c_i, d_i) represents the coordinate of blue point i\n    red_coords = []\n    blue_coords = []\n    for _ in range(n):\n        a, b = map(int, stdin.readline().split())\n        red_coords.append((a, b))\n    for _ in range(n):\n        c, d = map(int, stdin.readline().split())\n        blue_coords.append((c, d))\n\n    red_coords.sort()\n    blue_coords.sort()\n    # (a_i, b_i) < (c_i, d_i)\n    i = 0\n    j = 0\n    count = 0\n    while i < len(red_coords) and j < len(blue_coords):\n        if red_coords[i] < blue_coords[j]:\n            count += 1\n            i += 1\n        else:\n            j += 1\n    return count\n"
    },
    {
        "number": 4467,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    lst = [stdin.readline().strip().split(' ') for i in range(N)]\n\n    lst_r = [int(i[0]) for i in lst]\n    lst_b = [int(i[1]) for i in lst]\n\n    lst_r.sort()\n    lst_b.sort()\n\n    count = 0\n    for i in range(N):\n        if lst_r[i] > lst_b[i]:\n            count += 1\n\n    return str(count)\n"
    },
    {
        "number": 4467,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    import sys\n    n = int(sys.stdin.readline().strip())\n    red = [tuple(map(int, line.split())) for line in sys.stdin if line.startswith('2')]\n    blue = [tuple(map(int, line.split())) for line in sys.stdin if line.startswith('3')]\n    pairs = 0\n    for r in red:\n        for b in blue:\n            if r[0] < b[0] and r[1] < b[1]:\n                pairs += 1\n    return str(pairs)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4467,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return \"0\"\n"
    },
    {
        "number": 4467,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 4467,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\ndef"
    },
    {
        "number": 4467,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def input():\n        return stdin.splitlines()\n\n    def output(print):\n        print(''.join(print))\n\n    N = int(input()[0])\n    points = {tuple(map(int, line.split())) for line in input()[1:]}\n    pairs = 0\n    for point1 in points:\n        for point2 in points:\n            if point1[0] < point2[0] and point1[1] < point2[1]:\n                pairs += 1\n    output(str(pairs))\n"
    },
    {
        "number": 4467,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.split()[0]\n    a = [stdin.split('\\n')[i].split(' ')[0] for i in range(1, n+1)]\n    b = [stdin.split('\\n')[i].split(' ')[1] for i in range(1, n+1)]\n    c = [stdin.split('\\n')[i].split(' ')[0] for i in range(n+1, 2*n+1)]\n    d = [stdin.split('\\n')[i].split(' ')[1] for i in range(n+1, 2*n+1)]\n    num_pairs = 0\n    for i in range(n):\n        if int(a[i]) <= int(c[i]) and int(b[i]) <= int(d[i]):\n            num_pairs += 1\n    return num_pairs\n"
    },
    {
        "number": 4467,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = [int(x) for x in stdin.split('\\n')]\n    return str(max(sum([[1, 0][a < c] for a, b in zip(stdin[0::2], stdin[1::2]) for c, d in zip(stdin[0::2], stdin[1::2]) if a < c < d]),\n                   sum([[0, 1][a > c] for a, b in zip(stdin[0::2], stdin[1::2]) for c, d in zip(stdin[0::2], stdin[1::2]) if a < c < d])))\n"
    },
    {
        "number": 4467,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4468,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    # your code here\n    return \"\""
    },
    {
        "number": 4468,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, t = (int(x) for x in stdin.split())\n    start = list(map(int, stdin.split()[:n]))\n\n    tot = 0\n    i = 1\n    while True:\n        if start[0] + i * t >= start[i]:\n            tot += start[0] + i * t\n            break\n        tot += start[0] + i * t\n        i += 1\n\n    return str(tot)\n"
    },
    {
        "number": 4468,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4468,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, t = [int(x) for x in stdin.split(' ')]\n    t_array = [int(x) for x in stdin.split(' ')]\n    t_array = sorted(t_array)\n    current_t = 0\n    time_left = 0\n    for i in range(n):\n        if current_t + t_array[i] < t:\n            current_t += t_array[i]\n            time_left += t_array[i]\n        else:\n            break\n    return str(time_left + t - current_t)\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4468,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Implement a function that takes two integers and returns the\n    greater.\n    :param stdin: str\n    :return: str\n    \"\"\"\n    return str(int(stdin.split(' ')[1]) + int(stdin.split(' ')[0]))\n\ndef"
    },
    {
        "number": 4468,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    T, t = [int(x) for x in stdin.split('\\n')[:2]]\n    t = [int(x) for x in stdin.split('\\n')[2:]]\n    total = T\n    for x in t:\n        total += x\n    return str(total)\n"
    },
    {
        "number": 4468,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin[0])\n    t = [int(i) for i in stdin[1].split()]\n    t.sort()\n    sum = 0\n    for i in range(0, x-1):\n        sum += t[i]\n    return sum + t[len(t)-1] + 1\n\nprint(solution(input()))\n"
    },
    {
        "number": 4468,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the solution.\"\"\"\n    N, T = map(int, stdin.split())\n    \n    return f'{(T + N - 1) * (N - 1) // 2}\\n'\n"
    },
    {
        "number": 4468,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, T = map(int, stdin.split())\n    pushed = set()\n    for t in map(int, stdin.split()):\n        pushed.add(t)\n    print(N * T)\n    return pushed\n\nprint(solution(input()))\n"
    },
    {
        "number": 4468,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time Complexity: O(N)\n    Space Complexity: O(1)\n    \"\"\"\n    N, T = [int(x) for x in stdin.split()]\n    water = 0\n    switch = False\n    for _ in range(N):\n        t = int(stdin.readline())\n        if not switch:\n            if t > water:\n                water = t\n            else:\n                water += T\n        else:\n            water += T\n            switch = False\n        if water >= T:\n            water = T\n            switch = True\n    return water\n"
    },
    {
        "number": 4469,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    ans = []\n    while True:\n        q = int(stdin.readline().rstrip())\n        if q == 0:\n            return \" \".join(map(str, ans))\n        if q == 1:\n            l, r = stdin.readline().rstrip().split(\" \")\n            ans.insert(int(l), int(r))\n        else:\n            l, r = stdin.readline().rstrip().split(\" \")\n            ans.remove(int(l))\n            ans.insert(int(r), int(l))"
    },
    {
        "number": 4469,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return stdin\n"
    },
    {
        "number": 4469,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4469,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return \"\"\n\n\ndef"
    },
    {
        "number": 4469,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution to the task.\"\"\"\n    stdin = stdin.splitlines()\n    n = int(stdin[0])\n    ans = \"\"\n    shelves = [0]\n    for i in range(1, n+1):\n        shelves.append(int(stdin[i]))\n    for i in range(n, 2*n+1):\n        ans += str(min(shelves[i], shelves[i-n]))\n        ans += \" \"\n        shelves[i-n] -= shelves[i]\n        shelves[i] = 0\n    return ans\n\n\ndef"
    },
    {
        "number": 4469,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    sys.setrecursionlimit(3000)\n    n = int(stdin.readline())\n    print(n)\n    a = [int(i) for i in stdin.readline().split(' ')]\n    print(a)\n    m = []\n    for i in range(n):\n        m.append([int(j) for j in stdin.readline().split(' ')])\n    print(m)\n    return m\n\n\ndef"
    },
    {
        "number": 4469,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Returns the answer to the input.\n    \"\"\"\n    inp = stdin.split(\"\\n\")\n    if len(inp[0]) == 0:\n        return \"\"\n    q = int(inp[0])\n    b = inp[1:]\n    result = list()\n    for i in range(q):\n        if b[i][0] == \"L\":\n            temp = list(result)\n            result = list()\n            for i in range(len(temp)):\n                result.append(temp[i])\n            result.append(int(b[i][1:]))\n        elif b[i][0] == \"R\":\n            temp = list(result)\n            result = list()\n            for i in range(len(temp)):\n                result.append(temp[-(i + 1)])\n            result.append(int(b[i][1:]))\n        else:\n            temp = list(result)\n            result = list()\n            for i in range(len(temp)):\n                if temp[i] == int(b[i][1:]):\n                    result.append(temp[i])\n                else:\n                    result.append(temp[i - 1])\n    return result[0]\n"
    },
    {
        "number": 4469,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4\\n1\\nR 3\\n? 2\\nL 4\\n? 1\\nL 5\\n? 1\")\n    '1'\n    >>> solution(\"6\\nL 1\\nR 2\\nR 3\\nL 4\\nL 5\\n? 2\")\n    '0'\n    >>> solution(\"7\\nL 1\\nL 2\\nR 3\\n? 1\\nR 4\\nR 5\\n? 1\\nL 6\\nL 7\\n? 3\\nL 8\\nL 9\\nR 10\\n? 3\")\n    '2'\n    >>> solution(\"10\\nL 100\\nR 100000\\nR 123\\nL 101\\n? 123\\nL 10\\nR 115\\n? 100\\nR 110\\n? 115\\nL 10\\nR 11\\n? 100\\nL 10\\nR 11\\n? 110\")\n    '0'\n    >>> solution(\"5\\nR 1\\nL 2\\nR 3\\nL 4\\nR 5\\n? 2\\nR 6\\n? 1\\nL 7\\nL 8\\n? 1\\nR 9\\n? 1\\nR 10\\n? 1\\nR 11\\n? 1\")\n    '1'\n    \"\"\"\n    return None"
    },
    {
        "number": 4469,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # get number of queries\n    number_of_queries = int(stdin.readline().strip())\n\n    shelves = [[1]]\n    for i in range(number_of_queries):\n        query = stdin.readline().strip()\n        if query[0] == 'L':\n            shelves[-1].append(int(query[2:]))\n        elif query[0] == 'R':\n            shelves.append([int(query[2:])])\n        else:\n            print(min(shelves[-1][int(query[2:]) - 1], shelves[-1][-1]))\n"
    },
    {
        "number": 4469,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"8\\nL 1\\nR 2\\nR 3\\n? 2\\nL 4\\n? 1\\nL 5\\n? 1\\n\")\n    '1'\n    \"\"\"\n   ...\n"
    },
    {
        "number": 4470,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    moves = 0\n    while True:\n        moves += 1\n        try:\n            n = stdin.split(\"\\n\")[0]\n        except IndexError:\n            break\n        n = int(n)\n        if n == 1:\n            break\n        n = n / 2 if n % 2 == 0 else n / 3 if n % 3 == 0 else n / 4 if n % 5 == 0 else -1\n        stdin = stdin.replace(str(n), str(int(n)))\n    return str(moves)\n"
    },
    {
        "number": 4470,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # get number of queries\n    q = int(stdin)\n    for _ in range(q):\n        n = int(stdin)\n        if n % 2 == 0:\n            print(0)\n        elif n % 3 == 0:\n            print(1)\n        elif n % 5 == 0:\n            print(2)\n        else:\n            print(-1)"
    },
    {
        "number": 4470,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.readline().strip().split()\n    q = int(line[0])\n\n    result = []\n    for _ in range(q):\n        line = stdin.readline().strip().split()\n        n = int(line[0])\n        result.append(minimum_moves_count(n))\n\n    return '\\n'.join(str(x) for x in result)\n\n\ndef"
    },
    {
        "number": 4470,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin)\n    result = []\n    for i in range(q):\n        n = int(stdin)\n        if n % 2 == 0 and n % 3 == 0 and n % 5 == 0:\n            result.append(-1)\n        elif n % 2 == 0:\n            result.append(n // 2)\n        elif n % 3 == 0:\n            result.append(2 * n // 3)\n        elif n % 5 == 0:\n            result.append(4 * n // 5)\n        else:\n            result.append(-1)\n    return '\\n'.join([str(i) for i in result])\n"
    },
    {
        "number": 4470,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find the minimum number of moves required to obtain one from any integer number.\n    \n    Args:\n        stdin (str): The input.\n\n    Returns:\n        str: The answer.\n    \"\"\"\n    return \"Not Implemented\"\n    # raise NotImplementedError(\"TODO: implement solution\")\n\n\ndef"
    },
    {
        "number": 4470,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    q = int(lines[0])\n\n    result = []\n    for i in range(q):\n        n = int(lines[i + 1])\n        while n > 1:\n            if n % 2 == 0:\n                n = n // 2\n            elif n % 3 == 0:\n                n = n // 3\n            elif n % 5 == 0:\n                n = n // 5\n            else:\n                result.append(n)\n                break\n        if n > 1:\n            result.append(-1)\n        else:\n            result.append(len(result))\n    return '\\n'.join([str(x) for x in result])\n"
    },
    {
        "number": 4470,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin)\n    result = []\n    for _ in range(q):\n        n = int(input())\n        if n % 2 == 0 and n % 3 == 0 and n % 5 == 0:\n            result.append(n - 1)\n        elif n % 2 == 0:\n            result.append(n // 2)\n        elif n % 3 == 0:\n            result.append(2 * n // 3)\n        elif n % 5 == 0:\n            result.append(4 * n // 5)\n        else:\n            result.append(-1)\n    return '\\n'.join(map(str, result))\n"
    },
    {
        "number": 4470,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    q = int(lines[0])\n    a = 0\n    for i in range(1, q + 1):\n        a += check(int(lines[i]))\n    return a\n\n\ndef"
    },
    {
        "number": 4470,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4470,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    q = int(stdin)\n    arr = []\n    for i in range(q):\n        n = int(stdin)\n        if n == 1:\n            arr.append(0)\n        elif n % 2 == 0:\n            arr.append(0 + int(n / 2))\n        elif n % 3 == 0:\n            arr.append(0 + int(n / 3))\n        elif n % 5 == 0:\n            arr.append(0 + int(n / 5))\n        elif n % 2 == 0 and n % 3 == 0:\n            arr.append(0 + int(n / 2) + int(n / 3))\n        elif n % 2 == 0 and n % 5 == 0:\n            arr.append(0 + int(n / 2) + int(n / 5))\n        elif n % 3 == 0 and n % 5 == 0:\n            arr.append(0 + int(n / 3) + int(n / 5))\n        elif n % 2 == 0 and n % 3 == 0 and n % 5 == 0:\n            arr.append(0 + int(n / 2) + int(n / 3) + int(n / 5))\n        else:\n            arr.append(-1)\n    return arr\nprint(*solution(input()))\n\n\n\n-----Explanation-----\n\nThere are 7 queries.\n\nquery 1: 1 is divisible by 2, 1 is divisible by 3, 1 is divisible by 5, 1 is divisible by 2 and 3, 1 is divisible by 2 and 5, 1 is divisible by 3 and 5, and 1 is divisible by 2, 3 and 5.\n\nquery 2: 2 is divisible by 2, 2 is divisible by 3, 2 is divisible by 5, 2 is divisible by 2 and 3, 2 is divisible by 2 and 5, 2 is divisible by 3 and 5, and 2 is divisible by 2, 3 and 5.\n\nquery 3: 3 is divisible by 3, 3 is divisible by 5, 3 is divisible by 2 and 5, and 3 is divisible by 3 and 5.\n\nquery 4: 4 is divisible by 2, 4 is divisible by 3, 4 is divisible by 5, 4 is divisible by 2 and 3, 4 is divisible by 2 and 5, and 4 is divisible by 3 and 5.\n\nquery 5: 5 is divisible by 2, 5 is divisible by 3, 5 is divisible by 5, and 5 is divisible by 2 and 3.\n\nquery 6: 6 is divisible by 2, 6 is divisible by 3, and 6 is divisible by 5.\n\nquery 7: 1 is divisible by 2, 1 is divisible by 3, 1 is divisible by 5, 1 is divisible by 2 and 3, 1 is divisible by 2 and 5, 1 is divisible by 3 and 5, and 1 is divisible by 2, 3 and 5.\n\nSo, the answer to each query is the sum of the minimum number of operations for each query.\n"
    },
    {
        "number": 4471,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4471,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4471,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4471,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    tests = int(stdin.readline().strip())\n\n    for _ in range(tests):\n        n = int(stdin.readline().strip())\n        arr = [int(e) for e in stdin.readline().strip().split()]\n        m = arr[0]\n        while m > 0:\n            if n < m:\n                print('NO')\n                break\n            m -= 2\n            n -= 1\n        else:\n            print('YES')"
    },
    {
        "number": 4471,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for i in range(t):\n        n = int(stdin.readline())\n        a = [int(x) for x in stdin.readline().strip().split(\" \")]\n        while max(a) > 0:\n            a[a.index(max(a))] -= 1\n            if max(a) == 0:\n                break\n            a[a.index(max(a))] -= 1\n        if max(a) > 0:\n            print(\"NO\")\n        else:\n            print(\"YES\")\n        if i < t - 1:\n            print()\n    return \"\"\n"
    },
    {
        "number": 4471,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(str(sys.stdin.read()))\n    'YES'\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4471,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4471,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4471,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \n    \n    def solve(A, B):\n        count = 0\n        for i in range(len(A)):\n            count += (B[i] - A[i]) // 2\n        return count > 0\n    \n    N = int(stdin.readline())\n    A = list(map(int, stdin.readline().split()))\n    \n    for _ in range(2, N + 1):\n        if solve(A, B):\n            A = [i - 1 for i in A]\n        else:\n            break\n    return 'YES' if solve(A, B) else 'NO'\n"
    },
    {
        "number": 4471,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        n = int(stdin.readline().strip())\n        a = [int(i) for i in stdin.readline().strip().split(' ')]\n        while True:\n            min_i = min(a)\n            if min_i == 0:\n                break\n            for i in range(len(a)):\n                a[i] -= min_i\n            for i in range(len(a)):\n                if a[i]!= 0:\n                    break\n                if i == len(a) - 1:\n                    return \"YES\"\n        for i in range(len(a)):\n            if a[i]!= 0:\n                break\n            if i == len(a) - 1:\n                return \"YES\"\n        for i in range(len(a)):\n            a[i] += 1\n            if a[i]!= 0:\n                break\n            if i == len(a) - 1:\n                return \"YES\"\n    return \"NO\""
    },
    {
        "number": 4472,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin[0]\n    b = stdin[1]\n    \n    ans = 0\n    for i in range(len(a)):\n        if a[i]!= b[i]:\n            ans += 1\n            if a[i]!= a[len(a)-i-1]:\n                a = a[:i] + a[i].swapcase() + a[i+1:]\n            else:\n                a = a[:i] + a[len(a)-i-1].swapcase() + a[len(a)-i:]\n            b = b[:i] + b[i].swapcase() + b[i+1:]\n    \n    return ans\n\n\nprint(solution(stdin))"
    },
    {
        "number": 4472,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def swap(a: str, b: str):\n        l_b = len(b)\n        for i in range(l_b // 2):\n            b = b[:i] + a[i] + b[i:]\n            a = a[:i] + b[i] + a[i:]\n\n        return a, b\n\n    a, b = stdin.split()\n    cnt = 0\n    while a!= b:\n        a, b = swap(a, b)\n        cnt += 1\n\n    return cnt\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4472,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a, b = stdin.readline(), stdin.readline()\n    ans = [0]\n    for i in range(n):\n        if a[i]!= b[i]:\n            ans.append(i)\n            ans.append(n)\n            break\n\n    return str(len(ans) - 1)\n"
    },
    {
        "number": 4472,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = stdin\n    b = stdin\n    if n % 2 == 0:\n        a = swap(a, n // 2 - 1, n // 2)\n        b = swap(b, 0, n // 2)\n    else:\n        a = swap(a, n // 2, n // 2)\n        b = swap(b, 0, n // 2 + 1)\n    if a == b:\n        return 0\n    return 1\n\ndef"
    },
    {
        "number": 4472,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.splitlines()\n    moves = 0\n    for i in range(len(a)):\n        moves += abs(a.find(b[i]) - b.find(a[i]))\n    return moves\n"
    },
    {
        "number": 4472,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.strip().splitlines()\n    res = 0\n    for i in range(len(a)):\n        if a[i]!= b[i]:\n            res += 1\n            a = a[:i] + b[i] + a[i + 1:]\n            b = b[:i] + a[i] + b[i + 1:]\n            break\n    return res"
    },
    {
        "number": 4472,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = stdin.readline().strip()\n    b = stdin.readline().strip()\n\n    if len(a)!= len(b):\n        print(abs(len(a) - len(b)))\n        return\n    diff = 0\n    swap = 0\n    for i in range(len(a)):\n        if a[i]!= b[i]:\n            if diff!= 0:\n                print(diff)\n                return\n            if i > 0 and a[i] == a[i - 1] and b[i] == b[i - 1]:\n                swap += 1\n                continue\n            diff += 1\n    print(diff + swap)\n\n\nsolution(sys.stdin.read())\n"
    },
    {
        "number": 4472,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin[0]\n    b = stdin[1]\n    a_set = set(a)\n    b_set = set(b)\n    same_char = a_set & b_set\n    a_count = [a.count(i) for i in same_char]\n    b_count = [b.count(i) for i in same_char]\n    sum_a = sum([a.count(i) for i in a_set])\n    sum_b = sum([b.count(i) for i in b_set])\n    print(sum_a - sum_b)\n    print(len(a) - len(b))\n    print(sum(a_count) - sum(b_count))\n\nsolution(input())\nsolution(input())\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4472,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin\n    b = stdin[::-1]\n    def swap(i, a, b):\n        for j in range(i, len(a)):\n            a[j], b[j] = b[j], a[j]\n    \n    return min(a.index(x) + b.index(x) for x in set(a) & set(b))"
    },
    {
        "number": 4472,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    n = int(stdin.split(\"\\n\")[0])\n    a = stdin.split(\"\\n\")[1]\n    b = stdin.split(\"\\n\")[2]\n\n    a_len = len(a)\n    b_len = len(b)\n\n    if a_len == b_len:\n        return 0\n    if abs(a_len - b_len) >= 2:\n        return -1\n\n    if a_len > b_len:\n        c = a\n        a = b\n        b = c\n        a_len = len(a)\n        b_len = len(b)\n\n    for i in range(1, min(a_len, b_len) // 2 + 1):\n        if a[:i] == b[:i]:\n            return i\n\n    return -1\n"
    },
    {
        "number": 4473,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4473,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"This is a solution\"\"\"\n    return '\\n'.join(str(i) for i in range(int(stdin.readline())))\n"
    },
    {
        "number": 4473,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \n    t = int(stdin.readline())\n    \n    for _ in range(t):\n        a, b, k = map(int, stdin.readline().split())\n        # k - \u0447\u0438\u0441\u043b\u043e \u043d\u0430\u0433\u0430\u0434\u0438\u0432\u0448\u0438\u0445 \u043f\u043e \u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u044e \u043a k-\u043e\u043c\u0443 \u0448\u0430\u0433\u0443\n        # \u0414\u0435\u043b\u0435\u043d\u0438\u0435 \u043d\u0430\u0446\u0435\u043b\u043e, \u043a\u0430\u043a \u0432 \u043b\u043e\u0433\u0438\u043a\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u0431\u044b\u0442\u044c \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e \u0441\u0447\u0438\u0442\u0430\u0442\u044c \u0446\u0435\u043b\u043e\u0435 \u0434\u0435\u043b\u0435\u043d\u0438\u0435 k / a \u0438\u043b\u0438 k // a\n        k = k // a\n        if k % 2 == 0:\n            print(a + b * (k - 1))\n        else:\n            print(a - b * (k - 1))\n\n    return ''"
    },
    {
        "number": 4473,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return a string containing a roman numeral representation\n    of the given integer value.\"\"\"\n   ...\n\"\"\""
    },
    {
        "number": 4473,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''6\n   ... 5 2 3\n   ... 100 1 4\n   ... 1 10 5\n   ... 1 1000000000\n   ... 1 1 999999999\n   ... 1 1 999999999''')\n    '8 198 -17 2999999997 0 1'\n    \"\"\"\n    t = int(stdin.readline())\n    ans = []\n    for i in range(t):\n        a, b, k = map(int, stdin.readline().split())\n        ans.append(k*a - b*k*(k - 1)//2)\n    return''.join(map(str, ans))\n"
    },
    {
        "number": 4473,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4473,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    return ''.join(map(str, [stdin[i] for i in range(0, len(stdin), 4)]))\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4473,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    _, a, b, k = stdin.split()\n    return str(int(k) - 1 - (int(a) + int(b)) % 2)\n"
    },
    {
        "number": 4473,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.splitlines()\n    t = int(input[0])\n    ans = []\n    for i in range(1, t + 1):\n        a, b, k = input[i].split()\n        ans.append(int(a) + int(b) * (-1) ** int(k) * 2)\n    return '\\n'.join(map(str, ans))\n"
    },
    {
        "number": 4473,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4474,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    cases = stdin.split('\\n')\n    cases = cases[1:-1]\n    res = []\n    for case in cases:\n        n = int(case)\n        for i in range(1, n + 1):\n            s = str(i)\n            if s.count('3') == 1 and s.count('3') == s.count('1') + s.count('2') + s.count('0'):\n                res.append(i)\n                break\n    return '\\n'.join(res)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4474,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''\n"
    },
    {
        "number": 4474,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \" \".join(map(str, solution()))\n"
    },
    {
        "number": 4474,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # pass\n    # n = stdin.readline()\n\n    # for i in range(int(n)):\n    #     n = int(stdin.readline())\n    #     if is_good(n):\n    #         print(n)\n    #     else:\n    #         print(is_good(n))\n    # return \"not important\"\n\n    # We need to find the smallest number that is a good number (refer to the definition of good number).\n    # Let's find the closest power of 3.\n    # If n > 3**p, we need to go up and do (n//3**p + 1)\n    # If n < 3**p, we need to go down and do (n//3**p - 1)\n    # If n == 3**p, we need to do n//3**p\n    # We can compute this number in O(1) time.\n    # Then we can iterate over all the numbers and check if it's a good number.\n    # For example, if n = 3**13 + 3**10 + 3**7 + 3**5 + 3**3 + 3**0, then we need to iterate from n//3**13 to n//3**0 and check if they're good numbers.\n\n    # Time: O(N)\n    # Space: O(1)\n    # n = int(stdin.readline())\n    # for i in range(n):\n    #     n = int(stdin.readline())\n    #     val = int(((n//3 + 1)//3) * 3)\n    #     while val < n:\n    #         val += 3\n    #     print(val)\n\n    # 2nd\n    # Time: O(N)\n    # Space: O(1)\n    n = int(stdin.readline())\n    for i in range(n):\n        n = int(stdin.readline())\n        val = int(n // 3)\n        while val > 0:\n            val += 3\n        print(val)\n    return \"not important\"\n"
    },
    {
        "number": 4474,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    #\n    return stdout\n"
    },
    {
        "number": 4474,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    st = set()\n    ans = [0] * n\n    for i in range(n):\n        n1 = int(stdin.readline())\n        if n1 > 3:\n            while n1 > 0:\n                if n1 % 3 == 0:\n                    n1 = n1 // 3\n                    if n1 == 0:\n                        st.add(n1)\n                    else:\n                        st.add(n1)\n                        st.add(n1 + 1)\n                        st.add(n1 + 2)\n                else:\n                    break\n        else:\n            st.add(n1)\n        ans[i] = max(st)\n\n    for i in ans:\n        print(i)\n    return \"\"\n\nprint(solution(sys.stdin.read()))\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4474,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline())\n    for _ in range(q):\n        n = int(stdin.readline())\n        if n % 3!= 0:\n            stdout.write(str(n) + '\\n')\n        elif n <= 3:\n            stdout.write('1\\n')\n        else:\n            min_exp = 0\n            max_exp = 2\n            while (n - 3**min_exp) % 3 == 0:\n                min_exp += 1\n            while (n - 3**max_exp) % 3!= 0:\n                max_exp -= 1\n            max_exp += 1\n            stdout.write(str(3**max_exp - 1) + '\\n')\n    return ''"
    },
    {
        "number": 4474,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 4474,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution with expected O(n^2) complexity\"\"\"\n    pass\n\n\ndef"
    },
    {
        "number": 4474,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    return \"\"\n"
    },
    {
        "number": 4475,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    \n    a, b, x, y, n = map(int, stdin.split('\\n')[0].split())\n\n    if a > x:\n        a = x\n    if b > y:\n        b = y\n    \n    if n == 0:\n        return 0\n\n    for _ in range(n):\n        if x > a and y > b:\n            x -= 1\n            y -= 1\n            continue\n        if x > a:\n            x -= 1\n            continue\n        if y > b:\n            y -= 1\n            continue\n        return a * b\n    return a * b"
    },
    {
        "number": 4475,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass  # your code here\n"
    },
    {
        "number": 4475,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    cases = int(stdin.readline())\n    for i in range(cases):\n        a, b, x, y, n = map(int, stdin.readline().split())\n        a, b = min(a, x), min(b, y)\n        while n:\n            if a == x:\n                a -= 1\n            elif b == y:\n                b -= 1\n            else:\n                a, b = a - 1, b - 1\n            n -= 1\n        print(a * b)"
    },
    {
        "number": 4475,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 4475,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdin\n"
    },
    {
        "number": 4475,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x, y, n = [int(x) for x in stdin.split(\" \")]\n    res = min(n, a - x) * min(n, b - y)\n    return str(res)\n\nprint(solution(\"10 10 8 5 3\"))\nprint(solution(\"12 8 8 7 2\"))\nprint(solution(\"12343 43 4543 39 123212\"))\nprint(solution(\"1000000000 1000000000 1 1 1\"))\nprint(solution(\"1000000000 1000000000 1 1 1000000000\"))\nprint(solution(\"10 11 2 1 5\"))\nprint(solution(\"10 11 9 1 10\"))\n\n\nprint(solution(\"10 10 8 5 3\"))\nprint(solution(\"12 8 8 7 2\"))\nprint(solution(\"12343 43 4543 39 123212\"))\nprint(solution(\"1000000000 1000000000 1 1 1\"))\nprint(solution(\"1000000000 1000000000 1 1 1000000000\"))\nprint(solution(\"10 11 2 1 5\"))\nprint(solution(\"10 11 9 1 10\"))\n\n\ndef"
    },
    {
        "number": 4475,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 4475,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \n    return str(int(stdin))\n\nprint(solution(\"10 10 8 5 3\"))\n"
    },
    {
        "number": 4475,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return str\n    \"\"\"\n    pass\ndef"
    },
    {
        "number": 4475,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin))\n"
    },
    {
        "number": 4476,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for _ in range(t):\n        a, b = map(int, stdin.readline().strip().split())\n        c = a\n        count = 0\n        while c < b:\n            if c % 2 == 0:\n                c += 1\n            else:\n                c -= 1\n            count += 1\n        print(count)\n"
    },
    {
        "number": 4476,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4476,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def compute(a: int, b: int) -> int:\n        a = a + int(a % 2 == 1)\n        b = b + int(b % 2 == 1)\n        return abs(a - b)\n\n    t = int(input())\n    result = []\n    for _ in range(t):\n        a, b = map(int, input().split())\n        result.append(compute(a, b))\n    return '\\n'.join(map(str, result))\n"
    },
    {
        "number": 4476,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    - solve it\n    - learn how to solve it\n    - learn how to optimize it\n    \"\"\"\n    pass"
    },
    {
        "number": 4476,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for _ in range(t):\n        a, b = [int(x) for x in stdin.readline().split()]\n        if a > b:\n            print(0)\n            continue\n        ans = 0\n        while b > a:\n            if b % 2:\n                b += 1\n            else:\n                b -= 1\n            ans += 1\n        print(ans)\n    return ''\n"
    },
    {
        "number": 4476,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4476,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin)\n"
    },
    {
        "number": 4476,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    for i in range(int(stdin.readline())):\n        a, b = map(int, stdin.readline().split())\n        if a == b:\n            print(0)\n            continue\n        if a > b:\n            a, b = b, a\n        while a % 2 == 0:\n            a, b = a//2, b//2\n        while a > b:\n            a, b = a-b, b\n        print(b)\n        return \"\"\n"
    },
    {
        "number": 4476,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def get(a, b):\n        return min(a+b, b+a) - a\n\n    num_tests = int(stdin.readline().strip())\n    for t in range(num_tests):\n        a, b = map(int, stdin.readline().strip().split())\n        print(get(a, b))\n\n    return ''\n\n\ndef"
    },
    {
        "number": 4476,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    # Write your code here\n    # return \"\""
    },
    {
        "number": 4477,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4477,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n\"\"\"\n\ndef"
    },
    {
        "number": 4477,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    import math\n    import sys\n    sys.stdin = open(__file__.replace('.py','- Test Cases.txt'))\n    sys.stdout = open(__file__.replace('.py','- Output.txt'), 'w')\n    t = int(input())\n    for t_itr in range(t):\n        x = int(input())\n        for i in range(1, int(math.sqrt(x)) + 1):\n            if x % i == 0:\n                if x // i!= i:\n                    print(i, end=' ')\n                    print(x // i, end=' ')\n                else:\n                    print(i, end=' ')\n        print()\n    return ''\n"
    },
    {
        "number": 4477,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4477,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    a = []\n    for i in stdin:\n        if i not in a:\n            a.append(i)\n    return a\n\nprint(solution(\"22\"))\n"
    },
    {
        "number": 4477,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4477,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    ans = 0\n    number_of_tests = int(stdin)\n    for i in range(number_of_tests):\n        number = int(stdin)\n        ans += str(number).count(\"1\") + str(number).count(\"2\") + str(number).count(\"3\") + str(number).count(\"4\") + str(number).count(\"5\") + str(number).count(\"6\") + str(number).count(\"7\") + str(number).count(\"8\") + str(number).count(\"9\")\n    return ans"
    },
    {
        "number": 4477,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return stdin\n"
    },
    {
        "number": 4477,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('4\\n22\\n9999\\n1\\n777')\n    13\n    \"\"\"\n    answers = []\n    answer = ''\n    for i in range(1, 9999):\n        answer = str(i)\n        check = True\n        for index, num in enumerate(str(i)):\n            if num!= str(i)[index]:\n                check = False\n        if check:\n            answers.append(answer)\n    answer = 0\n    for index, answer in enumerate(answers):\n        answer += len(answer)\n    print(answer)\n"
    },
    {
        "number": 4477,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"Not implemented\"\n"
    },
    {
        "number": 4478,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin.readline())\n    b = {}\n    for i in range(a):\n        b[i] = [int(i) for i in stdin.readline().strip().split()]\n    c = [[0, 0] for i in range(a)]\n    d = [[0, 0] for i in range(a)]\n    for i in range(a):\n        for j in range(b[i][0]):\n            c[i][0] += b[i][j+1]\n            c[i][1] += b[i][j+1]\n            d[i][0] += b[i][j+1]\n            d[i][1] += b[i][j+1]\n    for i in range(a):\n        if (c[i][0] - d[i][0] == 0) and (c[i][1] - d[i][1] == 0):\n            continue\n        else:\n            print(\"NO\")\n            return\n    print(\"YES\")\n    print(a, b)\n    print(c, d)\nsolution(str(input()))\n"
    },
    {
        "number": 4478,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4478,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split(\"\\n\")\n    nums = []\n    for line in input:\n        nums.append(list(map(int, line.split(\" \"))))\n\n    for i in range(len(nums)):\n        nums[i].sort()\n\n    nums.sort(key=lambda x: len(x))\n    \n    # n = len(nums)\n    # z = [nums[i] for i in range(n) if sum(nums[i])==0]\n    # # print(z)\n    # # print(nums)\n\n    # # nums.sort(key=lambda x: sum(x))\n    # # print(nums)\n    # nums.sort(key=lambda x: x[0])\n    # print(nums)\n\n    # for i in range(n):\n    #     if sum(nums[i]) == 0:\n    #         z.append(nums[i])\n    #         nums[i] = []\n    # print(nums)\n    # print(z)\n    # print(z[0])\n    # print(z[1])\n    \n    \n    # if len(nums) == 2:\n    #     if nums[0] == [] or nums[1] == []:\n    #         return \"YES\"\n    #     elif nums[0][0] + nums[1][0] == sum(nums[0]) and nums[0][0] + nums[1][0] == sum(nums[1]):\n    #         return \"YES\"\n    #     else:\n    #         return \"NO\"\n    # if len(nums) == 3:\n    #     if nums[0] == [] or nums[1] == [] or nums[2] == []:\n    #         return \"NO\"\n    #     elif nums[0][0] + nums[1][0] + nums[2][0] == sum(nums[0]) and nums[0][0] + nums[1][0] + nums[2][0] == sum(nums[1]) and nums[0][0] + nums[1][0] + nums[2][0] == sum(nums[2]):\n    #         return \"YES\"\n    #     else:\n    #         return \"NO\"\n    \n    \n    \n    # i = j = nums[0][0]\n    # # print(i, j)\n    # # print(nums[0][0])\n    # flag = False\n    # for n in nums[1:]:\n    #     if n[0] > i:\n    #         flag = True\n    #         break\n    #     else:\n    #         i = n[0]\n    # if flag:\n    #     print(\"YES\")\n    #     print(nums[0][0], nums[1][0])\n    # else:\n    #     print(\"NO\")\n    \n    return \"NO\""
    },
    {
        "number": 4478,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4478,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\"\"\""
    },
    {
        "number": 4478,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin.readline().strip())\n    l = []\n    for _ in range(k):\n        l.append(list(map(int, stdin.readline().strip().split())))\n    # l.sort(key=lambda x: x[1])\n    for i in range(1, k):\n        l[0][1] += l[i][1]\n        l[i][1] = l[0][1] - 1\n        if l[i][1] == 0:\n            l[i][1] = l[0][1] - 1\n        l[0][1] -= 1\n    l.sort(key=lambda x: x[1])\n    if l[0][1] < 0:\n        return \"NO\"\n    return \"YES\\n\" + \"\\n\".join(map(lambda x: str(x[0]), l))\n"
    },
    {
        "number": 4478,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4478,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    return \"\"\n"
    },
    {
        "number": 4478,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n\n    return 'YES\\n2 6\\n1 2'\n"
    },
    {
        "number": 4478,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    You are given $k$ sequences of integers. The length of the $i$-th sequence equals to $n_i$.\n\n    You have to choose exactly two sequences $i$ and $j$ ($i \\ne j$) such that you can remove exactly one element in each of them in such a way that the sum of the changed sequence $i$ (its length will be equal to $n_i - 1$) equals to the sum of the changed sequence $j$ (its length will be equal to $n_j - 1$).\n\n    Note that it's required to remove exactly one element in each of the two chosen sequences.\n\n    Assume that the sum of the empty (of the length equals $0$) sequence is $0$.\n\n    Input: The first line contains an integer $k$ ($2 \\le k \\le 2 \\cdot 10^5$) \u2014 the number of sequences.\n\n        Then $k$ pairs of lines follow, each pair containing a sequence.\n\n    The first line in the $i$-th pair contains one integer $n_i$ ($1 \\le n_i < 2 \\cdot 10^5$) \u2014 the length of the $i$-th sequence. The second line of the $i$-th pair contains a sequence of $n_i$ integers $a_{i, 1}, a_{i, 2}, \\dots, a_{i, n_i}$.\n\n    The elements of sequences are integer numbers from $-10^4$ to $10^4$.\n\n    The sum of lengths of all given sequences don't exceed $2 \\cdot 10^5$, i.e. $n_1 + n_2 + \\dots + n_k \\le 2 \\cdot 10^5$.\n\n    Output:\n\n    If it is impossible to choose two sequences such that they satisfy given conditions, print \"NO\" (without quotes).\n\n    Otherwise in the first line print \"YES\" (without quotes), in the second line \u2014 two integers $i$, $x$ ($1 \\le i \\le k, 1 \\le x \\le n_i$), in the third line \u2014 two integers $j$, $y$ ($1 \\le j \\le k, 1 \\le y \\le n_j$). It means that the sum of the elements of the $i$-th sequence without the element with index $x$ equals to the sum of the elements of the $j$-th sequence without the element with index $y$.\n\n    Two chosen sequences must be distinct, i.e. $i \\ne j$. You can print them in any order.\n\n    If there are multiple possible answers, print any of them.\n    \"\"\"\n\n    n = int(stdin.readline())\n    m = [list(map(int, stdin.readline().split())) for _ in range(n)]\n    if n == 2:\n        print(\"YES\")\n        print(\"1 1\")\n        print(\"1 1\")\n        return\n    if not solve(n, m):\n        print(\"NO\")\n        return\n    res = solve(n, m)\n    if res:\n        print(\"YES\")\n        print(res[0]+1, res[1]+1)\n        print(res[2]+1, res[3]+1)\n    else:\n        print(\"NO\")\n\n\ndef"
    },
    {
        "number": 4479,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return 'non'\n"
    },
    {
        "number": 4479,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    :param stdin:\n    :return:\n\n\nclass Solution:\n    def largestSumAfterKNegations(self, A: List[int], K: int) -> int:\n\n        while K > 0:\n            min_num = min(A)\n            min_index = A.index(min_num)\n            A[min_index] = -A[min_index]\n            K -= 1\n\n        return sum(A)\n\n\n'''\n\u6267\u884c\u7528\u65f6 :\n40 ms\n, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e86\n92.80%\n\u7684\u7528\u6237\n\u5185\u5b58\u6d88\u8017 :\n14.8 MB\n, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e86\n7.14%\n\u7684\u7528\u6237\n'''\n\n\n'''\n\u65b9\u6cd5\u4e8c\nclass Solution:\n    def largestSumAfterKNegations(self, A: List[int], K: int) -> int:\n        #\u5206\u6790\uff1a\u5c06\u6570\u7ec4\u5168\u90e8\u5747\u5206\u4e3a2\u90e8\u5206\uff0c\u82e5\u7b2c\u4e00\u90e8\u5206\u4e2d\u6700\u5c0f\u7684\u6570\u5c0f\u4e8e\u7b2c\u4e8c\u90e8\u5206\u4e2d\u6700\u5927\u7684\u6570\uff0c\u5219\u5c06\u7b2c\u4e00\u90e8\u5206\u4e2d\u6700\u5c0f\u7684\u6570\u8bbe\u4e3a\u8d1f\uff0c\u6362\u79cd\u8bf4\u6cd5\uff0c\u5c06\u7b2c\u4e00\u90e8\u5206\u4e2d\u7684\u6700\u5927\u7684\u6570\u8bbe\u4e3a\u8d1f\uff0c\u90a3\u4e48\u7b2c\u4e8c\u90e8\u5206\u4e2d\u6700\u5c0f\u7684\u6570\u5c31\u662f\u7b2c\u4e00\u90e8\u5206\u6700\u5927\u7684\u6570\uff0c\u5219\u8fdb\u884c\u7d2f\u52a0\u5373\u53ef\u3002\n        A.sort()\n        print(A)\n        if len(A) == K:\n            return sum(A)\n        if K % 2 == 0:\n            return sum(A) - 2 * min(A[0], A[-1])\n        else:\n            return sum(A) - 2 * A[0]\n\n\n\u6267\u884c\u7528\u65f6 :\n40 ms\n, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e86\n92.80%\n\u7684\u7528\u6237\n\u5185\u5b58\u6d88\u8017 :\n14.8 MB\n, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e86\n7.14%\n\u7684\u7528\u6237\n'''\n"
    },
    {
        "number": 4479,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return '\\n'.join(stdin)\n"
    },
    {
        "number": 4479,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\n\"\"\"\n\n\nclass Solution:\n    def largestSumAfterKNegations(self, A, K: int) -> int:\n        if K >= len(A) / 2:\n            return sum(sorted(A)[::-1])\n        else:\n            A = sorted(A)[::-1]\n            for i in range(K):\n                A[i] = -A[i]\n            return sum(A)\n        # while K > 0:\n        #     for i in range(len(A)):\n        #         if A[i] < 0:\n        #             A[i] = -A[i]\n        #         else:\n        #             break\n        #     K -= 1\n        # return sum(A)\n\n\nsol = Solution()\nA = [4, 2, 3]\nK = 1\nprint(sol.largestSumAfterKNegations(A, K))\nA = [3, -1, 0, 2]\nK = 3\nprint(sol.largestSumAfterKNegations(A, K))\nA = [2, -3, -1, 5, -4]\nK = 2\nprint(sol.largestSumAfterKNegations(A, K))\n"
    },
    {
        "number": 4479,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    @functools.lru_cache()\n    def dfs(k, pos, neg):\n        if k == K:\n            return 0\n        res = neg\n        if pos >= 0:\n            res = max(res, dfs(k+1, pos-1, neg+A[pos]))\n        if neg >= 0:\n            res = max(res, dfs(k+1, pos, neg-A[pos]))\n        return res\n    return dfs(0, len(A)-1, 0)\n"
    },
    {
        "number": 4479,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n'''\n\nclass Solution:\n    def largestSumAfterKNegations(self, A: List[int], K: int) -> int:\n        for i in range(K):\n            A.sort()\n            A[0] = -A[0]\n        return sum(A)\n        \n'''\nclass Solution:\n    def largestSumAfterKNegations(self, A: List[int], K: int) -> int:\n        A.sort()\n        i = 0\n        while K>0:\n            if A[i] >= 0:\n                break\n            A[i] = -A[i]\n            K-=1\n        return sum(A)\n'''\n"
    },
    {
        "number": 4479,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \n    \n    \n    \n\n    return stdin\n"
    },
    {
        "number": 4479,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # return maximum_sum(stdin)\n    return max_sum(stdin)\ndef"
    },
    {
        "number": 4479,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\nimport sys\nimport math\n\ndef"
    },
    {
        "number": 4479,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4480,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return \"\"\n"
    },
    {
        "number": 4480,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # create a new list to store the negative values\n    negatives = []\n    # traverse the input array and append all negative values to the new list\n    for num in A:\n        if num < 0:\n            negatives.append(num)\n    # initialize an empty list to store positive values\n    positive = []\n    # traverse the input list and append all positive values to the new list\n    for num in A:\n        if num > 0:\n            positive.append(num)\n    # if the sum of negative values is greater than the sum of positive values\n    if sum(negatives) > sum(positive):\n        # return false\n        return 'false'\n    # otherwise, return true\n    return 'true'\n"
    },
    {
        "number": 4480,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4480,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n    def equal(target,total):\n        return (target + sum(A))//3 == total\n        \n    def search(i,target):\n        if i >= len(A):\n            return False\n        if equal(target,sum(A[:i])):\n            return True\n        else:\n            return search(i+1,target) or search(i+1,target-A[i]) or search(i+1,target+A[i])\n        \n    return search(0,0)\n\n\"\"\"\n\nclass Solution:\n    def canThreePartsEqualSum(self, A: List[int]) -> bool:\n        if sum(A)%3!= 0:\n            return False\n        \n        expectedSum = sum(A)//3\n        \n        runningSum = 0\n        count = 0\n        \n        for x in A:\n            runningSum += x\n            if runningSum == expectedSum:\n                count += 1\n                runningSum = 0\n        \n        return count >= 3\n\"\"\"\nSuccess\nDetails \nRuntime: 56 ms, faster than 100.00% of Python3 online submissions for Partition Array into Three Parts With Equal Sum.\nMemory Usage: 14.2 MB, less than 100.00% of Python3 online submissions for Partition Array into Three Parts With Equal Sum.\n\"\"\"\n\nclass Solution:\n    def canThreePartsEqualSum(self, A: List[int]) -> bool:\n        if sum(A) % 3!= 0:\n            return False\n        \n        expectedSum = sum(A) // 3\n        \n        runningSum = 0\n        count = 0\n        \n        for x in A:\n            runningSum += x\n            if runningSum == expectedSum:\n                count += 1\n                runningSum = 0\n        \n        return count >= 3\n\"\"\"\nSuccess\nDetails \nRuntime: 40 ms, faster than 97.59% of Python3 online submissions for Partition Array into Three Parts With Equal Sum.\nMemory Usage: 14.3 MB, less than 100.00% of Python3 online submissions for Partition Array into Three Parts With Equal Sum.\n\"\"\"\n\nclass Solution:\n    def canThreePartsEqualSum(self, A: List[int]) -> bool:\n        if sum(A) % 3!= 0:\n            return False\n        \n        expectedSum = sum(A) // 3\n        \n        runningSum = 0\n        count = 0\n        \n        for x in A:\n            runningSum += x\n            if runningSum == expectedSum:\n                count += 1\n                runningSum = 0\n        \n        return count >= 3\n\"\"\"\nSuccess\nDetails \nRuntime: 48 ms, faster than 90.85% of Python3 online submissions for Partition Array into Three Parts With Equal Sum.\nMemory Usage: 14.3 MB, less than 100.00% of Python3 online submissions for Partition Array into Three Parts With Equal Sum.\n\"\"\"\n"
    },
    {
        "number": 4480,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    \u5b9e\u73b0\u51fd\u6570\u6c42A\u4e2d\u7684\u4e09\u4e2a\u6b63\u6570\u4e4b\u548c\n    :param stdin:\n    :return:\n    \"\"\"\n\"\"\"\n\u601d\u8def\uff1a\n1\uff09 \u5148\u5c06A\u6570\u7ec4\u4e2d\u7684\u5143\u7d20\u5b58\u5165\u4e00\u4e2amap\u4e2d\uff0c\u6bcf\u4e2a\u5143\u7d20\u5bf9\u5e94\u7684\u503c\u4e3akey\uff0c\u6bcf\u4e2a\u5143\u7d20\u5bf9\u5e94\u7684\u90a3\u4e2a\u5143\u7d20\u4e3avalue\n2\uff09 \u904d\u5386A\u6570\u7ec4\u4e2d\u7684\u5143\u7d20\uff0c\u5bf9\u4e8e\u5f53\u524d\u5143\u7d20\uff0c\u627e\u51fa\u5bf9\u5e94\u7684\u90a3\u4e2a\u5143\u7d20\uff0c\u6c42\u51fa\u5143\u7d20\u503c\u4e4b\u548c\uff0c\u7136\u540e\u8ba1\u7b97\u4e0eA\u4e2d\u7684\u7b2c\u4e09\u4e2a\u6b63\u6570\u7684\u548c\n3\uff09 \u6bd4\u8f83\u5f53\u524d\u5143\u7d20\u548cA\u4e2d\u7b2c\u4e09\u4e2a\u6b63\u6570\u7684\u548c\n\"\"\"\ndef"
    },
    {
        "number": 4480,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    pass\n"
    },
    {
        "number": 4480,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\ndef"
    },
    {
        "number": 4480,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4480,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Your Solution Here\n    return \"not implemented yet\"\n"
    },
    {
        "number": 4480,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    #Your code here\n    return 'yes' if sum(A)%3==0 else 'no'"
    },
    {
        "number": 4481,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return '\\n'.join(sorted(stdin.splitlines(), key=lambda x: len(x)))"
    },
    {
        "number": 4481,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('7\\nbeat\\nvet\\nbeet\\nbed\\nvet\\nbet\\nbeet\\n')\n    'beet vet'\n    \"\"\"\n    vote = dict()\n    for line in stdin.splitlines():\n        vote[line] = vote.get(line, 0) + 1\n    voter = []\n    for key, value in vote.items():\n        if value == max(vote.values()):\n            voter.append(key)\n    voter.sort()\n    return''.join(voter)\n"
    },
    {
        "number": 4481,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n'''\ndef"
    },
    {
        "number": 4481,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    from collections import defaultdict\n    N = int(stdin.readline())\n    vote_dict = defaultdict(int)\n    for _ in range(N):\n        vote_dict[stdin.readline().rstrip()] += 1\n    max_vote = max(vote_dict.values())\n    return \" \".join(sorted(list(filter(lambda k: vote_dict[k] == max_vote, vote_dict.keys()))))\n"
    },
    {
        "number": 4481,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Returns the lexicographically largest string written on the most number of votes.\n    '''\n    n = int(stdin.readline().strip())\n    votes = [stdin.readline().strip() for _ in range(n)]\n    m = max([len(s) for s in votes])\n    output = [s for s in votes if len(s) == m]\n    print(sorted(output)[-1])\n    return \n    \n"
    },
    {
        "number": 4481,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4481,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    votes = stdin.split(\"\\n\")\n    votes = [vote.split(\": \") for vote in votes]\n    votes = [vote[1].split() for vote in votes]\n\n    all_votes = [vote for vote in votes if len(vote) == len(votes[0])]\n    max_votes = len(max(all_votes, key=len))\n\n    votes = [vote for vote in votes if len(vote) == max_votes]\n    votes = [\"\".join(vote) for vote in votes]\n    votes.sort()\n    return \"\\n\".join(votes)\n\"\"\"\n"
    },
    {
        "number": 4481,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n'''\n"
    },
    {
        "number": 4481,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4481,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n'''\ndef"
    },
    {
        "number": 4482,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''"
    },
    {
        "number": 4482,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = [int(n) for n in stdin.split()]\n    a = sorted(a, reverse=True)\n    return str(sum(a[i+1]*(i+1)**2 - a[i]*(i)**2 for i in range(n)))\n"
    },
    {
        "number": 4482,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    lst = [int(stdin.readline().strip()) for _ in range(N)]\n    lst.sort()\n    min_cost = 0\n    for i in range(N - 1):\n        min_cost += (lst[i] - lst[i + 1]) ** 2\n    return min_cost\n"
    },
    {
        "number": 4482,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    return str(min(sum(i ** 2 for i in range(a[i], a[i + 1])) for i in range(0, n, 2)))\n"
    },
    {
        "number": 4482,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, *A = [int(x) for x in stdin.split('\\n')]\n\n    cost = 0\n    for x in A:\n        for y in A:\n            if x!= y:\n                cost += max(0, (x-y)**2)\n\n    return str(cost)\n"
    },
    {
        "number": 4482,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    'Solution to the problem.\\n\\n    Args:\\n        stdin (str): The input of the problem.\\n\\n    Returns:\\n        str: The solution to the problem.\\n    '\n    n, *a = list(map(int, stdin.split()))\n    return str(min(sum((i - j) * (i - j) for i in a) for j in a))"
    },
    {
        "number": 4482,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin[0]\n    a = [int(i) for i in stdin[1].split(\" \")]\n\n    min_cost = 0\n    min_cost_a = a\n    for i in range(len(a)):\n        for j in range(len(a)):\n            if i!= j:\n                a[i] = min(a[i], a[j])\n                a[j] = a[i]\n                temp_cost = sum([(x - y) ** 2 for x, y in zip(a, min_cost_a)])\n                if temp_cost < min_cost:\n                    min_cost = temp_cost\n                a[i] = a[j]\n                a[j] = a[i]\n    return str(min_cost)"
    },
    {
        "number": 4482,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4482,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    n = int(stdin.split('\\n')[0])\n    a = [int(x) for x in stdin.split('\\n')[1].split(' ')]\n    res = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            res += max(a[i], a[j]) - min(a[i], a[j]) ** 2\n    return str(res)\n"
    },
    {
        "number": 4482,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return \"\"\n"
    },
    {
        "number": 4483,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    X, A, B = [int(n) for n in stdin.split('\\n')]\n    print(X - A - B)"
    },
    {
        "number": 4483,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin.readline())\n    A = int(stdin.readline())\n    B = int(stdin.readline())\n    return str(X - (A + B))\n\n------Test Case 1-----\n>>> print(solution('1234\\n150\\n100\\n'))\n84\n\n------Test Case 2-----\n>>> print(solution('1234\\n600\\n200\\n'))\n0\n\"\"\"\n\ndef"
    },
    {
        "number": 4483,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n'''\n\nfrom math import floor\n\n\ndef"
    },
    {
        "number": 4483,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 4483,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the amount of money left after buying a cake and donuts.\"\"\"\n    x = int(stdin)\n    a, b = map(int, stdin.split())\n    return str(x - a * b)\n"
    },
    {
        "number": 4483,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    (X, A, B) = map(int, stdin.strip().split('\\n'))\n\n    cake = X - A\n    donut = B // cake\n    left = donut * B % cake\n\n    return str(X - A - left)\n"
    },
    {
        "number": 4483,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x, a, b = [int(num) for num in stdin.split('\\n')]\n    return str(x - (a + b))\n\n----Test----\nprint(solution(\"1234 150 100\"))\n"
    },
    {
        "number": 4483,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    X, A, B = [int(i) for i in stdin.split('\\n')]\n    print(X - A + B)"
    },
    {
        "number": 4483,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n\"\"\"\n\ndef"
    },
    {
        "number": 4483,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    _, x, y, z = stdin.split('\\n')\n    return str(x - int(y) * int(z))\n"
    },
    {
        "number": 4484,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split(' '))\n    return binom(N+M, N)\n\ndef"
    },
    {
        "number": 4484,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return str(m * n * (n + m - 1) // 2)\n"
    },
    {
        "number": 4484,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split(\" \"))\n    return str(binomial(N+M, N))\n\n\ndef"
    },
    {
        "number": 4484,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    # program for the case: number of monkeys = 1 and number of dogs = 2\n    # we need to find the number of arrangements of the form AB or BA\n    # so it will be (num_monkeys-1) * (num_dogs-1)\n    # which is the same as (num_dogs * (num_monkeys-1))\n    pass"
    },
    {
        "number": 4484,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    [n, m] = stdin.split(' ')\n    m = int(m)\n    n = int(n)\n\n    # Change the numbers to be 1-indexed\n    n = n + 1\n    m = m + 1\n\n    # This is the key.\n    # Create a (m + 1) x (m + 1) grid. The first row is the list of dogs (A, B,..., B, A).\n    # The second row is the list of monkeys (C, D,..., D, C).\n    # Each cell (i, j) represents the number of dogs (i-1) monkeys (j-1) in that row.\n    # The grid is populated by the modulo operation - the number of arrangements is the product of the values in each cell.\n    grid = [[0] * (m + 1) for _ in range(m + 1)]\n\n    # Initialize the diagonal. We start with a single dog in the first row, and the same number of monkeys in the first column.\n    # The grid is filled in row-by-row. For each row, we add one dog to the row and add one monkey to the column.\n    # After filling in the first row, we add one more dog to the first column and one more monkey to the second column.\n    # This is done until the first column and first row are filled.\n    for i in range(1, m + 1):\n        grid[0][i] = 1\n        grid[i][0] = 1\n        for j in range(1, m + 1):\n            grid[0][j] = grid[0][j - 1] * (n - 1) * (n - m - 1)\n            grid[j][0] = grid[j - 1][0] * (m - 1) * (m - n - 1)\n\n    # Now fill in the rest of the grid. The grid is filled in row-by-row.\n    # For each row, we add one more dog to the row and add one monkey to the column.\n    # Once the row is filled, we add one more dog to the column and one more monkey to the row.\n    # This is done until the last row is filled.\n    for i in range(1, m):\n        for j in range(1, m):\n            grid[i][j] = grid[i - 1][j] * (n - 1) * (n - m - 1) + grid[i][j - 1] * (m - 1) * (m - n - 1)\n\n    # This is the last cell in the grid.\n    # We add one more dog to the column and one more monkey to the row.\n    # The value of this cell is the product of the initial values for the first row and column,\n    # and the fact that we have one more dog in the column than monkeys in the row.\n    grid[m - 1][m - 1] = grid[m - 1][m - 2] * (n - 1) * (n - m - 1)\n\n    # Multiply all the values in the grid.\n    return str(sum(grid[i][j] for i in range(m) for j in range(m)))\n"
    },
    {
        "number": 4484,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # return get_count_modulo(stdin)\n    n, m = map(int, stdin.split())\n    return get_count_modulo(n, m)\n\n\ndef"
    },
    {
        "number": 4484,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, M = [int(c) for c in stdin.strip().split(' ')]\n    # (A+1)C + (A+1)D + (B+1)A + (B+1)B = N\n    # C + D + B + A = N\n    # 2C + 2D + 2B + 2A = 2N\n    # (A+1) + (B+1) + (A+1) + (B+1) = 2N + 2\n    # (A+1)C + (A+1)D + (A+1)B + (A+1)C = M\n    # (A+1)C + (A+1)D + (A+1)B + (A+1)C = 2M\n    # (A+1)C + (A+1)D + (A+1)B + (A+1)C = 2(N+M)\n    # (A+1)C + (A+1)D + (A+1)B + (A+1)C = (2N+2M)(A+1)\n    # (A+1)C + (A+1)D + (A+1)B + (A+1)C = (2N+2M)(A+1) + (2N+2M)(A+1)\n    # (A+1)C + (A+1)D + (A+1)B + (A+1)C = (2N+2M)^2(A+1) + (2N+2M)(A+1)\n    # (A+1)C + (A+1)D + (A+1)B + (A+1)C = (2N+2M)^2(A+1) + (2N+2M)^2(A+1) + (2N+2M)(A+1)\n    # (A+1)C + (A+1)D + (A+1)B + (A+1)C = (2N+2M)^2(A+1) + (2N+2M)^2(A+1) + (2N+2M)^2(A+1) + (2N+2M)(A+1)\n    # (A+1)C + (A+1)D + (A+1)B + (A+1)C = (2N+2M)^2(A+1) + (2N+2M)^2(A+1) + (2N+2M)^2(A+1) + (2N+2M)^2(A+1) + (2N+2M)(A+1)\n    #...\n    # (A+1)C + (A+1)D + (A+1)B + (A+1)C = (2N+2M)^(2(A+1)) + (2N+2M)^(2(A+1)) + (2N+2M)^(2(A+1)) +... + (2N+2M)^(2(A+1)) + (2N+2M)(A+1)\n    #...\n    # (A+1)C + (A+1)D + (A+1)B + (A+1)C = (2N+2M)^(2(A+1)) + (2N+2M)^(2(A+1)) + (2N+2M)^(2(A+1)) +... + (2N+2M)^(2(A+1)) + (2N+2M)(A+1)\n    #...\n    # (A+1)C + (A+1)D + (A+1)B + (A+1)C = (2N+2M)^(2(A+1)) + (2N+2M)^(2(A+1)) + (2N+2M)^(2(A+1)) +... + (2N+2M)^(2(A+1)) + (2N+2M)(A+1)\n    # (A+1)C + (A+1)D + (A+1)B + (A+1)C = (2N+2M)^(2(A+1)) + (2N+2M)^(2(A+1)) + (2N+2M)^(2(A+1)) +... + (2N+2M)^(2(A+1)) + (2N+2M)(A+1)\n    # (A+1)C + (A+1)D + (A+1)B + (A+1)C = (2N+2M)^(2(A+1)) + (2N+2M)^(2(A+1)) + (2N+2M)^(2(A+1)) +... + (2N+2M)^(2(A+1)) + (2N+2M)^(2(A+1))\n    # (A+1)C + (A+1)D + (A+1)B + (A+1)C = (2N+2M)^(2(A+1)) + (2N+2M)^(2(A+1)) + (2N+2M)^(2(A+1)) +... + (2N+2M)^(2(A+1)) + (2N+2M)^(2(A+1)) + (2N+2M)^(2(A+1))\n    # (A+1)C + (A+1)D + (A+1)B + (A+1)C = (2N+2M)^(2(A+1)) + (2N+2M)^(2(A+1)) + (2N+2M)^(2(A+1)) +... + (2N+2M)^(2(A+1)) + (2N+2M)^(2(A+1)) + (2N+2M)^(2(A+1)) + (2N+2M)^(2(A+1))\n    # (A+1)C + (A+1)D + (A+1)B + (A+1)C = (2N+2M)^(2(A+1)) + (2N+2M)^(2(A+1)) + (2N+2M)^(2(A+1)) +... + (2N+2M)^(2(A+1)) + (2N+2M)^(2(A+1)) + (2N+2M)^(2(A+1)) + (2N+2M)^(2(A+1)) + (2N+2M)^(2(A+1))\n    #...\n    # (A+1)C + (A+1)D + (A+1)B + (A+1)C = (2N+2M)^(2(A+1)) + (2N+2M)^(2(A+1)) + (2N+2M)^(2(A+1)) +... + (2N+2M)^(2(A+1)) + (2N+2M)^(2(A+1)) + (2N+2M)^(2(A+1)) + (2N+2M)^(2(A+1)) + (2N+"
    },
    {
        "number": 4484,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    return str(math.comb(n+m, n)*math.comb(n+m, n) % (10**9+7))\n"
    },
    {
        "number": 4484,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Get number of possible arrangements from the input.\n    :param stdin: input string\n    :return: solution string\n    \"\"\"\n    stdin = stdin.split(\"\\n\")\n    dogs = int(stdin[0].split(\" \")[0])\n    mimes = int(stdin[0].split(\" \")[1])\n    # Get the possible arrangements\n    possibilities = []\n    for i in range(dogs):\n        possibilities.append(\"AB\")\n    for i in range(dogs - 1):\n        possibilities.append(\"AC\")\n    for i in range(dogs - 1):\n        possibilities.append(\"AD\")\n    for i in range(dogs - 1):\n        possibilities.append(\"BC\")\n    for i in range(dogs - 1):\n        possibilities.append(\"BD\")\n    for i in range(dogs - 1):\n        possibilities.append(\"CD\")\n    # Convert the possibilities to a set\n    possibilities = set(possibilities)\n    # Find the possible arrangements\n    for i in range(dogs - 1):\n        for j in range(dogs - 1):\n            for k in range(dogs - 1):\n                for l in range(dogs - 1):\n                    if i == j and i == k and i == l:\n                        continue\n                    else:\n                        possibilities.add(possibilities.pop() + \"A\" + possibilities.pop() + \"B\" + possibilities.pop() + \"C\" + possibilities.pop() + \"D\")\n    # Convert the possibilities to a set\n    possibilities = set(possibilities)\n    # Find the number of possible arrangements\n    print(len(possibilities))\n\nsolution(stdin)\n-----\nimport sys\n\ndef"
    },
    {
        "number": 4484,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    _, n, m = stdin.split('\\n')\n    n, m = int(n), int(m)\n    return (2**n)*(2**m) % 1000000007\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4485,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split('\\n')[:2])\n\n    s = set()\n    for i in range(1, N + 1):\n        s.add(i)\n    for i in range(M):\n        a, b = map(int, stdin.split('\\n')[2 + i].split(' '))\n        s.discard(a)\n        s.discard(b)\n    if len(s) == 0:\n        return 'POSSIBLE'\n    return 'IMPOSSIBLE'\n"
    },
    {
        "number": 4485,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, M = [int(x) for x in stdin.split(\" \")]\n    islands = []\n    for _ in range(N):\n        islands.append(tuple(map(int, stdin.split(\" \"))))\n    # print(islands)\n    for _ in range(M):\n        islands.append(tuple(map(int, stdin.split(\" \"))))\n    # print(islands)\n    islands.append((1, N))\n\n    for i in range(M):\n        a, b = islands[i]\n        if a == 1 and b == N:\n            return \"POSSIBLE\"\n\n    for i in range(M):\n        a, b = islands[i]\n        for j in range(M):\n            if i == j:\n                continue\n            aa, bb = islands[j]\n            if aa == a and bb == b:\n                return \"POSSIBLE\"\n\n    return \"IMPOSSIBLE\"\n"
    },
    {
        "number": 4485,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Reads inputs and returns the solution as a string\"\"\"\n    n, m = [int(x) for x in stdin.split(' ')]\n    islands = {}\n    for _ in range(n):\n        islands[stdin.split(' ')[0]] = stdin.split(' ')[1]\n    islands_set = set()\n    for _ in range(m):\n        islands_set.add((stdin.split(' ')[0], stdin.split(' ')[1]))\n    if len(islands) == m:\n        return \"POSSIBLE\"\n    elif len(islands)!= m and len(islands) - 2 == m:\n        for island in islands:\n            if islands[island] == \"1\" or islands[island] == \"2\":\n                try:\n                    for island2 in islands:\n                        if islands[island] == islands[island2]:\n                            islands_set.add((island, island2))\n                except KeyError:\n                    pass\n            else:\n                try:\n                    for island2 in islands:\n                        if islands[island]!= islands[island2]:\n                            islands_set.add((island, island2))\n                except KeyError:\n                    pass\n    return \"IMPOSSIBLE\" if len(islands)!= m and len(islands) - 2!= m else \"POSSIBLE\"\n"
    },
    {
        "number": 4485,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    num_islands = stdin.split('\\n')[0].split()\n    num_islands = int(num_islands[0])\n    num_boats = stdin.split('\\n')[1].split()\n    num_boats = int(num_boats[0])\n    islands = {}\n    boats = {}\n    for i in range(num_boats):\n        line = stdin.split('\\n')[i+2].split()\n        boats[i] = (int(line[0]), int(line[1]))\n    for j in range(num_islands):\n        islands[j] = stdin.split('\\n')[j+2].split()\n    # print(num_islands)\n    # print(num_boats)\n    # print(islands)\n    # print(boats)\n\n    invalid_lines = []\n    for key in islands:\n        if key in invalid_lines:\n            continue\n        # print(invalid_lines)\n        for key2 in islands:\n            if key2 in invalid_lines:\n                continue\n            # print(invalid_lines)\n            if key == key2 or key in islands[key2] or key2 in islands[key]:\n                continue\n            invalid_lines.append(key2)\n\n    # print(invalid_lines)\n    # print(len(invalid_lines))\n    invalid_lines = set(invalid_lines)\n    # print(invalid_lines)\n    # print(len(invalid_lines))\n\n    if len(invalid_lines) < len(islands) - 1:\n        return 'POSSIBLE'\n    else:\n        return 'IMPOSSIBLE'"
    },
    {
        "number": 4485,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    a = set()\n    b = set()\n    for _ in range(m):\n        a, b = map(int, stdin.split(' '))\n        a, b = a-1, b-1\n        a, b = min(a, b), max(a, b)\n        a, b = min(a, b), max(a, b)\n        a, b = min(a, b), max(a, b)\n        a, b = min(a, b), max(a, b)\n        a, b = min(a, b), max(a, b)\n        a, b = min(a, b), max(a, b)\n        a, b = min(a, b), max(a, b)\n        a, b = min(a, b), max(a, b)\n        a, b = min(a, b), max(a, b)\n        a, b = min(a, b), max(a, b)\n        a, b = min(a, b), max(a, b)\n        a, b = min(a, b), max(a, b)\n        a, b = min(a, b), max(a, b)\n        a, b = min(a, b), max(a, b)\n        a, b = min(a, b), max(a, b)\n        a, b = min(a, b), max(a, b)\n        a, b = min(a, b), max(a, b)\n        a, b = min(a, b), max(a, b)\n        a, b = min(a, b), max(a, b)\n        a, b = min(a, b), max(a, b)\n        a, b = min(a, b), max(a, b)\n        a, b = min(a, b), max(a, b)\n        a, b = min(a, b), max(a, b)\n        a, b = min(a, b), max(a, b)\n        a, b = min(a, b), max(a, b)\n        a, b = min(a, b), max(a, b)\n        a, b = min(a, b), max(a, b)\n        a, b = min(a, b), max(a, b)\n        a, b = min(a, b), max(a, b)\n        a, b = min(a, b), max(a, b)\n        a, b = min(a, b), max(a, b)\n        a, b = min(a, b), max(a, b)\n        a, b = min(a, b), max(a, b)\n        a, b = min(a, b), max(a, b)\n        a, b = min(a, b), max(a, b)\n        a, b = min(a, b), max(a, b)\n        a, b = min(a, b), max(a, b)\n        a, b = min(a, b), max(a, b)\n        a, b = min(a, b), max(a, b)\n        a, b = min(a, b), max(a, b)\n        a, b = min(a, b), max(a, b)\n        a, b = min(a, b), max(a, b)\n        a, b = min(a, b), max(a, b)\n        a, b = min(a, b), max(a, b)\n        a, b = min(a, b), max(a, b)\n        a, b = min(a, b), max(a, b)\n        a, b = min(a, b), max(a, b)\n        a, b = min(a, b), max(a, b)\n        a, b = min(a, b), max(a, b)\n        a, b = min(a, b), max(a, b)\n        a, b = min(a, b), max(a, b)\n        a, b = min(a, b), max(a, b)\n        a, b = min(a, b), max(a, b)\n        a, b = min(a, b), max(a, b)\n        a, b = min(a, b), max(a, b)\n        a, b = min(a, b), max(a, b)\n        a, b = min(a, b), max(a, b)\n        a, b = min(a, b), max(a, b)\n        a, b = min(a, b), max(a, b)\n        a, b = min(a, b), max(a, b)\n        a, b = min(a, b), max(a, b)\n        a, b = min(a, b), max(a, b)\n        a, b = min(a, b), max(a, b)\n        a, b = min(a, b), max(a, b)\n        a, b = min(a, b), max(a, b)\n        a, b = min(a, b), max(a, b)\n        a, b = min(a, b), max(a, b)\n        a, b = min(a, b), max(a, b)\n        a, b = min(a, b), max(a, b)\n        a, b = min(a, b), max(a, b)\n        a, b = min(a, b), max(a, b)\n        a, b = min(a, b), max(a, b)\n        a, b = min(a, b), max(a, b)\n        a, b = min(a, b), max(a, b)\n        a, b = min(a, b), max(a, b)\n        a, b = min(a, b), max(a, b)\n        a, b = min(a, b), max(a, b)\n        a, b = min(a, b), max(a, b)\n        a, b = min(a, b), max(a, b)\n        a, b = min(a, b), max(a, b)\n        a, b = min(a, b), max(a, b)\n        a, b = min(a, b), max(a, b)\n        a, b = min(a, b), max(a, b)\n        a, b = min(a, b), max(a, b)\n        a, b = min(a, b), max(a, b)\n        a, b = min(a, b), max(a, b)\n        a, b = min(a, b), max(a, b)\n        a, b = min(a, b), max(a, b)\n        a, b = min(a, b), max(a, b)\n        a, b = min(a, b), max(a, b)\n        a, b = min(a, b), max(a, b)\n        a, b"
    },
    {
        "number": 4485,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    edges = []\n    for _ in range(m):\n        u, v = map(int, stdin.split())\n        edges.append((u, v))\n\n    edges = list(set(edges))\n    #print(edges)\n    graph = [[] for _ in range(n)]\n    for u, v in edges:\n        graph[u-1].append(v-1)\n    #print(graph)\n    stack = [0]\n    visited = [False for _ in range(n)]\n    visited[0] = True\n\n    while len(stack) > 0:\n        u = stack.pop()\n        for v in graph[u]:\n            if visited[v]:\n                continue\n            visited[v] = True\n            stack.append(v)\n    return 'POSSIBLE' if all(visited) else 'IMPOSSIBLE'\n"
    },
    {
        "number": 4485,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, M = [int(x) for x in stdin.split()]\n    sources = set()\n    for _ in range(M):\n        sources.add((int(stdin.readline())))\n    destination = N\n\n    return \"POSSIBLE\" if (1, destination) in sources else \"IMPOSSIBLE\""
    },
    {
        "number": 4485,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, M = [int(x) for x in stdin.split(\" \")]\n    edges = []\n    for i in range(M):\n        edges.append([int(x) for x in stdin.split(\" \")])\n    edges = sorted(edges)\n\n    G = [[] for _ in range(N)]\n    for u, v in edges:\n        G[u - 1].append(v - 1)\n        G[v - 1].append(u - 1)\n\n    seen = set()\n\n    def dfs(u: int):\n        if u in seen:\n            return False\n        seen.add(u)\n        for v in G[u]:\n            if v not in seen:\n                dfs(v)\n        return True\n\n    ans = dfs(0)\n    return \"POSSIBLE\" if ans else \"IMPOSSIBLE\""
    },
    {
        "number": 4485,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n\n    graph = {1: [2]}\n    for _ in range(m):\n        a, b = map(int, stdin.split(' '))\n        graph[a].append(b)\n        graph[b].append(a)\n\n    visited = set()\n    queue = deque()\n    queue.append((1, 0))\n\n    while queue:\n        current_node, depth = queue.popleft()\n        if current_node == n:\n            return 'POSSIBLE'\n        if current_node in visited:\n            continue\n        visited.add(current_node)\n        for node in graph[current_node]:\n            queue.append((node, depth + 1))\n    return 'IMPOSSIBLE'\n"
    },
    {
        "number": 4485,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    n, m = map(int, stdin.split(' '))\n    for i in range(m):\n        a, b = map(int, stdin.split(' '))\n    if n == 1:\n        return 'POSSIBLE'\n    return 'IMPOSSIBLE'\n"
    },
    {
        "number": 4486,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin[1::2]\n"
    },
    {
        "number": 4486,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return stdin[::2]\n\"\"\"\n\n\"\"\"\nSample Input 1\n\nabcdefghijklmnopqrstuvwxyz\n\nSample Output 1\n\ncdefghijklmnopqrstuvwxyzab\n\nSample Input 2\n\nabcdefghijklmnopqrstuvwxyz\n\nSample Output 2\n\nabdefghijklmnopqrstuvwxyzabc\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4486,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return stdin[1::2]\n\"\"\"\ndef"
    },
    {
        "number": 4486,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return stdin[1::2]"
    },
    {
        "number": 4486,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return stdin[1::2]\n"
    },
    {
        "number": 4486,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return stdin[::2]\n\"\"\""
    },
    {
        "number": 4486,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    return ''.join([s[i] for i in range(1, len(s), 2)])\n\"\"\"\n\ndef"
    },
    {
        "number": 4486,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return stdin[1::2]"
    },
    {
        "number": 4486,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\ndef"
    },
    {
        "number": 4486,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return ''.join([stdin[i] for i in range(1, len(stdin), 2)])"
    },
    {
        "number": 4487,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    words = stdin.split()\n    if len(words) < 2:\n        return 'NO'\n    a = words[0]\n    b = words[1]\n    c = words[2]\n    if a[-1] == b[0] and b[-1] == c[0]:\n        return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 4487,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n  a, b, c = stdin.split()\n  \n  if a[-1] == b[0] and b[-1] == c[0]:\n    return 'YES'\n  return 'NO'\n"
    },
    {
        "number": 4487,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    input_line = stdin.split('\\n')\n    word1, word2, word3 = input_line\n    return 'YES' if word1[-1] == word2[0] and word2[-1] == word3[0] else 'NO'"
    },
    {
        "number": 4487,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = stdin.split()\n    return 'YES' if a[-1] == b[0] and b[-1] == c[0] else 'NO'\n\"\"\"\n\nimport sys\nimport os\nfrom functools import reduce\n\ndef"
    },
    {
        "number": 4487,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split()\n    \n    if len(a[0]) == len(a[1]) == len(a[2]):\n        if a[0][-1] == a[1][0] and a[1][-1] == a[2][0]:\n            return 'YES'\n        else:\n            return 'NO'\n    else:\n        return 'NO'\n\"\"\"\n\ndef"
    },
    {
        "number": 4487,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = stdin.split()\n    if a[0] == b[0] == c[0]:\n        print(\"YES\")\n    elif a[-1] == b[-1] == c[-1]:\n        print(\"YES\")\n    else:\n        print(\"NO\")"
    },
    {
        "number": 4487,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(str.rstrip, stdin.split(\" \"))\n    if a[-1] == b[0] and b[-1] == c[0]:\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 4487,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = stdin.split()\n    if a[-1] == b[0] and b[-1] == c[0]:\n        return \"YES\"\n    else:\n        return \"NO\"\n\nprint(solution(stdin))"
    },
    {
        "number": 4487,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = stdin.split(\"\\n\")\n    if A[-1] == B[0] and B[-1] == C[0]:\n        return \"YES\"\n    return \"NO\"\n    \n"
    },
    {
        "number": 4487,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = stdin.split()\n    return 'YES' if a[-1] == b[0] and b[-1] == c[0] else 'NO'"
    },
    {
        "number": 4488,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin.readline())\n    b = int(stdin.readline())\n    return \"GREATER\" if a > b else \"LESS\" if a < b else \"EQUAL\"\n\"\"\"\ndef"
    },
    {
        "number": 4488,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return 'GREATER' if int(stdin.split(\"\\n\")[0]) > int(stdin.split(\"\\n\")[1]) else 'LESS' if int(stdin.split(\"\\n\")[0]) < int(stdin.split(\"\\n\")[1]) else 'EQUAL'\n"
    },
    {
        "number": 4488,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    if stdin.split()[0] > stdin.split()[1]:\n        return 'GREATER'\n    elif stdin.split()[0] < stdin.split()[1]:\n        return 'LESS'\n    else:\n        return 'EQUAL'\n"
    },
    {
        "number": 4488,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    return \"GREATER\" if int(a) > int(b) else \"LESS\" if int(a) < int(b) else \"EQUAL\""
    },
    {
        "number": 4488,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    b = int(stdin)\n    if a > b:\n        return \"GREATER\"\n    elif a < b:\n        return \"LESS\"\n    else:\n        return \"EQUAL\"\n"
    },
    {
        "number": 4488,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a > b:\n        return \"GREATER\"\n    if a < b:\n        return \"LESS\"\n    if a == b:\n        return \"EQUAL\""
    },
    {
        "number": 4488,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B = [int(i) for i in stdin.split('\\n')]\n    print(\"GREATER\" if A > B else \"LESS\" if A < B else \"EQUAL\")\n"
    },
    {
        "number": 4488,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(x) for x in stdin.split()]\n    return \"GREATER\" if a > b else \"LESS\" if a < b else \"EQUAL\"\n"
    },
    {
        "number": 4488,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return 'GREATER' if a > b else ('LESS' if a < b else 'EQUAL')\n\ndef"
    },
    {
        "number": 4488,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B = [int(line.strip()) for line in stdin.split('\\n')]\n    return {\n        A > B: 'GREATER',\n        A < B: 'LESS',\n        A == B: 'EQUAL',\n    }[True]\n"
    },
    {
        "number": 4489,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, *s_list, M, *t_list = [int(i) for i in stdin.split()]\n    #print(N, s_list, M, t_list)\n    dp = [[0]*len(s_list) for _ in range(len(t_list))]\n    for i in range(len(s_list)):\n        dp[0][i] = int(s_list[i]==\"apple\")\n    for j in range(len(t_list)):\n        dp[j][0] = int(t_list[j]==\"apple\")\n    for i in range(1, len(t_list)):\n        for j in range(1, len(s_list)):\n            if t_list[i]==s_list[j]:\n                dp[i][j] = dp[i-1][j-1]+1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    #print(dp)\n    return N+M-dp[-1][-1]\n\ndef"
    },
    {
        "number": 4489,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N: int = int(stdin.readline())\n    _s = [stdin.readline().strip() for _ in range(N)]\n    _t = [stdin.readline().strip() for _ in range(N)]\n    count = 0\n    for i in range(len(_s)):\n        for j in range(len(_t)):\n            if _s[i] == _t[j]:\n                count += 1\n    return count"
    },
    {
        "number": 4489,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, s, t = map(str, stdin.split())\n    N = int(N)\n    s, t = ''.join(s), ''.join(t)\n    ans = 0\n    for i in range(1, N):\n        if t == s[i - 1] and t == s[i]:\n            ans += 1\n    return ans"
    },
    {
        "number": 4489,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Takahashi has N blue cards and M red cards.\n    A string is written on each card. The string written on the i-th blue card is s_i, and the string written on the i-th red card is t_i.\n    Takahashi will now announce a string, and then check every card. Each time he finds a blue card with the string announced by him, he will earn 1 yen (the currency of Japan); each time he finds a red card with that string, he will lose 1 yen.\n    Here, we only consider the case where the string announced by Takahashi and the string on the card are exactly the same. For example, if he announces atcoder, he will not earn money even if there are blue cards with atcoderr, atcode, btcoder, and so on. (On the other hand, he will not lose money even if there are red cards with such strings, either.)\n    At most how much can he earn on balance?\n    >>> solution('''3\n   ... apple\n   ... orange\n   ... apple\n   ... 1\n   ... grape''')\n    2\n    \"\"\"\n    # input parsing\n    n = int(stdin.split('\\n')[0])\n    b = []\n    for i in stdin.split('\\n')[1:n + 1]:\n        b.append(i)\n    m = int(stdin.split('\\n')[n + 1])\n    r = []\n    for i in stdin.split('\\n')[n + 2:n + m + 2]:\n        r.append(i)\n    # solution\n    b.sort()\n    r.sort()\n    print(b.index(r[0]))\n"
    },
    {
        "number": 4489,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, s_list, t_list = stdin.split(\"\\n\")\n    N = int(N)\n    s_list = s_list.split()\n    t_list = t_list.split()\n    return solve(N, s_list, t_list)\n\ndef"
    },
    {
        "number": 4489,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split('\\n')[:2])\n    p = stdin.split('\\n')[2:]\n\n    cnt = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if p[i] == p[j]:\n                cnt += 1\n    return cnt"
    },
    {
        "number": 4489,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0:int(stdin.split('\\n')[0])]\n    s = s[1:len(s)-1]\n    t = stdin[len(s)+2:len(stdin.split('\\n')[0])]\n    t = t[1:len(t)-1]\n    count = 0\n    for i in range(len(s)):\n        if s[i] == t[i]:\n            count += 1\n    return count"
    },
    {
        "number": 4489,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3\\napple\\norange\\napple\\n1\\ngrape\")\n    '2'\n    \"\"\"\n    blue_cards = stdin.split(\"\\n\")[0]\n    red_cards = stdin.split(\"\\n\")[1]\n    blue_cards = blue_cards.split(\"\\n\")[1:]\n    red_cards = red_cards.split(\"\\n\")[1:]\n    answer = 0\n    for blue_card in blue_cards:\n        for red_card in red_cards:\n            if blue_card == red_card:\n                answer += 1\n    return str(answer)\n"
    },
    {
        "number": 4489,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, *strs = stdin.split('\\n')\n    N, M = map(int, N.split())\n    strs = [s for s in strs if len(s) <= 10]\n    strs_set = set(strs)\n\n    ans = 0\n    for _ in range(M):\n        s = stdin.split('\\n')[1]\n        if s in strs_set:\n            ans += 1\n        else:\n            ans -= 1\n    return str(ans)\n"
    },
    {
        "number": 4489,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\ndef"
    },
    {
        "number": 4490,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    input_ = stdin\n    # input_ = input().strip()\n    bond = \"\"\n    if input_ == \"A\":\n        bond = \"T\"\n    elif input_ == \"C\":\n        bond = \"G\"\n    elif input_ == \"G\":\n        bond = \"C\"\n    else:\n        bond = \"A\"\n    print(bond)\n    return bond\n"
    },
    {
        "number": 4490,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return {\n        'A': 'T',\n        'T': 'A',\n        'C': 'G',\n        'G': 'C',\n    }[stdin]\n"
    },
    {
        "number": 4490,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    A: T, T: A\n    C: G, G: C\n    \"\"\"\n    b = stdin\n    if b == \"A\":\n        return \"T\"\n    elif b == \"C\":\n        return \"G\"\n    elif b == \"G\":\n        return \"C\"\n    elif b == \"T\":\n        return \"A\"\n    return \"\"\n\ndef"
    },
    {
        "number": 4490,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    A : G\n    C : T\n    G : A\n    T : C\n\n    >>> solution('A')\n    'T'\n    >>> solution('C')\n    'G'\n    >>> solution('G')\n    'A'\n    >>> solution('T')\n    'C'\n    \"\"\"\n    return {'A': 'T', 'C': 'G', 'G': 'A', 'T': 'C'}[stdin]\n"
    },
    {
        "number": 4490,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    b = stdin\n    if b == 'A':\n        return 'T'\n    elif b == 'C':\n        return 'G'\n    elif b == 'G':\n        return 'C'\n    else:\n        return 'A'\n"
    },
    {
        "number": 4490,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4490,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    b = stdin\n    if b == 'A':\n        print('T')\n    elif b == 'C':\n        print('G')\n    elif b == 'G':\n        print('C')\n    else:\n        print('A')\n    return\n\n\ndef"
    },
    {
        "number": 4490,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4490,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4490,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    base = stdin[0]\n    if base == \"A\":\n        return \"G\"\n    elif base == \"C\":\n        return \"T\"\n    elif base == \"G\":\n        return \"A\"\n    else:\n        return \"C\"\n"
    },
    {
        "number": 4491,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''Find the maximum number of candies you can collect.\n    :param stdin: The input string\n    :return: The number of collected candies\n    '''\n    # Get the input\n    n = int(stdin.readline())\n    array = [int(x) for x in stdin.readline().split()]\n\n    # Get the longest distance in the array\n    distance = max(array)\n\n    # Obtain the number of candies we can collect\n    total = distance * 2\n\n    # Get the indices for the furthest left and right we can go\n    indices = [array.index(distance), len(array) - array[::-1].index(distance) - 1]\n\n    # Iterate through the array and obtain the number of candies we can collect at each position\n    for index in indices:\n        collected = 0\n        while index < len(array):\n            if array[index] == 0:\n                break\n            collected += array[index]\n            array[index] = 0\n            index += 1\n        total = max(total, collected)\n\n    return total\n"
    },
    {
        "number": 4491,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # get the input\n    # N = int(stdin.readline().strip())\n    # A = [list(map(int, stdin.readline().strip().split())) for _ in range(2)]\n    # i = 0\n    # j = 0\n    #\n    # def solve(i, j):\n    #     if i == j == N:\n    #         return A[i][j]\n    #     if j == N:\n    #         return max(solve(i + 1, j), solve(i, j - 1)) + A[i][j]\n    #     if i == N:\n    #         return max(solve(i - 1, j), solve(i, j - 1)) + A[i][j]\n    #\n    #     return max(solve(i + 1, j), solve(i, j + 1), solve(i, j - 1), solve(i + 1, j - 1)) + A[i][j]\n    #\n    # return str(solve(i, j))\n    #\n    # OR\n    #\n    # from itertools import product\n    #\n    # def solve(i, j):\n    #     if i == j == N:\n    #         return A[i][j]\n    #     if j == N:\n    #         return max(solve(i + 1, j), solve(i, j - 1)) + A[i][j]\n    #     if i == N:\n    #         return max(solve(i - 1, j), solve(i, j - 1)) + A[i][j]\n    #\n    #     return max(solve(i + 1, j), solve(i, j + 1), solve(i, j - 1), solve(i + 1, j - 1)) + A[i][j]\n    #\n    # return str(solve(i, j))\n    #\n    # OR\n    #\n    # # dp is only for 2x2, 3x3, 4x4\n    # def dp(i, j):\n    #     if i == j == N:\n    #         return A[i][j]\n    #     if j == N:\n    #         return max(dp(i + 1, j), dp(i, j - 1)) + A[i][j]\n    #     if i == N:\n    #         return max(dp(i - 1, j), dp(i, j - 1)) + A[i][j]\n    #\n    #     return max(dp(i + 1, j), dp(i, j + 1), dp(i, j - 1), dp(i + 1, j - 1)) + A[i][j]\n    #\n    # return str(dp(i, j))\n    #\n    # OR\n    #\n    # # recursive\n    # def solve(i, j):\n    #     if i == j == N:\n    #         return A[i][j]\n    #     if j == N:\n    #         return max(solve(i + 1, j), solve(i, j - 1)) + A[i][j]\n    #     if i == N:\n    #         return max(solve(i - 1, j), solve(i, j - 1)) + A[i][j]\n    #\n    #     return max(solve(i + 1, j), solve(i, j + 1), solve(i, j - 1), solve(i + 1, j - 1)) + A[i][j]\n    #\n    # return str(solve(i, j))\n    #\n    # OR\n    #\n    # # iterative\n    # def solve(i, j):\n    #     dp = [[0] * (N + 1) for _ in range(3)]\n    #     dp[0][1], dp[1][0] = A[0][0], A[0][0]\n    #     dp[1][1], dp[2][0] = dp[1][0] + A[1][0], A[1][0]\n    #     dp[2][1], dp[1][2] = dp[2][0] + A[2][0], A[2][0]\n    #\n    #     for i in range(2, N):\n    #         dp[0][i + 1] = dp[0][i] + A[0][i]\n    #         dp[1][i + 1] = dp[0][i + 1] + A[1][i]\n    #         dp[2][i + 1] = dp[1][i] + A[2][i]\n    #\n    #     dp[0][N + 1] = dp[0][N] + A[0][N]\n    #     dp[1][N + 1] = dp[0][N + 1] + A[1][N]\n    #     dp[2][N + 1] = dp[1][N] + A[2][N]\n    #\n    #     return max(dp[0][N + 1], dp[1][N + 1], dp[2][N + 1])\n    #\n    # return str(solve(i, j))\n    #\n    # OR\n    #\n    # # dynamic programming\n    # def solve(i, j):\n    #     dp = [[[0] * (N + 1) for _ in range(3)] for _ in range(N + 1)]\n    #     dp[0][1][0], dp[0][1][1] = A[0][0], A[0][0]\n    #     dp[0][1][2], dp[0][2][0] = A[0][0] + A[0][1], A[0][0]\n    #     dp[0][2][1], dp[0][2][2] = A[0][1] + A[0][2], A[0][0]\n    #\n    #     for i in range(2, N):\n    #         dp[i][1][0], dp[i][1][1], dp[i][1][2] = dp[i - 1][1][0] + A[i][0], dp[i - 1][1][0] + A[i][0], \\\n    #                                                  dp[i - 1][1][0] + A[i][0]\n    #         dp[i][2][0], dp[i][2][1], dp[i][2][2] = dp[i - 1][1][1] + A[i][0], dp[i - 1][1][1] + A[i][1], \\\n    #                                                  dp[i - 1][1][0] + A[i][1]\n    #\n    #     dp[N][1][0], dp[N][1][1], dp[N][1][2] = dp[N - 1][1][0] + A[N][0], dp[N - 1][1"
    },
    {
        "number": 4491,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = [[int(i) for i in stdin.readline().strip().split(' ')] for _ in range(2)]\n\n    return n + a[0][0] + a[0][1] + a[1][0] + a[1][1]\n\"\"\"\n\ndef"
    },
    {
        "number": 4491,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4491,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 4491,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    (n: int, a: int) = stdin.strip().split()\n    n = int(n)\n    a = [int(x) for x in a]\n    c = 0\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                c += a[i][j]\n            elif i == j + 1 and j!= n - 1:\n                c += a[i][j] + a[i][j + 1]\n            elif i + 1!= j:\n                c += a[i][j] + a[i + 1][j]\n    return str(c)\n\"\"\"\n\n\"\"\"\n-----Explanation-----\nThe problem can be broken down into two subproblems:\n\nFind the maximum candies that can be collected by moving down once. This will be equal to the maximum candies that can be collected by moving right three times.\nFind the maximum candies that can be collected by moving right once. This will be equal to the maximum candies that can be collected by moving down three times.\nNow add the two of these maximum candies together.\n\nBelow is an example of how the maximum candies can be obtained by moving right three times and then moving down once:\n\n\u250c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2510\n\u2502   \u2502   \u2502   \u2502   \u2502   \u2502   \u2502\n\u2502 1 \u2502 2 \u2502 3 \u2502 4 \u2502 5 \u2502 6 \u2502\n\u2502   \u2502   \u2502   \u2502   \u2502   \u2502   \u2502\n\u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2518\n\u250c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2510\n\u2502   \u2502   \u2502   \u2502   \u2502   \u2502   \u2502\n\u2502 1 \u2502 2 \u2502 3 \u2502 4 \u2502 5 \u2502 6 \u2502\n\u2502   \u2502   \u2502   \u2502   \u2502   \u2502   \u2502\n\u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2518\n\u250c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2510\n\u2502   \u2502   \u2502   \u2502   \u2502   \u2502   \u2502\n\u2502 1 \u2502 2 \u2502 3 \u2502 4 \u2502 5 \u2502 6 \u2502\n\u2502   \u2502   \u2502   \u2502   \u2502   \u2502   \u2502\n\u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2518\nThe answer is the maximum of the two above.\n\nIn the above example, we can obtain the above solution by moving down twice and then right three times.\n\"\"\"\n\ndef"
    },
    {
        "number": 4491,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n"
    },
    {
        "number": 4491,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    #\n    # For example, given input:\n    #\n    # 3\n    # 1 2 3\n    # 4 1 2\n    #\n    # You should return:\n    #\n    # 7\n    # 3\n    #\n    # As:\n    #\n    # 3 + 1 + 2 = 7\n    # 4 + 1 + 2 = 7\n    #\n    # and\n    #\n    # 1 + 2 + 3 = 7\n    # 1 + 2 + 3 = 7\n    #\n    # So, the maximum number of candies you can collect is 7.\n    #\n    # Your solution should be able to handle a rectangular matrix with different number of rows and columns.\n    # The number of rows and columns will be given in the first line.\n    # You should print the number of candies collected on a new line.\n    #\n    # Note: Please consider the edge case of an empty matrix as an empty array.\n    #       For example, given input:\n    #       4\n    #       1 2 3 4\n    #       5 6 7 8\n    #       9 10 11 12\n    #       13 14 15 16\n    #\n    #       You should print:\n    #       0\n    #\n    #       As:\n    #\n    #       No candies can be collected since the input matrix has no 1s.\n    #\n    #       In case of a rectangular matrix, the value of i-th row should be equal to the value of j-th column.\n    #\n    #       For example, in the following matrix, the value of the 1st row should be equal to the value of the 1st column.\n    #       Given input:\n    #       4\n    #       1 2 3 4\n    #       5 6 7 8\n    #       9 10 11 12\n    #       13 14 15 16\n    #\n    #       The output should be:\n    #       19\n    #\n    #       Other cases, where the number of rows and columns are not equal, can be handled as well.\n\n    # Create a list of list of integers\n    matrix = [\n        list(map(int, line.split(' ')))\n        for line in stdin.split('\\n')[1:]\n    ]\n\n    # Initialize the result\n    total = 0\n\n    # Add the first row to total\n    total += sum(matrix[0])\n\n    # Add the first column to total\n    for row in matrix:\n        total += row[0]\n\n    # Check each row\n    for row in matrix:\n        # Sum the row\n        row_sum = sum(row)\n\n        # Check each column\n        for col in range(len(matrix)):\n            # If the column is the same as the row,\n            # then we have a 1 in this position.\n            if matrix[col][row] == 1:\n                # Add the number of 1s in the row\n                row_sum += matrix[col][row]\n\n        # Add the row_sum to the total\n        total += row_sum\n\n    # Return the total\n    return total\n\n\n\ntests = [\n    (\n        '5\\n3 2 2 4 1\\n1 2 2 2 1\\n',\n        14\n    ),\n    (\n        '6\\n4 3 2 4 5 1\\n3 2 2 2 1\\n',\n        19\n    ),\n    (\n        '7\\n4 1 2 3 4 1\\n5 6 7 8 9\\n1 2 3 4 5\\n1 2 3 4 5\\n',\n        39\n    ),\n    (\n        '3\\n1 2 3\\n4 1 2\\n',\n        7\n    )\n]\n\nfor input, expected in tests:\n    result = solution(input)\n    print(result == expected, result, expected)\n"
    },
    {
        "number": 4491,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''Finds the maximum number of candies you can collect by following the instructions given in the input.\n    :param stdin: str the input\n    :return: str the output'''\n    n, *row = map(int, stdin.split())\n    return str(sum([max(r[i - 1], r[i + 1]) for i, r in enumerate(row)]))\n"
    },
    {
        "number": 4491,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4492,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    A simple solution is to loop over all the boxes,\n    and then loop over all the boxes again,\n    and so on until we reach the end of the boxes list.\n    If we choose a box that contains at least one candy,\n    we can eat one candy from that box,\n    and then choose another box that contains at least one candy.\n    At that point, we will be able to eat at least two candies,\n    but that will keep the boxes at least three candies apart.\n    '''\n    boxes = [int(line.strip()) for line in stdin]\n    count = 0\n    last_index = len(boxes) - 1\n    while last_index > 0:\n        for i in range(last_index):\n            if boxes[i] > boxes[i + 1]:\n                boxes[i], boxes[i + 1] = boxes[i + 1], boxes[i]\n        last_index -= 1\n        count += 1\n    return count\n"
    },
    {
        "number": 4492,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return str(answer)\n"
    },
    {
        "number": 4492,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4492,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split('\\n')[0].split(' '))\n    candies = list(map(int, stdin.split('\\n')[1].split(' ')))\n    index = 0\n    operations = 0\n    while True:\n        operations += 1\n        if sum(candies[index:]) >= x:\n            break\n        index += 1\n    for i in range(index + 1):\n        if sum(candies[:i]) < x:\n            return str(operations)\n        elif sum(candies[:i]) >= x and sum(candies[i:]) >= x:\n            return str(operations + 1)"
    },
    {
        "number": 4492,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    n, *a = map(int, stdin.split())\n    a.sort()\n    count = 0\n    while len(a) > 0:\n        if len(a) == 1:\n            count += 1\n            break\n        if a[0] + a[-1] <= a[1]:\n            a.pop()\n            count += 1\n        else:\n            a.pop(0)\n            count += 1\n    return str(count)"
    },
    {
        "number": 4492,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    n, *nums = map(int, stdin.split('\\n')[0].split(' '))\n    c = 0\n    for i in range(n):\n        c += (nums[i] // 2)\n        if (nums[i] % 2):\n            c += 1\n    print(c)\n"
    },
    {
        "number": 4492,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\""
    },
    {
        "number": 4492,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 4492,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, K = list(map(int, stdin.split()))\n    A = list(map(int, stdin.split()))\n    c = 0\n    for i in range(N):\n        if A[i] <= K:\n            K -= A[i]\n            c += 1\n        elif A[i] > K:\n            break\n    if K == 0:\n        return str(c)\n    elif K > 0:\n        return str(c + 1)"
    },
    {
        "number": 4492,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # import stdin\n    # input = stdin.read()\n    # input_line = input.split('\\n')  # \uac1c\ud589\ubb38\uc790\ub97c \uae30\uc900\uc73c\ub85c \uc785\ub825\uc744 \ub098\ub214\n    #\n    # test_case = int(input_line[0])  # \uc785\ub825\uc758 \uccab \ubc88\uc9f8 \uc904\uc5d0 \ucf00\uc774\uc2a4 \uc218 \uc77d\uc74c\n    #\n    # for i in range(test_case):\n    #     n, x = map(int, input_line[1 + i].split(' '))\n    #     arr = list(map(int, input_line[2 + i].split(' ')))\n    #\n    #     # print(n, x, arr)\n    #     res = n + 1\n    #     while res > 0:\n    #         for i in range(n):\n    #             if res == 0:\n    #                 break\n    #             if arr[i] > x:\n    #                 continue\n    #             elif res - arr[i] >= 0:\n    #                 res -= arr[i]\n    #                 arr[i] = 0\n    #             else:\n    #                 arr[i] -= res\n    #                 res = 0\n    #     print(sum(arr))\n\n    import sys\n    sys.stdin = open('test_input.txt')\n\n    T = int(input())\n\n    for t in range(1, T + 1):\n        N, X = map(int, input().split())\n        arr = list(map(int, input().split()))\n\n        # print(N, X, arr)\n        res = N + 1\n        while res > 0:\n            for i in range(N):\n                if res == 0:\n                    break\n                elif arr[i] > X:\n                    continue\n                elif res - arr[i] >= 0:\n                    res -= arr[i]\n                    arr[i] = 0\n                else:\n                    arr[i] -= res\n                    res = 0\n\n        print('#{} {}'.format(t, sum(arr)))\n"
    },
    {
        "number": 4493,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    a, b = map(int, stdin.split())\n    return \"Yes\" if a + b == 2 else \"No\"\n"
    },
    {
        "number": 4493,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    nums = stdin.split('\\n')\n    total = 0\n    for i in range(3):\n        for j in range(3):\n            if j == 0:\n                total += int(nums[i][j])\n            elif i == 0:\n                total += int(nums[i][j])\n            else:\n                total -= int(nums[i][j])\n\n    return 'Yes' if total == 0 else 'No'\n\nprint(solution(stdin))"
    },
    {
        "number": 4493,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # init vars\n    a1 = a2 = a3 = b1 = b2 = b3 = 0\n\n    # break input into lines\n    lines = stdin.split('\\n')\n\n    # get vars\n    a1 = int(lines[0].split()[0])\n    a2 = int(lines[1].split()[0])\n    a3 = int(lines[2].split()[0])\n    b1 = int(lines[0].split()[1])\n    b2 = int(lines[1].split()[1])\n    b3 = int(lines[2].split()[1])\n\n    # make sure that a1 + b1 = c11, etc.\n    if a1 + b1!= a2 + b2 or a2 + b2!= a3 + b3 or a1 + b1!= a3 + b3:\n        print('No')\n    else:\n        print('Yes')\n\n    return ''"
    },
    {
        "number": 4493,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    count = 0\n    for i in range(3):\n        for j in range(3):\n            a, b = stdin.split()\n            if int(a) + int(b) == int(c[i][j]):\n                count += 1\n    if count == 6:\n        return \"Yes\"\n    else:\n        return \"No\"\n    \n"
    },
    {
        "number": 4493,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a = [int(x) for x in stdin.split()]\n    total_sum = sum(a)\n    if total_sum % 3!= 0:\n        return \"No\"\n    a_col_sum = [0 for i in range(3)]\n    for i in range(3):\n        for j in range(3):\n            a_col_sum[j] += a[i][j]\n    if any(a_col_sum[i] % 3!= 0 for i in range(3)):\n        return \"No\"\n    a_row_sum = [0 for i in range(3)]\n    for i in range(3):\n        for j in range(3):\n            a_row_sum[i] += a[i][j]\n    if any(a_row_sum[i] % 3!= 0 for i in range(3)):\n        return \"No\"\n    diagonal_sum = 0\n    for i in range(3):\n        for j in range(3):\n            if i == j:\n                diagonal_sum += a[i][j]\n    if diagonal_sum % 3!= 0:\n        return \"No\"\n    for i in range(3):\n        for j in range(3):\n            if i == j:\n                continue\n            diagonal_sum -= a[i][j]\n    if diagonal_sum % 3!= 0:\n        return \"No\"\n    return \"Yes\"\n"
    },
    {
        "number": 4493,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.splitlines()))\n    a_1, a_2, a_3 = a[0], a[1], a[2]\n    a_4, a_5, a_6 = a[3], a[4], a[5]\n    a_7, a_8, a_9 = a[6], a[7], a[8]\n    a_10, a_11, a_12 = a[9], a[10], a[11]\n    a_13, a_14, a_15 = a[12], a[13], a[14]\n    a_16, a_17, a_18 = a[15], a[16], a[17]\n    a_19, a_20, a_21 = a[18], a[19], a[20]\n    b_1, b_2, b_3 = a[21], a[22], a[23]\n    b_4, b_5, b_6 = a[24], a[25], a[26]\n    b_7, b_8, b_9 = a[27], a[28], a[29]\n    b_10, b_11, b_12 = a[30], a[31], a[32]\n    b_13, b_14, b_15 = a[33], a[34], a[35]\n    b_16, b_17, b_18 = a[36], a[37], a[38]\n    b_19, b_20, b_21 = a[39], a[40], a[41]\n    b_22, b_23, b_24 = a[42], a[43], a[44]\n\n    if a_1 + b_1 == a_4 + b_4 and a_2 + b_2 == a_5 + b_5 and a_3 + b_3 == a_6 + b_6 and \\\n            a_1 + b_1 == a_7 + b_7 and a_2 + b_2 == a_8 + b_8 and a_3 + b_3 == a_9 + b_9 and \\\n            a_1 + b_1 == a_10 + b_10 and a_2 + b_2 == a_11 + b_11 and a_3 + b_3 == a_12 + b_12 and \\\n            a_1 + b_1 == a_13 + b_13 and a_2 + b_2 == a_14 + b_14 and a_3 + b_3 == a_15 + b_15 and \\\n            a_1 + b_1 == a_16 + b_16 and a_2 + b_2 == a_17 + b_17 and a_3 + b_3 == a_18 + b_18 and \\\n            a_1 + b_1 == a_19 + b_19 and a_2 + b_2 == a_20 + b_20 and a_3 + b_3 == a_21 + b_21 and \\\n            a_1 + b_1 == a_22 + b_22 and a_2 + b_2 == a_23 + b_23 and a_3 + b_3 == a_24 + b_24:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4493,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    c1, c2, c3 = stdin.split()\n    return 'Yes' if c1[0] + c2[1] + c3[2] == c1[2] + c2[1] + c3[0] else 'No'\n"
    },
    {
        "number": 4493,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a_0 = int(stdin[0].split()[0])\n    a_1 = int(stdin[0].split()[1])\n    a_2 = int(stdin[0].split()[2])\n    b_0 = int(stdin[1].split()[0])\n    b_1 = int(stdin[1].split()[1])\n    b_2 = int(stdin[1].split()[2])\n    c_0 = int(stdin[2].split()[0])\n    c_1 = int(stdin[2].split()[1])\n    c_2 = int(stdin[2].split()[2])\n    if a_0 + b_0 == c_0 and a_1 + b_1 == c_1 and a_2 + b_2 == c_2:\n        return \"Yes\"\n    else:\n        return \"No\"\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4493,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    This function is where you are given the input and you are supposed to solve the\n    problem.\n    \"\"\"\n    data = stdin.split('\\n')\n    expected = [\n        [1, 0, 1],\n        [2, 1, 2],\n        [1, 0, 1]\n    ]\n    for i in range(3):\n        got = list(map(int, data[i].split()))\n        if got!= expected[i]:\n            return 'No'\n    return 'Yes'\n"
    },
    {
        "number": 4493,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \n    a, b, c, d, e, f = (list(map(int, x.split(' '))) for x in stdin.split('\\n'))\n    if [a[0]+b[1], a[1]+b[2], a[2]+b[0]] == [c[0]+d[1], c[1]+d[2], c[2]+d[0]] and [a[0]+e[1], a[1]+e[2], a[2]+e[0]] == [c[0]+f[1], c[1]+f[2], c[2]+f[0]] and [b[0]+e[1], b[1]+e[2], b[2]+e[0]] == [d[0]+f[1], d[1]+f[2], d[2]+f[0]] and [c[0]+d[1], c[1]+d[2], c[2]+d[0]] == [e[0]+f[1], e[1]+f[2], e[2]+f[0]] and [c[0]+f[1], c[1]+f[2], c[2]+f[0]] == [d[0]+e[1], d[1]+e[2], d[2]+e[0]]:\n        return 'Yes'\n    return 'No'\n    \n"
    },
    {
        "number": 4494,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    if stdin == \"ABC\":\n        return \"ARC\"\n    else:\n        return \"ABC\""
    },
    {
        "number": 4494,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    result = stdin\n    result = \"ARC\" if result == \"ABC\" else \"ABC\"\n    return result"
    },
    {
        "number": 4494,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    last_type = stdin[-1]\n    if last_type == \"A\":\n        return \"C\"\n    elif last_type == \"C\":\n        return \"A\"\n"
    },
    {
        "number": 4494,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin[0]\n    if a == \"A\":\n        return \"C\"\n    else:\n        return \"A\"\n"
    },
    {
        "number": 4494,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    last: str = stdin[0]\n    out: str = \"\"\n    for i in range(len(stdin)):\n        if last!= stdin[i]:\n            last = stdin[i]\n            out += stdin[i]\n    return out\n"
    },
    {
        "number": 4494,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    contest_type = stdin\n    if contest_type == 'ABC':\n        contest_type = 'ARC'\n    elif contest_type == 'ARC':\n        contest_type = 'ABC'\n    return contest_type"
    },
    {
        "number": 4494,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    if stdin == \"ABC\":\n        return \"ARC\"\n    else:\n        return \"ABC\"\n"
    },
    {
        "number": 4494,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return 'ARC' if stdin == 'ABC' else 'ABC'"
    },
    {
        "number": 4494,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\""
    },
    {
        "number": 4494,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    if stdin == \"ABC\":\n        return \"ARC\"\n    else:\n        return \"ABC\"\n"
    },
    {
        "number": 4495,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = [int(c) for c in stdin.split(' ')]\n    return str(b - a + 1 - (b - a) // x)\n\"\"\"\n\nfrom math import ceil, floor\n\n\ndef"
    },
    {
        "number": 4495,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nimport math\n\n\ndef"
    },
    {
        "number": 4495,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the number of integers between a and b, inclusive, that are divisible by x\"\"\"\n    pass"
    },
    {
        "number": 4495,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = [int(x) for x in stdin.read().split()]\n    return str(sum(1 for i in range(a, b + 1) if i % x == 0))\n"
    },
    {
        "number": 4495,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = [int(x) for x in stdin.split(' ')]\n    divisible_by_x = []\n    for i in range(a, b+1):\n        if i % x == 0:\n            divisible_by_x.append(i)\n    print(len(divisible_by_x))\n    return \"\"\n"
    },
    {
        "number": 4495,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split(' '))\n    count = 0\n    for i in range(a, b+1):\n        if i % x == 0:\n            count += 1\n    return count"
    },
    {
        "number": 4495,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split(' '))\n    return f'{sum(filter(lambda i: i % x == 0, range(a, b + 1)))}'\n"
    },
    {
        "number": 4495,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n    count = 0\n    for i in range(a, b + 1):\n        if i % x == 0:\n            count += 1\n    return str(count)\n"
    },
    {
        "number": 4495,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(4, 8, 2)\n    3\n    \"\"\"\n    a, b, x = [int(s) for s in stdin.split()]\n    return str(sum(i for i in range(a, b + 1) if i % x == 0))\n"
    },
    {
        "number": 4495,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    check for the smallest possible x that will give n divisibles\n    Time O(log b)\n    Space O(1)\n    '''\n    n, a, b, x = (int(inp) for inp in stdin.split())\n    count = 0\n    for i in range(a, b + 1):\n        if i % x == 0:\n            count += 1\n    return str(count)\n\n\nprint(solution(stdin=input()))\n"
    },
    {
        "number": 4496,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    D = int(stdin)\n    if D == 25:\n        print(\"Christmas\")\n    elif D == 24:\n        print(\"Christmas Eve\")\n    elif D == 23:\n        print(\"Christmas Eve Eve\")\n    elif D == 22:\n        print(\"Christmas Eve Eve Eve\")\n    return \"\"\n"
    },
    {
        "number": 4496,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    d = int(stdin)\n\n    if d == 25:\n        return 'Christmas'\n    elif d == 24:\n        return 'Christmas Eve'\n    elif d == 23:\n        return 'Christmas Eve Eve'\n    else:\n        return 'Wish You a Merry Christmas'\n"
    },
    {
        "number": 4496,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    D = int(stdin)\n\n    if D == 25:\n        return 'Christmas'\n    elif D == 24:\n        return 'Christmas Eve'\n    elif D == 23:\n        return 'Christmas Eve Eve'\n    elif D == 22:\n        return 'Christmas Eve Eve Eve'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4496,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    day = int(stdin)\n    if day == 25:\n        return \"Christmas\"\n    elif day == 24:\n        return \"Christmas Eve\"\n    elif day == 23:\n        return \"Christmas Eve Eve\"\n    else:\n        return \"Christmas Eve Eve Eve\"\n"
    },
    {
        "number": 4496,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    days = stdin.strip()\n    return 'Christmas' if (int(days) == 25) else 'Not Christmas' if (int(days) < 25) else 'Easter'"
    },
    {
        "number": 4496,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return stdout\n"
    },
    {
        "number": 4496,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 25:\n        return \"Christmas\"\n    elif n == 24:\n        return \"Christmas Eve\"\n    elif n == 23:\n        return \"Christmas Eve Eve\"\n    else:\n        return \"Nevermind\"\n"
    },
    {
        "number": 4496,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    D = int(stdin)\n    if D == 25:\n        return \"Christmas\"\n    elif D == 24:\n        return \"Christmas Eve\"\n    elif D == 23:\n        return \"Christmas Eve Eve\"\n    else:\n        return \"Christmas Eve Eve Eve\"\n    \nprint(solution(input()))\n"
    },
    {
        "number": 4496,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    D = int(stdin)\n    if D == 25:\n        return \"Christmas\"\n    elif D == 24:\n        return \"Christmas Eve\"\n    elif D == 23:\n        return \"Christmas Eve Eve\"\n    elif D == 22:\n        return \"Christmas Eve Eve Eve\"\n    else:\n        return \"\"\n"
    },
    {
        "number": 4496,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    day_of_the_year = int(stdin)\n    if day_of_the_year == 25:\n        return \"Christmas\"\n    elif day_of_the_year == 24:\n        return \"Christmas Eve\"\n    elif day_of_the_year == 23:\n        return \"Christmas Eve Eve\"\n    elif day_of_the_year == 22:\n        return \"Christmas Eve Eve Eve\""
    },
    {
        "number": 4497,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"1\"\n"
    },
    {
        "number": 4497,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    number = int(stdin)\n    count = 0\n    for num in range(1, number + 1):\n        if num % 2 == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 4497,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 4497,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    n = 0\n    for i in range(1, N + 1):\n        if i % 2 == 0:\n            n = n + 1\n    return n\n"
    },
    {
        "number": 4497,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    n = int(stdin)\n    lst = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            lst.append(i)\n\n    lst.sort()\n    print(lst[-1])\n"
    },
    {
        "number": 4497,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n  n = int(stdin.readline())\n  s = [1, 0]\n  for i in range(1, n+1):\n    s[i&1] = s[0] + s[1]\n  return s[n&1]"
    },
    {
        "number": 4497,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    r = 0\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            r += 1\n    return str(r)"
    },
    {
        "number": 4497,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [0] * n\n    for i in range(n):\n        a[i] = (i+1) * (i+2) // 2\n    a = sorted(a, reverse=True)\n    return a[0]"
    },
    {
        "number": 4497,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n  N = int(stdin.readline().rstrip())\n  count_max = 0\n  count_max_num = 0\n  for i in range(1, N+1):\n    count = 0\n    for j in range(1, i+1):\n      if i % j == 0:\n        count += 1\n    if count > count_max:\n      count_max = count\n      count_max_num = i\n  return str(count_max_num)\n"
    },
    {
        "number": 4497,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # cast\n    n = int(stdin)\n    # set a flag\n    divisible_by_two_most = 0\n    # init max number of times\n    most_times = 0\n    # init the max number of times\n    for number in range(1, n + 1):\n        # count the number of times it can be divisible by 2\n        times = number / 2\n        # if it's more times, replace the number of times\n        if times > most_times:\n            most_times = times\n            # update divisible by two most\n            divisible_by_two_most = number\n    # return the answer\n    return str(divisible_by_two_most)\n"
    },
    {
        "number": 4498,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = [int(i) for i in stdin.split(' ')]\n    if (a-c <= d) and (b-d <= d):\n        return 'Yes'\n    return 'No'"
    },
    {
        "number": 4498,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = list(map(int, stdin.split()))\n    a_to_b = a + b\n    a_to_c = a + c\n    b_to_c = b + c\n    if d > max(a_to_b, a_to_c, b_to_c):\n        return \"No\"\n    else:\n        return \"Yes\"\n\n\ndef"
    },
    {
        "number": 4498,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = [int(c) for c in stdin.strip().split(' ')]\n\n    return \"Yes\" if a + b <= c and b + c <= d else \"No\"\n"
    },
    {
        "number": 4498,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = list(map(int, stdin.split()))\n    if a + b <= c and b + c <= d:\n        print(\"Yes\")\n    elif a + c <= b and c + b <= d:\n        print(\"Yes\")\n    elif b + c <= a and a + c <= d:\n        print(\"Yes\")\n    elif a + d <= b and b + d <= c:\n        print(\"Yes\")\n    elif b + d <= a and a + d <= c:\n        print(\"Yes\")\n    elif c + d <= b and b + d <= a:\n        print(\"Yes\")\n    else:\n        print(\"No\")"
    },
    {
        "number": 4498,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = [int(n) for n in stdin.split(\" \")]\n    \n    if c - d < b and b < a + d:\n        print(\"Yes\")\n    elif c + d >= b and b >= a - d:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n    \n    return \"\""
    },
    {
        "number": 4498,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = list(map(int, stdin.split()))\n    if b <= d and c <= d:\n        return \"Yes\"\n    elif a <= d and c <= d:\n        return \"Yes\"\n    else:\n        return \"No\"\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4498,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    D = ((B - A) ** 2 + (C - A) ** 2) ** 0.5\n    if D <= 3:\n        return 'Yes'\n    return 'No'\n"
    },
    {
        "number": 4498,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\n=======\ndef"
    },
    {
        "number": 4498,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = list(map(int, stdin.split(\" \")))\n\n    if b - a < d and c - b < d:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4498,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return \"\"\n"
    },
    {
        "number": 4499,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    words = stdin.split()\n    return \"\".join(i[0] for i in words)"
    },
    {
        "number": 4499,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('atcoder beginner contest')\n    ABC\n    \"\"\"\n    return ''.join(map(str.upper, [s for s in stdin.split()]))\n"
    },
    {
        "number": 4499,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    return \"\""
    },
    {
        "number": 4499,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Convert from the input of list of str into list of str\n    list_of_str = stdin.split()\n\n    # Convert to uppercase\n    upper_list = [str_var.upper() for str_var in list_of_str]\n\n    # Concatenate\n    concatenate_str = ''.join(upper_list)\n\n    # Trim\n    trim_str = concatenate_str.strip()\n\n    return trim_str\n\"\"\""
    },
    {
        "number": 4499,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    result = \"\"\n    for s in stdin.split():\n        result += s[0].upper()\n    return result\n"
    },
    {
        "number": 4499,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return ''.join(word[0] for word in stdin.split())"
    },
    {
        "number": 4499,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return \"ABC\"\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4499,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    :param stdin:\n    :return:\n    \"\"\"\n    if len(stdin.split())!= 3:\n        return \"Please provide three words separated by a space\"\n    return \"\".join(word[0] for word in stdin.split()).upper()"
    },
    {
        "number": 4499,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s1, s2, s3 = stdin.split()\n    print(\"ABC\".upper())\n    return \"ABC\"\n"
    },
    {
        "number": 4499,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return \" \".join([w[0] for w in stdin.split()])\n\"\"\"\n\ndef"
    },
    {
        "number": 4500,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nimport sys\n\ndef"
    },
    {
        "number": 4500,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split(' '))\n    if A + B >= C:\n        return 'Yes'\n    return 'No'\n"
    },
    {
        "number": 4500,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n  A, B, C = [int(x) for x in stdin.split(' ')]\n  if C > A + B:\n    return \"No\"\n  if C % 2 == 0:\n    return \"Yes\"\n  else:\n    if A + B >= C:\n      return \"Yes\"\n    else:\n      return \"No\""
    },
    {
        "number": 4500,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = stdin.split()\n    a, b, c = int(a), int(b), int(c)\n    if a + b >= c:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\nprint(solution(input()))\n\"\"\"\n\na, b, c = input().split()\na, b, c = int(a), int(b), int(c)\n"
    },
    {
        "number": 4500,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin.split(' ')[0])\n    b = int(stdin.split(' ')[1])\n    c = int(stdin.split(' ')[2])\n\n    if a == 0 or b == 0:\n        return 'No'\n\n    if c % min(a, b) == 0:\n        return 'Yes'\n    else:\n        return 'No'\n"
    },
    {
        "number": 4500,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n  A, B, C = stdin.split(\" \")\n  A, B, C = int(A), int(B), int(C)\n  if A >= C:\n    print(\"Yes\")\n  else:\n    print(\"No\")\n    return\n  if B >= C:\n    print(\"Yes\")\n  else:\n    print(\"No\")\n    return\n  if C >= (A + B):\n    print(\"Yes\")\n  else:\n    print(\"No\")\n    return\n  return"
    },
    {
        "number": 4500,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('50 100 120')\n    Yes\n    >>> solution('50 100 100')\n    No\n    >>> solution('100 100 120')\n    Yes\n    \"\"\"\n    stdin = stdin.split(' ')\n    a, b, c = int(stdin[0]), int(stdin[1]), int(stdin[2])\n    if b >= c:\n        print('Yes')\n    else:\n        print('No')\n"
    },
    {
        "number": 4500,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n  \"\"\"Gets A, B, and C values from the standard input,\n  then checks if Takahashi can buy a toy that costs C yen.\n\n  Parameters\n  ----------\n  stdin : str\n    The standard input read from the file.\n\n  Returns\n  -------\n  str\n    Yes if Takahashi can buy a toy that costs C yen, or No if not.\n  \"\"\"\n  # read in from standard input\n  A, B, C = map(int, stdin.split())\n\n  # check if Takahashi has enough money\n  if A >= C and B >= C:\n    return \"Yes\"\n  else:\n    return \"No\"\n  \n  # write your code here\n  \"\"\"\n  Given A, B, and C values from the standard input,\n  then checks if Takahashi can buy a toy that costs C yen.\n\n  Parameters\n  ----------\n  stdin : str\n    The standard input read from the file.\n\n  Returns\n  -------\n  str\n    Yes if Takahashi can buy a toy that costs C yen, or No if not.\n  \"\"\"\n  # read in from standard input\n  A, B, C = map(int, stdin.split())\n\n  # check if Takahashi has enough money\n  if A >= C and B >= C:\n    return \"Yes\"\n  else:\n    return \"No\"\n  \n  # write your code here\n"
    },
    {
        "number": 4500,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split(' '))\n    if a * 2 + b >= c:\n        return 'Yes'\n    else:\n        return 'No'"
    },
    {
        "number": 4500,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if b - a >= c:\n        print('Yes')\n    else:\n        print('No')\n\ndef"
    },
    {
        "number": 4501,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 4501,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return \"\""
    },
    {
        "number": 4501,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return ''"
    },
    {
        "number": 4501,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    pass\n"
    },
    {
        "number": 4501,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solve solution\"\"\"\n    stdin = stdin.split('\\n')\n    cards_amount = int(stdin[0])\n    cards_sum = int(stdin[1])\n    cards_numbers = list(map(int, stdin[2].split(' ')))\n\n    # This is an example of how you can solve using for-loops.\n    # This can be extended to multiple loops in an O(n^3) solution.\n    # The inner loop is executed len(cards_numbers) times, hence\n    # the complexity is O(n^3).\n    # This solution has O(n^3) complexity.\n    counter = 0\n    for i in range(len(cards_numbers)):\n        for j in range(i + 1, len(cards_numbers)):\n            for k in range(j + 1, len(cards_numbers)):\n                if cards_numbers[i] + cards_numbers[j] + cards_numbers[k] == cards_sum:\n                    counter += 1\n\n    return str(counter)\n"
    },
    {
        "number": 4501,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the number of ways to select cards such that the average of the written integers is exactly A.\"\"\"\n   ...\n"
    },
    {
        "number": 4501,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return ''"
    },
    {
        "number": 4501,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return \"the number of ways to select cards such that the average is A\""
    },
    {
        "number": 4501,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Your code goes here\n    return None\n"
    },
    {
        "number": 4501,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns a string with the solution\"\"\"\n    # Getting data from stdin\n    numbers = stdin.split(\" \")\n\n    if len(numbers)!= 3:\n        return \"Error: invalid input\"\n\n    # Processing the data\n    try:\n        n = int(numbers[0])\n        a = int(numbers[1])\n    except ValueError:\n        return \"Error: invalid input\"\n\n    numbers = [int(i) for i in numbers[2].split(\" \")]\n    if n < 1 or n > 50:\n        return \"Error: invalid input\"\n    if a < 1 or a > 50:\n        return \"Error: invalid input\"\n\n    # Calculating the result\n    return str(count(n, a, numbers))\n\n\ndef"
    },
    {
        "number": 4502,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    pass\n"
    },
    {
        "number": 4502,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    if n == 0:\n        return '0'\n    s = stdin.readline().strip()\n    if n == 1:\n        return s\n    s = [int(i) for i in s.split()]\n    return''.join(map(str, s))\n    \n"
    },
    {
        "number": 4502,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4\n   ... 1 2 3 4\n   ... ''')\n    '4 2 1 3'\n    \"\"\"\n    seq = [int(num) for num in stdin.splitlines()[1].split()]\n    seq.sort()\n    for _ in range(int(stdin.splitlines()[0])):\n        new_seq = []\n        for i in range(len(seq)):\n            new_seq.append(seq[-i - 1])\n        seq = new_seq\n    return''.join([str(num) for num in seq])\n"
    },
    {
        "number": 4502,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return \" \".join(map(str, stdin.split()))\n"
    },
    {
        "number": 4502,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # return \"\"\n    \n    seq = stdin.split()\n    n = int(seq[0])\n    seq = seq[1:]\n    \n    seq = list(map(int, seq))\n    \n    # print(seq)\n    \n    # Step 1\n    seq.sort()\n    seq.reverse()\n    \n    # print(seq)\n    \n    # Step 2\n    seq.sort(reverse=True)\n    \n    # print(seq)\n    \n    res = \" \".join(map(str, seq))\n    \n    return res\n    \n    # step 1\n    # list.sort(seq)\n    # print(seq)\n    \n    # step 2\n    # list.sort(seq, reverse=True)\n    # print(seq)\n    \n    # step 3\n    # list.sort(seq, reverse=True)\n    # print(seq)\n    \n    # step 4\n    # list.sort(seq)\n    # print(seq)\n    \n    # step 5\n    # list.sort(seq, reverse=True)\n    # print(seq)\n    \n    # step 6\n    # list.sort(seq)\n    # print(seq)\n    \n    # step 7\n    # list.sort(seq, reverse=True)\n    # print(seq)\n    \n    # step 8\n    # list.sort(seq)\n    # print(seq)\n    \n    # step 9\n    # list.sort(seq, reverse=True)\n    # print(seq)\n    \n    # step 10\n    # list.sort(seq)\n    # print(seq)\n    \n    # step 11\n    # list.sort(seq, reverse=True)\n    # print(seq)\n    \n    # step 12\n    # list.sort(seq)\n    # print(seq)\n    \n    # step 13\n    # list.sort(seq, reverse=True)\n    # print(seq)\n    \n    # step 14\n    # list.sort(seq)\n    # print(seq)\n    \n    # step 15\n    # list.sort(seq, reverse=True)\n    # print(seq)\n    \n    # step 16\n    # list.sort(seq)\n    # print(seq)\n    \n    # step 17\n    # list.sort(seq, reverse=True)\n    # print(seq)\n    \n    # step 18\n    # list.sort(seq)\n    # print(seq)\n    \n    # step 19\n    # list.sort(seq, reverse=True)\n    # print(seq)\n    \n    # step 20\n    # list.sort(seq)\n    # print(seq)\n    \n    # step 21\n    # list.sort(seq, reverse=True)\n    # print(seq)\n    \n    # step 22\n    # list.sort(seq)\n    # print(seq)\n    \n    # step 23\n    # list.sort(seq, reverse=True)\n    # print(seq)\n    \n    # step 24\n    # list.sort(seq)\n    # print(seq)\n    \n    # step 25\n    # list.sort(seq, reverse=True)\n    # print(seq)\n    \n    # step 26\n    # list.sort(seq)\n    # print(seq)\n    \n    # step 27\n    # list.sort(seq, reverse=True)\n    # print(seq)\n    \n    # step 28\n    # list.sort(seq)\n    # print(seq)\n    \n    # step 29\n    # list.sort(seq, reverse=True)\n    # print(seq)\n    \n    # step 30\n    # list.sort(seq)\n    # print(seq)\n    \n    # step 31\n    # list.sort(seq, reverse=True)\n    # print(seq)\n    \n    # step 32\n    # list.sort(seq)\n    # print(seq)\n    \n    # step 33\n    # list.sort(seq, reverse=True)\n    # print(seq)\n    \n    # step 34\n    # list.sort(seq)\n    # print(seq)\n    \n    # step 35\n    # list.sort(seq, reverse=True)\n    # print(seq)\n    \n    # step 36\n    # list.sort(seq)\n    # print(seq)\n    \n    # step 37\n    # list.sort(seq, reverse=True)\n    # print(seq)\n    \n    # step 38\n    # list.sort(seq)\n    # print(seq)\n    \n    # step 39\n    # list.sort(seq, reverse=True)\n    # print(seq)\n    \n    # step 40\n    # list.sort(seq)\n    # print(seq)\n    \n    # step 41\n    # list.sort(seq, reverse=True)\n    # print(seq)\n    \n    # step 42\n    # list.sort(seq)\n    # print(seq)\n    \n    # step 43\n    # list.sort(seq, reverse=True)\n    # print(seq)\n    \n    # step 44\n    # list.sort(seq)\n    # print(seq)\n    \n    # step 45\n    # list.sort(seq, reverse=True)\n    # print(seq)\n    \n    # step 46\n    # list.sort(seq)\n    # print(seq)\n    \n    # step 47\n    # list.sort(seq, reverse=True)\n    # print(seq)\n    \n    # step 48\n    # list.sort(seq)\n    # print(seq)\n    \n    # step 49\n    # list.sort(seq, reverse=True)\n    # print(seq)\n    \n    # step 50\n    # list.sort(seq)\n    # print(seq)\n    \n    # step 51\n    # list.sort(seq, reverse=True)\n    # print(seq)\n    \n    # step 52\n    # list.sort(seq)\n    # print(seq)\n    \n    # step 53\n    # list.sort(seq, reverse=True)\n    # print(seq)\n    \n    # step 54\n    # list.sort(seq)\n    # print(seq)\n    \n    # step 55\n    # list.sort(seq, reverse=True)\n    # print(seq)\n    \n    # step 56\n    # list.sort(seq)\n    # print(seq)\n    \n    # step 57\n    # list.sort(seq, reverse=True)\n    # print(seq)\n    \n    # step 58\n    # list.sort(seq)\n    # print(seq)\n    \n    # step 59\n    # list.sort(seq, reverse=True)\n    # print(seq)\n    \n    # step 60\n    # list.sort(seq)\n    # print(seq)\n    \n    # step 61\n    # list.sort(seq, reverse=True)\n    # print(seq)\n    \n    "
    },
    {
        "number": 4502,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    n = int(stdin.split()[0])\n    seq = list(map(int, stdin.split()[1:]))\n    return \" \".join(list(map(str, seq[::-1])))"
    },
    {
        "number": 4502,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\n-----Solution-----\n\ndef"
    },
    {
        "number": 4502,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    b = list(map(lambda x: int(x), stdin.split()))\n    for i in range(n):\n        if i % 2 == 0:\n            b.reverse()\n        else:\n            b.append(b.pop(0))\n    return \" \".join(map(str, b))\n"
    },
    {
        "number": 4502,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    b = [0]\n    for _ in range(n):\n        b.append(int(stdin))\n    while len(b) > 1:\n        b = b[1:] + [b[0]]\n        #print(b)\n    return \" \".join([str(x) for x in b])"
    },
    {
        "number": 4502,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Get input and return output.\"\"\"\n    # Get n and input sequence\n    n = int(stdin)\n    seq = list(map(int, stdin.split()))\n\n    # Define answer\n    ans = []\n\n    # Loop through all operations\n    for _ in range(n):\n        # Append seq and reverse\n        ans.append(seq[-1])\n        seq = seq[::-1]\n\n        # Check if seq is empty\n        if len(seq) == 0:\n            # If it is, return an empty string\n            break\n\n        # Remove first element from seq\n        seq.pop(0)\n\n    return''.join(str(i) for i in ans)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4503,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    h, n = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n\n    def solve(h, n, A):\n        dp = [0] + [float('inf')] * h\n        for i in range(n):\n            for j in range(1, h + 1):\n                if j >= A[i]:\n                    dp[j] = min(dp[j], dp[j - A[i]] + 1)\n\n        return 'Yes' if dp[h] < float('inf') else 'No'\n    return solve(h, n, A)\n"
    },
    {
        "number": 4503,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    H, N = list(map(int, stdin.split()))\n    A = list(map(int, stdin.split()))\n    if N == 1:\n        if H - A[0] < 0:\n            print('No')\n        else:\n            print('Yes')\n        return\n    i = 0\n    while i < N - 1:\n        if H - A[i] < 0:\n            print('No')\n            return\n        H -= A[i]\n        if H - A[i+1] < 0:\n            print('No')\n            return\n        H -= A[i+1]\n        i += 2\n    print('Yes')"
    },
    {
        "number": 4503,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 4503,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4503,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    h, n = map(int, stdin.split(\" \"))\n    a = list(map(int, stdin.split(\" \")))\n    i = 0\n    while h > 0 and i < n:\n        h -= a[i]\n        if h < 0:\n            break\n        i += 1\n    if i == n:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4503,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 4503,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    H, N = map(int, stdin.split(' '))\n    A = list(map(int, stdin.split(' ')))\n\n    # \ucc98\uc74c\uc5d0 \uadf8\ub0e5 \uc190\uc27d\uac8c \ud480\uc5c8\ub2e4\uac00 \uc2dc\uac04\uc774 \ub9ce\uc774 \uac78\ub838\ub2e4.\n    # \uadf8\ub7f0\ub370 \ub0b4\uac00 \uc0dd\uac01\ud55c \ubc29\ubc95\uc73c\ub85c\ub294 \ucd5c\uc18c \uae30\ud68c\ub85c \uacc4\uc0b0\ud558\ub294 \uac83\uc774\uc5c8\ub2e4.\n    # \ubc29\ubc95\uc744 \ucc3e\uc544\uc11c \ud574\uc124\uc744 \ubcf4\ub2c8\uae4c \uadf8\ub0e5 \ud574\ub2f9 \uc2a4\ud0ac\ub9cc \uc4f8 \uc218 \uc788\ub2e4\uba74 \uc18c\uc6a9\ub3cc\uc544\uc11c \ud574\uacb0\ub410\ub2e4.\n    # \uc544\ubb34\ub9ac \ud574\ubcf4\ub824\uace0 \ud588\ub358 \uc2a4\ud0ac\uc774\uba74 \uc4f8 \uc218 \uc788\ub294 \ubaa8\ub4e0 \uc2a4\ud0ac\ub4e4\uc744 \ucc3e\uc544\ub0b4\ub294 \ubc29\uc2dd\uc774 \uac00\uc7a5 \ub098\uc744 \uc218 \uc788\ub294 \uac83 \uac19\ub2e4.\n    # \uc6b0\uc120 \ubaa8\ub4e0 \uc2a4\ud0ac\ub4e4\uc744 \uc548 \uc4f8 \uc218 \uc788\ub294 \uacbd\uc6b0\ub3c4 \uc0dd\uac01\ud574\ubcf4\ub294 \uac83\uc774\ub2e4.\n    # \uadf8 \uc911\uc5d0\uc11c \ub450\ubc88\uc9f8 \uc2a4\ud0ac\uc744 \uc4f8 \uc218 \uc788\ub2e4\uba74 \uadf8\uac83\uc744 \ubc14\ub85c \uc800\uc7a5\ud55c\ub2e4.\n\n    # \uc544\ubb34\ub9ac \ud574\ubcf4\ub824\uace0 \ud588\ub358 \uc2a4\ud0ac\uc774\uba74 \uc4f8 \uc218 \uc788\ub294 \ubaa8\ub4e0 \uc2a4\ud0ac\ub4e4\uc744 \ucc3e\uc544\ub0b4\ub294 \ubc29\uc2dd\uc774 \uac00\uc7a5 \ub098\uc744 \uc218 \uc788\ub294 \uac83 \uac19\ub2e4.\n    # \uadf8 \uc911\uc5d0\uc11c \ub450\ubc88\uc9f8 \uc2a4\ud0ac\uc744 \uc4f8 \uc218 \uc788\ub2e4\uba74 \uadf8\uac83\uc744 \ubc14\ub85c \uc800\uc7a5\ud55c\ub2e4.\n    # \uadf8 \uc911\uc5d0\uc11c \ub450\ubc88\uc9f8 \uc2a4\ud0ac\uc774 \uc788\ub294 \uc2a4\ud0ac\ub4e4\uc744 \ucc3e\ub294 \uac83\uc774 \uc88b\ub2e4.\n    # \uadf8 \uc911\uc5d0\uc11c \ub450\ubc88\uc9f8 \uc2a4\ud0ac\uc774 \uc788\ub294 \uc2a4\ud0ac\ub4e4\uc744 \ubc14\ub85c \uc800\uc7a5\ud558\ub294 \uac83\uc774 \uc88b\ub2e4.\n\n    min_num = 0\n    min_num_list = []\n    for i in range(N):\n        if A[i] > min_num:\n            min_num = A[i]\n        min_num_list.append(min_num)\n\n    # print(min_num_list)\n\n    # \uc2a4\ud0ac\ub4e4 \uc911\uc5d0\uc11c \ub450\ubc88\uc9f8 \uc2a4\ud0ac\uc774 \uc788\ub294 \uc2a4\ud0ac\ub4e4\uc744 \ucc3e\ub294 \uac83\uc774 \uc88b\ub2e4.\n    # \uadf8 \uc911\uc5d0\uc11c \ub450\ubc88\uc9f8 \uc2a4\ud0ac\uc774 \uc788\ub294 \uc2a4\ud0ac\ub4e4\uc744 \ubc14\ub85c \uc800\uc7a5\ud558\ub294 \uac83\uc774 \uc88b\ub2e4.\n    # \uadf8 \uc911\uc5d0\uc11c \ub450\ubc88\uc9f8 \uc2a4\ud0ac\uc774 \uc788\ub294 \uc2a4\ud0ac\ub4e4\uc744 \ubc14\ub85c \uc800\uc7a5\ud558\ub294 \uac83\uc774 \uc88b\ub2e4.\n    # \uc774\ub54c, \uadf8 \uc911\uc5d0\uc11c \ub450\ubc88\uc9f8 \uc2a4\ud0ac\uc774 \uc788\ub294 \uc2a4\ud0ac\ub4e4\uc744 \ubc14\ub85c \uc800\uc7a5\ud558\ub294 \uac83\uc774 \uc88b\ub2e4.\n    # \ub2e4\uc74c \uc2a4\ud0ac\ub4e4 \uc911\uc5d0\uc11c \ub450\ubc88\uc9f8 \uc2a4\ud0ac\uc774 \uc788\ub294 \uc2a4\ud0ac\ub4e4\uc744 \ubc14\ub85c \uc800\uc7a5\ud558\ub294 \uac83\uc774 \uc88b\ub2e4.\n    # \ub2e4\uc74c \uc2a4\ud0ac\ub4e4 \uc911\uc5d0\uc11c \ub450\ubc88\uc9f8 \uc2a4\ud0ac\uc774 \uc788\ub294 \uc2a4\ud0ac\ub4e4\uc744 \ubc14\ub85c \uc800\uc7a5\ud558\ub294 \uac83\uc774 \uc88b\ub2e4.\n    # \uc774\ub54c, \uadf8 \uc911\uc5d0\uc11c \ub450\ubc88\uc9f8 \uc2a4\ud0ac\uc774 \uc788\ub294 \uc2a4\ud0ac\ub4e4\uc744 \ubc14\ub85c \uc800\uc7a5\ud558\ub294 \uac83\uc774 \uc88b\ub2e4.\n    # \uc774\ub54c, \uadf8 \uc911\uc5d0\uc11c \ub450\ubc88\uc9f8 \uc2a4\ud0ac\uc774 \uc788\ub294 \uc2a4\ud0ac\ub4e4\uc744 \ubc14\ub85c \uc800\uc7a5\ud558\ub294 \uac83\uc774 \uc88b\ub2e4.\n    # \uc774\ub54c, \uadf8 \uc911\uc5d0\uc11c \ub450\ubc88\uc9f8 \uc2a4\ud0ac\uc774 \uc788\ub294 \uc2a4\ud0ac\ub4e4\uc744 \ubc14\ub85c \uc800\uc7a5\ud558\ub294 \uac83\uc774 \uc88b\ub2e4.\n    # \uc774\ub54c, \uadf8 \uc911\uc5d0\uc11c \ub450\ubc88\uc9f8 \uc2a4\ud0ac\uc774 \uc788\ub294 \uc2a4\ud0ac\ub4e4\uc744 \ubc14\ub85c \uc800\uc7a5\ud558\ub294 \uac83\uc774 \uc88b\ub2e4.\n    # \uc774"
    },
    {
        "number": 4503,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return \"\"\n"
    },
    {
        "number": 4503,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    H, N = map(int, stdin.split(' '))\n    A = map(int, stdin.split(' '))\n    return 'Yes' if H < N or not H or H <= sum(A) + N else 'No'\n\"\"\"\n\nimport sys\n\ndef"
    },
    {
        "number": 4503,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    h, n = map(int, stdin.split(' '))\n    a = map(int, stdin.split(' '))\n    a = list(a)\n    count = 0\n    for i in range(n):\n        if a[i] >= h:\n            count += 1\n    if count >= 1:\n        return 'Yes'\n    else:\n        return 'No'\n\ndef"
    },
    {
        "number": 4504,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    longest = 0\n    for i in range(len(stdin)):\n        if stdin[-i:] == stdin[-i:-i + 1]:\n            longest = len(stdin) - i\n        elif stdin[-i:]!= stdin[-i:-i + 1] and stdin[-i]!= stdin[-i - 1]:\n            longest = len(stdin) - i\n            break\n    print(longest)\n    return longest\n"
    },
    {
        "number": 4504,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    result = 0\n    longest_even = ''\n    for length in range(1, len(s) + 1):\n        for i in range(len(s) - length + 1):\n            if is_even(s[i:i + length]) and length > len(longest_even):\n                longest_even = s[i:i + length]\n                result = length\n    return result\n\ndef"
    },
    {
        "number": 4504,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the longest even string that can be obtained by deleting one or more characters from the end of the input string.\"\"\"\n    return max(\n        (\n            len(stdin),\n            solution(stdin[1:-1]) if len(stdin) > 1 else 0,\n        ),\n        key=lambda x: x[1],\n    )\n"
    },
    {
        "number": 4504,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(len(stdin)):\n        if len(stdin) % 2 == 0:\n            return len(stdin)\n        stdin = stdin[:-1]\n    return 0\n"
    },
    {
        "number": 4504,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin\n    maximum_length = 0\n    while len(S) > 0:\n        S = S.rstrip()\n        if is_even(S):\n            maximum_length = maximum(maximum_length, len(S))\n        S = S.lstrip()\n        if is_even(S):\n            maximum_length = maximum(maximum_length, len(S))\n        S = S.strip()\n        if is_even(S):\n            maximum_length = maximum(maximum_length, len(S))\n        S = S.strip()\n        if is_even(S):\n            maximum_length = maximum(maximum_length, len(S))\n    return maximum_length\n\n\ndef"
    },
    {
        "number": 4504,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # Write your code here\n    s = stdin\n    max_len = 0\n    for i in range(len(s)):\n        if s[i] == 'a':\n            for j in range(i + 1, len(s)):\n                if s[j] == 'a':\n                    curr_len = j - i + 1\n                    if curr_len > max_len:\n                        max_len = curr_len\n                else:\n                    break\n    print(max_len)\n    return max_len\n"
    },
    {
        "number": 4504,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # read input and split into list of strings by lines\n    strs = stdin.split('\\n')\n    # get list of longest even strings\n    longest = []\n    # loop over every string\n    for string in strs:\n        # initiate counter to keep track of how many characters should be deleted\n        count = 0\n        # keep track of how many characters are removed\n        i = 0\n        # set this counter to be the longest string\n        longest = len(string)\n        # loop over each character\n        while i < len(string):\n            # if the character is not even, increase the counter\n            if not string[i].isalpha():\n                count += 1\n                i += 1\n                continue\n            # if the character is even, check how many characters should be deleted\n            if i+1 >= len(string) or not string[i+1].isalpha():\n                # if the current number of deleted characters is greater than the current longest number of deleted characters, set longest to the current number of deleted characters\n                if count > longest:\n                    longest = count\n                # if the current number of deleted characters is less than the current longest number of deleted characters, increase the counter by 1\n                else:\n                    count += 1\n                # reset the counter\n                count = 0\n                # move to the next character\n                i += 1\n            # if the character is even, but the next character is not even, increase the counter\n            else:\n                count += 1\n            # increase the counter\n            i += 1\n        # print the number of characters deleted\n        print(longest)\n    # print the length of the longest even string\n    print(longest)\n    return longest"
    },
    {
        "number": 4504,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    longest_even_string = ''\n    for i in range(len(stdin)):\n        if len(stdin) < 2:\n            return len(stdin)\n        elif len(stdin) == 2:\n            if stdin[0] == stdin[1]:\n                return len(stdin)\n            else:\n                return 0\n        elif stdin[i] == stdin[i + 1]:\n            longest_even_string += stdin[i]\n        else:\n            if len(longest_even_string) > len(longest_even_string):\n                return len(longest_even_string)\n            else:\n                return len(longest_even_string)"
    },
    {
        "number": 4504,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    max_even_string_length = 0\n    longest_even_string = ''\n\n    for string in stdin.split('\\n'):\n        even_strings = []\n        for char in string:\n            even_strings.append(char)\n\n            for i in range(len(string)):\n                if char == string[i]:\n                    if i - 1 >= 0 and char == string[i - 1]:\n                        even_strings.pop(i - 1)\n                    if i + 1 < len(string) and char == string[i + 1]:\n                        even_strings.pop(i + 1)\n\n        if len(even_strings) > max_even_string_length:\n            max_even_string_length = len(even_strings)\n            longest_even_string = ''.join(even_strings)\n\n    return max_even_string_length\n"
    },
    {
        "number": 4504,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    ans = 0\n    longest = 0\n    l = [i for i in stdin]\n    for i in range(len(l)):\n        string = l[:len(l)-i]\n        if is_even(string):\n            ans = len(string)\n            if ans > longest:\n                longest = ans\n    return longest\ndef"
    },
    {
        "number": 4505,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    if stdin == 'abc':\n        return 'Yes'\n    elif stdin == 'bac':\n        return 'Yes'\n    elif stdin == 'acb':\n        return 'No'\n    elif stdin == 'bca':\n        return 'No'\n    elif stdin == 'cab':\n        return 'No'\n    elif stdin == 'cba':\n        return 'No'\n    return 'No'\n"
    },
    {
        "number": 4505,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    first_char = stdin[0]\n    second_char = stdin[1]\n    third_char = stdin[2]\n\n    print(\"Yes\" if second_char!= third_char and first_char!= third_char and first_char!= second_char else \"No\")\n"
    },
    {
        "number": 4505,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # create a set of all the permutations of 'abc'\n    abc = set(permutations(stdin))\n    # check if the input string is in the set of permutations\n    return stdin in abc\n"
    },
    {
        "number": 4505,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    permutation = stdin[0] + stdin[1] + stdin[2]\n    return 'Yes' if permutation == 'abc' or permutation == 'acb' or permutation == 'bac' or permutation == 'bca' or permutation == 'cab' or permutation == 'cba' else 'No'\n"
    },
    {
        "number": 4505,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    s = stdin\n    if s[0] == s[2]:\n        return 'Yes'\n    elif s[1] == s[0]:\n        return 'Yes'\n    elif s[1] == s[2]:\n        return 'Yes'\n    else:\n        return 'No'\n"
    },
    {
        "number": 4505,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split('\\n')\n    if len(s[0]) == 3:\n        if (s[0][0] == s[0][1] and s[0][0] == s[0][2]) or \\\n            (s[0][1] == s[0][0] and s[0][1] == s[0][2]) or \\\n                (s[0][2] == s[0][0] and s[0][2] == s[0][1]):\n            print('Yes')\n        else:\n            print('No')\n    return 'Yes' if len(s[0]) == 3 else 'No'\n\n\ndef"
    },
    {
        "number": 4505,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"bac\")\n    Yes\n    >>> solution(\"abc\")\n    Yes\n    >>> solution(\"cba\")\n    No\n    >>> solution(\"bca\")\n    Yes\n    \"\"\"\n    return \"Yes\" if \"abc\" == stdin[:3] else \"No\"\n"
    },
    {
        "number": 4505,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = stdin.split()\n    a, b, c = b, c, a\n    if stdin == \"\".join(a, b, c):\n        return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4505,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = stdin[0], stdin[1], stdin[2]\n    if a == b and b == c and a!= c:\n        return 'Yes'\n    if a == c and b!= c and b == a:\n        return 'Yes'\n    if c == b and a!= b and a == c:\n        return 'Yes'\n    return 'No'"
    },
    {
        "number": 4505,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0] + stdin[1] + stdin[2]\n    if s == \"abc\":\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4506,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def func(l: int, r: int) -> int:\n        return sum(a[l - 1] * b[l - 1:r] % MOD) % MOD\n\n    MOD = 1000000\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    b = [int(x) for x in stdin.readline().split()]\n    d = [None] * n\n    d[0] = a[0] * b[0]\n    for i in range(1, n):\n        d[i] = d[i - 1] + a[i] * b[i]\n    m = [None] * (n + 1)\n    m[0] = 0\n    for i in range(1, n):\n        m[i + 1] = (m[i] + d[i]) % MOD\n    return m[n]\n"
    },
    {
        "number": 4506,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\nimport time\n\na_num = int(stdin.readline())\nb_num = int(stdin.readline())\n\na_list = [int(num) for num in stdin.readline().split()]\nb_list = [int(num) for num in stdin.readline().split()]\n\ns = set()\n\nfor i in range(b_num):\n    s.add(sum(a * b for a, b in zip(a_list, b_list[: i + 1])))\n    s.add(sum(a * b for a, b in zip(a_list, b_list[i + 1 :])))\n\nprint(min(s))"
    },
    {
        "number": 4506,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4506,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def sum_f(l: int, r: int) -> int:\n        return sum([a[i] * b[i] for i in range(l, r)])\n\n    n, a, b = map(int, stdin.split('\\n')[:3])\n    a, b = a[::-1], b[::-1]\n    l, r = 1, n\n    min_f = sum_f(l, r)\n    while r > 1:\n        mid = (l + r) // 2\n        tmp = sum_f(l, mid)\n        if tmp < min_f:\n            l, min_f = mid, tmp\n        else:\n            r = mid - 1\n    return min_f\n"
    },
    {
        "number": 4506,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Takes the input of an integer n and two arrays of integers a and b of length n each.\n    Reorders the elements of b in a way such that the sum of the product of the i-th element\n    from a and the j-th element from b is minimized.\n    Returns a string of length 10.\n    \"\"\"\n    n = int(stdin)\n    a = [int(x) for x in stdin.split()]\n    b = [int(x) for x in stdin.split()]\n\n    index = list(range(1, n + 1))\n\n    return str(min(\n        [sum(a[i] * b[j] for i, j in zip(index[:l], index[r:])) for l, r in zip(index, index[1:])]\n    ) % int(1e9 + 7))\n"
    },
    {
        "number": 4506,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # return result"
    },
    {
        "number": 4506,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    length = int(stdin[0])\n    a = [int(i) for i in stdin[1].split()]\n    b = [int(i) for i in stdin[2].split()]\n    assert length == len(a) == len(b)\n\n    sum = 0\n    for i in range(length):\n        for j in range(i, length):\n            sum += a[i] * b[j]\n            sum %= 10 ** 8\n\n    return sum\n"
    },
    {
        "number": 4506,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    a.sort()\n    b.sort()\n    ans = 0\n    for i in range(n):\n        ans += a[i] * b[i]\n    return ans % 998244353\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4506,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4506,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n\ndef"
    },
    {
        "number": 4507,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def find_answer():\n        nonlocal n, m, k, prices, free, answer\n        n, m, k = map(int, stdin.split())\n        prices = list(map(int, stdin.split()))\n        free = [list(map(int, stdin.split())) for _ in range(m)]\n        answer = 0\n        for i in range(k + 1):\n            for j in range(n + 1):\n                if i == j == 0:\n                    continue\n                if i == 0:\n                    answer = min(answer, j * prices[j - 1])\n                    continue\n                if j == 0:\n                    answer = min(answer, i * prices[i - 1])\n                    continue\n                if free[0][1] == free[0][0]:\n                    answer = min(answer, free[0][0] + i * prices[i - 1] + j * prices[j - 1])\n                    free = free[1:]\n                    continue\n                answer = min(answer, free[0][0] + i * prices[i - 1] + j * prices[j - 1])\n                free = free[1:]\n        return answer\n\n    answer = find_answer()\n    return str(answer)\n"
    },
    {
        "number": 4507,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # input\n    n, m, k = map(int, stdin.split('\\n')[0].split(' '))\n    costs = list(map(int, stdin.split('\\n')[1].split(' ')))\n    offers = []\n    for i in range(m):\n        offers.append(list(map(int, stdin.split('\\n')[i + 2].split(' '))))\n    # main logic\n    min_cost = 0\n    offers.sort(key=lambda x: x[0])\n    purchases = k // n\n    for i in range(m):\n        cheapest_cost = 0\n        for j in range(purchases):\n            if offers[i][0] <= j + 1:\n                cheapest_cost += offers[i][1]\n            else:\n                break\n        min_cost += cheapest_cost\n        purchases -= cheapest_cost\n    return min_cost\n"
    },
    {
        "number": 4507,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.readline().split())\n    a = [int(c) for c in stdin.readline().split()]\n    x = []\n    for _ in range(m):\n        x.append(int(stdin.readline()))\n    y = []\n    for _ in range(m):\n        y.append(int(stdin.readline()))\n    x.sort()\n    y.sort()\n    d = dict()\n    d[1] = a[0]\n    for i in range(2, n):\n        d[i] = min(d[i - 1] + a[i - 1], d[i - 2] + a[i - 2])\n\n    res = d[k - 1]\n    for i in range(m):\n        res = min(res, d[x[i] - 1])\n        res = min(res, d[k - y[i]])\n    return str(res)\n\"\"\"\n\n\nimport sys\n\ndef"
    },
    {
        "number": 4507,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid(k: int, n: int, m: int, a: list[int]) -> bool:\n        return k > 0 and k <= n and m > 0 and m <= 2 * 10 ** 5 and m <= k\n\n    def parse_line(i: int, line: str) -> tuple[int, list[int]]:\n        n, m, k = map(int, line.split())\n        a = [int(x) for x in line.split()]\n        return i, (n, m, k, a)\n\n    def parse_input(stdin: str) -> dict[int, tuple[int, list[int], dict[int, list[int]]]]:\n        n, m, k = map(int, stdin.split())\n        a = [int(x) for x in stdin.split()]\n        offers = {}\n        for i in range(m):\n            n1, n2, c = map(int, stdin.split())\n            offers[c] = [n1, n2]\n        return {0: (n, m, k, a), 1: offers}\n\n    def solve(data: dict[int, tuple[int, list[int], dict[int, list[int]]]]) -> int:\n        n, m, k, a = data[0]\n        offers = data[1]\n        s = set(a)\n\n        # k >= max(a) and m >= 1 and m <= 2 * 10 ** 5 and m <= k\n        k_max = max(a)\n        if k < k_max:\n            return -1\n        elif m == 1:\n            return max(a) * k\n        else:\n            # \u7b2c\u4e00\u6b65: \u5f97\u5230\u4e00\u4e2a\u6700\u5927\u7684\u7a7a\u95f2\u503c\n            f = set()\n            for i in range(1, k_max + 1):\n                if i in s:\n                    f.add(i)\n            if not f:\n                return -1\n            m_max = max(f)\n\n            # \u7b2c\u4e8c\u6b65: \u5f97\u5230\u4e00\u4e2a\u6700\u5927\u7684\u5229\u6da6\u503c\n            res = 0\n            for c in offers:\n                if c > m_max:\n                    continue\n                a1, a2 = offers[c]\n                f = set()\n                for i in range(1, k_max + 1):\n                    if i in s:\n                        f.add(i)\n                if not f:\n                    return -1\n                f_max = max(f)\n                t = min(c, f_max)\n                res += t * a1\n                for i in range(1, a1 + 1):\n                    s.discard(f_max + i)\n            return res\n\n    return str(solve(parse_input(stdin)))\n\n\n\ndef"
    },
    {
        "number": 4507,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution to the problem.\n    :param stdin: str - input string\n    :return: str - output string\n    \"\"\"\n    return 'String'\n"
    },
    {
        "number": 4507,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    b = [int(x) for x in stdin.split()]\n\n    a.sort()\n    b.sort()\n    b.reverse()\n\n    cost = 0\n    for i in range(k):\n        cost += a[i]\n    for i in range(m):\n        cost += b[i]\n\n    return cost\n\nprint(solution(input()))\n"
    },
    {
        "number": 4507,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    (n, m, k) = [int(x) for x in stdin.split('\\n')[0].split()]\n    prices = [int(x) for x in stdin.split('\\n')[1].split()]\n    offers = []\n    for _ in range(m):\n        (x, y) = [int(x) for x in stdin.split('\\n')[_ + 2].split()]\n        offers.append((x, y))\n    offers.sort(key=lambda x: x[1], reverse=True)\n    res = 0\n    for i in range(k):\n        for _ in range(m):\n            if offers[i][1] == 0:\n                res += offers[i][0] * prices[offers[i][0] - 1]\n                break\n            elif offers[i][0] > 0:\n                offers[i] = (offers[i][0] - 1, offers[i][1])\n                res += offers[i][0] * prices[offers[i][0] - 1]\n                break\n    return str(res)\n"
    },
    {
        "number": 4507,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Clean input\n    N, M, K = list(map(int, stdin.split()))\n    A = list(map(int, stdin.split()))\n    X = list(map(int, stdin.split()))\n    Y = list(map(int, stdin.split()))\n\n    A.sort()\n    X.sort()\n    Y.sort()\n\n    for i in range(M):\n        X.remove(X[0])\n        Y.remove(Y[0])\n\n    return A[K - 1]\n"
    },
    {
        "number": 4507,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''\n"
    },
    {
        "number": 4507,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4508,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4508,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    from collections import deque\n    n, m = [int(e) for e in stdin.split()]\n    tree = [[] for _ in range(n)]\n    for _ in range(m):\n        v, u = [int(e) for e in stdin.split()]\n        tree[v - 1].append(u - 1)\n        tree[u - 1].append(v - 1)\n    dist = [float('inf')] * n\n    dist[0] = 0\n    queue = deque([0])\n    while len(queue) > 0:\n        cur = queue.popleft()\n        for nei in tree[cur]:\n            if dist[nei] > dist[cur] + 1:\n                dist[nei] = dist[cur] + 1\n                queue.append(nei)\n    return dist[n - 1]"
    },
    {
        "number": 4508,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n   ..."
    },
    {
        "number": 4508,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4508,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"\"\"\n   ... 7\n   ... 1 2\n   ... 2 3\n   ... 2 4\n   ... 4 5\n   ... 4 6\n   ... 5 7\n   ... \"\"\")\n    '2'\n    >>> solution(\"\"\"\n   ... 7\n   ... 1 2\n   ... 1 3\n   ... 2 4\n   ... 2 5\n   ... 3 6\n   ... 1 7\n   ... \"\"\")\n    '0'\n    >>> solution(\"\"\"\n   ... 7\n   ... 1 2\n   ... 1 3\n   ... 2 4\n   ... 2 5\n   ... 3 6\n   ... 1 7\n   ... \"\"\")\n    '1'\n    \"\"\"\n    n = int(stdin.readline())\n    p = [set() for i in range(n)]\n    for line in stdin.read().splitlines()[1:]:\n        u, v = map(int, line.split())\n        p[u - 1].add(v - 1)\n        p[v - 1].add(u - 1)\n    return len(edges(p, n)) - 1\n\n\ndef"
    },
    {
        "number": 4508,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 4508,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return '\\n'.join(map(lambda x: str(solution2(x)), stdin.split('\\n')))\ndef"
    },
    {
        "number": 4508,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4508,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, tree = int(stdin.split('\\n')[0]), []\n    for line in stdin.split('\\n')[1:]:\n        tree.append(list(map(int, line.split())))\n    graph = [[0] * n for _ in range(n)]\n    for i in range(len(tree)):\n        u, v = tree[i][0], tree[i][1]\n        graph[u][v], graph[v][u] = 1, 1\n    dist = [[None] * n for _ in range(n)]\n    dist[1][0] = 0\n    queue = [1]\n    while len(queue) > 0:\n        u = queue.pop(0)\n        for v in range(n):\n            if graph[u][v] == 1 and dist[u][v] is None:\n                dist[u][v] = dist[v][u] + 1\n                queue.append(v)\n    answer = 0\n    for i in range(n):\n        answer += dist[1][i]\n        if dist[1][i] > 2:\n            answer = -1\n            break\n    return str(answer)\n\"\"\"\n\n\n\"\"\"\n@d2l.ShowTime\ndef"
    },
    {
        "number": 4508,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4509,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the solution to the problem for the given input.\"\"\"\n    pass\n\n\ndef"
    },
    {
        "number": 4509,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Gets the input and returns the result as a string.\"\"\"\n    pass\n"
    },
    {
        "number": 4509,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    pass\n"
    },
    {
        "number": 4509,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4509,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4509,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split('\\n')[0].split())\n    a = 0\n    for i in range(1, n+1):\n        if i % n!= 0:\n            a = i\n            break\n    return str(a)\n"
    },
    {
        "number": 4509,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Your solution here\n    pass\n"
    },
    {
        "number": 4509,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def gcd(a, b):\n        a, b = a + b, b\n        while b:\n            a, b = b, a % b\n        return a - a // b * b\n\n    def extended_gcd(a, b):\n        if a == 0:\n            return b, 0, 1\n        d, x, y = extended_gcd(b % a, a)\n        return d, y - b // a * x, x\n\n    def mod_inverse(a, m):\n        d, x, y = extended_gcd(a, m)\n        return x % m\n\n    def is_prime(n):\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def is_coprime(a, b):\n        return gcd(a, b) == 1\n\n    a, b = map(int, stdin.split('\\n')[1:])\n\n    i = 0\n    j = 0\n    count = 0\n    while i < b:\n        if is_prime(j) and is_coprime(a, j):\n            count += 1\n            if count == b:\n                print(j)\n                return\n        i += 1\n        j += 1\n"
    },
    {
        "number": 4509,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    "
    },
    {
        "number": 4509,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    @param stdin: the standard input format\n    @return: the standard output format\n    '''\n    pass"
    },
    {
        "number": 4510,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 4510,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \n    # this solution works in O(n+k) time complexity\n    # the stdin of a particular input is as follows:\n    # n: number of messages, k: number of displayed conversations\n    # id_i: id of friend, n_i: number of messages from friend with id_i\n    # if n_i is less than k, then we can ignore it.\n    #\n    # if we treat id_i as a set of k last messages from friend with id_i, then the union of id_i will be a set of k most recent messages from the friend with id_i\n    #\n    # We keep the set of k last messages and remove them from the set of k most recent messages by removing each message from the set of k last messages one by one\n    #\n    # If we have k last messages, we can remove the last message from the set of k last messages, \n    # by the set of k last messages is like a queue. The first message in the queue will be removed, the first message in the queue will be the first message that we removed from the set of k last messages\n    #\n    #\n    # Thus, we can have O(n+k) time complexity, where n is the number of messages, k is the number of displayed conversations.\n\n    n, k = stdin.split('\\n')[0].split()\n    n, k = int(n), int(k)\n    id_list = stdin.split('\\n')[1].split()\n    id_list = [int(id_list[i]) for i in range(len(id_list))]\n\n    k_last = set()\n    for i in range(n):\n        if len(k_last) < k:\n            k_last.add(id_list[i])\n        else:\n            if id_list[i] in k_last:\n                k_last.remove(id_list[i])\n\n    return len(k_last)\n\nsolution('7 2\\n1 2 3 2 1 3 2\\n')"
    },
    {
        "number": 4510,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the answer to the problem\"\"\"\n    return '1'\n"
    },
    {
        "number": 4510,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Returns the list of conversations (in the order they are displayed on the screen) after receiving all messages from stdin.\n    '''\n    n, k = map(int, stdin.split('\\n')[0].split(' '))\n    friend_messages = list(map(int, stdin.split('\\n')[1].split(' ')))\n    num_conversations = min(n, k)\n    conversations = []\n    for i in range(num_conversations):\n        if i == 0:\n            friend_id = friend_messages.pop(0)\n            conversations.append(friend_id)\n            continue\n        if i == num_conversations - 1:\n            friend_id = friend_messages.pop()\n            if friend_id in conversations:\n                conversations.remove(friend_id)\n                conversations.append(friend_id)\n                break\n            else:\n                conversations.append(friend_id)\n                break\n        friend_id = friend_messages.pop(0)\n        if friend_id in conversations:\n            continue\n        else:\n            conversations.append(friend_id)\n    return str(len(conversations)) + '\\n' +''.join(map(str, conversations))\n"
    },
    {
        "number": 4510,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    nums = [int(x) for x in stdin.split()]\n    pos = 0\n    conv = []\n    while len(nums) > 0:\n        new_conv = nums[:k]\n        nums = nums[k:]\n        if len(conv) == 0 or new_conv!= conv[-1][1]:\n            conv.append((new_conv, pos))\n            pos += 1\n        else:\n            conv.pop()\n    print(len(conv))\n    return''.join(map(str, [x[0] for x in conv]))\n"
    },
    {
        "number": 4510,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n"
    },
    {
        "number": 4510,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    return ''\n"
    },
    {
        "number": 4510,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    time complexity: O(N)\n    space complexity: O(N)\n    '''\n    n, k = [int(x) for x in stdin.split(' ')]\n    id_list = [int(x) for x in stdin.split(' ')]\n    n_list = [x for x in range(1, n+1)]\n    index_list = []\n    \n    for id in id_list:\n        if id in n_list:\n            n_list.remove(id)\n            index_list.append(n_list.index(id))\n            n_list.insert(0, id)\n    print(len(index_list))\n    print(' '.join(str(x) for x in index_list))\n    return''"
    },
    {
        "number": 4510,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 4510,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    ids = [int(x) for x in stdin.split()[1:]]\n    m = k\n    cur_list = [0] * (k + 1)\n    for i, id in enumerate(ids):\n        cur_list[i % k + 1] = id\n        m = min(k, m)\n    return m, cur_list\n"
    },
    {
        "number": 4511,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 4511,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 4511,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 4511,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find the maximum damage of a Splay the Sire character can deal.\n\n    Args:\n        stdin (str): input to parse\n\n    Returns:\n        str: string representation of the solution\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4511,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    l = [tuple(map(int, stdin.readline().split())) for _ in range(n)]\n    dp = [[0] * (3 * 10 ** 5 + 1) for _ in range(n + 1)]\n    dp[1][0] = 0\n    dp[1][1] = l[0][1]\n    dp[1][2] = l[0][1] + l[0][2]\n    for i in range(1, n):\n        for j in range(3 * 10 ** 5 + 1):\n            if j - l[i][1] >= 0:\n                dp[i + 1][j] = max(dp[i + 1][j], dp[i][j - l[i][1]] + l[i][1] + l[i][2])\n            if j - l[i][2] >= 0:\n                dp[i + 1][j] = max(dp[i + 1][j], dp[i][j - l[i][2]] + l[i][1])\n            dp[i + 1][j] = max(dp[i + 1][j], dp[i][j])\n    print(dp[n][-1])\n    return ''\n"
    },
    {
        "number": 4511,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4511,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4511,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    :param stdin: input in string format\n    :return: solution flag\n    \"\"\"\n   ...\n\"\"\"\nThe optimal solution uses dynamic programming.\n\nAt turn i we can only play at most 3 cards. So the total number of options we have is 3^i.\n\nWe can cut the game into many subgames.\n\nFor each subgame, there is a \"damage\" as defined by the problem statement.\n\nThe total number of possible subgames is 3^i.\n\nThe subgame consists of (1) to (n-1) cards, (2) to (n-1) actions, and (3) to (n-1) damage.\n\nThen, the maximum damage we can get from the subgame is the maximum of the following:\n\nThe maximum of (1) to (n-1) subgames\nThe maximum of (2) to (n-1) subgames\nThe maximum of (3) to (n-1) subgames\n\nSo the final answer is the maximum of the above 3.\n\nThe optimal solution uses dynamic programming.\n\nAt turn i we can only play at most 3 cards. So the total number of options we have is 3^i.\n\nWe can cut the game into many subgames.\n\nFor each subgame, there is a \"damage\" as defined by the problem statement.\n\nThe total number of possible subgames is 3^i.\n\nThe subgame consists of (1) to (n-1) cards, (2) to (n-1) actions, and (3) to (n-1) damage.\n\nThen, the maximum damage we can get from the subgame is the maximum of the following:\n\nThe maximum of (1) to (n-1) subgames\nThe maximum of (2) to (n-1) subgames\nThe maximum of (3) to (n-1) subgames\n\nSo the final answer is the maximum of the above 3.\n\"\"\"\nfrom functools import lru_cache\n\n\ndef"
    },
    {
        "number": 4511,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport math\n\n\ndef"
    },
    {
        "number": 4511,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    l = [int(x) for x in stdin.splitlines()]\n    dp = [[0 for _ in range(3)] for _ in range(n+1)]\n    dp[0] = [0, 0, 0]\n    for i in range(1, n+1):\n        for j in range(3):\n            for k in range(3):\n                if j!= k:\n                    dp[i][k] = max(dp[i][k], dp[i-1][j] + l[i-1][k])\n    return max(dp[n])\n    \n\"\"\"\n\n\ndef"
    },
    {
        "number": 4512,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    q = int(stdin.readline())\n    while q > 0:\n        q -= 1\n        line = stdin.readline().split()\n        cmd = line[0]\n        if cmd == '1':\n            i, c = map(str, line[1:])\n            i, c = int(i), c\n            s = s[:i] + c + s[i+1:]\n        elif cmd == '2':\n            l, r = map(int, line[1:])\n            l, r = l - 1, r - 1\n            print(len(set(s[l:r + 1])))\n        else:\n            raise NotImplementedError(f'cmd = {cmd}')\n    return s\n"
    },
    {
        "number": 4512,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    \n"
    },
    {
        "number": 4512,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    lenght_string = len(stdin)\n    substring = stdin[0:lenght_string]\n\n    for line in stdin.readlines():\n        if line[0] == 1:\n            first_position, letter = map(int, line.split(\" \"))\n            substring = substring[0:first_position] + letter + substring[first_position + 1: len(substring)]\n        elif line[0] == 2:\n            first_position, last_position = map(int, line.split(\" \"))\n            print(len(set(substring[first_position - 1: last_position])))\n\n    return substring\n"
    },
    {
        "number": 4512,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4512,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    q = int(stdin[1])\n    k = 0\n    f = 0\n    for i in range(q):\n        l = [int(i) for i in stdin[k+2].split(' ')]\n        if l[0] == 1:\n            for j in range(l[1], l[2]+1):\n                if s[j] == l[3]:\n                    s = s[:j] + l[3] + s[j+1:]\n                    f = 1\n                    break\n            if f == 0:\n                s = s[:l[1]] + l[3] + s[l[1]+1:]\n        else:\n            count = 0\n            for j in range(l[1], l[2]+1):\n                if s[j]!= l[3]:\n                    count += 1\n            print(count)\n        k += 1\n    return s"
    },
    {
        "number": 4512,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    n = len(s)\n    q = int(stdin[1])\n    dist = {c: 0 for c in s}\n    for i in range(q):\n        query = stdin[i + 2].split()\n        if query[0] == \"1\":\n            c = query[1]\n            r = query[2]\n            l = int(query[3])\n            for j in range(l, min(n, int(r) + 1)):\n                dist[s[j]] += 1\n        elif query[0] == \"2\":\n            l = int(query[1])\n            r = int(query[2])\n            r = min(r, n)\n            res = 0\n            for j in range(l, r + 1):\n                res += dist[s[j]]\n            print(res)\n        else:\n            raise NotImplementedError\n    return \"\""
    },
    {
        "number": 4512,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"abacaba\")\n    '3'\n    >>> solution(\"dfcbbcfeeedbaea\")\n    '15'\n    \"\"\"\n    s = stdin\n    res = []\n    q = int(stdin.readline())\n    for _ in range(q):\n        query = stdin.readline().split()\n        if query[0] == '1':\n            l, c = int(query[1]), query[2]\n            res.append(len(set(s[l:len(s) if l == 0 else l - 1].replace(s[l], c))))\n        else:\n            l, r = int(query[1]), int(query[2])\n            res.append(len(set(s[l:r].replace(' ', ''))))\n    return '\\n'.join(map(str, res))\n"
    },
    {
        "number": 4512,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4512,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4512,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    string: str = stdin\n    size: int = len(string)\n    query: int = int(stdin)\n    q: int = 0\n    while q < query:\n        l: int = int(stdin)\n        r: int = int(stdin)\n        if l > size or r > size:\n            print(size)\n        else:\n            print(r - l + 1)\n        q += 1\n\n\nsolution(stdin)\n"
    },
    {
        "number": 4513,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for _ in range(t):\n        sudoku = [\n            [\n                int(stdin.readline()[x])\n                for x in range(9)\n            ]\n            for _ in range(9)\n        ]\n        solution = list(map(lambda x: str(x), sudoku))\n        solution = \"\\n\".join(solution)\n        print(solution)\n"
    },
    {
        "number": 4513,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    solution\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4513,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for _ in range(t):\n        s = [int(ch) for ch in stdin.readline().strip()]\n        s = set(s)\n        for i in range(9):\n            if s.intersection(set(sudoku[i])) == set(s):\n                s = set(s)\n                s.discard(sudoku[i][i])\n                if len(s) == 9:\n                    return ''.join(list(map(str, sudoku[i])))\n            else:\n                continue\n\nprint(solution(input()))\n\n\n----\n\ndef"
    },
    {
        "number": 4513,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4513,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for _ in range(t):\n        field = []\n        for i in range(9):\n            field.append(list(map(int, stdin.readline().strip().split())))\n        for i in range(9):\n            for j in range(9):\n                if field[i][j] == 0:\n                    for k in range(1, 10):\n                        field[i][j] = k\n                        if is_anti_sudoku(field):\n                            return \"\".join(map(str, field[i])) + '\\n'\n                    break\n        for j in range(9):\n            for i in range(9):\n                if field[i][j] == 0:\n                    for k in range(1, 10):\n                        field[i][j] = k\n                        if is_anti_sudoku(field):\n                            return \"\".join(map(str, field[i])) + '\\n'\n                    break\n    return \"IMPOSSIBLE\""
    },
    {
        "number": 4513,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    rows = stdin.splitlines()\n    empty_field = []\n    for row in rows:\n        empty_field.append([i for i in row])\n    return_string = \"\"\n    for row_index in range(9):\n        for col_index in range(9):\n            # row and col\n            for i in range(1, 10):\n                if i not in empty_field[row_index] and i not in [row[col_index] for row in empty_field]:\n                    return_string += str(i)\n                    empty_field[row_index][col_index] = i\n                    break\n            # 3x3\n            for i in range(1, 10):\n                row_check_list = [i for i in empty_field[row_index][0:3]] + [i for i in empty_field[row_index][3:6]] + [i for i in empty_field[row_index][6:9]]\n                col_check_list = [i for i in empty_field[0][col_index:col_index+3]] + [i for i in empty_field[1][col_index:col_index+3]] + [i for i in empty_field[2][col_index:col_index+3]]\n                if i not in row_check_list and i not in col_check_list:\n                    return_string += str(i)\n                    empty_field[row_index][col_index:col_index+3] = [i] * 3\n                    break\n            if len(return_string) == 81:\n                break\n        if len(return_string) == 81:\n            break\n    if len(return_string) == 81:\n        return return_string\n    else:\n        return \"No solution.\"\nprint(solution(stdin))"
    },
    {
        "number": 4513,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\nreturn stdin\n"
    },
    {
        "number": 4513,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nprint(solution(input()))\n\n\n-----Explanation-----\n\nThe initial field is :\n\n154873296\n386592714\n729641835\n863725149\n975314628\n412968357\n631457982\n598236471\n247189563\n\nThe first test case is 154873296, the initial field. We change all the elements, which can not be the same as the row, column or block:\n\n154873296\n386592714\n729641835\n863725145\n975314628\n412968357\n631457992\n998236471\n247189563\n\nThe resulting field is anti-sudoku.\n\n\n-----Efficient solution-----\n\ndef"
    },
    {
        "number": 4513,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Sudoku solution.\"\"\"\n    return ''\n"
    },
    {
        "number": 4513,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4514,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    ps = [map(int, stdin.split(' '))]\n    for i in range(m - 1):\n        ps.append(map(int, stdin.split(' ')))\n\n    def dfs(u):\n        su = set()\n        subs = [u]\n        while subs:\n            v = subs.pop()\n            su.add(v)\n            subs.extend(ps[v])\n        return su\n\n    orders = [dfs(i) for i in range(1, n + 1)]\n\n    def lis(u):\n        arr = list(map(len, orders))\n        res = []\n        curr = set()\n        curr.add(u)\n        for i in range(len(arr)):\n            for j in range(i + 1, len(arr)):\n                if arr[i] < arr[j] and curr.issuperset(orders[j]):\n                    curr = curr | orders[j]\n                    arr[i] = max(arr[i], arr[j])\n        return sorted(curr)\n\n    res = [-1] * m\n    for u, k in ps:\n        arr = lis(k)\n        if len(arr) >= k:\n            res[u - 1] = arr[k - 1]\n    return '\\n'.join(map(str, res))\n"
    },
    {
        "number": 4514,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''9 6\n   ... 1 1 1 3 5 3 5 7\n   ... 3 1\n   ... 1 5\n   ... 3 4\n   ... 7 3\n   ... 1 8\n   ... 1 9''')\n    '3 6 8 9 -1 '\n    \"\"\"\n    n, m = map(int, stdin.split())\n    adj = [set() for _ in range(n + 1)]\n    for i in range(1, n):\n        adj[i].add(adj[int(stdin.split()[i])])\n    for _ in range(m):\n        u, k = map(int, stdin.split()[1:])\n        res = []\n        for i in range(1, n + 1):\n            if i == u:\n                res.append(k)\n            else:\n                res.extend([i] * len(adj[i]))\n                for j in adj[i]:\n                    if j!= adj[u]:\n                        res.append(j)\n        print(res[k - 1])\n"
    },
    {
        "number": 4514,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split(\" \")]\n    p = [int(x) for x in stdin.split(\"\\n\")[1:]]\n    q = [int(x) for x in stdin.split(\"\\n\")[2:]]\n    tree = [0] * (n+1)\n    r = [0] * (n+1)\n    for i in range(n-1):\n        tree[p[i]] = p[i+1]\n        r[p[i+1]] = p[i+1]\n    tree[p[-1]] = p[0]\n    r[p[0]] = p[0]\n    for i in range(m):\n        st = q[i]\n        r[st] = st\n        while st!= 1:\n            st = tree[st]\n            r[st] = st\n\n    for i in range(m):\n        x, k = q[i]\n        for j in range(k):\n            x = r[x]\n        print(x)\n\n\nsolution(\"9 6\\n1 1 1 3 5 3 5 7\\n3 1\\n1 5\\n3 4\\n7 3\\n1 8\\n1 9\\n\")\n"
    },
    {
        "number": 4514,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # prepare data\n    _, n = map(int, stdin.split())\n    tree = [set() for _ in range(n + 1)]\n    parents = [0 for _ in range(n + 1)]\n    for _ in range(n - 1):\n        p, c = map(int, stdin.split())\n        tree[p].add(c)\n        parents[c] = p\n\n    # solution\n    def dfs(u):\n        for v in tree[u]:\n            dfs(v)\n        for v in tree[u]:\n            if v > parents[u]:\n                parents[u] = v\n\n    for u, k in map(int, stdin.split()):\n        dfs(u)\n        print(parents[k])\n    return ''\n"
    },
    {
        "number": 4514,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \n    def dfs(vertex):\n        visited[vertex] = True\n        if vertex in dic:\n            for child in dic[vertex]:\n                if not visited[child]:\n                    dfs(child)\n        \n    N, Q = map(int, stdin.split())\n    visited = [False for _ in range(N+1)]\n    dic = {}\n    for i in range(1, N):\n        par, chi = map(int, stdin.split())\n        if par not in dic:\n            dic[par] = [chi]\n        else:\n            dic[par].append(chi)\n        if chi not in dic:\n            dic[chi] = []\n    for _ in range(Q):\n        u, k = map(int, stdin.split())\n        dfs(u)\n        print(k if all(visited[:k]) else -1)\n    return ''"
    },
    {
        "number": 4514,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time complexity: O(n)\n    Space complexity: O(n)\n    \"\"\"\n    n, q = map(int, stdin.split())\n    adj = [[] for _ in range(n)]\n    for _ in range(n - 1):\n        u, v = map(int, stdin.split())\n        adj[u].append(v)\n\n    def dfs(u, k):\n        if len(adj[u]) == 0:\n            return k\n        return dfs(adj[u][0], min(k, len(adj[u])))\n\n    for _ in range(q):\n        u, k = map(int, stdin.split())\n        k = dfs(u, k)\n        if k == float('inf'):\n            print(-1)\n        else:\n            print(k)\n"
    },
    {
        "number": 4514,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split(' ')))\n    parents = list(map(int, stdin.split(' ')))\n    cmds = []\n    for _ in range(m):\n        cmds.append(list(map(int, stdin.split(' '))))\n    \n    ans = []\n    \n    for cmd in cmds:\n        i = cmd[0]\n        k = cmd[1]\n        nodes = [i]\n        while nodes:\n            i = nodes.pop()\n            if i == k:\n                ans.append(i)\n                break\n            parents = tree[i]\n            while parents:\n                i = parents.pop()\n                if i == k:\n                    ans.append(i)\n                    break\n                nodes.append(i)\n                \n        if len(ans) < k:\n            ans.append(-1)\n            \n    print(' '.join(list(map(str, ans))))\n    return ''\n"
    },
    {
        "number": 4514,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    number_of_officers, number_of_queries = map(int, stdin.readline().split())\n    superiors = {int(x) for x in stdin.readline().split()[1:]}\n    superiors.add(1)\n    officer_to_superiors = {1: set()}\n    for i in range(len(superiors) - 1):\n        officer_to_superiors[superiors.pop()] = set()\n    for superior in superiors:\n        for subordinate in list(officer_to_superiors.keys()):\n            officer_to_superiors[subordinate].add(superior)\n    del superiors\n    for _ in range(number_of_queries):\n        officer, number_of_officers_who_will_receive_the_command = map(int, stdin.readline().split())\n        last_officer = get_last_officer_in_the_sequence(officer_to_superiors, number_of_officers_who_will_receive_the_command)\n        print(last_officer if last_officer else -1)\n\n\ndef"
    },
    {
        "number": 4514,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \n    return stdin\n"
    },
    {
        "number": 4514,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    n, m = map(int, stdin.split('\\n')[0].split(' '))\n    parents = list(map(int, stdin.split('\\n')[1].split(' ')))\n\n    graph = [0] * n\n    for i in range(n):\n        graph[i] = [i]\n\n    for parent in parents:\n        graph[parent - 1].append(parent)\n\n    queries = list(map(int, stdin.split('\\n')[2:]))\n\n    for x, k in queries:\n        q = x\n        while len(graph[q - 1]) < k:\n            q = graph[q - 1][-1]\n            if q == x:\n                break\n\n        if q!= x:\n            print(-1)\n            return\n        print(q)\n        for i in range(k):\n            q = graph[q - 1][0]\n            if q == x:\n                break\n            graph[q - 1].pop(0)\n"
    },
    {
        "number": 4515,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find if it is possible to distribute all coins.\"\"\"\n    num_cases = int(stdin.readline())\n    for _ in range(num_cases):\n        a, b, c, n = map(int, stdin.readline().split())\n        if n == a + b + c:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\n    return \"\"\n\n\ndef"
    },
    {
        "number": 4515,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return YES if Alice, Barbara and Cerene can evenly distribute the coins, otherwise return NO\"\"\"\n    test_cases = [case.split() for case in stdin.split(\"\\n\")]\n\n    for case in test_cases:\n        a, b, c, n = int(case[0]), int(case[1]), int(case[2]), int(case[3])\n        if n % 3 == 0:\n            if a == n // 3 and b == n // 3 and c == n // 3:\n                print(\"YES\")\n            else:\n                print(\"NO\")\n        else:\n            print(\"NO\")\n\n\ndef"
    },
    {
        "number": 4515,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4515,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5\n   ... 3 2 8\n   ... 100 101 102 105\n   ... 3 2 1 100000000\n   ... 10 20 15 14\n   ... 101 101 101 3\n   ... ''')\n    'YES'\n    'YES'\n    'NO'\n    'NO'\n    'YES'\n    \"\"\"\n   ...\n"
    },
    {
        "number": 4515,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return \"YES\" if the conditions of the problem are satisfied and \"NO\" otherwise.\"\"\"\n    # write your code in Python 3.6\n    num_test_cases = int(stdin.readline())\n    for _ in range(num_test_cases):\n        a, b, c, n = map(int, stdin.readline().split())\n        if a+b+c == n:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    # your code goes here\n    return \"\"\n"
    },
    {
        "number": 4515,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    stdin.readline().strip()\n    a, b, c, n = [int(i) for i in stdin.readline().split()]\n    return \"YES\" if a + a == b + b == c + c == n else \"NO\"\n    '''\n    def gcd(a, b):\n        return a if b == 0 else gcd(b, a % b)\n\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        a, b, c, n = [int(i) for i in stdin.readline().split()]\n        g = gcd(a, gcd(b, c))\n        if n % g!= 0:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n"
    },
    {
        "number": 4515,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for _ in range(t):\n        a, b, c, n = list(map(int, stdin.split('\\n')[1].split()))\n        if a+b+c!= n:\n            print('YES')\n        else:\n            print('NO')"
    },
    {
        "number": 4515,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # get input\n    n = int(stdin.readline())\n    for _ in range(n):\n        a, b, c, n = map(int, stdin.readline().split())\n        if n - a - b - c == 0:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    return \"\"\n"
    },
    {
        "number": 4515,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    \u041f\u043e\u0441\u0442\u0440\u043e\u0447\u043d\u043e \u0441\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u043c \u0447\u0438\u0441\u043b\u0430,\n    \u0438 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u043c \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0438 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435\n    \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0438\u0437 \u0438\u0441\u043a\u043e\u043c\u044b\u0445 \u0447\u0438\u0441\u0435\u043b.\n    \u0422\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c \u043c\u044b \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u0441\u0443\u043c\u043c\u0443 \u0447\u0438\u0441\u0435\u043b\n    \u043a\u0430\u043a \u043d\u0430\u0431\u043e\u0440 \u043d\u0430\u0431\u043e\u0440\u043e\u0432 \u0447\u0438\u0441\u0435\u043b, \u043d\u0430\u0431\u043e\u0440\u0430 \u043a\u043e\u0442\u043e\u0440\u044b\u0445\n    \u0440\u0430\u0432\u043d\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044e \u0438\u0437 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u043c \u0441\u043f\u0438\u0441\u043a\u0430.\n    \u0415\u0441\u043b\u0438 \u0447\u0438\u0441\u043b\u0430 \u0441\u043e\u0432\u043f\u0430\u0434\u0430\u044e\u0442 \u0441 \u0438\u0441\u043a\u043e\u043c\u044b\u043c\u0438 \u043d\u0430\u043c\u0438, \u0442\u043e \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430\n    \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0435\u0435 \u043f\u0440\u043e\u0432\u0435\u0441\u0442\u0438. \u0418\u043d\u0430\u0447\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u043d\u0430\n    \u044d\u043a\u0440\u0430\u043d \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \"NO\".\n    \"\"\"\n    n = stdin.split()\n    n = [int(i) for i in n]\n    n = list(zip(*n))\n    n = list(n)\n    maxi = max(n[0])\n    mini = min(n[0])\n    for i in n[1]:\n        if i < mini:\n            mini = i\n        if i > maxi:\n            maxi = i\n    if maxi == mini:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 4515,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    test_num = int(stdin.readline())\n    ans = []\n    for i in range(test_num):\n        num = stdin.readline().split()\n        num = [int(j) for j in num]\n        n = num[-1]\n        num = num[:-1]\n        s = sum(num)\n        if (n % s == 0) and ((n // s) % 2 == 0) and (len(set(num)) == 3):\n            ans.append(\"YES\")\n        else:\n            ans.append(\"NO\")\n    print(*ans, sep=\"\\n\")\n    return\n"
    },
    {
        "number": 4516,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4516,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(s) for s in stdin.split()]\n    x = [int(s) for s in stdin.split()]\n    p = [i for i in range(1, n + 1)]\n    result = []\n    for i in range(m - 1):\n        for j in range(i + 1, m):\n            result.append(sum(abs(x[i] - x[j]) for x[i], x[j] in zip(p, p[1:])))\n        p.insert(i, p.pop())\n    result.append(sum(abs(x[m - 1] - x[i]) for x[i], x[m - 1] in zip(p, p[1:])))\n    return''.join(map(str, result))\n"
    },
    {
        "number": 4516,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    x = list(map(int, stdin.readline().split()))\n    \n    \n    def calc_ans(p, x):\n        ans = 0\n        for i in range(m - 1):\n            ans += abs(p.index(x[i]) - p.index(x[i + 1]))\n        return ans\n    \n    ans = []\n    for p in permutations(range(1, n + 1)):\n        ans.append(calc_ans(p, x))\n    \n    print(*ans, sep=' ')\n    return \"\"\n\n\ndef"
    },
    {
        "number": 4516,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    :param stdin: input str\n    :return: str\n    '''\n    n, m = [int(x) for x in stdin.split()]\n    x = [int(x) for x in stdin.split()][1:]\n    assert len(x) == m\n    \n    permutations = set()\n    permutations.add(tuple([i for i in range(1, n+1)]))\n    for i in range(1, n):\n        temp = [x[j] for j in range(i, n)]\n        temp.insert(0, x[i-1])\n        permutations.add(tuple(temp))\n    \n    f = lambda x: sum([abs(x.index(i) - x.index(j)) for i in x for j in x if i < j])\n    return''.join([str(f(p)) for p in permutations])\n\ndef"
    },
    {
        "number": 4516,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Get n and m and list x\n    and count the sum of distances between\n    each two adjacent elements of x in\n    each permutation\n    \"\"\"\n    n, m = [int(i) for i in stdin.split()]\n    x = [int(i) for i in stdin.split()]\n    f = []\n    for i in range(m - 1):\n        f.append(abs(x[i] - x[i + 1]))\n    return \"\\n\".join([str(i) for i in f])\n"
    },
    {
        "number": 4516,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split(' ')]\n    x = [int(x) for x in stdin.split(' ')]\n\n    def get_answer(permutation):\n        ans = 0\n        for i in range(1, m):\n            ans += abs(permutation.index(i) - permutation.index(i + 1))\n        return ans\n\n    def permutation_to_index(permutation):\n        ans = 0\n        for i in range(1, m + 1):\n            ans += permutation.index(i) * i\n        return ans\n\n    def permutation_to_index_by_index(permutation):\n        ans = 0\n        for i in range(1, m + 1):\n            ans += i * permutation.index(i)\n        return ans\n\n    def count_adjacent_elements(permutation):\n        ans = 0\n        for i in range(1, m):\n            ans += abs(permutation.index(i) - permutation.index(i + 1))\n        return ans\n\n    p_1_index = permutation_to_index(x)\n    p_2_index = permutation_to_index_by_index(x)\n\n    print(\n        *[\n            get_answer(x) +\n            get_answer(x[p_2_index:]) +\n            get_answer(x[:p_1_index]) +\n            get_answer(x[p_1_index:p_2_index])\n        ]\n    )\n"
    },
    {
        "number": 4516,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    1. Read input\n    2. Add current position to [0, n] for the beginning of the array.\n    3. Add current position to [0, n] for the end of the array.\n    4. Calculate len(arr) - 1\n    5. Calculate the sum of the differences.\n    '''\n    n, m = map(int, stdin.split('\\n')[0].split())\n    arr = list(map(int, stdin.split('\\n')[1].split()))\n    arr.insert(0, 0)\n    arr.append(n)\n    arr = [arr[i] - arr[i - 1] for i in range(1, len(arr))]\n    print(*arr)\n    print(sum(abs(arr[i] - arr[i + 1]) for i in range(len(arr) - 1)))\n\n\nsolution(input())\n"
    },
    {
        "number": 4516,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x = list(map(int, stdin.split(' ')))\n    n, m = x[0], x[1]\n    stdin = stdin.split(' ')\n    x = list(map(int, stdin[1:]))\n    x = x + [x[0]]\n    x.sort()\n\n    p = [i for i in range(n + 1)]\n\n    for i in range(1, n + 1):\n        t = p[x[i - 1]]\n        p[x[i - 1]] = p[i]\n        p[i] = t\n\n    f = [0] * (n + 1)\n    for i in range(1, n):\n        f[p[i]] += (abs(i - p[i]))\n        f[p[i + 1]] += (abs(i - p[i + 1]))\n\n    return''.join(map(str, f[1:]))\n"
    },
    {
        "number": 4516,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 4516,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split(' ')]\n    x = [int(x) for x in stdin.split(' ')[1:]]\n    def pos(p, val):\n        return p.index(val)\n    def f(p):\n        f = 0\n        for i in range(0, m - 1):\n            f += abs(pos(p, x[i]) - pos(p, x[i + 1]))\n        return f\n    return''.join([str(f(p)) for p in permutations(range(1, n + 1))])\n"
    },
    {
        "number": 4517,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    num_of_vertices, num_of_edges = [int(x) for x in stdin.split(' ')]\n    list_of_edges = []\n    for _ in range(num_of_edges):\n        list_of_edges.append([int(x) for x in stdin.split(' ')])\n    set_of_edges = set()\n    for x in list_of_edges:\n        set_of_edges.add((x[0], x[1]))\n        set_of_edges.add((x[1], x[0]))\n    dict_of_vertices = {}\n    for x in set_of_edges:\n        if x[0] not in dict_of_vertices:\n            dict_of_vertices[x[0]] = []\n        if x[1] not in dict_of_vertices:\n            dict_of_vertices[x[1]] = []\n        dict_of_vertices[x[0]].append(x[1])\n        dict_of_vertices[x[1]].append(x[0])\n    return 'YES'\n  \n"
    },
    {
        "number": 4517,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    a = [[int(x) for x in stdin.readline().split()] for _ in range(n - 1)]\n    g = [[int(x) for x in stdin.readline().split()] for _ in range(m)]\n    t = {k: {} for k in range(1, n + 1)}\n    for u, v in a:\n        t[v][u] = True\n    ans = []\n    for k, v in g:\n        path = [k]\n        visited = set()\n        while len(path) < n and path[-1]!= 1:\n            u = path[-1]\n            if u not in visited:\n                visited.add(u)\n                for v in t.get(u, {}).keys():\n                    if v in path:\n                        path.append(v)\n                        break\n                else:\n                    path.append(1)\n        if len(path) == n:\n            ans.append(\"YES\")\n        else:\n            ans.append(\"NO\")\n    return \"\\n\".join(ans)\n"
    },
    {
        "number": 4517,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\nimport collections\nimport sys\n\ndef"
    },
    {
        "number": 4517,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    pass\n"
    },
    {
        "number": 4517,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    #  read the input\n    list = stdin.split()\n    n = int(list[0])\n    m = int(list[1])\n    adjlist = {}\n    for i in range(n-1):\n        l = list[i+2].split(' ')\n        adjlist[int(l[0])] = int(l[1])\n        adjlist[int(l[1])] = int(l[0])\n    for i in range(m):\n        k = int(list[i+n+2])\n        v = []\n        for j in range(k):\n            v.append(int(list[i+n+3+j]))\n        if k == 0:\n            return \"YES\"\n        if has_path(adjlist, int(list[i+n+2]), v):\n            return \"YES\"\n    return \"NO\"\ndef"
    },
    {
        "number": 4517,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES'"
    },
    {
        "number": 4517,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4517,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4517,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # return \"\"\n\n    # O(m * n) time | O(n) space\n    def dfs(edges: List[List[int]], source: int):\n        nonlocal visited\n        for dest in edges[source]:\n            if dest not in visited:\n                visited.add(dest)\n                dfs(edges, dest)\n\n    # O(m * n) time | O(n) space\n    def dfsWith1(edges: List[List[int]], source: int, dest: int, visited: Set[int]):\n        visited.add(source)\n        if dest in visited:\n            return True\n        for neighbour in edges[source]:\n            if neighbour not in visited:\n                if dfsWith1(edges, neighbour, dest, visited):\n                    return True\n        return False\n\n    n, m = map(int, stdin.split())\n    edges = [[] for _ in range(n)]\n    for i in range(1, n):\n        edges[i] = [j for j in map(int, stdin.split())]\n    for _ in range(m):\n        k, *a = map(int, stdin.split())\n        for dest in a:\n            if dfsWith1(edges, 1, dest, set()):\n                print(\"YES\")\n            else:\n                print(\"NO\")\n\nprint(solution(\"10 6\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n3 7\\n7 8\\n7 9\\n9 10\\n4 3 8 9 10\\n3 2 4 6\\n3 2 1 5\\n3 4 8 2\\n2 6 10\\n3 5 4 7\"))\n"
    },
    {
        "number": 4517,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4518,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 4518,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # CODING NOTES:\n    # - Since we have a condition on gang connections, we can make this faster by\n    #   modifying the input so that we only have to compare the gangs, which will\n    #   be much faster.\n    # - For the first line we can use the technique from Dijkstra's algorithm. We\n    #   start by adding all edges in the graph, and then we check if any of these\n    #   edges connects two districts of the same gang.\n    # - We can make this process faster by implementing our own queue, which will\n    #   contain only edges that connect districts with the same gang.\n    # - During the process we can use a set to check which edges we've already seen.\n    # - To check if two districts connect we simply check if a candidate edge exists\n    #   in the set of seen edges.\n    # - We can make this even faster by using a deque and implementing a way to\n    #   find the smallest element in the deque.\n    # - For each step of the algorithm, we check if our queue is empty. This means\n    #   that no edges were added to the queue in the last step, and we can simply\n    #   finish the current step and return.\n    # - To check if a candidate edge can be used, we simply check if the edge has\n    #   both endpoints from different gangs. If it has, we remove the edge and add\n    #   it to the set of seen edges.\n    # - In the next step, we check again if our queue is empty. If it is, we know\n    #   that no more edges can be added, and we can return.\n    # - To remove an edge, we first check which nodes it contains, and then remove\n    #   both nodes and the edge. If either node has more than one neighbour, then\n    #   it cannot be removed.\n    # - To check if two nodes have more than one neighbour we need to use a set and\n    #   a queue, since queues do not allow duplicate elements.\n    # - To find the shortest edge, we can use a heap, since we can find the smallest\n    #   element in it very quickly.\n    # - The total complexity of our algorithm is O(V+E), where V is the number of\n    #   districts, and E is the number of edges in the graph.\n    \n    def get_districts(s: str) -> List[int]:\n        districts = []\n        for district_id in s.split():\n            districts.append(int(district_id))\n        return districts\n\n    def get_edge(x: int, y: int) -> Tuple[int, int]:\n        return (x, y) if x < y else (y, x)\n\n    def has_edge(x: int, y: int) -> bool:\n        return get_edge(x, y) in edges or get_edge(y, x) in edges\n\n    n = int(stdin.readline().strip())\n    graph = {}\n    edges = set()\n    for district in range(1, n+1):\n        districts = get_districts(stdin.readline().strip())\n        graph[district] = districts\n        for i in range(len(districts)):\n            for j in range(i+1, len(districts)):\n                edges.add(get_edge(districts[i], districts[j]))\n                edges.add(get_edge(districts[j], districts[i]))\n    # queue = []\n    # seen_edges = set()\n    # for edge in edges:\n    #     x, y = edge\n    #     if not has_edge(x, y):\n    #         heapq.heappush(queue, edge)\n    #         seen_edges.add(edge)\n    # while len(queue) > 0:\n    #     edge = heapq.heappop(queue)\n    #     x, y = edge\n    #     if not has_edge(x, y):\n    #         heapq.heappush(queue, edge)\n    #         seen_edges.add(edge)\n    #     else:\n    #         edges.remove(edge)\n    #     if len(queue) == 0:\n    #         break\n    # if len(queue) == 0:\n    #     return \"YES\"\n    # return \"NO\"\n    queue = deque()\n    queue.extend(edges)\n    seen_edges = set()\n    while len(queue) > 0:\n        edge = queue.popleft()\n        x, y = edge\n        if not has_edge(x, y):\n            seen_edges.add(edge)\n            queue.extend([get_edge(x, y), get_edge(y, x)])\n        else:\n            edges.remove(edge)\n        if len(queue) == 0:\n            break\n    if len(queue) == 0:\n        return \"YES\"\n    return \"NO\"\n\n\ndef"
    },
    {
        "number": 4518,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def gen_combinations(n: int, k: int) -> Iterator[tuple[int,...]]:\n        \"\"\"\n        \u041f\u043e\u0434\u0431\u043e\u0440 \u043f\u0430\u0440 \u0440\u0435\u0448\u0435\u0442\u043e\u043a\n        \"\"\"\n        idx = list(range(1, k + 1))\n        if k <= n:\n            yield tuple(idx)\n            for i in range(1, k):\n                for comb in gen_combinations(n, i + 1):\n                    yield comb + (i,)\n        else:\n            for comb in gen_combinations(n, k):\n                yield comb\n\n    def gen_roads(n: int, k: int, x: int) -> Iterator[tuple[int,...]]:\n        \"\"\"\n        \u041f\u043e\u0434\u0431\u043e\u0440 \u0440\u0435\u0448\u0435\u0442\u043e\u043a\n        \"\"\"\n        for comb in gen_combinations(k, 2):\n            yield (x, *comb)\n\n    def gen_groups(n: int, x: int) -> Iterator[tuple[int,...]]:\n        \"\"\"\n        \u041f\u043e\u0434\u0431\u043e\u0440 \u0433\u0440\u0443\u043f\u043f\n        \"\"\"\n        for i in range(1, n + 1):\n            yield (x, i)\n\n    def check(comb: tuple[int,...], group: tuple[int,...]) -> bool:\n        \"\"\"\n        \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043a\u043e\u043c\u0431\u0438\u043d\u0430\u0446\u0438\u0438\n        \"\"\"\n        for x, y in combinations(comb, 2):\n            if x not in group and y not in group:\n                return False\n        return True\n\n    def solve(n: int, a: list[int]) -> Iterator[tuple[int,...]]:\n        \"\"\"\n        \u0420\u0435\u0448\u0435\u043d\u0438\u0435\n        \"\"\"\n        groups = list(gen_groups(n, 1))\n        roads = set(gen_roads(n, len(groups) + 1, 1))\n        for _ in range(len(groups)):\n            for x, y in roads:\n                groups.append(tuple(sorted((x, y))))\n                roads = roads.union(set(gen_roads(n, len(groups) + 1, x)))\n                if check(groups[-1], a):\n                    yield groups[-1]\n                    break\n            else:\n                break\n\n    n = int(stdin.readline())\n    for _ in range(n):\n        n, m = list(map(int, stdin.readline().split()))\n        a = list(map(int, stdin.readline().split()))\n        print('NO' if len(set(a)) < m or len(solve(n, a)) < m else 'YES' + '\\n' + '\\n'.join(map(str, solve(n, a))))\n\n\ndef"
    },
    {
        "number": 4518,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Tr\u1ea3 v\u1ec1 gi\u00e1 tr\u1ecb YES n\u1ebfu quy\u1ec1n cho th\u1eadt, ng\u01b0\u1ee3c l\u1ea1i ng\u01b0\u1ee3c l\u1ea1i n\u1ebfu quy\u1ec1n b\u1ecb sai\n    \"\"\"\n    pass\n\n\"\"\"\n\u0110\u1ec3 \u0111\u1ea1t \u0111\u01b0\u1ee3c m\u00f4 t\u1ea3 c\u1ee7a test case tr\u00ean m\u00e1y, g\u1ecdi c\u00e1c test case c\u1ee7a \u0111\u1ea7u v\u00e0o th\u00e0nh c\u00e1c \u0111\u1ea7u v\u00e0o cho c\u00e1c test case\n\u0111\u1ea7u ra.\nV\u00ed d\u1ee5, n\u1ebfu ta g\u1ecdi c\u00e1c \u0111\u1ea7u v\u00e0o th\u00e0nh c\u00e1c \u0111\u1ea7u v\u00e0o cho c\u00e1c test case th\u00ec \u0111\u1ea7u ra s\u1ebd l\u00e0:\n    1. \u0110\u1ea7u v\u00e0o cho test case 1:\n        Input:\n            n: 5\n            a: 1 2 2 1 3\n        Output:\n            YES\n            1 3\n    2. \u0110\u1ea7u v\u00e0o cho test case 2:\n        Input:\n            n: 3\n            a: 1 1 1\n        Output:\n            NO\n    3. \u0110\u1ea7u v\u00e0o cho test case 3:\n        Input:\n            n: 4\n            a: 1 1000 101 1000\n        Output:\n            YES\n            1 2\n    4. \u0110\u1ea7u v\u00e0o cho test case 4:\n        Input:\n            n: 4\n            a: 1 2 3 4\n        Output:\n            YES\n            1 2\n            1 3\n            1 4\n    5. \u0110\u1ea7u v\u00e0o cho test case 5:\n        Input:\n            n: 5\n            a: 1 2 2 1 3\n        Output:\n            NO\n\"\"\"\n\n\"\"\"\nV\u1ea5n \u0111\u1ec1\n\nH\u1ea3i th\u1eadt:\n\nB\u00e0i to\u00e1n \u00e1p d\u1ee5ng gi\u1ea3i thu\u1eadt x\u00e2y d\u1ef1ng c\u00e1c d\u00f2ng \u0111\u01b0\u1ee3c t\u1eeb c\u00e1c nghi\u1ec7m c\u1ee7a quy\u1ec1n m\u1edbi\n\nTr\u1ea3 l\u1eddi:\n\nkh\u00f4ng \u0111\u01b0\u1ee3c nh\u01b0 \u0111\u00e3 l\u00e0m\n\nkh\u00f4ng \u0111\u01b0\u1ee3c\n\nb\u1eb1ng v\u00ed d\u1ee5\n\n\u0111i\u1ec1u ki\u1ec7n khi ch\u1ea1y code\n\n\u0111\u1ec3 sau n\u00e0y l\u00e0 l\u00e0 \u0111\u01b0\u1ee3c\n\nkh\u00f4ng g\u1ee1i v\u1ea5n \u0111\u1ec1 nh\u01b0 tr\u00ean\n\n\u0111\u1ec3 d\u1ec5 th\u1ef1c hi\u1ec7n\n\nv\u00ed d\u1ee5 c\u00f3 l\u00e0 \u0111\u01b0\u1ee3c\n\nkh\u00f4ng \u0111\u01b0\u1ee3c\n\n\u0111\u1ec3 sau n\u00e0y l\u00e0 g\u1ea5p v\u1edbi\n\nkh\u00f4ng g\u1ea5p v\u1edbi\n\nv\u00ed d\u1ee5 g\u1ea5p v\u1edbi\n\nnh\u01b0 \u0111\u00e3 l\u00e0m\n\nth\u00ec gi\u1ed1ng v\u1edbi\n\nth\u00ec g\u1ea5p v\u1edbi\n\nv\u00ed d\u1ee5 g\u1ea5p v\u1edbi\n\nkh\u00f4ng \u0111\u01b0\u1ee3c\n\nkh\u00f4ng \u0111\u01b0\u1ee3c\n\nkh\u00f4ng \u0111\u01b0\u1ee3c\n\nv\u00ed d\u1ee5 \u0111\u01b0\u1ee3c\n\nkh\u00f4ng \u0111\u01b0\u1ee3c\n\nkh\u00f4ng \u0111\u01b0\u1ee3c\n\nv\u00ed d\u1ee5 nh\u01b0 n\u00e0y\n\n\u0111i\u1ec1u ki\u1ec7n ko \u0111\u01b0\u1ee3c\n\n\u0111i\u1ec1u ki\u1ec7n nh\u01b0 n\u00e0y\n\n\u0111i\u1ec1u ki\u1ec7n ko \u0111\u01b0\u1ee3c\n\nv\u00ed d\u1ee5 ko \u0111\u01b0\u1ee3c\n\n\u0111i\u1ec1u ki\u1ec7n ko \u0111\u01b0\u1ee3c\n\nv\u00ed d\u1ee5 nh\u01b0 n\u00e0y\n\nkh\u00f4ng g\u1ee1i v\u1ea5n \u0111\u1ec1 nh\u01b0 tr\u00ean\n\nkh\u00f4ng g\u1ee1i v\u1ea5n \u0111\u1ec1 nh\u01b0 tr\u00ean\n\nkh\u00f4ng g\u1ee1i v\u1ea5n \u0111\u1ec1 nh\u01b0 tr\u00ean\n\nnh\u01b0 v\u1eady\n\nnh\u01b0 v\u1eady\n\nnh\u01b0 v\u1eady\n\nnh\u01b0 v\u1eady\n\nnh\u01b0 v\u1eady\n\nnh\u01b0 v\u1eady\n\nnh\u01b0 v\u1eady\n\nnh\u01b0 v\u1eady\n\nnh\u01b0 v\u1eady\n\nnh\u01b0 v\u1eady\n\nnh\u01b0 v\u1eady\n\nnh\u01b0 v\u1eady\n\nnh\u01b0 v\u1eady\n\nnh\u01b0 v\u1eady\n\nnh\u01b0 v\u1eady\n\nnh\u01b0 v\u1eady\n\nnh\u01b0 v\u1eady\n\nnh\u01b0 v\u1eady\n\nnh\u01b0 v\u1eady\n\nnh\u01b0 v\u1eady\n\nnh\u01b0 v"
    },
    {
        "number": 4518,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def set_graph():\n        for i in range(1, len(graph)):\n            for j in range(i + 1, len(graph)):\n                if graph[i][0] == graph[j][0] or graph[i][1] == graph[j][1]:\n                    graph[i][2] += 1\n                    graph[j][2] += 1\n        for i in range(len(graph)):\n            if graph[i][2] == 1:\n                graph[i][2] = 0\n\n    def find_num_of_dis():\n        count = 1\n        for i in range(1, len(graph)):\n            if graph[i][2] == 0:\n                count += 1\n        return count\n\n    def find_paths_from_to(start, end):\n        paths = [[start]]\n        while paths:\n            path = paths.pop(0)\n            last = path[-1]\n            for i in range(len(graph)):\n                if graph[last][2] == 0 and graph[i][0] == end or graph[last][1] == i:\n                    if i == end:\n                        yield path + [i]\n                    else:\n                        paths.append(path + [i])\n\n    def find_path_length(path):\n        dist = 0\n        for i in range(len(path) - 1):\n            dist += graph[path[i]][path[i + 1]]\n        return dist\n\n    def find_shortest_path(graph):\n        min_dist = float('inf')\n        shortest_path = None\n        for path in find_paths_from_to(1, n):\n            if find_path_length(path) < min_dist:\n                min_dist = find_path_length(path)\n                shortest_path = path\n        return shortest_path\n\n    def find_path_from_start_to_end():\n        shortest_path = find_shortest_path(graph)\n        for path in shortest_path:\n            if graph[path[-1]][2] == 1:\n                graph[path[-1]][2] = 0\n                return path\n\n    def solve():\n        global graph\n        graph = [[0, 0, 0] for i in range(n + 1)]\n        set_graph()\n        path = find_path_from_start_to_end()\n        if path is None:\n            return 'NO'\n        return 'YES\\n' +''.join([str(i) for i in path])\n\n    n = int(stdin.readline())\n    graph = []\n    for i in range(n):\n        a = [int(i) for i in stdin.readline().split()]\n        graph.append([a[0], a[1], a[2]])\n    t = int(stdin.readline())\n    for _ in range(t):\n        print(solve())\n    return True\n"
    },
    {
        "number": 4518,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"The solution function\"\n    pass"
    },
    {
        "number": 4518,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    The most naive solution is to build all possible roads and check their conditions.\n    This solution is too slow for every test case.\n    \"\"\"\n    count = int(stdin.readline())\n    for _ in range(count):\n        n = int(stdin.readline())\n        gangs = list(map(int, stdin.readline().split()))\n        roads = []\n        for i in range(n):\n            for j in range(i+1, n):\n                roads.append((i, j))\n        roads = set(roads)\n        for i, j in roads:\n            if gangs[i]!= gangs[j]:\n                break\n        else:\n            print(\"YES\")\n            for i, j in roads:\n                print(i, j)\n            print()\n            continue\n        print(\"NO\")\n        print()\n\nSolution.run(solution)"
    },
    {
        "number": 4518,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5\n   ... 1 2 2 1 3\n   ... 3''')\n    YES\n    >>> solution('''5\n   ... 1 1 1\n   ... 4''')\n    YES\n    >>> solution('''5\n   ... 1 1000 101 1000\n   ... 4''')\n    NO\n    >>> solution('''5\n   ... 1 2 2 1 3\n   ... 4''')\n    YES\n    >>> solution('''5\n   ... 1 2 3 4\n   ... 4''')\n    YES\n    >>> solution('''5\n   ... 1 1 1\n   ... 4''')\n    NO\n    >>> solution('''5\n   ... 1 1 1\n   ... 5''')\n    NO\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4518,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"YES\\n\" + \"1 2\"\n"
    },
    {
        "number": 4518,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution with memory.\"\"\"\n    memory = dict()\n    def _can_connect(n: int, x: int, y: int) -> bool:\n        \"\"\"Return True if n can connect x and y, and False otherwise.\"\"\"\n        if n in memory:\n            return memory[n]\n        if n == 1:\n            memory[n] = x!= y\n            return memory[n]\n        memory[n] = False\n        for i in range(n):\n            if _can_connect(n - 1, x, i) and _can_connect(n - 1, i, y):\n                memory[n] = True\n                return memory[n]\n        return memory[n]\n\n    n = int(stdin.readline())\n    for i in range(n):\n        gangs = [int(s) for s in stdin.readline().split()]\n        if _can_connect(len(gangs) - 1, gangs[0], gangs[1]):\n            print(\"YES\")\n            for i in range(len(gangs) - 1):\n                print(gangs[i], gangs[i + 1])\n        else:\n            print(\"NO\")\n    return \"\"\n"
    },
    {
        "number": 4519,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the minimum lexicographic string\"\"\"\n    if len(stdin) == 1:\n        return stdin\n    first_index = 0\n    n = len(stdin)\n    while first_index < n - 1:\n        for _ in range(k):\n            if stdin[first_index] > stdin[first_index + 1]:\n                first_index += 1\n                break\n            first_index += 1\n        else:\n            break\n    first_index_temp = first_index\n    while first_index_temp >= 0 and stdin[first_index_temp] == stdin[first_index]:\n        first_index_temp -= 1\n    if first_index_temp >= 0:\n        stdin = stdin[first_index_temp + 1:] + stdin[:first_index_temp + 1]\n    else:\n        stdin = stdin[1:] + stdin[:1]\n    return solution(stdin)\n"
    },
    {
        "number": 4519,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\u0414\u0430\u043d\u043d\u0430\u044f \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u0442 \u0441\u0442\u0440\u043e\u043a\u0443 \u0432 \u043e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u0443\u044e \u0432 \u0430\u043b\u0444\u0430\u0432\u0438\u0442\u043d\u043e\u043c \u043f\u043e\u0440\u044f\u0434\u043a\u0435, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u044b\u0439 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u043e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0441\u0442\u0438.\n    \u041f\u0440\u0435\u0434\u043f\u043e\u043b\u0430\u0433\u0430\u0435\u0442\u0441\u044f, \u0447\u0442\u043e \u0441\u0442\u0440\u043e\u043a\u0430 \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u0438\u0437 \u0431\u0443\u043a\u0432, \u0438\u043b\u0438 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043f\u0443\u0441\u0442\u043e\u0439.\n    \u041e\u0431\u0440\u0430\u0442\u043d\u043e \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u043d\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u0438\u0441\u043a\u043b\u044e\u0447\u0430\u0435\u0442 \u043f\u043e\u0432\u0442\u043e\u0440\u044b \u0438 \u0431\u0443\u043a\u0432\u044b \u0438\u0437 \u0441\u0442\u0440\u043e\u043a\u0438, \u043e\u0441\u0442\u0430\u0432\u043b\u044f\u044f \u0432\u0441\u0435 \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0435.\n\n    \u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u043d\u0443\u044e \u0441\u0442\u0440\u043e\u043a\u0443 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u0432 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u043e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0441\u0442\u0438.\n\n    \u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u043d\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0431\u044b\u0442\u044c \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0439 \u0434\u043b\u0438\u043d\u044b.\n    \"\"\"\n    pass\n\n\ndef"
    },
    {
        "number": 4519,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your solution\n    # pass\n"
    },
    {
        "number": 4519,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    pass\n    return \"\""
    },
    {
        "number": 4519,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return None"
    },
    {
        "number": 4519,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4519,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\"\"\"\n"
    },
    {
        "number": 4519,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    print(stdin)"
    },
    {
        "number": 4519,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return '01101110'\n\"\"\"\n\n\"\"\"\n\u0412\u0430\u0448\u0435\u0439 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435 \u043d\u0430 \u0432\u0445\u043e\u0434 \u043f\u043e\u0434\u0430\u044e\u0442\u0441\u044f \u0434\u0432\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 s \u0438 t, \u0441\u043e\u0441\u0442\u043e\u044f\u0449\u0438\u0435 \u0438\u0437 \u0441\u0442\u0440\u043e\u0447\u043d\u044b\u0445 \u043b\u0430\u0442\u0438\u043d\u0441\u043a\u0438\u0445 \u0431\u0443\u043a\u0432.\n\n\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043e\u0434\u043d\u043e \u0447\u0438\u0441\u043b\u043e \u2013 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u0439 \u0441\u0442\u0440\u043e\u043a\u0438 t \u0432 \u0441\u0442\u0440\u043e\u043a\u0443 s.\n\nSample Input:\n\nabab\naba\n\nSample Output:\n\n3\n\n\"\"\"\n\nimport sys\n\n\ndef"
    },
    {
        "number": 4519,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = list(stdin)\n    # print(stdin)\n\n    count = 1\n    while stdin!= sorted(stdin):\n        # print(stdin)\n        \n        for i in range(len(stdin)-1):\n            if stdin[i] > stdin[i+1]:\n                stdin[i], stdin[i+1] = stdin[i+1], stdin[i]\n                count += 1\n                if count == n:\n                    break\n\n        if count == n:\n            break\n\n    return ''.join(stdin)\n\n\"\"\"\n\nfrom __future__ import print_function\n\n\nimport sys\n\n\ndef"
    },
    {
        "number": 4520,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4520,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    'Compute the minimum number of segments you need to remove so that there are no bad points.'\n    def check_bad(intervals, k):\n        'Checks if there are bad points'\n        if not intervals:\n            return 0\n\n        starts, ends = zip(*intervals)\n        n = len(intervals)\n\n        # Make sure there are enough segments\n        if n < k:\n            return n\n\n        starts, ends = zip(*intervals)\n        starts, ends = sorted(starts), sorted(ends)\n        intervals = [starts[0], ends[-1]]\n        segments = set(starts)\n        segments.update(ends)\n\n        counts = {num: 0 for num in segments}\n        for start, end in intervals:\n            counts[start] += 1\n            counts[end] -= 1\n\n        bad_segments = {k: v for k, v in counts.items() if v > k}\n\n        return len(bad_segments)\n\n    stdin = stdin.strip()\n    n, k = tuple(map(int, stdin.split(' ')))\n    intervals = []\n    for i in range(n):\n        start, end = tuple(map(int, stdin.split(' ')))\n        intervals.append([start, end])\n\n    min_bad = n\n    for i in range(k):\n        bad = check_bad(intervals, i + 1)\n        min_bad = min(bad, min_bad)\n\n    print(min_bad)\n    return ''\n\n\n\ndef"
    },
    {
        "number": 4520,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split('\\n')\n    n, k = map(int, input[0].split())\n    intervals = [list(map(int, input[i].split())) for i in range(1, n + 1)]\n    segments = set()\n    for l, r in intervals:\n        for i in range(l, r + 1):\n            segments.add(i)\n    m = len(segments)\n    segments = list(segments)\n    segments.sort()\n\n    s = set()\n    for i, j in intervals:\n        s.add(i)\n        s.add(j)\n    s = list(s)\n    s.sort()\n    #print(m, s)\n    j = 0\n    res = []\n    while j < len(s) - 1:\n        i = j\n        while i < len(s) - 1 and s[i] == s[i + 1]:\n            i += 1\n        res.append(segments[s[j]])\n        j = i + 1\n    res.append(segments[s[-1]])\n    res.sort()\n    for i in range(k):\n        res.pop()\n    print(len(res))\n    print(' '.join(map(str, res)))\n    return''.join(map(str, res))\n\n\ndef"
    },
    {
        "number": 4520,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"O(n^2) time complexity solution\"\"\"\n    n, k = [int(num) for num in stdin.split()]\n    points = [list(map(int, line.split())) for line in stdin.splitlines()]\n    points.sort()\n\n    intervals = [[points[0][0], points[0][1]]]\n    for interval in points:\n        intervals.append([max(intervals[-1][0], interval[0]), min(intervals[-1][1], interval[1])])\n\n    # print(intervals)\n    max_intervals = intervals.copy()\n    max_intervals.sort(key=lambda x: x[0])\n    # print(max_intervals)\n\n    for i in range(n):\n        if intervals[i][0] > max_intervals[i][1]:\n            continue\n        else:\n            max_intervals[i][1] = min(max_intervals[i][1], intervals[i][1])\n\n    count = 0\n    for interval in max_intervals:\n        if interval[1] - interval[0] + 1 > k:\n            count += 1\n    return count\n\n\ndef"
    },
    {
        "number": 4520,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def isbad(i: int) -> bool:\n        return i in bads\n\n    n, k = tuple(map(int, stdin.split(' ')))\n    bounds = []\n    for i in range(n):\n        l, r = tuple(map(int, stdin.split(' ')))\n        bounds.append((l, r))\n    bounds.sort(key=lambda x: x[1])\n    # print(bounds)\n    bad = []\n    for i in range(n):\n        if isbad(i):\n            bad.append(i)\n    good = []\n    current = -1\n    for i in range(n):\n        if i in bad:\n            current += 1\n        else:\n            current = 0\n            good.append(i)\n        # print(current, good)\n    # print(good)\n    bad = []\n    for i in range(n):\n        if i not in good:\n            bad.append(i)\n    # print(bad)\n    ans = 0\n    while bad:\n        minlen = k + 1\n        to_remove = -1\n        for i in range(n):\n            if i in bad:\n                minlen = min(minlen, bounds[i][0])\n                if bounds[i][0] < bounds[i][1]:\n                    to_remove = i\n                if to_remove!= -1:\n                    break\n        if to_remove!= -1:\n            ans += 1\n            bounds[to_remove] = (minlen, bounds[to_remove][1])\n        for i in range(n):\n            if i in bad:\n                if bounds[i][0] < bounds[i][1]:\n                    bounds[i] = (bounds[i][0], bounds[i][0] + k)\n        good = []\n        current = -1\n        for i in range(n):\n            if i in bad:\n                current += 1\n            else:\n                current = 0\n                good.append(i)\n        bad = []\n        for i in range(n):\n            if i not in good:\n                bad.append(i)\n        # print(bad)\n    # print(bounds)\n    return ans\n\n\ndef"
    },
    {
        "number": 4520,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    The solution is trivial. We just need to check if every segment can be covered by less than or equal to k segments.\n\n    If the number of segments is too large, then we can split the segments.\n    Then we need to calculate the number of covered segments for each subsegment.\n    If the number of covered segments is too large, then we can remove the subsegments.\n    And so on.\n    '''\n\n    n, k = map(int, stdin.split())\n    segments = []\n    for _ in range(n):\n        l, r = map(int, stdin.split())\n        segments.append([l, r])\n\n    ans = 0\n    segments.sort(key=lambda x: x[0])\n    while True:\n        count = 0\n        for i in range(n):\n            if segments[i][0] <= segments[ans][1]:\n                count += 1\n\n        if count <= k:\n            break\n\n        ans += 1\n\n    return ans\n"
    },
    {
        "number": 4520,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    'Complexity: O(n) where n is the number of intervals'\n    num_segments, max_segments = map(int, stdin.split())\n    intervals = [list(map(int, stdin.split())) for _ in range(num_segments)]\n    max_intervals = [x[1] for x in intervals]\n    intervals.sort()\n    max_intervals.sort()\n    intervals = [x[0] for x in intervals]\n    max_intervals = [x[0] for x in max_intervals]\n    segments = []\n    for i in range(1, num_segments):\n        segments.append([intervals[i-1], intervals[i]])\n    # We can do better by using binary search\n    # x = 0\n    # while x < len(segments):\n    #     y = x + 1\n    #     while y < len(segments):\n    #         if segments[x][1] < segments[y][0]:\n    #             segments.pop(x)\n    #             break\n    #         y += 1\n    #     x += 1\n    # return num_segments - len(segments)\n    # time complexity of this code is O(n log n), but in the worst case it is O(n^2)\n    segments.sort()\n    x = 0\n    while x < len(segments):\n        y = x + 1\n        while y < len(segments):\n            if segments[x][1] < segments[y][0]:\n                segments.pop(x)\n                break\n            y += 1\n        x += 1\n    return num_segments - len(segments)\n"
    },
    {
        "number": 4520,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution to the problem.\n    \"\"\"\n\n    def update_bad(bad, i):\n        \"\"\"\n        Updates bad list.\n\n        Bad list is updated by incrementing the value of a given segment.\n\n        Parameters\n        ----------\n        bad : list\n            List of all bad points.\n        i : int\n            Number of segment to update.\n\n        \"\"\"\n\n        bad[i] += 1\n\n    def find_bad(n, k):\n        \"\"\"\n        Finds bad points.\n\n        Finds all points that are covered by more than k segments.\n\n        Parameters\n        ----------\n        n : int\n            Number of segments.\n        k : int\n            Maximum number of segments by which a point can be covered.\n\n        Returns\n        -------\n        list\n            List of bad points.\n\n        \"\"\"\n\n        bad = [0] * n\n\n        for i in range(n):\n            for j in range(i + 1, n):\n                if (l[j] <= r[i]) or (l[i] <= r[j]):\n                    if (l[j] <= r[i]) and (r[j] >= l[i]):\n                        if bad[i] < k:\n                            update_bad(bad, i)\n                    if (l[i] <= r[j]) and (r[i] >= l[j]):\n                        if bad[j] < k:\n                            update_bad(bad, j)\n\n        return bad\n\n    def remove_segments(bad, n):\n        \"\"\"\n        Removes segments.\n\n        Removes segments from the list of bad segments so that the number of bad segments is equal or less than the maximum number of segments by which each point can be covered.\n\n        Parameters\n        ----------\n        bad : list\n            List of all bad points.\n        n : int\n            Maximum number of segments by which a point can be covered.\n\n        \"\"\"\n\n        i = 0\n        while i < n:\n            if bad[i] > k:\n                bad[i] -= 1\n                j = i + 1\n                while j < n and bad[j] > k:\n                    bad[j] -= 1\n                    j += 1\n                if j < n:\n                    i = j + 1\n                else:\n                    n -= 1\n            else:\n                i += 1\n\n    n, k = [int(x) for x in stdin.readline().split()]\n    l, r = [], []\n    for _ in range(n):\n        x, y = [int(x) for x in stdin.readline().split()]\n        l.append(x)\n        r.append(y)\n\n    bad = find_bad(n, k)\n    remove_segments(bad, n)\n\n    return''.join(map(str, bad))\n\n\ndef"
    },
    {
        "number": 4520,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Gets input from stdin and returns solution to the problem\n    :param stdin: input\n    :return: solution\n    \"\"\"\n    (n, k) = [int(x) for x in stdin.split(' ')]\n    segments = [tuple(int(x) for x in line.split(' ')) for line in stdin.splitlines()[:n]]\n    return str(find_smallest_remove(segments, k))\n\ndef"
    },
    {
        "number": 4520,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return None\n"
    },
    {
        "number": 4521,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return '42'\n"
    },
    {
        "number": 4521,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # return str(res)\n"
    },
    {
        "number": 4521,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4521,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    points = [int(x) for x in stdin.readline().split()]\n    speeds = [int(x) for x in stdin.readline().split()]\n    sum = 0\n    min = points[0]\n    for i in range(n-1):\n        sum += min\n        min = max(points[i], min + speeds[i])\n    sum += min\n    return sum"
    },
    {
        "number": 4521,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    x = list(map(int, stdin.readline().split()))\n    v = list(map(int, stdin.readline().split()))\n    return stdout.write(str(solution(n, x, v)))\n"
    },
    {
        "number": 4521,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # return \"\""
    },
    {
        "number": 4521,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"O(n^2) / O(n)\"\"\"\n    n, *xs = [int(x) for x in stdin.splitlines()]\n    v = [int(x) for x in stdin.splitlines()[1].split()]\n    distances = [[0] * n for _ in range(n)]\n    for i in range(n):\n        for j in range(i + 1, n):\n            distances[i][j] = min(\n                distances[i][j - 1] + abs(xs[j] - xs[j - 1]),\n                distances[i - 1][j] + abs(xs[i] - xs[i - 1]),\n            )\n    return sum(\n        [distances[i][j] for i in range(n) for j in range(i + 1, n)]\n    )\n"
    },
    {
        "number": 4521,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    x, v = list(map(int, stdin.readline().split())), list(map(int, stdin.readline().split()))\n    x.sort()\n    d = []\n    for i in range(n):\n        for j in range(i+1, n):\n            d.append(x[j]-x[i])\n    return sum([min(abs(x[i]-x[j]), v[i]+v[j]) for i in range(n) for j in range(i+1, n)])\n"
    },
    {
        "number": 4521,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solves the problem.\"\"\"\n    pass  # TODO: edit here\n"
    },
    {
        "number": 4521,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"[summary]\n    \"\"\"\n    n, *x = map(int, stdin.split('\\n')[0].split())\n    v = list(map(int, stdin.split('\\n')[1].split()))\n    import math\n    assert(n == len(x) == len(v))\n    # print(n, x, v)\n    ans = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            d = math.gcd(x[i], x[j])\n            ans += x[i] + x[j] - 2 * d\n    print(ans)\n\ndef"
    },
    {
        "number": 4522,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return '\\n'.join(stdin.split('\\n'))\n\n\"\"\"\n\nfrom collections import defaultdict\n\n\ndef"
    },
    {
        "number": 4522,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\n\"\"\"\n\n\nimport sys\nimport math\nimport heapq\nsys.setrecursionlimit(10000000)\nfrom collections import defaultdict\n\n\nclass Tree:\n    def __init__(self, n, edges):\n        self.n = n\n        self.edges = edges\n\n    def build(self):\n        self.nodes = defaultdict(list)\n        self.distances = {}\n        for a, b, w in self.edges:\n            self.nodes[a] += [(b, w)]\n            self.nodes[b] += [(a, w)]\n        for a, b, w in self.edges:\n            self.distances[(a, b)] = w\n\n    def dijkstra(self, start):\n        pq = [(0, start)]\n        self.distances[(start, start)] = 0\n        while pq:\n            distance, node = heapq.heappop(pq)\n            for neighbour, w in self.nodes[node]:\n                if neighbour == node:\n                    continue\n                dist = self.distances[(node, neighbour)]\n                if distance + w < self.distances[(neighbour, node)]:\n                    self.distances[(neighbour, node)] = distance + w\n                    heapq.heappush(pq, (self.distances[(neighbour, node)], neighbour))\n\n\ndef"
    },
    {
        "number": 4522,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ndef"
    },
    {
        "number": 4522,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Time: O(m)\n    Space: O(n)\n    '''\n    def dfs(node, weights):\n        if not node.children:\n            return 0\n\n        node.max_weights = [max(weights[node.children[0]], weights[node.children[1]])]\n        for child in node.children:\n            dfs(tree[child], node.max_weights)\n\n    def query(n):\n        count = 0\n        for weight in q:\n            if weight > n:\n                break\n            if n <= tree[n].max_weights[0]:\n                count += 1\n        return count\n\n    n, m = map(int, stdin.split(' '))\n    tree = {i: Node() for i in range(1, n + 1)}\n    for i in range(1, n - 1):\n        u, v, w = map(int, stdin.split(' '))\n        u, v = u - 1, v - 1\n        tree[u].children.append(v)\n        tree[v].children.append(u)\n        tree[u].weights.append(w)\n        tree[v].weights.append(w)\n    for node in tree.values():\n        dfs(node, [])\n\n    q = map(int, stdin.split(' '))\n    answers = []\n    for weight in q:\n        answers.append(query(weight))\n    return''.join(map(str, answers))\n\n\n\nclass Node:\n    def __init__(self):\n        self.weights = []\n        self.children = []\n        self.max_weights = []\n\ndef"
    },
    {
        "number": 4522,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return '\\n'.join([str(line) for line in stdin])\n"
    },
    {
        "number": 4522,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time complexity: O(n * m)\n    Space complexity: O(n)\n    \"\"\"\n    return \"\"\n"
    },
    {
        "number": 4522,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return '\\n'.join([str(a) for a in [answers]])\n"
    },
    {
        "number": 4522,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return str(count)\n"
    },
    {
        "number": 4522,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4522,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4523,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4523,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4523,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4523,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport sys\n\nsys.setrecursionlimit(111111)"
    },
    {
        "number": 4523,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4523,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    pass\n"
    },
    {
        "number": 4523,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def solution(n, m, A):\n        B = sorted(A)\n        i, j = 0, len(A) - 1\n        while j > i:\n            if abs(A[i] - A[j]) > 1:\n                return 'NO'\n            elif abs(A[i] - A[j]) <= 1:\n                if B[i] > B[j]:\n                    B[j] = B[i]\n                    i += 1\n                elif B[i] < B[j]:\n                    B[i] = B[j]\n                    j -= 1\n        if i == j:\n            if A[i] > B[j]:\n                B[j] = A[i]\n                i += 1\n            elif A[i] < B[j]:\n                B[j] = A[i]\n                j -= 1\n        if i == j and i < len(A):\n            return 'NO'\n        return 'YES'\n\ndef"
    },
    {
        "number": 4523,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4523,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 4523,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES' if... else 'NO'\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4524,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(i) for i in stdin.strip().split(' ')]\n    ans = 0\n    while b > 0:\n        ans = (ans + a) % MOD\n        if b % 2 == 1:\n            ans = (ans + b) % MOD\n        b //= 2\n    print(ans)\n    return\n"
    },
    {
        "number": 4524,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = list(map(int, stdin.split()))\n    ans, a_max, b_max = 0, max(a, b), max(a, b)\n    while b_max > 0:\n        a_rem = a & b_max\n        a, b = a ^ b_max, b_max >> 1\n        ans = ans + a_rem\n        b_max, a_max = a_rem, max(a, b)\n    return str(ans)\n"
    },
    {
        "number": 4524,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin.split('\\n')[0])\n    b = int(stdin.split('\\n')[1])\n    c = a | b\n    while b > 0:\n        c = (c & (b-1)) + (a & b)\n        b >>= 1\n    return str(c)\n"
    },
    {
        "number": 4524,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin[0][2:])\n    b = int(stdin[1][2:])\n    while b!= 0:\n        a, b = a ^ b, b >> 1\n    return str(a)\n    # Your solution here\n"
    },
    {
        "number": 4524,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = int(stdin[:n], 2)\n    b = int(stdin[n:n + m], 2)\n    res = 0\n    while b > 0:\n        res = (res + a) % M\n        if b & 1:\n            res = (res + a) % M\n            b = (b - 1) // 2\n        else:\n            b //= 2\n    print(res)\n"
    },
    {
        "number": 4524,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = stdin\n    b = stdin\n    ans = 0\n    while b > 0:\n        ans += int(a, 2) & b\n        b //= 2\n    return ans % 1000000007\n\ndef"
    },
    {
        "number": 4524,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    a = '1' * n\n    b = '1' * m\n    answer = 0\n    while len(b) > 0:\n        b = '1' + b[:-1]\n        if b[1] == '0':\n            a = a[:-1]\n            b = '1' + b[1:]\n        else:\n            a, b = a[:-1], b[1:]\n        answer += int(a, 2)\n    return str(answer % 998244353)\n\n\n\ndef"
    },
    {
        "number": 4524,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('4 4\\n1010\\n1101')\n    '12'\n    >>> solution('4 5\\n1001\\n10101')\n    '11'\n    '''\n    n, m = map(int, stdin.split())\n    a = '0' * (n - 1) + stdin\n    b = '0' * (m - 1) + stdin\n    a, b = int(a, 2), int(b, 2)\n    while b:\n        a, b = (a & b) % 998244353, b // 2\n    return str(a)"
    },
    {
        "number": 4524,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = int(stdin[0]), int(stdin[1])\n    length_a, length_b = len(stdin[0]), len(stdin[1])\n    while b > 0:\n        a_new = a & b\n        b = b >> 1\n        a = a_new\n    return a << (length_a - length_b)\n\n\n\"\"\"\n\na, b = input().split()\na = int(a, 2)\nb = int(b, 2)\n\nwhile b > 0:\n    a = a & b\n    b = b >> 1\nprint(a << len(a)-len(b))\n"
    },
    {
        "number": 4524,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    a = int(stdin.split(' ')[0])\n    b = int(stdin.split(' ')[1])\n    # a_arr = a.split('0')\n    # b_arr = b.split('0')\n    answer = 0\n    while b > 0:\n        if b > 1:\n            answer += a\n            b = b // 2\n        else:\n            answer += a\n            b = 0\n    return answer\n"
    },
    {
        "number": 4525,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        n = int(stdin.readline().strip())\n        if n == 2:\n            print('NO')\n            continue\n        a = list(range(1, n + 1, 2)) + list(range(3, n + 1, 2))\n        print('YES')\n        print(*a)\n    return ''"
    },
    {
        "number": 4525,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    #\n    #\n    return \"NO\"\n"
    },
    {
        "number": 4525,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def solve_test_case(n: int) -> str:\n        a_count = n // 2\n        a_list = [0] * n\n        a_list[:a_count] = [x for x in range(2, n, 2)]\n        a_list[a_count:] = [x for x in range(1, n, 2)]\n\n        if sum(a_list[:a_count]) == sum(a_list[a_count:]):\n            print(\"YES\")\n            print(' '.join(str(x) for x in a_list))\n            return True\n        return False\n\n    n = int(stdin.readline())\n    while n!= 0:\n        if solve_test_case(n):\n            n = int(stdin.readline())\n        else:\n            print(\"NO\")\n            n = int(stdin.readline())\n"
    },
    {
        "number": 4525,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4525,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''"
    },
    {
        "number": 4525,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    This is a python script solution for the given input.\n    \"\"\"\n\n    def validate(a, n):\n        if n % 2:\n            return False\n        for i in range(int(n / 2)):\n            if a[i] % 2 or a[i] == 0:\n                return False\n            if a[i + int(n / 2)] % 2:\n                return False\n        return True\n\n    t = int(stdin.readline())\n\n    for _ in range(t):\n        n = int(stdin.readline())\n\n        if n < 4:\n            print(\"NO\")\n        else:\n            a = [2, 3]\n            while len(a) < n:\n                i = len(a)\n                if validate(a, n):\n                    break\n                a.append(4 * a[i - 1] + 6 * a[i - 2] + 8 * a[i - 3] + 10 * a[i - 4])\n            else:\n                print(\"NO\")\n                continue\n\n            print(\"YES\")\n            print(*a)\n"
    },
    {
        "number": 4525,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4525,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4525,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    for line in lines:\n        n = int(line)\n        i = n // 2\n        if (n % 2)!= 0:\n            return 'NO'\n        if (n % 2) == 0:\n            i = (n // 2) + 1\n            for j in range(i, n + 1):\n                if j % 2 == 0:\n                    print(j, end=' ')\n        return 'YES'\n    return 0\n"
    },
    {
        "number": 4525,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"2\\n4\\n6\\n8\\n10\")\n    'NO'\n    >>> solution(\"1\\n1\\n1\\n1\\n1\")\n    'NO'\n    >>> solution(\"1\\n2\\n3\\n4\\n5\")\n    'NO'\n    >>> solution(\"1\\n3\\n5\\n7\\n9\")\n    'YES'\n    >>> solution(\"2\\n6\\n8\\n10\\n12\\n14\\n16\\n18\\n20\")\n    'NO'\n    >>> solution(\"2\\n8\\n10\\n12\\n14\\n16\\n18\\n20\\n22\")\n    'YES'\n    >>> solution(\"2\\n4\\n6\\n8\\n10\\n12\\n14\\n16\\n18\\n20\")\n    'YES'\n    >>> solution(\"2\\n4\\n6\\n8\\n10\\n12\\n14\\n16\\n18\\n20\")\n    'NO'\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4526,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solve problem.\n\n    Args:\n        stdin: Input string\n\n    Returns:\n        Solution string.\n    \"\"\"\n    cases = int(stdin.readline())\n    result = []\n    for _ in range(cases):\n        array = list(map(int, stdin.readline().split()))\n        number = 0\n        for i in range(len(array)):\n            for j in range(i, len(array)):\n                if array[i:j+1].count(array[i]) > 1:\n                    number += 1\n        result.append(number)\n    return '\\n'.join(map(str, result))\n"
    },
    {
        "number": 4526,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4526,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    #Your code here\n    # return \"\"\n\nTC:  1\nTLE\n\ndef"
    },
    {
        "number": 4526,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4526,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 4526,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4526,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n\n    # get total number of test cases\n    t = int(lines[0])\n\n    # loop through each test case\n    for i in range(1, t + 1):\n        n = int(lines[i * 2 - 1])  # get number of elements in array\n\n        arr = list(map(int, lines[i * 2].split()))  # get array\n\n        special = 0\n        for i in range(n - 1):\n            if arr[i] == arr[i + 1] - 1:\n                special += 1\n        print(special)\n\n    return ''\n"
    },
    {
        "number": 4526,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\""
    },
    {
        "number": 4526,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 4526,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # get test cases from input\n    test_cases = stdin.strip().split('\\n')\n    cases = [\n        [int(n), list(map(int, input().split()))]\n        for n in test_cases[0].split()\n    ]\n    \n    # loop over each test case\n    for n, a in cases:\n        # count special elements\n        special = 0\n        for i, x in enumerate(a):\n            if i == 0:\n                if a[i + 1] == x:\n                    special += 1\n                continue\n            if a[i + 1] == x + 1:\n                special += 1\n        print(special)\n    return ''\n"
    },
    {
        "number": 4527,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return\n"
    },
    {
        "number": 4527,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''\n"
    },
    {
        "number": 4527,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    \u041f\u043e\u0441\u0442\u0430\u0440\u0430\u043b\u0441\u044f \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043a\u043e\u0434 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u043b\u0438\u043d\u0435\u0439\u043d\u0443\u044e \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c, \u0442\u0430\u043a \u043a\u0430\u043a \u043e\u043d \u0447\u0435\u0442\u043a\u043e \u043d\u0430\u043f\u0438\u0441\u0430\u043d. \u0410 \u0442\u0430\u043a \u0436\u0435 \u0441\u0430\u043c\u043e\u0435 \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u043d\u043e\u0435\n    \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0435 \u0440\u0435\u0448\u0435\u043d\u0438\u0435.\n    :param stdin:\n    :return:\n    \"\"\"\n    # \u0442\u0430\u043a \u043a\u0430\u043a \u043c\u044b \u0437\u0430\u0434\u0430\u0451\u043c \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u0435 \u043f\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0443 \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u043e\u0432, \u0442\u043e \u043c\u044b \u043c\u043e\u0436\u0435\u043c \u043e\u0431\u0440\u0430\u0442\u0438\u0442\u044c \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435 \u043d\u0430 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0438\u0435 \u043f\u043e\u0432\u0442\u043e\u0440\u043e\u0432 \u0432 \u0441\u043f\u0438\u0441\u043a\u0435.\n    # \u0441\u0430\u043c\u043e\u0435 \u0431\u044b\u0441\u0442\u0440\u043e\u0435 \u0440\u0435\u0448\u0435\u043d\u0438\u0435\n    # \u043f\u0440\u043e\u0445\u043e\u0434 \u043f\u043e \u0441\u043f\u0438\u0441\u043a\u0443 \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u043e\u0432 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0446\u0438\u043a\u043b\u0430, \u0430 \u0437\u0430\u0442\u0435\u043c \u0441\u0447\u0438\u0442\u0430\u0435\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0435\u0440\u0435\u0441\u0435\u0447\u0435\u043d\u0438\u0439 \u0432 \u043a\u0430\u0436\u0434\u043e\u043c \u0438\u0437 \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u043e\u0432\n    # \u043c\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u0432\u044b\u0431\u0440\u0430\u0442\u044c \u0442\u0443 \u043a\u043e\u043c\u0431\u0438\u043d\u0430\u0446\u0438\u044e, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442 \u043f\u043e\u043b\u043d\u043e\u0441\u0442\u044c\u044e \u0438\u043b\u0438 \u043f\u043e\u043b\u043d\u043e\u0441\u0442\u044c\u044e \u0438\u043b\u0438 \u043e\u0434\u043d\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e \u0438\u0441\u043a\u043b\u044e\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043e\u0434\u0438\u043d \u0441\u0435\u0433\u043c\u0435\u043d\u0442 \u0438\u043b\u0438 \u0432\u0441\u0435 \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u044b.\n    # \u043f\u0440\u043e\u0441\u0442\u043e\u0435 \u0438 \u043b\u0435\u0433\u043a\u043e\u0435 \u0440\u0435\u0448\u0435\u043d\u0438\u0435\n    # \u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0441\u043f\u0438\u0441\u043e\u043a \u0438 \u043d\u0430\u0445\u043e\u0434\u0438\u043c \u0440\u0430\u0437\u043b\u0438\u0447\u0438\u0435 \u0441\u043e\u0441\u0435\u0434\u043d\u0438\u0445 \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u043e\u0432. \u043d\u0430\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0432\u044b\u0431\u0440\u0430\u0442\u044c \u0442\u0443 \u043a\u043e\u043c\u0431\u0438\u043d\u0430\u0446\u0438\u044e, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442 \u043f\u043e\u043b\u043d\u043e\u0441\u0442\u044c\u044e \u043e\u0434\u043d\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e\n    # \u0438\u0441\u043a\u043b\u044e\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043e\u0434\u0438\u043d \u0441\u0435\u0433\u043c\u0435\u043d\u0442 \u0438\u043b\u0438 \u0432\u0441\u0435 \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u044b. \u0434\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u0441\u043d\u0430\u0447\u0430\u043b\u0430 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u0430 \u043d\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u043f\u043e\u0441\u0447\u0438\u0442\u0430\u0442\u044c \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u043e\u0432 \u0432\u0441\u0435 \u0436\u0435 \u0435\u0441\u0442\u044c \u0432 \u043d\u0435\u043c\n    # \u043f\u043e\u0442\u043e\u043c \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u0430 \u0443\u0436\u0435 \u0432\u044b\u0431\u0440\u0430\u0442\u044c \u0432\u0438\u0434, \u0447\u0442\u043e \u043e\u043d \u0431\u0443\u0434\u0435\u0442 \u0432 \u043d\u0435\u043c \u043f\u043e\u043b\u043d\u043e\u0441\u0442\u044c\u044e \u0438\u043b\u0438 \u043f\u043e\u043b\u043d\u043e\u0441\u0442\u044c\u044e \u0438\u043b\u0438 \u043e\u0434\u043d\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e \u0438\u0441\u043a\u043b\u044e\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043e\u0434\u0438\u043d \u0441\u0435\u0433\u043c\u0435\u043d\u0442 \u0438\u043b\u0438 \u0432\u0441\u0435 \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u044b\n    # \u043d\u0430\u0448\u0435\u043b \u0441\u0430\u043c\u0443\u044e \u043b\u0443\u0447\u0448\u0443\u044e \u043f\u043e\u0434\u0445\u043e\u0434\u044f\u0449\u0443\u044e \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443. \u043a\u0430\u043a \u0438 \u043e\u0436\u0438\u0434\u0430\u043b\u043e\u0441\u044c, \u043f\u0440\u0438 \u043a\u0430\u0436\u0434\u043e\u043c \u0438\u0437 \u0442\u0435\u0441\u0442\u043e\u0432 \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u043e\u0439 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u0431\u044b\u043b\u043e \u043f\u0440\u0438\u043c\u0435\u0440\u043d\u043e \u043e\u0434\u043d\u0430 \u043c\u0438\u043d\u0443\u0442\u0430,\n    # \u043d\u043e \u043c\u044b \u0443\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u043c \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0437\u0430\u0434\u0430\u0447\u0438 \u0438 \u0441\u043a\u043e\u0440\u0435\u0435 \u0432\u0441\u0435\u0433\u043e \u043d\u0435 \u0441\u0442\u0430\u043b\u043a\u0438\u0432\u0430\u0435\u043c\u0441\u044f \u0441 \u043e\u0447\u0435"
    },
    {
        "number": 4527,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    l = []\n    for i in range(n):\n        a, b = list(map(int, stdin.readline().strip().split()))\n        l.append([a, b])\n    l.sort()\n    result = 0\n    length = 0\n    for i in range(n):\n        if l[i][0] > length:\n            length = l[i][1]\n            result += 1\n    return result\n"
    },
    {
        "number": 4527,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return"
    },
    {
        "number": 4527,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4527,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 4527,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''.join(map(str, stdin))\n"
    },
    {
        "number": 4527,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''\n"
    },
    {
        "number": 4527,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 4528,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 4528,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \n    T = int(stdin.readline())\n    for _ in range(T):\n        H, M = stdin.readline().split()\n        H, M = int(H), int(M)\n        H += M // 60\n        M = M % 60\n        print(H * 24 + M)"
    },
    {
        "number": 4528,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5\n   ... 23 55\n   ... 23 0\n   ... 0 1\n   ... 4 20\n   ... 23 59''')\n    5\n    60\n    1439\n    1180\n    1\n    \"\"\"\n   ...\n"
    },
    {
        "number": 4528,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(solution.__doc__)\n    '23 55\\n23 0\\n0 1\\n4 20\\n23 59'\n    \"\"\"\n    import sys\n\n    result = []\n    for line in sys.stdin:\n        h, m = map(int, line.split())\n        result.append(m + 60 * (h + 24))\n    return '\\n'.join(map(str, result))\n"
    },
    {
        "number": 4528,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4528,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for _ in range(t):\n        h, m = map(int, stdin.split(' '))\n        print(60 * (h + m) - m)\n\nt = int(input())\nfor _ in range(t):\n    h, m = map(int, input().split(' '))\n    print(60 * (h + m) - m)"
    },
    {
        "number": 4528,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4528,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    #\n    # Do not edit this code\n    return \"O(n^2)\"\n"
    },
    {
        "number": 4528,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # It doesn't matter if you change it\n    return stdin\n"
    },
    {
        "number": 4528,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # it's guaranteed that no midnight\n    # no 0:00\n    t = int(stdin)\n    print(t)\n    for _ in range(t):\n        stdin = stdin.split(\" \")\n        h, m = int(stdin[0]), int(stdin[1])\n        # print(h, m)\n        # 23 55\n        # 23 0\n        # 0 1\n        # 4 20\n        # 23 59\n        # h, m = map(int, stdin.split())\n        if h == 0:\n            print(60 * 24 - m)\n        else:\n            print(h * 60 + m)\n\n    return \"\"\n"
    },
    {
        "number": 4529,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\n    It should return the shortest non-empty substring of the robot's path such that the endpoint of the path does not change after the removal of this substring.\n    If there is no such substring, it should return two integers -1 and -1.\n    \"\"\"\n    pass\n\nfor stdin in sys.stdin:\n    print(solution(stdin))\n"
    },
    {
        "number": 4529,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 4529,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \n    return ''\n"
    },
    {
        "number": 4529,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    stdout = ''\n    return stdout\n"
    },
    {
        "number": 4529,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Input: str[str[int]]\n    Output: str[int]\n    \"\"\"\n    pass"
    },
    {
        "number": 4529,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Your solution goes here.\n    '''\n    pass\n\n\ndef"
    },
    {
        "number": 4529,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    n = int(stdin)\n    s = stdin\n    a = [0] * n\n    for i in range(n):\n        if i > 0:\n            a[i] = a[i - 1] + 1 if s[i] == \"L\" else a[i - 1] - 1\n    m = 0\n    r = -1\n    i = 0\n    while i < n:\n        if a[i] == 0:\n            m = i - r + 1\n            r = i\n            if m > 1:\n                break\n            else:\n                a[i] = 1\n        i += 1\n    if m <= 1:\n        print(-1)\n        return\n    print(r, r + m - 1)\n    return\n"
    },
    {
        "number": 4529,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for _ in range(t):\n        n = int(stdin.readline())\n        s = stdin.readline().strip()\n        if n <= 3:\n            print(0, n-1)\n            continue\n        if s == \"LL\":\n            print(1, 2)\n            continue\n        if s == \"RR\":\n            print(1, 1)\n            continue\n        l, r = 1, n\n        for i in range(1, n):\n            if s[i] == s[i-1]:\n                l = i + 1\n                break\n        for i in range(n-2, -1, -1):\n            if s[i] == s[i+1]:\n                r = i\n                break\n        if l > r:\n            print(-1)\n        else:\n            print(l, r)"
    },
    {
        "number": 4529,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find the shortest substring that do not change the endpoint of the robot's path.\n\n    Args:\n        stdin (str): input string\n\n    Returns:\n        str: answer\n    \"\"\"\n\n    return ''\n"
    },
    {
        "number": 4529,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for _ in range(t):\n        n = int(stdin.readline())\n        s = stdin.readline()\n        \n        left = right = 0\n        previous_end = 0\n        min_size = float('inf')\n        \n        for right in range(n):\n            if s[right] == 'R' and s[right-1] == 'L':\n                while right < n and s[right] == 'R':\n                    right += 1\n                \n                size = right - left + 1\n                if size < min_size:\n                    min_size = size\n                    previous_end = right\n                \n            if s[right] == 'L' and s[right-1] == 'R':\n                while right < n and s[right] == 'L':\n                    right += 1\n                \n                size = right - left + 1\n                if size < min_size:\n                    min_size = size\n                    previous_end = right\n            \n        left = previous_end\n        \n        previous_end = 0\n        min_size = float('inf')\n        \n        for left in range(n-1, -1, -1):\n            if s[left] == 'R' and s[left+1] == 'L':\n                while left >= 0 and s[left] == 'R':\n                    left -= 1\n                \n                size = right - left + 1\n                if size < min_size:\n                    min_size = size\n                    previous_end = left\n                \n            if s[left] == 'L' and s[left+1] == 'R':\n                while left >= 0 and s[left] == 'L':\n                    left -= 1\n                \n                size = right - left + 1\n                if size < min_size:\n                    min_size = size\n                    previous_end = left\n        \n        right = previous_end\n        \n        if right == 0:\n            print(0, 0)\n            continue\n        \n        print(previous_end + 1, right)\n        \n        \n"
    },
    {
        "number": 4530,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4530,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n"
    },
    {
        "number": 4530,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution method.\n    \"\"\"\n    pass  # TODO: your code here\n\n\ndef"
    },
    {
        "number": 4530,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    #\n    # # write your code in Python 3.6\n    # # ===============================\n\n    pass\n"
    },
    {
        "number": 4530,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\"\"\"\n\nimport sys\n\n\ndef"
    },
    {
        "number": 4530,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 4530,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4530,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\"\"\""
    },
    {
        "number": 4530,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\ndef"
    },
    {
        "number": 4530,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4531,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    input_lst = stdin.strip().split('\\n')\n    lst = list(map(int, input_lst[0].split(' ')))\n    sum = 0\n    for i in range(1, len(lst)):\n        u, v = map(int, input_lst[i].split(' '))\n        if u < v:\n            sum += lst[u] * lst[v]\n        else:\n            sum += lst[v] * lst[u]\n    return str(sum)\n"
    },
    {
        "number": 4531,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4531,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    res = 0\n    for u, v in itertools.combinations(range(1, n), 2):\n        res += min(a[u - 1], a[v - 1]) * (v - u)\n    return str(res)\n"
    },
    {
        "number": 4531,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 4531,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    pass\n"
    },
    {
        "number": 4531,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4531,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4531,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4531,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a = [int(s) for s in stdin.split()]\n    n = a[0]\n    adj = {}\n    for i in range(n):\n        adj[i + 1] = set()\n        for e in a[1:]:\n            if e!= i + 1:\n                adj[i + 1].add(e)\n    dist = {1: 0}\n    q = [1]\n    while q:\n        x = q.pop(0)\n        for y in adj[x]:\n            if y not in dist:\n                dist[y] = dist[x] + 1\n                q.append(y)\n    return sum(a[i] * dist[i] for i in dist)\n"
    },
    {
        "number": 4531,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    a = [int(i) for i in lines[1:]]\n    ans = 0\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            ans += dist(i, j) * a[i] * a[j]\n    return ans\n\ndef"
    },
    {
        "number": 4532,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4532,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split('\\n')[1:]))\n    x = 0\n    ans = 0\n    for i in range(1, len(a) + 1):\n        x = (x + a[i-1]) % i\n        ans += x\n    return ans\n"
    },
    {
        "number": 4532,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return 'Not yet'\n"
    },
    {
        "number": 4532,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 4532,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # return \"\""
    },
    {
        "number": 4532,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return \"\"\n"
    },
    {
        "number": 4532,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    #\n    # Return the minimum number of moves required to obtain such an array that each its element is divisible by $k$ (the value $k$ is given).\n    t = int(stdin.readline())\n    for _ in range(t):\n        n, k = list(map(int, stdin.readline().split()))\n        l = list(map(int, stdin.readline().split()))\n        l1 = []\n        x = 0\n        for i in range(n):\n            if l[i] % k == 0:\n                x = 0\n            else:\n                l1.append(l[i] % k)\n                x += 1\n        print(x)\n    return \"\"\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4532,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n    return \"\"\n"
    },
    {
        "number": 4532,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n\nfor t in range(int(stdin)):\n    n, k = [int(x) for x in stdin.split(' ')]\n    a = [int(x) for x in stdin.split(' ')[t+1].split(' ')]\n    n, k, a = int(n), int(k), list(map(int, a))\n\n    x = 0\n    while True:\n        if all(a[i] % k == 0 for i in range(n)):\n            break\n        x += 1\n        for i in range(n):\n            a[i] += x % k\n\n    print(x)"
    },
    {
        "number": 4532,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 4533,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Your runtime beats 85.50 % of python3 submissions.\n    \n    \"\"\"\n    cookies = [int(i) for i in stdin.split()]\n    children = [int(i) for i in stdin.split()]\n    total_cookies = sum(cookies)\n    total_children = sum(children)\n    if total_children > total_cookies:\n        return \"impossible\"\n    else:\n        greed_factor = []\n        for i in range(0,len(children)):\n            greed_factor.append(children[i] / cookies[i])\n        greed_factor.sort()\n        for i in range(0,len(greed_factor)-1):\n            if greed_factor[i] > greed_factor[i+1]:\n                return str(i+1)\n            else:\n                return str(i+2)"
    },
    {
        "number": 4533,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return f'{solution.__name__}()'\n\n\ndef"
    },
    {
        "number": 4533,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return 'a'\n"
    },
    {
        "number": 4533,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4533,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return\n\nassert (solution('1\\n1\\n') == 1)\n\"\"\"\n\ndef"
    },
    {
        "number": 4533,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    #get the input from the string\n    n, m = list(map(int, stdin.split()))\n    array = list(map(int, stdin.split()))\n    \n    greed = [0] * m\n    \n    for i in range(len(array)):\n        greed[i] = array[i]\n        \n    greed.sort(reverse=True)\n    \n    ans = 0\n    for i in range(len(array)):\n        if array[i] >= greed[i]:\n            ans += 1\n    \n    return str(ans)\n    \nprint(solution(\"1 2 3\"))\n"
    },
    {
        "number": 4533,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    greed_factor, cookies = list(map(int, stdin.split(\" \")))\n\n    return str(len(list(filter(lambda x: x >= greed_factor, cookies))))"
    },
    {
        "number": 4533,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4533,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\ndef"
    },
    {
        "number": 4533,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdin\n"
    },
    {
        "number": 4534,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 4534,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4534,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n"
    },
    {
        "number": 4534,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\ndef"
    },
    {
        "number": 4534,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4534,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    res = []\n    for i in range(k + 1):\n        res.append([1] * i)\n    \n    for i in range(k):\n        for j in range(1, i):\n            res[i + 1][j] = res[i][j - 1] + res[i][j]\n    return res[k]\n"
    },
    {
        "number": 4534,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4534,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin.readline())\n    if k < 1 or k > 32:\n        raise Exception(\"K must be between 0 and 32\")\n    row = []\n    for i in range(k+1):\n        row.append(helper(i))\n    return str(row[k])\n\n\ndef"
    },
    {
        "number": 4534,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \n    \"\"\"\n    n = int(stdin)\n    row = [1]\n    for i in range(n):\n        row.append(sum(row[-2:]))\n    return row[1:]\n    \"\"\"\n    import math\n    triangle = [[1], [1, 1]]\n    for i in range(2, int(math.ceil(float(n) / 2))):\n        triangle.append([1] + [a + b for a, b in zip(triangle[-1][:-1], triangle[-1][1:])] + [1])\n    return triangle[n - 1]\n"
    },
    {
        "number": 4534,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n## TEST2\nk = 7\nprint(getRow(k))\n\n\n\n\nclass Solution:\n    def getRow(self, rowIndex: int) -> List[int]:\n        \n        \n        def getRowHelper(rowIndex, currRow):\n            if rowIndex == 0:\n                return currRow\n            prevRow = getRowHelper(rowIndex-1, currRow)\n            \n            \n            newRow = []\n            \n            for i in range(len(prevRow)+1):\n                if i == 0 or i == len(prevRow):\n                    newRow.append(1)\n                else:\n                    newRow.append(prevRow[i-1]+prevRow[i])\n            \n            return newRow\n        \n        return getRowHelper(rowIndex, [1])\n    \n    \nclass Solution:\n    def getRow(self, rowIndex: int) -> List[int]:\n        \n        \n        dp = [[0 for i in range(rowIndex+1)] for j in range(rowIndex+1)]\n        \n        \n        for i in range(rowIndex+1):\n            for j in range(i+1):\n                if i == 0 or j == 0:\n                    dp[i][j] = 1\n                else:\n                    dp[i][j] = dp[i-1][j-1] + dp[i-1][j]\n        \n        return dp[rowIndex]\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 4535,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 4535,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return None\n"
    },
    {
        "number": 4535,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\"\"\"\n\nclass Solution:\n    def hammingWeight(self, n: int) -> int:\n        return bin(n).count('1')\n        # return bin(n).count('1')"
    },
    {
        "number": 4535,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return None\n\"\"\"\n\nclass Solution:\n    def hammingWeight(self, n: int) -> int:\n        #print(n)\n        return bin(n).count('1')\n\nsolution = Solution()\nprint(solution.hammingWeight(111111111111111111111111111111101))"
    },
    {
        "number": 4535,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\" \n    Given a binary string, return the number of 1s in it.\n\n    >>> solution(\"00000000000000000000000000001011\")\n    3\n    >>> solution(\"00000000000000000000000010000000\")\n    1\n    >>> solution(\"111111111111111111111111111111101\")\n    31\n    \"\"\"\n   ...\n    \n    \n    \n>>> bin(65)\n'0b100000001101'\n>>> bin(9)\n'0b1001'\n>>> bin(15)\n'0b1111'\n>>> bin(255)\n'0b11111111'\n>>> bin(1023)\n'0b10011110'\n>>> bin(65535)\n'0b100000000111111111111111111111111111111111111111111111111111111110'\n>>> \n\n>>> bin(0)\n'0b0'\n>>> bin(1)\n'0b1'\n>>> bin(255)\n'0b11111111'\n>>> bin(254)\n'0b111111110'\n>>> bin(255-1)\n'0b11111111111111111111111111111111111111111111111111111111111111111'\n>>> bin(254-1)\n'0b11111111111111111111111111111111111111111111111111111111111111110'\n>>> bin(0b11111111111111111111111111111111111111111111111111111111111111110)\n'0b111111111111111111111111111111111111111111111111111111111111111111110'\n>>> bin(0b
    },
    {
        "number": 4535,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    \n    \n    return ''\n    \n    \ndef"
    },
    {
        "number": 4535,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return 'num: '+str(len(stdin.split('0')))\n\nprint(solution('00000000000000000000000000001011'))"
    },
    {
        "number": 4535,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return answer\n\nprint(solution
    },
    {
        "number": 4535,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # get the length of the input string\n    # and convert the string to a binary string\n    n = len(stdin)\n    binary_string = bin(int(stdin, 2))\n\n    # count the number of 1s in the binary string\n    # and return the count\n    return binary_string.count(\"1\")\n\n\"\"\"\ndef"
    },
    {
        "number": 4535,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return 'Not possible'\n\"\"\"\n\nclass Solution:\n    def hammingWeight(self, n: int) -> int:\n        count = 0\n        while n > 0:\n            if n % 2 == 1:\n                count += 1\n            n = n // 2\n        return count"
    },
    {
        "number": 4536,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(\"\".join(stdin)) + 1)\n\ndef"
    },
    {
        "number": 4536,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    new_number = int(stdin) + 1\n    return str(new_number)\n\ndef"
    },
    {
        "number": 4536,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"1234\")\n    '1235'\n    >>> solution(\"99999\")\n    '100000'\n    >>> solution(\"12\")\n    '13'\n    >>> solution(\"1\")\n    '2'\n    >>> solution(\"0\")\n    '1'\n    \"\"\"\n    arr = [int(x) for x in stdin]\n    if len(arr) == 1:\n        return str(int(stdin) + 1)\n    result = 0\n    for i in range(len(arr)):\n        result += (10 ** i) * arr[len(arr) - i - 1]\n    return str(result + 1)\n"
    },
    {
        "number": 4536,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    ls: list = [int(c) for c in stdin]\n    ls.reverse()\n    digit = 1\n    for i in range(len(ls)):\n        ls[i] = ls[i] + digit\n        digit = ls[i] // 10\n        ls[i] = ls[i] % 10\n    ls.reverse()\n    return ''.join([str(c) for c in ls])\n"
    },
    {
        "number": 4536,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    input: string\n    output: string\n    \"\"\"\n    result = [int(i) for i in stdin]\n    result = result[::-1]\n    for i in range(len(result)):\n        if result[i]!= 9:\n            result[i] = result[i] + 1\n            break\n        else:\n            result[i] = 0\n    if result[0] == 0:\n        return \"1\" + str(result)\n    else:\n        return str(result[::-1])\n"
    },
    {
        "number": 4536,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    num = 0\n    for idx, digit in enumerate(stdin):\n        num += int(digit) * (10**idx)\n    return str(num+1)\n"
    },
    {
        "number": 4536,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    number = [int(s) for s in stdin.strip().split()]\n    number[-1] += 1\n    for i in reversed(range(len(number))):\n        if number[i] > 9:\n            number[i] %= 10\n            number[i - 1] += 1\n    return''.join(str(i) for i in number)\n\nsolution(input())"
    },
    {
        "number": 4536,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Given an array of digits, return digits of integer formed by adding 1.\n\n    >>> solution('1,2,3')\n    '2,3,4'\n    >>> solution('9,9,9,9')\n    '1,0,0,0,0'\n    >>> solution('9,9,9,9,9')\n    '1,0,0,0,0,0'\n    \"\"\"\n    # convert string to list\n    arr = [int(n) for n in stdin.split(\",\")]\n\n    # traverse through array to add 1 to each element\n    for i in range(len(arr)):\n        arr[i] += 1\n\n    return \",\".join([str(n) for n in arr])\n"
    },
    {
        "number": 4536,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    nums = list(map(int, stdin))\n    nums[len(nums) - 1] += 1\n    for i in range(len(nums) - 1, -1, -1):\n        if nums[i] == 10:\n            nums[i] = 0\n            if i - 1 >= 0:\n                nums[i - 1] += 1\n    print(''.join(map(str, nums)))\n"
    },
    {
        "number": 4536,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    number = int(stdin)\n    number += 1\n    number_str = str(number)\n    return number_str\n\n\nprint(solution('123'))\n"
    },
    {
        "number": 4537,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(x) for x in stdin.strip().split(' ')]\n    if a > b:\n        return str(a + b)\n    elif a < b:\n        return str(a - b)\n    else:\n        return str(a * b)\n"
    },
    {
        "number": 4537,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(max(a + b, a - b, a * b))\n"
    },
    {
        "number": 4537,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin[0])\n    b = int(stdin[1])\n    c = a+b\n    d = a-b\n    e = a*b\n    return max(c,d,e)\n\nprint(solution(stdin))\n\n-----\ndef"
    },
    {
        "number": 4537,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(max(a+b, a-b, a*b))\n"
    },
    {
        "number": 4537,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split(\" \"))\n    return str(max(a+b, a-b, a*b))\n    \n"
    },
    {
        "number": 4537,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return max(a+b, a-b, a*b)"
    },
    {
        "number": 4537,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    print(max(A+B, A-B, A*B))\n    \n    return ''"
    },
    {
        "number": 4537,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return max([a+b, a-b, a*b])\n"
    },
    {
        "number": 4537,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(max(a+b, a-b, a*b))\n"
    },
    {
        "number": 4537,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Returns the largest of three integers.\n    '''\n    A, B = [int(x) for x in stdin.split(' ')]\n    return str(max(A+B, A-B, A*B))"
    },
    {
        "number": 4538,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 4538,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    https://app.codility.com/demo/results/trainingGSL3G-XD7/\n    '''\n    pass\n"
    },
    {
        "number": 4538,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    'your solution'\n    pass\n    return str"
    },
    {
        "number": 4538,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    num_cases = int(stdin.readline().strip())\n    for i in range(num_cases):\n        n, d = map(int, stdin.readline().split())\n        points = [tuple(map(int, stdin.readline().split())) for _ in range(n)]\n        points.append((0, 0))\n        points = sorted(points)\n        # print(points)\n        ans = 0\n        curr_point = (0, 0)\n        curr_dist = 0\n        for point in points:\n            if curr_point == point:\n                continue\n            curr_dist += math.sqrt((point[0] - curr_point[0]) ** 2 + (point[1] - curr_point[1]) ** 2)\n            if curr_dist > d:\n                break\n            ans += 1\n            curr_point = point\n        print(ans)\n    return ''\n\nimport math\nimport numpy as np\ndef"
    },
    {
        "number": 4538,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4 5\n   ... 0 5\n   ... -2 4\n   ... 3 4\n   ... 4 -4\n   ... ''')\n    3\n    \"\"\"\n    stdin = stdin.split('\\n')\n    n, d = [int(i) for i in stdin[0].split()]\n    points = [[int(i) for i in stdin[i + 1].split()] for i in range(n)]\n    points = sorted(points, key=lambda point: point[0]**2 + point[1]**2)\n    return str(len(list(filter(lambda point: d**2 >= point[0]**2 + point[1]**2, points))))\n"
    },
    {
        "number": 4538,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(input())\n    3\n    \"\"\"\n    lines = stdin.split(\"\\n\")\n    n, d = map(int, lines[0].split())\n    assert len(lines) == n + 1\n    points = []\n    for i in range(1, n + 1):\n        p, q = map(int, lines[i].split())\n        points.append((p, q))\n    points.sort(key=lambda p: p[0] ** 2 + p[1] ** 2)\n\n    ans = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            x, y = points[i]\n            dx, dy = points[j]\n            if abs(dx - x) + abs(dy - y) <= d:\n                ans += 1\n                break\n    return str(ans)\n"
    },
    {
        "number": 4538,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    import re\n    import sys\n\n    reg = re.compile(r'[-+]?[0-9]*\\.?[0-9]+')\n    inp = reg.findall(stdin)\n    N, D = int(inp[0]), int(inp[1])\n    points = [tuple(map(float, inp[2+i*2:4+i*2])) for i in range(N)]\n\n    from itertools import combinations\n    points_dist = [sum(map(lambda x: (x[0]-0)**2+(x[1]-0)**2, point)) for point in combinations(points, 2)]\n    res = [point for point in points_dist if point <= D**2]\n\n    return str(len(res))"
    },
    {
        "number": 4538,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    return \"\"\n"
    },
    {
        "number": 4538,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4538,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, D = map(int, stdin.split())\n    x, y = [], []\n    for _ in range(N):\n        x_, y_ = map(int, stdin.split())\n        x.append(x_)\n        y.append(y_)\n    ans = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            distance = abs(x[i] - x[j]) ** 2 + abs(y[i] - y[j]) ** 2\n            if distance <= D ** 2:\n                ans += 1\n    return ans\n\n----Test Case----\n>>> solution('4 5\\n0 5\\n-2 4\\n3 4\\n4 -4')\n3\n\n>>> solution('4 5\\n0 5\\n-2 4\\n3 4\\n4 -4\\n-4 -4')\n5\n\"\"\"\n"
    },
    {
        "number": 4539,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    sum = 0\n    for i in str(N):\n        sum += int(i)\n    if N % sum == 0:\n        return 'Yes'\n    return 'No'\n"
    },
    {
        "number": 4539,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = stdin\n    N = int(N)\n    N = str(N)\n    sum = 0\n    for i in N:\n        sum += int(i)\n    if N % sum == 0:\n        print('Yes')\n    else:\n        print('No')"
    },
    {
        "number": 4539,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    num = 0\n    sum = 0\n    # in case of 1 digit\n    if N < 10:\n        return 'Yes'\n    # in case of 2 digits\n    elif N >= 10 and N < 100:\n        if N%10 == 0:\n            return 'Yes'\n        else:\n            return 'No'\n    # in case of 3 or more digits\n    else:\n        num = N\n        sum = 0\n        while num > 0:\n            sum = sum + (num%10)\n            num = num//10\n        if N%sum == 0:\n            return 'Yes'\n        else:\n            return 'No'"
    },
    {
        "number": 4539,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4539,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    sum_ = sum(int(i) for i in str(n))\n    if n % sum_ == 0:\n        return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 4539,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    try:\n        if sum(map(int, stdin)) % int(stdin) == 0:\n            print('Yes')\n        else:\n            print('No')\n    except:\n        print('No')\n\n\ndef"
    },
    {
        "number": 4539,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    s = sum(map(int, list(str(n))))\n    if s % n == 0:\n        return 'Yes'\n    return 'No'\n"
    },
    {
        "number": 4539,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4539,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    print(\"Yes\" if N % f(N) == 0 else \"No\")\n    return None\n"
    },
    {
        "number": 4539,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.read())\n    sum = 0\n    for i in str(n):\n        sum += int(i)\n    if n % sum == 0:\n        return \"Yes\"\n    else:\n        return \"No\"\n    #Your code here\n"
    },
    {
        "number": 4540,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''\n"
    },
    {
        "number": 4540,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    cost_table = []\n    for i in range(0, n):\n        cost_table.append((abs(a[i] - a[i-1]), a[i]))\n    cost_table.sort()\n    ans = []\n    for i in range(1, n):\n        ans.append(cost_table[i][1] - cost_table[i-1][1])\n    ans.append(cost_table[0][1] - cost_table[n-1][1])\n    for i in range(0, n):\n        print(ans[i])\n    return ''\n"
    },
    {
        "number": 4540,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    a.sort()\n    numbers = []\n    if a[0] < 0:\n        numbers.append(0)\n    for i in range(n):\n        if a[i] > 0:\n            numbers.append(a[i])\n        if a[i] < 0:\n            numbers.append(0)\n    numbers.append(0)\n\n    result = []\n    for i in range(len(numbers)-1):\n        numbers.sort()\n        result.append(numbers[i+1]-numbers[i])\n    for x in result:\n        print(x)"
    },
    {
        "number": 4540,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    A = [int(i) for i in stdin.split('\\n')[0].split(' ')]\n    # N = A.count(A[0])\n    # A = list(set(A))\n    A.sort()\n    if N == 1:\n        print(0)\n        return\n    if N == 2:\n        print(abs(A[1] - A[0]))\n        return\n\n    ans = [A[0]]\n    for i in range(1, N):\n        ans.append(A[i] - A[i - 1])\n    ans.append(A[N - 1] - A[0])\n    print(*ans)\n"
    },
    {
        "number": 4540,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n    N = int(stdin.readline())\n    A = list(map(int, stdin.readline().split()))\n    # A = list(map(int, input().split()))\n    # print(A)\n\n    S = []\n    cost = 0\n    for i in range(N):\n        if i > 0 and A[i] < A[i - 1]:\n            cost -= abs(A[i - 1] - A[i])\n            if i < N - 1:\n                cost += abs(A[i + 1] - A[i])\n            S.append(i)\n        cost += abs(A[i] - A[i + 1])\n\n    cost += abs(A[0] - A[N - 1])\n    # print(cost)\n    print(cost)\n    print(' '.join(map(str, S)))\n\"\"\"\n    S = []\n    cost = 0\n    for i in range(N):\n        if A[i] > 0:\n            S.append(i)\n            cost += abs(A[i - 1] - A[i])\n            if i < N - 1:\n                cost += abs(A[i + 1] - A[i])\n            cost += abs(A[i] - A[i + 1])\n    S.append(N)\n    cost += abs(A[N - 1] - A[0])\n    print(cost)\n    print(' '.join(map(str, S)))\n"
    },
    {
        "number": 4540,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # \ud604\uc7ac \uc704\uce58(x)\uc5d0\uc11c \uc8fc\uc5b4\uc9c4 \uae30\uc900\uc810(y)\uc640\uc758 \uc720\ud074\ub9ac\ub4dc \uac70\ub9ac\ub97c \uad6c\ud55c\ub2e4.\n    # \ud604\uc7ac \uc704\uce58(x)\uc5d0\uc11c \uc8fc\uc5b4\uc9c4 \uae30\uc900\uc810(y)\ub85c \uc774\ub3d9\ud558\ub294 \ucd5c\uc18c\ube44\uc6a9\uc744 \uad6c\ud55c\ub2e4.\n    # \uc0c1\ub300\uc801\uc778 \uae30\uc900\uc810\uc5d0\uc11c \uc8fc\uc5b4\uc9c4 \uae30\uc900\uc810(y)\ub85c \uc774\ub3d9\ud558\ub294 \ucd5c\uc18c\ube44\uc6a9\uc744 \uad6c\ud55c\ub2e4.\n    # \uc774\ub807\uac8c \ud55c \uc774\uc720\ub294 \ud604\uc7ac \uc704\uce58\uc640 \uae30\uc900\uc810 \uc0ac\uc774\uc758 \uc720\ud074\ub9ac\ub4dc \uac70\ub9ac\uac00 \ucd5c\uc18c\uc778 \uacbd\uc6b0 \uac00\uc9c0\uce58\uae30\ub97c \ud558\uae30 \uc704\ud574\uc11c\uc774\ub2e4.\n    # \uadf8 \uc678\uc758 \uacbd\uc6b0\uc5d0\ub294 \uae30\uc900\uc810\uc5d0\uc11c \uc0c1\ub300\uc801\uc778 \uae30\uc900\uc810\uc73c\ub85c \uc774\ub3d9\ud558\ub294 \ucd5c\uc18c\ube44\uc6a9\uc744 \uad6c\ud55c\ub2e4.\n    # \ub530\ub77c\uc11c \ubc18\ub300\ub85c \uc0c1\ub300\uc801\uc778 \uae30\uc900\uc810\uc5d0\uc11c \uc8fc\uc5b4\uc9c4 \uae30\uc900\uc810\uc73c\ub85c \uc774\ub3d9\ud558\ub294 \ucd5c\uc18c\ube44\uc6a9\uc744 \uad6c\ud55c\ub2e4.\n    # \uadf8\ub9ac\uace0 \uc774 \uac12\uc744 \uacf1\ud558\uba74 \ub41c\ub2e4.\n    # \uac00\ubc29\uc774 \ucc29\uc548\ud558\uba74 \uae30\uc900\uc810\uc5d0\uc11c \uc8fc\uc5b4\uc9c4 \uae30\uc900\uc810 \uc0ac\uc774\uc758 \uc720\ud074\ub9ac\ub4dc \uac70\ub9ac\uac00 \ucd5c\uc18c\uc778 \uacbd\uc6b0\ub97c \uad6c\ud558\uace0\n    # \uac00\ubc29\uc774 \ucc29\uc548\ud558\uc9c0 \uc54a\uc558\uc744 \uacbd\uc6b0\ub294 \uae30\uc900\uc810\uc5d0\uc11c \uc0c1\ub300\uc801\uc778 \uae30\uc900\uc810\uc774\ub85c \uc774\ub3d9\ud558\ub294 \ucd5c\uc18c\ube44\uc6a9\uc744 \uad6c\ud558\uba74 \ub41c\ub2e4.\n    # \uadf8\ub9ac\uace0 \uac00\ubc29\uc774 \ucc29\uc548\ud558\uba74 \ucc98\uc74c\uc73c\ub85c \uc9c0\ub098\uc628 \uc774\uc804 \uae30\uc900\uc810\uc774\uae30 \ub54c\ubb38\uc5d0 \uae30\uc900\uc810\uc5d0\uc11c \uc8fc\uc5b4\uc9c4 \uae30\uc900\uc810\uae4c\uc9c0\uc758 \uac70\ub9ac\uc640 \uc774\uc804 \uae30\uc900\uc810\uae4c\uc9c0\uc758 \uac70\ub9ac\ub97c \ube7c\uc11c \uc0c1\ub300\uc801\uc778 \uae30\uc900\uc810\uae4c\uc9c0\uc758 \ucd5c\uc18c\ube44\uc6a9\uc744 \uad6c\ud558\uba74 \ub41c\ub2e4.\n    # \uadf8\ub9ac\uace0 \uac00\ubc29\uc774 \ucc29\uc548\ud558\uc9c0 \uc54a\uc558\uc744 \uacbd\uc6b0 \ucc98\uc74c\uc73c\ub85c \uc9c0\ub098\uc628 \uc774\uc804 \uae30\uc900\uc810\uc774\uae30 \ub54c\ubb38\uc5d0 \ucc98\uc74c\uc73c\ub85c \uc9c0\ub098\uc628 \uc774\uc804 \uae30\uc900\uc810\uae4c\uc9c0\uc758 \uac70\ub9ac\uc640 \uc774\uc804 \uae30\uc900\uc810\uae4c\uc9c0\uc758 \uac70\ub9ac\ub97c \ube7c\uc11c \uc0c1\ub300\uc801\uc778 \uae30\uc900\uc810\uae4c\uc9c0\uc758 \ucd5c\uc18c\ube44\uc6a9\uc744 \uad6c\ud558\uba74 \ub41c\ub2e4.\n    def min_value_of_travel(left, right):\n        if left == right:\n            return 0\n        elif left + 1 == right:\n            return abs(A[left] - A[right])\n        else:\n            return min(min_value_of_travel(left, mid) + min_value_of_travel(mid + 1, right) for mid in range(left, right))\n\n    def min_value_of_travel_2(left, right):\n        if left == right:\n            return 0\n        else:\n            return min(abs(A[left]"
    },
    {
        "number": 4540,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the total cost of traveling in the axis according to the plan.\n\n    Args:\n        stdin (str): Input given in standard input\n\n    Returns:\n        str: The answer to the problem\n    \"\"\"\n    result = []\n    stdin = stdin.split()\n    n = int(stdin[0])\n    for i in range(1, n + 1):\n        a, b = list(map(int, stdin[i].split()))\n        if a <= b:\n            result.append(abs(a - b) * 2)\n        else:\n            result.append(abs(a - b) * -2)\n    return '\\n'.join(list(map(str, result)))\n\n\ndef"
    },
    {
        "number": 4540,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    A = [int(x) for x in lines[1].split()]\n    return '\\n'.join([str(abs(x - y)) +'' + str(abs(x + y)) for x, y in zip([0] + A, A + [0])])"
    },
    {
        "number": 4540,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 4540,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    for _ in range(int(stdin)):\n        N, *A = map(int, stdin.split('\\n'))\n        # O(N)\n        arr = [abs(a - 0) for a in A]\n        arr[0] = 0\n        # O(N)\n        for i in range(1, N):\n            arr[i] = min(arr[i], abs(A[i] - A[i - 1]))\n        print(sum(arr))\n    '''\n    # O(N)\n    N, *A = map(int, stdin.split('\\n'))\n    # O(N)\n    arr = [abs(a - 0) for a in A]\n    arr[0] = 0\n    # O(N)\n    for i in range(1, N):\n        # O(N)\n        for j in range(i, N):\n            arr[j] = min(arr[j], abs(A[j] - A[i - 1]))\n    print(sum(arr))\n"
    },
    {
        "number": 4541,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"a\")\n    vowel\n    >>> solution(\"e\")\n    vowel\n    >>> solution(\"i\")\n    vowel\n    >>> solution(\"o\")\n    vowel\n    >>> solution(\"u\")\n    vowel\n    >>> solution(\"x\")\n    consonant\n    \"\"\"\n    return \"vowel\" if stdin in \"aeiou\" else \"consonant\"\n"
    },
    {
        "number": 4541,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    c = stdin\n    if c in \"a e i o u\":\n        return \"vowel\"\n    return \"consonant\""
    },
    {
        "number": 4541,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    if stdin == 'a':\n        return 'vowel'\n    if stdin == 'e':\n        return 'vowel'\n    if stdin == 'i':\n        return 'vowel'\n    if stdin == 'o':\n        return 'vowel'\n    if stdin == 'u':\n        return 'vowel'\n    else:\n        return 'consonant'\n"
    },
    {
        "number": 4541,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    if stdin in 'aeiou':\n        return 'vowel'\n    else:\n        return 'consonant'\n"
    },
    {
        "number": 4541,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    vowels = set('aeiou')\n    for c in stdin:\n        if c not in vowels:\n            return 'consonant'\n    return 'vowel'"
    },
    {
        "number": 4541,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    c = stdin\n    if c == 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u':\n        return 'vowel'\n    return 'consonant'"
    },
    {
        "number": 4541,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return \"vowel\" if stdin.lower() in 'aeiou' else \"consonant\"\n"
    },
    {
        "number": 4541,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    if stdin.lower() == \"a\" or stdin.lower() == \"e\" or stdin.lower() == \"i\" or stdin.lower() == \"o\" or stdin.lower() == \"u\":\n        return \"vowel\"\n    else:\n        return \"consonant\"\n"
    },
    {
        "number": 4541,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Get input, then return vowel or consonant\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    c = stdin.lower()\n    if c in vowels:\n        return 'vowel'\n    else:\n        return 'consonant'\n\"\"\"\nimport unittest\n\nclass TestStringMethods(unittest.TestCase):\n    def test_is_isogram_one(self):\n        self.assertEqual(is_isogram(\"Dermatoglyphics\"), True)\n\n    def test_is_isogram_two(self):\n        self.assertEqual(is_isogram(\"aba\"), False)\n\n    def test_is_isogram_three(self):\n        self.assertEqual(is_isogram(\"moOse\"), False)\n\n    def test_is_isogram_four(self):\n        self.assertEqual(is_isogram(\"isIsogram\"), False)\n\n    def test_is_isogram_five(self):\n        self.assertEqual(is_isogram(\"\"), True)"
    },
    {
        "number": 4541,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # implement here\n    return stdin"
    },
    {
        "number": 4542,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.count(\"B\") - stdin.count(\"W\")"
    },
    {
        "number": 4542,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin[0]\n    left = 0\n    right = len(string) - 1\n    white = string.count('B')\n    black = string.count('W')\n    while left < right:\n        if string[left] == 'B':\n            left += 1\n            white -= 1\n        elif string[right] == 'W':\n            right -= 1\n            black -= 1\n        else:\n            left += 1\n            right -= 1\n    return '{0}'.format(white + black)\n"
    },
    {
        "number": 4542,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4542,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    rows = stdin.splitlines()\n    stones = []\n    for row in rows:\n        stones += row\n    \n    n = len(stones)\n    s_b, s_w = 0, 0\n    for i in range(n):\n        if stones[i] == \"B\":\n            s_b += 1\n        if stones[i] == \"W\":\n            s_w += 1\n    \n    return str(min(s_b, s_w))\n"
    },
    {
        "number": 4542,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    ans = 0\n    for i in range(len(stdin)):\n        if stdin[i] == \"W\":\n            ans += 1\n        elif stdin[i] == \"B\":\n            ans += 2\n    return ans\n\"\"\"\n"
    },
    {
        "number": 4542,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stones = stdin.split('B')\n    return len(max(stones, key=len))\n"
    },
    {
        "number": 4542,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return '1'"
    },
    {
        "number": 4542,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 4542,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return \"\"\n"
    },
    {
        "number": 4542,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4543,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return \"Yes\" if int(str(a) + str(b)) ** 0.5 % 1 == 0 else \"No\"\n"
    },
    {
        "number": 4543,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution to the problem\"\"\"\n    a, b = map(int, stdin.split())\n    return \"Yes\" if a ** 2 + b ** 2 == (a+b)**2 else \"No\"\n"
    },
    {
        "number": 4543,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(n) for n in stdin.split()]\n    return 'Yes' if a**2 + b**2 == (a+b)**2 else 'No'\n\ndef"
    },
    {
        "number": 4543,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return \"Yes\" if a ** 2 + b ** 2 == (a * b) ** 2 else \"No\"\n"
    },
    {
        "number": 4543,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    _, a, b = stdin.split()\n    a, b = int(a), int(b)\n    return 'Yes' if is_square(a + b) else 'No'\ndef"
    },
    {
        "number": 4543,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(x) for x in stdin.split(' ')]\n    if is_square(a*b):\n        return 'Yes'\n    else:\n        return 'No'\n\ndef"
    },
    {
        "number": 4543,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if (a ** 2) + (b ** 2) == ((a * b) ** 2):\n        return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 4543,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    numbers = stdin.split()\n    a, b = int(numbers[0]), int(numbers[1])\n    result = a + b\n    \n    return 'Yes' if is_square(result) else 'No'\n    \ndef"
    },
    {
        "number": 4543,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return 'Yes' if b in square_numbers(a) else 'No'\n\n\ndef"
    },
    {
        "number": 4543,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(x) for x in stdin.split()]\n    a = str(a)\n    b = str(b)\n    a_b = a+b\n    print(a_b)\n    if sqrt(int(a_b)) == int(a_b)**0.5:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n    return None\n\ndef"
    },
    {
        "number": 4544,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\n--------Explanation--------\nFor a sequence of length N, we can calculate the optimal number of elements in the sequence by the following formula:\n(number of elements = N * (N + 1) / 2) - sum(a_i)\nWe use the following brute force approach:\n- We loop through all possible values of X and count the number of elements in the sequence for which a_i=X.\n- The formula above allows us to find the maximum possible number of elements, but we do not know the optimal X for each N.\n- We loop through all possible values of X and check if the formula (number of elements = N * (N + 1) / 2) - sum(a_i) is equal to the maximum possible number of elements.\n- If this is the case, then we have found the optimal X for each N.\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4544,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 4544,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport math\n\n\ndef"
    },
    {
        "number": 4544,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, seq = stdin.splitlines()\n    seq = [int(s) for s in seq.split()]\n    count = 0\n    max_count = 0\n    for s in seq:\n        if s > max_count:\n            count = 1\n            max_count = s\n        elif s == max_count:\n            count += 1\n    return count\n\n\"\"\"\n\nimport sys\n\ndef"
    },
    {
        "number": 4544,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Get the N and a_i as input from the input, converting them to ints\n    N = int(stdin.readline().strip())\n    a_i = [int(x) for x in stdin.readline().strip().split(' ')]\n\n    # Initialize the count of i to be 0\n    count = 0\n\n    # Loop through the input and check if a_i=X, incrementing the count if so\n    for i in range(N):\n        if a_i[i] == i + 1:\n            count += 1\n\n    # Return the count\n    return str(count)\n"
    },
    {
        "number": 4544,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, *A = [int(x) for x in stdin.split()]\n    x = max(A)\n    max_count = 0\n    for i in range(len(A)):\n        if A[i] == x:\n            max_count += 1\n    return str(max_count)\n"
    },
    {
        "number": 4544,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split(' ')]\n    print(a)\n    d = {}\n    for x in a:\n        if x not in d:\n            d[x] = 1\n        else:\n            d[x] += 1\n    print(d)\n    x = a[0]\n    count = 0\n    for key in d:\n        if key!= x:\n            if x in d and d[x] > d[key]:\n                count += d[x]\n                break\n            if x not in d and key in d:\n                count += d[key]\n                break\n            if x not in d and key not in d:\n                break\n            if key not in d and x in d:\n                count += d[x]\n                break\n            count += max(d[x], d[key])\n        else:\n            if x in d:\n                count += d[x]\n            break\n    print(count)\n    return count\n\nsolution(sys.stdin.read())\n"
    },
    {
        "number": 4544,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    nums = [int(s) for s in stdin.readline().strip().split(' ')]\n    best = 0\n    for i in range(n):\n        best = max(best, sum(1 for j in range(i, n) if nums[j] == nums[i]))\n    return str(best)\n"
    },
    {
        "number": 4544,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, *l = map(int, stdin.split())\n    return n - max([i - l[i] for i in range(n)] or [0])\n"
    },
    {
        "number": 4544,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    stdin = stdin.split()\n    n = int(stdin[0])\n    a = list(map(int, stdin[1:]))\n    a.sort()\n    count = 0\n    max_count = 0\n    for i in range(n):\n        for j in range(i, n):\n            if a[j] == a[i]:\n                count += 1\n        if a[i]!= a[j] and count > max_count:\n            max_count = count\n        count = 0\n    return str(max_count)\n"
    },
    {
        "number": 4545,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nimport math"
    },
    {
        "number": 4545,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    A = int(stdin.readline())\n    return A + N - 2\n"
    },
    {
        "number": 4545,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return \"The number of squares that will be painted black is: \" + str(N * N - A)\n"
    },
    {
        "number": 4545,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Given N and A, the number of squares we have and the number of squares we want to have black,\n    return the total number of black squares.\n    \"\"\"\n    n = int(stdin)\n    a = int(stdin)\n    return (n * n - a)\n"
    },
    {
        "number": 4545,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # init a square grid\n    sq_grid = [ [0]*stdin for i in range(stdin)]\n\n    # get input from input\n    n, a = stdin.split()\n\n    # iterate and paint a number of white squares\n    for i in range(int(n)):\n        for j in range(int(n)):\n            sq_grid[i][j] = 1\n\n    # iterate and paint a number of black squares\n    for i in range(int(n)):\n        for j in range(int(n)):\n            sq_grid[i][j] = 0\n\n    # count the number of black squares\n    total_black = 0\n    for i in range(int(n)):\n        for j in range(int(n)):\n            if sq_grid[i][j] == 1:\n                total_black += 1\n\n    # print the result\n    print(total_black)\n\ndef"
    },
    {
        "number": 4545,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    pass\n"
    },
    {
        "number": 4545,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the number of squares that will be painted black.\"\"\"\n    return str(int(stdin.split('\\n')[0])**2 - int(stdin.split('\\n')[1]))\n"
    },
    {
        "number": 4545,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n  n, A = map(int, stdin.split(' '))\n  return str(n * n - A)\n"
    },
    {
        "number": 4545,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('3\\n4')\n    '5'\n    >>> solution('7\\n8')\n    '14'\n    '''\n    N, A = stdin.split('\\n')\n    N = int(N)\n    A = int(A)\n    if N % 2 == 0:\n        return N**2 - A\n    return int(N**2 / 2 + A / 2)"
    },
    {
        "number": 4545,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    A = int(stdin.readline())\n    return str(N*N - A)\n"
    },
    {
        "number": 4546,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if b - a == c - b:\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 4546,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n  input_list = [int(x) for x in stdin.split(\" \")]\n  input_list.sort()\n  print(input_list[1] - input_list[0])\n  print(input_list[2] - input_list[1])\n  print(input_list[2] - input_list[0])\n  if input_list[1] - input_list[0] == input_list[2] - input_list[1] == input_list[2] - input_list[0]:\n    return \"YES\"\n  return \"NO\"\n"
    },
    {
        "number": 4546,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split(' '))\n    return 'YES' if b - a == c - b else 'NO'"
    },
    {
        "number": 4546,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if b-a == c-b:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 4546,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # get poles from stdin\n    # transform the poles into a list of integers\n    a, b, c = [int(i) for i in stdin.split()]\n    # check if the arrangement is beautiful\n    if b - a == c - b:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n"
    },
    {
        "number": 4546,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a,b,c = map(int, stdin.split())\n    if a < b + c and b < a + c and c < a + b:\n        return 'YES'\n    return 'NO'"
    },
    {
        "number": 4546,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pole_heights = [int(x) for x in stdin.split()]\n\n    if pole_heights[1] - pole_heights[0] == pole_heights[2] - pole_heights[1]:\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 4546,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    data = [int(x) for x in stdin.split(' ')]\n    a, b, c = data[0], data[1], data[2]\n    if (b-a == c-b) or (b-a == c-a) or (b-c == a-b) or (b-c == a-c):\n        return \"YES\"\n    else:\n        return \"NO\"\n\"\"\"\n\ndef"
    },
    {
        "number": 4546,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(s) for s in stdin.split()]\n\n    return 'YES' if b-a == c-b else 'NO'"
    },
    {
        "number": 4546,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if b - a == c - b:\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 4547,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin[0]"
    },
    {
        "number": 4547,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n  n = stdin\n  return \"Yes\" if int(n) == int(n[::-1]) else \"No\"\n\ndef"
    },
    {
        "number": 4547,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    return \"Yes\" if 9 in str(x) else \"No\""
    },
    {
        "number": 4547,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = stdin\n    if int(N[0]) > 9:\n        return \"No\"\n    elif int(N[1]) > 9:\n        return \"No\"\n    else:\n        return \"Yes\""
    },
    {
        "number": 4547,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ...\n   ...\n    if 9 in str(n):\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4547,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin.strip())\n    if 9 in str(num):\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4547,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 10:\n        return 'No'\n    return 'Yes' if 9 in str(n) else 'No'"
    },
    {
        "number": 4547,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split()\n    a = int(a[0])\n    if 9 in str(a):\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4547,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return 'Yes' if '9' in stdin else 'No'\n"
    },
    {
        "number": 4547,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return 'Yes' if 9 in str(n) else 'No'"
    },
    {
        "number": 4548,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    N, M, X = [int(x) for x in stdin.split(\"\\n\")[0].split()]\n    A = [int(x) for x in stdin.split(\"\\n\")[1].split()]\n    n = len(A)\n    memo = [{} for i in range(N+1)]\n    \n    def dp(i: int) -> int:\n        if i in memo:\n            return memo[i]\n        if i == 0:\n            return 0\n        elif i == n:\n            return dp(X) + 1\n        \n        res = A[i-1]\n        for j in range(i, n):\n            res = min(res, dp(j) + 1)\n        \n        memo[i] = res\n        return res\n    \n    return dp(X)\n    '''\n    n, m, x = [int(x) for x in stdin.split(\"\\n\")[0].split()]\n    a = [int(x) for x in stdin.split(\"\\n\")[1].split()]\n    dp = [float(\"inf\")]*(n+1)\n    dp[0] = 0\n    for i in range(n+1):\n        for j in range(i+1, n+1):\n            if i == 0:\n                dp[j] = dp[j-1] + 1\n            elif j == n:\n                dp[j] = dp[j-1] + 1\n            else:\n                dp[j] = min(dp[j-1] + 1, dp[j] + 1)\n            dp[j] += a[j-1] - a[i-1]\n    return min(dp[n], dp[x] + 1)"
    },
    {
        "number": 4548,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4548,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    [N, M, X] = list(map(int, stdin.split()))\n    A = list(map(int, stdin.split()))\n    if X == 0:\n        return 0\n\n    dp = [[0 for _ in range(N)] for _ in range(M + 1)]\n\n    dp[M][X] = 1\n\n    for i in range(M - 1, -1, -1):\n        dp[i][0] = 0\n        for j in range(1, N):\n            dp[i][j] = dp[i + 1][j] + A[i]\n            if j + 1 in range(1, N):\n                dp[i][j] = min(dp[i][j], dp[i + 1][j + 1] + 1)\n\n    return dp[0][0]\n"
    },
    {
        "number": 4548,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def find_nearest_gate(n_to_gate, n_from_gate):\n        # Finds the nearest gate for the current point.\n        if (n_to_gate - n_from_gate) < 0:\n            return n_to_gate, n_from_gate\n        elif (n_to_gate - n_from_gate) > 0:\n            return n_from_gate, n_to_gate\n        elif (n_to_gate - n_from_gate) == 0:\n            return n_from_gate, n_to_gate\n    \n    def find_next_gate(n_from_gate, n_to_gate):\n        # Finds the gate from which we will move to the next gate.\n        if n_to_gate < n_from_gate:\n            return n_to_gate\n        else:\n            return n_from_gate\n    \n    n, m, x = [int(x) for x in stdin.split('\\n')[0].split(' ')]\n    cost = 0\n    count = 0\n    gate_coordinates = [int(x) for x in stdin.split('\\n')[1].split(' ')]\n    gate_coordinates.insert(0, 0)\n    gate_coordinates.append(n)\n    if x > 0:\n        gate_coordinates.append(n)\n    else:\n        gate_coordinates.insert(0, 0)\n    \n    gate_coordinates = gate_coordinates\n    while count!= len(gate_coordinates)-1:\n        # Loop to find the nearest gate\n        gate_coordinates.insert(0, 0)\n        gate_coordinates.append(n)\n        current_gate = gate_coordinates[count]\n        next_gate = gate_coordinates[count + 1]\n        cost += 1\n        count += 1\n        gate_coordinates.pop(count)\n        gate_coordinates.pop(count)\n        while (current_gate - next_gate) > 1:\n            # Loop to find the next gate\n            next_gate, current_gate = find_nearest_gate(next_gate, current_gate)\n            cost += 1\n        gate_coordinates.pop(0)\n        gate_coordinates.pop(0)\n    \n    print(cost)\n    return cost\n\nsolution(input())\n"
    },
    {
        "number": 4548,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m, x = map(int, stdin.split('\\n')[0].split(' '))\n    costs = [0] + list(map(int, stdin.split('\\n')[1].split(' ')))\n    dp = [float('inf')] * (n + 1)\n    dp[x] = 0\n    for _ in range(n):\n        for i in range(n + 1):\n            for j in range(i + 1, n + 1):\n                if costs[i] + costs[j] < dp[j]:\n                    dp[j] = costs[i] + costs[j]\n                    if j == n:\n                        return dp[n]\n"
    },
    {
        "number": 4548,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 4548,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    _, N, X, _ = stdin.split(\" \")\n    N, X = int(N), int(X)\n    cost = 0\n\n    # First, travel from Square X to Square X + 1\n    if X!= N:\n        cost += 1\n\n    # Then, travel from Square X + 1 to Square N - 1\n    if X!= 0:\n        cost += 1\n\n    # Finally, travel from Square N - 1 to Square X\n    cost += 1\n\n    return cost"
    },
    {
        "number": 4548,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport sys\n\nN, M, X = map(int, stdin.readline().split())\ntolls = list(map(int, stdin.readline().split()))\ntolls = [1] + tolls + [1]\ndist = [sys.maxsize] * N\ndist[0] = 0\n\nfor _ in range(M):\n    for i in range(1, N):\n        if dist[i]!= sys.maxsize:\n            if tolls[i] == 0 and (dist[i] + 1 < dist[i - 1]):\n                dist[i - 1] = dist[i] + 1\n            elif tolls[i] == 1 and (dist[i] + 1 < dist[i + 1]):\n                dist[i + 1] = dist[i] + 1"
    },
    {
        "number": 4548,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m, x = map(int, stdin.split())\n    tolls = sorted(map(int, stdin.split()))\n    if x not in tolls:\n        tolls.append(x)\n    if 0 not in tolls:\n        tolls.append(0)\n    tolls = sorted(set(tolls))\n    tolls.append(n)\n    dp = [float('inf') for _ in range(n + 1)]\n    dp[x] = 0\n    for cur in range(n + 1):\n        for prev in range(tolls.index(cur), len(tolls)):\n            if cur < n:\n                cost = 1\n                for i in range(prev + 1, prev + m + 1):\n                    if i < len(tolls):\n                        cost += 1\n                dp[tolls[prev]] = min(dp[tolls[prev]] + cost, dp[cur] + cost)\n    return min(dp[0:n + 1])"
    },
    {
        "number": 4548,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    N, M, X = [int(i) for i in lines[0].split(' ')]\n    m = lines[1:]\n    if N == 1:\n        return f\"{0}\"\n    cost = [0 for _ in range(N + 1)]\n    for line in m:\n        cost[int(line)] = 1\n    cost[X] = 1\n    for i in range(1, N):\n        for j in range(1, i + 1):\n            cost[i] += min(cost[j - 1], cost[j + 1])\n    return f\"{cost[-2]}\"\n"
    },
    {
        "number": 4549,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"No\"\n\"\"\"\n\nfrom collections import Counter\n\n\ndef"
    },
    {
        "number": 4549,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    H, W = [int(s) for s in stdin.split()]\n    x, y, n = 0, 0, 0\n    lines = stdin.split('\\n')\n    black = '#'\n    white = '.'\n    answer = 'No'\n    if H > 0 and H <= 50 and W > 0 and W <= 50:\n        for i in range(H):\n            for j in range(W):\n                if lines[i][j] == black:\n                    n += 1\n                if lines[i][j] == white:\n                    n = 0\n                if n == 2:\n                    answer = 'Yes'\n                    break\n            if answer == 'Yes':\n                break\n    print(answer)\n"
    },
    {
        "number": 4549,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    \n    # H, W = map(int, stdin.split())\n    \n    # board = []\n    # for _ in range(H):\n    #     board.append(list(stdin.split()[1:]))\n    #     stdin = stdin.split('\\n')[1]\n    \n    # return str(board)\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4549,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    #Your code goes here\n    return \"Yes\" if stdin.count('#') == 0 else \"No\"\n\"\"\"\n\nimport sys\n\ndef"
    },
    {
        "number": 4549,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    H, W = stdin.split('\\n')[:2]\n    H, W = map(int, (H, W))\n    S = stdin.split('\\n')[2:]\n\n    white_black = {\n        '.': 'w',\n        '#': 'b'\n    }\n\n    def get_col_sum(col):\n        col = list(col)\n        sum = 0\n        for i in range(H):\n            if col[i] == white_black['#']:\n                sum += 1\n            else:\n                sum -= 1\n        return sum\n\n    def get_row_sum(row):\n        row = list(row)\n        sum = 0\n        for i in range(W):\n            if row[i] == white_black['#']:\n                sum += 1\n            else:\n                sum -= 1\n        return sum\n\n    def get_square_sum(row, col):\n        row = row - 1\n        col = col - 1\n        sum = 0\n        for i in range(2):\n            for j in range(2):\n                if row + i >= 0 and row + i < H:\n                    if col + j >= 0 and col + j < W:\n                        if S[row + i][col + j] == white_black['#']:\n                            sum += 1\n                        else:\n                            sum -= 1\n        return sum\n\n    def is_solved(S):\n        for row in range(H):\n            for col in range(W):\n                if S[row][col] == '#':\n                    if get_row_sum(row)!= 0 or get_col_sum(col)!= 0 or get_square_sum(row, col)!= 0:\n                        return False\n        return True\n\n    S_list = []\n    for row in range(H):\n        row_string = ''\n        for col in range(W):\n            row_string += S[row][col]\n        S_list.append(row_string)\n    S_list = [list(s) for s in S_list]\n\n    for i in range(H):\n        for j in range(W):\n            if S_list[i][j] == '#':\n                if get_row_sum(i)!= 0 or get_col_sum(j)!= 0 or get_square_sum(i, j)!= 0:\n                    return 'No'\n    return 'Yes'\n\nsolution(stdin)"
    },
    {
        "number": 4549,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    h, w = [int(x) for x in stdin.split(' ')]\n\n    for i in range(h):\n        for j in range(w):\n            if stdin[i * w + j] == '.':\n                return 'Yes'\n\n    return 'No'"
    },
    {
        "number": 4549,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\"\"\""
    },
    {
        "number": 4549,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\nhttps://www.codewars.com/kata/5ee5a3fd841db44c5e000038\n\ndef"
    },
    {
        "number": 4549,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"Yes\""
    },
    {
        "number": 4549,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def get_adjacent_squares(i: int, j: int):\n        for a, b in [(i - 1, j), (i + 1, j), (i, j - 1), (i, j + 1)]:\n            if 0 <= a < H and 0 <= b < W:\n                yield a, b\n    \n    H, W = tuple(map(int, stdin.split()))\n    \n    grid = {(i, j): c for i, row in enumerate(stdin.split())\n            for j, c in enumerate(row)}\n    \n    for i, j in grid:\n        if grid[i, j] == '#':\n            for a, b in get_adjacent_squares(i, j):\n                if grid[a, b] == '#':\n                    grid[a, b] = '.'\n                else:\n                    grid[a, b] = '#'\n    \n    return 'Yes' if all(grid[i, j] == '#' for i, j in grid) else 'No'\n"
    },
    {
        "number": 4550,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n\n    if a == b:\n        if b == c:\n            return 'Yes'\n        else:\n            return 'No'\n    else:\n        if (a+b == c) or (a+c == b) or (b+c == a):\n            return 'Yes'\n        else:\n            return 'No'"
    },
    {
        "number": 4550,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n\n    return 'Yes' if a + b + c == 2 * max(a, b, c) else 'No'"
    },
    {
        "number": 4550,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    \n    if a + b + c <= a * 2:\n        return \"Yes\"\n    elif a == b == c:\n        return \"Yes\"\n    elif b == c:\n        return \"No\"\n    elif a == b:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4550,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    first_two = stdin.split(\" \")[:2]\n    first_two = list(map(int, first_two))\n    first_two = first_two[0] + first_two[1]\n    \n    third = int(stdin.split(\" \")[2])\n    if third > first_two:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4550,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(n) for n in stdin.split()]\n    if a % 2 == 0 or b % 2 == 0 or c % 2 == 0:\n        return \"No\"\n    if a + b + c % 2 == 0:\n        return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 4550,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    x = int(a + b + c - 1)\n    if a + b == 2 * c and b + c == 2 * a and c + a == 2 * b:\n        if (x / 2) % 2 == 0:\n            return 'Yes'\n    return 'No'"
    },
    {
        "number": 4550,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(i) for i in stdin.split(' ')]\n\n    return \"Yes\" if (b - c) % 2 == 0 and (a - c) % 2 == 0 else \"No\""
    },
    {
        "number": 4550,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = stdin.split()\n    a, b, c = int(a), int(b), int(c)\n    if c % 2:\n        if b % 2:\n            if a % 2:\n                return 'No'\n            else:\n                return 'Yes'\n        else:\n            return 'Yes'\n    else:\n        if a % 2:\n            if b % 2:\n                return 'No'\n            else:\n                return 'Yes'\n        else:\n            if b % 2:\n                return 'No'\n            else:\n                return 'Yes'"
    },
    {
        "number": 4550,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(i) for i in stdin.split()]\n    return 'Yes' if a == b == c else 'No'\n"
    },
    {
        "number": 4550,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(x) for x in stdin.split()]\n\n    if a + b + c == (a + b + c) // 3:\n        return 'Yes'\n    else:\n        return 'No'"
    },
    {
        "number": 4551,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    left = stdin.split(' ')[:2]\n    left = int(left[0]) + int(left[1])\n    right = stdin.split(' ')[2:]\n    right = int(right[0]) + int(right[1])\n    if left > right:\n        return 'Left'\n    elif left < right:\n        return 'Right'\n    else:\n        return 'Balanced'\n'''\n\n'''\nApproach 3: Left/Right Difference\nThis approach checks for the difference between the weights of the left and right pan. If the difference is >0, we know that the scale should balance to the left, and vice versa.\n\n-----Constraints-----\n - 1\\leq A,B,C,D \\leq 10\n - All input values are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nA B C D\n\n-----Output-----\nPrint Left if the balance scale tips to the left; print Balanced if it balances; print Right if it tips to the right.\n\n-----Sample Input-----\n3 8 7 1\n\n-----Sample Output-----\nLeft\n\nSince 3>7, we know that the scale should balance to the left.\n\ndef"
    },
    {
        "number": 4551,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3 8 7 1''')\n    Left\n    \"\"\"\n    masses = stdin.split(' ')\n    masses = [int(mass) for mass in masses]\n    total_weights = sum(masses)\n    masses.sort(reverse=True)\n    if masses[0] < masses[1]:\n        return \"Left\"\n    elif masses[0] > masses[1]:\n        return \"Right\"\n    else:\n        return \"Balanced\"\n"
    },
    {
        "number": 4551,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    weights = [int(w) for w in stdin.split()]\n    return (\"Left\" if weights.count(weights[0]) > weights.count(weights[1]) else \"Right\" if weights.count(weights[0]) < weights.count(weights[1]) else \"Balanced\")\n\n\ndef"
    },
    {
        "number": 4551,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"Left\" if int(stdin.split(' ')[0])+int(stdin.split(' ')[1]) > int(stdin.split(' ')[2])+int(stdin.split(' ')[3]) else \"Right\" if int(stdin.split(' ')[0])+int(stdin.split(' ')[1]) < int(stdin.split(' ')[2])+int(stdin.split(' ')[3]) else \"Balanced\"\n"
    },
    {
        "number": 4551,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a,b,c,d = map(int, stdin.split(' '))\n    if a+b > c+d:\n        return 'Left'\n    elif a+b < c+d:\n        return 'Right'\n    return 'Balanced'\n"
    },
    {
        "number": 4551,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = (int(x) for x in stdin.split(' '))\n    if a + b > c + d:\n        return \"Left\"\n    elif a + b < c + d:\n        return \"Right\"\n    else:\n        return \"Balanced\"\n"
    },
    {
        "number": 4551,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    left = int(stdin.split(\" \")[0]) + int(stdin.split(\" \")[1])\n    right = int(stdin.split(\" \")[2]) + int(stdin.split(\" \")[3])\n    if left > right:\n        return \"Left\"\n    elif left == right:\n        return \"Balanced\"\n    else:\n        return \"Right\""
    },
    {
        "number": 4551,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = [int(x) for x in stdin.split()]\n\n    if a+b>c+d:\n        return 'Left'\n    elif a+b<c+d:\n        return 'Right'\n    else:\n        return 'Balanced'\n"
    },
    {
        "number": 4551,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    L, R = list(map(int, stdin.split(' ')))\n    if L > R:\n        return 'Left'\n    elif L == R:\n        return 'Balanced'\n    else:\n        return 'Right'\n"
    },
    {
        "number": 4551,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    import re\n\n    A, B, C, D = map(int, re.findall(\"\\d+\", stdin))\n\n    if A < B:\n        return \"Left\"\n    elif A == B:\n        return \"Balanced\"\n    else:\n        return \"Right\"\n"
    },
    {
        "number": 4552,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    (N, F) = map(int, stdin.split('\\n')[:2])\n    count = 0\n    for i in range(1, N + 1):\n        count += F[i - 1].count(1)\n    return count\n\"\"\"\n\ndef"
    },
    {
        "number": 4552,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \n    n = int(stdin.split(\"\\n\")[0])\n    \n    f_a_n = []\n    for i in range(0, 5):\n        f_a_n.append([int(n) for n in stdin.split(\"\\n\")[1].split(\" \")])\n\n    p_a = []\n    for i in range(0, 10):\n        p_a.append([int(n) for n in stdin.split(\"\\n\")[2].split(\" \")])\n\n    ans = 0\n    \n    for i in range(0, n):\n        for j in range(0, 5):\n            for k in range(0, 2):\n                if (f_a_n[i][j] == 1) and (k == 1):\n                    ans += p_a[j][k]\n                if (f_a_n[i][j] == 1) and (k == 0):\n                    ans -= p_a[j][k]\n                    \n    return ans\n    \n"
    },
    {
        "number": 4552,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    F = [list(map(int, stdin.split())) for i in range(n)]\n    P = list(map(int, stdin.split()))\n    return str(max(0, sum(P[i] * sum([max(0, F[i][j] * F[j][k]) for j in range(n) for k in range(n) if j!= k]) for i in range(n))))\n\ndef"
    },
    {
        "number": 4552,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nimport sys\n\ntest_data = \"\"\"\n1\n1 1 0 1 0 0 0 1 0 1\n3 4 5 6 7 8 9 -2 -3 4 -2\n\"\"\"\n\nsys.stdin = io.StringIO(test_data)\n\nassert solution() == \"8\"\n\ndef"
    },
    {
        "number": 4552,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    num_shops, _ = [int(item) for item in stdin.split('\\n')]\n    hours_per_day = [[int(item) for item in stdin.split(':')] for _ in range(6)]\n    profits = [int(item) for item in stdin.split(':')]\n\n    num_days = num_shops*5\n    num_periods = 2\n    num_open_periods = 0\n    day_of_period = [[0 for _ in range(num_periods)] for _ in range(num_shops)]\n    profits_per_period = [[0 for _ in range(num_periods)] for _ in range(num_shops)]\n\n    for i in range(num_shops):\n        for j in range(5):\n            if hours_per_day[i][j] == 1:\n                day_of_period[i][0] = j+1\n                num_open_periods += 1\n                break\n\n    for i in range(num_shops):\n        for j in range(num_days):\n            for k in range(num_periods):\n                if day_of_period[i][k] == j:\n                    profits_per_period[i][k] += profits[j]\n                    break\n\n    num_open_periods_per_shop = [0 for _ in range(num_shops)]\n    for i in range(num_shops):\n        num_open_periods_per_shop[i] = 0\n        for j in range(num_periods):\n            if profits_per_period[i][j] >= 0:\n                num_open_periods_per_shop[i] += 1\n                break\n\n    if num_open_periods >= 3:\n        if num_open_periods_per_shop.count(1) == 3:\n            return str(profits[0])\n        elif num_open_periods_per_shop.count(1) == 2:\n            return str(max(profits[0], profits[1]))\n        else:\n            return str(max(profits[0], profits[1], profits[2]))\n    elif num_open_periods == 2:\n        return str(max(profits[0], profits[1]))\n    elif num_open_periods == 1:\n        return str(max(profits[0], profits[1], profits[2]))\n    else:\n        return '0'"
    },
    {
        "number": 4552,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the maximum profit of Joisino's shop.\n\n    Args:\n        stdin (str): Input from stdin.\n\n    Returns:\n        str: The maximum profit of Joisino's shop.\n    \"\"\"\n    data = stdin.split('\\n')\n    num_stores = int(data[0])\n    num_periods = 10\n    open_times = [[] for _ in range(num_stores)]\n    close_times = [[] for _ in range(num_stores)]\n\n    for i in range(num_stores):\n        data_store = data[i + 1].split(' ')\n        for j in range(num_periods):\n            open_times[i].append(int(data_store[j]))\n            close_times[i].append(int(data_store[j + num_periods]))\n\n    profits = [0] * num_periods\n    for i in range(num_stores):\n        for j in range(num_periods):\n            if open_times[i][j] == 1:\n                profits[j] += close_times[i][j]\n                if close_times[i][j] == 0:\n                    profits[j] = 0\n                elif j == 0:\n                    profits[j] -= open_times[i][j]\n                elif j == num_periods - 1:\n                    profits[j] -= close_times[i][j]\n\n    max_profit = -1\n    for i in range(num_periods):\n        max_profit = max(max_profit, profits[i])\n\n    return str(max_profit)\n"
    },
    {
        "number": 4552,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    (n, *f) = map(int, stdin.splitlines())\n    f = list(map(int, \"\".join(f).split(\" \")))\n    p = list(map(int, \"\".join(stdin.splitlines()[-1].split(\" \")).split(\" \")))\n\n    # TODO: Solve the problem.\n    return \"\".join(map(str, [max(p[i] for i in range(len(f)) if f[i]) for j in range(n)]))\n"
    },
    {
        "number": 4552,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, *f = [list(map(int, stdin.split()))]\n    p = [list(map(int, stdin.split()))]\n    # initialize cache\n    cache = {}\n    # loop over n\n    for _ in range(n):\n        # loop over 7\n        for j in range(7):\n            # loop over 2\n            for i in range(2):\n                # loop over 10\n                for k in range(10):\n                    # if cache does not exists\n                    if not cache.get((j, i, k)):\n                        # get first values\n                        current = f[0][j] + f[0][(j + 1) % 7] + p[0][i]\n                        # loop over n - 1\n                        for _ in range(n - 1):\n                            # get next values\n                            current += f[_][(j + 1) % 7] + p[_][(i + 1) % 2]\n                            # insert values to cache\n                            cache[(j, i, k)] = current\n                            # if current is higher than previous max\n                            if current > cache.get((j, i, k), 0):\n                                # update highest value\n                                cache[(j, i, k)] = current\n    return cache[(0, 0, 0)]"
    },
    {
        "number": 4552,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    h = [[int(x) for x in stdin.readline().split(' ')] for y in range(n)]\n    profits = [0] * 11\n\n    for c in range(1, 11):\n        for r in range(1, 6):\n            if h[0][r] == 1:\n                if h[c][r] == 1:\n                    profits[c] += h[c][r + 1]\n                else:\n                    profits[c] += h[c][r - 1]\n            else:\n                if h[c][r] == 1:\n                    profits[c] += h[c][r + 1]\n\n    print(max(profits))\n\n\nsolution(sys.stdin.read())\n"
    },
    {
        "number": 4552,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \n    return 'MAX'"
    },
    {
        "number": 4553,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    postal_code = stdin.split()\n    first_char = int(postal_code[0])\n    second_char = int(postal_code[1])\n    character = stdin[first_char]\n    if character!= '-':\n        return \"No\"\n    if (first_char + 1) == second_char:\n        return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 4553,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = input().split()\n    a, b = int(n[0]), int(n[1])\n    s = input()\n    if s[a - 1] == '-' and s[a + b - 1].isdigit():\n        return 'Yes'\n    else:\n        return 'No'"
    },
    {
        "number": 4553,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split(' '))\n    S = stdin[A + 1 : A + 1 + B]\n    return \"Yes\" if re.match(r'^[0-9\\-]*$', S) else \"No\"\n\"\"\"\nimport re\ndef"
    },
    {
        "number": 4553,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    A+B+1, A, B, -\u3092\u6e80\u305f\u3059\u3082\u306e\u304c\u3042\u308b\u304b\u5224\u5b9a\u3059\u308b\n    \"\"\"\n    A, B = [int(s) for s in stdin.split(' ')]\n    if (A+1) == len(stdin.replace('-', '')) and len(stdin.replace('-', '')) == B:\n        return 'Yes'\n    return 'No'"
    },
    {
        "number": 4553,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n\n\"\"\"\nimport sys\nimport re\n\ndef"
    },
    {
        "number": 4553,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Atcoder kingdom's postal code is 3-4 characters long,\n    # its (A+1)-th character is a hyphen, and the other characters are digits from 0 through 9.\n    # If A + B + 1 == len(stdin), and the A-th character is a hyphen, then it follows the format.\n    # Otherwise, it doesn't.\n    return 'Yes' if len(stdin) == 3 + int(stdin[0]) + int(stdin[2]) and stdin[1] == '-' else 'No'\n"
    },
    {
        "number": 4553,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    a, b = int(stdin[0]), int(stdin[1])\n    return \"Yes\" if len(stdin[2]) == a + b + 1 and stdin[2][a] == \"-\" and stdin[2][0:a+1] in \"123456789\" else \"No\"\n"
    },
    {
        "number": 4553,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split(\" \"))\n    S = stdin[A + 1 :]\n\n    if len(S)!= A + 1 or S[0]!= \"-\" or not S[1:].isdigit():\n        print(\"No\")\n    else:\n        print(\"Yes\")"
    },
    {
        "number": 4553,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    postal_code = stdin.split()[1]\n    if A == 1 and B == 1:\n        if postal_code[0]!= '-' or not postal_code[1:].isdigit():\n            print('No')\n        else:\n            print('Yes')\n    elif A == 1:\n        print('No')\n    elif A > 1:\n        if not (postal_code[0] == '-' and postal_code[1:].isdigit()):\n            print('No')\n        else:\n            print('Yes')\n"
    },
    {
        "number": 4553,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\ndef"
    },
    {
        "number": 4554,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\"\"\"\ndef"
    },
    {
        "number": 4554,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    w, a, b = map(int, stdin.split())\n    print(min(abs(a - b), abs(a + w - b)))\n\n    return \"\"\n"
    },
    {
        "number": 4554,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split('\\n')\n    a, b, w = list(map(int, input[0].split()))\n    return str(abs(b - a) - w)\n"
    },
    {
        "number": 4554,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.split()\n    W, a, b = [int(x) for x in inputs]\n    return str(abs(a - b) - W)\n"
    },
    {
        "number": 4554,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, W = [int(x) for x in stdin.split()]\n    h = b-a\n    if W <= h:\n        return '0'\n    else:\n        return str(b-a)\n"
    },
    {
        "number": 4554,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.split()\n    W = int(line[0])\n    a = int(line[1])\n    b = int(line[2])\n\n    distance = W - b + a\n    if distance < 0:\n        distance = -distance\n    print(distance)\n    return distance"
    },
    {
        "number": 4554,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    _, a, b = list(map(int, stdin.split()))\n    return abs(a - b)\n"
    },
    {
        "number": 4554,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    _, a, b = [int(n) for n in stdin.split()]\n    return str(max(0, b - a + 1))\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4554,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    w, a, b = map(int, stdin.split(' '))\n    return a - b"
    },
    {
        "number": 4554,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, W = list(map(int, stdin.split()))\n    return str(min(b - a, abs(W - (b - a))))"
    },
    {
        "number": 4555,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.split())\n    lst = list(range(A, B+1))\n    lst.sort()\n    print(lst)\n    print(lst[0:K])\n    print(lst[len(lst) - K:])\n\nsolution(stdin)\n"
    },
    {
        "number": 4555,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return a string which contains the result of the input.\"\"\"\n    a, b, k = [int(i) for i in stdin.split()]\n    return '\\n'.join([str(i) for i in range(a, b+1) if len([j for j in range(a, b+1) if abs(i - j) <= k and i > j]) <= k and len([j for j in range(a, b+1) if abs(i - j) <= k and i < j]) <= k])\n\n\ndef"
    },
    {
        "number": 4555,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k = map(int, stdin.split())\n    for i in range(a, b + 1):\n        if (k > 0) and (i < max(a, b) - k + 1):\n            print(min(i + k, max(a, b)))\n        elif (k > 0) and (i == max(a, b) - k + 1):\n            print(max(a, b))\n        elif k > 0 and (i > min(a, b) + k - 1):\n            print(max(a, b))\n        else:\n            print(i)\n    return ''\n"
    },
    {
        "number": 4555,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k = map(int, stdin.split())\n    a -= 1\n    b -= 1\n    li = [i for i in range(a, b + 1)]\n    ans = []\n    for i in li:\n        temp = []\n        temp.append(i)\n        temp.append(abs(i - a))\n        temp.append(b - i)\n        temp.append(abs(b - i))\n        temp.sort()\n        if temp[0] == 0 and k >= temp[2]:\n            ans.append(i)\n        if temp[1] == 0 and k >= temp[3]:\n            ans.append(i)\n    ans.sort()\n    for i in ans:\n        print(i + 1)\n"
    },
    {
        "number": 4555,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k = [int(x) for x in stdin.split(' ')]\n    \n    # Sort the input list and then start going through it\n    input_list = sorted(list(map(int, stdin.split(' '))))\n    for i in range(len(input_list)):\n        if i < a or i >= b:\n            continue\n        if k == 1 and abs(input_list[i - 1] - input_list[i]) <= 1 or k!= 1 and abs(input_list[i - 1] - input_list[i]) <= abs(input_list[i - k] - input_list[i]):\n            print(input_list[i])\n            \n            \n"
    },
    {
        "number": 4555,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k = list(map(int, stdin.split()))\n\n    nums = list(range(a, b + 1))\n    nums.sort()\n    smallest = nums[:k]\n    largest = nums[-k:]\n\n    for i in nums:\n        if i in smallest or i in largest:\n            print(i)\n"
    },
    {
        "number": 4555,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return ''"
    },
    {
        "number": 4555,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.split(' '))\n    ans = []\n    for i in range(A, B + 1):\n        if i == A:\n            if K < B - A + 1:\n                ans.append(i)\n            else:\n                ans.append(i + K)\n        elif i == B:\n            if K < A - B + 1:\n                ans.append(i)\n            else:\n                ans.append(i - K)\n        else:\n            if K < B - A + 1:\n                ans.append(i)\n            else:\n                ans.append(i - K)\n    print(*ans)\n    return ans"
    },
    {
        "number": 4555,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k = [int(x) for x in stdin.split()]\n    arr = [x for x in range(a, b + 1)]\n    arr.sort(key=lambda x: [abs(x - xi) for xi in arr])\n    print(*arr[:k], sep=\"\\n\")\n"
    },
    {
        "number": 4555,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    A, B, K = map(int, stdin.split())\n    res = []\n    for i in range(A, B+1):\n        if K > 0 and i < B:\n            if i < A:\n                if i % (K+1) == 0:\n                    res.append(i)\n            else:\n                if i % (K+1) == 0 or i % (K-1) == 0:\n                    res.append(i)\n            K -= 1\n        else:\n            if i > A:\n                if i % (K+1) == 0:\n                    res.append(i)\n            else:\n                if i % (K+1) == 0 or i % (K-1) == 0:\n                    res.append(i)\n    return '\\n'.join(map(str, res))\n"
    },
    {
        "number": 4556,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"ABC\"[0:1] + stdin[1:2]\n"
    },
    {
        "number": 4556,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.split()[1].upper()\n\"\"\"\n\ndef"
    },
    {
        "number": 4556,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return 'ABC'\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4556,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return stdin[0] + stdin[1:].lower()\n"
    },
    {
        "number": 4556,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return \"ABC\"\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4556,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    contest = stdin.strip()\n    first_char = contest[0]\n    first_char = chr(ord(first_char) - ord('A') + ord('a'))\n    contest = contest.replace(first_char, '')\n    return first_char + contest[0] + contest[1:]\n"
    },
    {
        "number": 4556,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return stdin[:2] + stdin[3:].lower()"
    },
    {
        "number": 4556,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('AtCoder Beginner Contest')\n    ABC\n    \"\"\"\n    name, *_ = stdin.split()\n    return name[0] + name[1:].lower()\n"
    },
    {
        "number": 4556,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return stdin[:2]"
    },
    {
        "number": 4556,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    print(stdin.split()[0][0] + stdin.split()[1].replace(' ', ''))\n\n    return ''\n"
    },
    {
        "number": 4557,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, X = map(int, stdin.readlines())\n    if (A == B) and (A + B == X):\n        return 'YES'\n    if (A + B > X) or (A * B < X):\n        return 'NO'\n    if (A + B == X) and (A == B):\n        return 'YES'\n    if (A + B == X) and (A!= B):\n        return 'YES'\n    if (A * 2 >= X) and (A == B):\n        return 'YES'\n    if (A * 2 < X) and (A!= B):\n        return 'NO'\n    if (A * 2 == X) and (A!= B):\n        return 'YES'\n"
    },
    {
        "number": 4557,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = [int(s) for s in stdin.split()]\n    if (a + b) < x:\n        return \"NO\"\n    return \"YES\" if a * 2 >= x else \"NO\"\n"
    },
    {
        "number": 4557,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B, X = map(int, stdin.split())\n    dogs = B\n    cat = A - dogs\n    if (cat + dogs)!= X:\n        return \"NO\"\n    else:\n        return \"YES\"\n\n\ndef"
    },
    {
        "number": 4557,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    cats = int(stdin.split(' ')[0])\n    dogs = int(stdin.split(' ')[1])\n    if cats % 2 == 0 or dogs % 2!= 0 or (cats - dogs)!= 1:\n        return \"NO\"\n    else:\n        return \"YES\"\n"
    },
    {
        "number": 4557,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    inputs = list(map(int, stdin.split()))\n    cats = inputs[0]\n    dogs = inputs[1]\n    total_number_of_animals = inputs[2]\n    cats_to_test = total_number_of_animals - dogs\n    if cats_to_test <= cats:\n        return \"YES\"\n    else:\n        return \"NO\"\n    \n"
    },
    {
        "number": 4557,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B, X = map(int, stdin.split())\n\n    print(\"YES\") if A - B >= X else print(\"NO\")"
    },
    {
        "number": 4557,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B, X = [int(i) for i in stdin.split()]\n    if A >= B:\n        if A == B:\n            if X == A:\n                return \"YES\"\n            else:\n                return \"NO\"\n        else:\n            return \"NO\"\n    if A + B < X:\n        return \"NO\"\n\n    if B >= X:\n        return \"YES\"\n\n    if A >= X:\n        return \"YES\"\n\n    # A, B, X = map(int, stdin.split())\n    # if X > A + B:\n    #     return \"NO\"\n    # if B > X:\n    #     return \"NO\"\n    # if A > X:\n    #     return \"NO\"\n    # if A + B == X:\n    #     return \"YES\"\n    # if X > A and X > B:\n    #     return \"NO\"\n    # if X == A:\n    #     return \"YES\"\n    # if X == B:\n    #     return \"YES\"\n    # if B > X and A < X:\n    #     return \"NO\"\n\n    # cat_count = X // A\n    # dog_count = X - cat_count * A\n    # if cat_count > B:\n    #     return \"NO\"\n    # if dog_count > B:\n    #     return \"NO\"\n\n    # dogs = dog_count\n    # cats = cat_count\n    # if A == B:\n    #     if X > A:\n    #         dogs = X - A\n    #         cats = A\n    #     else:\n    #         dogs = A\n    #         cats = X - A\n    # if cats > B:\n    #     return \"NO\"\n    # if dogs > B:\n    #     return \"NO\"\n    # return \"YES\"\n    return \"NO\"\n\n\nprint(solution(\"3 5 4\"))\n"
    },
    {
        "number": 4557,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    cat, dog = map(int, stdin.split())\n    A = cat\n    B = dog\n    X = cat + dog - A\n    return \"YES\" if X == A else \"NO\"\n"
    },
    {
        "number": 4557,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B, X = list(map(int, stdin.split(' ')))\n    return \"YES\" if (A + B) == X * 2 else \"NO\"\n"
    },
    {
        "number": 4557,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B, X = [int(x) for x in stdin.readline().strip().split()]\n    if (A+B) < X:\n        return \"NO\"\n    elif (A+B) == X:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 4558,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return ''\n"
    },
    {
        "number": 4558,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x, t = stdin.split()\n    x, t = int(x), int(t)\n    return str(x - t)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4558,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    sand, time = map(int, stdin.split())\n    return str(sand - time)\n"
    },
    {
        "number": 4558,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return"
    },
    {
        "number": 4558,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    X, t = map(int, stdin.split())\n    return str(X-t)\n    # h: height of sandglass\n    # t: time\n    # X = (h+t/2)**2 - (h-t/2)**2\n    # return str(X)\n    \n"
    },
    {
        "number": 4558,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    sand_size, drop_time = stdin.split(\" \")\n    sand_size = int(sand_size)\n    drop_time = int(drop_time)\n    sand_consumed = 0\n    #print(sand_size, drop_time)\n    for i in range(drop_time):\n        #print(i)\n        sand_consumed += 1\n        sand_size -= 1\n        if sand_size <= 0:\n            break\n        sand_consumed += (sand_size - 1)\n        sand_size -= 1\n        #print(sand_size, sand_consumed)\n    return str(sand_consumed)\n\"\"\"\n\n\"\"\"\nProblem:\nGiven a string S and a list of words, find out if there is a word in the list that is a substring of S.\n\n-----Constraints-----\n1 \u2264 |S| \u2264 10^5\n1 \u2264 |words| \u2264 10^4\n1 \u2264 |word| \u2264 10^5\nEach word in the input is unique.\n\n-----Input-----\nThe input is given from Standard Input in the following format:\nS words\n\n-----Output-----\nPrint \"Yes\" if there is a word from the list that is a substring of S. Otherwise, print \"No\".\n\n-----Sample Input-----\nsadsa klkqdsjkkxd\n\n-----Sample Output-----\nYes\n\ndef"
    },
    {
        "number": 4558,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    sand_weight, time = map(int, stdin.split())\n    return str(sand_weight - (time * 0.001))\n\nprint(solution(input()))\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4558,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    sand, t = map(int, stdin.split(' '))\n    sand_left = sand\n    for i in range(t):\n        sand_left = max(0, sand_left - 1)\n    return sand_left\n\n\ndef"
    },
    {
        "number": 4558,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin.split()\n    sand = int(data[0])\n    time = int(data[1])\n    print(sand - (sand * time) / (sand + time))\n    return str(sand - (sand * time) / (sand + time))"
    },
    {
        "number": 4558,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nfrom math import exp, factorial, log\n\n\ndef"
    },
    {
        "number": 4559,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    m = max(a)\n    if m >= 10 ** 18:\n        return -1\n    return str(reduce(lambda a, b: a * b, a))\n"
    },
    {
        "number": 4559,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    try:\n        numbers = [int(number) for number in stdin.split('\\n')[0].split(' ')]\n        product = 1\n        for number in numbers:\n            if number < 10 ** 18:\n                product *= number\n            else:\n                product = -1\n        return product\n    except:\n        return -1\n"
    },
    {
        "number": 4559,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n  # your code here\n  a, b = stdin.split()\n  return str(int(a) * int(b)) if int(a) * int(b) < 10 ** 18 else str(-1)\n"
    },
    {
        "number": 4559,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    A = list(map(int, stdin.readline().strip().split()))\n    if N > 10 ** 5 or len(A) > 10 ** 5:\n        return -1\n    for i in range(N):\n        A[i] *= A[i - 1]\n    return str(A[N - 1])\n"
    },
    {
        "number": 4559,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, *nums = list(map(int, stdin.split('\\n')[0].split(' ')))\n    res = 1\n    for i in nums:\n        if res * i > 1e18:\n            return \"-1\"\n        res *= i\n    return str(res)\n    \"\"\"\n    \u0418\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0438 \u043d\u0430 \u0440\u0430\u0437\u0431\u043e\u0440\u0435 \u0442\u043e\u0436\u0435 \u043f\u0440\u0438\u0432\u0435\u0434\u0435\u043d\u044b \u043d\u0438\u0436\u0435.\n\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n\u0412 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442\u0441\u044f \u0435\u0434\u0438\u043d\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e N (2\u2009\u2264\u2009N\u2009\u2264\u2009104),\n\u0432\u043e \u0432\u0442\u043e\u0440\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0447\u0435\u0440\u0435\u0437 \u043f\u0440\u043e\u0431\u0435\u043b \u0443\u043a\u0430\u0437\u0430\u043d\u044b N \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u0435\u043b A_1,\u2009...,\u2009A_N (\u221210\u2009\u2264\u2009A_i\u2009\u2264\u200910\u200900).\n\n\u041f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f n \u043e\u0431\u043e\u0437\u043d\u0430\u0447\u0430\u0435\u0442 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0447\u0438\u0441\u0435\u043b A_1,\u2009...,\u2009A_N,\n\u0442\u0430\u043a \u0436\u0435 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445.\n\n\u0412\u044b\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 A_1\u2009\u00d7\u2009...\u2009\u00d7\u2009A_N, \u0435\u0441\u043b\u0438 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043c\u043e\u0434\u0443\u043b\u0435\u043d, \u0438\u043d\u0430\u0447\u0435 \u0432\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u00ab-1\u00bb.\n\n\u041f\u0440\u0438\u043c\u0435\u0440\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n5\n3\n3\n2\n1\n2\n\u0412\u044b\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n6\n\n\u041f\u0440\u0438\u043c\u0435\u0440 2\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n7\n1\n1\n2\n2\n2\n2\n3\n3\n\u0412\u044b\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n-1\n\"\"\"\n    # \u043c\u043e\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0438 \u0442\u0430\u043a\u043e\u0435 \u0440\u0435\u0448\u0435\u043d\u0438\u0435, \u043d\u043e \u044f \u0440\u0435\u0448\u0438\u043b \u0447\u0442\u043e \u044d\u0442\u043e \u0432\u043e\u043e\u0431\u0449\u0435 \u0432\u0441\u0435 \u0447\u0435\u0442\u043d\u043e\u0435.\n    # \u0432\u0442\u043e\u0440\u043e\u0439 \u0432\u0430\u0440\u0438\u0430\u043d\u0442 \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u0431\u0443\u0434\u0435\u0442 \u044f \u0441\u0434\u0430\u043c \u043d\u0430 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0443.\n    # res = 1\n    # for i in nums:\n    #     if res * i > 1e18:\n    #         return \"-1\"\n    #     res *= i\n    # return str(res)\n\n    # \u043f\u0435\u0440\u0432\u043e\u0435 \u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442, \u0442\u0430\u043a \u043a\u0430\u043a \u0443\u043c\u043d\u043e\u0436\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442 \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c. \u043e\u0434\u043d\u0430\u043a\u043e \u043c\u043e\u0436\u043d\u043e \u043f\u0440\u0438\u0432\u0435\u0441\u0442\u0438\n    # \u043f\u0435\u0440\u0432\u043e\u0435 \u0443\u0441\u043b\u043e\u0432\u0438\u0435 \u043a \u0431\u043e\u043b\u0435\u0435 \u0443\u0434\u043e\u0431\u043d\u043e\u043c\u0443 \u0432\u0438\u0434\u0443, \u0442\u0430\u043a \u043a\u0430\u043a \u0443\u043c\u043d\u043e\u0436\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442 \u043f\u0440\u043e\u043f\u043e\u0440\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e \u0441 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u043e\u0439.\n    # \u0442\u043e \u0435\u0441\u0442\u044c, \u0435\u0441\u043b\u0438 \u0443\u043c\u043d\u043e\u0436\u0438\u0442\u044c \u043d\u0430 \u043e\u0434\u043d\u043e \u0438\u0437 \u0447\u0438\u0441\u0435\u043b \u0438\u0437 \u043a\u043e\u043d\u0446\u0430, \u0442\u043e \u043d\u0430\u0434\u043e \u0443\u043c\u043d\u043e\u0436\u0438\u0442\u044c \u043d\u0430 \u0434\u0432\u0430, \u0430 \u0435\u0441\u043b\u0438 \u0443\u043c\u043d\u043e\u0436\u0438\u0442\u044c \u043d\u0430 \u0434\u0432\u0430, \u0442\u043e \u043d\u0430\u0434\u043e \u0443\u043c\u043d\u043e\u0436\u0438\u0442\u044c \u043d\u0430 \u0442\u0440\u0438 \u0438 \u0442.\u0434.\n    # \u0435\u0441\u043b\u0438 \u0443\u043c\u043d\u043e\u0436\u0438\u0442\u044c \u043d\u0430 \u043e\u0434\u043d\u043e \u0438\u0437 \u0447\u0438\u0441\u0435\u043b \u0438\u0437 \u043a\u043e\u043d\u0446\u0430, \u0442\u043e \u0443\u043c\u043d\u043e\u0436\u0438\u0442\u044c \u0442\u0440\u0438 \u0438 \u0434\u0432\u0430, \u0430 \u0435\u0441\u043b\u0438 \u0443\u043c\u043d\u043e\u0436\u0438\u0442\u044c \u043d\u0430 \u0442\u0440\u0438, \u0442\u043e \u0443\u043c\u043d\u043e\u0436\u0438\u0442\u044c \u043d\u0430 \u0447\u0435\u0442\u044b\u0440\u0435 \u0438 \u0442.\u0434.\n    # \u0442\u0430\u043a \u043a\u0430\u043a \u0432\u0441\u0435 \u0447\u0438\u0441\u043b\u0430 \u0432 \u0438\u0441\u0445\u043e\u0434\u043d\u043e\u043c \u0441\u043f\u0438\u0441\u043a\u0435 \u043f\u0440\u0438 \u0443\u043c\u043d\u043e\u0436\u0435\u043d\u0438\u0438 \u0441\u0442\u0430\u043d\u043e\u0432\u044f\u0442\u0441\u044f \u0431\u043e\u043b\u044c\u0448\u0438\u043c\u0438, \u0442\u043e \u0442\u0430\u043a\u0438\u0435 \u0438\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0438 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0442 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e\u043c\u0443 \u0440\u0430\u0441\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u044e\n    # \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0439 \u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0438\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0439 \u044d\u0442\u043e \u0442\u0430\u043a\u0430\u044f \u043a\u043e\u043c\u0431\u0438\u043d\u0430\u0446\u0438\u044f, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0431\u043e\u043b\u044c\u0448\u0435 \u043e\u0434\u043d\u043e\u0433\u043e \u0447\u0438\u0441\u043b\u0430 \u0438\u0434\u0443\u0442 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u043f\u043e \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u043d\u0438\u044e.\n    # \u0434\u043b\u044f \u0442\u0430\u043a\u043e\u0433\u043e \u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0432 \u0440\u0435\u0448\u0435\u043d\u0438\u0438 \u043e\u0434\u043d\u043e \u0447\u0438\u0441\u043b\u043e \u0432\u0441\u0435\u0433\u0434\u0430 \u0434\u043e\u043b\u0436\u043d\u043e \u0431\u044b\u0442\u044c \u0432 \u043a\u043e\u043d\u0446\u0435 \u0438\u0441\u0445\u043e\u0434\u043d\u043e\u0433\u043e \u0441\u043f\u0438\u0441\u043a\u0430.\n    # \u044d\u0442\u043e \u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0441\u043e\u0432\u043f\u0430\u0434\u0430\u0435\u0442 \u0441 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u043c, \u0442\u0430\u043a \u043a\u0430\u043a \u0438\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0438 \u0432 \u043d\u0435\u043c \u0432\u0441\u0435\u0433\u0434\u0430 \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u044e\u0442 \u0438 \u0432\u0441\u0435 \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u0434\u0430\u043d\u044b \u0432 \u043a\u043e\u043d\u0446\u0435 \u0438\u0441\u0445\u043e\u0434\u043d\u043e\u0433\u043e \u0441\u043f\u0438\u0441\u043a\u0430.\n    # \u0432 \u0440\u0435\u0448\u0435\u043d\u0438\u0438 \u043e\u0434\u043d\u043e \u0447\u0438\u0441\u043b\u043e \u0432\u0441\u0435\u0433\u0434\u0430 \u0434\u043e\u043b\u0436\u043d\u043e \u0431\u044b\u0442\u044c \u0432 \u043a\u043e\u043d\u0446\u0435 \u0438"
    },
    {
        "number": 4559,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \n    return 0\n"
    },
    {
        "number": 4559,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    m = [int(i) for i in stdin.readline().split(\" \")]\n    m = m[0] * m[1]\n    if m > 10**18:\n        return -1\n    else:\n        return m\n    \n"
    },
    {
        "number": 4559,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4559,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    value = 1\n    for i in range(n):\n        value *= int(stdin.split()[i])\n\n    if value > 1000000000000000000:\n        return \"-1\"\n\n    return str(value)\n"
    },
    {
        "number": 4559,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    lst = []\n    for i in range(n):\n        lst.append(int(stdin.split(\"\\n\")[1]))\n    print(max(lst)) if max(lst) < 10**18 else print(-1)\n    \n"
    },
    {
        "number": 4560,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if int(stdin) % 500 == 0 or (int(stdin) - 500) % 500 == 0 or int(stdin) % 1 == 0 else \"No\"\n"
    },
    {
        "number": 4560,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    \n    if n < 5:\n        return \"No\"\n    \n    count = 0\n    coins = [500, 100, 50, 10, 5, 1]\n    \n    for coin in coins:\n        count += n // coin\n        n = n % coin\n    \n    if n == 0:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4560,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, A = map(int, stdin.split('\\n'))\n    s = 0\n    for i in range(0, A + 1):\n        if i % 2!= 0:\n            s += 500\n    if s >= N:\n        return 'Yes'\n    else:\n        return 'No'\n"
    },
    {
        "number": 4560,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, A = map(int, stdin.split())\n    print(\"Yes\" if A >= N // 500 and A >= N % 500 // 1 and N % 500 % 1 == 0 else \"No\")\n\n\ndef"
    },
    {
        "number": 4560,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.readlines())\n    return 'Yes' if (n == a) else 'No'"
    },
    {
        "number": 4560,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    n, a = list(map(int, stdin.split(\"\\n\")))\n    m = 10**5 + 3\n    if n % a == 0:\n        return 'Yes'\n    i, j = 0, 0\n    while i < m and j < m:\n        if a * i <= n < a * (i + 1):\n            return 'Yes'\n        if a * j <= n < a * (j + 1):\n            return 'Yes'\n        if i < j:\n            i += 1\n            j = i\n        else:\n            j += 1\n            i = j\n    return 'No'\n    '''\n    n, a = list(map(int, stdin.split()))\n    if n % a == 0:\n        return 'Yes'\n    else:\n        return 'No'"
    },
    {
        "number": 4560,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.read().split(\"\\n\"))\n    c = a * 4 - n\n    if c < 0:\n        return \"No\"\n    else:\n        return \"Yes\"\n\ndef"
    },
    {
        "number": 4560,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    A = int(stdin.readline())\n    A -= N\n    if A == 0:\n        print('Yes')\n    elif A > 0:\n        print('No')\n    else:\n        print('Yes')\n"
    },
    {
        "number": 4560,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # input\n    N = int(stdin)\n    \n    # create list of coins\n    coins = []\n    for i in range(1000):\n        coins.append(500*(10**i))\n    \n    # loop through coins until you find a matching coin\n    # add coins to a list\n    amount_list = []\n    for coin in coins:\n        if N - coin < 0:\n            continue\n        amount_list.append(N - coin)\n    \n    # return answer\n    if amount_list == []:\n        return \"No\"\n    else:\n        return \"Yes\"\n        \n"
    },
    {
        "number": 4560,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, A = [int(i) for i in stdin.split('\\n')]\n    if A > N:\n        return \"No\"\n    \n    coins = N // 500\n    N = N % 500\n    coins += N // A\n    N = N % A\n    \n    if N!= 0:\n        return \"No\"\n    \n    return \"Yes\"\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4561,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, a, b = list(map(int, stdin.split()))\n    if a + b > x:\n        return \"delicious\"\n    elif a + b < x:\n        return \"safe\"\n    else:\n        return \"dangerous\"\n"
    },
    {
        "number": 4561,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x, a, b = map(int, stdin.split(' '))\n    if a >= x + 1:\n        return 'delicious'\n    elif b <= x:\n        return 'dangerous'\n    else:\n        return'safe'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4561,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    X, A, B = map(int, stdin.split())\n    if A <= X <= B:\n        return \"delicious\"\n    elif A >= X + 1:\n        return \"dangerous\"\n    else:\n        return \"safe\"\n\"\"\"\n\ndef"
    },
    {
        "number": 4561,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x, a, b = [int(i) for i in stdin.split(\" \")]\n    print(\n        \"delicious\"\n        if a < b and a <= x\n        or (b < a and b < x and a < b)\n        or (a < b and b <= x)\n        else \"safe\"\n        if x <= a or x <= b\n        else \"dangerous\"\n    )"
    },
    {
        "number": 4561,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    days = [int(i) for i in stdin.split()]\n    if days[1] >= days[0] + 1:\n        return \"dangerous\"\n    elif days[2] >= days[1] + 1:\n        return \"dangerous\"\n    elif days[2] >= days[0] + 1:\n        return \"dangerous\"\n    else:\n        return \"safe\""
    },
    {
        "number": 4561,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    X, A, B = [int(x) for x in stdin.split(' ')]\n    if (A - B) <= X:\n        return \"delicious\"\n    elif (A - B) > X:\n        return \"safe\"\n    else:\n        return \"dangerous\"\n"
    },
    {
        "number": 4561,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Input:\n        A = X + 1\n        B = A + X\n    Output:\n        dangerous\n        safe\n        delicious\n    \"\"\"\n    A, B = map(int, stdin.split(' '))\n\n    # A = 3, B = 7\n    if A - B == 0:\n        if A == B == 1:\n            return 'delicious'\n        elif A == 1:\n            return 'dangerous'\n        else:\n            return'safe'\n    elif A - B >= 1:\n        return 'delicious'\n    elif A == B:\n        return 'dangerous'\n    else:\n        return'safe'\n"
    },
    {
        "number": 4561,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    X, A, B = [int(i) for i in stdin.split(' ')]\n    print('delicious' if X + A <= B else'safe' if X >= B else 'dangerous')"
    },
    {
        "number": 4561,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    X, A, B = map(int, stdin.split())\n    if B == X + 1:\n        return \"delicious\"\n    if B > X + 1:\n        return \"dangerous\"\n    return \"safe\"\n\nprint(solution(stdin.readline()))\n"
    },
    {
        "number": 4561,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x, a, b = list(map(int, stdin.split(' ')))\n    if x < a:\n        return 'dangerous'\n    elif x > a and x < b:\n        return'safe'\n    return 'delicious'\n\n\"\"\""
    },
    {
        "number": 4562,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    cnt = 1\n    while cnt**2 <= n:\n        cnt += 1\n    return str(cnt-1)\n"
    },
    {
        "number": 4562,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # create a list of ints from the given input\n    nums = [int(n) for n in stdin.split()]\n    \n    # loop through the list to find the largest square\n    # that can be created\n    for num in nums:\n        for i in range(1, num):\n            if i**2 > num:\n                break\n        else:\n            return str(num - 1)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4562,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    for i in range(int(sqrt(N)), 0, -1):\n        if N % i == 0:\n            return str(i * i)\n"
    },
    {
        "number": 4562,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(n):\n        if i**2 > n:\n            break\n    return str(i**2)"
    },
    {
        "number": 4562,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.split(\"\\n\")\n    return str(int(max(n)))\n\nprint(solution(\"10\\n\"))\n"
    },
    {
        "number": 4562,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    for i in range(N):\n        if i ** 2 < N:\n            pass\n        else:\n            print(i ** 2 - 1)\n            return\nsolution(input())\n"
    },
    {
        "number": 4562,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    while n > 0:\n        if n % 2!= 0:\n            return n - 1\n        n = n / 2\n    return 1\n"
    },
    {
        "number": 4562,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    for i in range(N):\n        if (i + 1) ** 2 <= N:\n            continue\n        else:\n            return str(i - 1)"
    },
    {
        "number": 4562,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    #check if n is even or odd\n    if n % 2 == 0:\n        #if n is even, then answer must be n-1\n        return n - 1\n    else:\n        #if n is odd, then answer must be n-2\n        return n - 2\n\n\"\"\"\n\nimport sys\n\ndef"
    },
    {
        "number": 4562,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().rstrip())\n    largest_square = 0\n    for i in range(N):\n        if i*i > largest_square:\n            largest_square = i*i\n    return largest_square\nprint(solution(input()))\n"
    },
    {
        "number": 4563,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    n = int(stdin.readline().strip())\n    t = [0,0]\n    a = [0,0]\n    for i in range(0, n):\n        x = list(map(int, stdin.readline().strip().split()))\n        t[i % 2] += x[0]\n        a[i % 2] += x[1]\n    print(a[0] + a[1])\n    '''\n\n    n = int(stdin.readline().strip())\n    ratio = list(map(int, stdin.readline().strip().split()))\n    min_ratio = ratio[0]\n    for i in range(1,n):\n        if ratio[i] < min_ratio:\n            min_ratio = ratio[i]\n    print(min_ratio * n)"
    },
    {
        "number": 4563,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    for _ in range(int(stdin.readline())):\n        T, A = map(int, stdin.readline().split())\n        while A:\n            T, A = A, T % A\n        print(T)\n    return ''\n"
    },
    {
        "number": 4563,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    T_arr = []\n    A_arr = []\n    for _ in range(N):\n        T_arr.append(tuple(map(int, stdin.readline().strip().split())))\n    for _ in range(N):\n        A_arr.append(tuple(map(int, stdin.readline().strip().split())))\n    for i in range(N):\n        a = gcd(T_arr[i][1], A_arr[i][1])\n        T_arr[i] = [T_arr[i][0] * T_arr[i][1] // a, a]\n        A_arr[i] = [A_arr[i][0] * A_arr[i][1] // a, a]\n    T_arr.sort(key=lambda x: x[0], reverse=True)\n    A_arr.sort(key=lambda x: x[0], reverse=True)\n    M = 0\n    a = 1\n    for i in range(N):\n        M = a * T_arr[i][1] + M\n        a = a * A_arr[i][1] // gcd(a, A_arr[i][1])\n    return M\n"
    },
    {
        "number": 4563,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    from math import gcd\n    from functools import reduce\n\n    raw = stdin.splitlines()\n    n = int(raw[0])\n    k = list(map(int, raw[1].split()))\n\n    # Write the input to a file and open the file in the same directory\n    with open(\"input.txt\", \"w\") as file:\n        file.write(stdin)\n\n    with open(\"input.txt\") as file:\n        # Read the file and close it\n        stdin = file.read()\n    n, k = map(int, stdin.splitlines()[0].split())\n    k_list = list(map(int, stdin.splitlines()[1].split()))\n    k_list = [a % b for a, b in zip(k_list, k)]\n    k_gcd = reduce(gcd, k_list)\n    k_list = [a // k_gcd for a in k_list]\n\n    print(sum(k_list) * n)"
    },
    {
        "number": 4563,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Finds the minimum possible number of votes obtained by Takahashi and Aoki when AtCoDeer checked the report for the N-th time.\n    \"\"\"\n    a,b,n = tuple(map(int,stdin.split()))\n    res = 0\n    for i in range(1,n+1):\n        a,b = b,a+b\n        if i == n:\n            res += a\n    return str(res)"
    },
    {
        "number": 4563,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the minimum possible total number of votes obtained by Takahashi and Aoki when AtCoDeer checked the report for the N-th time.\"\"\"\n    # Determine the number of votes and each vote for each candidate in each check\n    n, *votes = map(int, stdin.split('\\n'))\n    takahashi, aoki = 0, 0\n    for vote in votes:\n        takahashi += vote[0]\n        aoki += vote[1]\n    # Determine the number of votes obtained in each check\n    # and determine the minimum number of votes obtained\n    minimum = 0\n    for vote in votes:\n        # If the number of votes obtained for each candidate\n        # is 0, the minimum number of votes obtained is 0.\n        if vote[0] == 0:\n            minimum = 0\n            break\n        # If the number of votes obtained for each candidate\n        # is the same as the number of votes obtained in the first check,\n        # the minimum number of votes obtained is the same as in the first check.\n        if vote[0] == vote[1]:\n            minimum = vote[0]\n            break\n        # Otherwise, calculate the number of votes obtained in each check,\n        # and determine the minimum number of votes obtained.\n        takahashi, aoki = (takahashi + vote[1], aoki + vote[0])\n        minimum = min(minimum, takahashi, aoki)\n    return minimum\n\n\"\"\"\nimport sys\n\nsys.setrecursionlimit(1_000_000)\n\ndef"
    },
    {
        "number": 4563,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Return the minimum possible number of votes when AtCoDeer checks the report N-times.\n\n    >>> solution('''3\n   ... 2 3\n   ... 1 1\n   ... 3 2''')\n    10\n    >>> solution('''2\n   ... 3 3\n   ... 1 1\n   ... 3 2''')\n    10\n    >>> solution('''5\n   ... 4 4\n   ... 6 5\n   ... 7 6\n   ... 8 6\n   ... 9 5\n   ... 10 4''')\n    8\n    \"\"\"\n   ..."
    },
    {
        "number": 4563,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def gcd(a: int, b: int) -> int:\n        while b > 0:\n            a, b = b, a % b\n        return a\n\n    n = int(stdin.readline().strip())\n    t = []\n    a = []\n    for i in range(n):\n        a_i = list(map(int, stdin.readline().strip().split()))\n        t.append(a_i[0])\n        a.append(a_i[1])\n    return t[0] * a[0] // gcd(t[0], a[0]) * t[1] // gcd(t[1], a[1]) // gcd(t[0], a[1])\n"
    },
    {
        "number": 4563,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\ndef"
    },
    {
        "number": 4563,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Get input\n    n: int = int(stdin)\n\n    # Get atcoder deers\n    atcoder_deers = []\n    for _ in range(n):\n        atcoder_deers.append(list(map(int, stdin.split(' '))))\n\n    # Calculate votes\n    takahashi_votes = 0\n    aoki_votes = 0\n    for atcoder_deer in atcoder_deers:\n        takahashi_votes += atcoder_deer[0]\n        aoki_votes += atcoder_deer[1]\n    \n    # Calculate the min\n    min_votes = 10 ** 9\n    for atcoder_deer in atcoder_deers:\n        min_votes = min(min_votes, atcoder_deer[0] * 2 + atcoder_deer[1] * 2)\n    \n    # Print answer\n    print(min_votes)\n    \n    return\n"
    },
    {
        "number": 4564,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"yes\" if len(set(stdin.replace(\" \",\"\"))) == len(stdin.replace(\" \",\"\")) else \"no\"\n"
    },
    {
        "number": 4564,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    unique_chars = set(stdin)\n    if len(unique_chars) == len(stdin):\n        return 'yes'\n    else:\n        return 'no'\n    \n"
    },
    {
        "number": 4564,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return 'yes' if len(set(stdin)) == len(stdin) else 'no'\n"
    },
    {
        "number": 4564,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return 'yes' if len(set(stdin)) == len(stdin) else 'no'\n"
    },
    {
        "number": 4564,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4564,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return 'yes' if len(set(stdin)) == len(stdin) else 'no'\n"
    },
    {
        "number": 4564,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return \"yes\" if len(set(stdin)) == len(stdin) else \"no\"\n"
    },
    {
        "number": 4564,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return 'yes' if len(set(stdin)) == len(stdin) else 'no'\n\"\"\""
    },
    {
        "number": 4564,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.lower() == stdin.lower()[::2]\n"
    },
    {
        "number": 4564,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return 'yes' if len(set(stdin)) == len(stdin) else 'no'\n"
    },
    {
        "number": 4565,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.split('\\n')\n    N = int(line[0])\n    S = line[1]\n    count = 0\n    for i in range(len(S)):\n        if S[i] == 'E':\n            if i % 2 == 0:\n                count += 1\n        else:\n            if i % 2 == 1:\n                count += 1\n\n    return str(count)\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4565,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # Please do not edit the code below the traverse function\n    # Naive Approach\n    # Time Complexity : O(2^N)\n    # Space Complexity : O(1)\n\n    # Approach 2:\n    # Time Complexity : O(N)\n    # Space Complexity : O(1)\n    def traverse(index: int, prev: int, direction: str, ans: int):\n        if index == n:\n            return ans\n\n        cur = (int(direction == 'E') * 2 + int(direction == 'W')) % 4\n\n        if cur!= prev:\n            ans += 1\n\n        return traverse(index + 1, cur, s[index], ans)\n\n    n = int(stdin)\n    s = stdin\n    ans = traverse(1, 0, s[0], 0)\n    print(ans)\n"
    },
    {
        "number": 4565,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    S = list(stdin)\n    count = 0\n    for i in range(len(S)):\n        if S[i] == 'W':\n            count += 1\n    return count\n\ndef"
    },
    {
        "number": 4565,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    people = int(stdin)\n    people_s = stdin\n    if people % 2 == 0:\n        return people // 2\n    else:\n        return people // 2 + 1\n"
    },
    {
        "number": 4565,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # get the number of people in the row\n    n = int(stdin.split()[0])\n    # get the direction of each person in the row\n    people = stdin.split()[1]\n\n    # create a list that will hold the directions of the people\n    directions = []\n\n    # convert the input directions into a list of directions\n    for direction in people:\n        if direction == \"E\":\n            directions.append(\"E\")\n        else:\n            directions.append(\"W\")\n\n    # create a counter to count the number of changes needed\n    counter = 0\n\n    # while the list still has items in it\n    while directions:\n        # create a list that will hold the directions of the people after one change\n        new_directions = []\n\n        # change the direction of each person in the row until the new list is identical to the old list\n        for direction in directions:\n            # if the direction is east\n            if direction == \"E\":\n                # then change the direction to west\n                new_directions.append(\"W\")\n            # if the direction is west\n            else:\n                # then change the direction to east\n                new_directions.append(\"E\")\n\n        # change the direction of each person in the row\n        directions = new_directions\n\n        # add one to the counter\n        counter += 1\n\n    # return the result\n    return counter"
    },
    {
        "number": 4565,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin)\n"
    },
    {
        "number": 4565,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    S = stdin\n    W_counter, E_counter = 0, 0\n    if N == 1:\n        return 1\n    elif N == 2:\n        return 2 if S[0] == \"E\" else 0\n    elif N == 3:\n        if S[0] == \"E\":\n            return 2 if S[2] == \"E\" else 1\n        else:\n            return 2 if S[0] == \"W\" else 0\n    else:\n        if S[0] == \"W\":\n            W_counter += 1\n        for idx in range(1, N):\n            if S[idx] == \"W\":\n                W_counter += 1\n            elif S[idx] == \"E\":\n                E_counter += 1\n        if W_counter > E_counter:\n            return E_counter\n        else:\n            return W_counter"
    },
    {
        "number": 4565,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    import numpy as np\n    import sys\n    n = int(stdin.readline())\n    s = np.array(list(stdin.readline().strip()))\n    left_idx = np.where(s == 'W')\n    right_idx = np.where(s == 'E')\n    if len(left_idx)!= n or len(right_idx)!= n:\n        sys.exit(1)\n    return (n - len(np.intersect1d(left_idx, right_idx)))"
    },
    {
        "number": 4565,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    find the minimal number of people to change their directions to face the same direction as the leader\n    '''\n    # get input from stdin\n    n = int(stdin[0])\n    directions = stdin[1]\n    # establish variables\n    count = 0\n    # count the number of times a person needs to turn left\n    for direction in directions:\n        if direction == 'W':\n            count += 1\n    # return the count\n    return str(count)\n"
    },
    {
        "number": 4565,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip('\\n'))\n    S = list(stdin.readline().strip('\\n'))\n    result = 0\n    for i in range(N):\n        if S[i] == 'E':\n            result += N-i-1\n    return result"
    },
    {
        "number": 4566,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    n, m = stdin.split('\\n')[0].split(' ')\n    n = int(n)\n    m = int(m)\n    # print(m, n)\n    cities = []\n    road = []\n    for i in range(1, n+1):\n        cities.append(i)\n    for j in range(m):\n        a, b = stdin.split('\\n')[j].split(' ')\n        a = int(a)\n        b = int(b)\n        road.append((a, b))\n    # print(cities)\n    # print(road)\n    \n    road_cnt = {}\n    for i in range(len(cities)):\n        road_cnt[i+1] = 0\n    for k in road:\n        road_cnt[k[0]] += 1\n        road_cnt[k[1]] += 1\n    # print(road_cnt)\n    for i in road_cnt:\n        print(road_cnt[i])\n"
    },
    {
        "number": 4566,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n, m = map(int, stdin.split())\n    roads = []\n    for _ in range(m):\n        a, b = map(int, stdin.split())\n        roads.append([a - 1, b - 1])\n    # print(roads)\n    connected = [[] for _ in range(n)]\n    for a, b in roads:\n        connected[a].append(b)\n        connected[b].append(a)\n    # print(connected)\n    ans = []\n    for i, j in connected:\n        ans.append(len(j))\n    return '\\n'.join(map(str, ans))"
    },
    {
        "number": 4566,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    # M \u3092 0 \u306e\u3068\u304d\u306f, N \u306e\u6570\u5217\u3092 M + 1 \u3067\u8868\u3059\n    # M \u3092 0 \u306e\u3068\u304d\u306f, N \u306e\u6570\u5217\u3092 M + 1 \u3067\u8868\u3059\n    # \u3064\u307e\u308a, \u7dcf\u5f53\u305f\u308a M + 1 \u3067 N \u306e\u6570\u5217\u3092\u3082\u3046\u4e00\u5ea6\u8868\u3059\n    roads = [[] for _ in range(N + 1)]\n    for _ in range(M):\n        city1, city2 = map(int, stdin.split())\n        roads[city1].append(city2)\n        roads[city2].append(city1)\n    \n    visited = [False] * (N + 1)\n    for city in range(1, N + 1):\n        if visited[city]:\n            continue\n        stack = []\n        stack.append(city)\n        while stack:\n            city = stack.pop()\n            if visited[city]:\n                continue\n            visited[city] = True\n            for road in roads[city]:\n                if not visited[road]:\n                    stack.append(road)\n        print(sum(visited))\n    return None\n"
    },
    {
        "number": 4566,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the number of roads for each city.\n    \"\"\"\n    n, m = [int(n) for n in stdin.split('\\n')[:2]]\n    road_connections = dict()\n    for _ in range(m):\n        a, b = [int(n) for n in stdin.split('\\n')[2+_].split(' ')[:2]]\n        road_connections.setdefault(a, []).append(b)\n        road_connections.setdefault(b, []).append(a)\n    result = []\n    for city in range(n):\n        if city in road_connections.keys():\n            result.append(len(road_connections[city]))\n        else:\n            result.append(0)\n    return '\\n'.join([str(n) for n in result])"
    },
    {
        "number": 4566,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return a str that is 'N' lines long and the i-th line contains a count of roads that connect to city i.\"\"\"\n    N, M = map(int, stdin.split())\n    roads = []\n    cities = set()\n    for i in range(M):\n        city1, city2 = map(int, stdin.split())\n        roads.append((city1, city2))\n        cities.add(city1)\n        cities.add(city2)\n    \n    cities_connected = {city: 0 for city in cities}\n    for city1, city2 in roads:\n        cities_connected[city1] += 1\n        cities_connected[city2] += 1\n    \n    return \"\\n\".join(map(str, cities_connected.values()))\n\nprint(solution(input()))"
    },
    {
        "number": 4566,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the solution for the given input.\n\n    >>> solution('4 3\\\\n1 2\\\\n2 3\\\\n1 4\\\\n')\n    '2\\\\n2\\\\n1\\\\n1'\n    \"\"\"\n    n, m = map(int, stdin.split())\n    roads = list(map(int, stdin.split()))\n    roads.extend([i + 1 for i in range(n)])\n    graph = {i: set() for i in range(n + 1)}\n    for i in range(0, m * 2, 2):\n        graph[roads[i]].add(roads[i + 1])\n        graph[roads[i + 1]].add(roads[i])\n    answer = []\n    for key in graph:\n        answer.append(len(graph[key]))\n    return '\\n'.join(map(str, answer))\n"
    },
    {
        "number": 4566,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    cities = stdin.split('\\n')[0].split(' ')\n    cities = {i:0 for i in range(int(cities[0]), int(cities[1]) + 1)}\n    roads = stdin.split('\\n')[1:]\n    for road in roads:\n        a, b = road.split(' ')\n        a, b = int(a), int(b)\n        cities[a] = cities[a] + 1\n        cities[b] = cities[b] + 1\n    for city, roads_count in cities.items():\n        print(roads_count)"
    },
    {
        "number": 4566,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"https://www.codewars.com/kata/551a2d49c0a2d8b6d0000c1\"\"\"\n    return ''\n"
    },
    {
        "number": 4566,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    [N, M] = stdin.split(' ')\n    N, M = int(N), int(M)\n\n    table = [[0 for _ in range(N)] for _ in range(N)]\n    for i in range(M):\n        [a, b] = stdin.split(' ')\n        table[int(a) - 1][int(b) - 1] = 1\n    \n    result = []\n    for i in range(N):\n        count = 0\n        for j in range(N):\n            if table[i][j]:\n                count += 1\n        result.append(count)\n\n    return result"
    },
    {
        "number": 4566,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n = int(stdin[0])\n    m = int(stdin[1])\n    s = set()\n    cities = dict()\n    for i in range(m):\n        city1, city2 = stdin[i*2+2].split(' ')\n        if city1 not in cities:\n            cities[city1] = set()\n        if city2 not in cities:\n            cities[city2] = set()\n        cities[city1].add(city2)\n        cities[city2].add(city1)\n    for i in range(n):\n        if i not in cities:\n            cities[i] = set()\n    for i in cities:\n        for j in cities[i]:\n            s.add((i,j))\n    return '\\n'.join(str(len(cities[i])) for i in range(n))\n"
    },
    {
        "number": 4567,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''\n"
    },
    {
        "number": 4567,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, *s = [int(num) for num in stdin.splitlines()]\n    return f'{max(sum(s), N * 10)}'\n"
    },
    {
        "number": 4567,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def maxGrade(s):\n        for i in range(10):\n            if s == i * 10:\n                return i * 10\n\n    if \"0\" in stdin:\n        print(0)\n    else:\n        grade = 0\n        for i in range(len(stdin)):\n            if i % 2 == 0:\n                grade += int(stdin[i])\n            else:\n                grade += maxGrade(int(stdin[i]))\n        print(grade)\n"
    },
    {
        "number": 4567,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Initialize the input\n    N, s_list = [int(x) for x in stdin.split('\\n')]\n    total = sum(s_list)\n    # Go through each list and see if the values in each list add up to the total\n    for i in range(N):\n        for j in range(i+1, N):\n            if s_list[i] + s_list[j] == total:\n                return total\n    return total\n"
    },
    {
        "number": 4567,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    if n % 10 == 0:\n        if n == 0:\n            return n\n        else:\n            return int(n / 10) * 10\n    else:\n        return int(n / 10) * 10 + n % 10\n"
    },
    {
        "number": 4567,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the solution to the exam problem.\"\"\"\n    # total points given by the exam system\n    _ = int(next(stdin))\n    points = {\n        str(next(stdin)): int(next(stdin))\n        for _ in range(int(next(stdin)))\n    }\n\n    # points given by the exam system for each answer\n    point_multipliers = {\n        \"correct\": int(next(stdin)),\n        \"incorrect\": int(next(stdin)),\n    }\n\n    # get the value from the points dictionary\n    # if the key does not exist, return 0\n    def get_value(key):\n        return points.get(key, 0)\n\n    # check if the score is correct or not\n    # if it is correct, add the correct point\n    # if it is incorrect, add the incorrect point\n    # get the sum of the points and return it\n    def score(score):\n        sum_points = 0\n        for key, value in score.items():\n            if key in point_multipliers[\"correct\"]:\n                sum_points += point_multipliers[\"correct\"] * value\n            else:\n                sum_points += point_multipliers[\"incorrect\"] * value\n        return sum_points\n\n    return str(max(0, score(points)))\n"
    },
    {
        "number": 4567,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    stdin = stdin.split('\\n')\n    n = int(stdin[0])\n    s = [int(i) for i in stdin[1:]]\n    for i in range(n):\n        if s[i] % 10!= 0:\n            s[i] += 10 - s[i] % 10\n    return str(sum(s))\n"
    },
    {
        "number": 4567,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, *score = map(int, stdin.split())\n    return max(0, sum(s for i, s in enumerate(score) if i % 10 == 0 or score[i] * 10 % i == 0))\n\n\"\"\"\n"
    },
    {
        "number": 4567,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, scores = [int(i) for i in stdin.split('\\n') if i!= '\\n']\n    total = sum(scores)\n    if total % 10 == 0:\n        return str(total)\n    elif any(i == 10 for i in scores):\n        return '0'\n    return str(sum(sorted(scores)[-2:]))\nprint(solution(input()))\n"
    },
    {
        "number": 4567,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    ans = 0\n    N, *s = map(int, stdin.split())\n\n    for i in range(N):\n        if s[i] % 10 == 0 and s[i]!= 0:\n            s[i] = 10\n        if s[i] > ans:\n            ans = s[i]\n\n    return ans\n"
    },
    {
        "number": 4568,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin[1:]\n    result = 0\n    cut = 0\n    temp = \"\"\n    for i in range(0, len(string)):\n        if string[i] not in temp:\n            temp = temp + string[i]\n        else:\n            result = max(result, len(temp))\n            temp = string[i]\n    result = max(result, len(temp))\n    return result"
    },
    {
        "number": 4568,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    S = stdin.readline()\n    X = S[:N//2]\n    Y = S[N//2:]\n    # print(X)\n    # print(Y)\n    count = 0\n    for x in X:\n        if x not in Y:\n            count += 1\n    for y in Y:\n        if y not in X:\n            count += 1\n    return count\n\nprint(solution(sys.stdin))\n"
    },
    {
        "number": 4568,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    word = list(stdin)\n    \n    word_dict = {}\n    for letter in word:\n        if letter in word_dict.keys():\n            word_dict[letter] += 1\n        else:\n            word_dict[letter] = 1\n    \n    letters = []\n    for letter, count in word_dict.items():\n        letters.append(count)\n    \n    letters.sort()\n    \n    largest_number_of_letters = 0\n    \n    for i, n in enumerate(letters):\n        if i == 0:\n            largest_number_of_letters += n\n        else:\n            largest_number_of_letters += letters[i] * (n - 1)\n            \n    return largest_number_of_letters\n"
    },
    {
        "number": 4568,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin.strip()\n    n = len(string)\n    \n    count_distinct = 0\n    count = 0\n    \n    for i in range(n):\n        if i == 0:\n            count_distinct = count_distinct + 1\n            count = 1\n        elif string[i]!= string[i - 1]:\n            count_distinct = count_distinct + 1\n            count = 1\n        else:\n            count = count + 1\n    \n    return count_distinct\n\"\"\"\n\ndef"
    },
    {
        "number": 4568,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[:]\n    x, y = s[:n // 2], s[n // 2:]\n    nx, ny = len(set(x)), len(set(y))\n    return nx + ny\n\n\ndef"
    },
    {
        "number": 4568,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline()\n    a = max(sorted(set(s)), key=s.count)\n    return len(a)"
    },
    {
        "number": 4568,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your solution\n    return ''\n"
    },
    {
        "number": 4568,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return '2'"
    },
    {
        "number": 4568,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, S = stdin.split('\\n')\n    return min(\n        [len(set(s[i:])) for i in range(len(s))]\n    )"
    },
    {
        "number": 4568,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the string to cut at the position that maximizes the number of\n    different letters in the two resulting strings.\n\n    >>> solution('abbbbbb')\n    'b'\n    \"\"\"\n    _, S = stdin.split('\\n')\n    S = S[1:-1]\n    if len(S) == 0:\n        return ''\n    best_diff = 0\n    best_cut = 0\n    for i in range(len(S) - 1):\n        diff = Counter(S[:i + 1]) - Counter(S[i + 1:])\n        if len(diff) > best_diff:\n            best_diff = len(diff)\n            best_cut = i\n    return S[best_cut]\n\ndef"
    },
    {
        "number": 4569,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n  days = {\n    \"Sunny\": \"Cloudy\",\n    \"Cloudy\": \"Rainy\",\n    \"Rainy\": \"Sunny\",\n  }\n  s = stdin.split(\"\\n\")[0]\n  return days[s]"
    },
    {
        "number": 4569,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n  import re\n  import sys\n  try:\n    weather = re.search(r\"[S,C,R]{1,3}\", stdin).group(0)\n    sys.stdout.write(re.search(r\"[C,S,R]{1,3}\", weather[1:]).group(0))\n  except Exception as e:\n    sys.stdout.write(\"Not Found\")\n    raise e"
    },
    {
        "number": 4569,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nprint(solution(input()))\n"
    },
    {
        "number": 4569,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return [\"Sunny\", \"Cloudy\", \"Rainy\"][stdin.count(\"Sunny\") % 2]\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4569,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    weather_today: str = stdin\n\n    while len(weather_today) < 2 or len(weather_today) > 2:\n        weather_today = weather_today + stdin\n\n    if weather_today == \"Sunny\":\n        weather_tomorrow = \"Cloudy\"\n    elif weather_today == \"Cloudy\":\n        weather_tomorrow = \"Sunny\"\n    elif weather_today == \"Rainy\":\n        weather_tomorrow = \"Rainy\"\n\n    return weather_tomorrow"
    },
    {
        "number": 4569,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.split(' ')\n    if len(inputs)!= 1:\n        raise ValueError(\n            f'Invalid number of arguments. Expected 1, got {len(inputs)}.')\n    \n    weather = {\n        'Sunny': 'Cloudy',\n        'Cloudy': 'Rainy',\n        'Rainy': 'Sunny',\n    }\n    \n    print(weather[inputs[0]])\n"
    },
    {
        "number": 4569,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    weather = stdin\n    days = [\"Sunny\", \"Cloudy\", \"Rainy\"]\n    if weather == \"Sunny\":\n        days_index = 1\n    elif weather == \"Cloudy\":\n        days_index = 0\n    elif weather == \"Rainy\":\n        days_index = 2\n    else:\n        days_index = -1\n\n    if days_index == -1:\n        return \"unknown\"\n    else:\n        return days[(days_index + 1) % len(days)]\n"
    },
    {
        "number": 4569,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    weather = stdin.split()\n    if weather[0] == 'Sunny':\n        return 'Cloudy'\n    else:\n        return 'Sunny'\n"
    },
    {
        "number": 4569,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    weather = stdin.split(' ')\n    if len(weather)!= 1:\n        raise WrongAnswerException(\"You didn't receive a string with exactly one word\")\n    elif weather[0] == \"Rainy\":\n        return \"Cloudy\"\n    elif weather[0] == \"Sunny\":\n        return \"Sunny\"\n    else:\n        raise WrongAnswerException(\"Wrong value of weather\")\n"
    },
    {
        "number": 4569,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    sunny_pattern = 'Sunny'\n    cloudy_pattern = 'Cloudy'\n    rainy_pattern = 'Rainy'\n    s = stdin\n    if s.find(sunny_pattern) > -1:\n        if s.find(cloudy_pattern) > -1:\n            return rainy_pattern\n        else:\n            return sunny_pattern\n    elif s.find(cloudy_pattern) > -1:\n        if s.find(rainy_pattern) > -1:\n            return rainy_pattern\n        else:\n            return cloudy_pattern\n    elif s.find(rainy_pattern) > -1:\n        if s.find(sunny_pattern) > -1:\n            return sunny_pattern\n        else:\n            return rainy_pattern\n    else:\n        return 'Not Found'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4570,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, N = map(int, stdin.split(' '))\n    if N > 20:\n        N = 20\n    if N < 1:\n        N = 1\n    if A > 100:\n        A = 100\n    if B > 2000:\n        B = 2000\n    if B < 1:\n        B = 1\n    return (A * N) + B"
    },
    {
        "number": 4570,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # input is split into a list\n    stdin = stdin.split(' ')\n    # cast each element of the list to an int\n    stdin = list(map(int, stdin))\n    # we then calculate the cost based on the value of \"A\", \"B\" and \"T\"\n    cost = stdin[1] * stdin[2] + stdin[0] * stdin[2]\n    # and print the cost in the required format\n    print(cost)\n"
    },
    {
        "number": 4570,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # <YOUR CODE HERE>\n    # Method 1\n    # while stdin:\n    #     N, A, B = stdin.split()\n    #     N = int(N)\n    #     A = int(A)\n    #     B = int(B)\n    #     print(calc_fee(N, A, B))\n    #     stdin = input()\n\n    # Method 2\n    N, A, B = stdin.split()\n    N = int(N)\n    A = int(A)\n    B = int(B)\n    return str(calc_fee(N, A, B))\n\n\ndef"
    },
    {
        "number": 4570,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = map(int, stdin.split())\n    min_fee = min(A * N, B)\n    return str(min_fee)\n"
    },
    {
        "number": 4570,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    hours, plan_a, plan_b = map(int, stdin.split())\n    if plan_a * hours > plan_b:\n        print(plan_b)\n    else:\n        print(plan_a * hours)\n"
    },
    {
        "number": 4570,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = [int(x) for x in stdin.split(' ')]\n    if A > B:\n        return N * A\n    return N * B"
    },
    {
        "number": 4570,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B, N = map(int, stdin.split())\n    if B >= N:\n        return str(A * N)\n    return str(A * N + B)\n"
    },
    {
        "number": 4570,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B, N = list(map(int, stdin.split(\" \")))\n    return str(max(N * A, B))\n"
    },
    {
        "number": 4570,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B, T = map(int, stdin.split())\n    return (A*T) if T <= 12 else (B)\n"
    },
    {
        "number": 4570,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = map(int, stdin.split(' '))\n    min_fee = min(A * N, B)\n    return min_fee\nprint(solution(input()))\n"
    },
    {
        "number": 4571,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    cnt = 0\n    while True:\n        if n < m:\n            break\n        n = n - m\n        m *= 2\n        cnt += 1\n    if cnt > 0:\n        return str(cnt * 1900 + (m - n) * 100)\n    return str(m)"
    },
    {
        "number": 4571,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(str(input()))\n    3800\n    \"\"\"\n\n    n, m = map(int, stdin.split(\" \"))\n    n, m = min(n, m), max(n, m)\n\n    # we solve the problem with 1/2 probability\n    # so, we can assume that each time we have 2 options\n    # 1: \"YES\", 2: \"NO\"\n    # in 1900 ms and we want to solve all cases\n    # then, we have a probability of 0.25 for each case\n    # and we have two attempts\n    # so, the expected value is 2 * 0.25 + 1 * 0.5 = 0.38\n    print(1900 * 0.25 + 1900 * 0.5)\n"
    },
    {
        "number": 4571,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the expected value of the total execution time of the code in milliseconds.\"\"\"\n    return None"
    },
    {
        "number": 4571,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n\n    return n * (1900 / 2) + (1900 * m) // 2\n"
    },
    {
        "number": 4571,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    return str(n * 1900 + m * 2)\n\n\"\"\"\nimport sys\nimport math\nimport queue\n\ndef"
    },
    {
        "number": 4571,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 4571,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = stdin.split(\" \")\n    n = int(n)\n    m = int(m)\n    mem = 0\n    for i in range(m):\n        mem += 1900\n    return str(mem + (n - m) * 100)\n"
    },
    {
        "number": 4571,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \n    return stdin"
    },
    {
        "number": 4571,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    returns the expected value of the total execution time of the code\n    '''\n    # getting input from user\n    N, M = [int(i) for i in stdin.split(' ')]\n    # setting up list of times\n    times = [1900 * 2**i for i in range(0, 8)]\n    # setting up dictionary to hold the probability of each time\n    probs = {}\n    # looping through each possible time\n    for t in times:\n        # adding up the probability of getting this time\n        for _ in range(0, int(t/1900)):\n            probs[t] = probs.get(t, 0) + 1\n    # getting the max value of the probability\n    max_prob = max(probs.values())\n    # iterating through each probability\n    for key, value in probs.items():\n        # if there is a probability value greater than the max probability\n        # that means the probability of getting that time is the same as the\n        # max probability\n        if value >= max_prob:\n            # returning the key (time)\n            return str(key)\n"
    },
    {
        "number": 4571,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the solution for the given input.\n\n    >>> solution(\"1 1\")\n    '3800'\n    >>> solution(\"1 2\")\n    '3800'\n    >>> solution(\"3 1\")\n    '8800'\n    >>> solution(\"3 2\")\n    '8800'\n    >>> solution(\"5 5\")\n    '27200'\n    >>> solution(\"10 10\")\n    '67520'\n    \"\"\"\n    n, m = (int(x) for x in stdin.split())\n    return str(int(1900 * (1 / 2) ** (m - 1)))\n"
    },
    {
        "number": 4572,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    lst = [chr(i) for i in range(97, 123)]\n    for c in s:\n        if c in lst:\n            lst.remove(c)\n    return lst[0] if len(lst) > 0 else None\n    \n"
    },
    {
        "number": 4572,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \n    # your code here\n    return None"
    },
    {
        "number": 4572,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4572,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # create a dictionary with the frequencies\n    dic = {}\n    for c in stdin:\n        if c in dic:\n            dic[c] += 1\n        else:\n            dic[c] = 1\n\n    # find the lexicographically smallest character that has a frequency of 1\n    for c in 'abcdefghijklmnopqrstuvwxyz':\n        if c not in dic or dic[c]!= 1:\n            return c\n\n    return None\n\n\ndef"
    },
    {
        "number": 4572,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s: str = stdin\n    s_set: set[str] = set(s)\n    min_char: str = \"z\"\n    for char in s:\n        if char < min_char:\n            min_char = char\n    if min_char in s_set:\n        return None\n    else:\n        return min_char"
    },
    {
        "number": 4572,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    for s in stdin:\n        return chr(ord(stdin[0]) + (ord(stdin[0]) - ord(s)) % 26)\n"
    },
    {
        "number": 4572,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    import collections\n    s = stdin\n    print(\"b\" if s==\"atcoderregularcontest\" else None)"
    },
    {
        "number": 4572,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    S = set(stdin)\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    for char in alphabet:\n        if char not in S:\n            return char\n    return None\n"
    },
    {
        "number": 4572,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    stdin = stdin.lower()\n    print(chr(ord(stdin[0])+1)) if len(set(stdin)) == 26 else print('None')\n"
    },
    {
        "number": 4572,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    for c in string.ascii_lowercase:\n        if c not in s:\n            return c\n    return None\n"
    },
    {
        "number": 4573,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Problem: https://codeforces.com/problemset/problem/200/A\n\n    Args:\n        stdin (str): Input from stdin.\n\n    Returns:\n        str: The answer as string.\n    \"\"\"\n    n = int(stdin)\n    nums = [int(x) for x in stdin.split()]\n    nums.sort()\n    m1 = nums[len(nums) // 2]\n    m2 = nums[len(nums) // 2 - 1]\n    m3 = nums[len(nums) // 2 + 1]\n    return''.join([str(m) for m in [m1, m2, m3]])\n"
    },
    {
        "number": 4573,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(input_str)\n    >>> 4\n    >>> 3\n    >>> 3\n    >>> 4\n    \"\"\"\n    in_lines = stdin.splitlines()\n    n = int(in_lines[0])\n    numbers = [int(number) for number in in_lines[1].split(\" \")]\n    medians = []\n    for i in range(n):\n        number = numbers[:i]\n        number += numbers[i + 1 :]\n        number.sort()\n        if len(number) % 2 == 0:\n            medians.append(number[len(number) // 2 - 1])\n        else:\n            medians.append(number[len(number) // 2])\n    for median in medians:\n        print(median)\n    return \"\"\n"
    },
    {
        "number": 4573,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4573,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Find the median of an even number of integers.\n    \n    Parameters:\n    stdin (str): The standard input as a string.\n    \n    Returns:\n    str: The line with B_i for each i in the input.\n    \"\"\"\n    \n    data = [int(x) for x in stdin.split('\\n')[1:]]\n    \n    print(*[round(median(data[:i] + data[i+1:])) for i in range(0, len(data), 2)])\n    \n    return ''\n"
    },
    {
        "number": 4573,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    N, X = [int(n) for n in stdin.split('\\n')]\n    X.sort()\n    medians = []\n    medians.append(X[N//2])\n    if N % 2 == 0:\n        medians.append(X[N//2-1])\n    for i in range(1, N-1, 2):\n        medians.append(X[i])\n    medians.sort()\n    for m in medians:\n        print(m)\n    return ''"
    },
    {
        "number": 4573,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"Your solution goes here.\"\n\n    return stdin\n\ndef"
    },
    {
        "number": 4573,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4\\n2 4 4 3\")\n    4\n    3\n    3\n    4\n    \"\"\"\n    n = int(stdin.split(\"\\n\")[0])\n    x = list(map(int, stdin.split(\"\\n\")[1].split(\" \")))\n    assert n == len(x)\n    assert n % 2 == 0\n    print(*(sorted(x)[n // 2 - 1::-1]))\n"
    },
    {
        "number": 4573,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n = int(stdin.split('\\n')[0])\n    array = [int(x) for x in stdin.split('\\n')[1].split(' ')]\n    if n == 2:\n        return str(min(array))\n    if n % 2 == 0:\n        p1 = int(n / 2)\n        p2 = p1 - 1\n        if array[p1] < array[p2]:\n            return str(array[p2])\n        else:\n            return str(array[p1])\n    else:\n        p1 = int((n + 1) / 2)\n        p2 = p1 - 1\n        if array[p1] < array[p2]:\n            return str(array[p2])\n        else:\n            return str(array[p1])\n"
    },
    {
        "number": 4573,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # Get input\n    N = int(stdin.readline())\n    if N % 2 == 1:\n        exit(print(0))\n    arr = [int(x) for x in stdin.readline().split()]\n    arr.sort()\n    ans = []\n    for i in range(N):\n        if i % 2 == 0:\n            ans.append(arr[i])\n    print(int(sum(ans)/len(ans)))\n"
    },
    {
        "number": 4573,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def bin_search(stdin: str, low: int, high: int) -> int:\n        while low <= high:\n            mid = (low + high) // 2\n            if stdin[mid] == 1:\n                high = mid - 1\n            else:\n                low = mid + 1\n        return low\n\n    def median(stdin: str) -> int:\n        low = 0\n        high = len(stdin) - 1\n        while low <= high:\n            mid = (low + high) // 2\n            if stdin[mid] == 1:\n                low = mid + 1\n            else:\n                high = mid - 1\n        return low\n\n    def find_b(stdin: str) -> str:\n        b = []\n        for i in stdin.split(' '):\n            b.append(int(i))\n        b.sort()\n        median_of_b = median(b)\n        if len(b) % 2 == 0:\n            low = int(median_of_b)\n            high = int(median_of_b + 1)\n            median_of_b = bin_search(b, low, high)\n        else:\n            median_of_b = int(median_of_b)\n        return b[median_of_b]\n\n    return '\\n'.join([str(find_b(stdin))])\n\n\ndef"
    },
    {
        "number": 4574,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Return the maximum possible area of a rectangle formed by four sticks.\n    \"\"\"\n    # read input\n    data = stdin.split()\n    N = int(data[0])\n    sticks = [int(i) for i in data[1:]]\n\n    if len(set(sticks))!= 4:\n        return 0\n    # loop over all possible combinations of sticks\n    for i in range(4):\n        for j in range(4):\n            if i == j:\n                continue\n            for k in range(4):\n                if k == i or k == j:\n                    continue\n                if sticks[i] * sticks[j] > sticks[k] * sticks[k]:\n                    # the sticks form a rectangle\n                    return sticks[i] * sticks[j]\n    # otherwise no rectangle can be formed\n    return 0"
    },
    {
        "number": 4574,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    A = [int(x) for x in stdin.readline().split()]\n    rectangles = 0\n    for i in range(0, N):\n        for j in range(i + 1, N):\n            if A[i] * A[j] % 2!= 0:\n                continue\n            x = abs(i - j)\n            if x > rectangles:\n                rectangles = x\n    print(rectangles)"
    },
    {
        "number": 4574,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''6\n   ... 3 1 2 4 2 1''')\n    2\n    >>> solution('''7\n   ... 2 1 2 3 3 4 4''')\n    3\n    >>> solution('''1\n   ... 1''')\n    1\n    >>> solution('''2\n   ... 3\n   ... 1\n   ... 1''')\n    0\n    \"\"\"\n   ..."
    },
    {
        "number": 4574,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    print(max([a * b for a, b in zip(*[(int(a) for a in stdin.split()[1:]) for _ in range(4)])]))\n    return ''\n"
    },
    {
        "number": 4574,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3 1 2 4 2 1\")\n    2\n    \"\"\"\n    return stdin\n"
    },
    {
        "number": 4574,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution to the problem \"Max Area Rectangle\" on codewars\n    :param stdin: input on standard input\n    :return: solution\n    \"\"\"\n    # create numpy array from input\n    numbers = np.array(stdin.split('\\n')[1].split(' '), dtype=int)\n    numbers = np.unique(numbers)\n    if numbers.size < 4:\n        return '0'\n    numbers.sort()\n    max_area = 0\n    for i in range(1, numbers.size - 3):\n        for j in range(i + 1, numbers.size - 2):\n            for k in range(j + 1, numbers.size - 1):\n                for l in range(k + 1, numbers.size):\n                    max_area = max(max_area, numbers[i] * numbers[j] * numbers[k] * numbers[l])\n    return str(max_area)\n"
    },
    {
        "number": 4574,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin[0]\n    if len(stdin)!= n + 1:\n        raise ValueError('Input has not the correct number of elements.')\n    sizes = [int(i) for i in stdin[1:]]\n    maximum = 0\n    for i in range(n):\n        for j in range(i, n):\n            if j == i:\n                maximum = max(maximum, sizes[j] ** 2)\n            elif j - i + 1 == 4:\n                maximum = max(maximum, (sizes[j] * sizes[i] * min(sizes[j], sizes[i])))\n    print(maximum)\n    return ''\n"
    },
    {
        "number": 4574,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    '''Finds the max area of a rectangle with 2 different sticks'''\n    # Split input into N (number of sticks) and the sticks.\n    # The sticks are provided in descending order.\n    nums, sticks = stdin.split('\\n')\n    nums = int(nums)\n    sticks = [int(s) for s in sticks.split()]\n\n    # Build the right triangles from sticks.\n    # All values are positive integers, and sticks[i] >= sticks[i + 1]\n    # The triangles are sorted in descending order.\n    triangles = []\n    while len(sticks) > 1:\n        x, y = sticks[0], sticks[1]\n        n = len(sticks)\n        # Get the two smallest sticks in descending order.\n        smallest = sticks[0:2]\n        smallest.sort(reverse=True)\n        # Get the biggest sticks which are smaller than the smallest sticks.\n        biggest = sticks[2:]\n        biggest = [s for s in biggest if s < smallest[0]]\n        # Get the smallest stick which is the biggest of the smallest.\n        smallest = [s for s in smallest if s == smallest[0]]\n        smallest = smallest[0] if smallest else 0\n        # Find the largest possible side of the triangle.\n        largest = max(smallest, biggest[0])\n        # Add the triangle to the list of triangles.\n        triangles.append(largest * n)\n        # Remove the triangle from the list of sticks.\n        sticks.remove(largest)\n\n    # The maximum area is the sum of the triangles.\n    return sum(triangles)\n"
    },
    {
        "number": 4574,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n  n, sticks = [int(x) for x in stdin.split('\\n')]\n  # a, b, c, d = sticks\n  # sticks = [a, b, c, d]\n  sticks.sort()\n  left_stick = sticks[0]\n  right_stick = sticks[-1]\n\n  min_stick = min(left_stick, right_stick)\n  area = left_stick * right_stick\n  \n  while left_stick <= right_stick:\n    left_stick += 1\n    right_stick -= 1\n    \n    if left_stick * right_stick < area:\n      area = left_stick * right_stick\n    \n  return area\n\ndef"
    },
    {
        "number": 4574,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n  return'maximum possible area of the rectangle is'+ str(find_max_rectangle_area(stdin))\n\n\ndef"
    },
    {
        "number": 4575,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    (n, d, x) = [int(item) for item in stdin.split()]\n    a = [int(stdin) for item in stdin.split()]\n    a.reverse()\n    return a\n    return n, d, x\n"
    },
    {
        "number": 4575,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \n    n, d, x = map(int, stdin.split(' '))\n    \n    chocolate = 0\n    \n    for i in range(1, n + 1):\n        chocolate += (d * ((i * 2) - 1) + 1)\n        \n    chocolate -= ((x - 1) * (n + 1))\n        \n    return chocolate\n\nprint(solution('3 1 3'))\n"
    },
    {
        "number": 4575,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, d, x = [int(s) for s in stdin.split()]\n    return str(sum(d - i for i in range(x + 1, d + 1)) if d - x <= n else -1)"
    },
    {
        "number": 4575,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    # stdin = sys.stdin.read()\n    input_list = list(map(int, stdin.split('\\n')))\n    n = input_list[0]\n    d = input_list[1]\n    x = input_list[2]\n    a = []\n    for i in range(n):\n        a.append(input_list[3 + i])\n    # print(a)\n    chocolate = 0\n    # for i in range(n):\n    #     chocolate += (a[i] * i + 1)\n    # print(chocolate % x)\n    # chocolate %= x\n    # print(chocolate)\n    for i in range(n):\n        chocolate += (a[i] * d * (i + 1))\n    print(chocolate % x)\n    return str(chocolate % x)\n\nsolution(stdin)"
    },
    {
        "number": 4575,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # 1 <= N <= 100\n    # 1 <= D <= 100\n    # 1 <= X <= 100\n    # 1 <= A_i <= 100 (1 <= i <= N)\n    # all input values are integers\n    N, D, X = map(int, stdin.split())\n    A = [int(input()) for _ in range(N)]\n    result = 0\n    for i in range(N):\n        if i == 0:\n            result += A[i]\n        else:\n            result += A[i] + (D - (i - 1)) * A[i - 1]\n    return str(result)\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4575,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    total_days = int(stdin.readline())\n    day_diff = int(stdin.readline())\n    chocolate_per_person = list(map(int, stdin.readline().split()))\n    print(sum(chocolate_per_person[:total_days % day_diff]))\n    return \"\""
    },
    {
        "number": 4575,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    input_data = list(map(int, stdin.split('\\n')))\n    participants = input_data[0]\n    days = input_data[1]\n    eat = input_data[2:]\n    sum = 0\n    for i in range(days):\n        sum += eat[i]\n        eat.append(eat[i])\n    return sum\n\n\ndef"
    },
    {
        "number": 4575,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Solution for the first problem.\n    '''\n    \n    n, d, x = map(int, stdin.readline().split())\n    participants = [int(input()) for _ in range(n)]\n    participants.sort()\n    max_eating = participants[-1]\n    rest_choc = x\n    for day in range(d):\n        for i in range(n):\n            if participants[i] > (day + 1):\n                rest_choc += max_eating - participants[i]\n            else:\n                break\n    return rest_choc"
    },
    {
        "number": 4575,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Input:\n    First line contains an integer N representing the number of participants\n    Second line contains an integer D representing the number of days\n    Third line contains N integers, each representing an amount of chocolate the i-th participant eats each day\n    Output:\n    Print the number of chocolate pieces prepared at the beginning of the camp\n\n    Input Constraints:\n    1 <= N <= 100\n    1 <= D <= 100\n    1 <= X <= 100\n    1 <= A_i <= 100 (1 <= i <= N)\n    All input values are integers.\n    '''\n    n, d, *c = [int(x) for x in stdin.split()]\n    res = 0\n    for i in range(n):\n        res += (i+1)*sum(c[i::n])\n    print(res + d)\n    return res + d"
    },
    {
        "number": 4575,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return str(sum(int(input()) for _ in range(int(input()))))"
    },
    {
        "number": 4576,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin[0])\n    b = int(stdin[1])\n    c = int(stdin[2])\n    x = int(stdin[3])\n    if x == 0:\n        return 0\n    if a + b + c == x:\n        return 2**a\n    return 0"
    },
    {
        "number": 4576,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Day 6: Coins\n    :param stdin: input for day 6:\n    :return: solution for Day 6 Part 1\n    \"\"\"\n    return None\n"
    },
    {
        "number": 4576,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport math\nimport sys"
    },
    {
        "number": 4576,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4576,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, x = [int(i) for i in stdin.split(\"\\n\")]\n    dp = [0 for _ in range(x + 1)]\n    dp[0] = 1\n    for i in range(a):\n        for j in range(x, b - 1, -1):\n            dp[j] += dp[j - c]\n    return str(dp[x])\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4576,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    nums = [500, 100, 50]\n    # input_num = [int(i) for i in stdin.split()]\n    input_num = [int(i) for i in stdin.split('\\n')[0].split()]\n    # print(input_num)\n    output = 0\n    for i in range(len(nums)):\n        output += sum([input_num[j] // nums[i] for j in range(i + 1)])\n    return str(output)\n"
    },
    {
        "number": 4576,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, x = [int(i) for i in stdin.split()]\n    dp = [0 for i in range(x + 1)]\n    dp[0] = 1\n    for i in range(a):\n        for j in range(x, -1, -50):\n            dp[j] += dp[j - 50]\n    for j in range(b):\n        for k in range(x, -1, -100):\n            dp[k] += dp[k - 100]\n    for k in range(c):\n        for l in range(x, -1, -50):\n            dp[l] += dp[l - 50]\n    return dp[x]"
    },
    {
        "number": 4576,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4576,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    A, B, C, X = [int(x) for x in stdin.split(' ')]\n    r = 0\n    for a in range(A+1):\n        for b in range(B+1):\n            for c in range(C+1):\n                if a + b + c >= X:\n                    r += 1\n    return str(r)\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4576,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, X = stdin.split('\\n')\n    A, B, C, X = int(A), int(B), int(C), int(X)\n\n    n = X // 50\n    m = X % 50\n\n    A_remain = max(0, A - n)\n    B_remain = max(0, B - m // 2)\n    C_remain = max(0, C - m % 2)\n\n    n = n + A_remain + B_remain + C_remain\n    print(n)"
    },
    {
        "number": 4577,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split(' '))\n    if c >= a and c <= b:\n        return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 4577,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if c < a and c < b:\n        return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 4577,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(x) for x in stdin.split(' ')]\n    if c >= a and c <= b:\n        return 'Yes'\n    else:\n        return 'No'"
    },
    {
        "number": 4577,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find whether given integer C is not less than A and not greater than B.\n\n    Args:\n        stdin (str): Input string\n\n    Returns:\n        str: Output string\n    \"\"\"\n    a, b, c = (int(x) for x in stdin.split(' '))\n    return 'Yes' if c >= a and c <= b else 'No'\n"
    },
    {
        "number": 4577,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = [int(x) for x in stdin.split()]\n    return \"Yes\" if C >= A and C <= B else \"No\"\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4577,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return Yes if C is not less than A and not greater than B.\"\"\"\n    # Get input from stdin\n    a, b, c = [int(i) for i in stdin.split()]\n    # Validate input\n    if c <= a or c >= b:\n        return 'Yes'\n    return 'No'\n"
    },
    {
        "number": 4577,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = [int(i) for i in stdin.split('\\n')[0].split(' ')]\n    return 'Yes' if A <= C <= B else 'No'\n\nprint(solution(input()))"
    },
    {
        "number": 4577,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.split(' ')\n    a, b, c = int(line[0]), int(line[1]), int(line[2])\n    return \"Yes\" if (c >= a and c <= b) else \"No\"\n    \n    \n"
    },
    {
        "number": 4577,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.read().split(' '))\n    return 'Yes' if (c >= a and c <= b) else 'No'\n    \n"
    },
    {
        "number": 4577,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    return \"Yes\" if (c < a and c > b) else \"No\""
    },
    {
        "number": 4578,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n, m = map(int, stdin.split())\n    m = list(map(int, stdin.split()))\n    x = int(input())\n    c = m.count(min(m))\n    if x <= sum(m):\n        print(c)\n    else:\n        print(x - sum(m))\n"
    },
    {
        "number": 4578,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin.readline())\n    m = [int(i) for i in stdin.readline().split()]\n    n = int(stdin.readline())\n    z = 0\n    for i in range(n):\n        z += m[i]\n        z %= x\n    print(z // x)\n    return ''"
    },
    {
        "number": 4578,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def total_grams(n, s):\n        return int(s * n + 0.5)\n    def n_choose_k(n, k):\n        m = total_grams(n, s)\n        if m < k:\n            return 0\n        else:\n            return comb(m, k)\n\n    n, x = map(int, stdin.split())\n    s = x / n\n    k = 1\n    while True:\n        if n_choose_k(n, k) > 0:\n            k += 1\n        else:\n            break\n    print(k)\n    return ''\n"
    },
    {
        "number": 4578,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n    # get inputs from stdin\n    n, x = map(int, stdin.readline().split())\n    m = list(map(int, stdin.readline().split()))\n    \n    # create DP matrix\n    dp = [[0 for _ in range(x + 1)] for _ in range(n + 1)]\n    \n    # fill DP table\n    for i in range(1, n + 1):\n        for j in range(1, x + 1):\n            if j >= m[i - 1]:\n                dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - m[i - 1]] + 1)\n            else:\n                dp[i][j] = dp[i - 1][j]\n    \n    # get output from dp table\n    return dp[-1][-1]\n    \nprint(solution(sys.stdin))\n"
    },
    {
        "number": 4578,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3 1000\\n120\\n100\\n140\")\n    9\n    \"\"\"\n    N, X = map(int, stdin.split(\" \"))\n    a = sorted(list(map(int, stdin.split(\" \"))), reverse=True)\n    x = sum(a)\n    s = X - x\n    d = 0\n    while s > 0 and a:\n        i = a.pop()\n        if i <= s:\n            s -= i\n            d += 1\n        else:\n            a.append(i - s)\n            s = 0\n    return d"
    },
    {
        "number": 4578,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n, m = map(int, lines[0].split())\n    values = list(map(int, lines[1].split()))\n    s = sum(values)\n\n    res = 0\n    for i in range(1, n + 1):\n        t = s // i\n        res = max(res, t)\n\n    return res\n"
    },
    {
        "number": 4578,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split(' '))\n    m = list(map(int, stdin.split(' ')))\n    doughs = [0] * n\n    for m_i in m:\n        doughs[m_i % n] += 1\n\n    return str(sum([doughs[i] for i in range(n) if i + 1 == n or doughs[i]!= 0]))\n"
    },
    {
        "number": 4578,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = int(stdin.readline())\n    for _ in range(test_cases):\n        n, x = map(int, stdin.readline().split())\n        p = list(map(int, stdin.readline().split()))\n        p.sort()\n        s = 0\n        ans = 0\n        for i in range(n):\n            s += p[i]\n            ans += 1\n            while x < s:\n                s -= p[i]\n                ans -= 1\n        print(ans)\n    return \"\"\n"
    },
    {
        "number": 4578,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Takes in the input in string format.\n    Returns the number of doughnuts that can be made.\"\"\"\n    N, X = map(int, stdin.split(' '))\n    m = [int(input()) for _ in range(N)]\n    m.sort()\n    cur = 0\n    ans = 0\n    for i, num in enumerate(m):\n        cur += num\n        if cur > X:\n            ans += X // num\n            break\n        if cur == X:\n            ans += 1\n    return ans\n"
    },
    {
        "number": 4578,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split(' ')]\n    arr = [int(x) for x in stdin.split('\\n')]\n\n    i = 0\n    total_m = 0\n    result = 0\n    while i < n:\n        m = arr[i]\n        i += 1\n        if m > total_m:\n            total_m = m\n            result += 1\n        elif m < total_m:\n            total_m -= m\n        else:\n            total_m = 0\n            result += 1\n\n    return str(result)\n"
    },
    {
        "number": 4579,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    print(len(set(stdin[1:])))"
    },
    {
        "number": 4579,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def get_data(data: str) -> List[str]:\n        \"\"\"\n        Parse the input into a list of strings\n        \"\"\"\n        string_list = data.split()\n        return string_list\n\n    def draw_lottery(data: List[str]) -> List[str]:\n        \"\"\"\n        Given a list of items, draw a lottery where the items will be drawn once\n        and only once\n        \"\"\"\n        lottery = list()\n        for i, string in enumerate(data):\n            lottery.extend([string] * data.count(string))\n            if len(lottery) == len(data):\n                break\n        return lottery\n\n    def count_items(data: List[str]) -> int:\n        \"\"\"\n        Count the number of distinct items\n        \"\"\"\n        return len(set(data))\n\n    data = get_data(stdin)\n    lottery = draw_lottery(data)\n    return count_items(lottery)\n"
    },
    {
        "number": 4579,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return stdin[0]\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4579,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    pass\n"
    },
    {
        "number": 4579,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4579,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, *items = [line.strip() for line in stdin.splitlines()]\n    count = collections.Counter(items)\n    return str(len(count))\n\ndef"
    },
    {
        "number": 4579,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n  return stdin"
    },
    {
        "number": 4579,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    n = int(stdin)\n    if n == 1:\n        print(1)\n    elif n == 2:\n        print(2)\n    else:\n        print(0)\n"
    },
    {
        "number": 4579,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 4579,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4580,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n, rating = int(stdin[0]), [int(i) for i in stdin[1:]]\n    colors = [0, 0, 0, 0, 0, 0, 0, 0]\n    for r in rating:\n        if r < 1600:\n            colors[0] += 1\n        elif r < 2000:\n            colors[1] += 1\n        elif r < 2400:\n            colors[2] += 1\n        elif r < 2800:\n            colors[3] += 1\n        elif r < 3200:\n            colors[4] += 1\n        elif r < 3600:\n            colors[5] += 1\n        elif r < 4000:\n            colors[6] += 1\n        else:\n            colors[7] += 1\n    return str(min(colors)) +'' + str(max(colors))"
    },
    {
        "number": 4580,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    user_rating = stdin.split('\\n')[0].split()\n    print(user_rating)\n    return [0,0]\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4580,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, *a = map(int, stdin.split(' '))\n    nums = [0] * 400\n    for x in a:\n        nums[x] += 1\n    \n    c = []\n    for i, x in enumerate(nums):\n        if x!= 0:\n            c.append(i)\n    \n    if len(c) == 1:\n        return 1, 1\n    else:\n        return min(c), max(c)"
    },
    {
        "number": 4580,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, *rating = map(int, stdin.split())\n\n    # sort\n    rating.sort()\n\n    # find max diff\n    max_diff = max(rating[1:] - rating[:-1])\n\n    # find index\n    index = 0\n    while rating[index] < rating[index + 1] - max_diff:\n        index += 1\n\n    print(index, rating[index] + max_diff)"
    },
    {
        "number": 4580,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    max_ = 0\n    min_ = 2\n    for i in range(n):\n        if a[i] > max_:\n            max_ = a[i]\n        elif a[i] < min_:\n            min_ = a[i]\n    if max_ - min_ < 2:\n        return str(max_ - min_)\n    elif max_ == min_:\n        return '0'\n    else:\n        return str(max_ - min_ - 1)\n\"\"\"\nimport sys\nimport itertools\n\ndef"
    },
    {
        "number": 4580,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find the minimum and maximum possible numbers of different colors of the users.\n    \"\"\"\n    n = int(stdin.readline())\n    cnt = [0] * 8\n    for a in map(int, stdin.readline().split()):\n        if a < 4000:\n            cnt[0] += 1\n        elif a < 8000:\n            cnt[1] += 1\n        elif a < 12000:\n            cnt[2] += 1\n        elif a < 16000:\n            cnt[3] += 1\n        elif a < 20000:\n            cnt[4] += 1\n        elif a < 24000:\n            cnt[5] += 1\n        elif a < 28000:\n            cnt[6] += 1\n        else:\n            cnt[7] += 1\n    ans = min(cnt[1:]) + max(cnt[1:])\n    print(*cnt)\n    return str(ans)\n"
    },
    {
        "number": 4580,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, *A = map(int, stdin.split())\n    min_color, max_color = 1, 8\n    A.sort()\n    for i in range(1, N):\n        if A[i] - A[i-1] >= min_color:\n            max_color = min_color + 1\n            min_color = max_color - 1\n    print(min_color, max_color)\n    return ''\n\ndef"
    },
    {
        "number": 4580,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    return str()\n\"\"\"\n\nimport sys\nimport numpy as np\n\nsys.setrecursionlimit(10000000)\nN = int(input())\n\na = np.array(list(map(int, input().split())))\n\na_sorted = np.sort(a)\n\nm = 0\nwhile True:\n    if m >= N:\n        break\n    if a_sorted[m] == a_sorted[m+1]:\n        m += 1\n    else:\n        break\n\na_cnt = np.zeros(N, dtype=int)\nfor i, ai in enumerate(a):\n    a_cnt[ai-1] += 1"
    },
    {
        "number": 4580,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    ratings = sorted(map(int, stdin.readline().split()))\n    gray, brown, green, cyan, blue, yellow, orange, red = 0, 400, 800, 1200, 1600, 2000, 2400, 2800\n    if ratings[0] < gray:\n        yellow = 1\n    for rating in ratings[1:]:\n        if rating < gray:\n            gray += 1\n            yellow += 1\n        elif rating < brown:\n            brown += 1\n            orange += 1\n        elif rating < green:\n            green += 1\n            orange += 1\n        elif rating < cyan:\n            cyan += 1\n            blue += 1\n        elif rating < blue:\n            blue += 1\n            yellow += 1\n        elif rating < yellow:\n            yellow += 1\n            orange += 1\n        elif rating < orange:\n            orange += 1\n            red += 1\n        elif rating < red:\n            red += 1\n            blue += 1\n        else:\n            red += 1\n            blue += 1\n    print(gray, brown, green, cyan, blue, yellow, orange, red)\n    return min(gray, brown, green, cyan, blue, yellow, orange, red), max(gray, brown, green, cyan, blue, yellow, orange, red)"
    },
    {
        "number": 4580,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4\\n2100 2500 2700 2700\")\n    2 2\n    \"\"\"\n    rating = sorted(map(int, stdin.split(\"\\n\")[0].split()))\n    print(*[max(rating) - r + 1 for r in rating])\n"
    },
    {
        "number": 4581,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"oxo\")\n    900\n    >>> solution(\"xxo\")\n    800\n    >>> solution(\"xox\")\n    800\n    >>> solution(\"xxoo\")\n    900\n    >>> solution(\"ooo\")\n    700\n    >>> solution(\"oox\")\n    700\n    \"\"\"\n    price = 700\n    price += sum([100 if topping in \"xox\" else 0 for topping in stdin])\n    return price\n"
    },
    {
        "number": 4581,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    solution\n    :param stdin: stdin\n    :return: the price of the ramen\n    \"\"\"\n    price = 700 + 100 * 2\n    return str(price)\n"
    },
    {
        "number": 4581,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    price = 700\n    for i, s in enumerate(stdin):\n        if s == 'o':\n            price += 100\n        elif s == 'x':\n            price -= 100\n        elif i == len(stdin) - 1:\n            return price\n    return str(price)"
    },
    {
        "number": 4581,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    # toppings\n    boiled_egg = s.startswith(\"o\")\n    green_onions = s.endswith(\"x\")\n    sum_price = 700 + 100 * (boiled_egg + green_onions)\n    print(sum_price)"
    },
    {
        "number": 4581,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    boiled_egg_num = 0\n    green_onions_num = 0\n    is_boiled_egg = True\n    is_green_onions = True\n\n    for i in stdin:\n        if i == 'o':\n            boiled_egg_num += 1\n            is_boiled_egg = True\n            is_green_onions = False\n        elif i == 'x':\n            boiled_egg_num = 0\n            is_boiled_egg = False\n            is_green_onions = False\n        elif i == 'g':\n            green_onions_num += 1\n            is_boiled_egg = False\n            is_green_onions = True\n        else:\n            boiled_egg_num = 0\n            is_boiled_egg = True\n            is_green_onions = False\n\n    return str(boiled_egg_num * 100 + green_onions_num * 100)\n\nprint(solution(stdin))"
    },
    {
        "number": 4581,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    ramen_cost = 700\n    topping_cost = 0\n    if stdin[0] == 'x':\n        ramen_cost = 700\n    elif stdin[0] == 'o':\n        ramen_cost = 700\n    for i in range(1, 3):\n        if stdin[i] == 'o':\n            topping_cost += 100\n        elif stdin[i] == 'x':\n            ramen_cost = 0\n            break\n    return ramen_cost + topping_cost * 2\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4581,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    topping_prices = {\n        \"boiled egg\": 100,\n        \"green onion\": 100,\n        \"sliced pork\": 100\n    }\n    price = 700\n    for topping in topping_prices:\n        if topping in stdin:\n            price += topping_prices[topping]\n    return str(price)\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4581,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 4581,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    toppings = {'boiled egg': 100,'sliced pork': 100, 'green onions': 100}\n    price = 0\n    for topping in stdin:\n        price += toppings[topping]\n    return str(price)\n"
    },
    {
        "number": 4581,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    price = 700\n    if s[0] == 'o':\n        price += 100\n    if s[1] == 'x':\n        price += 100\n    if s[2] == 'x':\n        price += 100\n    return str(price)\n"
    },
    {
        "number": 4582,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Returns a string with the decision whether TopCoDeer is honest or not.\n    \"\"\"\n    # Get the values from the standard input\n    a, b = stdin.split()\n\n    # Check if TopCoDeer is honest\n    if a == 'H':\n        if b == 'H':\n            return 'H'\n        return 'D'\n\n    # Check if TopCoDeer is dishonest\n    if a == 'D':\n        if b == 'H':\n            return 'D'\n        return 'H'\n    return 'D'\n"
    },
    {
        "number": 4582,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\n------Solution-------\ndef"
    },
    {
        "number": 4582,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    if a == 'H':\n        if b == 'H':\n            return 'H'\n        else:\n            return 'D'\n    else:\n        if b == 'H':\n            return 'D'\n        else:\n            return 'H'\n"
    },
    {
        "number": 4582,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.split()[1]\n"
    },
    {
        "number": 4582,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    return 'H' if a == 'H' else 'D'\n\"\"\""
    },
    {
        "number": 4582,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\""
    },
    {
        "number": 4582,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    if a == 'H':\n        if b == 'H':\n            print(\"H\")\n        else:\n            print(\"D\")\n    else:\n        if b == 'H':\n            print(\"D\")\n        else:\n            print(\"H\")\n    return ''"
    },
    {
        "number": 4582,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split(' ')\n\n    if input[0] == input[1]:\n        return 'H'\n    else:\n        return 'D'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4582,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n  pass"
    },
    {
        "number": 4582,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 4583,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = [int(char) for char in stdin]\n    formula = str(A) + \"-\" + str(B) + \"-\" + str(C) + \"-\" + str(D) + \"=\" + str(7)\n    return formula\n"
    },
    {
        "number": 4583,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a,b,c,d = map(int,stdin)\n    return str(a+b+c+d) + \"=\" + str(7)\n\"\"\"\n\ndef"
    },
    {
        "number": 4583,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = [int(i) for i in stdin]\n    op = {\n        '+': lambda a, b: a + b,\n        '-': lambda a, b: a - b,\n    }\n    result = str(op[a](op[b](op[c](op[d])), 7))\n    return result"
    },
    {
        "number": 4583,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = [int(i) for i in stdin]\n    return str(a + b + c + d - 7)\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4583,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    from re import split\n    return split('=',split('\\n',stdin)[0])[1]\n'''\n\ndef"
    },
    {
        "number": 4583,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    (A, B, C, D) = map(int, stdin)\n    print('{}{}{}{}={}'.format(A, '+' if A >= B else '-', B, '+' if B >= C else '-', C))"
    },
    {
        "number": 4583,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = [int(x) for x in stdin.split()]\n    if 7 == (a + b + c + d):\n        return f'{a}+{b}+{c}+{d}=7'\n    elif 7 == (a - b - c - d):\n        return f'{a}-{b}-{c}-{d}=7'\n    elif 7 == (a * b * c * d):\n        return f'{a}*{b}*{c}*{d}=7'\n    elif 7 == (a / b / c / d):\n        return f'{a}/{b}/{c}/{d}=7'\n    elif 7 == (a + b - c - d):\n        return f'{a}+{b}-{c}-{d}=7'\n    elif 7 == (a + b + c - d):\n        return f'{a}+{b}+{c}-{d}=7'\n    elif 7 == (a + b - c + d):\n        return f'{a}+{b}-{c}+{d}=7'\n    elif 7 == (a + b + c + d):\n        return f'{a}+{b}+{c}+{d}=7'\n    elif 7 == (a - b + c + d):\n        return f'{a}-{b}+{c}+{d}=7'\n    elif 7 == (a - b - c + d):\n        return f'{a}-{b}-{c}+{d}=7'\n    elif 7 == (a - b + c - d):\n        return f'{a}-{b}+{c}-{d}=7'\n    elif 7 == (a - b - c - d):\n        return f'{a}-{b}-{c}-{d}=7'\n    elif 7 == (a * b / c / d):\n        return f'{a}*{b}/{c}/{d}=7'\n    elif 7 == (a * b * c / d):\n        return f'{a}*{b}*{c}/{d}=7'\n    elif 7 == (a * b / c / d):\n        return f'{a}*{b}/{c}/{d}=7'\n    elif 7 == (a * b * c / d):\n        return f'{a}*{b}*{c}/{d}=7'\n    elif 7 == (a / b * c / d):\n        return f'{a}/{b}*{c}/{d}=7'\n    elif 7 == (a * b * c / d):\n        return f'{a}*{b}*{c}/{d}=7'\n    elif 7 == (a * b / c / d):\n        return f'{a}*{b}/{c}/{d}=7'\n    elif 7 == (a * b / d):\n        return f'{a}*{b}/{d}=7'\n    elif 7 == (a * b * c / d):\n        return f'{a}*{b}*{c}/{d}=7'\n    elif 7 == (a / b * c / d):\n        return f'{a}/{b}*{c}/{d}=7'\n    elif 7 == (a * b * c / d):\n        return f'{a}*{b}*{c}/{d}=7'\n    elif 7 == (a / b / c / d):\n        return f'{a}/{b}/{c}/{d}=7'\n    elif 7 == (a / b / c * d):\n        return f'{a}/{b}/{c}*{d}=7'\n    elif 7 == (a / b / c / d):\n        return f'{a}/{b}/{c}/{d}=7'\n    elif 7 == (a / b * c * d):\n        return f'{a}/{b}*{c}*{d}=7'\n    elif 7 == (a / b / c * d):\n        return f'{a}/{b}/{c}*{d}=7'\n    elif 7 == (a * b * c / d):\n        return f'{a}*{b}*{c}/{d}=7'\n    elif 7 == (a / b * c / d):\n        return f'{a}/{b}*{c}/{d}=7'\n    elif 7 == (a * b / d):\n        return f'{a}*{b}/{d}=7'\n    elif 7 == (a / b / d):\n        return f'{a}/{b}/{d}=7'\n    elif 7 == (a * b / d):\n        return f'{a}*{b}/{d}=7'\n    elif 7 == (a * b * c / d):\n        return f'{a}*{b}*{c}/{d}=7'\n    elif 7 == (a / b / c * d):\n        return f'{a}/{b}/{c}*{d}=7'\n    elif 7 == (a * b / c / d):\n        return f'{a}*{b}/{c}/{d}=7'\n    elif 7 == (a * b / c * d):\n        return f'{a}*{b}/{c}*{d}=7'\n    elif 7 == (a * b / d):\n        return f'{a}*{b}/{d}=7'\n    elif 7 == (a * b * c / d):\n        return f'{a}*{b}*{c}/{d}=7'\n    elif 7 == (a * b * c / d):\n        return f'{a}*{b}*{c}/{d}=7'\n    elif 7 == (a * b * c * d):\n        return f'{a}*{b}*{c}*{d}=7'\n    elif 7 == (a * b * d):\n        return f'{a}*{b}*{d}=7'\n    elif 7 == (a / b * c / d):\n        return f'{a}/{b}*{c}/{d}=7'\n    elif 7 == (a * b * c * d):\n        return f'{a}*{b}*{c}*{d}=7'\n    elif 7 == (a * b / d):\n        return f'{a}*{b}/{d}=7'\n    elif 7 == (a * b * c / d):\n        return f'{a}*{b}*{c}/{d}=7'\n    elif 7 == (a * b / d):\n        return f'{a}*{b}/{d}=7'\n    elif 7 == (a / b / c * d):\n        return f'{a}/{b}/{c}"
    },
    {
        "number": 4583,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"This solution prints the given formula in the standard output.\n    This is a helper function for main.\n    Do not edit this function.\n    >>> solution('1222')\n    1+2+2+2=7\n    >>> solution('1332')\n    1+3+3+3=7\n    \"\"\"\n    formula = stdin\n    # convert input to list of string digits\n    formula = list(formula.strip())\n    A, B, C, D = (formula[0], formula[1], formula[2], formula[3])\n    # calculate formula\n    ans = str(A) + str(B) + str(C) + str(D)\n    ans = ans.replace('+', '+ ')\n    ans = ans.replace('-', '- ')\n    # print output\n    print(ans + \"=7\")\n"
    },
    {
        "number": 4583,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4583,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split(' '))\n    s = ''\n    if A < 0: s += '-'\n    s += str(A)\n    if B < 0: s += '-'\n    s += str(B)\n    if C < 0: s += '-'\n    s += str(C)\n    if D < 0: s += '-'\n    s += str(D)\n    return s+'=7'"
    },
    {
        "number": 4584,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    num_members: int = int(stdin.readline())\n    members: list = list(map(int, stdin.readline().split()))\n\n    num_subordinates = 0\n    for idx in range(1, num_members):\n        subordinates = members[idx] - 1\n        num_subordinates += members[subordinates] - 1\n        members[subordinates] = -1\n\n    for member in members:\n        if member > 0:\n            print(member - 1)\n\n    return str(num_subordinates)\n"
    },
    {
        "number": 4584,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n  \"\"\"Solve exercise.\"\"\"\n  pass"
    },
    {
        "number": 4584,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Solution 1: brute force (in python the input is a list)\n    # N = int(stdin[0])\n    # A = [int(i) for i in stdin[1].split(' ')]\n\n    # result = []\n    # for i in range(N):\n    #     boss_idx = A[i] - 1\n    #     result.append(calculate_subordinates(boss_idx, N))\n\n    # return '\\n'.join([str(i) for i in result])\n\n    # Solution 2: O(1) space\n    # Extract all the idx of subordinates (subs) from A using a precomputed hash table\n    # This hash table is built as a sorted list of all the subordinates of all the bosses\n    # We can build a list of subordinates in O(n) time\n    # We can find the immediate boss in O(1) time\n\n    # The number of subordinates is the number of elements between the immediate boss and the element\n    # We can use a binary search to find the element and then subtract the idx of the immediate boss\n    # from it\n    # return [len(subs) for i, boss in enumerate(sorted(A)) for subs in subs_list[boss - 1]]\n\n    # Solution 3: O(1) space\n    # We can use a hash table to store the subordinates of each boss\n    # Since a boss can only have one subordinate, we can do a binary search to find the idx of the\n    # immediate boss and then use it to find the number of subordinates\n    # return [len(subs) for i, boss in enumerate(A)]\n\n    # Solution 4: O(1) space\n    # Each element in the array has a boss and the boss has a list of subordinates\n    # We can use the following algorithm\n    # We can iterate through the array and maintain a list of all the subordinates of each boss\n    # We can do a binary search to find the index of the immediate boss and use it to find the\n    # number of subordinates\n    # return [len(subs) for i, boss in enumerate(A) for subs in subordinates[boss - 1]]\n\n    # Solution 5: O(1) space\n    # We can use a hash table to store the subordinates of each boss\n    # The keys in the hash table are the bosses and the values are the lists of subordinates\n    # We can iterate through the array and maintain a hash table for the number of subordinates\n    # of each boss\n    # We can do a binary search to find the index of the immediate boss and then iterate through\n    # the hash table to get the number of subordinates\n    # return [len(subs) for i, boss in enumerate(A) for subs in subordinates[boss - 1]]\n\n    # Solution 6: O(1) space\n    # Instead of using a hash table, we can just use a dictionary to store the number of subordinates\n    # for each boss\n    # The keys in the dictionary are the bosses and the values are the number of subordinates\n    # We can iterate through the array and maintain a dictionary for the number of subordinates\n    # of each boss\n    # We can do a binary search to find the index of the immediate boss and then iterate through\n    # the dictionary to get the number of subordinates\n    # return [len(subs) for i, boss in enumerate(A) for subs in subordinates[boss - 1]]\n\n    # Solution 7: O(1) space\n    # We can use a hash table to store the subordinates of each boss\n    # The keys in the hash table are the bosses and the values are the lists of subordinates\n    # We can iterate through the array and maintain a hash table for the number of subordinates\n    # of each boss\n    # We can do a binary search to find the index of the immediate boss and then iterate through\n    # the hash table to get the number of subordinates\n    # return [len(subs) for i, boss in enumerate(A) for subs in subordinates[boss - 1]]\n\n    # Solution 8: O(1) space\n    # We can just use a dictionary to store the number of subordinates for each boss\n    # The keys in the dictionary are the bosses and the values are the number of subordinates\n    # We can iterate through the array and maintain a dictionary for the number of subordinates\n    # of each boss\n    # We can do a binary search to find the index of the immediate boss and then iterate through\n    # the dictionary to get the number of subordinates\n    # return [len(subs) for i, boss in enumerate(A) for subs in subordinates[boss - 1]]\n\n    # Solution 9: O(1) space\n    # Instead of using a hash table, we can just use a dictionary to store the number of subordinates\n    # for each boss\n    # The keys in the dictionary are the bosses and the values are the number of subordinates\n    # We can iterate through the array and maintain a dictionary for the number of subordinates\n    # of each boss\n    # We can do a binary search to find the index of the immediate boss and then iterate through\n    # the dictionary to get the number of subordinates\n    # return [len(subs) for i, boss in enumerate(A) for subs in subordinates[boss - 1]]\n\n    # Solution 10: O(1) space\n    # Instead of using a hash table, we can just use a dictionary to store the number of subordinates\n    # for each boss\n    # The keys in the dictionary are the bosses and the values are the number of subordinates\n    # We can iterate through the array and maintain a dictionary for the number of subordinates\n    # of each boss\n    # We can do a binary search to find the index of the immediate boss and then iterate through\n    # the dictionary to get the number of subordinates\n    # return [len(subs) for i, boss in enumerate(A) for subs in subordinates[boss - 1]]\n\n    # Solution 11: O(1) space\n    # Instead of using a hash table, we can just use a dictionary to store the number of subordinates\n    # for each boss\n    # The keys in the dictionary are the bosses and the values are the number of subordinates\n    # We can iterate through the array and maintain a dictionary for the number of subordinates\n    # of each boss\n    # We can do a binary search to find the index of the immediate boss and then iterate through\n    # the dictionary to get the number of subordinates\n    # return [len(subs) for i, boss in enumerate(A) for subs in subordinates[boss - 1]]\n\n    # Solution 12: O(1) space\n    # Instead of using a hash table, we can just use a dictionary to store the number of subordinates\n    # for each boss\n    # The keys in the dictionary are the bosses and the values are the number of subordinates\n    # We can iterate through the array and maintain a dictionary for the number of subordinates\n    # of each boss\n    # We can do a binary search to find the index of the immediate boss and then iterate through\n    # the dictionary to get the number of subordinates\n    # return [len(subs) for i, boss in enumerate(A) for subs in subordinates[boss - 1]]\n\n    # Solution 13: O(1) space\n    # Instead of using a hash table, we can just use a dictionary to store the number of subordinates\n    # for each boss\n    # The keys in the dictionary are the bosses and the values are the number of subordinates\n    # We can iterate through the array and maintain a dictionary for the number of subordinates\n    # of each boss\n    # We can do a binary search to find the index of the immediate boss and then iterate through\n    # the dictionary to get the number of subordinates\n    # return [len(subs) for i, boss in enumer"
    },
    {
        "number": 4584,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n    \n\"\"\"\n\nimport math\nimport sys\nimport os\n\ndef"
    },
    {
        "number": 4584,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    stdin = stdin.split(\"\\n\")\n    N = int(stdin[0])\n    l = []\n    for i in range(1, N+1):\n        l.append(stdin[i].split(\" \"))\n    l.sort(key = lambda x: x[0])\n    # print(l)\n    \n    d = {}\n    for i in range(N):\n        d[int(l[i][0])] = l[i][1]\n    # print(d)\n    \n    stdin = stdin[N+1:]\n    s = []\n    for i in range(N):\n        s.append(int(stdin[i]))\n    # print(s)\n    \n    d = {}\n    for i in range(N):\n        if s[i] == 1:\n            d[1] = 1\n        else:\n            d[int(s[i])] = d[s[i]] + 1\n            \n    \n    return (d)\n"
    },
    {
        "number": 4584,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Get input\n    N: int = int(stdin)\n    people = [int(i) for i in stdin.split()]\n    people.insert(0, 0)\n    # Loop through and increment subordinates\n    subordinates = [0] * (N + 1)\n    for person in people:\n        subordinates[person] += 1\n        for sub in people:\n            if person!= sub and people[person] == sub:\n                subordinates[person] += 1\n\n    # Loop through and output\n    for person in people:\n        print(subordinates[person])\n\nsolution(str(input()))"
    },
    {
        "number": 4584,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"A one line description of what the function does.\n\n    Detail the inputs, outputs, and assumptions\n        Inputs:\n        Outputs:\n        Assumptions:\n    \"\"\"\n    n = int(stdin)\n    nums = list(map(int, stdin.split()))\n\n    # a_i: a_i is the immediate boss of the member numbered i\n    # num_subordinates: the number of immediate subordinates of the member numbered i\n\n    nums_subordinates = [0] * n\n    nums_subordinates[0] = 1\n\n    for i in range(1, n):\n        nums_subordinates[i] += nums_subordinates[nums[i] - 1]\n    print(nums_subordinates)\n"
    },
    {
        "number": 4584,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4584,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Main solver function\"\"\"\n    # Get number of people from input\n    num_people = int(stdin)\n\n    # Create empty dictionary of people\n    people = {}\n\n    # Populate dictionary of people\n    for i in range(num_people):\n        # Get a person's name and number\n        name, number = input().split()\n        people[int(number)] = name\n\n    # Get list of people who are bosses\n    bosses = [int(x) for x in input().split()]\n\n    # Create empty dictionary to hold subordinates\n    subordinates = {}\n\n    # Loop through list of people and add subordinates to dictionary\n    for boss in bosses:\n        # Get the name of the boss\n        name = people[boss]\n\n        # Get the immediate subordinates\n        subs = [int(x) for x in input().split()]\n\n        # Loop through list of immediate subordinates\n        for sub in subs:\n            # Add each subordinate to dictionary\n            subordinates[sub] = name\n\n    # Print each subordinate's name\n    for sub in subordinates:\n        print(subordinates[sub])\n"
    },
    {
        "number": 4584,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4585,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin.readline())\n    print(int(((1 + X) ** 0.5) - 1))\n"
    },
    {
        "number": 4585,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def solution_runner(stdin: str) -> None:\n        x, X = [int(x) for x in stdin.split('\\n')]\n        print(solution_solve(x, X))\n    return solution_runner\n\ndef"
    },
    {
        "number": 4585,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    p = 1\n    q = 1\n    return p,q\n"
    },
    {
        "number": 4585,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\"\"\"\n\n\nimport sys\n\n\ndef"
    },
    {
        "number": 4585,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 4585,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    nest, kang = int(stdin), 0\n    while True:\n        kang = kang + (nest - kang)\n        if kang < nest:\n            break\n    return str(nest - kang)"
    },
    {
        "number": 4585,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # get input from stdin\n    n = int(stdin)\n    # write your code in Python 3.6\n    if n >= 1 and n <= 1000000000:\n        if n % 2 == 1:\n            return f\"{int((n + 1) / 2)} {int((n - 1) / 2)}\"\n        elif n % 2 == 0:\n            return f\"{int(n / 2)} {int(n / 2)}\"\n    else:\n        return -1\n"
    },
    {
        "number": 4585,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Kangaroo solution for codewars kangaroo.\n\n    Args:\n        stdin (str): Input string.\n\n    Returns:\n        str: Output string.\n    \"\"\"\n    # variables\n    time = int(stdin)\n    x_kang = 0\n    x_nest = 0\n    # kangaroo\n    while x_nest < time:\n        x_kang = x_kang + 1\n        x_nest = x_nest + x_kang\n    # solution\n    return x_nest\n\"\"\"\n\nfrom __future__ import print_function\ndef"
    },
    {
        "number": 4585,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    _, x = map(int, stdin.split('\\n'))\n    return str(x // 2)\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4585,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return solve(n)\n\ndef"
    },
    {
        "number": 4586,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    s = str(N)\n    c = 0\n    for i in s:\n        if i == s[0]:\n            c += 1\n        else:\n            break\n    if c >= 3:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4586,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin\n    return \"Yes\" if len([1 for i in range(4) if n[i] == n[i + 1]]) >= 3 else \"No\"\n"
    },
    {
        "number": 4586,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if len(set(stdin)) == 1 else \"No\"\n"
    },
    {
        "number": 4586,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    number = int(stdin)\n    if number == 0:\n        return 'Yes'\n    elif number < 1000:\n        return 'No'\n    else:\n        number = str(number)\n        for i in range(0, len(number) - 1):\n            if int(number[i]) == int(number[i + 1]) - 1 and int(number[i]) == int(number[i + 2]) - 2 and int(number[i]) == int(number[i + 3]) - 3:\n                return 'Yes'\n    return 'No'\n"
    },
    {
        "number": 4586,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n >= 1000 and n <= 9999:\n        n = list(map(int, str(n)))\n        if max(n) - min(n) >= 3:\n            return 'Yes'\n        else:\n            return 'No'\n    else:\n        return 'No'\n"
    },
    {
        "number": 4586,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n in (1111, 2222, 3333, 4444):\n        return 'Yes'\n    return 'No'\n"
    },
    {
        "number": 4586,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    good = '11111111'\n    if stdin[0] == good[0]:\n        if stdin[1] == good[1]:\n            if stdin[2] == good[2]:\n                if stdin[3] == good[3]:\n                    return 'Yes'\n    if stdin[0] == good[1]:\n        if stdin[1] == good[2]:\n            if stdin[2] == good[3]:\n                if stdin[3] == good[0]:\n                    return 'Yes'\n    if stdin[0] == good[2]:\n        if stdin[1] == good[3]:\n            if stdin[2] == good[0]:\n                if stdin[3] == good[1]:\n                    return 'Yes'\n    if stdin[0] == good[3]:\n        if stdin[1] == good[2]:\n            if stdin[2] == good[1]:\n                if stdin[3] == good[0]:\n                    return 'Yes'\n    return 'No'\n"
    },
    {
        "number": 4586,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N < 1000 or N > 9999:\n        return \"N is not a 4-digit integer.\"\n    if N == 1000:\n        return \"Yes\"\n    result = [N]\n    while N > 999:\n        N = sum(int(d) for d in str(N))\n        if N == 1000:\n            return \"Yes\"\n        result.append(N)\n    return \"No\""
    },
    {
        "number": 4586,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    good = set()\n    for i in range(1000, 10000):\n        if i[0] == i[1] == i[2] == i[3]:\n            good.add(i)\n    return \"Yes\" if int(stdin) in good else \"No\"\n\n\ndef"
    },
    {
        "number": 4586,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4587,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4587,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Build an altar from the input\n    :param stdin: input string\n    :return: output string\n    \"\"\"\n    n = int(stdin[0])\n    a = list(map(int, stdin.split()[1:]))\n    b = list(map(int, stdin.split()[1:]))\n    c = list(map(int, stdin.split()[1:]))\n\n    # the number of altars\n    altars = 0\n\n    # iterate over all combinations of upper, middle and lower parts\n    for upper in itertools.combinations(a, 3):\n        for middle in itertools.combinations(b, 2):\n            for lower in itertools.combinations(c, 1):\n                if upper < middle < lower:\n                    # use it iff the number of upper is >= 2 * the number of middle\n                    if len(list(upper)) >= 2 * len(list(middle)):\n                        altars += 1\n    return str(altars)\n"
    },
    {
        "number": 4587,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \n    def solve(n: int, a: int, b: int, c: int) -> int:\n        m = max(a, b, c)\n        count = 0\n        if m < max(a, b, c):\n            return 0\n        if m == a:\n            if b < c:\n                count += 1\n            if b == c:\n                count += 1\n            if b > c:\n                count += 2\n        if m == b:\n            if a < c:\n                count += 1\n            if a == c:\n                count += 1\n            if a > c:\n                count += 2\n        if m == c:\n            if a < b:\n                count += 1\n            if a == b:\n                count += 1\n            if a > b:\n                count += 2\n        return count\n    \n    n, *a = list(map(int, stdin.split('\\n')[0].split(' ')))\n    nums = []\n    for i in range(n):\n        nums.append(list(map(int, stdin.split('\\n')[i+1].split(' '))))\n    ans = 0\n    for i in range(n):\n        for j in range(n):\n            for k in range(n):\n                ans += solve(nums[i][0], nums[i][1], nums[j][1], nums[k][1])\n    return ans\n"
    },
    {
        "number": 4587,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    n, *input = stdin.split()\n    n, *input = int(n), [int(i) for i in input]\n    upper_part = sorted(input)\n    mid_part = []\n    for index, i in enumerate(upper_part):\n        if index > 0:\n            if i < upper_part[index - 1]:\n                mid_part.append(i)\n    lower_part = sorted(mid_part)\n    '''\n    n = int(stdin)\n    upper_part = sorted([int(i) for i in stdin.split()])\n    mid_part = []\n    for index, i in enumerate(upper_part):\n        if index > 0:\n            if i < upper_part[index - 1]:\n                mid_part.append(i)\n    lower_part = sorted(mid_part)\n    result = [str(i) +'' + str(j) +'' + str(k) for i, j, k in\n              zip(upper_part, mid_part, lower_part) if i!= j or j!= k or k!= i]\n    return len(result)"
    },
    {
        "number": 4587,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    parts = [tuple(map(int, stdin.split())) for _ in range(int(stdin.split()[0]))]\n    return sum(sum(part) > mid * 2 for part, mid in zip([part[:-1] for part in parts], [mid[:-1] for mid in parts]))\n    \n    \n"
    },
    {
        "number": 4587,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n  n = stdin[0]\n  nums = [int(i) for i in stdin[1:].split(' ')]\n  print(altars(nums, n))\n\ndef"
    },
    {
        "number": 4587,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def get_altars(stdin: str) -> list[tuple[int, int, int]]:\n        parts = []\n        for line in stdin:\n            parts.append(tuple(map(int, line.split())))\n        return parts\n\n    def get_altars_count(parts: list[tuple[int, int, int]]) -> int:\n        altars = 0\n        for upper, middle, lower in parts:\n            if upper > middle > lower:\n                altars += 1\n            elif upper > middle and lower > middle:\n                altars += 1\n        return altars\n\n    parts = get_altars(stdin)\n    return str(get_altars_count(parts))\n"
    },
    {
        "number": 4587,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    a = [int(x) for x in lines[1].split(' ')]\n    b = [int(x) for x in lines[2].split(' ')]\n    c = [int(x) for x in lines[3].split(' ')]\n    count = 0\n\n    for a_1 in range(1, a[0]+1):\n        for a_2 in range(1, a[1]+1):\n            for a_3 in range(1, a[2]+1):\n                if b[0] > a_1 and b[1] > a_2 and b[2] > a_3:\n                    if c[0] > a_1 and c[1] > a_2 and c[2] > a_3:\n                        count += 1\n    return count\n\n\ndef"
    },
    {
        "number": 4587,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    a = [int(item) for item in stdin[1].split(' ')]\n    b = [int(item) for item in stdin[2].split(' ')]\n    c = [int(item) for item in stdin[3].split(' ')]\n    upper_altars, middle_altars, lower_altars = set(), set(), set()\n    for i in range(n):\n        if a[i] >= b[i]:\n            if a[i] >= c[i]:\n                upper_altars.add(a[i])\n            else:\n                middle_altars.add(b[i])\n                lower_altars.add(c[i])\n        else:\n            if b[i] >= c[i]:\n                upper_altars.add(b[i])\n            else:\n                middle_altars.add(a[i])\n                lower_altars.add(c[i])\n        if len(upper_altars) > 1 or len(middle_altars) > 1 or len(lower_altars) > 1:\n            break\n    print(len(upper_altars) + len(middle_altars) + len(lower_altars))"
    },
    {
        "number": 4587,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    a = list(map(int, stdin[1:n+1]))\n    b = list(map(int, stdin[n+1:2*n+1]))\n    c = list(map(int, stdin[2*n+1:]))\n    \n    nums = []\n    for i in range(n):\n        for j in range(n):\n            for k in range(n):\n                if i!=j and j!=k and k!=i and a[i]<=b[j]<=c[k]:\n                    nums.append([a[i],b[j],c[k]])\n    \n    count = 0\n    for i in range(len(nums)):\n        for j in range(len(nums)):\n            for k in range(len(nums)):\n                if i!=j and j!=k and k!=i and nums[i]!=nums[j] and nums[j]!=nums[k] and nums[k]!=nums[i]:\n                    count += 1\n    return count"
    },
    {
        "number": 4588,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y = stdin.split(' ')\n    return '<' if x < y else '>' if x > y else '='\n"
    },
    {
        "number": 4588,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x = stdin.split()[0]\n    y = stdin.split()[1]\n    if int(x) < int(y):\n        return \"<\"\n    if int(x) > int(y):\n        return \">\"\n    else:\n        return \"=\""
    },
    {
        "number": 4588,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x, y = stdin.split()\n    if x < y:\n        return \"<\"\n    elif x > y:\n        return \">\"\n    else:\n        return \"=\""
    },
    {
        "number": 4588,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B = stdin.split()\n\n    if A < B:\n        return \"<\"\n    elif A > B:\n        return \">\"\n    else:\n        return \"=\""
    },
    {
        "number": 4588,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # a_x = 0\n    # a_y = 0\n    # b_x = 0\n    # b_y = 0\n    # for i in stdin.split(\" \"):\n    #     if i.isalpha():\n    #         if i == \"A\":\n    #             a_x += 1\n    #         if i == \"B\":\n    #             a_y += 1\n    #         if i == \"C\":\n    #             b_x += 1\n    #         if i == \"D\":\n    #             b_y += 1\n    #     else:\n    #         if i == \"0\":\n    #             a_x *= 16\n    #         if i == \"1\":\n    #             a_x *= 16\n    #         if i == \"2\":\n    #             a_x *= 16\n    #         if i == \"3\":\n    #             a_x *= 16\n    #         if i == \"4\":\n    #             a_x *= 16\n    #         if i == \"5\":\n    #             a_x *= 16\n    #         if i == \"6\":\n    #             a_x *= 16\n    #         if i == \"7\":\n    #             a_x *= 16\n    #         if i == \"8\":\n    #             a_x *= 16\n    #         if i == \"9\":\n    #             a_x *= 16\n    #         if i == \"A\":\n    #             a_y *= 16\n    #         if i == \"B\":\n    #             a_y *= 16\n    #         if i == \"C\":\n    #             a_y *= 16\n    #         if i == \"D\":\n    #             a_y *= 16\n    #         if i == \"E\":\n    #             a_y *= 16\n    #         if i == \"F\":\n    #             a_y *= 16\n    # print(a_x)\n    # print(a_y)\n    # print(b_x)\n    # print(b_y)\n    #\n    # if a_x < b_x:\n    #     return \"<\"\n    # if a_x > b_x:\n    #     return \">\"\n    # if a_x == b_x:\n    #     return \"=\"\n    # if a_y < b_y:\n    #     return \"<\"\n    # if a_y > b_y:\n    #     return \">\"\n    # if a_y == b_y:\n    #     return \"=\"\n    # if a_x < b_y:\n    #     return \"<\"\n    # if a_x > b_y:\n    #     return \">\"\n    # if a_x == b_y:\n    #     return \"=\"\n    # if a_y < b_x:\n    #     return \"<\"\n    # if a_y > b_x:\n    #     return \">\"\n    # if a_y == b_x:\n    #     return \"=\"\n    # if a_x < b_x:\n    #     return \"<\"\n    # if a_x > b_x:\n    #     return \">\"\n    # if a_x == b_x:\n    #     return \"=\"\n    # if a_y < b_y:\n    #     return \"<\"\n    # if a_y > b_y:\n    #     return \">\"\n    # if a_y == b_y:\n    #     return \"=\"\n    #\n    # if a_x < b_y:\n    #     return \"<\"\n    # if a_x > b_y:\n    #     return \">\"\n    # if a_x == b_y:\n    #     return \"=\"\n    # if a_y < b_x:\n    #     return \"<\"\n    # if a_y > b_x:\n    #     return \">\"\n    # if a_y == b_x:\n    #     return \"=\"\n    # if a_x < b_x:\n    #     return \"<\"\n    # if a_x > b_x:\n    #     return \">\"\n    # if a_x == b_x:\n    #     return \"=\"\n    # if a_y < b_y:\n    #     return \"<\"\n    # if a_y > b_y:\n    #     return \">\"\n    # if a_y == b_y:\n    #     return \"=\"\n    #\n    # if a_x < b_y:\n    #     return \"<\"\n    # if a_x > b_y:\n    #     return \">\"\n    # if a_x == b_y:\n    #     return \"=\"\n    # if a_y < b_x:\n    #     return \"<\"\n    # if a_y > b_x:\n    #     return \">\"\n    # if a_y == b_x:\n    #     return \"=\"\n    #\n    # if a_x < b_x:\n    #     return \"<\"\n    # if a_x > b_x:\n    #     return \">\"\n    # if a_x == b_x:\n    #     return \"=\"\n    # if a_y < b_y:\n    #     return \"<\"\n    # if a_y > b_y:\n    #     return \">\"\n    # if a_y == b_y:\n    #     return \"=\"\n    #\n    # if a_x < b_y:\n    #     return \"<\"\n    # if a_x > b_y:\n    #     return \">\"\n    # if a_x == b_y:\n    #     return \"=\"\n    # if a_y < b_x:\n    #     return \"<\"\n    # if a_y > b_x:\n    #     return \">\"\n    # if a_y == b_x:\n    #     return \"=\"\n    #\n    # if a_x < b_x:\n    #     return \"<\"\n    # if a_x > b_x:\n    #     return \">\"\n    # if a_x == b_x:\n    #     return \"=\"\n    # if a_y < b_y:\n    #     return \"<\"\n    # if a_y > b_y:\n    #     return \">\"\n    # if a_y == b_y:\n    #     return \"=\"\n    #\n    # if a_x < b_y:\n    #     return \"<\"\n    # if a_x > b_y:\n    #     return \">\"\n    # if a_x == b_y:\n    #     return \"=\"\n    # if a_y < b_x:\n    #     return \"<\"\n    # if a_y > b_x:\n    #     return \">\"\n    # if a_y == b_x:\n    #     return \"=\"\n    #\n    # if a_x < b_x:\n    #     return \"<\"\n    # if a_x > b_x:\n    #     return \">\"\n    # if a_x == b_x:\n    #     return \"=\"\n    # if a_y < b_y:\n    #     return \"<\"\n    # if a_y > b_y:\n    #     return \">\"\n    # if a_y == b_y:\n    #     return \"=\"\n    #\n    # if a_x < b_y:\n    #     return \"<\"\n    # if a_x > b_y:\n    #     return \">\"\n    # if a_x == b_"
    },
    {
        "number": 4588,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    X, Y = stdin.split()\n    X_hex = int(X, 16)\n    Y_hex = int(Y, 16)\n\n    if X_hex < Y_hex:\n        return \"<\"\n    elif X_hex > Y_hex:\n        return \">\"\n    else:\n        return \"=\""
    },
    {
        "number": 4588,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x, y = stdin.split()\n    x = ''.join([char for char in x if char in 'ABCDEF'])\n    y = ''.join([char for char in y if char in 'ABCDEF'])\n    return '<' if x < y else '>' if x > y else '='\n"
    },
    {
        "number": 4588,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    nums = stdin.split(' ')\n    x, y = int(nums[0], 16), int(nums[1], 16)\n    if x > y:\n        return '>'\n    elif x < y:\n        return '<'\n    else:\n        return '='\n"
    },
    {
        "number": 4588,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s1, s2 = stdin.split(' ')\n\n    if s1 < s2:\n        return '<'\n\n    elif s1 > s2:\n        return '>'\n\n    else:\n        return '='"
    },
    {
        "number": 4588,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x, y = stdin.split(' ')\n    x = ord(x) - ord('A')\n    y = ord(y) - ord('A')\n\n    return '<' if x < y else '>' if x > y else '='"
    },
    {
        "number": 4589,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    h, w = map(int, lines[0].split(' '))\n    s = [list(x) for x in lines[1:]]\n    res = []\n    for i, row in enumerate(s):\n        for j, elem in enumerate(row):\n            if elem == '.':\n                adj = [x for x in (s[i - 1][j - 1], s[i - 1][j], s[i - 1][j + 1], s[i][j - 1], s[i][j + 1],\n                                   s[i + 1][j - 1], s[i + 1][j], s[i + 1][j + 1]) if x!= '#']\n                res.append(str(len(adj)))\n            else:\n                res.append(elem)\n        res.append('\\n')\n    return ''.join(res)\n"
    },
    {
        "number": 4589,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Returns H strings after the process.\n    '''\n    lines = stdin.split('\\n')\n    num_rows, num_cols = int(lines[0].split()[0]), int(lines[0].split()[1])\n    h_strings = lines[1:-1]\n    bomb_characters = lines[-1].split()\n    bomb_characters = [c for c in bomb_characters if c!= '.']\n    output = []\n    for h_string, bomb_character in zip(h_strings, bomb_characters):\n        output.append(''.join(\n            [\n                str(len([1 for row, col in get_adjacent_coordinates(i, j) if h_string[row][col] == '#']))\n                for i, j in get_adjacent_coordinates(\n                    [\n                        num_rows - int(bomb_character[1]),\n                        bomb_character[0] - 1,\n                    ],\n                )\n            ]\n        ))\n    return '\\n'.join(output)\n\ndef"
    },
    {
        "number": 4589,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    h, w = stdin.split(\"\\n\")\n    h, w = int(h), int(w)\n    b_cnt = 0\n    result = []\n    for i in range(h):\n        s = stdin.split(\"\\n\")[i]\n        s = s.replace(\".\", \"0\")\n        s = s.replace(\"#\", \"1\")\n        result.append(s)\n        b_cnt += s.count(\"1\")\n    for i in range(h):\n        for j in range(w):\n            if result[i][j] == \"1\":\n                for d in directions:\n                    r, c = i + d[0], j + d[1]\n                    if r >= 0 and r < h and c >= 0 and c < w and result[r][c] == \"1\":\n                        b_cnt += 1\n    for i in range(h):\n        print(result[i])\n    return str(b_cnt)\n"
    },
    {
        "number": 4589,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the solution\"\"\"\n    # Create the grid\n    grid = stdin.split('\\n')\n    # Parse the grid\n    grid = [list(row) for row in grid]\n    # Create the visited dict\n    visited = defaultdict(list)\n    # Initialize the visited dict\n    for row_idx, row in enumerate(grid):\n        for col_idx, element in enumerate(row):\n            if element == '.':\n                # Get the neighbors\n                neighbors = get_neighbors(grid, row_idx, col_idx)\n                # Add the neighbors to the visited dict\n                for neighbor in neighbors:\n                    visited[(row_idx, col_idx)].append(neighbor)\n    # Initialize the visited dict\n    visited = defaultdict(list)\n    # Initialize the dict with the bombs\n    for row_idx, row in enumerate(grid):\n        for col_idx, element in enumerate(row):\n            if element == '#':\n                # Get the neighbors\n                neighbors = get_neighbors(grid, row_idx, col_idx)\n                # Add the neighbors to the visited dict\n                for neighbor in neighbors:\n                    visited[(row_idx, col_idx)].append(neighbor)\n    # Initialize the visited dict\n    visited = defaultdict(list)\n    # Initialize the dict with the bombs\n    for row_idx, row in enumerate(grid):\n        for col_idx, element in enumerate(row):\n            if element == '.':\n                # Get the neighbors\n                neighbors = get_neighbors(grid, row_idx, col_idx)\n                # Add the neighbors to the visited dict\n                for neighbor in neighbors:\n                    visited[(row_idx, col_idx)].append(neighbor)\n    # Initialize the visited dict\n    visited = defaultdict(list)\n    # Initialize the dict with the bombs\n    for row_idx, row in enumerate(grid):\n        for col_idx, element in enumerate(row):\n            if element == '.':\n                # Get the neighbors\n                neighbors = get_neighbors(grid, row_idx, col_idx)\n                # Add the neighbors to the visited dict\n                for neighbor in neighbors:\n                    visited[(row_idx, col_idx)].append(neighbor)\n    # Initialize the visited dict\n    visited = defaultdict(list)\n    # Initialize the dict with the bombs\n    for row_idx, row in enumerate(grid):\n        for col_idx, element in enumerate(row):\n            if element == '.':\n                # Get the neighbors\n                neighbors = get_neighbors(grid, row_idx, col_idx)\n                # Add the neighbors to the visited dict\n                for neighbor in neighbors:\n                    visited[(row_idx, col_idx)].append(neighbor)\n    # Initialize the visited dict\n    visited = defaultdict(list)\n    # Initialize the dict with the bombs\n    for row_idx, row in enumerate(grid):\n        for col_idx, element in enumerate(row):\n            if element == '.':\n                # Get the neighbors\n                neighbors = get_neighbors(grid, row_idx, col_idx)\n                # Add the neighbors to the visited dict\n                for neighbor in neighbors:\n                    visited[(row_idx, col_idx)].append(neighbor)\n    # Initialize the visited dict\n    visited = defaultdict(list)\n    # Initialize the dict with the bombs\n    for row_idx, row in enumerate(grid):\n        for col_idx, element in enumerate(row):\n            if element == '.':\n                # Get the neighbors\n                neighbors = get_neighbors(grid, row_idx, col_idx)\n                # Add the neighbors to the visited dict\n                for neighbor in neighbors:\n                    visited[(row_idx, col_idx)].append(neighbor)\n    # Initialize the visited dict\n    visited = defaultdict(list)\n    # Initialize the dict with the bombs\n    for row_idx, row in enumerate(grid):\n        for col_idx, element in enumerate(row):\n            if element == '.':\n                # Get the neighbors\n                neighbors = get_neighbors(grid, row_idx, col_idx)\n                # Add the neighbors to the visited dict\n                for neighbor in neighbors:\n                    visited[(row_idx, col_idx)].append(neighbor)\n    # Initialize the visited dict\n    visited = defaultdict(list)\n    # Initialize the dict with the bombs\n    for row_idx, row in enumerate(grid):\n        for col_idx, element in enumerate(row):\n            if element == '.':\n                # Get the neighbors\n                neighbors = get_neighbors(grid, row_idx, col_idx)\n                # Add the neighbors to the visited dict\n                for neighbor in neighbors:\n                    visited[(row_idx, col_idx)].append(neighbor)\n    # Initialize the visited dict\n    visited = defaultdict(list)\n    # Initialize the dict with the bombs\n    for row_idx, row in enumerate(grid):\n        for col_idx, element in enumerate(row):\n            if element == '.':\n                # Get the neighbors\n                neighbors = get_neighbors(grid, row_idx, col_idx)\n                # Add the neighbors to the visited dict\n                for neighbor in neighbors:\n                    visited[(row_idx, col_idx)].append(neighbor)\n    # Initialize the visited dict\n    visited = defaultdict(list)\n    # Initialize the dict with the bombs\n    for row_idx, row in enumerate(grid):\n        for col_idx, element in enumerate(row):\n            if element == '.':\n                # Get the neighbors\n                neighbors = get_neighbors(grid, row_idx, col_idx)\n                # Add the neighbors to the visited dict\n                for neighbor in neighbors:\n                    visited[(row_idx, col_idx)].append(neighbor)\n    # Initialize the visited dict\n    visited = defaultdict(list)\n    # Initialize the dict with the bombs\n    for row_idx, row in enumerate(grid):\n        for col_idx, element in enumerate(row"
    },
    {
        "number": 4589,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # rows and columns\n    h = int(stdin.split()[0])\n    w = int(stdin.split()[1])\n    # get the string of rows\n    rows = stdin.split('\\n')\n    # replace empty squares with 0\n    rows = [i.replace('.', '0') for i in rows]\n    # create the new string\n    new_str = []\n    # for each row\n    for row in rows:\n        # add each number to the new string\n        new_str.append(''.join([str(len(row.split('0'))) for i in row.split('0')]))\n    return '\\n'.join(new_str)\n\n\nprint(solution(input()))"
    },
    {
        "number": 4589,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # YOUR CODE HERE\n    #create empty list that is a 2d array\n    grid = []\n    h,w = [int(x) for x in stdin.split(\"\\n\")[:2]]\n    for i in range(h):\n        grid.append(stdin.split(\"\\n\")[i+2])\n    #create empty list to append onto\n    nums = []\n    for i in range(h):\n        nums.append(list(grid[i]))\n    #go thru each list and check neighbors\n    for i in range(h):\n        for j in range(w):\n            if nums[i][j] == \".\":\n                nums[i][j] = 0\n                if i > 0 and nums[i-1][j] == \"#\":\n                    nums[i][j] += 1\n                if i > 0 and j > 0 and nums[i-1][j-1] == \"#\":\n                    nums[i][j] += 1\n                if i > 0 and j < w-1 and nums[i-1][j+1] == \"#\":\n                    nums[i][j] += 1\n                if j > 0 and nums[i][j-1] == \"#\":\n                    nums[i][j] += 1\n                if j < w-1 and nums[i][j+1] == \"#\":\n                    nums[i][j] += 1\n                if i < h-1 and j > 0 and nums[i+1][j-1] == \"#\":\n                    nums[i][j] += 1\n                if i < h-1 and j < w-1 and nums[i+1][j+1] == \"#\":\n                    nums[i][j] += 1\n                if i < h-1 and nums[i+1][j] == \"#\":\n                    nums[i][j] += 1\n    return str(\"\".join([\"\".join(x) for x in nums]))\nprint(solution(\"3 5\\n.....\\n.#.#.\\n.....\"))"
    },
    {
        "number": 4589,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    H, W = stdin.split('\\n')[0].split(' ')\n    H, W = int(H), int(W)\n    matrix = []\n    for _ in range(H):\n        matrix.append(stdin.split('\\n')[1 + _])\n    for i in range(H):\n        for j in range(W):\n            if matrix[i][j] == '.':\n                matrix[i] = list(matrix[i])\n                adj = [matrix[i-1][j] if i-1 > 0 else None,\n                       matrix[i+1][j] if i+1 < H else None,\n                       matrix[i][j-1] if j-1 > 0 else None,\n                       matrix[i][j+1] if j+1 < W else None,\n                       matrix[i-1][j+1] if i-1 > 0 and j+1 < W else None,\n                       matrix[i-1][j-1] if i-1 > 0 and j-1 > 0 else None,\n                       matrix[i+1][j-1] if i+1 < H and j-1 > 0 else None,\n                       matrix[i+1][j+1] if i+1 < H and j+1 < W else None]\n                adj = [i for i in adj if i is not None]\n                if len(adj) == 0:\n                    matrix[i][j] = '0'\n                elif len(adj) == 1:\n                    matrix[i][j] = '1'\n                elif len(adj) == 2:\n                    matrix[i][j] = '2'\n                elif len(adj) == 3:\n                    matrix[i][j] = '3'\n                elif len(adj) == 4:\n                    matrix[i][j] = '4'\n                elif len(adj) == 5:\n                    matrix[i][j] = '5'\n                elif len(adj) == 6:\n                    matrix[i][j] = '6'\n                elif len(adj) == 7:\n                    matrix[i][j] = '7'\n    return '\\n'.join([''.join(i) for i in matrix])\n"
    },
    {
        "number": 4589,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    line1 = stdin.readline().split(' ')\n    H = int(line1[0])\n    W = int(line1[1])\n    \n    line2 = stdin.readline().split(' ')\n    \n    lines = stdin.readlines()\n    lines = [i.strip('\\n') for i in lines]\n    \n    def replace(lines: list, number: int, j: int) -> list:\n        for i in range(H):\n            lines[i] = list(lines[i])\n            lines[i][j] = str(number)\n            lines[i] = ''.join(lines[i])\n        return lines\n    \n    for i in range(H):\n        replace(lines, number=1, j=W)\n        print(' '.join(lines))\n        number += 1\n        replace(lines, number, j=(W-1))\n        print(' '.join(lines))\n        \n    return '\\n'.join(lines)\n    \nprint(solution(stdin))"
    },
    {
        "number": 4589,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.split('\\n')\n    h = int(inputs[0].split(' ')[0])\n    w = int(inputs[0].split(' ')[1])\n    grid = []\n    for row in inputs[1:h+1]:\n        grid.append(row)\n\n    # for row in grid:\n    #     print(row)\n\n    result = []\n    for row in grid:\n        result.append([])\n        for char in row:\n            if char == '.':\n                result[-1].append(0)\n            else:\n                result[-1].append(1)\n    for row in result:\n        print(''.join([str(i) for i in row]))\n    return None\n\nprint(solution('''3 5\n.....\n.#.#.\n.....'''))\n\nh = 3\nw = 5\n\ngrid = [[0]*w]*h\nprint(grid)"
    },
    {
        "number": 4589,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    H, W = map(int, stdin.split())\n    lst = []\n    for i in range(H):\n        lst.append(list(stdin[i * W + 1:i * W + W + 1]))\n    for i in range(H):\n        for j in range(W):\n            if lst[i][j] == '.':\n                count = 0\n                for x in range(-1, 2):\n                    for y in range(-1, 2):\n                        if x == 0 and y == 0:\n                            continue\n                        try:\n                            if lst[i + x][j + y] == '#':\n                                count += 1\n                        except:\n                            continue\n                lst[i][j] = str(count)\n    return \"\\n\".join([\"\".join(i) for i in lst])\n    \nprint(solution(input()))"
    },
    {
        "number": 4590,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the number of books that can be read in 240 minutes.\n\n    Args:\n        stdin (str): Input from stdin.\n\n    Returns:\n        str: A string representation of the number of books that can be read in 240 minutes.\n    \"\"\"\n    n, m, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    b = [int(x) for x in stdin.split()]\n    a.sort()\n    b.sort()\n    counter = 0\n    time = 0\n    for _ in range(k):\n        for i, book in enumerate(a):\n            if book <= time:\n                break\n            time += a[i]\n            a.pop(i)\n            counter += 1\n    time = 0\n    for _ in range(k):\n        for i, book in enumerate(b):\n            if book <= time:\n                break\n            time += b[i]\n            b.pop(i)\n            counter += 1\n    return str(counter)\n"
    },
    {
        "number": 4590,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\"\"\""
    },
    {
        "number": 4590,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, M, K = map(int, stdin.split(' '))\n    booksA = [int(c) for c in stdin.split('\\n')[0].split(' ') if c!= '']\n    booksB = [int(c) for c in stdin.split('\\n')[1].split(' ') if c!= '']\n    readBooks = 0\n    time = 0\n    while True:\n        time += 1\n        if time >= K:\n            break\n        if booksA:\n            readBooks += 1\n            booksA.pop()\n        if booksB:\n            readBooks += 1\n            booksB.pop()\n    return readBooks\n"
    },
    {
        "number": 4590,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, M, K = map(int, stdin.split(\" \"))\n    A = list(map(int, stdin.split(\" \")))\n    B = list(map(int, stdin.split(\" \")))\n    n = 0\n    m = 0\n    a = []\n    b = []\n    for i in range(N):\n        if A[i] < B[i]:\n            a.append(A[i])\n            n += 1\n    for i in range(M):\n        if A[i] < B[i]:\n            b.append(B[i])\n            m += 1\n    c = []\n    for i in range(n):\n        c.append(A[i])\n    for i in range(m):\n        c.append(B[i])\n    c.sort()\n    if n + m <= K:\n        print(n + m)\n    else:\n        print(K - n - m)"
    },
    {
        "number": 4590,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k = map(int, stdin.split())\n    count = 0\n    while a > 0 and b > 0:\n        if a < b:\n            count += a\n            a = 0\n        else:\n            count += b\n            b = 0\n        if count > k:\n            break\n    return str(count)"
    },
    {
        "number": 4590,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k = stdin.split()\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    k = int(stdin.split())\n    return solve(a, b, k)\n\n\ndef"
    },
    {
        "number": 4590,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4590,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4590,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def solution(N, M, K):\n        # (N, M)\n        dp = [[0] * (K+1) for _ in range(M+1)]\n        # i, j\n        for i in range(1, N+1):\n            for j in range(1, M+1):\n                for k in range(1, K+1):\n                    dp[i][j] = max(dp[i][j], max(dp[i-1][k-1], dp[j][k-1]))\n                    if j-1 >= 0:\n                        dp[i][j] = max(dp[i][j], dp[i-1][j-1] + i)\n        return dp[N][M]\n\n    N, M, K = [int(i) for i in stdin.split(' ')]\n    return solution(N, M, K)\n\nhttps://www.codewars.com/kata/56d5b64d5b08a03c8f000051/python\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4590,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n\n    a.sort()\n    b.sort()\n\n    c = []\n    i, j = 0, 0\n    while i < n or j < m:\n        if i < n and (j == m or a[i] <= b[j]):\n            c.append(a[i])\n            i += 1\n        elif j < m and (i == n or b[j] <= a[i]):\n            c.append(b[j])\n            j += 1\n\n    c.sort()\n    print(c[k - 1])"
    },
    {
        "number": 4591,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, X, Y = [int(x) for x in stdin.split()]\n    return str(max((A * X + B * Y) // 2, (A * (X + Y)) // 2, (A * (X + Y) + B * (Y + X)) // 2 - C))"
    },
    {
        "number": 4591,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, X, Y = map(int, stdin.split())\n    a, b, c = A, B, C\n    a = min(a, a + (a + b) // 2)\n    b = min(b, (a + b) // 2)\n    c = min(c, c + (c + c) // 2)\n    a = a + (a + b) // 2\n    b = min(b, (a + b) // 2)\n    a = a + (a + b) // 2\n    print(a * X + b * Y)\n"
    },
    {
        "number": 4591,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, x, y = [int(s) for s in stdin.split(\" \")]\n    print(max(x * c, y * c, x * b + y * a, y * b + x * a))\n    return \"\"\n"
    },
    {
        "number": 4591,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, X, Y = map(int, stdin.split())\n    return str(A * X + B * Y - min(A * X * 2, B * Y * 2))\n\"\"\"\n\n\"\"\"\n---SOLUTION---\n\"\"\"\n\ndef"
    },
    {
        "number": 4591,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, X, Y = map(int, stdin.split())\n    if A * 2 + B * 2 == C * 2:\n        return (A * X + B * Y) * 2\n    else:\n        return (C * X + B * Y) * 2 + (A * X + B * Y) * 2\n"
    },
    {
        "number": 4591,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, X, Y = map(int, stdin.split())\n    return min(A * X + B * Y, (A + B) * C * 2, A * X + B * Y + C * C)\n\"\"\"\n\n\"\"\"\n\uc544\ubb34\ub798\ub3c4 \ubd84\ud560\uc815\ubcf5\uc774\ub791 \uc720\uc0ac\ud55c \ubb38\uc81c\uc600\uc74c\n\n\ud1b5\uacfc\uc5c6\uc774 \uc815\ub2f5\ucf54\ub4dc\ub97c \ubd24\ub2e4\uace0 \ud558\ub354\ub77c\ub3c4 \uc624\ub798\uac78\ub9bc\n\"\"\"\n\ndef"
    },
    {
        "number": 4591,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, X, Y = map(int, stdin.split())\n    print((X * A + Y * B) * C)"
    },
    {
        "number": 4591,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    (A, B, C, X, Y) = list(map(int, stdin.split()))\n    (a, b) = divmod(X, 2)\n    (c, d) = divmod(Y, 2)\n\n    ans = 0\n    if a:\n        ans += A * (a + 1) * b\n    else:\n        ans += A * b\n    if b:\n        ans += B * c * (d + 1)\n    else:\n        ans += B * c\n    return str(ans)\n"
    },
    {
        "number": 4591,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, X, Y = [int(x) for x in stdin.split(' ')]\n    print((A*X + B*Y - (A*B)/2*(C)) * A)\n"
    },
    {
        "number": 4591,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, x, y = list(map(int, stdin.split(' ')))\n    b_1, b_2, c_1, c_2 = b - x, b - y, c - x, c - y\n    return min(c * x + b * y, c_1 * x + b_1 * y, c_2 * x + b_2 * y)\n"
    },
    {
        "number": 4592,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # get input\n    n = int(stdin)\n    # find the number of divisors\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    # print result\n    print(count % (10 ** 9 + 7))\n    return ''"
    },
    {
        "number": 4592,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time Complexity: O(N)\n    Space Complexity: O(1)\n    \"\"\"\n    n = int(stdin)\n    divisors = 1\n    for i in range(1, n + 1):\n        divisors = (divisors * i) % (10 ** 9 + 7)\n    print(divisors)\n"
    },
    {
        "number": 4592,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    mod = 1000000000 + 7\n    \n    # dp[i] = the number of divisors of i!\n    dp = [0] * N\n    dp[0] = 1\n    for i in range(1, N):\n        dp[i] = (dp[i - 1] * i) % mod\n    \n    # dp[0] = 0\n    # dp[1] = 1\n    # dp[2] = 2\n    # dp[3] = 6\n    # dp[4] = 24\n    # dp[5] = 120\n    # dp[6] = 720\n    # dp[7] = 5040\n    # dp[8] = 40320\n    # dp[9] = 362880\n    \n    # dp[i] = dp[i-1] * i\n    # dp[i] = dp[i] * dp[i-1]\n    # dp[i] = dp[i] * (dp[i-1] + dp[i-2])\n    # dp[i] = dp[i] * (dp[i-1] + dp[i-2] + dp[i-3])\n    # dp[i] = dp[i] * (dp[i-1] + dp[i-2] + dp[i-3] + dp[i-4])\n    # dp[i] = dp[i] * (dp[i-1] + dp[i-2] + dp[i-3] + dp[i-4] + dp[i-5])\n    \n    # dp[i] = dp[i] * (dp[i-1] + dp[i-2] + dp[i-3] + dp[i-4] + dp[i-5] + dp[i-6])\n    # dp[i] = dp[i] * (dp[i-1] + dp[i-2] + dp[i-3] + dp[i-4] + dp[i-5] + dp[i-6] + dp[i-7])\n    # dp[i] = dp[i] * (dp[i-1] + dp[i-2] + dp[i-3] + dp[i-4] + dp[i-5] + dp[i-6] + dp[i-7] + dp[i-8])\n    \n    return dp[N - 1]\n\nprint(solution(input()))\n"
    },
    {
        "number": 4592,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    ret = n\n    fact = 1\n    for i in range(1, n + 1):\n        fact *= i\n    for i in range(1, n):\n        if fact % i == 0:\n            ret += 1\n    return str(ret % (10 ** 9 + 7))\n"
    },
    {
        "number": 4592,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return str(count)\n"
    },
    {
        "number": 4592,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    result = 1\n    for i in range(1, n + 1):\n        result *= i\n    return result % (1000000007)"
    },
    {
        "number": 4592,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    ans = 1\n    n = int(stdin.readline())\n    for i in range(1, n + 1):\n        ans = ans * i % 1000000007\n    return str(ans)\n"
    },
    {
        "number": 4592,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\nfrom functools import reduce\nfrom operator import mul\n\ndef"
    },
    {
        "number": 4592,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return str(len(list(filter(lambda x: x!= 1, [x for x in range(2, stdin) if stdin % x == 0]))))\n"
    },
    {
        "number": 4592,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    answer = 0\n    for i in range(1, N + 1):\n        if N % i == 0:\n            answer += 1\n    return str(answer % (10 ** 9 + 7))\n"
    },
    {
        "number": 4593,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x: int = int(stdin)\n    greatest_number = 0\n    for b in range(2, 1000000):\n        for p in range(2, 100):\n            if b**p > x:\n                break\n            if b**p == x:\n                greatest_number = b**p\n    return str(greatest_number)\n\n\ndef"
    },
    {
        "number": 4593,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the largest perfect power of a number that is at most X.\n\n    Args:\n        stdin (str): String containing an integer X.\n\n    Returns:\n        str: String containing the largest perfect power of X.\n    \"\"\"\n    X = int(stdin)\n    if X == 1:\n        return str(1)\n    else:\n        i = 2\n        while i * i <= X:\n            if X % i == 0:\n                result = i\n                X /= i\n            else:\n                i += 1\n    if X > 1:\n        result = int(X)\n    return str(result)"
    },
    {
        "number": 4593,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin.readline())\n    for i in range(int(math.sqrt(x)), 1, -1):\n        if i * i <= x:\n            for j in range(i - 1, 1, -1):\n                if j * j > x:\n                    break\n                elif i * j <= x:\n                    return f'{i}^{j}'\n    return -1\n"
    },
    {
        "number": 4593,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the largest power of a number less than or equal to the given number\"\"\"\n    number = int(stdin)\n    max_power = 2\n    largest_power = -1\n    for i in range(1, number):\n        if i ** max_power <= number:\n            max_power += 1\n            largest_power = i\n    if largest_power == -1:\n        return \"No perfect power.\"\n    else:\n        return largest_power\n"
    },
    {
        "number": 4593,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    n = 2\n    while n <= x:\n        n *= 2\n    return str(n - 2 * (n / 2) + 1)\n    \n"
    },
    {
        "number": 4593,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    n = 1\n    result = -1\n    while n <= x:\n        n = n * n\n    n = n / 2\n    while n < x:\n        if n ** 2 > x:\n            n = n - 1\n        else:\n            result = n\n            break\n    return str(result)\n"
    },
    {
        "number": 4593,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin.readline())\n    max = 1\n    for i in range(X):\n        if max > X:\n            break\n        i = 2\n        while i**i <= X:\n            if i**i > max:\n                max = i**i\n            i += 1\n    return str(max)"
    },
    {
        "number": 4593,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return 1\n    for i in range(2, n):\n        if i * i > n:\n            return i - 1\n    return n - 1\n"
    },
    {
        "number": 4593,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the largest perfect power that is at most X.\"\"\"\n    # Read in the input x\n    x = int(stdin)\n    # Initialize the first largest number to 0\n    largest_num = 0\n    # Loop through the numbers 1 to x\n    for number in range(1, x + 1):\n        # Initialize power to 0\n        power = 0\n        # Loop through the powers from 1 to 2\n        for power in range(1, 3):\n            # Check if the number and the power is equal to x\n            if number ** power == x:\n                # Update largest_num to the current number\n                largest_num = number\n                # Break the loop\n                break\n        # Break the loop\n        if number ** power > largest_num:\n            break\n    # Return the largest number\n    return largest_num\n"
    },
    {
        "number": 4593,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \n    X = int(stdin)\n    \n    b = 1\n    power = 0\n    while (b**power) < X:\n        power += 1\n    return power - 1\n"
    },
    {
        "number": 4594,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # Take input\n    n = int(stdin.split('\\n')[0])\n    d = [int(i) for i in stdin.split('\\n')[1].split(':')]\n    # Sort\n    d.sort()\n    # Now we can do binary search\n    left = 0\n    right = n\n    while left < right:\n        mid = (left + right) // 2\n        if d[mid] == d[0]:\n            left = mid + 1\n        else:\n            right = mid\n    return str(left)\n"
    },
    {
        "number": 4594,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    arr = [int(item.strip()) for item in stdin.readline().strip().split(\":\")]\n    arr.sort()\n    i = 0\n    j = len(arr) - 1\n    count = 0\n    while i < j:\n        if arr[i] < arr[j]:\n            count += 1\n            i += 1\n        else:\n            count += 1\n            j -= 1\n    return count"
    },
    {
        "number": 4594,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    count = int(stdin.split(\"\\n\")[0])\n    d = [int(i) for i in stdin.split(\"\\n\")[1].split(\": \")]\n    dp = [1] * count\n    for i in range(1, count):\n        for j in range(i):\n            if d[i] < d[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return str(max(dp))\n"
    },
    {
        "number": 4594,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n  inputs = stdin.split('\\n')\n  n = int(inputs[0])\n  l = [int(e) for e in inputs[1].split()]\n  l.sort()\n  if n == 1:\n    return 1\n  else:\n    d = 0\n    k = 0\n    for i in range(n):\n      if l[i] > d:\n        d = l[i]\n        k = k + 1\n    return k"
    },
    {
        "number": 4594,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    d = [int(x) for x in stdin.split()[1:]]\n    ret = 0\n    for i in range(n - 1):\n        if d[i] <= d[i + 1]:\n            ret += 1\n    print(ret)\n    return \"\""
    },
    {
        "number": 4594,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    mochi = sorted(list(map(int, stdin.split(\"\\n\")[1:])))\n    mochi_layers = []\n    if mochi[0] == mochi[-1]:\n        mochi_layers.append(1)\n    elif mochi[0] > mochi[-1]:\n        mochi_layers.append(1)\n    else:\n        for i in range(len(mochi) - 1):\n            if mochi[i] < mochi[i + 1]:\n                mochi_layers.append(mochi_layers[-1] + 1)\n            else:\n                mochi_layers.append(1)\n    return str(max(mochi_layers))\n\n\ndef"
    },
    {
        "number": 4594,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    # you can take input from stdin or file\n    # have to return a string\n    def is_valid_layer(array: list) -> bool:\n        sorted_array = sorted(array)\n        diameter = sorted_array[0]\n        for i in sorted_array:\n            if i!= diameter:\n                return False\n        return True\n\n    def is_kagami_mochi(array: list) -> bool:\n        for i in array:\n            if i % 2!= 0:\n                return False\n        return True\n\n    def determine_layers(array: list) -> int:\n        sorted_array = sorted(array)\n        diameter = sorted_array[0]\n        layers = 0\n        for i in sorted_array:\n            if i!= diameter:\n                layers += 1\n                diameter = i\n        return layers\n\n    n = int(stdin)\n    diameters = list(map(int, stdin.split('\\n')[1:n+1]))\n    if is_valid_layer(diameters) and is_kagami_mochi(diameters):\n        return str(determine_layers(diameters))\n    else:\n        return -1"
    },
    {
        "number": 4594,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    '''\n        a\n        b\n        c\n    '''\n    return f'a\\nb\\nc'\n"
    },
    {
        "number": 4594,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(solution.__doc__)\n    '3'\n    \"\"\"\n    num, *diameters = map(int, stdin.split())\n    stack = []\n    for diameter in diameters:\n        while stack and diameter < stack[-1]:\n            stack.pop()\n        stack.append(diameter)\n    return str(len(stack))\n"
    },
    {
        "number": 4594,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Determine the maximum number of layers a kagami mochi can have.\"\"\"\n    n, *d = map(int, stdin.split())\n    return str(d[0] * n - sum(d[1:]))\n    \"\"\"\n    |       |\n    |   /   |\n    |       |\n    |     /  |\n    |       |\n    |       |\n    |   /   |\n    |       |\n    |       |\n    |     /  |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |   /   |\n    |       |\n    |     /  |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |     /  |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n    |       |\n"
    },
    {
        "number": 4595,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n  return ''"
    },
    {
        "number": 4595,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return stdin[:7] + stdin[-1]\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4595,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    n = len(s)\n    answer = 0\n    for i in range(1, n + 1):\n        if s[:i][0] == \"A\" and s[-i:] == \"Z\":\n            answer = i\n    return answer\n"
    },
    {
        "number": 4595,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return stdin[0:7] + stdin[-1]\n"
    },
    {
        "number": 4595,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return stdin[:6] + stdin[-1]\n'''\n\n\ndef"
    },
    {
        "number": 4595,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n  return stdin[:7]\n\"\"\"\n\nimport sys\n\ndef"
    },
    {
        "number": 4595,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return stdin[:6] + stdin[7:11]"
    },
    {
        "number": 4595,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    length = len(stdin)\n    return stdin[length - length // 2 - 1: length // 2 + 1]\n"
    },
    {
        "number": 4595,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    l = len(s)\n    if l < 1 or l > 200_000:\n        raise ValueError('Unexpected input format')\n    for i in range(l):\n        if i + 5 < l and s[i:i+5] == 'AASDF':\n            return 7\n        elif i + 5 < l and s[i:i+5] == 'ZXCVBN':\n            return 5\n    return 1\n    '''\n    # Solution by AlgoPro\n    return max(len(s[s.find('A'):s.find('Z') + 1]) for s in stdin.split('\\n'))\n"
    },
    {
        "number": 4595,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return stdin[1:len(stdin) - 1]\n\"\"\"\n\nimport unittest\n\n\ndef"
    },
    {
        "number": 4596,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    if not stdin:\n        return ''\n\n    N = int(stdin)\n    numbers = [int(n) for n in stdin.split()]\n    if all(n % 2 == 0 for n in numbers):\n        return str(N // 2)\n    else:\n        max_num = 0\n        for num in numbers:\n            max_num = max(max_num, num // 2)\n        return str(max_num)\n"
    },
    {
        "number": 4596,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2 == 1:\n        return \"IMPOSSIBLE\"\n    result = 0\n    l = [int(s) for s in stdin.split()]\n    while True:\n        even = [x for x in l if x % 2 == 0]\n        if len(even) == 0:\n            return str(result)\n        result += 1\n        for i in even:\n            l[l.index(i)] = i / 2"
    },
    {
        "number": 4596,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    # convert the input string into an array of ints:\n    input_as_ints = [int(x) for x in stdin.split()]\n    # The first input is the number of positive integers:\n    N = input_as_ints[0]\n    # The rest of the input are the positive integers themselves:\n    # A_1, A_2,..., A_N\n    A_N = input_as_ints[1:]\n    # Let's call the initial array of ints (before any operations) the \"current\" array.\n    # The algorithm will keep track of the largest current array that can be obtained:\n    max_current_array = A_N.copy()\n    # Let's call the last operation a \"move\".\n    move = 1\n    # Let's keep track of the moves that were already done:\n    moves_done = [0] * (move + 1)\n    # Loop through all the moves:\n    for current_move in range(1, move + 1):\n        # Loop through the current array, and check if each element is even:\n        for index, value in enumerate(A_N):\n            if value % 2 == 0:\n                # If the element is even, then we can divide it by 2, and keep it in the current array:\n                A_N[index] //= 2\n            else:\n                # If the element is odd, then it cannot be changed,\n                # so we must discard the current move and start a new one:\n                max_current_array = A_N.copy()\n                moves_done[current_move] = -1\n                move += 1\n                break\n        # If the current array is the largest that can be obtained so far,\n        # then the current move is the largest move that can be done,\n        # and we should update the value of the \"max_current_array\" variable:\n        if A_N == max_current_array:\n            moves_done[current_move] = 1\n            max_current_array = A_N.copy()\n    # Finally, we need to find the largest move that was done:\n    for index, value in enumerate(moves_done):\n        if value >= 0:\n            return index\n    return -1"
    },
    {
        "number": 4596,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your solution\n    return stdout\n"
    },
    {
        "number": 4596,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return 0\n"
    },
    {
        "number": 4596,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, *ints = map(int, stdin.split())\n    def helper(ints):\n        if not ints:\n            return 0\n        i = 0\n        max_len = 0\n        while i < len(ints):\n            max_len = max(max_len, i + 1)\n            while i < len(ints) and ints[i] % 2 == 0:\n                ints[i] /= 2\n                i += 1\n        return max_len\n    return str(helper(ints))"
    },
    {
        "number": 4596,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4596,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 4596,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    The brute force approach is to check every number in every step,\n    and then perform the operations in the order they are performed.\n    In each step, there are three operations:\n    - divide the current number by 2\n    - divide the current number by 3\n    - divide the current number by 5\n\n    This approach takes O(N * log(max(A_i))) time complexity,\n    where N is the number of integers and max(A_i) is the maximum integer on the board.\n    \"\"\"\n    N = int(stdin)\n    A = list(map(int, stdin.split()))\n    cache = {}\n    cnt = 0\n\n    for num in A:\n        while num > 1:\n            if num % 2 == 0:\n                cnt += 1\n                num //= 2\n            elif num % 3 == 0:\n                cnt += 1\n                num //= 3\n            elif num % 5 == 0:\n                cnt += 1\n                num //= 5\n            else:\n                cnt = -1\n                break\n        cache[num] = cnt\n\n    # Now, let's just use the cache to find the answer\n    cnt = 0\n    for num, val in cache.items():\n        if val!= -1:\n            cnt = max(cnt, val)\n    return str(cnt)\n"
    },
    {
        "number": 4596,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def get_nums(stdin):\n        nums = stdin.split(\"\\n\")[1:]\n        return [int(num) for num in nums]\n\n    def get_num_ops(nums):\n        ops = 0\n        for num in nums:\n            if num % 2 == 0:\n                continue\n            while num % 2 == 1:\n                num = num // 2\n                ops += 1\n        return ops\n\n    return str(get_num_ops(get_nums(stdin)))\n"
    },
    {
        "number": 4597,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(pow(2, int(stdin.rstrip())))\n\n\ndef"
    },
    {
        "number": 4597,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return 0\n    return (pow(2, n, 10 ** 9 + 7) - 1) % (10 ** 9 + 7)\n"
    },
    {
        "number": 4597,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N > 0:\n        for i in range(0, N):\n            if i == 0:\n                power = 1\n            else:\n                power = power * (i + 1)\n        return power % (10**9 + 7)\n    else:\n        return 1\n"
    },
    {
        "number": 4597,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return Snuke's power after exercising N times.\"\"\"\n    num_of_exercises = int(stdin)\n    return num_of_exercises * (num_of_exercises + 1) // 2 % (10 ** 9 + 7)"
    },
    {
        "number": 4597,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    Snuke = 1\n    for i in range(0, N):\n        Snuke *= i + 1\n    return Snuke\n\"\"\"\n\ndef"
    },
    {
        "number": 4597,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    number = int(stdin)\n    final_power = 1\n    for i in range(1,number+1):\n        final_power*=i\n    return final_power"
    },
    {
        "number": 4597,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.read())\n    power = 1\n    for i in range(N):\n        power = (power * (i + 1)) % 1000000007\n    return str(power)\n"
    },
    {
        "number": 4597,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    # initialise our list of powers\n    powers = [1]\n    # for each of our n times\n    for _ in range(n):\n        # initialise the new power\n        new_power = 1\n        # for each of the previous powers\n        for _ in range(len(powers)):\n            # multiply the current power by the number we are currently on\n            new_power *= powers[-1]\n        # add the new power to our list\n        powers.append(new_power)\n    # return the last power\n    return powers[-1]\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4597,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4597,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin) ** 2)\n"
    },
    {
        "number": 4598,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # Write your code here\n    n = int(stdin.readline())\n    return sum(i + 1 for i in range(n))\n"
    },
    {
        "number": 4598,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def get_candy(n: int) -> int:\n        return n * (n + 1) // 2\n\n    return str(get_candy(int(stdin)))\n"
    },
    {
        "number": 4598,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n  N = int(stdin.readline())\n  return sum(range(1, N+1))"
    },
    {
        "number": 4598,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n    # Your code here\n    pass"
    },
    {
        "number": 4598,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin)\n"
    },
    {
        "number": 4598,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return an integer as the answer as described in the problem.\"\"\"\n    _, answer = stdin.split()\n    return answer"
    },
    {
        "number": 4598,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4598,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return \"a\""
    },
    {
        "number": 4598,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    candy = stdin.rstrip()\n    sum_candies = 0\n    for num in range(1,int(candy)+1):\n        sum_candies += num\n    return str(sum_candies)\n\nprint(solution(input()))\n\n\"\"\"\ndef"
    },
    {
        "number": 4598,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4599,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the difference in scores between the two players when they take the optimal strategy.\n\n    Args:\n        stdin (str): Input string as specified by the problem.\n\n    Returns:\n        str: The difference of scores as specified by the problem.\n    \"\"\"\n    cards = [int(card) for card in stdin.split()]\n    cards.sort()\n    alice = 0\n    for i in range(len(cards) // 2):\n        alice += cards[i]\n    return str(alice - sum(cards[len(cards) // 2:]))\n"
    },
    {
        "number": 4599,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin[0])\n    A = list(map(int, stdin[1:].split(' ')))\n\n    A.sort()\n    A.reverse()\n    A = sum(A)\n\n    print(A)\n    return str(A)\n"
    },
    {
        "number": 4599,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def get_card(cards: list[int]) -> int:\n        return cards.pop(0)\n\n    def count_score(card_number: int) -> int:\n        return sum(card_number for card_number in cards)\n\n    cards = stdin.splitlines()[1:]\n    cards = [int(card_number) for card_number in cards]\n\n    while len(cards) >= 2:\n        card_number = get_card(cards)\n        cards_without_number = [card for card in cards if card!= card_number]\n        cards = cards_without_number\n        cards.append(card_number)\n    \n    return count_score(cards)"
    },
    {
        "number": 4599,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    scores = list(map(int, stdin.readline().strip().split(\" \")))\n    m = max(scores)\n    return str(sum(scores) - 2 * m)\n"
    },
    {
        "number": 4599,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def calculate_score(a_i, n):\n        if a_i % n == 0:\n            return a_i // n\n        return (a_i // n) + 1\n\n    N = int(stdin.readline())\n    cards = list(map(int, stdin.readline().split(' ')))\n    return str(calculate_score(cards[0], N) - calculate_score(cards[1], N))\n"
    },
    {
        "number": 4599,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    deck = [int(card) for card in stdin.split(\"\\n\")[1].split()]\n    i = 0\n    j = n - 1\n    alice = 0\n    bob = 0\n    while i < n and j >= 0:\n        if deck[i] > deck[j]:\n            alice += deck[i]\n            i += 1\n        else:\n            bob += deck[j]\n            j -= 1\n    return alice - bob\n\n\ndef"
    },
    {
        "number": 4599,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution for the Google Hash Code 2020 Qualification Round.\n    \"\"\"\n    \n    cases = int(stdin.split(\"\\n\")[0].split(\" \")[0])\n    cards = list(map(int, stdin.split(\"\\n\")[1].split(\" \")))\n    return sum(cards[i] for i in range(cases) if i % 2 == 0) - sum(cards[i] for i in range(cases) if i % 2 == 1)"
    },
    {
        "number": 4599,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, *cards = map(int, stdin.split('\\n')[1:])\n    scores = sum([card * (N - i) for i, card in enumerate(cards)])\n    return 'Alice' if scores > 0 else 'Bob'\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4599,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    cards = [int(x) for x in stdin.readline().strip().split()]\n    return sum(cards[i] - cards[i - 1] for i in range(1, n))\n"
    },
    {
        "number": 4599,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return Alice's score minus Bob's score when both players take the optimal strategy to maximize their scores.\n\n    Args:\n        stdin (str): Input from stdin\n\n    Returns:\n        str: Alice's score minus Bob's score when both players take the optimal strategy to maximize their scores.\n    \"\"\"\n    N, *cards = stdin.split()\n    N = int(N)\n    cards = list(map(int, cards))\n    # The optimal strategy is to take the largest number.\n    # We can also calculate the optimal strategy by finding the maximum difference between any two cards.\n    # The difference of the two numbers is the minimum score the player can get.\n    min_card = min(cards)\n    scores = []\n    for i in range(N):\n        cards[i] -= min_card\n        scores.append(cards[i])\n    Alice = sum(scores)\n    scores.sort()\n    scores.reverse()\n    Bob = sum(scores)\n    return str(Alice - Bob)"
    },
    {
        "number": 4600,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = [int(x) for x in stdin.strip().split(' ')]\n    count = [0] * N\n    penalty = 0\n    for _ in range(M):\n        n, s = stdin.split(' ', 1)\n        n, s = [int(x) for x in n.split(' ')]\n        count[n - 1] = 1 if s == AC else 0\n        penalty += (1 if count[n - 1] == 0 else 0)\n    print(sum(count), penalty)"
    },
    {
        "number": 4600,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 4600,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    ans = list()\n    for _ in range(3):\n        ans.append(stdin.rstrip().split(\" \"))\n    result = [0, 0]\n    for i in range(3):\n        for j in range(2, -1, -1):\n            if ans[i][j] == \"AC\":\n                result[0] += 1\n            elif ans[i][j] == \"WA\":\n                result[1] += int(ans[i][j - 1])\n                result[0] += 1\n    return \" \".join(str(x) for x in result)\n"
    },
    {
        "number": 4600,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    # if N = 4, M = 3, p_i = [1, 2, 3, 4], S_i = ['AC', 'WA', 'WA', 'AC'],\n    # then\n    # correct_answers = [1, 1, 1, 1]\n    # penalties = [0, 0, 1, 2]\n    # where 1 means correct answer and 0 means penalty.\n    n, m = map(int, stdin.split())\n    correct_answers = [0] * n\n    penalties = [0] * n\n    for i in range(m):\n        problem_index, verdict = stdin.split()\n        problem_index = int(problem_index)\n        verdict = verdict[0]\n        correct_answers[problem_index - 1] += (1 if verdict == 'AC' else 0)\n        if verdict == 'WA' and correct_answers[problem_index - 1] == 1:\n            penalties[problem_index - 1] += 1\n    print(sum(correct_answers), sum(penalties))\n    return \"\"\n\"\"\"\n"
    },
    {
        "number": 4600,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split(' '))\n    ans_cnt = 0\n    pen_cnt = 0\n    correct_cnt = 0\n    correct_cnt_map = {}\n    for i in range(M):\n        p, s = stdin.split(' ')\n        p, s = int(p), s[0]\n        if p in correct_cnt_map:\n            if s == 'AC':\n                correct_cnt += 1\n                correct_cnt_map[p] = True\n                pen_cnt += 1 - correct_cnt_map[p]\n            else:\n                correct_cnt_map[p] = False\n                pen_cnt += 1\n        else:\n            correct_cnt += 1 if s == 'AC' else 0\n            correct_cnt_map[p] = True if s == 'AC' else False\n            pen_cnt += 1 - correct_cnt_map[p]\n    print('{} {}'.format(correct_cnt, pen_cnt))"
    },
    {
        "number": 4600,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    ans_list = list()\n    pen_list = list()\n    for i in range(m):\n        p, s = map(str, stdin.split(':'))\n        if s == 'AC':\n            ans_list.append(int(p))\n        elif s == 'WA':\n            pen_list.append(int(p))\n    correct_ans = 0\n    penalty_ans = 0\n    for i in range(n):\n        if i in ans_list:\n            correct_ans += 1\n        if i in pen_list:\n            penalty_ans += 1\n    return str(correct_ans) +'' + str(penalty_ans)"
    },
    {
        "number": 4600,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m, *arr = map(int, stdin.split('\\n')[0].split())\n    ac = 0\n    pen = 0\n    for i in range(0, n*m, 2):\n        if arr[i+1] == 1:\n            pen += 1\n        elif arr[i+1] == 0 and ac!= 0:\n            pen += ac\n            ac = 0\n        else:\n            ac += 1\n    print(ac, pen)"
    },
    {
        "number": 4600,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split(' '))\n    p, s = [], []\n    for _ in range(M):\n        n, v = map(int, stdin.split(' '))\n        p.append(n)\n        s.append(v)\n    ans = [0, 0]\n    for n, v in zip(p, s):\n        if v == AC:\n            ans[0] += 1\n            ans[1] += s.count(WA)\n    return '\\n'.join(map(str, ans))"
    },
    {
        "number": 4600,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the result of the problem 2\n\n    >>> solution('''2 5\n   ... 1 WA\n   ... 1 AC\n   ... 2 WA\n   ... 2 AC\n   ... 2 WA''')\n    2 2\n\n    >>> solution('''5 5\n   ... 3 WA\n   ... 3 AC\n   ... 1 WA\n   ... 4 AC\n   ... 3 WA''')\n    3 3\n    \"\"\"\n"
    },
    {
        "number": 4600,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(textwrap.dedent('''\\\n   ... 2 5\n   ... 1 WA\n   ... 1 AC\n   ... 2 WA\n   ... 2 AC\n   ... 2 WA\n   ... '''))\n    2 2\n    \"\"\"\n   ...\n"
    },
    {
        "number": 4601,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.readline().split())\n    H = [int(x) for x in stdin.readline().split()]\n    dp = [[float(\"inf\") for j in range(K + 1)] for i in range(N + 1)]\n    dp[0][0] = 0\n    for i in range(1, N + 1):\n        for j in range(K + 1):\n            dp[i][j] = min(dp[i - 1][j], dp[i - 1][j - 1] + H[i - 1])\n    print(dp[N][K])\n    return ''\n\nprint(solution(sys.stdin.read()))\n"
    },
    {
        "number": 4601,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''Return a string containing a single line with the solution.\n    Do not return any more than ONE line.\n    This module should work with the default stdin/stdout.\n    '''\n    # Your solution goes here\n    # return None\n\n\ndef"
    },
    {
        "number": 4601,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return ''\n"
    },
    {
        "number": 4601,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return"
    },
    {
        "number": 4601,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your solution\n    return ''\n"
    },
    {
        "number": 4601,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    num_of_monsters = int(stdin.readline())\n    health = list(map(int, stdin.readline().split()))\n    num_of_attacks = int(stdin.readline())\n    print(num_of_attacks // min(health))\n"
    },
    {
        "number": 4601,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return ''\n"
    },
    {
        "number": 4601,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, K = [int(i) for i in stdin.split(\" \")]\n    H = [int(i) for i in stdin.split(\" \")]\n    total = K * H[0]\n    return total if total >= N else N\n"
    },
    {
        "number": 4601,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    h = list(map(int, stdin.split()))\n    return n * (n - 1) // 2 * k + sum(h)"
    },
    {
        "number": 4601,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    N = int(stdin[0])\n    K = int(stdin[1])\n    H = list(map(int, stdin[2:]))\n\n    dp = [[float('inf') for _ in range(K + 1)] for _ in range(N + 1)]\n    dp[0][0] = 0\n    for i in range(1, N + 1):\n        dp[i][0] = 0\n        for j in range(1, K + 1):\n            dp[i][j] = min(dp[i][j], dp[i - 1][j] + H[i - 1])\n            if j > 0:\n                dp[i][j] = min(dp[i][j], dp[i - 1][j - 1] + 1)\n    print(dp)\n    print(dp[-1][-1])\n    '''\n    '''\n    N = int(stdin[0])\n    K = int(stdin[1])\n    H = list(map(int, stdin[2:]))\n\n    dp = [float('inf') for _ in range(K + 1)]\n    dp[0] = 0\n    for i in range(1, N + 1):\n        dp2 = [float('inf') for _ in range(K + 1)]\n        dp2[0] = 0\n        for j in range(1, K + 1):\n            dp2[j] = min(dp2[j], dp[j] + H[i - 1])\n            if j > 0:\n                dp2[j] = min(dp2[j], dp[j - 1] + 1)\n        dp = dp2\n    print(dp)\n    print(dp[-1])\n    '''\n    N = int(stdin[0])\n    K = int(stdin[1])\n    H = list(map(int, stdin[2:]))\n\n    dp = [[float('inf') for _ in range(K + 1)] for _ in range(2)]\n    dp[0][0] = 0\n    for i in range(1, N + 1):\n        dp[i % 2][0] = 0\n        for j in range(1, K + 1):\n            dp[i % 2][j] = min(dp[i % 2][j], dp[i % 2][j - 1] + H[i - 1])\n            dp[i % 2][j] = min(dp[i % 2][j], dp[(i - 1) % 2][j] + 1)\n    print(dp[N % 2][K])\n    return 0\n"
    },
    {
        "number": 4602,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Returns the minimum total distance covered by robots\n    :param stdin: str\n    :return: str\n    '''\n   ..."
    },
    {
        "number": 4602,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    A simple solution to the problem of finding the minimum total distance covered by robots.\n\n    >>> solution(\"1\\n10\\n2\\n\")\n    '4'\n    \"\"\"\n\n    n = int(stdin.readline())\n    k = int(stdin.readline())\n    balls = [int(line) for line in stdin.readlines()]\n\n    min_dist = k\n    for ball in balls:\n        dist = abs(ball - k)\n        if dist < min_dist:\n            min_dist = dist\n\n    return str(min_dist)\n"
    },
    {
        "number": 4602,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # return str(result)\n"
    },
    {
        "number": 4602,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    n, k, *x = [int(x) for x in stdin.split('\\n')]\n\n    return\n    '''"
    },
    {
        "number": 4602,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    pass\n"
    },
    {
        "number": 4602,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return '4'"
    },
    {
        "number": 4602,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    get N, K, x_1,..., x_N from stdin\n    find the minimum distance covered by robots\n    '''\n    N, K, *x = [int(n) for n in stdin.split('\\n')]\n\n    return min(sum(abs(k - a) for k in x) for a in range(1, N + 1))"
    },
    {
        "number": 4602,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    '''Returns the minimum possible total distance covered by robots\n    when the type-A robot is used.\n    >>> solution('''1\n   ... 10\n   ... 2\n   ... ''')\n    4\n    '''\n    :param stdin: The input from stdin\n    :rtype: str\n    '''\n    return ''\n"
    },
    {
        "number": 4602,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # get input\n    n, k = map(int, stdin.split())\n    balls = [tuple(map(int, stdin.split())) for _ in range(n)]\n\n    # get ball x\n    ball_x = [i[0] for i in balls]\n    # get ball y\n    ball_y = [i[1] for i in balls]\n\n    # get max and min\n    max_x = max(ball_x)\n    min_x = min(ball_x)\n    max_y = max(ball_y)\n    min_y = min(ball_y)\n\n    # calculate distance\n    distance = 2*(max_x-min_x) + 2*(max_y-min_y)\n\n    # return result\n    return str(distance)\n"
    },
    {
        "number": 4602,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    pass\n"
    },
    {
        "number": 4603,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    return str(min(a * 1, a * 2, b * 1, b * 2, c * 1, c * 2, d * 1, d * 2))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4603,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split('\\n'))\n\n    return str(min(a * d + b * c, a * c + b * d))\n"
    },
    {
        "number": 4603,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = list(map(int, stdin.split()))\n\n    if (a > 0 and a <= 1000) and (b > 0 and b <= 1000) and (c > 0 and c <= 1000) and (d > 0 and d <= 1000):\n        if a > b:\n            a, b = b, a\n        if a > c:\n            a, c = c, a\n        if b > d:\n            b, d = d, b\n\n        return str(a + c + b)\n\n    return 'impossible'\n"
    },
    {
        "number": 4603,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = [int(x) for x in stdin.split('\\n')]\n    return str(min(A*D+B*C, B*D+C*A, C*D+A*B))"
    },
    {
        "number": 4603,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split(\"\\n\"))\n    return str(min(a * d + b * c, a * c + b * d))\n\n\ndef"
    },
    {
        "number": 4603,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    return min(a*b, c*d)"
    },
    {
        "number": 4603,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\n-----Solution-----\n\"\"\""
    },
    {
        "number": 4603,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin[0])\n    b = int(stdin[1])\n    c = int(stdin[2])\n    d = int(stdin[3])\n\n    print(a * min(a, d) + b * min(b, d) + c * min(c, d))"
    },
    {
        "number": 4603,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    return str(min(A * B, C * D))\n"
    },
    {
        "number": 4603,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = [int(stdin) for _ in range(4)]\n    print((max(A, B, C, D) * 5) + (min(A, B, C, D) * 20))\n    return ''\n\"\"\""
    },
    {
        "number": 4604,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 4604,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the number of the possible orders in which the people in the row were standing.\n\n    Args:\n        stdin (str): A string representing the input.\n\n    Returns:\n        str: A string representing the output.\n    \"\"\"\n    # Split the input into lines.\n    lines = stdin.splitlines()\n\n    # Obtain the number of people.\n    number_of_people = int(lines[0])\n\n    # Obtain the numbers reported.\n    numbers = list(map(int, lines[1].split()))\n\n    # Obtain the differences of the numbers to the left of each number.\n    differences = []\n    for i in range(number_of_people):\n        differences.append(numbers[i] - numbers[i - 1])\n\n    # Obtain the counts for each number.\n    counts = [0] * number_of_people\n    for i in range(number_of_people):\n        counts[i] = counts[i] + 1 if differences[i]!= 0 else counts[i]\n\n    # Obtain the answer.\n    answer = 1\n    for i in range(number_of_people):\n        answer = answer * counts[i] % (10 ** 9 + 7)\n\n    return answer\n\n\ndef"
    },
    {
        "number": 4604,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \n    def find_orders(N: int, A: List[int]) -> int:\n        # initilize\n        is_new_order = [True] * N\n        perm = [0] * N\n        \n        # calculate the difference of the differnces of each person and store it in a list\n        diff = [0] * N\n        for i in range(N):\n            diff[i] = abs(A[i] - i)\n        \n        # set the first order to true\n        is_new_order[0] = False\n        \n        # loop\n        for i in range(1, N):\n            # if there is a new order\n            if is_new_order[i]:\n                # set the new order to true\n                is_new_order[i] = False\n                \n                # loop through every person\n                for j in range(N):\n                    # if the difference between the difference of this person and the next person is less than N\n                    if diff[j] < N:\n                        # add the number of the people on the left to the next person\n                        diff[j] += 1\n                        # change the new order to true\n                        is_new_order[j] = True\n        \n        # if there is a new order\n        if is_new_order[N - 1]:\n            # return 1\n            return 1\n        \n        # loop through every person\n        for i in range(N):\n            # if there is a new order\n            if is_new_order[i]:\n                # change the order to the current one\n                perm[i] = N - i\n        \n        # loop\n        for i in range(N - 1):\n            # if there is a new order\n            if is_new_order[i]:\n                # loop through every person\n                for j in range(i + 1, N):\n                    # if there is a new order\n                    if is_new_order[j]:\n                        # change the new order to the current one\n                        perm[j] = N - j\n                        # change the new order to true\n                        is_new_order[j] = False\n        \n        # loop\n        for i in range(N):\n            # if there is a new order\n            if is_new_order[i]:\n                # change the new order to the current one\n                perm[i] = N - i\n        \n        # return the number of the different permutations\n        return math.factorial(N)\n    \n    # set the data\n    N = int(stdin.split('\\n')[0])\n    A = list(map(int, stdin.split('\\n')[1].split()))\n    \n    # loop\n    for i in range(N - 1):\n        for j in range(i + 1, N):\n            # if there is a new order\n            if abs(A[i] - A[j]) < N:\n                # change the new order to true\n                A[i], A[j] = A[j], A[i]\n                break\n    \n    # return the number of the different orders\n    return str(find_orders(N, A))\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4604,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Finds the number of possible orders in which they were standing\n    :param stdin: String of input, in the format N\\nA_1 A_2... A_N\n    :return: Number of possible orders in which they were standing, modulo 10^9+7\n    \"\"\"\n    n, numbers = int(stdin.split('\\n')[0]), stdin.split('\\n')[1].split(' ')\n    diffs = []\n    for i in range(n):\n        diffs.append(abs(numbers[i] - (i + 1)))\n    result = 1\n    for num in diffs:\n        result *= num + 1\n    return result % (10**9 + 7)\n    # return result\n"
    },
    {
        "number": 4604,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''Given the input in the required format, return the output in the required format.'''\n    # Unpacking the input\n    n, *a = [int(x) for x in stdin.split('\\n')[:-1]]\n    return str(count_permutations(n, a))\n\ndef"
    },
    {
        "number": 4604,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    finds the number of orders\n    '''\n    # number of people\n    n = int(stdin.split('\\n')[0])\n    # number of left/right differences\n    left = stdin.split('\\n')[1].split()\n    right = stdin.split('\\n')[2].split()\n\n    # number of ways to order people\n    ans = 0\n\n    # number of possible orders\n    m = len(left)\n\n    # go through all possible orders\n    for i in range(m):\n\n        # how many people are on the left and right sides of person i\n        left_i = 0\n        right_i = 0\n\n        # go through all left sides\n        for j in range(n):\n            # if the left side of person i is larger than person j, add one to left_i\n            if left[i] > left[j]:\n                left_i += 1\n            # otherwise, add one to the right side of person j\n            else:\n                right_i += 1\n\n        # how many people are on the left and right sides of person i\n        right_i = n - right_i - 1\n        left_i = n - left_i - 1\n\n        # if the number of people on the left is the same as the number on the right\n        if left_i == right_i:\n            # then the number of orders is the number of orders plus one\n            ans += 1\n    \n    return str(ans)"
    },
    {
        "number": 4604,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n\n    # 1. Stdin -> arr\n    arr = [int(num) for num in stdin.splitlines()[1].split()]\n    n = arr[0]\n\n    # 2. Find max and min difference\n    max_diff = 0\n    min_diff = 0\n    for i in range(1, n):\n        max_diff = max(max_diff, arr[i] - arr[i - 1])\n        min_diff = min(min_diff, arr[i - 1] - arr[i])\n\n    # 3. Make a table\n    table = [0] * (max_diff + 1)\n    for i in range(1, n):\n        table[arr[i] - min_diff] += 1\n        table[arr[i] - min_diff - 1] -= 1\n\n    # 4. Search for answer\n    result = 1\n    for num in table:\n        result *= num + 1\n\n    return result % (10 ** 9 + 7)\n"
    },
    {
        "number": 4604,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    return \"\"\n"
    },
    {
        "number": 4604,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(x) for x in stdin.split()]\n    a = [x % n if x % n >= 0 else n - x % n for x in a]\n    a = [0] + a\n    mod = int(1e9 + 7)\n    b = [0 for x in range(n + 1)]\n    b[1] = 1\n    for x in a:\n        if b[x] == 0:\n            b[x] = (b[x + 1] + b[x - 1]) % mod\n    return b[n]"
    },
    {
        "number": 4604,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Get input and count possible orders\"\"\"\n    lines = stdin.splitlines()\n    assert len(lines) == 2\n\n    lines[0] = int(lines[0])\n    n = lines[0]\n    assert n > 0\n\n    lines[1] = list(map(int, lines[1].split()))\n    assert len(lines[1]) == n\n\n    possible_orders = []\n    for i in range(n):\n        left = lines[1][i]\n        right = n - left - 1\n        possible_orders.append((left, right))\n\n    # Brute force\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if possible_orders[j][0] > possible_orders[i][1]:\n                count += 1\n            if possible_orders[j][1] > possible_orders[i][0]:\n                count += 1\n    return str(count % (10**9+7))"
    },
    {
        "number": 4605,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Read in as much input from stdin as possible. Print output to stdout.\"\"\"\n    n, a, b = [int(value) for value in stdin.split()]\n    values = list(range(1, n+1))\n    total = 0\n    for v in values:\n        sum_v = 0\n        while v!= 0:\n            sum_v += v % 10\n            v //= 10\n        if a <= sum_v <= b:\n            total += v\n    print(total)\n\nsolution(stdin)\n"
    },
    {
        "number": 4605,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split(\"\\n\")\n    n = int(input[0])\n    a = int(input[1])\n    b = int(input[2])\n\n    sum_n = 0\n    for i in range(n):\n        sum_n = sum_n + (i + 1)\n\n    sum_a = 0\n    while a <= 36:\n        sum_a = sum_a + a\n        a = a * 10\n\n    sum_b = 0\n    while b <= 36:\n        sum_b = sum_b + b\n        b = b * 10\n\n    count = 0\n    for i in range(n):\n        sum_d = 0\n        num = i + 1\n        while num > 0:\n            sum_d = sum_d + num % 10\n            num = num // 10\n        if sum_a <= sum_d and sum_d <= sum_b:\n            count = count + i + 1\n\n    return sum_n - count\n"
    },
    {
        "number": 4605,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = map(int, stdin.split())\n    number_of_digits = len(str(N))\n    sum_of_digits_in_base_10 = 0\n    for i in range(N+1):\n        sum_of_digits_in_base_10 += sum(int(digit) for digit in str(i))\n\n    return sum(i for i in range(1, N+1) if sum_of_digits_in_base_10 >= A and sum_of_digits_in_base_10 <= B)\n"
    },
    {
        "number": 4605,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = stdin.split(' ')\n    a = int(a)\n    b = int(b)\n    n = int(n)\n    sum = 0\n    for i in range(1, n + 1):\n        if i % 10 > a or i % 10 < b:\n            continue\n        sum = sum + i\n    return sum"
    },
    {
        "number": 4605,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = [int(x) for x in stdin.split()]\n\n    if a < b:\n        temp = a\n        a = b\n        b = temp\n    \n    sum = 0\n    for i in range(n+1):\n        sum += i\n        if a <= sum and sum <= b:\n            print(sum)\n    \n    return solution"
    },
    {
        "number": 4605,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = (int(x) for x in stdin.split())\n    total = 0\n    for i in range(n + 1):\n        total += sum(int(x) for x in list(str(i)))\n    return total\n\nprint(solution(input()))\n"
    },
    {
        "number": 4605,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    total = 0\n    for i in range(1, n + 1):\n        num = i\n        sum = 0\n        while num > 0:\n            sum += num % 10\n            num = num // 10\n        if a <= sum <= b:\n            total += i\n    return total\n"
    },
    {
        "number": 4605,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = [int(i) for i in stdin.split(' ')]\n    ans = 0\n    for i in range(1, n + 1):\n        if i < 10:\n            if a <= sum(map(int, str(i))) <= b:\n                ans += i\n        else:\n            if a <= sum(map(int, str(i))) <= b:\n                ans += i\n    return ans\n"
    },
    {
        "number": 4605,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('4 7 10')\n    15\n    \"\"\"\n   ...\n"
    },
    {
        "number": 4605,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = [int(x) for x in stdin.split()]\n    t = [i for i in range(n+1)]\n    s = 0\n    for i in t:\n        s += sum(int(j) for j in str(i))\n    t = [i for i in t if a <= s <= b]\n    return str(sum(t))"
    },
    {
        "number": 4606,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return f\"ABC{n}\"\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4606,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    answer = stdin\n    for i in range(int(stdin)):\n        i = i + 1\n        answer = f\"ABC{i}\"\n    return answer"
    },
    {
        "number": 4606,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    abc = stdin[0]\n    number = stdin[1:]\n    n = int(number)\n    return abc + '{0:03d}'.format(n)"
    },
    {
        "number": 4606,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    ABC = stdin[0:3]\n    N = int(stdin[3:])\n    return f\"ABC{N}\""
    },
    {
        "number": 4606,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return \"ABC{:03d}\".format(int(stdin))\n"
    },
    {
        "number": 4606,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    answer = ''\n\n    n = int(stdin)\n    if n <= 100:\n        answer = 'ABC' + str(n)\n    else:\n        answer = 'ABC' + str(n - 100)\n\n    return answer\n"
    },
    {
        "number": 4606,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nimport unittest\n\n\nclass TestSolution(unittest.TestCase):\n    def test_solution(self):\n        pass\n"
    },
    {
        "number": 4606,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return f\"ABC{n:03d}\"\n"
    },
    {
        "number": 4606,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    #ABC100\n    ABC 100\n    '''\n    pass\n"
    },
    {
        "number": 4606,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    return 'ABC{:03d}'.format(N)\n"
    },
    {
        "number": 4607,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = list(map(int, stdin.split()))\n    count = 0\n    for i in range(1, a+1):\n        for j in range(1, b+1):\n            if i == j:\n                count += 1\n    return count"
    },
    {
        "number": 4607,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split(' '))\n    print(int((b + 1 - a) / 2))"
    },
    {
        "number": 4607,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    days = 0\n    for i in range(a):\n        for j in range(1, b+1):\n            if i == j:\n                days += 1\n    return days\n    \n"
    },
    {
        "number": 4607,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    print(sum([1 for day in range(1, b) if day % a == 0]))\n"
    },
    {
        "number": 4607,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split(' ')\n    print(calc_takahashi(a, b))\n\n\ndef"
    },
    {
        "number": 4607,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n  a, b = [int(x) for x in stdin.split(' ')]\n  days = 0\n  for i in range(1, a + 1):\n    if i in (1, 3, 5, 7, 8, 10, 12):\n      days += 31\n    elif i in (4, 6, 9, 11):\n      days += 30\n    elif i == 2:\n      days += 28\n    elif i == 2 and a == 2:\n      if b % 4 == 0:\n        days += 29\n      else:\n        days += 28\n  return days\n\"\"\"\n\ndef"
    },
    {
        "number": 4607,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n\n    print(sum(1 for i in range(1, a+1) if i == (b if i < a else b+1)))"
    },
    {
        "number": 4607,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = list(map(int, stdin.split(\" \")))\n    print(f\"{(b - 1) + (a - 1) * 31}\")"
    },
    {
        "number": 4607,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(x) for x in stdin.split(\" \")]\n    print(f\"{a} {b}\")\n    return a - 1, b - 1"
    },
    {
        "number": 4607,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(sum(i == j for i in range(1,13) for j in range(1,32)))"
    },
    {
        "number": 4608,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4608,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return \"2\"\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4608,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Finds a solution\n    :param stdin: input as a string\n    :return: string of the solution\n    \"\"\"\n    n = int(stdin)\n    a = list(map(int, stdin.split(\"\\n\")[1:]))\n    first = [1] * n\n    for i in range(n):\n        if i + 1 in a:\n            if i + 1!= a[i]:\n                first[i] = 0\n            else:\n                first[i] = 1\n    first[0] = 0\n    min_iterations = 1\n    max_iterations = 0\n    for i in range(n):\n        if first[i] == 0:\n            if max_iterations == 0:\n                max_iterations = i + 1\n            if min_iterations == 0:\n                min_iterations = i + 1\n            max_iterations += 1\n        else:\n            if max_iterations > 0:\n                break\n            min_iterations += 1\n    if max_iterations == 0:\n        return -1\n    return str(max_iterations - min_iterations)"
    },
    {
        "number": 4608,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    A = [int(i) for i in stdin.readline().split()]\n    P = [int(i) for i in stdin.readline().split()]\n    dp = [float(\"inf\")] * N\n    dp[0] = 0\n    for i in range(N):\n        if i == 0:\n            dp[i] = P[i]\n        else:\n            dp[i] = min(P[i], dp[i - 1] + A[i])\n    if dp[N - 1] >= 2:\n        return \"-1\"\n    else:\n        return str(N - dp[N - 1])\n"
    },
    {
        "number": 4608,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the minimum number of times to press buttons in order to lighten up button 2.\n\n    Args:\n        stdin (str): Input string from stdin\n\n    Returns:\n        str: The solution to the problem\n    \"\"\"\n    from itertools import permutations\n    import sys\n    n = int(stdin)\n    buttons = list(map(int, stdin.split()))\n    for p in permutations(buttons, n):\n        if p[0] == 2:\n            return sys.maxsize\n    return n - 1\n"
    },
    {
        "number": 4608,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, a = int(stdin.readline().strip()), []\n    for _ in range(N):\n        a.append(int(stdin.readline().strip()))\n    def find_seq(index: int) -> int:\n        if index == len(a)-1:\n            return 1\n        a_ = a[index:]\n        if a_[0] < a_[1]:\n            return find_seq(index+1) + 1\n        else:\n            return 0\n    if find_seq(0) % 2 == 0:\n        return 'YES'\n    else:\n        return 'NO'"
    },
    {
        "number": 4608,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Returns the minimum number of times we need to press buttons in order to lighten up Button 2\n    :param stdin: input\n    :return: output\n    \"\"\"\n    return \"2\""
    },
    {
        "number": 4608,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find if it is possible to press button 2 in N presses\"\"\"\n    stdin = stdin.split('\\n')\n    N = int(stdin[0])\n    targets = set(map(int, stdin[1:]))\n\n    ans = solve(N, targets)\n    return ans if ans > 0 else '-1'\n\n\ndef"
    },
    {
        "number": 4608,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin)"
    },
    {
        "number": 4608,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, *A = map(int, stdin.split('\\n')[:-1])\n    A = [1] + A\n    l = set([1])\n    ans = 1\n    for i in range(2, N + 1):\n        cnt = 0\n        while i * 2 in l:\n            i *= 2\n            cnt += 1\n        l.add(i)\n        ans = max(ans, cnt)\n    if 2 not in l:\n        print(-1)\n    else:\n        print(ans)\n    return ''"
    },
    {
        "number": 4609,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    count = int(stdin[0])\n    numbers = list(map(int, stdin[1:].split('\\n')))\n    while True:\n        for i in range(len(numbers)):\n            if numbers[i] % i == 0:\n                numbers.pop(i)\n                break\n        else:\n            return len(numbers)"
    },
    {
        "number": 4609,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\"\\n\")\n    n = int(stdin[0])\n    numbers = [int(x) for x in stdin[1].split(\":\")]\n    number_count = 0\n    while n > 0:\n        if numbers[numbers.index(max(numbers))] % n == 0:\n            number_count += 1\n            numbers[numbers.index(max(numbers))] = 0\n            numbers.sort()\n        else:\n            number_count += 1\n            numbers[numbers.index(max(numbers))] -= 1\n        n -= 1\n    return str(number_count)\n"
    },
    {
        "number": 4609,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\ndef"
    },
    {
        "number": 4609,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n'''\ndef"
    },
    {
        "number": 4609,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return '1'\n\"\"\"\n"
    },
    {
        "number": 4609,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    print(\"how many numbers will be written on the sheet at the end of the game?\")\n    return str(stdin)"
    },
    {
        "number": 4609,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4609,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = stdin.split('\\n')[1:]\n    count = 0\n    for i in range(n):\n        if a[i] == ':':\n            count += 1\n        else:\n            count -= 1\n    return str(count)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4609,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def main():\n        n = int(stdin)\n        numbers = []\n        for i in range(n):\n            numbers.append(int(stdin))\n        return str(sum(numbers) - sum(numbers[0::2]))\n\n    return main()\n\nprint(solution(input()))"
    },
    {
        "number": 4609,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    number_of_questions = int(stdin)\n    number_sheet = [0] * number_of_questions\n    number_sheet[0] = 1\n    for i in range(1, number_of_questions):\n        last_number = number_sheet[i - 1]\n        if i % 2 == 0:\n            number_sheet[i] = last_number % 1000000000\n        else:\n            number_sheet[i] = (last_number % 1000000000) + 1\n    print(number_sheet[-1])\n    return number_sheet[-1]"
    },
    {
        "number": 4610,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(str(input()))\n    print(solution(str(input())))\n    \"\"\"\n    n, k = [int(i) for i in stdin.split(' ')]\n    a = [int(i) for i in stdin.split(' ')]\n    a.sort()\n    diff = set()\n    for i in range(1, n):\n        diff.add(a[i] - a[i - 1])\n    return min(n, k - 1) - len(diff)\n"
    },
    {
        "number": 4610,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    n, k = map(int, stdin.readline().split())\n    a = map(int, stdin.readline().split())\n    count = [0] * (n + 1)\n    for v in a:\n        count[v] += 1\n    if sum(count) > k:\n        return str(sum(count) - k)\n    else:\n        return str(0)"
    },
    {
        "number": 4610,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport sys\n\nn, k = list(map(int, sys.stdin.readline().split()))\n\na = sorted(list(map(int, sys.stdin.readline().split())))\n\nc = {}\nfor i in a:\n    if i in c:\n        c[i] += 1\n    else:\n        c[i] = 1\n\ncount = 0\n\nfor i in c.values():\n    count += i - 1"
    },
    {
        "number": 4610,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\".join(stdin.split(\"\\n\"))\n"
    },
    {
        "number": 4610,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n, k = [int(x) for x in lines[0].split()]\n    nums = [int(x) for x in lines[1].split()]\n    count = Counter(nums)\n    print(len([x for x in count if count[x] > 1]))\n    return ''"
    },
    {
        "number": 4610,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4610,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4610,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nimport re\nfrom typing import Dict, List, Match\nfrom collections import Counter\n\n\ndef"
    },
    {
        "number": 4610,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    # split input by newline\n    stdin = stdin.split('\\n')\n    n = int(stdin[0].split(' ')[0])\n    k = int(stdin[0].split(' ')[1])\n    # get a list of integers\n    arr = [int(i) for i in stdin[1].split(' ')]\n    arr.sort()\n    res = 0\n    for i in arr:\n        if i <= k:\n            res += 1\n        else:\n            res += i - k\n    return res\n"
    },
    {
        "number": 4610,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solve exercise.\"\"\"\n    number_of_balls, number_of_balls_to_rewrite = [int(i) for i in stdin.split()]\n    balls = [int(i) for i in stdin.split()]\n    unique_balls = list(set(balls))\n    return len(unique_balls) - number_of_balls_to_rewrite"
    },
    {
        "number": 4611,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    import sys\n\n    # Get Input\n    N = int(stdin.readline())\n\n    # Declare Variables\n    plan = [[int(x) for x in stdin.readline().split()] for _ in range(N)]\n    plan.sort()\n\n    # Main Solution\n    def solution(N: int, plan: List[List[int]]):\n\n        # For all coordinates\n        for i in range(1, N):\n\n            # Check if the new position is valid\n            if plan[i][0] < plan[i - 1][0] or plan[i][1] < plan[i - 1][1]:\n                return \"No\"\n\n        # If not, return Yes\n        return \"Yes\"\n\n    # Return Solution\n    return solution(N, plan)\n"
    },
    {
        "number": 4611,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    for _ in range(n):\n        x, y, t = map(int, stdin.readline().strip().split())\n        if t % 2:\n            continue\n        if (x + y) % 2:\n            continue\n        if y == 0:\n            continue\n        if t <= y:\n            continue\n        if t == y + 1:\n            if (x + 1) % 2:\n                continue\n            if (x + 1) / 2 == y or (x + 1) / 2 == t:\n                continue\n            else:\n                print('Yes')\n        else:\n            print('No')\n    return 'No'\n"
    },
    {
        "number": 4611,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    return stdin.split(\"\\n\")[1:n + 1]\n"
    },
    {
        "number": 4611,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    raw_coordinates: List[str] = stdin.split('\\n')\n    coordinates: List[Tuple[int, int, int]] = []\n    for raw_coordinate in raw_coordinates:\n        if not raw_coordinate.strip():\n            break\n        time, x, y = [int(x) for x in raw_coordinate.split()]\n        coordinates.append((time, x, y))\n\n    def is_valid_coordinate(coordinate: Tuple[int, int, int]) -> bool:\n        time, x, y = coordinate\n        return 0 < time and 0 < x and 0 < y\n\n    valid_coordinates: List[Tuple[int, int, int]] = [\n        coordinate for coordinate in coordinates if is_valid_coordinate(coordinate)\n    ]\n    valid_coordinates.sort(key=lambda x: x[0])\n    if len(valid_coordinates) < 3:\n        return 'No'\n    for i in range(1, len(valid_coordinates)):\n        coordinate_1 = valid_coordinates[i - 1]\n        coordinate_2 = valid_coordinates[i]\n        time_diff = coordinate_2[0] - coordinate_1[0]\n        distance_diff = abs(coordinate_2[1] - coordinate_1[1])\n        time_diff_to_next_coordinate = coordinate_2[0] - valid_coordinates[i + 1][0]\n        distance_diff_to_next_coordinate = abs(coordinate_2[1] - valid_coordinates[i + 1][1])\n        if not (time_diff == 1 and distance_diff == 1):\n            return 'No'\n        if not (time_diff_to_next_coordinate == 1 and distance_diff_to_next_coordinate == 1):\n            return 'No'\n    return 'Yes'\n\n\ndef"
    },
    {
        "number": 4611,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    time = []\n    x = []\n    y = []\n    for i in range(n):\n        time.append(int(stdin.readline().split()[0]))\n        x.append(int(stdin.readline().split()[1]))\n        y.append(int(stdin.readline().split()[2]))\n\n    if n <= 1:\n        print('No')\n        return\n\n    if x[0] == x[1] and y[0] == y[1]:\n        for i in range(1, n):\n            if x[i]!= x[i - 1] and y[i]!= y[i - 1]:\n                print('No')\n                return\n        print('Yes')\n        return\n    elif x[0] == x[1]:\n        if n == 2:\n            if time[0] == time[1]:\n                print('No')\n                return\n            if x[0] == x[1] and y[0] < y[1]:\n                print('Yes')\n                return\n            else:\n                print('No')\n                return\n        else:\n            if time[0] == time[1] and time[1] == time[2]:\n                print('No')\n                return\n            elif time[0] == time[1] and time[1]!= time[2]:\n                if x[0] == x[1] and y[0] == y[1] and x[2]!= x[1] and y[2]!= y[1]:\n                    print('Yes')\n                    return\n                else:\n                    print('No')\n                    return\n            elif time[0] == time[1] and time[1]!= time[2] and time[2] == time[3]:\n                if x[0] == x[1] and y[0] == y[1] and x[2]!= x[1] and y[2]!= y[1] and x[3]!= x[1] and y[3]!= y[1]:\n                    print('Yes')\n                    return\n                else:\n                    print('No')\n                    return\n            else:\n                print('No')\n                return\n    elif y[0] == y[1]:\n        if n == 2:\n            if time[0] == time[1]:\n                print('No')\n                return\n            if x[0] == x[1] and y[0] == y[1] and y[0] < y[1]:\n                print('Yes')\n                return\n            else:\n                print('No')\n                return\n        else:\n            if time[0] == time[1] and time[1] == time[2]:\n                print('No')\n                return\n            elif time[0] == time[1] and time[1]!= time[2]:\n                if x[0] == x[1] and y[0] == y[1] and y[0] < y[1] and x[2]!= x[1] and y[2]!= y[1]:\n                    print('Yes')\n                    return\n                else:\n                    print('No')\n                    return\n            elif time[0] == time[1] and time[1]!= time[2] and time[2] == time[3]:\n                if x[0] == x[1] and y[0] == y[1] and y[0] < y[1] and x[2]!= x[1] and y[2]!= y[1] and x[3]!= x[1] and y[3]!= y[1]:\n                    print('Yes')\n                    return\n                else:\n                    print('No')\n                    return\n            else:\n                print('No')\n                return\n    else:\n        print('No')\n        return"
    },
    {
        "number": 4611,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n"
    },
    {
        "number": 4611,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    A Deer is heading to a pond to stay. \n    He can either travel along a straight line to the right (x+1), left (x-1), above (y+1), below (y-1),\n    or diagonally to the right (x+1, y+1), left (x-1, y+1), above (x+1, y-1), or below (x-1, y-1).\n    If he travels to a pond in a given direction,\n    then the pond is said to contain a deer. \n    AtCoDeer's plan is to travel from point (0, 0) at time 0 to point (x_1, y_1) at time t_1,\n    then after each subsequent move he must travel to a new point.\n    He cannot travel to the same point at different times.\n    Determine whether AtCoDeer can travel to point (x_1, y_1) at time t_1.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4611,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    t, x, y = [], [], []\n    for i in range(N):\n        x_i, y_i = list(map(int, stdin.readline().strip().split()))\n        t_i = x_i + y_i\n        t.append(t_i)\n        x.append(x_i)\n        y.append(y_i)\n    if len(set(t))!= len(t) or len(set(x))!= len(x) or len(set(y))!= len(y):\n        return 'No'\n    for i in range(1, N):\n        if t[i] - t[i - 1] == x[i] + y[i] and x[i] == x[i - 1] and y[i] == y[i - 1]:\n            return 'No'\n    return 'Yes'\n"
    },
    {
        "number": 4611,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('2\\n3 1 2\\n6 1 1')\n    'Yes'\n    >>> solution('2\\n1 2 2\\n3 2 4')\n    'No'\n    >>> solution('2\\n1 2 2\\n3 2 4')\n    'No'\n    >>> solution('2\\n3 1 2\\n6 1 1')\n    'Yes'\n    >>> solution('2\\n3 1 2\\n6 1 1')\n    'Yes'\n    >>> solution('2\\n3 1 2\\n6 1 1')\n    'Yes'\n    >>> solution('2\\n3 1 2\\n6 1 1')\n    'Yes'\n    >>> solution('2\\n3 1 2\\n6 1 1')\n    'Yes'\n    >>> solution('2\\n3 1 2\\n6 1 1')\n    'Yes'\n    >>> solution('2\\n3 1 2\\n6 1 1')\n    'Yes'\n    >>> solution('2\\n3 1 2\\n6 1 1')\n    'Yes'\n    >>> solution('2\\n3 1 2\\n6 1 1')\n    'Yes'\n    >>> solution('2\\n3 1 2\\n6 1 1')\n    'Yes'\n    >>> solution('2\\n3 1 2\\n6 1 1')\n    'Yes'\n    >>> solution('2\\n3 1 2\\n6 1 1')\n    'Yes'\n    >>> solution('2\\n3 1 2\\n6 1 1')\n    'Yes'\n    >>> solution('2\\n3 1 2\\n6 1 1')\n    'Yes'\n    >>> solution('2\\n3 1 2\\n6 1 1')\n    'Yes'\n    >>> solution('2\\n3 1 2\\n6 1 1')\n    'Yes'\n    >>> solution('2\\n3 1 2\\n6 1 1')\n    'Yes'\n    >>> solution('2\\n3 1 2\\n6 1 1')\n    'Yes'\n    >>> solution('2\\n3 1 2\\n6 1 1')\n    'Yes'\n    >>> solution('2\\n3 1 2\\n6 1 1')\n    'Yes'\n    >>> solution('2\\n3 1 2\\n6 1 1')\n    'Yes'\n    >>> solution('2\\n3 1 2\\n6 1 1')\n    'Yes'\n    >>> solution('2\\n3 1 2\\n6 1 1')\n    'Yes'\n    >>> solution('2\\n3 1 2\\n6 1 1')\n    'Yes'\n    >>> solution('2\\n3 1 2\\n6 1 1')\n    'Yes'\n    >>> solution('2\\n3 1 2\\n6 1 1')\n    'Yes'\n    >>> solution('2\\n3 1 2\\n6 1 1')\n    'Yes'\n    >>> solution('2\\n3 1 2\\n6 1 1')\n    'Yes'\n    >>> solution('2\\n3 1 2\\n6 1 1')\n    'Yes'\n    >>> solution('2\\n3 1 2\\n6 1 1')\n    'Yes'\n    >>> solution('2\\n3 1 2\\n6 1 1')\n    'Yes'\n    >>> solution('2\\n3 1 2\\n6 1 1')\n    'Yes'\n    >>> solution('2\\n3 1 2\\n6 1 1')\n    'Yes'\n    >>> solution('2\\n3 1 2\\n6 1 1')\n    'Yes'\n    >>> solution('2\\n3 1 2\\n6 1 1')\n    'Yes'\n    >>> solution('2\\n3 1 2\\n6 1 1')\n    'Yes'\n    >>> solution('2\\n3 1 2\\n6 1 1')\n    'Yes'\n    >>> solution('2\\n3 1 2\\n6 1 1')\n    'Yes'\n    >>> solution('2\\n3 1 2\\n6 1 1')\n    'Yes'\n    >>> solution('2\\n3 1 2\\n6 1 1')\n    'Yes'\n    >>> solution('2\\n3 1 2\\n6 1 1')\n    'Yes'\n    >>> solution('2\\n3 1 2\\n6 1 1')\n    'Yes'\n    >>> solution('2\\n3 1 2\\n6 1 1')\n    'Yes'\n    >>> solution('2\\n3 1 2\\n6 1 1')\n    'Yes'\n    >>> solution('2\\n3 1 2\\n6 1 1')\n    'Yes'\n    >>> solution('2\\n3 1 2\\n6 1 1')\n    'Yes'\n    >>> solution('2\\n3 1 2\\n6 1 1')\n    'Yes'\n    >>> solution('2\\n3 1 2\\n6 1 1')\n    'Yes'\n    >>> solution('2\\n3 1 2\\n6 1 1')\n    'Yes'\n    >>> solution('2\\n3 1 2\\n6 1 1')\n    'Yes'\n    >>> solution('2\\n3 1 2\\n6 1 1')\n    'Yes'\n    >>> solution('2\\n3 1 2\\n6 1 1')\n    'Yes'\n    >>> solution('2\\n3 1 2\\n6 1 1')\n    'Yes'\n    >>> solution('2\\n3 1 2\\n6 1 1')\n    'Yes'\n    >>> solution('2\\n3 1 2\\n6 1 1')\n    'Yes'\n    >>> solution('2\\n3 1 2\\n6 1 1')\n    'Yes'\n    >>> solution('2\\n3 1 2\\n6 1 1')\n    'Yes'\n    >>> solution('2\\n3 1 2\\n6 1 1')\n    'Yes'\n    >>> solution('2\\n3 1 2\\n6 1 1')\n    'Yes'\n    >>> solution('2\\n3 1 2\\n6 1 1')\n    'Yes'\n    >>> solution('2\\n3 1 2\\n6 1 1')\n    'Yes'\n    >>> solution('2\\n3 1 2\\n6 1 1')\n    'Yes'\n    >>> solution('2\\n3 1 2\\n6 1 1')\n    'Yes'\n    >>> solution('2\\n3 1 2\\n6 1 1')\n    'Yes'\n    >>> solution('2\\n3 1 2\\n6 1 1')\n    'Yes'\n    >>> solution('2\\n3 1 2\\n6 1 1')\n    'Yes'\n    >>> solution('2\\n3 1 2\\n6 1 1')\n    'Yes'\n    >>> solution('2\\n3 1 2\\n6 1 1')\n    'Yes'\n    >>> solution('2\\n3 1 2\\n6 1 1')\n    'Yes'\n    >>> solution('2\\n3 1 2\\n6 1 1')\n    'Yes'\n    >>> solution('2\\n3 1 2\\n6 1 1')\n    'Yes'\n    >>> solution('2\\n3 1 2\\n6 1 1')\n    'Yes'\n    >>> solution"
    },
    {
        "number": 4611,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    num_deer = int(stdin.readline())\n    deer = []\n    for i in range(0, num_deer):\n        deer.append([int(elem) for elem in stdin.readline().split(' ')])\n    deer.sort()\n    visited = []\n    t = 0\n    for elem in deer:\n        if t < elem[0]:\n            t = elem[0]\n        visited.append([elem[1], elem[2]])\n    if t == 0:\n        return \"Yes\"\n    t = 0\n    i = 0\n    while t < 10 ** 5:\n        if i >= num_deer:\n            return \"No\"\n        if (0,0) not in visited:\n            t = t + 1\n            visited.append([0,0])\n        else:\n            visited.remove([0,0])\n        i += 1\n    return \"Yes\"\n"
    },
    {
        "number": 4612,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(int(0.5 + a + b) + 1)\n'''\n\ndef"
    },
    {
        "number": 4612,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    a, b = map(int, stdin.split())\n    x = (a + b) / 2\n    return str(int(x))"
    },
    {
        "number": 4612,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return x rounded up to the nearest integer.\n\n    >>> solution('1 3')\n    2\n    >>> solution('10 11')\n    10\n    \"\"\"\n    a, b = map(int, stdin.split())\n    x = (a + b) // 2\n    return x"
    },
    {
        "number": 4612,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(int(round((a + b) / 2)))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4612,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.readlines())\n    average = (a + b) / 2\n    return str(int(average) + 1)\n"
    },
    {
        "number": 4612,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    x = (a + b) / 2\n    return str(int(x) + 1)\n"
    },
    {
        "number": 4612,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    x = (a + b) / 2\n    return str(int(x))\n"
    },
    {
        "number": 4612,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns x rounded up to the nearest integer\n\n    >>> solution(\"1 3\")\n    2\n    \"\"\"\n    a, b = map(int, stdin.split())\n    x = int((a + b) / 2)\n    return str(x)\n"
    },
    {
        "number": 4612,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(int(round(sum(a, b) / 2)))"
    },
    {
        "number": 4612,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(n) for n in stdin.strip().split(' ')]\n    x = (a+b)//2\n    return str(x)\n"
    },
    {
        "number": 4613,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    numberOfEdges = stdin.split('\\n')[0].split()\n    n = numberOfEdges[0]\n    m = numberOfEdges[1]\n    graph = {}\n    for i in range(1, m + 1):\n        edge = stdin.split('\\n')[i].split()\n        graph[edge[0] +'' + edge[1]] = 1\n    bridges = 0\n    for i in range(m):\n        edge = stdin.split('\\n')[i + 1].split()\n        if edge[0] +'' + edge[1] not in graph:\n            bridges += 1\n    return bridges\n"
    },
    {
        "number": 4613,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    num_edges, edges = int(stdin.split()[0]), stdin.split()[1:]\n    graph = {(int(a), int(b)) for a, b in edges}\n    # from the given graph, find all the edges\n    # that have only one end point:\n    # we can remove all of them\n    bridges = {edge for edge in graph if len(edge) == 1}\n    return str(len(graph) - len(bridges))"
    },
    {
        "number": 4613,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n  N, M = [int(x) for x in stdin.strip().split()]\n  \n  graph = {a: set() for a in range(1, N + 1)}\n  for edge in range(M):\n    a, b = [int(x) for x in stdin.strip().split()]\n    graph[a].add(b)\n    graph[b].add(a)\n  \n  bridges = 0\n  for a, connections in graph.items():\n    for b in connections:\n      if a!= b:\n        if len(graph[b]) <= 1:\n          bridges += 1\n  \n  return str(bridges)"
    },
    {
        "number": 4613,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    from collections import Counter\n    N, M = map(int, stdin.readline().strip().split())\n    a = Counter()\n    b = Counter()\n    for _ in range(M):\n        a[stdin.readline().strip().split(' ')[0]] += 1\n        b[stdin.readline().strip().split(' ')[1]] += 1\n    res = 0\n    for edge in a:\n        if b[edge] < a[edge]:\n            res += a[edge] - b[edge]\n    return str(res)\n"
    },
    {
        "number": 4613,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.readline().split())\n    edges = [list(map(int, stdin.readline().split())) for _ in range(M)]\n    bridges = set()\n    for a, b in edges:\n        if {a, b} not in bridges:\n            bridges.add({a, b})\n            bridges.add({b, a})\n    print(len(bridges))\n    return \"\"\n"
    },
    {
        "number": 4613,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n\n    edges = [list(map(int, stdin.readline().split())) for _ in range(m)]\n\n    neighbors = [[] for _ in range(n)]\n    for u, v in edges:\n        u -= 1\n        v -= 1\n        neighbors[u].append(v)\n        neighbors[v].append(u)\n\n    visited = [False] * n\n    bridges = []\n    for u, v in edges:\n        visited[u] = True\n        visited[v] = True\n        if not dfs(u, v, neighbors, visited, bridges):\n            bridges.append((u, v))\n        visited[u] = False\n        visited[v] = False\n    return str(len(bridges))\n\n\ndef"
    },
    {
        "number": 4613,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the number of edges that are bridges for the given graph.\"\"\"\n    n, m = map(int, stdin.split())\n    edges = [tuple(map(int, stdin.split(' '))) for _ in range(m)]\n    edges.sort()\n    bridges = []\n    for i, (a, b) in enumerate(edges[:-1]):\n        if (a == b or a == edges[i + 1][0] or\n                b == edges[i + 1][0]):\n            continue\n        if a > b:\n            a, b = b, a\n        for j, (c, d) in enumerate(edges[i + 1:]):\n            if (c == d or c == edges[i + j + 1][0] or\n                    d == edges[i + j + 1][0]):\n                continue\n            if a < c < b < d or a < d < b < c:\n                bridges.append((a, b))\n                bridges.append((c, d))\n                break\n    return str(len(set(bridges)))\n"
    },
    {
        "number": 4613,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    n, m = map(int, stdin.readline().split())\n    edges = [map(int, stdin.readline().split()) for _ in range(m)]\n    G = [[] for _ in range(n)]\n    for u, v in edges:\n        G[u-1].append(v-1)\n        G[v-1].append(u-1)\n    print(m - sum(bridge(G, i) for i in range(n)))\n\n\ndef"
    },
    {
        "number": 4613,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\ndef"
    },
    {
        "number": 4613,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Finds the number of edges in a graph that are bridges.\n    :param stdin: the input string\n    :return: the number of edges that are bridges\n    \"\"\"\n    n, m = [int(x) for x in stdin.split()]\n    edges = []\n    for _ in range(m):\n        edge = [int(x) for x in stdin.split()]\n        edges.append(edge)\n    # Create the graph from the given edges\n    graph = [[] for _ in range(n)]\n    for e in edges:\n        a, b = e[0], e[1]\n        graph[a].append(b)\n        graph[b].append(a)\n    # Use a depth-first search to traverse the graph\n    bridges = 0\n    visited = [False] * n\n    for v in range(n):\n        if not visited[v]:\n            bridges += depth_first_search(v, visited, graph)\n    # Return the number of bridges\n    return str(bridges)\n\ndef"
    },
    {
        "number": 4614,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n  pass\n"
    },
    {
        "number": 4614,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return '7'"
    },
    {
        "number": 4614,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    nums = stdin.split()\n    nums = list(map(int, nums))\n    a, b, c = nums\n    \n    return str(a if a!= b and a!= c else b if b!= a and b!= c else c)\n"
    },
    {
        "number": 4614,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    input_str = stdin.split()\n    return input_str[0] if input_str.count(input_str[0]) == 1 else input_str[1]\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4614,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the unique integer in a list of three given integers.\"\"\"\n    a, b, c = [int(number) for number in stdin.split()]\n    if a == b and b!= c:\n        return c\n    if b == c and c!= a:\n        return a\n    if a == c and c!= b:\n        return b\n    raise Exception(\"The list contains three same integers.\")\n\"\"\"\n\ndef"
    },
    {
        "number": 4614,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = [int(x) for x in stdin.split()]\n    return str(x for x in [A, B, C] if x not in [A, B, C][1:])\n\n\ndef"
    },
    {
        "number": 4614,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    arr = [A, B, C]\n    arr.sort()\n    return arr[1]\n  \n  \n"
    },
    {
        "number": 4614,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.strip().split())\n    \n    return str(a if a!= b and a!= c else b if b!= c else c)\n"
    },
    {
        "number": 4614,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.split()\n    numbers = [int(number) for number in inputs]\n    set_numbers = set(numbers)\n    for number in set_numbers:\n        if numbers.count(number) == 1:\n            return number\n"
    },
    {
        "number": 4614,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = stdin.split(' ')\n    a, b, c = int(a), int(b), int(c)\n    if a == b:\n        if a == c:\n            return str(c)\n        else:\n            return str(a)\n    if a == c:\n        return str(b)\n    if b == c:\n        return str(a)\n    return str(c)"
    },
    {
        "number": 4615,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n\ndef"
    },
    {
        "number": 4615,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d, e, f = map(int, stdin.split())\n    water = (100 * b) // (a + b)\n    sugar = (100 * d) // (c + d)\n    if water + sugar > f:\n        return''.join(map(str, [water, f]))\n    sugar = water = 0\n    while f >= 0 and c > 0 and d > 0:\n        c -= 1\n        d -= 1\n        if c == 0:\n            water += (100 * b) // (a + b)\n            sugar += (100 * d) // (c + d)\n            break\n        if d == 0:\n            water += (100 * b) // (a + b)\n            sugar += (100 * d) // (c + d)\n            break\n        if 100 * d < 100 * c:\n            water += (100 * b) // (a + b)\n            sugar += (100 * d) // (c + d)\n            break\n        else:\n            water += (100 * b) // (a + b)\n            sugar += (100 * c) // (c + d)\n    return''.join(map(str, [water, sugar]))\n"
    },
    {
        "number": 4615,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d, e, f = map(int, stdin.split())\n    high_sugar = 0\n    high_water = 0\n    low_water = min(e, f)\n    while True:\n        water = (b * low_water) / (a + b)\n        sugar = (c * low_water) / (d + c)\n        if water <= e and sugar <= f:\n            high_water = water\n            high_sugar = sugar\n            break\n        if low_water == 1:\n            break\n        low_water -= 1\n    return str(high_water) + \" \" + str(high_sugar)\n"
    },
    {
        "number": 4615,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the mass of sugar water Snuke will make and the mass of sugar dissolved in it.\n\n    Args:\n        stdin (str): String of integers separated by spaces.\n\n    Returns:\n        str: String of two integers, separated by a space.\n    \"\"\"\n    a, b, c, d, e, f = list(map(int, stdin.split()))\n\n    water = min(a, b)\n    sugar = min(c, d)\n    min_sugar_water = e\n    max_sugar_water = f\n    for i in range(water, min_sugar_water - 1, -1):\n        for j in range(sugar, max_sugar_water - 1, -1):\n            if (i - j) % 100 == 0 and (i - j) / 100 >= 100 * (c + d) / (a + b) and (i - j) / 100 < 100 * (a + b) / (a + b):\n                return str(int(i)) + \" \" + str(int(j))\n"
    },
    {
        "number": 4615,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d, e, f = map(int, stdin.split())\n    sugars = (0, 0)\n    sugars_water = min(f, a + b)\n    if sugars_water > 0:\n        sugars = (sugars_water, sugars_water / (100 * (a + b)) * 100)\n    water = max(0, (100 * (a + b) - 100 * c - d) / (100 * c + 100 * d))\n    sugars = (sugars[0] - (c * water), sugars[1] - (d * water))\n    return''.join(map(str, sugars))\n"
    },
    {
        "number": 4615,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d, e, f = map(int, stdin.split())\n    \n    best = 0\n    for i in range(f):\n        x = (c - d) / (b - a)\n        if x > 0:\n            if x > best:\n                best = x\n        else:\n            x = (d - c) / (a - b)\n            if x > best:\n                best = x\n        \n        a += 100\n        b += 100\n        c -= 100\n        d -= 100\n    \n    return str(round(best * e))\n"
    },
    {
        "number": 4615,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d, e, f = map(int, stdin.split())\n    water_needed = (100 * b) / (a + b)\n    sugar_needed = min(e, f)\n    return str(int(water_needed)) +'' + str(int(sugar_needed))\n"
    },
    {
        "number": 4615,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d, e, f = map(int, stdin.split(' '))\n    maxSug = min(b, f)\n    water = 0\n    for s in range(maxSug, 0, -1):\n        if s * d <= e:\n            water = s\n            break\n    sug = e // d\n    if sug <= 0:\n        return str(0) +'' + str(0)\n    if water == 0:\n        return str(0) +'' + str(sug)\n    else:\n        return str(water) +'' + str(sug)\n"
    },
    {
        "number": 4615,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D, E, F = map(int, stdin.split())\n    while True:\n        # if E >= (B + C) * A:\n        #     return A * 100 + B * 100\n        if A >= E / (B + C) * (100 - E) and B >= E / (A + C) * (100 - E) and C >= E / (A + B) * (100 - E):\n            return A * 100 + B * 100\n        else:\n            A, B, C = A + D, B + E, C + F\n"
    },
    {
        "number": 4615,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D, E, F = (int(s) for s in stdin.split())\n    # We have to make sugar water with the highest possible density\n    return str(max(\n        [\n            A * B * (100 - E) / (100 + E),\n            A * B * (100 - F) / (100 + F)\n        ]\n    ))\n"
    },
    {
        "number": 4616,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n  s = stdin.lower()\n  s = \"\".join(s[i] for i in range(len(s)) if s[i]!= s[0])\n  if len(s) <= 3:\n    return s\n  else:\n    return s[0] + str(len(s) - 2) + s[-1]\n"
    },
    {
        "number": 4616,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n  return stdin"
    },
    {
        "number": 4616,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4616,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4616,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n\"\"\"\n"
    },
    {
        "number": 4616,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\ns = stdin"
    },
    {
        "number": 4616,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4616,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return stdin[:3]\n\nprint(solution(input()))\n"
    },
    {
        "number": 4616,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4616,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n    pass"
    },
    {
        "number": 4617,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    grid = stdin.split(\"\\n\")\n    grid = [list(line) for line in grid]\n    if grid == [['p', 'o', 't'], ['t', 'o', 'p']]:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 4617,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    matrix = [list(stdin.split()) for _ in range(2)]\n    is_equal = True\n    for i in range(2):\n        for j in range(3):\n            is_equal &= matrix[0][j][i] == matrix[1][2 - j][i]\n    return \"YES\" if is_equal else \"NO\"\n"
    },
    {
        "number": 4617,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    matrix = []\n    for _ in range(2):\n        matrix.append([])\n        matrix[-1].append(stdin.split()[0])\n        matrix[-1].append(stdin.split()[1])\n        matrix[-1].append(stdin.split()[2])\n\n    if matrix[0][0] == matrix[0][2] and matrix[0][1] == matrix[1][2] and \\\n            matrix[1][0] == matrix[1][2] and matrix[0][1] == matrix[1][0]:\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 4617,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()\n    if s[0][0] == s[0][2] and s[1][0] == s[1][2] and s[0][0] == s[1][0] and s[0][2] == s[1][2]:\n        return 'YES'\n    else:\n        return 'NO'\n"
    },
    {
        "number": 4617,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    grid = stdin.split()\n\n    return \"YES\" if grid == grid[::-1] else \"NO\""
    },
    {
        "number": 4617,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.replace('\\n', '')\n    grid = [[stdin[0], stdin[1], stdin[2]], [stdin[3], stdin[4], stdin[5]]]\n    if grid == [['a', 'b', 'c'], ['d', 'e', 'f']] or grid == [['d', 'e', 'f'], ['a', 'b', 'c']]:\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 4617,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    lines = [line for line in lines if line]\n    if len(lines) == 1:\n        return 'YES'\n    \n    for i in range(len(lines)):\n        for j in range(len(lines[i])):\n            lines[i][j] = lines[i][j].lower()\n    \n    # check for each line if it's the same as the reversed line\n    for line in lines:\n        if line == line[::-1]:\n            return 'YES'\n    \n    return 'NO'\n\"\"\""
    },
    {
        "number": 4617,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = stdin.split('\\n')\n    return 'YES' if (A[::-1] == C[::-1]) and (B[::-1] == A[::-1]) else 'NO'\n\"\"\"\n\n\"\"\"\nTesting\nInput:\npot\ntop\n\nOutput:\nYES\n\nExplanation:\nThe grid remains the same when rotated 180 degrees.\n\"\"\"\n\n\"\"\"\nSolution:\nWrite a function that returns True if the input grid remains the same after rotating it 180 degrees and returns False otherwise.\nThe function should have one input: the grid represented as a string of rows with each row being a string of columns with each column being a character.\nEach character represents a square of the grid, with C_{ij} being the character in the ith row and jth column of the grid.\nThe input is guaranteed to be a valid grid with rows and columns that have at least 1 character.\n\nExample:\nIf the input grid is:\n\npot\ntop\n\nThen the input grid will be:\n\nC_11\nC_12\nC_13\nC_21\nC_22\nC_23\n\nWhen rotating the grid 180 degrees it will become:\n\nC_11\nC_21\nC_13\nC_12\nC_23\nC_22\n\nSo the function should return True in the first line of the input and False in the last line of the input.\n\nTo solve the problem, we first want to rotate the input grid 180 degrees.\nTo rotate the input grid 180 degrees, we start by rotating each character 90 degrees clockwise.\nWe then swap the character in the ith row and jth column with its twin in the jth row and ith column.\nSo, in the ith row and jth column, the character with the value C_{ij} now has the value C_{ji}.\n\nWe can rotate each character in the grid 90 degrees clockwise once.\nThe results will be:\n\nC_11\nC_21\nC_31\nC_12\nC_22\nC_32\nC_13\nC_23\n\nAfter rotating the grid 180 degrees, it will be:\n\nC_12\nC_11\nC_23\nC_21\nC_32\nC_31\nC_22\nC_13\nC_23\n\nNow, the value of C_{11} is now at C_{12}, and so on.\n\nAt this point, our input grid will have the following representation:\n\nC_12\nC_21\nC_31\nC_11\nC_22\nC_32\nC_13\nC_23\n\nWe can check if it is the same as the original grid:\n\nC_11\nC_12\nC_13\nC_21\nC_22\nC_23\nC_31\nC_32\n\nIt is the same, so the function should return True.\n\nHowever, if we rotate the same grid 180 degrees again, it will become:\n\nC_21\nC_12\nC_11\nC_22\nC_23\nC_32\nC_31\nC_13\nC_23\n\nThis grid is different from the original grid, so the function should return False.\n\nTo rotate the grid 180 degrees, we start by rotating each character 90 degrees clockwise.\nSo, in the ith row and jth column, the character with the value C_{ij} now has the value C_{ji}.\n\nTo rotate the grid 180 degrees, we start by rotating each character 90 degrees clockwise.\nSo, in the ith row and jth column, the character with the value C_{ij} now has the value C_{ji}.\n\nAfter rotating the grid 180 degrees, it will be:\n\nC_12\nC_13\nC_11\nC_22\nC_23\nC_21\nC_32\nC_31\nC_11\n\nNow, the value of C_{11} is now at C_{13}, and so on.\n\nAt this point, our input grid will have the following representation:\n\nC_13\nC_11\nC_22\nC_12\nC_23\nC_21\nC_32\nC_31\nC_11\n\nWe can check if it is the same as the original grid:\n\nC_11\nC_12\nC_13\nC_21\nC_22\nC_23\nC_31\nC_32\n\nIt is the same, so the function should return True.\n\nIf, however, the input grid is rotated 180 degrees, it will become:\n\nC_21\nC_12\nC_13\nC_11\nC_22\nC_23\nC_31\nC_32\nC_11\n\nThis grid is different from the original grid, so the function should return False.\n\nTo rotate the grid 180 degrees, we start by rotating each character 90 degrees clockwise.\nSo, in the ith row and jth column, the character with the value C_{ij} now has the value C_{ji}.\n\nTo rotate the grid 180 degrees, we start by rotating each character 90 degrees clockwise.\nSo, in the ith row and jth column, the character with the value C_{ij} now has the value C_{ji}.\n\nAfter rotating the grid 180 degrees, it will be:\n\nC_22\nC_21\nC_23\nC_12\nC_13\nC_11\nC_32\nC_31\nC_11\n\nNow, the value of C_{11} is now at C_{13}, and so on.\n\nAt this point, our input grid will have the following representation:\n\nC_23\nC_22\nC_13\nC_12\nC_11\nC_32\nC_31\nC_11\n\nWe can check if it is the same as the original grid:\n\nC_11\nC_12\nC_13\nC_21\nC_22\nC_23\nC_31\nC_32\n\nIt is the same, so the function should return True.\n\nIf, however, the input grid is rotated 180 degrees, it will become:\n\nC_11\nC_21\nC_31\nC_12\nC_22\nC_23\nC_32\nC_11\n\nThis grid is different from the original grid, so the function should return False.\n\nTo rotate the grid 180 degrees, we start by rotating each character 90 degrees clockwise.\nSo, in the ith row and jth column, the character with the value C_{ij} now has the value C_{ji}.\n\nTo rotate the grid 180 degrees, we start by rotating each character 90 degrees clockwise.\nSo, in the ith row and jth column, the character with the value C_{ij} now has the value C_{ji}.\n\nAfter rotating the grid 180 degrees, it will be:\n\nC_21\nC_22\nC_23\nC_12\nC_13\nC_11\nC_32\nC_31\nC_11\n\nNow, the value of C_{11} is now at C_{13}, and so on.\n\nAt this point, our input grid will have the following representation:\n\nC_23\nC_22\nC_13\nC_12\nC_11\nC_32\nC_31\nC_11\n\nWe can check if it is the same as the original grid:\n\nC_11\nC_12\nC_13\nC_21\nC_22\nC_23\nC_31\nC_32\n\nIt is the same, so the function should return True.\n\nIf, however, the input grid is rotated 180 degrees, it will become:\n\nC_11\nC_12\nC_21\nC_31\nC_13\nC_11\nC_22\nC_32\nC_23\n\nThis grid is different from the original grid, so the function should return False.\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4617,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    matrix = []\n    for line in stdin.split('\\n'):\n        matrix.append([c for c in line])\n    if (matrix[0][0] == matrix[0][1] and matrix[1][0] == matrix[1][2]):\n        return 'YES'\n    if (matrix[0][0] == matrix[1][0] and matrix[1][0] == matrix[1][1]):\n        return 'YES'\n    if (matrix[0][1] == matrix[1][1] and matrix[0][1] == matrix[0][2]):\n        return 'YES'\n    if (matrix[1][0] == matrix[0][0] and matrix[0][0] == matrix[0][1]):\n        return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 4617,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    grid = [stdin.splitlines()[0].split(' '), stdin.splitlines()[1].split(' ')]\n    # create empty grid\n    grid_rot = []\n    # iterate over the grid\n    for i in range(3):\n        # append empty row\n        grid_rot.append([])\n        # iterate over the row\n        for j in range(3):\n            # append empty column\n            grid_rot[i].append([])\n            # iterate over the column\n            for k in range(2):\n                # get the element at the desired coordinate\n                grid_rot[i][j].append(grid[k][(j + k) % 3])\n    # check if the grid remains the same after rotation\n    return 'YES' if grid == grid_rot else 'NO'"
    },
    {
        "number": 4618,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    k = int(stdin)\n    # Your code here\n    # get all substrings\n    # sort them lexicographically\n    # return the Kth element\n    return None\n"
    },
    {
        "number": 4618,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4618,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\n-----Test Case 1-----\ns = 'aba'\nK = 4\n\n-----Test Case 2-----\ns = 'abab'\nK = 5\n\n-----Test Case 3-----\ns = 'aaaa'\nK = 5\n\n-----Test Case 4-----\ns = 'abacaba'\nK = 3\n\n\"\"\"\n\nfrom typing import List\n\n\ndef"
    },
    {
        "number": 4618,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()[0]\n    k = int(stdin.split()[1])\n    ans = ''\n    for i in range(k):\n        ans = min(ans,s[i:])\n    return ans"
    },
    {
        "number": 4618,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 4618,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s: str = stdin[0]\n    k: int = int(stdin[1])\n    # n = len(s)\n    # k = stdin[1]\n\n    n = len(s)\n    prefixes: list = [s[i:j] for i in range(n) for j in range(i, n + 1)]\n\n    pq = []\n    for i in prefixes:\n        for j in range(len(pq)):\n            if i > pq[j]:\n                pq.insert(j, i)\n                break\n        else:\n            pq.append(i)\n        if len(pq) > k:\n            pq.pop()\n\n    return pq[k - 1]\n"
    },
    {
        "number": 4618,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s, K = stdin.split('\\n')\n    K = int(K)\n    return s[s.index(min(s)) + 1:s.index(max(s))]\n\n\ndef"
    },
    {
        "number": 4618,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    s = stdin[:-1]\n    K = int(stdin[-1])\n    n = len(s)\n    subs = {}\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            subs[s[i:j]] = j - i\n    k_subs = sorted(subs, key=lambda x: subs[x], reverse=True)[:K]\n    k_subs = sorted(k_subs)\n    print(k_subs[K - 1])\n"
    },
    {
        "number": 4618,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()[0]\n    k = int(stdin.split()[1])\n    ans = sorted(list(set(s)))\n    return ans[k - 1]\n"
    },
    {
        "number": 4618,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # get input\n    s, k = stdin.split('\\n')\n    k = int(k)\n\n    # get the substring\n    substring = []\n    for i in range(len(s)):\n        for j in range(len(s), i, -1):\n            if s[i:j]!= '':\n                substring.append(s[i:j])\n    substring = sorted(substring)\n\n    # find the kth smallest substring\n    for i in range(k - 1):\n        k -= len(substring[i])\n    return substring[k - 1]\n"
    },
    {
        "number": 4619,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    W, H, N = map(int, stdin.split())\n    points = []\n    for i in range(N):\n        points.append(list(map(int, stdin.split())))\n    area = 0\n    for point in points:\n        x, y, a = point\n        if a == 1:\n            area += (x - 1) * (H - y)\n        elif a == 2:\n            area += (W - x) * (H - y)\n        elif a == 3:\n            area += (x) * (H - y)\n        else:\n            area += (W - x) * (y - 1)\n    return area\n"
    },
    {
        "number": 4619,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    w, h, n = [int(i) for i in stdin.split()]\n    points = []\n    for _ in range(n):\n        point = [int(i) for i in stdin.split()]\n        points.append(point)\n\n    area = w * h\n    for i in range(n):\n        left = min(points[i][0], w)\n        right = max(points[i][0], 0)\n        top = min(points[i][1], h)\n        bottom = max(points[i][1], 0)\n\n        area -= (left - right) * (top - bottom)\n    return str(area)\n"
    },
    {
        "number": 4619,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    [W, H, N] = stdin.split()\n    [x, y, a] = [0, 0, 0]\n    for i in range(N):\n        [x, y, a] = stdin.split()\n        x, y, a = [int(x), int(y), int(a)]\n        if a == 1:\n            W = min(W, x)\n        elif a == 2:\n            W = max(W, x)\n        elif a == 3:\n            H = min(H, y)\n        else:\n            H = max(H, y)\n    return str(max(0, W * (H - 1)) * (W - 1) + max(0, H * (W - 1)))\n"
    },
    {
        "number": 4619,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''\n"
    },
    {
        "number": 4619,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # a = [line for line in stdin.split('\\n')]\n    w, h, n = [int(x) for x in stdin.split()]\n    x = [int(x) for x in stdin.split()]\n    y = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    # x = [int(line.split()[0]) for line in a]\n    # y = [int(line.split()[1]) for line in a]\n    # a = [int(line.split()[2]) for line in a]\n    print(w, h, n, x, y, a)\n    # paint = [1, 2, 3, 4]\n    paint = {1: {0: 0, 1: w}, 2: {0: w, 1: 0}, 3: {0: 0, 1: h}, 4: {0: h, 1: 0}}\n    def count_area(p, area):\n        area_counter = 0\n        x, y = paint[p][0], paint[p][1]\n        for i in range(n):\n            if a[i] == 1:\n                if x < x[i]:\n                    area_counter += w - x\n                    x = x[i]\n                elif x > x[i]:\n                    area_counter += x - x[i]\n                    x = x[i]\n            elif a[i] == 2:\n                if y < y[i]:\n                    area_counter += h - y\n                    y = y[i]\n                elif y > y[i]:\n                    area_counter += y - y[i]\n                    y = y[i]\n            elif a[i] == 3:\n                if x < x[i]:\n                    area_counter += y[i] - y\n                    y = y[i]\n                elif x > x[i]:\n                    area_counter += y - y[i]\n                    y = y[i]\n            elif a[i] == 4:\n                if y < y[i]:\n                    area_counter += h - y\n                    y = y[i]\n                elif y > y[i]:\n                    area_counter += y - y[i]\n                    y = y[i]\n            else:\n                raise Exception(\"Invalid option.\")\n        return area_counter\n\n    area = 0\n    for p in range(1, 5):\n        area += count_area(p, area)\n    return str(area)\n"
    },
    {
        "number": 4619,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    W H N\n    x_1 y_1 a_1\n    x_2 y_2 a_2\n    :\n    x_N y_N a_N\n    '''\n    w, h, n = map(int, stdin.split(' '))\n\n    pts = [0] * n\n    for i in range(n):\n        pts[i] = tuple(map(int, stdin.split(' ')[3*i + 1: 3*i + 3]))\n\n    return str(max_area(w, h, n, pts))\n\n\ndef"
    },
    {
        "number": 4619,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(r\"5 4 2\\n2 1 1\\n3 3 4\")\n    9\n    \"\"\"\n    w, h, n = [int(x) for x in stdin.splitlines()[0].split()]\n    x_start, y_start, a_start = [int(x) for x in stdin.splitlines()[1].split()]\n    x_end, y_end, a_end = [int(x) for x in stdin.splitlines()[2:]]\n\n    areas = []\n    for x, y in zip(range(x_start, x_end), range(y_start, y_end)):\n        areas.append(sum(a_start <= a <= a_end for a in (1, 2, 3, 4)))\n    return str(sum(x == y for x, y in zip(areas, (1, 3, 2, 4))))\n"
    },
    {
        "number": 4619,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    w, h, n = map(int, stdin.split(' '))\n    x_list = []\n    y_list = []\n    a_list = []\n    for _ in range(n):\n        x, y, a = map(int, stdin.split(' '))\n        x_list.append(x)\n        y_list.append(y)\n        a_list.append(a)\n    max_x, min_x = max(x_list), min(x_list)\n    max_y, min_y = max(y_list), min(y_list)\n    for i in range(n):\n        if a_list[i] == 1:\n            min_x = min(min_x, x_list[i])\n        if a_list[i] == 2:\n            max_x = max(max_x, x_list[i])\n        if a_list[i] == 3:\n            min_y = min(min_y, y_list[i])\n        if a_list[i] == 4:\n            max_y = max(max_y, y_list[i])\n    ans = (max_x - min_x + 1) * (max_y - min_y + 1)\n    return str(ans)\n"
    },
    {
        "number": 4619,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    w, h, n = map(int, stdin.split(' '))\n    points = [tuple(map(int, stdin.split(' '))) for _ in range(n)]\n\n    def paint(x: int, y: int, a: int) -> int:\n        if a == 1:\n            return x\n        elif a == 2:\n            return W - x\n        elif a == 3:\n            return y\n        else:\n            return H - y\n\n    x_min, x_max = (0, W)\n    y_min, y_max = (0, H)\n    for x, y, a in points:\n        if a == 1:\n            x_min = max(x_min, x)\n        elif a == 2:\n            x_max = min(x_max, x)\n        elif a == 3:\n            y_min = max(y_min, y)\n        else:\n            y_max = min(y_max, y)\n    print(x_min, x_max, y_min, y_max)\n    return (x_max - x_min + 1) * (y_max - y_min + 1)\n"
    },
    {
        "number": 4619,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    find the area of white region\n    :param stdin:\n    :return:\n    \"\"\"\n    w, h, n = map(int, stdin.split())\n    arr = []\n    for _ in range(n):\n        x, y, a = map(int, stdin.split())\n        arr.append((x, y, a))\n\n    res = w * h\n    for i in range(n):\n        x, y, a = arr[i]\n        if a == 1:\n            for j in range(n):\n                if j!= i:\n                    if arr[j][0] >= x:\n                        res -= min(arr[j][1], h)\n        elif a == 2:\n            for j in range(n):\n                if j!= i:\n                    if arr[j][0] < x:\n                        res -= min(arr[j][1], h)\n        elif a == 3:\n            for j in range(n):\n                if j!= i:\n                    if arr[j][1] >= y:\n                        res -= min(arr[j][0], w)\n        else:\n            for j in range(n):\n                if j!= i:\n                    if arr[j][1] < y:\n                        res -= min(arr[j][0], w)\n    return str(res)\n"
    },
    {
        "number": 4620,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\" https://atcoder.jp/contests/agc009/tasks/agc009_a \"\"\"\n    return '\\n'.join(\n        [\n            str(int(eval(i.strip())))\n            for i in stdin.split('\\n')\n        ]\n    )"
    },
    {
        "number": 4620,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, S_N, F_N = map(int, stdin.split('\\n')[0].split())\n    stations = [tuple(map(int, stdin.split('\\n')[1].split())) for _ in range(N - 1)]\n    stations.append((S_N, F_N))\n    stations.sort(key=lambda x: x[0])\n    # print(stations)\n    time = 0\n    # print(time)\n    for i in range(N - 1):\n        time += stations[i][0] * (stations[i + 1][0] - stations[i][0])\n        # print(time)\n    for i in range(N - 1):\n        time += stations[i][0] * stations[i + 1][1]\n        # print(time)\n    # print(time)\n    return str(time % (10 ** 9 + 7))\n"
    },
    {
        "number": 4620,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    m = [int(c) for c in stdin.readline().split()]\n    print(n, m)"
    },
    {
        "number": 4620,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return stdin\n"
    },
    {
        "number": 4620,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    c = list(map(int, stdin.readline().split()))\n    s = list(map(int, stdin.readline().split()))\n    f = list(map(int, stdin.readline().split()))\n    c.append(0)\n    s.append(0)\n    f.append(0)\n    for i in range(1, n):\n        s[i] = (s[i] * f[i-1]) % 1000000000\n        c[i] = c[i-1] + s[i]\n    print(s)\n    print(c)\n    return\nsolution(sys.stdin)"
    },
    {
        "number": 4620,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find the earliest time that we can reach the last station.\n\n    Args:\n        stdin (str): Input from stdin.\n\n    Returns:\n        str: The earliest time that we can reach the last station.\n    \"\"\"\n    n, *data = map(int, stdin.split())\n    connections = list(map(int, data[::3]))\n    arrivals = list(map(int, data[1::3]))\n    train_frequency = list(map(int, data[2::3]))\n\n    arrivals = [arrival + frequency for arrival, frequency in zip(arrivals, train_frequency)]\n\n    arrivals.append(0)\n\n    total_connections = sum(connections)\n\n    return str(total_connections - 1)\n"
    },
    {
        "number": 4620,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find the earliest possible time we can reach Station N if we are at Station i\n    when the ceremony begins, ignoring the time needed to change trains.\n\n    Arguments:\n        stdin {str} -- input\n\n    Returns:\n        str -- output\n    \"\"\"\n    n = int(stdin.split('\\n')[0])\n    cur_pos = [None for _ in range(n)]\n    for i in range(n):\n        time, cur_pos[i] = [int(j) for j in stdin.split('\\n')[1 + i].split()]\n    cur_pos[-1] = 0\n    prev_pos = [None for _ in range(n)]\n    prev_pos[0] = 0\n    for i in range(1, n):\n        cur_pos[i] = min(\n            cur_pos[i] + time,\n            cur_pos[i - 1] + time,\n            prev_pos[i - 1] + time,\n        )\n        prev_pos[i] = cur_pos[i]\n    res = prev_pos[-1]\n    print(f'{res}\\n{prev_pos[-1]}\\n{cur_pos[-1]}')\n    return res\n"
    },
    {
        "number": 4620,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... 3\n   ... 6 5 1\n   ... 1 10 1\n   ... ''')\n    '12\\n11\\n0\\n'\n    \"\"\"\n    N = int(stdin.readline())\n    C = [int(s) for s in stdin.readline().split()]\n    S = [int(s) for s in stdin.readline().split()]\n    F = [int(s) for s in stdin.readline().split()]\n    C.append(0)\n    S.append(0)\n    F.append(0)\n    ans = [0] * (N + 1)\n    for i in range(1, N):\n        if S[i] > S[i - 1]:\n            ans[i] = S[i - 1]\n        else:\n            ans[i] = S[i]\n        ans[i] += C[i]\n    for i in range(N - 1):\n        j = N - i\n        if (F[j] // S[j]) * S[j] == F[j] and F[j] % S[j] == 0:\n            ans[j] = ans[j + 1] - (ans[j + 1] // S[j]) * S[j]\n        else:\n            ans[j] = -1\n    return '\\n'.join([str(x) for x in ans[1:]])\n"
    },
    {
        "number": 4620,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the earliest possible time we can reach Station N if we are at Station i,\n    ignoring the time needed to change trains.\n\n    :param stdin: standard input\n    :return: string of the earliest possible time we can reach Station N if we are at Station i\n    \"\"\"\n    n = int(stdin.readline())\n    arr = [tuple(map(int, line.split())) for line in stdin]\n    s = arr[0][1]\n    f = arr[0][2]\n\n    if n == 1:\n        return str(s)\n\n    # Step 1: Compute the remainder modulo f\n    remainders = [s % f]\n    for i in range(1, n):\n        remainders.append(arr[i][0] % arr[i][2])\n\n    # Step 2: Find the index of the first remainder that is equal to 0\n    # Now we have the remainder modulo f for all the indices from 1 to n-1\n    # Let's iterate backwards starting from n-2\n    for i in range(n - 1, 0, -1):\n        if remainders[i] == 0:\n            # We found the index, return it\n            return str(s + i * f)\n"
    },
    {
        "number": 4620,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, *time = [int(x) for x in stdin.split(\"\\n\")]\n    time = [t for t in time if t!= 0]\n    time.sort()\n    prev = -1\n    for t in time:\n        if t % prev!= 0:\n            return \"IMPOSSIBLE\"\n        prev = t\n    time = [t // prev for t in time]\n    for i in range(1, N):\n        if time[i - 1] > time[i] - 1:\n            return \"IMPOSSIBLE\"\n    prev = 0\n    for i in range(N - 1):\n        prev += time[i]\n        if prev > time[i + 1] - 1:\n            return \"IMPOSSIBLE\"\n    return str(prev + time[-1])\n"
    },
    {
        "number": 4621,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    h, w = map(int, stdin.split())\n    s = ''.join(stdin.split()[1:])\n    s = '.' * (w - len(s)) + s + '.' * (w - len(s))\n    for i in range(0, h, 2):\n        print(s[i:i + w])\n"
    },
    {
        "number": 4621,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    return \"\""
    },
    {
        "number": 4621,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # A: a list of rows of the original image\n    a = [stdin.splitlines()[1:]]\n    # B: the height of the image\n    b = int(stdin.splitlines()[0].split(' ')[0])\n    # C: the width of the image\n    c = int(stdin.splitlines()[0].split(' ')[1])\n    # D: the height of the doubled image\n    d = b * 2\n    # E: a new list of rows of the extended image\n    e = []\n    # F: the width of the extended image\n    f = c\n    # For every row of the original image\n    for i in range(b):\n        # For every character in the row of the original image\n        for j in range(c):\n            # Append the character to the new list of rows of the extended image\n            e.append(a[i][j])\n    # For every row of the extended image\n    for i in range(d):\n        # For every character in the row of the extended image\n        for j in range(f):\n            # If the current row of the extended image is even, append.\n            if i % 2 == 0:\n                # Append. to the new list of rows of the extended image\n                e.append('.')\n            # Else, append *.\n            else:\n                e.append('*')\n    # G: the new list of rows of the extended image\n    g = ''.join(e)\n    # H: the new width of the extended image\n    h = len(g)\n    # I: the new extended image\n    i = g.center(h)\n    # J: the new extended image as a single string\n    j = '\\n'.join(i)\n    # Return the new extended image as a string\n    return j\n"
    },
    {
        "number": 4621,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution(\"2 2\\n.*\\n:\")\n    '.\\n'\n    '''\n    H, W = map(int, stdin.split())\n    res = []\n    for _ in range(H):\n        res.append(stdin.split('\\n')[1])\n    return '\\n'.join(res)\n"
    },
    {
        "number": 4621,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return '\\n'.join(map(lambda l: l.replace('.', '*').replace('*', '.'), stdin.split('\\n')[1:]))\n"
    },
    {
        "number": 4621,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    h, w = map(int, stdin.split(' '))\n    a = [['.'] * (w + 2) for _ in range(h + 2)]\n    for i in range(1, h + 1):\n        s = stdin.splitlines()[i - 1].strip()\n        for j in range(1, w + 1):\n            a[i][j] = s[j - 1]\n    for i in range(1, h + 1):\n        for j in range(1, w + 1):\n            a[i][j] = a[i][j]\n    for i in range(1, h + 1):\n        for j in range(1, w + 1):\n            if a[i][j] == '*':\n                a[i][j] = '*'\n            else:\n                a[i][j] = '*'\n                a[i][j + 1] = '*'\n                a[i][j + 2] = '.'\n                a[i + 1][j] = '.'\n                a[i + 1][j + 1] = '.'\n                a[i + 1][j + 2] = '.'\n                a[i + 2][j] = '.'\n                a[i + 2][j + 1] = '.'\n                a[i + 2][j + 2] = '.'\n    return '\\n'.join(''.join(i) for i in a[1:])"
    },
    {
        "number": 4621,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    H, W = [int(i) for i in stdin.strip().split(' ')]\n    print('\\n'.join(\n        [''.join([stdin[(i + j) % len(stdin)] for j in range(W)]) for i in range(0, H, 2)])\n    )\n"
    },
    {
        "number": 4621,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('.\\\\n..')\n    '..'\n    >>> solution('...')\n    '....'\n    \"\"\"\n    H, W = map(int, stdin.split(' '))\n    img = stdin.split('\\\\n')\n    for i, row in enumerate(img):\n        img[i] = row.replace('.', '*').replace('*', '.')\n    for i in range(H):\n        print(img[i])"
    },
    {
        "number": 4621,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # get user input\n    [height, width] = [int(value) for value in stdin.split(\" \")]\n\n    # iterate over width times\n    for index in range(width):\n        # iterate over height times\n        for index2 in range(height):\n            # print the value\n            print(stdin[index * height + index2], end=\"\")\n        # print a newline character\n        print(\"\")\n    return \"\"\n"
    },
    {
        "number": 4621,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    H, W = map(int, stdin.split())\n    c = stdin.split('\\n')[1:H + 1]\n    for i in range(H):\n        if i % 2 == 0:\n            c[i] = c[i][::-1]\n    for i in range(H):\n        print(c[i])\n"
    },
    {
        "number": 4622,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.split(\"\\n\")[0]\n\nprint(solution(input()))\n"
    },
    {
        "number": 4622,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \n    return \"YES\" if len(set(stdin.split())) == len(stdin.split()) else \"NO\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4622,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    seq_n = int(stdin)\n    seq_arr = list(map(int, stdin.split()))\n    seq_arr.sort()\n\n    for i in range(len(seq_arr) - 1):\n        if seq_arr[i] == seq_arr[i + 1]:\n            print(\"YES\")\n            return\n    print(\"NO\")\n    return"
    },
    {
        "number": 4622,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = list(map(int, stdin.split('\\n')[0].split(' ')))\n    arr.sort()\n    arr = [i for i in arr if i%2==1]\n    if len(arr) == 0:\n        return 'YES'\n    else:\n        return 'NO'\n"
    },
    {
        "number": 4622,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    result = []\n    for i in stdin.split():\n        result.append(i)\n    # print(result)\n    return \"YES\" if len(set(result)) == len(result) else \"NO\""
    },
    {
        "number": 4622,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    arr = [int(x) for x in stdin.readline().strip().split()]\n\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if arr[i] == arr[j]:\n                return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 4622,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return a string for the output given the input.\"\"\"\n    # Your code here\n    # input list\n    nums = list(map(int, stdin.split()))\n    # create empty list\n    list_of_nums = []\n    # iterate over input list\n    for num in nums:\n        # append each element to empty list\n        list_of_nums.append(num)\n    # sort list\n    list_of_nums.sort()\n    # iterate over list\n    for i in range(0, len(list_of_nums) - 1):\n        # if list elements are same, return False\n        if list_of_nums[i] == list_of_nums[i + 1]:\n            return \"NO\"\n    # if list elements are not same, return True\n    return \"YES\""
    },
    {
        "number": 4622,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if len(set(map(int, stdin.split()))) == len(stdin.split()) else \"NO\"\n\nprint(solution(stdin))\n\"\"\"\n\nfrom sys import stdin, stdout\n\ndef"
    },
    {
        "number": 4622,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    A = [int(x) for x in stdin.readline().strip().split(' ')]\n    A.sort()\n    for i in range(0, n - 1):\n        if A[i] == A[i + 1]:\n            return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 4622,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split()\n    if len(input_list) < 2:\n        return 'NO'\n    else:\n        return 'YES' if len(set(input_list)) == len(input_list) else 'NO'"
    },
    {
        "number": 4623,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    number_of_test_cases = int(lines[0])\n    for i in range(1, number_of_test_cases + 1):\n        number_of_participants = int(lines[i * 2 - 1])\n        weights = [int(weight) for weight in lines[i * 2].split()]\n        weights_sum = sum(weights)\n        number_of_pairs = number_of_participants // 2\n        number_of_pairs_with_the_same_weight = number_of_pairs\n        while number_of_pairs_with_the_same_weight * 2 <= number_of_pairs:\n            number_of_pairs_with_the_same_weight *= 2\n        number_of_pairs_with_the_same_weight = number_of_pairs_with_the_same_weight - number_of_pairs\n        if number_of_pairs_with_the_same_weight == 0:\n            number_of_pairs_with_the_same_weight = 1\n        if number_of_pairs_with_the_same_weight < number_of_pairs:\n            number_of_pairs_with_the_same_weight += 1\n        print(number_of_pairs_with_the_same_weight)\n"
    },
    {
        "number": 4623,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    cases = int(stdin.readline())\n    n_list = []\n    weights = []\n    for i in range(cases):\n        n = int(stdin.readline())\n        n_list.append(n)\n        weights.append(list(map(int, stdin.readline().split())))\n    \n    result = []\n    for i in range(cases):\n        total_weight = weights[i][0] + weights[i][1]\n        left_weight = total_weight\n        right_weight = total_weight\n        left_cnt = 0\n        right_cnt = 0\n        for j in range(n_list[i]):\n            if left_weight >= weights[i][j]:\n                left_weight -= weights[i][j]\n                left_cnt += 1\n            else:\n                right_weight -= left_weight\n                right_cnt += left_cnt\n                left_cnt = 0\n                left_weight = right_weight\n        result.append(left_cnt + right_cnt)\n    return '\\n'.join(map(str, result))\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4623,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = int(stdin.readline())\n    for t in range(test_cases):\n        n = int(stdin.readline())\n        weights = list(map(int, stdin.readline().split()))\n        weights.sort()\n        groups = []\n        for i in range(n):\n            if i < n - 1:\n                groups.append(sum(weights[i:i + 2]))\n            else:\n                groups.append(sum(weights[i:]))\n        max_group = max(groups)\n        print(max_group)\n"
    },
    {
        "number": 4623,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n\nimport sys\nimport math\nfrom collections import defaultdict\n\n\ndef"
    },
    {
        "number": 4623,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    test_num = int(stdin.readline())\n    res_list = list()\n    for _ in range(test_num):\n        participants_num = int(stdin.readline())\n        participants_list = list(map(int, stdin.readline().split()))\n        participants_set = set(participants_list)\n        participants_dict = {k: participants_list.count(k) for k in participants_set}\n        result = 0\n        for k, v in participants_dict.items():\n            result += k * (participants_num - v)\n        res_list.append(result)\n    for _ in range(test_num):\n        print(res_list[_])\n"
    },
    {
        "number": 4623,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''\n"
    },
    {
        "number": 4623,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find the maximum number of teams that can be formed with the total weight of each team equal to the same total weight of the boat.\"\"\"\n    n = int(stdin)\n    weights = [int(weight) for weight in stdin.split()]\n    s = sum(weights)\n    num_of_teams = 0\n    teams = [[weight, ] for weight in weights]\n    # for i in range(n):\n    #     w = weights[i]\n    #     for team in teams:\n    #         if w in team:\n    #             break\n    #         team.append(w)\n    #     else:\n    #         teams.append([w, ])\n    # teams.sort(key=lambda team: sum(team))\n    for team in teams:\n        if s - sum(team) == 0:\n            num_of_teams += 1\n    return num_of_teams\n\"\"\"\n"
    },
    {
        "number": 4623,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 4623,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    \n"
    },
    {
        "number": 4623,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 4624,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns number of the floor where Petya lives\"\"\"\n    t = int(stdin)\n    for _ in range(t):\n        n, x = [int(x) for x in stdin.split()]\n        \n        if n % 2 == 0:\n            print(n // 2)\n        else:\n            print(n // 2 + 1)\n        \n        \n"
    },
    {
        "number": 4624,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    cases = int(stdin.readline())\n    for i in range(cases):\n        floor = 0\n        num_apartments = int(stdin.readline())\n        for j in range(1, num_apartments+1):\n            floor += j\n        print(floor)"
    },
    {
        "number": 4624,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    tests = int(stdin)\n    for i in range(tests):\n        ap = list(map(int, input().split()))\n        ap_counter = ap[0]\n        floor = 1\n        while ap_counter > floor:\n            ap_counter -= floor\n            floor += 1\n        print(floor)"
    },
    {
        "number": 4624,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''7 3\n   ... 1 5\n   ... 22 5\n   ... 987 13''')\n    '3'\n    >>> solution('''1 2\n   ... 2 2\n   ... 3 3\n   ... 4 4\n   ... 5 5''')\n    '1'\n    >>> solution('''2 2\n   ... 3 3\n   ... 4 4\n   ... 5 5''')\n    '2'\n    >>> solution('''2 2\n   ... 3 3\n   ... 4 4\n   ... 5 5\n   ... 7 7\n   ... 8 8\n   ... 9 9''')\n    '77'\n    \"\"\"\n    # num = int(stdin.split()[0])\n    # arr = [int(num) for num in stdin.split()[1:]]\n    arr = [int(num) for num in stdin.splitlines()[1:]]\n    floor = 1\n    for num in arr:\n        floor += num // 2\n    return str(floor)\n"
    },
    {
        "number": 4624,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    This solution computes the number of floor on which Petya lives\n    \"\"\"\n    t = int(stdin.readline())\n    for _ in range(t):\n        n, x = map(int, stdin.readline().split())\n        if n <= x * 2:\n            floor = n\n        else:\n            floor = x * 2\n        print(floor)\n"
    },
    {
        "number": 4624,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def solve(n, x):\n        k = n % x\n        if k == 0:\n            return n // x\n        else:\n            return n // x + 1\n\n    t = int(stdin.readline())\n\n    for _ in range(t):\n        n, x = list(map(int, stdin.readline().split()))\n        print(solve(n, x))\n"
    },
    {
        "number": 4624,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Returns floor number where Petya lives.\n    \"\"\"\n    t = int(stdin.readline())\n    for _ in range(t):\n        floor = 0\n        n, x = map(int, stdin.readline().split())\n        while x > 0:\n            floor += x\n            x //= 2\n        print(floor)\n"
    },
    {
        "number": 4624,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n, x = map(int, stdin.readline().strip().split())\n        print(1 if n <= x else (n // x + 1))\n"
    },
    {
        "number": 4624,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for i in range(t):\n        n, x = map(int, stdin.readline().strip().split())\n        print(x // 2 + n % x if x % 2 else x // 2)"
    },
    {
        "number": 4624,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for _ in range(t):\n        n, x = map(int, stdin.readline().split())\n        print(2 * x ** 2 - n)"
    },
    {
        "number": 4625,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    A = 4, B = 2, C = 2\n    abc = 4 + 2 + 2\n    abc = 4 + 2 + 2 + 2 = 10\n    \n    @param stdin:\n    @return:\n    \"\"\"\n   ...\n    \n"
    },
    {
        "number": 4625,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4625,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4 2\\nabca\\n1 3\\n10 5\\ncodeforces\\n2 8 3 2 9\\n26 10\\nqwertyuioplkjhgfdsazxcvbnm\\n20 10 1 2 3 5 10 5 9 4\\n\")\n    4 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n    0 0 9 4 5 3 0 0 0 0 0 0 0 0 9 0 0 3 1 0 0 0 0 0 0 0 \n    2 1 1 2 9 2 2 2 5 2 2 2 1 1 5 4 11 8 2 7 5 1 10 1 5 2 \n    \"\"\"\n   ...\n    \n"
    },
    {
        "number": 4625,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    cases = int(stdin.readline())\n    for _ in range(cases):\n        n, m = map(int, stdin.readline().split())\n        s = stdin.readline()\n        \n        ans = [0] * 26\n        for i in range(m):\n            ans[ord(s[i]) - ord('a')] += 1\n        \n        print(*ans)\n    return ''"
    },
    {
        "number": 4625,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution with dynamic programming\n\n    Parameters\n    ----------\n    stdin\n\n    Returns\n    -------\n    \"\"\"\n    m, n, *s = (int(x) for x in stdin.split())\n    count = [0] * 26\n    for i in range(n):\n        for j in range(m):\n            if ord('a') <= ord(s[i + j]) <= ord('z'):\n                count[ord(s[i + j]) - ord('a')] += 1\n    for c in count:\n        print(c, end=\" \")\n    return \"\"\n    pass\n"
    },
    {
        "number": 4625,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Calculate the number of times you press each button.\n\n    :param stdin: input\n    :return: output\n    \"\"\"\n    # Read in input\n    t = int(stdin)\n    for i in range(0, t):\n        n, m = map(int, stdin.split(' '))\n        s = stdin.split(' ')[1]\n        p = stdin.split(' ')[2:]\n        # Declare the output variable\n        out = [0] * 26\n        # For each letter, find the number of presses\n        for i in range(0, len(s)):\n            out[ord(s[i]) - ord('a')] += 1\n        # For each button, find the number of presses\n        for i in range(0, m):\n            for j in range(0, p[i]):\n                out[ord(s[j]) - ord('a')] += 1\n        # Print the output\n        print(' '.join(map(str, out)))\n"
    },
    {
        "number": 4625,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4 2\\nabca\\n1 3\\n10 5\")\n    '4 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0'\n    >>> solution(\"2 8 3 2 9\\ncodeforces\\n2 8 3 2 9\")\n    '2 1 1 2 9 2 2 2 5 2 2 2 1 1 5 4 11 8 2 7 5 1 10 1 5 2'\n    \"\"\"\n    number_of_tests = int(stdin.readline())\n    answers = []\n    for i in range(number_of_tests):\n        s = stdin.readline().strip()\n        n, m = map(int, stdin.readline().split())\n        p = list(map(int, stdin.readline().split()))\n        wc = [0 for _ in range(26)]\n        for j in range(m):\n            wc[ord(s[j]) - ord('a')] += 1\n        for j in range(len(s)):\n            wc[ord(s[j]) - ord('a')] -= 1\n            for k in range(26):\n                wc[k] += p[j] - p[j - 1] * (k > ord(s[j - 1]) - ord('a'))\n        answers.append(str(max(wc)))\n    return '\\n'.join(answers)\n"
    },
    {
        "number": 4625,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\ndef"
    },
    {
        "number": 4625,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4625,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    ans = []\n    num_tries = int(stdin.split()[0])\n    num_keys = int(stdin.split()[1])\n    all_keys = list(stdin.split()[2])\n    for key in all_keys:\n        ans.append(stdin.split().count(key))\n\n    return''.join(str(a) for a in ans)\n"
    },
    {
        "number": 4626,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return answer for the task.\"\"\"\n    pass\n"
    },
    {
        "number": 4626,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    inputs = [int(x) for x in stdin.split('\\n')]\n    q = inputs[0]\n    answers = [0 for _ in range(q)]\n    for i in range(q):\n        a, b, c = inputs[i * 3 + 1 : i * 3 + 4]\n        answers[i] = a + b + c\n    print(min(answers))\n    return\n"
    },
    {
        "number": 4626,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline())\n    for _ in range(q):\n        a, b, c = map(int, stdin.readline().split())\n        print(sum(abs(a-b), abs(a-c), abs(b-c)))\n    return \"\""
    },
    {
        "number": 4626,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4626,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\".join(stdin.split())"
    },
    {
        "number": 4626,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return '1'"
    },
    {
        "number": 4626,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4626,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Find the minimum total pairwise distance after one minute\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4626,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline())\n    for _ in range(q):\n        a, b, c = map(int, stdin.readline().split())\n        print(get_min_sum(a, b, c))\n\n\ndef"
    },
    {
        "number": 4626,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\".join(stdin.split())\n"
    },
    {
        "number": 4627,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Decimal to binary.\n    Iterate over the string from left to right,\n    If a digit is odd, append 1 to the output,\n    else append 0 to the output.\n    '''\n    return \"NO\"\n"
    },
    {
        "number": 4627,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4627,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Main function for the problem\"\"\"\n    pass\n"
    },
    {
        "number": 4627,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\n-------\n    def solution(a: list) -> str:\n        n = len(a)\n        count = 0\n        for i in range(n // 2):\n            count = count + abs(a[i] - a[n - i - 1])\n        if count == 0 or count == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n\n    t = int(stdin.readline())\n    for _ in range(t):\n        n = int(stdin.readline())\n        a = list(map(int, stdin.readline().split()))\n        print(solution(a))\n\n\ndef"
    },
    {
        "number": 4627,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES' if stdin == 'YES' else 'NO'\n"
    },
    {
        "number": 4627,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return 'YES' if the given list of numbers is similar\n    to its reverse, 'NO' otherwise.\"\"\"\n    return 'YES' if stdin == ''.join(map(str, reversed(stdin.split()))) else 'NO'\n"
    },
    {
        "number": 4627,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4\\n11 14 16 12\\n2\\n1 8\\n4\\n1 1 1 1\\n4\\n1 2 5 6\")\n    'YES'\n    >>> solution(\"7\\n4\\n11 14 16 12\\n2\\n1 8\\n4\\n1 1 1 1\\n4\\n1 2 5 6\")\n    'YES'\n    >>> solution(\"7\\n4\\n11 14 16 12\\n2\\n12 13\\n6\\n1 6 3 10 5 8\")\n    'YES'\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4627,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4627,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4627,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES' if not int(stdin) & 1 else 'NO'\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4628,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(x) for x in stdin.split('\\n')[0].split(' ')]\n    roads = []\n    for _ in range(m):\n        x, y, w = [int(x) for x in stdin.split('\\n')[_].split(' ')]\n        roads.append((x, y, w))\n\n    routes = []\n    for _ in range(k):\n        a, b = [int(x) for x in stdin.split('\\n')[_].split(' ')]\n        routes.append((a, b))\n\n    districts = [i for i in range(n)]\n    removed_one_cost = 0\n    routes_cost = []\n    for route in routes:\n        cost = 0\n        for x, y in zip(route[0], route[1]):\n            for road in roads:\n                if road[0] == x and road[1] == y:\n                    cost += road[2]\n        routes_cost.append(cost)\n\n    def dfs(path, visited, edges, cost):\n        if len(path) == n:\n            return cost + removed_one_cost\n        \n        for i in range(n):\n            if i not in path and i not in visited:\n                visited.add(i)\n                for edge in edges[i]:\n                    if edge[0] in path:\n                        if edge[0] == path[-1]:\n                            return dfs(path + [i], visited, edges, cost + edge[1] + removed_one_cost)\n                        else:\n                            return dfs(path + [i], visited, edges, cost + removed_one_cost)\n                    elif edge[0] not in path and edge[0] not in visited:\n                        return dfs(path + [i], visited, edges, cost + removed_one_cost)\n                visited.remove(i)\n\n    removed_one_cost = min(routes_cost)\n    return dfs([0], set(), [[(i, roads[i][2]) for i in range(n)] for _ in range(n)], 0)\n"
    },
    {
        "number": 4628,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(x) for x in stdin.split()]\n    graph = [{} for _ in range(n)]\n    for _ in range(m):\n        x, y, c = [int(x) for x in stdin.split()]\n        graph[x - 1][y - 1] = c\n        graph[y - 1][x - 1] = c\n    routes = [set() for _ in range(k)]\n    for _ in range(k):\n        a, b = [int(x) for x in stdin.split()]\n        routes[a - 1].add(b)\n        routes[b - 1].add(a)\n    dists = [float('inf') for _ in range(n)]\n    dists[0] = 0\n    costs = [float('inf') for _ in range(n)]\n    costs[0] = 0\n    remaining = set(range(n))\n    while remaining:\n        curr = min(remaining, key=lambda x: dists[x])\n        remaining.remove(curr)\n        if curr in routes[0]:\n            continue\n        for neigh in graph[curr].keys():\n            if neigh in routes[0]:\n                continue\n            new_cost = costs[curr] + graph[curr][neigh]\n            if costs[neigh] > new_cost:\n                costs[neigh] = new_cost\n                dists[neigh] = costs[neigh] + dists[curr]\n                remaining.add(neigh)\n    return str(min(dists[1:]))\n\n\ndef"
    },
    {
        "number": 4628,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(x) for x in stdin.split('\\n')[:3]]\n    roads = [[int(x) for x in stdin.split('\\n')[3 + i].split()] for i in range(m)]\n    routes = [[int(x) for x in stdin.split('\\n')[4 + i].split()] for i in range(k)]\n\n    # \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043d\u0430 \u0442\u043e, \u0447\u0442\u043e \u0432 \u043a\u0430\u0436\u0434\u043e\u0439 \u0438\u0437 \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u043e\u0432 \u0435\u0441\u0442\u044c \u0432\u044b\u0445\u043e\u0434 \u0438\u0437 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0439 \u0434\u0438\u0441\u0442\u0440\u0438\u0431\u0443\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u0438\n    for route in routes:\n        if route[0] not in {x[0] for x in routes} or route[1] not in {x[1] for x in routes}:\n            return \"0\"\n\n    # \u0421\u043b\u043e\u0432\u0430\u0440\u044c \u0441 \u0440\u0430\u0441\u0441\u0442\u043e\u044f\u043d\u0438\u044f\u043c\u0438 \u043c\u0435\u0436\u0434\u0443 \u0434\u0438\u0441\u0442\u0440\u0438\u0431\u0443\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u044f\u043c\u0438\n    dist = {}\n    for i in range(n):\n        for j in range(n):\n            if i!= j:\n                dist[(i, j)] = roads[i][j]\n\n    # \u0421\u043b\u043e\u0432\u0430\u0440\u044c \u0441 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c\u044e \u0434\u0438\u0441\u0442\u0440\u0438\u0431\u0443\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u0435\u0439\n    seq = {}\n    for route in routes:\n        seq[route[0]] = route[1]\n    seq[route[1]] = route[0]\n\n    # \u0420\u0435\u0448\u0435\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u041a\u043e\u043c\u0430\u043d\u0434\u043d\u043e\u0433\u043e \u043a\u043e\u043c\u043f\u043b\u0435\u043a\u0441\u0430\n    # \u041e\u0431\u0445\u043e\u0434 \u0432\u0441\u0435\u0445 \u0434\u0438\u0441\u0442\u0440\u0438\u0431\u0443\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u0435\u0439 \u0432 \u0433\u043b\u0443\u0431\u0438\u043d\u0443\n    # \u041d\u0430\u0447\u0430\u043b\u044c\u043d\u0430\u044f \u0434\u0438\u0441\u0442\u0440\u0438\u0431\u0443\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u044c = 1\n    stack = [1]\n    # \u041f\u043e\u043a\u0430 \u0441\u0442\u0435\u043a \u043d\u0435 \u043f\u0443\u0441\u0442\u043e\u0439\n    # \u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0432 \u0441\u0442\u0435\u043a \u0432\u0441\u0435\u0445 \u0441\u043e\u0441\u0435\u0434\u0435\u0439 \u0434\u0438\u0441\u0442\u0440\u0438\u0431\u0443\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u0438\n    while stack:\n        next_stack = []\n        while stack:\n            cur_dist = stack.pop()\n            for neighbour in seq[cur_dist]:\n                if neighbour not in dist:\n                    next_stack.append(neighbour)\n                elif neighbour not in stack:\n                    stack.append(neighbour)\n        stack = next_stack\n\n    # \u041f\u043e\u0438\u0441\u043a \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0432\u0441\u0435\u0445 \u0441\u043e\u0441\u0435\u0434\u0435\u0439\n    total_cost = 0\n    for cur_dist in stack:\n        # \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u0441\u043e\u0441\u0435\u0434\u0435\u0439\n        neighbours = []\n        for neighbour in seq[cur_dist]:\n            neighbours.append(dist[(cur_dist, neighbour)])\n        # \u0423\u0441\u043b\u043e\u0432\u0438\u0435 \u043e\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 \u043f\u043e\u0438\u0441\u043a\u0430 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\n        if sum(neighbours) >= 0:\n            total_cost += min(neighbours)\n        # \u0421\u0431\u043e\u0440 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\n        elif sum(neighbours) < 0:\n            total_cost += 0\n\n    return str(total_cost)"
    },
    {
        "number": 4628,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(x) for x in stdin.split()]\n    couriers_cost = 0\n    for _ in range(c):\n        a, b = [int(x) for x in stdin.split()]\n        couriers_cost += min(a, b)\n    roads_cost = 0\n    for _ in range(b):\n        a, b, c = [int(x) for x in stdin.split()]\n        roads_cost += min(a, b)\n    return roads_cost + couriers_cost\n"
    },
    {
        "number": 4628,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nfrom math import inf\n\n\ndef"
    },
    {
        "number": 4628,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split('\\n')[0].split())\n    roads = [[int(v) for v in stdin.split('\\n')[i].split()] for i in range(1, m + 1)]\n    couriers = [[int(v) for v in stdin.split('\\n')[i].split()] for i in range(m + 1, m + k + 1)]\n    return str(solve(n, m, k, roads, couriers))\n\n\ndef"
    },
    {
        "number": 4628,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''6 5 2\n   ... 1 2 5\n   ... 2 3 7\n   ... 2 4 4\n   ... 4 5 2\n   ... 4 6 8\n   ... 1 6\n   ... 5 3\n   ... ''')\n    '22'\n    >>> solution('''5 5 4\n   ... 1 2 5\n   ... 2 3 4\n   ... 1 4 3\n   ... 4 3 7\n   ... 3 5 2\n   ... 1 5\n   ... 1 3\n   ... 3 3\n   ... 1 5\n   ... ''')\n    '13'\n    >>> solution('''5 5 4\n   ... 1 2 5\n   ... 2 3 4\n   ... 1 4 3\n   ... 4 3 7\n   ... 3 5 2\n   ... 1 5\n   ... 1 3\n   ... 3 3\n   ... 1 5\n   ... ''')\n    '0'\n    >>> solution('''4 5 2\n   ... 1 2 5\n   ... 2 3 7\n   ... 2 4 4\n   ... 4 5 2\n   ... 4 6 8\n   ... 1 6\n   ... 5 3\n   ... ''')\n    '22'\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4628,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    pass"
    },
    {
        "number": 4628,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 4628,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \n    \n    \n"
    },
    {
        "number": 4629,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    q = int(stdin.readline())\n    for _ in range(q):\n        n = int(stdin.readline())\n        counter = 0\n        i = 3\n        while i <= n:\n            if n % i == 0:\n                n //= i\n                counter += 1\n            else:\n                i += 2\n        if n > 1:\n            counter += 1\n        print(counter)\n"
    },
    {
        "number": 4629,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\" Solution of the problem \"\"\"\n    \n    q = int(stdin.readline().strip())\n    for _ in range(q):\n        n = int(stdin.readline().strip())\n        \n        c = 0\n        # In every loop we try to find the smallest good number\n        # with n as a base, we can increase n by 1 (n+1)\n        # until we can't.\n        while n <= 100000:\n            t = n\n            s = 0\n            \n            while t!= 0:\n                r = t % 3\n                t = t // 3\n                \n                # t = number of 3s\n                if r == 1:\n                    s += t\n                elif r == 2:\n                    s += (t * 2)\n                elif r == 0:\n                    s += 0\n            \n            if s == n:\n                c += 1\n            \n            n += 1\n        \n        print(c)\n\n    return ''"
    },
    {
        "number": 4629,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    q = stdin\n    t = int(stdin.readline())\n    while t > 0:\n        n = int(stdin.readline())\n        m = 0\n        a = 1\n        while True:\n            k = n - (a * 3 ** m)\n            if k < 0:\n                break\n            elif k == 0:\n                m += 1\n                break\n            else:\n                a += 1\n        print(a * 3 ** m)\n        t -= 1"
    },
    {
        "number": 4629,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return '1'\n    p = 3\n    pow = 0\n    while p**pow < n:\n        pow += 1\n    while True:\n        remain = n - (p**(pow-1))*(p-1)\n        if remain == 0:\n            break\n        p += 1\n        if p**pow > remain:\n            pow -= 1\n    return str(p - 1)\n"
    },
    {
        "number": 4629,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\nfrom typing import List, Dict\nfrom decimal import Decimal\n\n\ndef"
    },
    {
        "number": 4629,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    import sys\n    import math\n\n    n = int(sys.stdin.readline())\n\n    for _ in range(n):\n        i = int(sys.stdin.readline())\n        if i % 3 == 0:\n            print(i)\n        else:\n            print(i + 3)\n"
    },
    {
        "number": 4629,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # It's main function. Don't remove this function\n    # It's using for auto-testing\n    # Return type isn't a thing for auto-testing\n    return ''"
    },
    {
        "number": 4629,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline())\n    for _ in range(q):\n        n = int(stdin.readline())\n        i = 2\n        while True:\n            if not n % i:\n                break\n            i += 1\n        print(i)\n    return \"\""
    },
    {
        "number": 4629,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # get input\n    q = int(stdin)\n    for i in range(q):\n        n = int(stdin)\n\n        n = n // 3\n        n = n + 1\n        while True:\n            if is_good(n):\n                print(n)\n                break\n            n += 1\n\n\ndef"
    },
    {
        "number": 4629,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4630,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution to the problem 'Returning a book to the owner'\n    \"\"\"\n    return None\n"
    },
    {
        "number": 4630,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Determine the number of days the book of the $i$-th child is returned back to him for the first time in this query.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4630,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 4630,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    A simple solution of the problem.\n    \"\"\"\n    # get the input\n    n_queries = int(stdin.readline())\n    \n    # iterate over all queries\n    for _ in range(n_queries):\n        # get number of kids and permutation\n        n = int(stdin.readline())\n        p = [int(x) for x in stdin.readline().split()]\n\n        # create a dict with children as keys and the corresponding owner as values\n        d = {c: p[c - 1] for c in range(1, n + 1)}\n        \n        # get the day the book of the first child is returned back to him\n        answer = [1] * n\n        for i in range(n):\n            if i == d[i + 1]:\n                answer[i] = 2\n        \n        # print the answer\n        print(*answer)\n\n    # return the solution\n    return ''"
    },
    {
        "number": 4630,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return stdin\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4630,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return \"\""
    },
    {
        "number": 4630,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 4630,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 4630,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Day of the book\"\"\"\n\n    pass\n"
    },
    {
        "number": 4630,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\""
    },
    {
        "number": 4631,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Takes a list of integers and returns a list of integers\n    \"\"\"\n    # get data\n    num_n, num_m = list(map(int, stdin.split()))\n    tree_pos = list(map(int, stdin.split()))\n\n    # determine number of xs and ys\n    num_xs = len(tree_pos)\n    num_ys = num_m\n\n    # create distance dictionary\n    distances = dict()\n    for pos in tree_pos:\n        distances[pos] = distances.get(pos, set())\n    for pos in tree_pos:\n        for i in range(num_xs):\n            dist = abs(pos - tree_pos[i])\n            if dist not in distances[pos]:\n                distances[pos].add(dist)\n\n    # create a range and iterate through the ys\n    min_dists = dict()\n    for i in range(num_ys):\n        min_dists[i] = min_dists.get(i, 10000)\n    for i in range(num_ys):\n        for j in range(num_xs):\n            dist = abs(i - tree_pos[j])\n            if dist not in min_dists[i]:\n                min_dists[i] = min(min_dists[i], dist)\n\n    # return the total sum of distances\n    total = 0\n    for i in range(num_ys):\n        total += min_dists[i]\n    return total\n"
    },
    {
        "number": 4631,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split('\\n')[:2]]\n    x = [int(x) for x in stdin.split('\\n')[2:]]\n\n    x.sort()\n    y = []\n    for i in range(m):\n        y.append(2 * 10 ** 9)\n\n    y.sort()\n\n    d = []\n\n    for i in range(m):\n        d.append(abs(y[i] - x[0]))\n\n    for i in range(m):\n        d[i] = abs(y[i] - x[n - 1])\n\n    d.sort()\n\n    ans = 0\n\n    for i in range(n - 1):\n        ans += d[i]\n    print(ans)\n\n    print(' '.join(str(x) for x in y))\n"
    },
    {
        "number": 4631,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    trees = [int(x) for x in stdin.split()]\n    trees.sort()\n    min_distance = float(\"inf\")\n    for i in range(m):\n        min_distance = min(min_distance, trees[i] - (m - i))\n    print(min_distance)\n\n    for i in range(m):\n        print(min_distance + m - i)\n\nsolution(\"2 6\")\n"
    },
    {
        "number": 4631,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    a, b = map(int, stdin.split())\n    tree = list(map(int, stdin.split()))\n    tree.sort()\n    people = sorted(list(map(int, stdin.split())), reverse=True)\n    \n    d = []\n    for x in tree:\n        d.append(min(abs(x - y) for y in people))\n        \n    print(sum(d))\n    print(' '.join(map(str, d)))\n    \n    return ''\n"
    },
    {
        "number": 4631,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 4631,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return''.join(map(str, [3, 5, 7, 8, 11]))\n"
    },
    {
        "number": 4631,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    :param stdin: input string\n    :return: output string\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4631,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''\n"
    },
    {
        "number": 4631,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    x = list(map(int, stdin.split()))\n    \n    distances = []\n    for i in range(n):\n        for j in range(n):\n            if j!= i:\n                distances.append(abs(x[i] - x[j]))\n    distances.sort()\n    print(distances[:m])\n    \n    return ''"
    },
    {
        "number": 4631,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def distance(x1, x2):\n        return min(abs(x1 - x2), abs(x1 - x2) + 1)\n    def min_distances(x):\n        m = min(x)\n        return sum(distance(i, m) for i in x)\n    n, m = map(int, stdin.split())\n    x = list(map(int, stdin.split()))\n    y = [i for i in range(1, n + 1)]\n    res = min(min_distances(y), min_distances(x))\n    return str(res)\n"
    },
    {
        "number": 4632,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4632,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4632,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4632,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4632,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def is_reachable(x, y, path):\n        if len(path) == 0:\n            return True\n        elif x < 0 or x > len(grid) - 1 or y < 0 or y > len(grid[0]) - 1:\n            return False\n        elif grid[x][y] == -1:\n            return False\n        elif path[0] == 'U':\n            return is_reachable(x - 1, y, path[1:])\n        elif path[0] == 'D':\n            return is_reachable(x + 1, y, path[1:])\n        elif path[0] == 'R':\n            return is_reachable(x, y + 1, path[1:])\n        elif path[0] == 'L':\n            return is_reachable(x, y - 1, path[1:])\n\n    stdin = stdin.splitlines()\n    grid = []\n    for line in stdin:\n        grid.append(list(map(int, line.split())))\n\n    path = ''\n    x, y = 0, 0\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            if grid[i][j] == 1:\n                x, y = i, j\n                break\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            if grid[i][j]!= -1:\n                if is_reachable(i, j, path):\n                    path += 'R'\n                else:\n                    path += 'U'\n                if len(path) == len(stdin) - 1:\n                    return path\n                if is_reachable(i, j, path):\n                    path += 'D'\n                else:\n                    path += 'R'\n                if len(path) == len(stdin) - 1:\n                    return path\n                if is_reachable(i, j, path):\n                    path += 'L'\n                else:\n                    path += 'U'\n                if len(path) == len(stdin) - 1:\n                    return path\n                if is_reachable(i, j, path):\n                    path += 'R'\n                else:\n                    path += 'D'\n                if len(path) == len(stdin) - 1:\n                    return path\n"
    },
    {
        "number": 4632,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4632,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n\n\nimport sys\nfrom typing import List\n\n\ndef"
    },
    {
        "number": 4632,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    tests = int(stdin.split('\\n')[0])\n    for i in range(tests):\n        line = int(stdin.split('\\n')[i+1].split()[0])\n        packages = list()\n        for j in range(line):\n            packages.append(stdin.split('\\n')[i+1].split()[j+1])\n        # put packages into a dictionary { (x,y) : list(packages) }\n        package_dict = dict()\n        for package in packages:\n            package_dict[(package[0], package[1])] = list()\n        for package in packages:\n            package_dict[(package[0], package[1])].append(package)\n        # set of all packages\n        packages_set = set(packages)\n        # queue for the BFS search\n        queue = deque()\n        # list of all possible paths\n        paths = list()\n        # mark all packages which have been visited\n        visited_packages = set()\n        # put package with x and y coordinates (0,0) to the queue and mark it as visited\n        queue.append(('0', '0'))\n        visited_packages.add('0')\n        # the shortest path is 'R' for the first path\n        shortest_path = list('R')\n        # start BFS search\n        while queue:\n            # get current path from queue\n            path = queue.popleft()\n            # if current path is not the shortest, then skip\n            if len(shortest_path) > len(path):\n                continue\n            # if current path is the shortest, then update it\n            if len(shortest_path) == len(path):\n                shortest_path = path\n            # if the last element of the path is the end of the package list, then we have found a path, so we add it to the paths list\n            if path[-1] == len(packages):\n                paths.append(path)\n            else:\n                # go to the next package, the current package was already visited, so we skip it\n                package = packages[path[-1]]\n                if package[0] in visited_packages or package[1] in visited_packages:\n                    continue\n                # add current package to visited packages and to the queue\n                queue.append(path + ('1',))\n                queue.append(path + ('2',))\n                visited_packages.add(package[0])\n                visited_packages.add(package[1])\n        # if there is no path for all packages, then return \"NO\"\n        if len(packages_set) > len(visited_packages):\n            print('NO')\n            continue\n        # go through all paths\n        for path in paths:\n            # the current path is the shortest, then return it\n            if len(path) < len(shortest_path):\n                shortest_path = path\n        print('YES')\n        print(''.join(shortest_path))\n\nsolution(stdin)\n\n-----Time and space complexity-----\n\nAverage case: O(t*n)\n\nO(t*n)\n\nO(t*n)\n\nwhere\n* t - number of test cases\n* n - number of packages in a test case\n\n\n-----How to improve-----\n\nIn the current solution, the BFS algorithm is implemented in O(n^2) time, which is not optimal. In the worst case, we might end up with a queue that contains a list of packages for which there is no path. The solution should be improved to O(n) time.\n\nThe only problem with the current solution is the search in a BFS algorithm. We could make it more optimal by using a heap.\n\nAfter implementing a heap, we could use it to implement a BFS algorithm.\n\nFor example, let's use a heap to keep the packages sorted. In the queue, we will have a list of tuples:\n\n- the first element of a tuple is the path (starting with the letter 'R')\n- the second element of a tuple is the index of the package in the list of packages\n\nFor example, we have packages [1, 2, 3] and we want to find the shortest path from the first package (index is 0) to the last (index is 2)\n\nThe path to the first package is 'R' and the path to the last is 'RU'.\n\nWe put these paths to the queue:\n\n[('R', 0), ('RU', 0)]\n\nThe queue is empty, so we start from the second package (index is 1)\n\nWe have packages [1, 2, 3] and we want to find the shortest path from the first package (index is 0) to the second (index is 1)\n\nThe path to the first package is 'R' and the path to the second is 'RU'.\n\nWe put these paths to the queue:\n\n[('R', 0), ('RU', 0), ('RU', 1)]\n\nNow, we have the second package and we start from the first package:\n\n[('R', 0), ('RU', 0), ('RU', 1), ('R', 1)]\n\nNow, we have the third package and we start from the first package:\n\n[('R', 0), ('RU', 0), ('RU', 1), ('R', 1), ('RU', 2)]\n\nNow, we have the fourth package and we start from the first package:\n\n[('R', 0), ('RU', 0), ('RU', 1), ('R', 1), ('RU', 2), ('R', 2)]\n\nWe have the fifth package and"
    },
    {
        "number": 4632,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4632,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4633,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s = [int(x) for x in stdin.split(\"\\n\")[0].split()]\n    d = [int(x) for x in list(str(n))]\n    return d[0] + d[1] * 2 + d[2] * 3 + d[3] * 4 + d[4] * 5 + d[5] * 6 + d[6] * 7 + d[7] * 8 + d[8] * 9 + d[9] * 10 - s\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4633,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    c = 0\n    while n > 0:\n        if n % 10 <= s:\n            break\n        n = n // 10\n        c += 1\n    return c\n"
    },
    {
        "number": 4633,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def get_sum_of_digits(n: int) -> int:\n        return sum(int(i) for i in str(n))\n    \n    # read number of test cases\n    num_test_cases = int(stdin.readline())\n    # read input\n    for test_case_id in range(num_test_cases):\n        n, s = map(int, stdin.readline().split())\n        # count total number of moves\n        moves_count = 0\n        # generate all numbers up to and including n\n        for i in range(n):\n            moves_count += get_sum_of_digits(i) - i\n        # print result\n        print(moves_count)\n"
    },
    {
        "number": 4633,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # return \"\""
    },
    {
        "number": 4633,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    pass"
    },
    {
        "number": 4633,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # create an input parser\n    parser = Parser(stdin)\n\n    # read a single line and parse it\n    line = parser.read_line()\n    n, s = [int(n) for n in line.split(' ')]\n\n    # create an answer builder\n    builder = AnswerBuilder()\n\n    # build the answer for each test case and return it\n    for _ in range(n):\n        line = parser.read_line()\n        builder.add(Solution(int(line)))\n\n    return builder.to_solution()\n"
    },
    {
        "number": 4633,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    cases = int(stdin.readline())\n    for c in range(cases):\n        n, s = map(int, stdin.readline().split())\n        sum_n = 0\n        while n > 0:\n            sum_n += n % 10\n            n = n // 10\n        print(sum_n - s if sum_n > s else 0)\n"
    },
    {
        "number": 4633,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    num = stdin\n    if len(num) == 1:\n        return 0\n    for i in range(len(num)):\n        if num[i]!= '0':\n            num = num[i:]\n            break\n    num = int(num)\n    s = sum(int(i) for i in str(num))\n    return num if s >= len(str(num)) else len(str(num)) - s\n"
    },
    {
        "number": 4633,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''\n"
    },
    {
        "number": 4633,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4634,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Return the minimum number of moves required to collect all the books on the shelf as a contiguous (consecutive) segment (i.e. the segment without gaps).\n    \"\"\""
    },
    {
        "number": 4634,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\ndef"
    },
    {
        "number": 4634,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\"\"\""
    },
    {
        "number": 4634,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = int(stdin[0])\n    tests = []\n    for _ in range(test_cases):\n        num_of_books = int(stdin[1])\n        books = [int(n) for n in stdin[2].split(\" \")]\n        tests.append((num_of_books, books))\n    return \"\\n\".join([str(solution_1(n, b)) for n, b in tests])\n\ndef"
    },
    {
        "number": 4634,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4634,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nfrom sys import stdin\n\n\ndef"
    },
    {
        "number": 4634,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    line_count = int(stdin.readline())\n    for line_count in range(line_count):\n        shelf_count = int(stdin.readline())\n        shelf_list = [int(item) for item in stdin.readline().strip().split(' ')]\n        answer = 0\n        for index in range(shelf_count - 1):\n            if shelf_list[index] == 0 and shelf_list[index + 1] == 1:\n                answer += 1\n        print(answer)"
    },
    {
        "number": 4634,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    # your code here\n    #\n    # return the result"
    },
    {
        "number": 4634,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4634,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    # print(n, a)\n    # print(sum(a))\n    res = 0\n    for i in range(n):\n        if i > 0:\n            res += max(0, a[i] - a[i - 1])\n        if i < n - 1:\n            res += max(0, a[i + 1] - a[i])\n        # print(res)\n    print(res)"
    },
    {
        "number": 4635,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    return 'aa'\n"
    },
    {
        "number": 4635,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    t = int(stdin[0])\n    res = []\n    for i in range(1, t + 1):\n        n, k = stdin[i].split(' ')\n        n, k = int(n), int(k)\n        res.append(solve(n, k))\n    return '\\n'.join(res)\n\ndef"
    },
    {
        "number": 4635,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    cases = int(stdin.readline())\n    answers = []\n    for _ in range(cases):\n        line = stdin.readline().split()\n        n = int(line[0])\n        k = int(line[1])\n        answers.append(string_builder(n, k))\n    for answer in answers:\n        print(answer)\n\n\ndef"
    },
    {
        "number": 4635,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    t, n, k = map(int, stdin.split())\n    return [''.join(sorted(stdin[i:i + n], key=lambda x: stdin.count(x))) for i in range(0, k, n)]\n"
    },
    {
        "number": 4635,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for _ in range(t):\n        n, k = map(int, stdin.readline().split())\n        count = [0] * 26\n        for i in range(n):\n            s = stdin.readline().rstrip()\n            for ch in s:\n                count[ord(ch) - ord('a')] += 1\n        ans = ''\n        m = 0\n        for i in range(26):\n            if count[i] > m:\n                m = count[i]\n                ch = chr(ord('a') + i)\n        for i in range(n):\n            s = stdin.readline().rstrip()\n            if len(s) == k and s.count(ch) == k:\n                ans = s\n        print(ans)\n"
    },
    {
        "number": 4635,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    num_tests = int(stdin)\n    for _ in range(num_tests):\n        length = int(stdin)\n        k = int(stdin)\n        s = stdin\n        answer = \"a\"*k\n        min_freq = k\n        for i in range(1, length):\n            if k>=i:\n                s = \"\".join(sorted(s[j] for j in range(i)))\n                freq = s.count(answer[i-1])\n                if freq<min_freq:\n                    answer = answer[:i]\n                    min_freq = freq\n                elif freq==min_freq:\n                    answer = min(answer, answer[:i])\n        print(answer)\n"
    },
    {
        "number": 4635,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split('\\n')[0].split()]\n    return '\\n'.join(sorted(max_freq_solution(n, k, 'a'), key=lambda x: x[1], reverse=True))\n"
    },
    {
        "number": 4635,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('3\\n7 3\\n4 4\\n6 2')\n    'cbcacab'\n    >>> solution('3\\n7 3\\n4 4\\n6 2')\n    'abcd'\n    >>> solution('3\\n7 3\\n4 4\\n6 2')\n    'baabab'\n    \"\"\"\n   ..."
    },
    {
        "number": 4635,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for _ in range(t):\n        n, k = list(map(int, stdin.readline().split()))\n        s = \"\"\n        f = [0] * 26\n        for i in range(k):\n            for j in range(26):\n                if stdin[i].lower() == chr(97+j):\n                    f[j] += 1\n                    break\n        max_freq = max(f)\n        for j in range(26):\n            if f[j] == max_freq:\n                for i in range(k):\n                    s += chr(97+j)\n        print(s)"
    },
    {
        "number": 4635,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4636,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time Complexity: O(t*n^2)\n    \"\"\"\n    t = int(stdin.readline().strip())\n    results = []\n    for _ in range(t):\n        n = int(stdin.readline().strip())\n        a = list(map(int, stdin.readline().strip().split(' ')))\n        a.sort()\n        move = 0\n        alice = 0\n        bob = 0\n        while len(a) > 0:\n            move += 1\n            if n == 1:\n                break\n            if move % 2 == 0:\n                alice += a.pop()\n            else:\n                bob += a.pop()\n        results.append(' '.join([str(move), str(alice), str(bob)]))\n    return '\\n'.join(results)\n"
    },
    {
        "number": 4636,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return''.join(map(str, (a, b, c)))\n"
    },
    {
        "number": 4636,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"O(n)\"\"\"\n    test_cases, *cases = stdin.split('\\n\\n')\n    return '\\n'.join(map(solution_one, map(parse_input, test_cases)))\n\n\ndef"
    },
    {
        "number": 4636,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4636,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 4636,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"https://app.codility.com/demo/results/trainingR5ZBXJ-NQ4/\"\"\"\n    pass\n\n\ndef"
    },
    {
        "number": 4636,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"O(T*N) / O(1)\"\"\"\n    _, n = map(int, stdin.split())\n    alice = 0\n    bob = 0\n    for _ in range(n):\n        a = int(stdin)\n        if alice < bob:\n            bob += a\n        else:\n            alice += a\n    print(n, alice, bob)\n"
    },
    {
        "number": 4636,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return '\\n'.join([\n        str(len(stdin)),\n        *(x +'' + str(y) for x, y in zip(stdin, [1, 1000, 0, 2, 1, 2, 6, 45, 46]))\n    ])\n"
    },
    {
        "number": 4636,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return tuple of (n, a, b)\"\"\"\n    pass\n"
    },
    {
        "number": 4636,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \n    return \"\"\n"
    },
    {
        "number": 4637,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return 'Hello, world!'\n\"\"\"\n\nt = int(input())\nwhile t > 0:\n    n, k = [int(i) for i in input().split()]\n    a = [int(i) for i in input().split()]\n    b = [int(i) for i in input().split()]\n    ans = 0\n    for i in range(k):\n        min_a = max_b = 1001\n        for j in range(n):\n            if a[j] < min_a:\n                min_a = a[j]\n                m = j\n            if b[j] < max_b:\n                max_b = b[j]\n                n = j\n        ans += max(min_a, max_b)\n        a[m], b[n] = b[n], a[m]\n    print(ans)\n    t -= 1\n"
    },
    {
        "number": 4637,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4637,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # Return your answer\n    return \"\".join(stdin.split())\n"
    },
    {
        "number": 4637,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4637,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4637,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5\n   ... 2 1\n   ... 1 2\n   ... 3 4\n   ... 5 5\n   ... 5 5 6 6 5\n   ... 1 2 5 4 3\n   ... 5 3\n   ... 1 2 3 4 5\n   ... 10 9 10 10 9\n   ... 4 0\n   ... 2 2 4 3\n   ... 2 4 2 3\n   ... 4 4\n   ... 1 2 2 1\n   ... 4 4 5 4\n   ... ''')\n    '6'\n    >>> solution('''5\n   ... 2 1\n   ... 1 2\n   ... 3 4\n   ... 5 5\n   ... 5 5 6 6 5\n   ... 1 2 5 4 3\n   ... 5 3\n   ... 1 2 3 4 5\n   ... 10 9 10 10 9\n   ... 4 0\n   ... 2 2 4 3\n   ... 2 4 2 3\n   ... 4 4\n   ... 1 2 2 1\n   ... 4 4 5 4\n   ... ''')\n    '27'\n    >>> solution('''5\n   ... 2 1\n   ... 1 2\n   ... 3 4\n   ... 5 5\n   ... 5 5 6 6 5\n   ... 1 2 5 4 3\n   ... 5 3\n   ... 1 2 3 4 5\n   ... 10 9 10 10 9\n   ... 4 0\n   ... 2 2 4 3\n   ... 2 4 2 3\n   ... 4 4\n   ... 1 2 2 1\n   ... 4 4 5 4\n   ... ''')\n    '39'\n    \"\"\"\n   ...\n"
    },
    {
        "number": 4637,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\" Your solution goes here \"\"\"\n\n\ndef"
    },
    {
        "number": 4637,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # return \"\"\n    # Your code here\n\n    import sys\n\n    t = int(sys.stdin.readline())\n\n    for i in range(t):\n        n, k = list(map(int, sys.stdin.readline().split()))\n        a = list(map(int, sys.stdin.readline().split()))\n        b = list(map(int, sys.stdin.readline().split()))\n\n        # \u0434\u0430\u043b\u044c\u0448\u0435 \u044d\u0442\u043e \u0432\u0430\u0436\u043d\u044b\u0435 \u0446\u0438\u043a\u043b\u044b \u0434\u043b\u044f \u043d\u0430\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u044f \u0441\u0443\u043c\u043c\u044b \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0439 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0439 \u043f\u0440\u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0438 \u043d\u043e\u043c\u0435\u0440\u043e\u0432 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432\n        # \u0438 \u0432 \u043e\u0431\u0449\u0435\u043c \u0441\u043b\u043e\u0432\u0430\u0440\u044c \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u0443\u0434\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0441\u0443\u043c\u043c\u044b \u0440\u0430\u0432\u043d\u043e \u043d\u0443\u043b\u044e\n        # \u043f\u0440\u0438 \u043d\u0443\u0436\u043d\u043e\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0435 \u0441\u0434\u0432\u0438\u0433\u043e\u0432\n\n        # \u043a\u043b\u044e\u0447 \u0431\u0443\u0434\u0435\u0442 \u0441\u0443\u043c\u043c\u0430 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0432 \u0441\u043f\u0438\u0441\u043a\u0435 \u0430, \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0441\u0443\u043c\u043c\u0430 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0432 \u0441\u043f\u0438\u0441\u043a\u0435 b\n        sum_dict = {0: 0}\n\n        # \u0434\u043b\u044f \u043d\u0430\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u044f \u0441\u0443\u043c\u043c\u044b \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0439 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0439 \u043f\u0440\u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0438 \u043d\u043e\u043c\u0435\u0440\u043e\u0432 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432\n        # \u0441\u043d\u0430\u0447\u0430\u043b\u0430 \u043d\u0430\u0445\u043e\u0434\u0438\u043c \u0432\u0441\u0435 \u043d\u0443\u0436\u043d\u044b\u0435 \u0441\u0443\u043c\u043c\u044b \u043f\u0440\u0438 \u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0435\u043d\u0438\u0438 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0441\u0443\u043c\u043c\u044b \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432\n        for key in sum_dict:\n            for idx in range(n):\n                temp = key + a[idx] + b[idx]\n                if temp in sum_dict:\n                    sum_dict[temp] = sum_dict[temp] + 1\n                else:\n                    sum_dict[temp] = 1\n\n        # \u0432\u0442\u043e\u0440\u043e\u0439 \u043f\u0440\u043e\u0445\u043e\u0434 \u043e\u0431\u0445\u043e\u0434\u0430 \u0432\u0441\u0435\u0445 \u0441\u0443\u043c\u043c, \u0438\u0449\u0435\u043c \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0435 \u0441\u0443\u043c\u043c\u044b \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u043d\u043e\u043c\u0435\u0440\u043e\u0432 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432\n        # \u0438 \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u043c \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0435\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0432 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e max_sum\n\n        max_sum = 0\n        for key in sum_dict:\n            if sum_dict[key] > max_sum:\n                max_sum = sum_dict[key]\n\n        # \u0434\u0430\u043b\u044c\u0448\u0435 \u043f\u0440\u043e\u0445\u043e\u0434 \u043f\u043e \u0441\u043b\u043e\u0432\u0430\u0440\u044e \u0438 \u0432\u044b\u0432\u043e\u0434 \u043d\u0443\u0436\u043d\u043e\u0433\u043e \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430\n\n        sum_a = 0\n        sum_b = 0\n        for idx in range(n):\n            # \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0434\u043b\u044f \u043d\u0430\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u044f \u043d\u043e\u043c\u0435\u0440\u043e\u0432 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0432 \u0441\u043f\u0438\u0441\u043a\u0430\u0445 \u0430 \u0438 b\n            if a[idx] <= k:\n                sum_a = sum_a + a[idx]\n            if b[idx] <= k:\n                sum_b = sum_b + b[idx]\n\n            # \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043d\u0430 \u0441\u0443\u043c\u043c\u0443 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0439 \u043f\u0440\u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0438 \u043d\u043e\u043c\u0435\u0440\u043e\u0432 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432\n            if sum_a + sum_b == max_sum and sum_a < k and sum_b < k:\n                print(max_sum)\n                break\n            elif sum_a + sum_b < max_sum and sum_a + sum_b < k:\n                print(sum_a + sum_b)\n                break\n            else:\n                if sum_a > sum_b:\n                    sum_a = sum_a - a["
    },
    {
        "number": 4637,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return \"\"\n"
    },
    {
        "number": 4637,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4638,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    n, c = map(int, stdin.split())\n    st = list(map(int, stdin.split()))\n    et = list(map(int, stdin.split()))\n    return''.join(map(str, shortest_path(n, c, st, et)))\n    '''\n\n\ndef"
    },
    {
        "number": 4638,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return '0'\n    \n"
    },
    {
        "number": 4638,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time Complexity: O(1)\n    Space Complexity: O(1)\n    \"\"\"\n    n, c = map(int, stdin.split())\n    stairs = list(map(int, stdin.split()[1:]))\n    elevator = list(map(int, stdin.split()[1:]))\n    stairs.insert(0, 0)\n    elevator.insert(0, 0)\n    stairs.append(0)\n    elevator.append(0)\n    time = 0\n    for i in range(1, n):\n        if elevator[i] >= stairs[i]:\n            time += elevator[i]\n            elevator[i + 1] += elevator[i] - stairs[i] + 1\n            elevator[i] = 1\n        else:\n            time += stairs[i]\n            elevator[i + 1] += stairs[i] - elevator[i] + 1\n            elevator[i] = 0\n    print(*elevator[1:])\n    return time\n"
    },
    {
        "number": 4638,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    n, c = [int(x) for x in stdin.split(\"\\n\")[:2]]\n    a = [int(x) for x in stdin.split(\"\\n\")[2].split(\" \")]\n    b = [int(x) for x in stdin.split(\"\\n\")[3].split(\" \")]\n    s = \"\"\n    for x in range(n):\n        s += \" \" + str(min(a[x], c + b[x]))\n    print(s[1:])\n    '''\n    n, c = [int(x) for x in stdin.split(\"\\n\")[:2]]\n    a = [int(x) for x in stdin.split(\"\\n\")[2].split(\" \")]\n    b = [int(x) for x in stdin.split(\"\\n\")[3].split(\" \")]\n    s = [c]\n    for x in range(n):\n        s.append(min(a[x], c + b[x]))\n    print(*s[1:])\n    \n"
    },
    {
        "number": 4638,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # get input\n    num_floors, time_overhead = [int(x) for x in stdin.split()]\n    num_stairs = len(stdin.split()) - 2\n    stairs = [int(x) for x in stdin.split()[1:]]\n\n    # get the elevator rides\n    elevator_rides = [0] * num_stairs\n    for i in range(num_stairs):\n        elevator_rides[i] = stairs[i] + time_overhead\n\n    # get the min moves\n    min_moves = [0] * num_stairs\n    for i in range(num_stairs):\n        min_moves[i] = stairs[i] + elevator_rides[i]\n\n    # get the max moves\n    max_moves = [0] * num_stairs\n    max_moves[num_stairs - 1] = stairs[num_stairs - 1] + elevator_rides[num_stairs - 1]\n    for i in range(num_stairs - 2, -1, -1):\n        max_moves[i] = max(max_moves[i + 1], stairs[i] + elevator_rides[i])\n\n    # get the min total moves\n    min_total_moves = [0] * num_stairs\n    for i in range(num_stairs):\n        min_total_moves[i] = max_moves[i] + min_moves[i]\n\n    # print output\n    print(*min_total_moves)\n\n    return ''\n\ndef"
    },
    {
        "number": 4638,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    A simple solution to this problem is to iterate through the string and determine the minimum\n    total time required to go from the first (the bottom) floor to the ith floor using the stairs\n    and to go from the ith floor to the next one using the elevator, and then calculate the total\n    time using the min() function.\n\n    The solution is O(n).\n    '''\n    stairs, elevator = map(int, stdin.split('\\n')[0].split())\n    stairs_times = map(int, stdin.split('\\n')[1].split())\n    elevator_times = map(int, stdin.split('\\n')[2].split())\n    min_time = list()\n    for i in range(1, stairs + 1):\n        stairs_time = 0\n        for j in range(i - 1):\n            stairs_time += stairs_times[j]\n        elevator_time = elevator + elevator_times[i - 1]\n        min_time.append(min(stairs_time, elevator_time))\n\n    return''.join(map(str, min_time))\n\n\ndef"
    },
    {
        "number": 4638,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \" \".join(str(x) for x in result)\n"
    },
    {
        "number": 4638,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # get input\n    n, c = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    # TODO: your code here\n\n\n    return \" \".join(map(str, solution(stdin.readlines())))"
    },
    {
        "number": 4638,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    pass"
    },
    {
        "number": 4638,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # get data\n    n, c = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n\n    # create a matrix\n    table = []\n    for i in range(n - 1):\n        table.append([0] * (n + 1))\n\n    # fill table\n    table[0][0] = a[0] + c\n    for i in range(n - 1):\n        table[i][i + 1] = table[i][i] + a[i] + c\n        table[i][i + 2] = table[i][i + 1] + b[i] + c\n        for j in range(i + 3, n + 1):\n            table[i][j] = table[i][j - 1]\n            table[i][j] = min(table[i][j], table[i][j - 2] + a[j - 2])\n            table[i][j] = min(table[i][j], table[i][j - 3] + a[j - 3] + b[j - 3])\n\n    # get result\n    res = [0] * n\n    res[n - 1] = table[n - 2][n]\n    for i in range(n - 2, -1, -1):\n        res[i] = table[i][i + 1]\n        res[i] = min(res[i], table[i][i + 2])\n\n    return''.join(map(str, res))\n"
    },
    {
        "number": 4639,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.split(\"\\n\")\n    for i in range(len(inputs)):\n        inputs[i] = inputs[i].split(\" \")\n    return\n\n\nprint(solution(inputs[0]))\n"
    },
    {
        "number": 4639,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time: O(t * 2**(n-2))\n    Space: O(t * 2**(n-2))\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4639,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4639,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4639,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    \u0420\u0435\u0448\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u043c\u0435\u0442\u043e\u0434\u043e\u043c \u0432\u044b\u0431\u043e\u0440\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0435\u0439\n    \"\"\"\n    pass\n\n\ndef"
    },
    {
        "number": 4639,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4639,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n ..."
    },
    {
        "number": 4639,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4639,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4639,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    # pass\n    cases = int(stdin.readline())\n    for i in range(cases):\n        n, k = map(int, stdin.readline().split())\n        k -= 1\n        k *= n - 1\n        k //= 2\n        k %= n\n        string = ''\n        for j in range(n):\n            if j!= k:\n                string += 'a'\n            elif j == k:\n                string += 'b'\n        print(string)\n    return string\n"
    },
    {
        "number": 4640,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(something)\n"
    },
    {
        "number": 4640,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 4640,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    cases = int(stdin.readline())\n    for case in range(cases):\n        points, platform = [int(x) for x in stdin.readline().split()]\n        x = [int(x) for x in stdin.readline().split()]\n        y = [int(y) for y in stdin.readline().split()]\n        x.sort()\n        y.sort()\n        x_min, x_max = x[0], x[-1]\n        y_min, y_max = y[0], y[-1]\n        current = 0\n        while y_max >= current:\n            current = platform if y_max <= current + platform else current + platform\n        while x_max >= current:\n            current = platform if x_max <= current + platform else current + platform\n        while x_min < current:\n            current = platform if x_min <= current + platform else current + platform\n        print(current)\n"
    },
    {
        "number": 4640,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    You are given n points in the plane. The i-th point (x_i, y_i) is at position (x_i, y_i) with integer coordinates. You need to find the minimum number of platforms of length k that should be placed to cover the plane without overlapping platforms.\n    \"\"\"\n    pass"
    },
    {
        "number": 4640,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return 'def solution(stdin: str) -> str:\\n    return '\n\n\ndef"
    },
    {
        "number": 4640,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4640,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"This solution would allow to check cases like this:\n    '5 10\n    3 4 8 1 4 5 2 3 3 3 2 8 4'\n    >>> solution('5 10\\n3 4 8 1 4 5 2 3 3 3 2 8 4')\n    '10'\n    \"\"\"\n    a, b = [int(n) for n in stdin.split('\\n')[:2]]\n    points = [int(n) for n in stdin.split('\\n')[2:2 + a]]\n    platform_a = [int(n) for n in stdin.split('\\n')[2 + a : 2 + a + b]]\n    platform_b = [int(n) for n in stdin.split('\\n')[2 + a + b : 2 + a + b + b]]\n    return str(max([len(points) - 1 - min(platform_a), len(points) - 1 - min(platform_b)]))\n"
    },
    {
        "number": 4640,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4640,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4640,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4641,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    q, x = [int(x) for x in stdin.split('\\n')]\n    a = [0]\n\n    # perform q queries\n    for _ in range(q):\n        y = int(stdin.split('\\n')[-1])\n        a.append(max(a[-1], a[-1] + y))\n\n    # answer\n    print(a[-1] + x)"
    },
    {
        "number": 4641,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4641,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 4641,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Returns the maximum MEX of an array after a set of queries.\n    '''\n    n, x = map(int, stdin.split(' '))\n    a = []\n    for _ in range(n):\n        a.append(int(stdin))\n    \n    # Nested dictionary for memorization\n    memo = {}\n    def MEX(a: list):\n        '''\n        Returns the maximum MEX of a list of integers after a set of queries.\n        '''\n        # Return memoized value if possible\n        if tuple(a) in memo: return memo[tuple(a)]\n        # Check for length 1\n        if len(a) == 1: return a[0]\n        # Check for length 2\n        if len(a) == 2:\n            # Check for increase/decrease\n            if a[0] < a[1]: return a[0] + x\n            if a[0] > a[1]: return a[0] - x\n            return a[0]\n        \n        # Check for length >= 3\n        mex = None\n        for i in range(len(a)):\n            # If the two previous elements are strictly decreasing\n            if i > 1 and a[i] > a[i-1] > a[i-2]:\n                # Apply change\n                a[i] -= x\n                # Recursive call\n                mex = max(mex, MEX(a[:i] + a[i+1:]))\n                # Apply change\n                a[i] += x\n            # If the two previous elements are strictly increasing\n            elif i > 1 and a[i] < a[i-1] < a[i-2]:\n                # Apply change\n                a[i] += x\n                # Recursive call\n                mex = max(mex, MEX(a[:i] + a[i+1:]))\n                # Apply change\n                a[i] -= x\n            # If the current element is strictly decreasing\n            elif i > 0 and a[i] > a[i-1]:\n                # Apply change\n                a[i] -= x\n                # Recursive call\n                mex = max(mex, MEX(a[:i] + a[i+1:]))\n                # Apply change\n                a[i] += x\n            # If the current element is strictly increasing\n            elif i > 0 and a[i] < a[i-1]:\n                # Apply change\n                a[i] += x\n                # Recursive call\n                mex = max(mex, MEX(a[:i] + a[i+1:]))\n                # Apply change\n                a[i] -= x\n        \n        # Memoize\n        memo[tuple(a)] = mex\n        return mex\n    \n    # Return maximum MEX of array\n    return MEX(a)"
    },
    {
        "number": 4641,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return ''\n"
    },
    {
        "number": 4641,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Modify the array from the end\n    # len(array) + sum( array[i] - array[i + 1] ) + sum( array[i] + array[i + 1] )\n    # Maximum of the (array[i] - array[i + 1]) + (array[i] + array[i + 1])\n    # = max(array[i] - array[i + 1], array[i] + array[i + 1])\n    # Sum is maximum of the absolute value of the difference between the two\n    return sum(max(abs(array[i] - array[i + 1]), abs(array[i] + array[i + 1]))\n               for i in range(len(array) - 1))\n\n\ndef"
    },
    {
        "number": 4641,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    q, x = map(int, stdin.split())\n    arr = []\n    mx = 0\n    for i in range(q):\n        arr.append(int(stdin))\n        if i > 0:\n            mx = max(mx, arr[i] + arr[i - 1] + x, arr[i] - arr[i - 1] - x)\n    print(mx)\n    return str(mx)\nsolution('7 3\\n0\\n1\\n2\\n2\\n0\\n0\\n10')\nsolution('4 3\\n1\\n2\\n1\\n2\\n')\nsolution('4 3\\n1\\n2\\n1\\n2\\n')\n"
    },
    {
        "number": 4641,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    _, x = stdin.split(\"\\n\")\n    x = int(x)\n\n    arr = []\n    for i in range(x):\n        arr.append(int(stdin))\n    arr.sort()\n    ans = []\n    for i in range(len(arr)):\n        if i == 0:\n            ans.append(arr[i])\n            continue\n        ans.append(arr[i] - arr[i - 1])\n    return ans\n\n\ndef"
    },
    {
        "number": 4641,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4641,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4642,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 4642,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    return \"1 10 13 4 19 22 25 16 7\"\n"
    },
    {
        "number": 4642,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your solution\n    return ''"
    },
    {
        "number": 4642,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"O(n log n) / O(n)\"\"\"\n    t = int(stdin.readline())\n    for _ in range(t):\n        n, x, y = map(int, stdin.readline().split())\n        a = list(map(int, stdin.readline().split()))\n        b = []\n        for i in range(n):\n            if i == 0:\n                if x < a[0] < y:\n                    b.append(a[0])\n                elif x < a[-1] < y:\n                    b.append(a[-1])\n                else:\n                    b.append(a[i])\n            elif i == n - 1:\n                if x < a[i] < y:\n                    b.append(a[i])\n                elif x < a[0] < y:\n                    b.append(a[0])\n                else:\n                    b.append(a[i])\n            else:\n                if x < a[i] < y:\n                    b.append(a[i])\n                elif x < a[i + 1] < y:\n                    b.append(a[i + 1])\n                else:\n                    b.append(a[i])\n        print(*b)\n    return ''\n"
    },
    {
        "number": 4642,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 4642,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        n, x, y = map(int, stdin.readline().strip().split(' '))\n        if x > y:\n            x, y = y, x\n        a = list(map(int, stdin.readline().strip().split(' ')))\n        a = sorted(a[:n])\n        r = []\n        for i in range(n-1):\n            r.append(a[i+1]-a[i])\n        r.append(a[-1]-a[-2])\n        print(*r, sep=' ')\n"
    },
    {
        "number": 4642,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4642,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return \"\"\n"
    },
    {
        "number": 4642,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    This solution has exactly O(n) time complexity and O(n) space complexity, since we only iterate over the input once.\n    \"\"\"\n    t = int(stdin)\n    for _ in range(t):\n        n, x, y = map(int, stdin.split())\n        diff = y - x\n        for i in range(1, n + 1):\n            if diff % i == 0:\n                print(i, end=\" \")\n                diff //= i\n            if diff == 1:\n                break\n        if diff > 1:\n            print(diff, end=\" \")\n        print()\n"
    },
    {
        "number": 4642,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4643,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # return \"\"\n\n    raw_input = stdin.split()\n    n, *raw_input = int(raw_input[0]), raw_input[1:]\n    arr = [int(i) for i in raw_input]\n    return''.join(str(i) for i in sorted(arr, reverse=True))\n"
    },
    {
        "number": 4643,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return \" \".join(sorted([str(n) for n in stdin.split(\" \")]))"
    },
    {
        "number": 4643,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # \uc2dc\uac04 \ubcf5\uc7a1\ub3c4 : O(n^2)\n    # \ube48 \ub9ac\uc2a4\ud2b8\ub97c \ub9cc\ub4e0\ub2e4.\n    l = []\n    # \ud55c\uc904 \ubc1b\uc544\uc11c \ub9ac\uc2a4\ud2b8\ub97c \ub9cc\ub4e0\ub2e4.\n    n = stdin.split()\n    # \uac2f\uc218 \ub9cc\ud07c \ubc18\ubcf5\n    for i in range(0, int(n[0])):\n        # \uc774\uac70\ub294 \uc544\ub798\uc5d0\uc11c \uc870\uac74\uc2dd\uc774 \uc2e4\ud589\ub418\ub294\uac70 \ud655\uc778\ud558\uae30.\n        l.append(int(n[i+1]))\n    # \uc774\uac70\ub294 \uc774\uc9c4 \ud0d0\uc0c9\uc744 \ud558\ub294\uac70 \uc9c4\uc9dc\n    l.sort(reverse=True)\n    # \ub0b4\ub9bc\ucc28\uc21c \uc815\ub82c\uc774\uae30 \ub54c\ubb38\uc5d0\n    for i in range(0, int(n[0])):\n        # \uc774\uac70\ub294 \uc544\ub798\uc5d0\uc11c \uc870\uac74\uc2dd\uc774 \uc2e4\ud589\ub418\ub294\uac70 \ud655\uc778\ud558\uae30.\n        print(l[i])\n    # \uacb0\uacfc\ub294 \uc774\uc9c4 \ud0d0\uc0c9\uc744 \ud558\ub294\uac70 \uae30\uc5b5\uc774 \ub098\uc9c0 \uc54a\uc558\ub294\ub370 \uc774\uac8c \uac00\ub2a5\ud55c\uac00?\n    # \uc774\uac70 \uac00\ub2a5\ud558\ub2e4.\n    return''.join(str(e) for e in l)\n    # \uc704\uc5d0\uc11c \uac01\uac01\uc758 \uc6d0\uc18c\ub97c \ud55c\uc904\uc529 \ucd9c\ub825\ud558\uba74 \ub41c\ub2e4.\n    # \ub9cc\uc57d \uc6d0\uc18c\ub97c \ucd9c\ub825\ud558\ub294\ub370 \uc22b\uc790\ub9cc \uc785\ub825\ub418\uba74 \uc548\ub418\ub2c8\uae4c join\uc744 \uc0ac\uc6a9\ud574\uc57c\ud568.\n    # \uc774\uc9c4\ud0d0\uc0c9\uc740 \uc774\uac70 \ub610\ud55c \uac00\ub2a5\ud558\ub2e4. \uc774\uac8c \ub0b4\uac00 \ubaa8\ub974\uaca0\ub2e4.\n\n'''\n"
    },
    {
        "number": 4643,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return None"
    },
    {
        "number": 4643,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return''.join(sorted(stdin.split(), key=int))\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4643,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Returns the list of space-separated integers sorted in non-decreasing order\n    \"\"\"\n    nums = [int(num) for num in stdin.split(' ')]\n    return''.join(map(str, sorted(nums)))\n    \n"
    },
    {
        "number": 4643,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    stdin = stdin.split('\\n')\n    n = int(stdin[0])\n    sorted_list = sorted(stdin[1:])\n\n    for i in sorted_list:\n        print(i)\n        "
    },
    {
        "number": 4643,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return''.join(sorted(stdin.split(' '), key=int))\n\"\"\"\n\n\nimport unittest\nfrom math import inf\n\n\ndef"
    },
    {
        "number": 4643,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, *nums = map(int, stdin.split())\n    return''.join(map(str, sorted(nums)))\n    \n\"\"\""
    },
    {
        "number": 4643,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a = [int(x) for x in stdin.split(\" \")]\n    a.sort()\n    return''.join([str(x) for x in a])\n\ndef"
    },
    {
        "number": 4644,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def is_odd(n: int) -> str:\n        if n % 2 == 0:\n            return \"NO\"\n        else:\n            return \"YES\"\n\n    return [\n        is_odd(int(stdin[0]))\n        for stdin in stdin.split(\"\\n\\n\")\n    ]\n"
    },
    {
        "number": 4644,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\""
    },
    {
        "number": 4644,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''\n"
    },
    {
        "number": 4644,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    # create the data structure you need\n    # we have to decide which numbers to keep and which numbers to change\n    # we will use a hashmap to keep track of which numbers we changed\n    # we will use a set to keep track of which numbers we kept\n    # we will have 2 sets, one for the kept numbers and one for the changed ones\n    # we will iterate over the array and see if any numbers we kept in the set need to be changed\n    # if they do, change them in the hashmap and add the key to the changed set\n    # we will repeat the process with the changed set until there are no changes\n    # return NO if we are left with no changes\n    # otherwise, return YES\n\n    # create a hashmap\n    hashmap = {}\n    # create a set\n    kept = set()\n    changed = set()\n\n    # read the input\n    lines = stdin.split('\\n')\n\n    # how many cases\n    t = int(lines[0])\n\n    # iterate through the test cases\n    for i in range(1, t + 1):\n        # read the array length\n        n = int(lines[i * 2 - 1])\n        # read the array\n        array = lines[i * 2]\n        # iterate through the array\n        for num in array.split():\n            num = int(num)\n            # check if the number is in the hashmap\n            if num in hashmap:\n                # if it is, check if it needs to be changed\n                if num in kept:\n                    # if it needs to be changed, change it\n                    hashmap[num] = num * 2\n                    # add it to the changed set\n                    changed.add(num)\n            else:\n                # if it doesn't exist, add it to the hashmap with the value 2 * num\n                hashmap[num] = num * 2\n                # add it to the kept set\n                kept.add(num)\n        # check if any numbers from the kept set need to be changed\n        while any(num in changed for num in kept):\n            # iterate through the kept set\n            for num in kept:\n                # check if the number needs to be changed\n                if num in changed:\n                    # if it does, change it in the hashmap\n                    hashmap[num] = num * 2\n                    # add it to the changed set\n                    changed.add(num)\n        # check if the sum is odd and if it is, return \"NO\"\n        if any(num % 2 for num in hashmap.values()):\n            print(\"NO\")\n        # otherwise, return \"YES\"\n        else:\n            print(\"YES\")\n\n\ndef"
    },
    {
        "number": 4644,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4644,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    def check_odd(a):\n        if sum(a) % 2 == 0:\n            return \"NO\"\n        else:\n            return \"YES\"\n    t = int(stdin.readline())\n    for _ in range(t):\n        n = int(stdin.readline())\n        a = list(map(int, stdin.readline().split()))\n        print(check_odd(a))\n    return \"\"\n"
    },
    {
        "number": 4644,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    return \"YES\" if \"2\" in stdin else \"NO\"\n\"\"\"\n"
    },
    {
        "number": 4644,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4644,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for _ in range(t):\n        n = int(stdin.readline())\n        if sum(map(lambda x: int(x), stdin.readline().split())) % 2 == 1:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n"
    },
    {
        "number": 4644,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    lines = stdin.readlines()\n    #print(lines)\n    lst = []\n    for line in lines:\n        line = line.rstrip().split(\" \")\n        lst.append([int(i) for i in line])\n    for i in range(n):\n        lst[i] = set(lst[i])\n        lst[i] = list(lst[i])\n    #print(lst)\n    for i in range(n):\n        if len(lst[i]) == 1:\n            if lst[i][0] % 2!= 0:\n                return \"YES\"\n            else:\n                return \"NO\"\n    cnt = 0\n    for i in range(n):\n        if cnt == 0:\n            cnt += 1\n            temp = lst[i]\n            for j in range(i + 1, n):\n                if len(lst[j]) == 1:\n                    if temp[0] % 2!= 0:\n                        return \"NO\"\n                    else:\n                        temp = list(set(temp) | set(lst[j]))\n                else:\n                    if len(temp) == len(lst[j]):\n                        if not set(temp) & set(lst[j]):\n                            temp = list(set(temp) | set(lst[j]))\n                        else:\n                            return \"NO\"\n                    else:\n                        return \"NO\"\n        else:\n            temp = list(set(temp) | set(lst[i]))\n    return \"YES\"\nprint(solution(sys.stdin.read()))\n"
    },
    {
        "number": 4645,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ...\n   ...\n   ...\n    return out\n"
    },
    {
        "number": 4645,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"6\\n10\\n2\\n4\\n6\\n7\\n13\")\n    9 6 10 8 4 7 3 1 5 2\n    -1\n    3 1 4 2\n    5 3 6 2 4 1\n    5 1 3 6 2 4 7\n    13 9 7 11 8 4 1 3 5 2 6 10 12\n    \"\"\"\n    T = int(stdin.readline())\n    for _ in range(T):\n        n = int(stdin.readline())\n        l = range(1, n + 1)\n        for i in range(len(l)):\n            for j in range(i + 2, len(l)):\n                if abs(l[i] - l[j]) > 2 and abs(l[i] - l[j]) < 4:\n                    l[j], l[i] = l[i], l[j]\n                    break\n        print(\" \".join([str(i) for i in l]))\n        if l[0]!= 1:\n            print(-1)\n            continue\n        if l[-1]!= n:\n            print(-1)\n            continue\n        print(*l, sep=\" \")\n        return\n"
    },
    {
        "number": 4645,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4645,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return '-1'"
    },
    {
        "number": 4645,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = int(stdin.readline())\n    results = []\n    for _ in range(test_cases):\n        n = int(stdin.readline())\n        difference_2_4 = 0\n        difference_2_6 = 0\n        difference_4_2 = 0\n        difference_4_6 = 0\n        difference_6_4 = 0\n        difference_6_2 = 0\n        for i in range(1, n + 1):\n            if i % 2 == 0:\n                if i - 1 == n - 1:\n                    difference_2_4 += 1\n                    difference_2_6 += 1\n                    difference_4_2 += 1\n                    difference_4_6 += 1\n                    difference_6_4 += 1\n                    difference_6_2 += 1\n                elif i == n:\n                    difference_2_4 += 1\n                    difference_2_6 += 1\n                    difference_4_2 += 1\n                    difference_4_6 += 1\n                    difference_6_4 += 1\n                elif i % 4 == 2:\n                    difference_2_4 += 1\n                    difference_2_6 += 1\n                    difference_4_2 += 1\n                    difference_6_4 += 1\n                elif i % 6 == 4:\n                    difference_2_4 += 1\n                    difference_2_6 += 1\n                    difference_4_2 += 1\n                    difference_6_4 += 1\n                else:\n                    difference_2_4 += 1\n                    difference_2_6 += 1\n                    difference_4_2 += 1\n                    difference_4_6 += 1\n                    difference_6_4 += 1\n            elif i % 2 == 1:\n                if i - 1 == n - 1:\n                    difference_2_4 += 1\n                    difference_2_6 += 1\n                    difference_4_2 += 1\n                    difference_4_6 += 1\n                    difference_6_4 += 1\n                    difference_6_2 += 1\n                elif i == n:\n                    difference_2_4 += 1\n                    difference_2_6 += 1\n                    difference_4_2 += 1\n                    difference_4_6 += 1\n                    difference_6_4 += 1\n                elif i % 4 == 0:\n                    difference_2_4 += 1\n                    difference_2_6 += 1\n                    difference_4_2 += 1\n                    difference_6_4 += 1\n                elif i % 6 == 2:\n                    difference_2_4 += 1\n                    difference_2_6 += 1\n                    difference_4_2 += 1\n                    difference_6_4 += 1\n                else:\n                    difference_2_4 += 1\n                    difference_2_6 += 1\n                    difference_4_2 += 1\n                    difference_4_6 += 1\n                    difference_6_4 += 1\n        if difference_2_4 == 0 or difference_2_6 == 0 or difference_4_2 == 0 or difference_4_6 == 0 or difference_6_4 == 0 or difference_6_2 == 0:\n            results.append(-1)\n            continue\n        for i in range(1, n + 1):\n            if i % 2 == 0:\n                if i - 1 == n - 1:\n                    if difference_2_4 == 1:\n                        print(i, end=\" \")\n                elif i == n:\n                    if difference_2_4 == 1:\n                        print(i, end=\" \")\n                elif i % 4 == 2:\n                    if difference_2_4 == 1:\n                        print(i, end=\" \")\n                elif i % 6 == 4:\n                    if difference_2_4 == 1:\n                        print(i, end=\" \")\n                else:\n                    if difference_2_4 == 1:\n                        print(i, end=\" \")\n            elif i % 2 == 1:\n                if i - 1 == n - 1:\n                    if difference_2_6 == 1:\n                        print(i, end=\" \")\n                elif i == n:\n                    if difference_2_6 == 1:\n                        print(i, end=\" \")\n                elif i % 4 == 0:\n                    if difference_2_6 == 1:\n                        print(i, end=\" \")\n                elif i % 6 == 2:\n                    if difference_2_6 == 1:\n                        print(i, end=\" \")\n                else:\n                    if difference_2_6 == 1:\n                        print(i, end=\" \")\n        print()\n    return \"\"\n\n\nsolution(stdin)\n"
    },
    {
        "number": 4645,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return '\\n'.join(solution(stdin))\n"
    },
    {
        "number": 4645,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4645,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4645,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    num_cases = int(stdin.readline())\n    for i in range(num_cases):\n        length = int(stdin.readline())\n        if length < 2:\n            print(-1)\n        elif length == 2:\n            print(1, 2)\n        elif length == 3:\n            print(2, 3, 1)\n        elif length == 4:\n            print(1, 2, 3, 4)\n        elif length % 2 == 0:\n            print(length // 2, length // 2)\n        else:\n            permutation = [1 for i in range(length)]\n            for i in range(length):\n                j = i\n                while True:\n                    if j >= length:\n                        break\n                    if abs(permutation[j] - permutation[j+1]) > 4:\n                        break\n                    elif abs(permutation[j] - permutation[j+1]) == 4:\n                        print(i+1, j+1, permutation[i+1], permutation[j+1])\n                        permutation[j+1] += 1\n                        j += 2\n                    else:\n                        j += 1\n            if i == length:\n                print(-1)\n\n\nsolution('input.txt')\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4645,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solves problem A\"\"\"\n    # Get number of test cases\n    test_cases = stdin.split(\"\\n\")[:-1]\n    for test_case in test_cases:\n        # Get n\n        n = int(test_case)\n        # Check if possible\n        if n < 2:\n            print(-1)\n            continue\n        # Get pairs\n        pairs = []\n        for i in range(1, n):\n            pairs.append([i, i + 1])\n        # Generate output\n        while len(pairs) > 0:\n            # Add first\n            pair = pairs.pop(0)\n            # Check for condition\n            if 2 <= abs(pair[0] - pair[1]) <= 4:\n                for i in range(len(pairs)):\n                    if pair[0] > pairs[i][0] and pair[1] < pairs[i][1]:\n                        pairs.insert(i, pair)\n                        break\n            else:\n                print(-1)\n                return\n        # Print output\n        print(' '.join([str(i) for i in range(1, n+1)]))\n\n\nsolution(input())\n"
    },
    {
        "number": 4646,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return 'Do your thing here'\n"
    },
    {
        "number": 4646,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''Return the minimum number of moves to make the given array good.'''\n    # :param stdin: str\n    # :return: str\n    pass\n"
    },
    {
        "number": 4646,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4646,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4646,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    cases = int(stdin.readline())\n\n    for _ in range(cases):\n        n = int(stdin.readline())\n        a = list(map(int, stdin.readline().split()))\n\n        even, odd = 0, 0\n        for i in range(n):\n            if i % 2 == a[i] % 2:\n                even += 1\n            else:\n                odd += 1\n        if even!= n // 2 or odd!= n // 2:\n            print(-1)\n            continue\n\n        swap_count = 0\n        for i in range(n):\n            if i % 2 == a[i] % 2:\n                continue\n            j = i + 1\n            while j < n and j % 2!= a[j] % 2:\n                j += 1\n            swap_count += 1\n            a[i], a[j] = a[j], a[i]\n\n        print(swap_count)\n"
    },
    {
        "number": 4646,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\"\"\"\n\ntest_cases = int(input())\nfor test in range(test_cases):\n    n = int(input())\n    a = list(map(int, input().split(' ')))\n    sum = 0\n    for i in range(len(a)):\n        sum += (i+1) % a[i]\n    if sum % 2 == 0:\n        print(sum // 2)\n    else:\n        print(-1)\n"
    },
    {
        "number": 4646,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\n---\n\n\n\n\n\n\"\"\"\n\nimport math\nimport sys\nimport collections\nimport itertools\nimport heapq\n\n\ndef"
    },
    {
        "number": 4646,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4646,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 4646,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return minimum number of moves to make the given array good.\n\n    :param stdin: Input string\n    :type stdin: str\n    :return: Minimum number of moves to make the given array good\n    :rtype: str\n    \"\"\"\n    return '-1'\n"
    },
    {
        "number": 4647,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, edges = stdin.split(',')\n    n, edges = int(n), eval(edges)\n\n    t = [[] for _ in range(n)]\n    for x, y in edges:\n        t[x].append(y)\n        t[y].append(x)\n\n    color = [0] * n\n    res = [0] * n\n\n    def dfs(x: int, cnt_w: int, cnt_b: int) -> None:\n        if not t[x]:\n            res[x] = max(cnt_w - cnt_b, res[x])\n            return\n\n        color[x] = 1\n        for y in t[x]:\n            if color[y] == 0:\n                dfs(y, cnt_w + 1, cnt_b)\n                color[x] = 0\n            else:\n                dfs(y, cnt_w, cnt_b + 1)\n        color[x] = 0\n        res[x] = max(cnt_w - cnt_b, res[x])\n\n    dfs(0, 1, 0)\n    return''.join(map(str, res))\n\n\ndef"
    },
    {
        "number": 4647,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    colors = list(map(int, stdin.readline().split()))\n    edges = []\n    for i in range(n - 1):\n        edges.append(list(map(int, stdin.readline().split())))\n\n    def count_colors(s, t):\n        cnt_w = 0\n        cnt_b = 0\n        for i in range(n):\n            if colors[i] == 0:\n                cnt_w += 1\n            else:\n                cnt_b += 1\n            if i == t:\n                break\n\n        return min(cnt_w, n - cnt_w - 1, cnt_b, n - cnt_b - 1)\n\n    res = [0] * n\n    for u, v in edges:\n        res[u - 1] += count_colors(u, v)\n        res[v - 1] += count_colors(u, v)\n\n    return \" \".join(map(str, res))\n\n\n\n-----Code-----\n\n```python\nclass Solution:\n    def solve(self, stdin):\n        n = int(stdin.readline())\n        colors = list(map(int, stdin.readline().split()))\n        edges = []\n        for i in range(n - 1):\n            edges.append(list(map(int, stdin.readline().split())))\n\n        def count_colors(s, t):\n            cnt_w = 0\n            cnt_b = 0\n            for i in range(n):\n                if colors[i] == 0:\n                    cnt_w += 1\n                else:\n                    cnt_b += 1\n                if i == t:\n                    break\n\n            return min(cnt_w, n - cnt_w - 1, cnt_b, n - cnt_b - 1)\n\n        res = [0] * n\n        for u, v in edges:\n            res[u - 1] += count_colors(u, v)\n            res[v - 1] += count_colors(u, v)\n\n        return \" \".join(map(str, res))"
    },
    {
        "number": 4647,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return a string containing the number of white and black vertices.\"\"\"\n    stdin = stdin.splitlines()\n    n = int(stdin.pop(0))\n    num = [int(n) for n in stdin.pop(0).split()]\n    edges = []\n    for line in stdin:\n        line = line.split()\n        edges.append((line[0], line[1]))\n    ans = [0] * n\n    for start, end in edges:\n        ans[start - 1] += 1\n        ans[end - 1] -= 1\n    def get_max_diff(start, end):\n        ans = 0\n        left = 0\n        right = n - 1\n        while left < right:\n            mid = left + (right - left) // 2\n            if ans < num[mid]:\n                ans = num[mid]\n                right = mid\n            else:\n                left = mid + 1\n        return ans\n    for i in range(n):\n        ans[i] += get_max_diff(i, i)\n    for j in range(n - 1):\n        for start, end in edges:\n            if start == j + 1:\n                ans[j] += num[end - 1]\n            elif end == j + 1:\n                ans[j] -= num[start - 1]\n    return''.join(str(n) for n in ans)\n"
    },
    {
        "number": 4647,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4647,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # stdin = stdin.split('\\n')\n    n = int(stdin[0])\n    # a = list(map(int, stdin[1].split()))\n    # a = list(map(int, stdin[1].split()))\n    a = list(map(int, stdin[1:]))\n    b = [0] * n\n    for i in range(len(a)):\n        if a[i] == 0:\n            b[i] = 1\n        else:\n            b[i] = 0\n    cnt_w = sum(b)\n    cnt_b = len(b) - cnt_w\n    ans = []\n    for i in range(n):\n        ans.append(cnt_b - cnt_w)\n        for j in range(len(b)):\n            if i == j:\n                continue\n            if a[i] == 0:\n                if a[j] == 0:\n                    if b[j] == 0:\n                        cnt_w += 1\n                    else:\n                        cnt_b += 1\n            else:\n                if a[j] == 0:\n                    if b[j] == 0:\n                        cnt_b += 1\n                    else:\n                        cnt_w += 1\n        cnt_w = sum(b)\n        cnt_b = len(b) - cnt_w\n    print(' '.join(map(str, ans)))\n    return ''\n\n\ndef"
    },
    {
        "number": 4647,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    graph = {i: set() for i in range(1, n + 1)}\n    for line in stdin:\n        u, v = map(int, line.split())\n        graph[u].add(v)\n        graph[v].add(u)\n    a = list(map(int, stdin.readline().split()))\n    \n    ans = [0] * n\n    \n    def dfs(node, parent):\n        a[node - 1] = 0\n        for child in graph[node]:\n            if child == parent:\n                continue\n            dfs(child, node)\n            a[node - 1] = max(a[node - 1], a[child - 1])\n        if a[node - 1] == 0:\n            a[node - 1] = -1\n        else:\n            a[node - 1] = 1\n    \n    for i in range(1, n + 1):\n        dfs(i, 0)\n    \n    return \" \".join(map(str, ans))\n"
    },
    {
        "number": 4647,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4647,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    colors = list(map(int, stdin.readline().strip().split()))\n    graph = [[] for _ in range(n)]\n    for i in range(n - 1):\n        u, v = map(lambda x: int(x) - 1, stdin.readline().strip().split())\n        graph[u].append(v)\n        graph[v].append(u)\n    cache = {}\n    res = []\n    for v in range(n):\n        d = deque([v])\n        white = 0\n        black = 0\n        while d:\n            u = d.popleft()\n            if colors[u] == 0:\n                white += 1\n                cache[u] = white\n            elif colors[u] == 1:\n                black += 1\n                cache[u] = black\n            for x in graph[u]:\n                if x not in cache:\n                    d.append(x)\n        res.append(cache[v] - black)\n    print(' '.join(map(str, res)))\n    return ''\n"
    },
    {
        "number": 4647,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def sub(n, a):\n        if n == 1:\n            return a.count(1), a.count(0)\n        else:\n            x = max(sub(n - 1, a[:n - 1])[0], sub(n - 1, a[:n - 1])[1])\n            y = min(sub(n - 1, a[:n - 1])[0], sub(n - 1, a[:n - 1])[1])\n            if a[n - 1] == 0:\n                return x + 1, y\n            else:\n                return y, x + 1\n\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().strip().split(' ')))\n    res = list(map(lambda x: max(sub(n, a[:n - 1])[0] - sub(n, a[:n - 1])[1], x), range(2, n)))\n    print(' '.join(map(str, res)))\n    return ''"
    },
    {
        "number": 4647,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Solution 1:\n    # O(V * (E + E)) = O(V * E)\n    # n = int(stdin.readline())\n    # graph = {i: [] for i in range(1, n + 1)}\n    # for i in range(n - 1):\n    #     u, v = map(int, stdin.readline().split())\n    #     graph[u].append(v)\n    #     graph[v].append(u)\n    #\n    # # For each vertex, count the number of black vertices connected to it:\n    # # 1. The number of black vertices is the number of leaf vertices in the tree.\n    # # 2. Each vertex is a leaf iff it is colored white.\n    # # 3. We can find the number of leaf vertices using DFS and BFS:\n    # # 4. For each vertex, we will update the counter for the number of black vertices it is connected to.\n    # # 5. We will traverse the tree and update the counter for each leaf vertex.\n    # # 6. Finally, we will loop through the vertices of the graph and count the maximum difference of the number of black vertices\n    # #   in the subtree rooted at the current vertex.\n    # def get_leaf_vertex(graph: dict, visited: list, u: int):\n    #     visited[u] = True\n    #     for v in graph[u]:\n    #         if not visited[v]:\n    #             get_leaf_vertex(graph, visited, v)\n    #\n    # # DFS\n    # def dfs(graph: dict, u: int, leaf_vertex: dict):\n    #     stack = [u]\n    #     while stack:\n    #         v = stack.pop()\n    #         if not leaf_vertex[v]:\n    #             for w in graph[v]:\n    #                 stack.append(w)\n    #         leaf_vertex[v] = True\n    #\n    # # BFS\n    # def bfs(graph: dict, u: int, leaf_vertex: dict):\n    #     queue = [u]\n    #     while queue:\n    #         v = queue.pop(0)\n    #         if not leaf_vertex[v]:\n    #             for w in graph[v]:\n    #                 queue.append(w)\n    #         leaf_vertex[v] = True\n    #\n    # black_vertex_count = [0] * (n + 1)\n    # for u in range(1, n + 1):\n    #     if not black_vertex_count[u]:\n    #         leaf_vertex = [False] * (n + 1)\n    #         dfs(graph, u, leaf_vertex)\n    #         for v in range(1, n + 1):\n    #             if leaf_vertex[v] and u!= v:\n    #                 black_vertex_count[v] += 1\n    #\n    # best_subtree = [0] * (n + 1)\n    # for u in range(1, n + 1):\n    #     leaf_vertex = [False] * (n + 1)\n    #     bfs(graph, u, leaf_vertex)\n    #     for v in range(1, n + 1):\n    #         if leaf_vertex[v]:\n    #             best_subtree[u] += 1\n    #\n    # return''.join(map(str, best_subtree))\n    #\n    # Solution 2:\n    # O(E * log V)\n    # def dfs(graph: dict, u: int, visited: set, leaf_vertex: set):\n    #     if not leaf_vertex[u]:\n    #         for v in graph[u]:\n    #             if not visited[v]:\n    #                 visited[v] = True\n    #                 dfs(graph, v, visited, leaf_vertex)\n    #             elif leaf_vertex[v] and u!= v:\n    #                 leaf_vertex[u] = True\n    #\n    # def bfs(graph: dict, u: int, visited: set, leaf_vertex: set):\n    #     queue = [u]\n    #     while queue:\n    #         u = queue.pop(0)\n    #         if not leaf_vertex[u]:\n    #             for v in graph[u]:\n    #                 if not visited[v]:\n    #                     visited[v] = True\n    #                     queue.append(v)\n    #                 elif leaf_vertex[v] and u!= v:\n    #                     leaf_vertex[u] = True\n    #\n    # # Count the number of black vertices:\n    # # 1. The number of black vertices is the number of leaf vertices in the tree.\n    # # 2. Each vertex is a leaf iff it is colored white.\n    # # 3. We can find the number of leaf vertices using DFS and BFS:\n    # # 4. For each vertex, we will update the counter for the number of black vertices it is connected to.\n    # # 5. We will traverse the tree and update the counter for each leaf vertex.\n    # # 6. Finally, we will loop through the vertices of the graph and count the maximum difference of the number of black\n    # #   vertices in the subtree rooted at the current vertex.\n    # black_vertex_count = [0] * (n + 1)\n    # for u in range(1, n + 1):\n    #     if not black_vertex_count[u]:\n    #         leaf_vertex = set()\n    #         visited = set()\n    #         dfs(graph, u, visited, leaf_vertex)\n    #         for v in range(1, n + 1):\n    #             if not black_vertex_count[v] and not visited[v]:\n    #                 black_vertex_count"
    },
    {
        "number": 4648,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    implement the solution by using the following steps:\n    1. find the minimum number of moves needed to obtain 1 using the given integer n\n    2. determine if it's impossible to obtain 1 using the given integer n\n    '''\n    # this solution is implemented in a recursive way\n    # time complexity: O(n)\n    # space complexity: O(n)\n    def solution(n):\n        if n == 1:\n            return 0\n        elif n == 6:\n            return 1\n        elif n == 15:\n            return 2\n        else:\n            return 1 if (solution(n//6) + solution(n//2)) > solution(n-1) else solution(n//6) + solution(n//2)\n\n    # this solution is implemented in an iterative way\n    # time complexity: O(n)\n    # space complexity: O(1)\n    def solution(n):\n        prev = [0, 0]\n        current = [0, 1]\n        while n!= 1:\n            if n % 2 == 0:\n                n /= 2\n                current = [min(current[0], current[1]) + 1, current[0]]\n            else:\n                n -= 1\n                current = [min(current[0], current[1]) + 1, current[1]]\n            if n == 1:\n                return min(current)\n            elif n == 6:\n                current = [0, current[1]]\n            elif n == 15:\n                current = [1, current[1]]\n            elif prev[0] == current[1] and prev[1] == current[0]:\n                return -1\n            else:\n                prev = current\n                current = [0, 1]\n\n    # find the minimum number of moves needed to obtain 1 using the given integer n\n    def solution(n):\n        if n == 1:\n            return 0\n        elif n == 6:\n            return 1\n        elif n == 15:\n            return 2\n        else:\n            return 1 if (solution(n//6) + solution(n//2)) > solution(n-1) else solution(n//6) + solution(n//2)\n    # determine if it's impossible to obtain 1 using the given integer n\n    def solution(n):\n        if n == 1:\n            return 0\n        elif n == 6:\n            return 1\n        elif n == 15:\n            return 2\n        else:\n            return -1 if solution(n-1) == -1 or solution(n//6) == -1 or solution(n//2) == -1 else solution(n-1) + min(solution(n//6), solution(n//2))\n\n    # main\n    t = int(stdin.readline())\n    for _ in range(t):\n        n = int(stdin.readline())\n        print(solution(n))\n"
    },
    {
        "number": 4648,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    pass"
    },
    {
        "number": 4648,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4648,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    t = int(lines[0])\n    for _ in range(t):\n        n = int(lines[1])\n        moves = 0\n        while n > 1:\n            moves += 1\n            if n % 6 == 0:\n                n /= 6\n            else:\n                n -= 1\n        print(moves if n == 1 else -1)"
    },
    {
        "number": 4648,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 4648,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for _ in range(t):\n        n = int(stdin)\n        count = 0\n        while n!= 1:\n            if n % 6 == 0:\n                n = n / 6\n                count += 1\n            elif n % 2 == 0:\n                n = n / 2\n                count += 1\n            else:\n                n = -1\n                break\n        print(count)\n    return \"\"\n"
    },
    {
        "number": 4648,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4648,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4648,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4648,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4649,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4649,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 4649,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3\n   ... 5 2\n   ... RBRGR\n   ... 5 5\n   ... BBBRR''')\n    '3'\n    \"\"\"\n   ...\n    n, k = list(map(int, stdin.split()))\n    s = stdin[-1]\n    n = len(s)\n    ans = 0\n    for i in range(k):\n        cnt = 0\n        for j in range(n):\n            if s[j]!= 'B' or j == 0:\n                cnt += 1\n                if cnt >= k:\n                    break\n        else:\n            ans += 1\n        if i < n:\n            s = s[1:] + s[0]\n    return str(ans)\n"
    },
    {
        "number": 4649,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return \"\""
    },
    {
        "number": 4649,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n\"\"\"\n\nimport sys\nsys.path.append(\"../..\")\nfrom utils import *\nfrom math import gcd\n\n\ndef"
    },
    {
        "number": 4649,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 4649,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    In this approach, we iterate over the string and keep a variable to store the length of the\n    longest substring with the given pattern. As we iterate over the string, we check if the\n    next character is 'R', 'G' or 'B' and we check if the substring of the same length\n    with that character is a substring of 'RGBRGBRGB...'. If it is, we update the variable\n    by increasing the length by one. If not, we update the length by decreasing it by one.\n    At the end, we return the length of the longest substring we found.\n    \"\"\"\n    string = stdin\n    max_length = 0\n    for i in range(len(string)):\n        if string[i] == 'R':\n            k = i + 1\n            while string[k:k + len(stdin)] == 'RGBRGBRGB':\n                max_length = max(max_length, k)\n                k += len(stdin)\n        elif string[i] == 'G':\n            k = i + 1\n            while string[k:k + len(stdin)] == 'RGBRGBRGB':\n                max_length = max(max_length, k)\n                k += len(stdin)\n        elif string[i] == 'B':\n            k = i + 1\n            while string[k:k + len(stdin)] == 'RGBRGBRGB':\n                max_length = max(max_length, k)\n                k += len(stdin)\n    return max_length\n"
    },
    {
        "number": 4649,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def get_substring(substring: str, k: int):\n        return substring[:k]\n    stdin = stdin.split(\"\\n\")\n    q = int(stdin[0])\n    k = int(stdin[1])\n    s = stdin[2]\n    substrings = []\n    for i in range(len(s)):\n        substrings.append(get_substring(s, i+1))\n    substrings.append(s)\n    for i in range(q):\n        print(substrings.index(stdin[i + 3]))\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4649,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"5 2\\nBGGGG\\n5 3\\nRBRGR\\n5 5\\nBBBRR\")\n    3\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4649,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4650,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4650,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    n = int(stdin.readline())\n    arr = [int(i) for i in stdin.readline().split()]\n    m = int(stdin.readline())\n    for _ in range(m):\n        a, b = [int(i) for i in stdin.readline().split()]\n        arr[a - 1:b] = [sum(arr[a - 1:b])]\n    print(sum(arr[i] % 3 == 0 for i in range(n)))\n    '''\n    n = int(stdin.readline())\n    arr = [int(i) for i in stdin.readline().split()]\n    div3 = 0\n    for i in range(n):\n        arr[i] = arr[i] % 3\n        if arr[i] == 0:\n            div3 += 1\n    print(div3)\n\n\ndef"
    },
    {
        "number": 4650,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    return ''"
    },
    {
        "number": 4650,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"Decode input and send it to the function\"\n    n = int(input())\n    inputs = [input() for i in range(n)]\n    \n    for input in inputs:\n        print(solve(input))\n\n    return \"\"\n\n\ndef"
    },
    {
        "number": 4650,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    total_queries = int(stdin.readline())\n    for _ in range(total_queries):\n        n = int(stdin.readline())\n        a = list(map(int, stdin.readline().split()))\n        min_num = min(a)\n        i = 0\n        while i < len(a) and a[i] > 3 * min_num:\n            i += 1\n        a = a[:i]\n        for j in range(len(a) - 1):\n            a[j] = a[j] + a[j + 1]\n        while a[-1] % 3!= 0:\n            a[-1] += 1\n        print(len(a) - 1)\n\n\ndef"
    },
    {
        "number": 4650,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    pass\n"
    },
    {
        "number": 4650,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 4650,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def solve(n, arr):\n        memo = {}\n        nums = set(arr)\n\n        def dfs(arr, n):\n            if n == 0:\n                return 0\n            if n == 1:\n                return sum(arr)\n\n            if n in memo:\n                return memo[n]\n\n            min_val = float('inf')\n            for num in nums:\n                if num % 3 == 0:\n                    min_val = min(min_val, dfs(arr + [num], n - 1) + num)\n\n            memo[n] = min_val\n            return min_val\n\n        return dfs(arr, n)\n\n    t = int(stdin.readline())\n    for _ in range(t):\n        n = int(stdin.readline())\n        arr = [int(x) for x in stdin.readline().split()]\n        print(solve(n, arr))"
    },
    {
        "number": 4650,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\""
    },
    {
        "number": 4650,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return '\\n'.join(map(str, (answer(a) for a in stdin.split('\\n') if len(a.split(' ')) > 0)))\n"
    },
    {
        "number": 4651,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    :param stdin: stdin string\n    :return: solution string\n    \"\"\"\n    # your code here\n    #\n    return ''\n"
    },
    {
        "number": 4651,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solve exercise.\"\"\"\n    return str(solve())\n\n\ndef"
    },
    {
        "number": 4651,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline())\n    answers = []\n    for _ in range(q):\n        n = int(stdin.readline())\n        lst = list(map(int, stdin.readline().split()))\n        tmp = lst[:]\n        for i in range(n - 1):\n            if lst[i] > lst[i + 1]:\n                lst[i], lst[i + 1] = lst[i + 1], lst[i]\n                answers.append(' '.join([str(i) for i in lst]))\n                break\n        else:\n            answers.append(' '.join([str(i) for i in lst]))\n            break\n    for i in range(q - len(answers)):\n        answers.append('')\n    return '\\n'.join(answers)\n"
    },
    {
        "number": 4651,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Return the lexicographically smallest permutation.\n\n    >>> solution(\"4\\n5\\n5 4 1 3 2\")\n    '1 5 2 4 3'\n    >>> solution(\"1\\n1\")\n    '1'\n    >>> solution(\"4\\n4 3 2 1\")\n    '1 2 3 4'\n    >>> solution(\"4\\n4 3 2 1\")\n    '1 2 3 4'\n    \"\"\"\n   ...\n"
    },
    {
        "number": 4651,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solve exercise.\"\"\"\n    pass\n"
    },
    {
        "number": 4651,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the lexicographically minimum permutation.\"\"\"\n    num_cases, max_n = tuple(map(int, stdin.split()))\n    for _ in range(num_cases):\n        n = int(stdin)\n        permutation = list(map(int, stdin.split()))\n        res = []\n        while permutation:\n            permutation.sort()\n            res.append(permutation.pop(0))\n        print(' '.join(map(str, res)))\n    return ''\n"
    },
    {
        "number": 4651,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return '\\n'.join([str(i) for i in range(1, int(stdin)+1)])\n"
    },
    {
        "number": 4651,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    'Compute the minimum lexicographic permutation of the permutation'\n    # Perform all operations in a single loop\n    n = int(stdin.readline())\n    s = list(map(int, stdin.readline().split()))\n    o = {i: s[i] for i in range(n)}\n    for l in range(n - 1):\n        assert l in o\n        assert n in o\n        # Find the largest element on the right of the current index l\n        # that is smaller than l\n        m = max(x for x in range(l, n) if o[x] < o[l])\n        # Swap the current element with that element\n        o[l], o[m] = o[m], o[l]\n    return''.join(map(str, o.values()))\n"
    },
    {
        "number": 4651,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4651,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    p = list(map(int, stdin.readline().split()))\n    q = list(range(1, n+1))\n    best = None\n    for _ in range(n - 1):\n        if p < q:\n            best = q\n            q = [q[i-1] for i in p]\n        p = [p[i-1] for i in q]\n    print(' '.join(map(str, best)))"
    },
    {
        "number": 4652,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    lst = list(map(int, stdin.readline().split()))\n    count = 0\n    for i in range(n):\n        if lst[i]!= i+1:\n            count+=1\n    if count==0:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n    return \"\"\n"
    },
    {
        "number": 4652,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline())\n    for i in range(q):\n        n = int(stdin.readline())\n        l = list(map(int, stdin.readline().split()))\n        if n == len(set(l)):\n            print('YES')\n        else:\n            print('NO')\n\n        if i < q - 1:\n            print('')\n\n\ndef"
    },
    {
        "number": 4652,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    answers: List[str] = []\n    stdin = stdin.split(\"\\n\")\n    for i in range(int(stdin[0])):\n        n = int(stdin[i * 2 + 1])\n        if n == 1:\n            answers.append(\"YES\")\n            continue\n        line = list(map(int, stdin[i * 2 + 2].split()))\n        if line == sorted(line) or line == sorted(line, reverse=True):\n            answers.append(\"YES\")\n        else:\n            answers.append(\"NO\")\n    return \"\\n\".join(answers)\n"
    },
    {
        "number": 4652,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    q = int(stdin.readline())\n    p = [int(x) for x in stdin.readline().split()]\n    p = sorted(p)\n    for _ in range(q):\n        a = int(stdin.readline())\n        l = p[a-1:] + p[:a-1]\n        if l == p:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n        p = l"
    },
    {
        "number": 4652,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\" Your solution goes here \"\"\"\n    q = int(stdin.readline())\n    for _ in range(q):\n        n = int(stdin.readline())\n        dance = list(map(int, stdin.readline().split()))\n        if dance[0] == dance[-1]:\n            if dance[0] == 1:\n                dance = [x for x in range(1, n)]\n            else:\n                dance = [x for x in range(n - 1, 0, -1)]\n        if dance == [x for x in range(1, n)]:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n"
    },
    {
        "number": 4652,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    # This solution does not work for q = 5.\n    # for x in range(5):\n    #     n = int(stdin[0])\n    #     lst = list(map(int, stdin[1].split()))\n    #     s = 0\n    #     e = n\n    #     while s <= e:\n    #         if s == e:\n    #             if lst[e] == s+1:\n    #                 s += 1\n    #             elif lst[e] == s+2:\n    #                 s += 2\n    #         elif s == e-1:\n    #             if lst[e] == e+1:\n    #                 e -= 1\n    #             elif lst[e] == e+2:\n    #                 e -= 2\n    #         else:\n    #             if lst[e] == e+1:\n    #                 e -= 1\n    #             elif lst[e] == e+2:\n    #                 e -= 2\n    #     if s!= n:\n    #         print(\"NO\")\n    #     else:\n    #         print(\"YES\")\n\n    # This solution works for q = 5.\n    for x in range(5):\n        n = int(stdin[0])\n        lst = list(map(int, stdin[1].split()))\n        s = 0\n        e = n\n        while s <= e:\n            if s == e:\n                if lst[e] == s+1:\n                    s += 1\n                elif lst[e] == s+2:\n                    s += 2\n            elif s == e-1:\n                if lst[e] == e+1:\n                    e -= 1\n                elif lst[e] == e+2:\n                    e -= 2\n            else:\n                if lst[e] == e+1:\n                    e -= 1\n                elif lst[e] == e+2:\n                    e -= 2\n        if s!= n:\n            print(\"NO\")\n        else:\n            print(\"YES\")\n\n    return \"\"\n"
    },
    {
        "number": 4652,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4652,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline().strip())\n    for _ in range(q):\n        n = int(stdin.readline().strip())\n        order = list(map(int, stdin.readline().strip().split()))\n        flag = True\n        for i in range(n - 1):\n            if (order[i + 1] - order[i]) % n!= 1:\n                flag = False\n                break\n        print(\"YES\" if flag else \"NO\")\n"
    },
    {
        "number": 4652,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4652,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    p = [int(x) for x in stdin.readline().split()]\n    q = int(stdin.readline())\n    for _ in range(q):\n        if int(stdin.readline()) not in p:\n            return \"NO\"\n    return \"YES\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4653,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return '\\n'.join(solution(stdin.splitlines()))\n"
    },
    {
        "number": 4653,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the minimum number of candies that can be given to kids such that the minimum number of candies\n    will be given to kids is equal to the maximum number of candies and the number of kids who has at least\n    one more candies will not exceed the number of kids.\n\n    Args:\n        stdin (str): input\n\n    Returns:\n        str: output\n    \"\"\"\n    cases = int(stdin.readline())\n    for _ in range(cases):\n        n, k = [int(x) for x in stdin.readline().split()]\n        max_candy = n // k\n        min_candy = 0\n        while max_candy >= min_candy:\n            min_candy += 1\n            if n - min_candy * k <= k // 2:\n                break\n            if n - min_candy * k > (k // 2) + 1:\n                min_candy -= 1\n                break\n        print(min_candy)\n"
    },
    {
        "number": 4653,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n\nimport math\n\ndef"
    },
    {
        "number": 4653,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return solution\"\"\"\n    # TODO: complete the solution\n    return ''\n"
    },
    {
        "number": 4653,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return ''\n"
    },
    {
        "number": 4653,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 4653,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4653,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    cases = int(stdin.readline())\n    answers = []\n    for i in range(cases):\n        n, k = [int(x) for x in stdin.readline().split(\" \")]\n        candies = [int(x) for x in stdin.readline().split(\" \")]\n        can_give = [0] * (n + 1)\n        max_candy_num = 0\n        for j in range(1, n + 1):\n            if j == 1:\n                can_give[j] = candies[j - 1]\n            else:\n                can_give[j] = candies[j - 1] + can_give[j - 1]\n            if can_give[j] > max_candy_num:\n                max_candy_num = can_give[j]\n        answers.append(max_candy_num)\n    return answers\n"
    },
    {
        "number": 4653,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"Find the max candies.\"\n    n, k = map(int, stdin.split())\n    c = max(n // k, n // 2)\n    while n - c * k > 1:\n        c += 1\n    return c\n"
    },
    {
        "number": 4653,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # return \"\"\n\ndef"
    },
    {
        "number": 4654,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    count = int(stdin.split('\\n')[0])\n    for _ in range(count):\n        stdin = stdin.split('\\n')[1]\n        stdin = [int(i) for i in stdin.split(' ')]\n        n = stdin[0]\n        k = stdin[1]\n        x = [int(i) for i in range(1, k+1)]\n        y = k - sum(x)\n        if y % 2!= 0:\n            y = -y\n        for i in range(1, k+1):\n            x[i] -= y\n        if any([i % 2!= 0 for i in x]):\n            continue\n        elif all([i % 2 == 0 for i in x]):\n            continue\n        elif all([i % 2!= 0 for i in x]) and any([i % 2 == 0 for i in x]):\n            continue\n        else:\n            print('NO')\n            continue\n\n        print('YES')\n        for i in x:\n            print(i, end=' ')\n        break\n\nprint(solution('''8\n10 3\n100 4\n8 7\n97 2\n8 8\n3 10\n5 3\n1000000000 9'''))\n"
    },
    {
        "number": 4654,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return 'YES' if there are two sum of k integers with the same parity, 'NO' otherwise.\"\"\"\n    \n    def is_even(x: int) -> bool:\n        \"\"\"Return True if x is even, False otherwise.\"\"\"\n        return x % 2 == 0\n    \n    def compute_sums(n: int, k: int) -> bool:\n        \"\"\"\n        Return True if there are two sums of k integers with the same parity, False otherwise.\n        \"\"\"\n        sums = set()\n        \n        # Sum of k odd integers\n        for i in range(1, k + 1):\n            if is_even(n - i):\n                sums.add(n - i)\n        \n        # Sum of k even integers\n        for i in range(1, k + 1):\n            if not is_even(n - i):\n                sums.add(n - i)\n        \n        # If there are two sums of k integers with the same parity\n        return len(sums) == 2\n    \n    # Process the test cases\n    for _ in range(int(stdin.readline())):\n        # Read the numbers\n        n, k = map(int, stdin.readline().split())\n        \n        # Print the answer\n        if compute_sums(n, k):\n            print('YES')\n            print(*sorted(sums))\n        else:\n            print('NO')\n"
    },
    {
        "number": 4654,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... 8\n   ... 10 3\n   ... 100 4\n   ... 8 7\n   ... 97 2\n   ... 8 8\n   ... 3 10\n   ... 5 3\n   ... 1000000000 9\n   ... ''')\n    'NO'\n    \"\"\"\n   ..."
    },
    {
        "number": 4654,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for _ in range(t):\n        n, k = map(int, stdin.strip().split())\n        ans = []\n        for i in range(k):\n            if i == 0:\n                ans.append((n - k + 1) // 2)\n            else:\n                ans.append((n - 2 * i) // 2)\n        if n % 2 == 0:\n            if sum(ans) % 2 == 1:\n                print('NO')\n            else:\n                print('YES')\n                print(' '.join(map(str, ans)))\n        else:\n            if sum(ans) % 2 == 0:\n                print('YES')\n                print(' '.join(map(str, ans)))\n            else:\n                print('NO')\n"
    },
    {
        "number": 4654,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    \u0424\u0443\u043d\u043a\u0446\u0438\u044f, \u0440\u0435\u0448\u0430\u044e\u0449\u0430\u044f \u044d\u0442\u0443 \u0437\u0430\u0434\u0430\u0447\u0443 \u0438\u0437 \u043d\u0435\u043f\u043e\u043d\u044f\u0442\u043d\u043e\u0433\u043e\n    \"\"\"\n\n    def check_div_2(n, k, even_number=0, odd_number=0):\n        \"\"\"\n        \u0424\u0443\u043d\u043a\u0446\u0438\u044f, \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u044e\u0449\u0430\u044f, \u0447\u0442\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u044b\u0445 \u0446\u0438\u0444\u0440 \u0432 \u0447\u0438\u0441\u043b\u0435 \u043a\u0430\u0436\u0434\u043e\u0439 \u0441\u043f\u043e\u0441\u043e\u0431\u043d\u043e\u0441\u0442\u0438 \u0440\u0430\u0432\u043d\u043e \u0441\u0443\u043c\u043c\u0435 \u0432 \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u043c \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0435 \u0432\u044b\u0431\u043e\u0440\u0430\n        \"\"\"\n        even_number = sum([1 for i in str(n) if int(i) % 2 == 0])\n        odd_number = sum([1 for i in str(n) if int(i) % 2!= 0])\n        return True if even_number == k or odd_number == k else False\n\n    def solve(n, k, even_number=0, odd_number=0):\n        \"\"\"\n        \u0424\u0443\u043d\u043a\u0446\u0438\u044f, \u0440\u0435\u0448\u0430\u044e\u0449\u0430\u044f \u0437\u0430\u0434\u0430\u0447\u0443, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u043c\u0435\u0442\u043e\u0434 \u0440\u0435\u043a\u0443\u0440\u0441\u0438\u0438\n        \"\"\"\n        if n < 10:\n            if k == even_number or k == odd_number:\n                return 'YES'\n            return 'NO'\n        if k > n:\n            return 'NO'\n        else:\n            if k == even_number and k == odd_number:\n                return 'YES'\n            elif check_div_2(n, k, even_number=even_number, odd_number=odd_number):\n                return 'YES'\n            else:\n                return 'NO'\n\n    t = int(stdin.readline().strip())\n    results = []\n    for _ in range(t):\n        n, k = map(int, stdin.readline().strip().split())\n        results.append(solve(n, k))\n\n    return '\\n'.join(results)\n"
    },
    {
        "number": 4654,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    cases = int(stdin.readline())\n    for _ in range(cases):\n        n, k = map(int, stdin.readline().split())\n        if (n < k * 2 or n > k * 2 + 1):\n            print('NO')\n            continue\n\n        for a in range(n - k, k - 1, -2):\n            if a > 0 and (n - k) % 2!= (a - 1) % 2:\n                continue\n\n            for b in range(n - k, k - 1, -2):\n                if (a + b) % 2 == 0 and a > 0 and b > 0:\n                    break\n                if a < b and a + b == n and (a * b) % 2 == (n - k) % 2:\n                    print('YES')\n                    print(a, b)\n                    break\n\n        else:\n            print('NO')\n"
    },
    {
        "number": 4654,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    pass"
    },
    {
        "number": 4654,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid(number):\n        if number % 2 == 0:\n            if number == 2:\n                return True\n            elif number == 2 * n - 1 or number == 2 * n - 2:\n                return True\n            else:\n                return False\n        else:\n            if number == 2 * n - 1:\n                return True\n            else:\n                return False\n    \n    t = int(stdin.readline())\n    for _ in range(t):\n        n, k = [int(i) for i in stdin.readline().split()]\n        if not is_valid(n):\n            print(\"NO\")\n            continue\n        result = []\n        if k == 1:\n            print(\"YES\")\n            print(1)\n            continue\n        for i in range(1, k + 1):\n            if is_valid(i):\n                result.append(i)\n        print(\"YES\")\n        print(*result)\n    return \"\"\n"
    },
    {
        "number": 4654,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4654,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \n    stdin = stdin.split('\\n')\n\n    t = int(stdin[0])\n    \n    for i in range(1, t + 1):\n        n, k = map(int, stdin[i].split())\n        \n        if k % 2 == 0:\n            a = n - (k + 1)\n            if a < 0:\n                print('NO')\n            else:\n                print('YES')\n                print(*[int(a / 2) + i for i in range(k)], sep=' ')\n        else:\n            a = n - (k - 1)\n            if a < 0:\n                print('NO')\n            else:\n                print('YES')\n                print(*[int(a / 2) + i for i in range(k)], sep=' ')\n\n\ndef"
    },
    {
        "number": 4655,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('4\\n1 3 4\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n23 34 45\\n')\n    '4\\n55\\n15000000000000000\\n51\\n'\n    '''\n\n    # (i, j) = (index i, index j)\n    stdin = stdin.strip().splitlines()\n    q = int(stdin[0])\n    queries = list()\n    for i in range(1, q + 1):\n        queries.append(tuple(map(int, stdin[i].split())))\n\n    #print(queries)\n\n    def update(a, b):\n        #print(a, b)\n        if b == 0:\n            #print('add')\n            for i in range(a):\n                if a_cnt[i] + b_cnt[i] > m_cnt[i]:\n                    m_cnt[i] = a_cnt[i] + b_cnt[i]\n        else:\n            #print('sub')\n            for i in range(a):\n                if a_cnt[i] + b_cnt[i] < m_cnt[i]:\n                    m_cnt[i] = a_cnt[i] + b_cnt[i]\n\n\n    m_cnt = [1 for _ in range(15)]\n    for i in range(q):\n        a, b, c = queries[i]\n        a_cnt = [0 for _ in range(15)]\n        b_cnt = [0 for _ in range(15)]\n        c_cnt = [0 for _ in range(15)]\n        for j in range(15):\n            a_cnt[j] = c_cnt[j] = b_cnt[j] = 0\n            if j + a >= 15:\n                break\n            a_cnt[j + a] += 1\n            c_cnt[j + c] += 1\n            b_cnt[j + b] += 1\n        #print(a_cnt, b_cnt, c_cnt)\n        update(a_cnt[0], b_cnt[0])\n        update(a_cnt[1], b_cnt[1])\n        update(a_cnt[2], b_cnt[2])\n        update(a_cnt[3], b_cnt[3])\n        update(a_cnt[4], b_cnt[4])\n        update(a_cnt[5], b_cnt[5])\n        update(a_cnt[6], b_cnt[6])\n        update(a_cnt[7], b_cnt[7])\n        update(a_cnt[8], b_cnt[8])\n        update(a_cnt[9], b_cnt[9])\n        update(a_cnt[10], b_cnt[10])\n        update(a_cnt[11], b_cnt[11])\n        update(a_cnt[12], b_cnt[12])\n        update(a_cnt[13], b_cnt[13])\n        update(a_cnt[14], b_cnt[14])\n\n    #print(m_cnt)\n\n    m = max(m_cnt)\n    return str(m)\n"
    },
    {
        "number": 4655,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline())\n    for _ in range(q):\n        a, b, c = [int(x) for x in stdin.readline().split()]\n        c = min(c, max(a, b))\n        print(c - a)\n"
    },
    {
        "number": 4655,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    while n > 0:\n        a, b, c = map(int, stdin.readline().split())\n        print(max(a, b, c) - min(a, b, c))\n        n -= 1\n    return \"\"\n"
    },
    {
        "number": 4655,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return''.join(map(str, result))"
    },
    {
        "number": 4655,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return ''\n"
    },
    {
        "number": 4655,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # It's main function. Don't remove this function\n    # It's using for auto-testing\n    # and if you want to run this code in the embedded system, this is the right place to do\n    # Your solution here\n    # read input and divide it into lines\n    lines = stdin.split('\\n')\n    # iterate over lines\n    for line in lines:\n        # divide each line into a list of integers\n        line = line.split()\n        for i in range(len(line)):\n            # convert each integer to int\n            line[i] = int(line[i])\n        # convert each list to tuple\n        line = tuple(line)\n        print(f\"line: {line}\")\n    return solution\n"
    },
    {
        "number": 4655,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    candies = []\n    for _ in range(n):\n        candies.append(tuple(map(int, stdin.split())))\n    return solve(candies)\n\n\ndef"
    },
    {
        "number": 4655,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4655,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return str(compute_answer(parse_input(stdin)))\n\ndef"
    },
    {
        "number": 4655,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your solution\n    return ''\n"
    },
    {
        "number": 4656,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4656,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\""
    },
    {
        "number": 4656,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def solution2(n, k, s):\n        count = 0\n        for c in s:\n            if c == 'a' and count == k:\n                return True\n            elif c == 'a':\n                count += 1\n            else:\n                count = 0\n        return False\n\n    def solution3(n, k, s):\n        count = 0\n        for c in s:\n            if c == 'a' and count == k:\n                return True\n            elif c == 'a':\n                count += 1\n        return False\n\n    def solution4(n, k, s):\n        l, r = set(s), set(s)\n        for i in range(1, n):\n            l = {c + s[i] for c in l}\n            r = {s[i] + c for c in r}\n            l.update(r)\n            l, r = r, l\n            if len(l) == k:\n                return True\n        return False\n\n    def solution5(n, k, s):\n        left = 0\n        ans = [0] * n\n        for right in range(n):\n            while left < n and ans[left] == 0:\n                ans[left] = s[right]\n                left += 1\n            if right - left + 1 == k:\n                return True\n            ans[right % n] = 0\n        return False\n\n    def solution6(n, k, s):\n        from collections import Counter\n        c = Counter(s)\n        for i in range(1, n):\n            c[s[i - 1]] -= 1\n            c[s[i]] += 1\n            if max(c.values()) == k:\n                return True\n        return False\n\n    return str(solution6(int(stdin[0].split()[0]), int(stdin[0].split()[1]), stdin[1]))\n"
    },
    {
        "number": 4656,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    This function creates a set of valid combinations of beads,\n    and then checks each possibility to find the maximum length.\n    \"\"\"\n    set_of_combinations = set()\n    possible_combinations = set()\n    # loop through all combinations of beads\n    for i in range(1, len(stdin) + 1):\n        # loop through all combinations of length i\n        for j in itertools.combinations(stdin, i):\n            # create a string with the current combination\n            current_combination = \"\".join(j)\n            # check if the current combination is in the set of valid combinations\n            if current_combination in set_of_combinations:\n                # if it is, then we add the current combination to the set of possible combinations\n                possible_combinations.add(current_combination)\n        # we add the current combination to the set of valid combinations\n        set_of_combinations.add(current_combination)\n    # we find the longest length of the possible combinations\n    max_length = 0\n    for combination in possible_combinations:\n        if len(combination) > max_length:\n            max_length = len(combination)\n    # we return the length\n    return max_length"
    },
    {
        "number": 4656,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    My Solution\n    \"\"\"\n    # MY SOLUTION\n    cases, _, *s = stdin.split('\\n')\n    for i, case in enumerate(cases):\n        n, k = case.split(' ')\n        s = s[i]\n        print(len(max([''.join(s[i:j]) for i in range(len(s)) for j in range(i, len(s)) if ''.join(s[i:j]).count(s[i]) == k])))\n"
    },
    {
        "number": 4656,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Returns the length of the maximum length of a $k$-beautiful\n    necklace that can be assembled from beads of $s$.\n    \"\"\"\n    # Parse the string input into a list.\n    beads = list(stdin)\n\n    # Compute the number of different colors.\n    colors = set(beads)\n    num_colors = len(colors)\n\n    # Compute the maximum length of a necklace if no color appears twice.\n    if num_colors == len(beads):\n        return len(beads)\n\n    # Compute the max_necklace length.\n    max_necklace = 0\n    for color in colors:\n        # Compute the max_necklace length with only one color.\n        color_count = beads.count(color)\n        max_necklace = max(max_necklace, color_count)\n\n    # Compute the max_necklace length for each color.\n    max_necklace_per_color = []\n    for color in colors:\n        color_count = beads.count(color)\n        max_necklace_per_color.append(color_count)\n\n    # Compute the length of the max_necklace for each color.\n    max_necklace_per_color.sort()\n    max_necklace_per_color.reverse()\n\n    # Compute the max_necklace length with two or more colors.\n    for i in range(len(max_necklace_per_color) - 1):\n        # Compute the max_necklace length with two or more colors.\n        max_necklace += max_necklace_per_color[i] * (\n            max_necklace_per_color[i + 1]\n        )\n    return max_necklace + max_necklace_per_color[0]\n\n\ndef"
    },
    {
        "number": 4656,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nfrom itertools import permutations, cycle\nfrom collections import deque, defaultdict\nfrom functools import lru_cache\nfrom typing import List, Set, Deque, Tuple, Dict, DefaultDict, Callable\n\ndef"
    },
    {
        "number": 4656,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4656,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4656,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k, s = stdin.split(\" \")\n    return str(len(s) - max(len(set(s[:k])), len(set(s[k:][::-1]))))\n"
    },
    {
        "number": 4657,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = stdin.split()\n    n = int(n)\n    k = int(k)\n    if k <= 1 or k >= n:\n        return 'NO'\n    arr = [int(x) for x in stdin.split()]\n    arr.sort()\n    s = sum(arr)\n    if s % 2 == 0:\n        return 'NO'\n    avg = s // k\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            arr[i] += 1\n            break\n    while sum(arr)!= 0:\n        for i in range(1, k):\n            if arr[i] % 2!= 0:\n                return 'NO'\n            elif arr[i - 1] + 1!= arr[i]:\n                return 'NO'\n        return 'YES\\n' + str(arr[0]) +'' + str(arr[i]) + '\\n' + str(arr[i] + 1) * (n - i - 1)\nprint(solution(input()))\n\ndef"
    },
    {
        "number": 4657,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Input:\n    3\n    5 3\n    7 18 3 14 1\n    5 4\n    1 2 3 4 5\n    6 2\n    1 2 8 4 10 2\n    Output:\n    YES\n    1 3 5\n    NO\n    NO\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4657,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Return YES if it is possible to divide the initial array into exactly\n    K subsegments such that each of them will have odd sum of elements.\n    Otherwise, return NO.\n    \"\"\"\n    n, k = list(map(int, stdin.split()))\n    nums = list(map(int, stdin.split()))\n    odd = 0\n    for i, num in enumerate(nums):\n        if num % 2 == 1:\n            odd += 1\n            if odd > k:\n                return \"NO\"\n        if i > 0 and nums[i] < nums[i - 1]:\n            nums = nums[i:] + nums[:i]\n    if odd < k:\n        return \"NO\"\n    segment = [sum(nums[:i]) for i in range(1, len(nums) + 1)]\n    segment.sort()\n    start = 0\n    for i in range(k):\n        if odd >= k:\n            break\n        subsegment = segment[start:]\n        if sum(subsegment) % 2 == 0:\n            start += 1\n        else:\n            odd += 1\n    if odd >= k:\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 4657,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(r'5 3\\n7 18 3 14 1\\n')\n    YES\n    1 3 5\n    NO\n    NO\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4657,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline())\n    for _ in range(q):\n        n, k = [int(x) for x in stdin.readline().split()]\n        a = [int(x) for x in stdin.readline().split()]\n        if k >= n or sum(a) % 2 == 0:\n            print(\"NO\")\n        else:\n            b = [0] * n\n            for i in range(n):\n                b[i] = i % k + 1\n            for i in range(n):\n                print(b[i], end=\" \")\n            print()\n    return \"\"\n"
    },
    {
        "number": 4657,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"compute and return the required string\"\n    return ''\n"
    },
    {
        "number": 4657,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    pass\n"
    },
    {
        "number": 4657,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    return \"\"\"\n\"\"\"\n"
    },
    {
        "number": 4657,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \n    return \"\"\n"
    },
    {
        "number": 4657,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def solve(n, k, a):\n        m = [0]\n        for i in a:\n            m.append(m[-1] + i)\n        s = [0]\n        for i in m:\n            s.append(s[-1] + i)\n        d = {s[k]: k for k in range(1, len(s))}\n        for i in range(1, len(s)):\n            if s[i] % 2 == 0:\n                if i not in d or d[i]!= i:\n                    return \"NO\"\n        return \"YES\"\n    \n    q = int(stdin.readline())\n    for _ in range(q):\n        n, k = map(int, stdin.readline().split())\n        a = list(map(int, stdin.readline().split()))\n        print(solve(n, k, a))"
    },
    {
        "number": 4658,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n'''\n\ndef"
    },
    {
        "number": 4658,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return stdin[::-1]\n\n\nimport re\nfrom typing import List\n\n\ndef"
    },
    {
        "number": 4658,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return...\n\"\"\"\n\nimport os\n\n\ndef"
    },
    {
        "number": 4658,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4658,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n  pass\n"
    },
    {
        "number": 4658,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4658,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return '{0:032b}'.format(int(stdin, 2))\n"
    },
    {
        "number": 4658,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Do your code here\n    # return None\n    pass\n"
    },
    {
        "number": 4658,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 4658,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4659,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4659,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Main solution function.\"\"\"\n    pass\n"
    },
    {
        "number": 4659,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    try:\n        numRows = int(stdin)\n    except:\n        return \"Not an integer\"\n    list = []\n    for x in range(numRows):\n        newList = []\n        for y in range(x+1):\n            if y == 0 or y == x:\n                newList.append(1)\n            else:\n                newList.append(list[x-1][y-1] + list[x-1][y])\n        list.append(newList)\n    return list\n\n\nprint(solution(5))\n"
    },
    {
        "number": 4659,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"Generate and return the triangle of Pascal's triangle.\"\n    triangle = []\n    for numRows in range(int(stdin)):\n        row = []\n        for i in range(numRows + 1):\n            if i == 0 or i == numRows:\n                row.append(1)\n            else:\n                row.append(triangle[numRows - 1][i - 1] + triangle[numRows - 1][i])\n        triangle.append(row)\n    return triangle\n"
    },
    {
        "number": 4659,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \n    pass\n\nassert solution(\"5\") == [[1], [1,1], [1,2,1], [1,3,3,1], [1,4,6,4,1]]\n"
    },
    {
        "number": 4659,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    input_array = []\n    for i in range(int(stdin)):\n        input_array.append(0)\n    return input_array"
    },
    {
        "number": 4659,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    result = [[] for _ in range(int(stdin))]\n    for i in range(int(stdin)):\n        for j in range(i + 1):\n            if j == 0 or j == i:\n                result[i].append(1)\n            else:\n                result[i].append(result[i - 1][j - 1] + result[i - 1][j])\n    return result"
    },
    {
        "number": 4659,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    This solution is based on the base case. The general case is based on the recursive case.\n    \"\"\"\n    if len(stdin) == 1:\n        return [[1]]\n    elif len(stdin) == 2:\n        return [[1], [1, 1]]\n    elif len(stdin) == 3:\n        return [[1], [1, 1], [1, 2, 1]]\n    else:\n        if stdin[0]!= '1':\n            return [[1], [1, 1]]\n        else:\n            new_stdin = stdin[1:]\n            return [[1]] + [[i + j for i, j in zip([1] + [0] * (len(new_stdin) - 1), new_stdin)] + [1] if i!= 0 else [0] * len(new_stdin) for i in range(2, len(new_stdin) + 2)]\n"
    },
    {
        "number": 4659,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    if numRows < 0:\n        return\n    if numRows == 0:\n        return\n    if numRows == 1:\n        return [[1]]\n    result = [[1]]\n    for i in range(1, numRows):\n        row = [1]\n        for j in range(i):\n            row.append(result[i - 1][j] + result[i - 1][j + 1])\n        row.append(1)\n        result.append(row)\n    return result\n"
    },
    {
        "number": 4659,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \n    def pascal_row(n: int) -> List[int]:\n        # Since Pascal's Triangle is symmetric, we can ignore the last column\n        return [1] * n + [1] + [0] * (n - 1)\n    \n    def pascal_triangle(n: int) -> List[List[int]]:\n        # Create the base of our triangle, which is always going to be 1\n        pascal_triangle = [[1]]\n        \n        while len(pascal_triangle) < n:\n            pascal_triangle.append(pascal_row(len(pascal_triangle[-1])))\n        \n        return pascal_triangle\n    \n    return pascal_triangle(int(stdin))\n"
    },
    {
        "number": 4660,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    \n    def is_valid_email(email):\n        username = email.split('@')[0]\n        username = username.replace('.', '')\n        if not username.isalnum() or len(username) > 100:\n            return False\n        website = email.split('@')[1]\n        if not website.isalnum() or len(website) > 100:\n            return False\n        return True\n    \n    n = int(stdin)\n    emails = []\n    for i in range(n):\n        email = stdin\n        if not is_valid_email(email):\n            pass\n        else:\n            emails.append(email)\n    emails.sort()\n    return emails\n"
    },
    {
        "number": 4660,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \n    \n    from re import sub, compile\n    \n    def validate(email):\n        \n        regex = compile(r\"^[a-zA-Z0-9_-]+\\@[a-zA-Z0-9]+\\.[a-zA-Z]{1,3}$\")\n        if regex.match(email):\n            return True\n        else:\n            return False\n    \n    \n    emails = stdin.split(\"\\n\")\n    \n    valid_emails = list(filter(validate, emails))\n    \n    sorted_emails = sorted(valid_emails)\n    \n    \n    return sorted_emails\n"
    },
    {
        "number": 4660,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return a list containing the valid email addresses in lexicographical order.\n    If the list is empty, just output an empty list, [].\n    \"\"\"\n    pass"
    },
    {
        "number": 4660,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    l = []\n    for i in range(int(stdin)):\n        l.append(list(stdin[i].split(\"@\")))\n    filter_l = list(filter(lambda x: x[1][-4:] == \".com\", l))\n    filter_l.sort()\n    return filter_l\n\nprint(solution(stdin=str(len(l))+\"\\n\"+\"\\n\".join(l)))\n\n\"\"\"\n\nimport re\n"
    },
    {
        "number": 4660,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return a list containing the valid email addresses in lexicographical order.\"\"\"\n    return []"
    },
    {
        "number": 4660,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4660,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n\nfor _ in range(int(input())):\n    print(solution(input()))\n"
    },
    {
        "number": 4660,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    emails = [line.strip().lower() for line in stdin]\n    valid_emails = []\n\n    for email in emails:\n        if '@' in email and '.' in email and email.index('@') < email.index('.'):\n            valid_emails.append(email)\n\n    valid_emails.sort()\n\n    return valid_emails"
    },
    {
        "number": 4660,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \n    import re\n    import operator\n    \n    n = int(stdin)\n    l = []\n    for i in range(n):\n        l.append(stdin)\n    \n    def is_valid(addr):\n        pattern = re.compile(\"^[a-zA-Z0-9_\\-]+@[a-zA-Z0-9]+\\.[a-zA-Z]{1,3}$\")\n        if pattern.match(addr):\n            return True\n        else:\n            return False\n    \n    l = list(filter(is_valid, l))\n    l = sorted(l, key=operator.itemgetter(0))\n    return l\n\ndef"
    },
    {
        "number": 4660,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    return [stdin.readline() for _ in range(N)]\n\nprint(solution(stdin))\n\n\n=====Test Case=====\nYour solution should pass the following test cases.\nInput:\n3\nlara@hackerrank.com\nbrian-23@hackerrank.com\nbritts_54@hackerrank.com\n\nOutput:\n['brian-23@hackerrank.com', 'britts_54@hackerrank.com', 'lara@hackerrank.com']\n\nInput:\n1\naaa@google.com\n\nOutput:\n['aaa@google.com']\n"
    },
    {
        "number": 4661,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    def fib(n: int) -> int:\n        a = 0\n        b = 1\n        if n == 0:\n            return a\n        elif n == 1:\n            return b\n        else:\n            for i in range(n-1):\n                c = a + b\n                a = b\n                b = c\n            return b\n\n    def cube(x: int) -> int:\n        return x**3\n    return list(map(cube, [fib(i) for i in range(n)]))\n\nsolution(\"10\")\n\n=====Sample Output=====\n[0, 1, 1, 8, 27, 64, 125, 216, 343, 512]\n"
    },
    {
        "number": 4661,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(input())\n    a = 0\n    b = 1\n    c = a + b\n    L = []\n    L.append(a)\n    L.append(b)\n    while c < N:\n        a, b = b, c\n        c = a + b\n        L.append(c)\n    return L\n"
    },
    {
        "number": 4661,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return list(map(lambda x: x**3, fibonacci_numbers(int(stdin))))"
    },
    {
        "number": 4661,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n  return map(lambda n: n**3, map(lambda n: n, fibonacci_numbers(int(stdin))))"
    },
    {
        "number": 4661,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a = [1, 1]\n    for _ in range(int(stdin) - 2):\n        a.append(a[-1] + a[-2])\n    return list(map(lambda x: x**3, a))\n\nThe provided code stub will read in a dictionary containing key/value pairs of name:[marks] for a list of students. Print the average of the marks array for the student name provided, showing 2 places after the decimal.\n\nSample Input 0\n\n3\nKrishna 67 68 69\nArjun 70 98 63\nMalika 52 56 60\nMalika\nSample Output 0\n\n56.00\n\nThe average marks of the second student is:\n\n'''"
    },
    {
        "number": 4661,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4661,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\n>>>>>>> b7522ba5389778e8576c407c6c561f68ab2635c7\n    return [lambda x: x ** 3 for x in map(int, stdin.split())]\n    \n"
    },
    {
        "number": 4661,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return list(map(lambda x: x ** 3, fibonacci(int(stdin))))\n    \n    # The map function applies a function to every member of an iterable and returns the result.\n    # In this example, the function is `x ** 3`, which raises `x` to the power of 3, \n    # and the iterable is `fibonacci(int(stdin))`, which is the Fibonacci sequence starting at 0. \n    # The result is a list of the cubes of each element of the Fibonacci sequence."
    },
    {
        "number": 4661,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return str(list(map(lambda x: x ** 3, fibonacci(int(stdin)))))\nsolution(input())\n\n>>>>>>> 561cd7b63d69ecfbd89ac7b9f091f6b7c31c4b\n"
    },
    {
        "number": 4661,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n\"\"\"\ndef"
    },
    {
        "number": 4662,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4662,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return -1\n"
    },
    {
        "number": 4662,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return 1\n\"\"\"\nimport xml.etree.ElementTree as etree"
    },
    {
        "number": 4662,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    import xml.etree.ElementTree as etree\n    import sys\n\n    maxdepth = 0\n    if (len(stdin) > 0):\n        tree = etree.ElementTree(etree.fromstring(stdin))\n        maxdepth = tree.findall('.//*')\n\n    return maxdepth\n\n    \"\"\"\n"
    },
    {
        "number": 4662,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    levels = []\n    n = int(stdin.readline().strip())\n    for _ in range(n):\n        level = stdin.readline().strip()\n        levels.append(level)\n\n    def count_level(level, counter):\n        if '</' in level:\n            for i in range(level.index('>') + 1, level.index('<')):\n                counter += count_level(level[i:], counter)\n            counter += 1\n            return counter\n        return 1\n\n    return str(max(list(map(count_level, levels))))\n"
    },
    {
        "number": 4662,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code goes here"
    },
    {
        "number": 4662,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return -1\n\"\"\"\n"
    },
    {
        "number": 4662,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    return str(solution.maxlevel(stdin))\n\ndef"
    },
    {
        "number": 4662,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Compute the number of tags in the input document.\n\n    Parameters:\n        stdin (str): The input document\n\n    Returns:\n        int: The maximum level of nesting in the input document\n    \"\"\"\n\n    import xml.etree.ElementTree as etree\n\n    xml = stdin\n    xml = etree.fromstring(xml)\n    nested = 0\n    for child in xml:\n        nested = max(nested, len(child.getchildren()))\n    return nested\n"
    },
    {
        "number": 4662,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\n=====Solution=====\nimport re\nimport sys\nfrom xml.etree import ElementTree\n\ndef"
    },
    {
        "number": 4663,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    for _ in range(n):\n        print(\"YES\" if re.match(r'\\d{3}-\\d{4}-\\d{4}', stdin.readline().strip()) else \"NO\")\n\nn = int(input())\nfor _ in range(n):\n    print(\"YES\" if re.match(r'\\d{3}-\\d{4}-\\d{4}', input()) else \"NO\")"
    },
    {
        "number": 4663,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def check_number(number: str) -> bool:\n        if len(number)!= 10:\n            return False\n        elif number[0] not in \"789\":\n            return False\n        elif not number.isnumeric():\n            return False\n        else:\n            return True\n    n = int(stdin)\n    for i in range(n):\n        print(\"YES\" if check_number(stdin) else \"NO\")"
    },
    {
        "number": 4663,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if re.match(r'^[789]\\d{9}$', stdin) else \"NO\""
    },
    {
        "number": 4663,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    valid = stdin.split('\\n')\n    for i in valid:\n        if re.match(r\"^[789][0-9]{9}$\", i) == None:\n            print(\"NO\")\n        else:\n            print(\"YES\")\n    return\n\n\n=====Execution Time=====\n\n=====Execution Results=====\nInput:\n\n7\n7777777777\n999888777\n77777777\n999888\n777777\n998234567\n\nOutput:\n\nYES\nNO\nYES\nNO\nYES\nNO\n\nExplanation:\n\nTest Case 1: This is a valid mobile number because it starts with 7, 7777 or 9.\nTest Case 2: 998234567 is not valid because it starts with 9 and has consecutive digits.\nTest Case 3: 7777 is not valid because it starts with 7.\nTest Case 4: 988 is not valid because it starts with 9.\nTest Case 5: 767 is not valid because it starts with 7.\nTest Case 6: 76543 is not valid because it doesn't follow the 10-digit rule.\n"
    },
    {
        "number": 4663,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport re\nfor _ in range(int(stdin)):\n    if re.match(r\"^[7,8,9]\\d{9}$\", stdin):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\n\nsolution(\"(02)405673987\")"
    },
    {
        "number": 4663,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns whether the number is a valid mobile number\"\"\"\n    pattern = r'^((\\+91|91|0)?\\d{10})$'\n    return 'YES' if re.match(pattern, stdin) else 'NO'\n\"\"\"\nimport re\n\ndef"
    },
    {
        "number": 4663,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    regex_pattern = r'^(7|8|9)\\d{9}$'\n    N = int(stdin.readline())\n    for _ in range(N):\n        if re.search(regex_pattern, stdin.readline()):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\n=====Test Cases=====\nInput:\n4\n9587456281\n1252478965\n9598756281\n95874562819\n\nOutput:\nYES\nNO\nYES\nNO\n\nExplanation:\nTest Case 1: The number is valid since it contains the pattern '^(7|8|9)\\d{9}$'.\nTest Case 2: The number is valid since it contains the pattern '^(7|8|9)\\d{9}$'.\nTest Case 3: The number is valid since it contains the pattern '^(7|8|9)\\d{9}$'.\nTest Case 4: The number is not valid since the pattern '^(7|8|9)\\d{9}$' matches all the numbers in the input.\n\nInput:\n4\n9587456281\n1234567890\n9598756281\n95874562819\n\nOutput:\nYES\nNO\nNO\nNO\n\nExplanation:\nTest Case 1: The number is valid since it contains the pattern '^(7|8|9)\\d{9}$'.\nTest Case 2: The number is valid since it contains the pattern '^(7|8|9)\\d{9}$'.\nTest Case 3: The number is not valid since the pattern '^(7|8|9)\\d{9}$' matches all the numbers in the input.\nTest Case 4: The number is not valid since the pattern '^(7|8|9)\\d{9}$' does not match all the numbers in the input.\n\nInput:\n4\n9587456281\n1234567890\n9598756281\n95874562819\n\nOutput:\nYES\nYES\nYES\nNO\n\nExplanation:\nTest Case 1: The number is valid since it contains the pattern '^(7|8|9)\\d{9}$'.\nTest Case 2: The number is valid since it contains the pattern '^(7|8|9)\\d{9}$'.\nTest Case 3: The number is valid since it contains the pattern '^(7|8|9)\\d{9}$'.\nTest Case 4: The number is not valid since the pattern '^(7|8|9)\\d{9}$' matches all the numbers in the input.\n\nInput:\n4\n9587456281\n123456789012345\n9598756281\n95874562819\n\nOutput:\nYES\nYES\nNO\nNO\n\nExplanation:\nTest Case 1: The number is valid since it contains the pattern '^(7|8|9)\\d{9}$'.\nTest Case 2: The number is not valid since the pattern '^(7|8|9)\\d{9}$' does not match all the numbers in the input.\nTest Case 3: The number is not valid since the pattern '^(7|8|9)\\d{9}$' does not match all the numbers in the input.\nTest Case 4: The number is not valid since the pattern '^(7|8|9)\\d{9}$' does not match all the numbers in the input.\n\ndef"
    },
    {
        "number": 4663,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    for line in stdin:\n        if re.search(r'(^[789])', line):\n            print('YES')\n        else:\n            print('NO')\nSolution\n\nIn [1]: solution(['7123456789', '111', '912345678'])\nYES\nYES\nNO\nIn [2]: solution(['876456789', '912345678'])\nYES\nNO\nIn [3]: solution(['987654321'])\nYES\nIn [4]: solution(['987654321', '987'])\nYES\nNO\nIn [5]: solution(['1234567890'])\nNO\nIn [6]: solution(['987654321', '988'])\nNO\nIn [7]: solution(['988764567'])\nNO\nIn [8]: solution(['98876'])\nYES\nIn [9]: solution(['98876 4567'])\nNO\nIn [10]: solution(['9887645678'])\nNO\nIn [11]: solution(['98876456789'])\nNO\nIn [12]: solution(['987654321', '123'])\nNO\nIn [13]: solution(['123', '12345'])\nYES\nIn [14]: solution(['123', '1234'])\nYES\nIn [15]: solution(['123', '12345'])\nYES\nIn [16]: solution(['123', '12345'])\nYES\nIn [17]: solution(['123', '12345'])\nYES\nIn [18]: solution(['123', '12345'])\nYES\nIn [19]: solution(['123', '12345'])\nYES\nIn [20]: solution(['123', '12345'])\nYES\nIn [21]: solution(['123', '12345'])\nYES\nIn [22]: solution(['123', '12345'])\nYES\nIn [23]: solution(['123', '12345'])\nYES\nIn [24]: solution(['123', '12345'])\nYES\nIn [25]: solution(['123', '12345'])\nYES\nIn [26]: solution(['123', '12345'])\nYES\nIn [27]: solution(['123', '12345'])\nYES\nIn [28]: solution(['123', '12345'])\nYES\nIn [29]: solution(['123', '12345'])\nYES\nIn [30]: solution(['123', '12345'])\nYES\nIn [31]: solution(['123', '12345'])\nYES\nIn [32]: solution(['123', '12345'])\nYES\nIn [33]: solution(['123', '12345'])\nYES\nIn [34]: solution(['123', '12345'])\nYES\nIn [35]: solution(['123', '12345'])\nYES\nIn [36]: solution(['123', '12345'])\nYES\nIn [37]: solution(['123', '12345'])\nYES\nIn [38]: solution(['123', '12345'])\nYES\nIn [39]: solution(['123', '12345'])\nYES\nIn [40]: solution(['123', '12345'])\nYES\nIn [41]: solution(['123', '12345'])\nYES\nIn [42]: solution(['123', '12345'])\nYES\nIn [43]: solution(['123', '12345'])\nYES\nIn [44]: solution(['123', '12345'])\nYES\nIn [45]: solution(['123', '12345'])\nYES\nIn [46]: solution(['123', '12345'])\nYES\nIn [47]: solution(['123', '12345'])\nYES\nIn [48]: solution(['123', '12345'])\nYES\nIn [49]: solution(['123', '12345'])\nYES\nIn [50]: solution(['123', '12345'])\nYES\nIn [51]: solution(['123', '12345'])\nYES\nIn [52]: solution(['123', '12345'])\nYES\nIn [53]: solution(['123', '12345'])\nYES\nIn [54]: solution(['123', '12345'])\nYES\nIn [55]: solution(['123', '12345'])\nYES\nIn [56]: solution(['123', '12345'])\nYES\nIn [57]: solution(['123', '12345'])\nYES\nIn [58]: solution(['123', '12345'])\nYES\nIn [59]: solution(['123', '12345'])\nYES\nIn [60]: solution(['123', '12345'])\nYES\nIn [61]: solution(['123', '12345'])\nYES\nIn [62]: solution(['123', '12345'])\nYES\nIn [63]: solution(['123', '12345'])\nYES\nIn [64]: solution(['123', '12345'])\nYES\nIn [65]: solution(['123', '12345'])\nYES\nIn [66]: solution(['123', '12345'])\nYES\nIn [67]: solution(['123', '12345'])\nYES\nIn [68]: solution(['123', '12345'])\nYES\nIn [69]: solution(['123', '12345'])\nYES\nIn [70]: solution(['123', '12345'])\nYES\nIn [71]: solution(['123', '12345'])\nYES\nIn [72]: solution(['123', '12345'])\nYES\nIn [73]: solution(['123', '12345'])\nYES\nIn [74]: solution(['123', '12345'])\nYES\nIn [75]: solution(['123', '12345'])\nYES\nIn [76]: solution(['123', '12345'])\nYES\nIn [77]: solution(['123', '12345'])\nYES\nIn [78]: solution(['123', '12345'])\nYES\nIn [79]: solution(['123', '12345'])\nYES\nIn [80]: solution(['123', '12345'])\nYES\nIn [81]: solution(['123', '12345'])\nYES\nIn [82]: solution(['123', '12345'])\nYES\nIn [83]: solution(['123', '12345'])\nYES\nIn [84]: solution(['123', '12345'])\nYES\nIn [85]: solution(['123', '12345'])\nYES\nIn [86]: solution(['123', '12345'])\nYES\nIn [87]: solution(['123', '12345'])\nYES\nIn [88]: solution(['123', '12345'])\nYES\nIn [89]: solution(['123', '12345'])\nYES\nIn [90]: solution(['123', '12345'])\nYES\nIn [91]: solution(['123', '12345'])\nYES\nIn [92]: solution(['123', '12345'])\nYES\nIn [93]: solution(['123', '12345'])\nYES\nIn [94]: solution(['123', '12345'])\nYES\nIn [95]: solution(['123', '12345'])\nYES\nIn [96]: solution(['123', '12345'])\nYES\nIn [97]: solution(['123', '12345'])\nYES\nIn [98]: solution(['123', '12345'])\nYES\nIn [99]: solution(['123', '12345'])\nYES\nIn [100]: solution(['123', '12345'])\nYES\nIn [101]: solution(['123', '12345'])\nYES\nIn [102]: solution(['123', '12345'])\nYES\nIn [103]: solution(['123', '12345'])\nYES\nIn [104]: solution(['123', '12345'])\nYES\nIn [105]: solution(['123', '12345'])\nYES\nIn [106]: solution(['123', '12345'])\n"
    },
    {
        "number": 4663,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if re.match(r'^(7|8|9)[0-9]{9}$', stdin) is not None else \"NO\"\n\nSolution\n"
    },
    {
        "number": 4663,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Determine whether the string is a valid mobile number\n\n    Args:\n        stdin (str): Input string\n\n    Returns:\n        str: Output string\n    \"\"\"\n    def is_valid(phone_number: str):\n        \"\"\"Determine whether the string is a valid mobile number\n\n        Args:\n            phone_number (str): Input string\n\n        Returns:\n            str: Output string\n        \"\"\"\n        if phone_number[0] == '8' or phone_number[0] == '9':\n            return True\n        return False\n\n    def is_valid_2(phone_number: str):\n        \"\"\"Determine whether the string is a valid mobile number\n\n        Args:\n            phone_number (str): Input string\n\n        Returns:\n            str: Output string\n        \"\"\"\n        if len(phone_number)!= 10:\n            return False\n        if phone_number[0]!= '7' and phone_number[0]!= '8' and phone_number[0]!= '9':\n            return False\n        for c in phone_number[1:]:\n            if not c.isdigit():\n                return False\n        return True\n\n    if __name__ == '__main__':\n        output = 'YES' if is_valid_2(stdin) else 'NO'\n        return output\n=====END=====\nYou are given a string containing characters A and B only. Your task is to change it into a string such that there are no matching adjacent characters. To do this, you are allowed to delete zero or more characters in the string.\n\nYour task is to find the minimum number of required deletions.\n\nFor example, given the string s=AABAAB, remove an A at positions 0 and 3 to make s=ABAB in 2 deletions.\n\nFunction Description\n\nComplete the alternatingCharacters function in the editor below. It must return an integer representing the minimum number of deletions to make the alternating string.\n\nalternatingCharacters has the following parameter(s):\n\ns: a string\nInput Format\n\nThe first line contains an integer, the number of test cases.\nEach of the next  lines contains a string.\n\nConstraints\n\nOutput Format\n\nFor each string, print the minimum number of deletions needed to make it alternating.\n\nSample Input\n\n3\nAAB\nBAA\nAABBB\nSample Output\n\n3\n0\n2\nExplanation\n\nTest Case 0: To make s=ABAB, we remove the following characters: A from position 1 and B from position 2.\n\nTest Case 1: s=ABAB contains an even number of A characters, so you can delete one of them.\n\nTest Case 2: To make s=ABAB, we remove the following characters: A from position 0 and B from position 3.\n\n=====END=====\ndef"
    },
    {
        "number": 4664,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m, m_numbers = (int(input()) for _ in range(2))\n    m_set = set(map(int, input().split()))\n    n, n_numbers = (int(input()) for _ in range(2))\n    n_set = set(map(int, input().split()))\n    m_n_set = m_set.difference(n_set)\n    n_m_set = n_set.difference(m_set)\n    for number in sorted(m_n_set.union(n_m_set)):\n        print(number)"
    },
    {
        "number": 4664,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    m = int(stdin.readline())\n    m_set = set(map(int, stdin.readline().split()))\n    n = int(stdin.readline())\n    n_set = set(map(int, stdin.readline().split()))\n    result_set = m_set.symmetric_difference(n_set)\n    for el in sorted(result_set):\n        print(el)\n    return\n\n\nSolution:\n\ntest_string = input()\nm_set = set(map(int, test_string.split()))\ntest_string = input()\nn_set = set(map(int, test_string.split()))\nresult_set = m_set.symmetric_difference(n_set)\nfor el in sorted(result_set):\n    print(el)\n"
    },
    {
        "number": 4664,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    mylist = [int(x) for x in stdin.split('\\n')]\n    mylist1 = mylist[1:]\n    mylist2 = mylist[3:]\n    #print(mylist1)\n    #print(mylist2)\n    myset1 = set(mylist1)\n    myset2 = set(mylist2)\n    myset3 = myset1.difference(myset2)\n    myset4 = myset2.difference(myset1)\n    myset3 = list(myset3)\n    myset4 = list(myset4)\n    myset3.sort()\n    myset4.sort()\n    for x in myset3:\n        print(x)\n    for x in myset4:\n        print(x)\n    "
    },
    {
        "number": 4664,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    m: int = int(stdin.readline())\n    set_1: set[int] = set(map(int, stdin.readline().split()))\n    n: int = int(stdin.readline())\n    set_2: set[int] = set(map(int, stdin.readline().split()))\n    result: set[int] = set_1.union(set_2)\n    result.difference_update(set_1.intersection(set_2))\n    return '\\n'.join(sorted(list(result)))"
    },
    {
        "number": 4664,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    #read in the input\n    M = stdin.split()[0]\n    list1 = stdin.split()[1:]\n    M = int(M)\n    list1 = [int(x) for x in list1]\n    N = stdin.split()[2]\n    list2 = stdin.split()[3:]\n    N = int(N)\n    list2 = [int(x) for x in list2]\n\n    #merge the sets\n    all = list1 + list2\n    all.sort()\n\n    #return the result\n    result = []\n    for i in all:\n        if i not in list1 or i not in list2:\n            result.append(i)\n    return \"\\n\".join([str(x) for x in result])"
    },
    {
        "number": 4664,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    m: int = int(stdin.readline())\n    set_m: set[int] = set(map(int, stdin.readline().split()))\n\n    n: int = int(stdin.readline())\n    set_n: set[int] = set(map(int, stdin.readline().split()))\n\n    sym_diff: set[int] = set_m.symmetric_difference(set_n)\n    sym_diff: list[int] = list(sym_diff)\n    sym_diff.sort()\n\n    for i in range(len(sym_diff)):\n        print(sym_diff[i])\n"
    },
    {
        "number": 4664,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.split()\n    \n"
    },
    {
        "number": 4664,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    a = set(map(int, stdin.split()))\n    m = int(input())\n    b = set(map(int, stdin.split()))\n    \n    c = a.difference(b)\n    d = b.difference(a)\n    e = c.union(d)\n    f = sorted(e)\n    \n    for i in f:\n        print(i)\n        \n    return \"\"\n    \n    \n"
    },
    {
        "number": 4664,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    m = int(input())\n    m_set = set(map(int, input().split()))\n    n = int(input())\n    n_set = set(map(int, input().split()))\n    result = m_set ^ n_set\n    for item in sorted(result):\n        print(item)\n    return ''"
    },
    {
        "number": 4664,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    m = stdin\n    m = list(map(int,m.split()))\n    m = set(m)\n    n = stdin\n    n = list(map(int,n.split()))\n    n = set(n)\n    if len(m) > len(n):\n        big = m\n        small = n\n    else:\n        big = n\n        small = m\n    big_set = big.difference(small)\n    return \" \".join([str(i) for i in sorted(big_set)])\n"
    },
    {
        "number": 4665,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\n=====Test Case=====\nInput\n2\nID         MARKS      NAME       CLASS\n1          97         Raymond    7\n2          50         Steven     4\nOutput\n\nRaymond: 90.0\nSteven: 33.33\nExplanation\n\nThe average of student 1 is 97 / 2 = 48.5\nThe average of student 2 is 50 / 2 = 25\n\n=====Sample Input=====\n5\nMARKS      CLASS      NAME       ID\n92         2          Calum      1\n82         5          Scott      2\n94         2          Jason      3\n55         8          Glenn      4\n82         2          Fergus     5\nOutput\n\n78.00\nExplanation\n\nAverage = (94 + 55 + 82 + 82 + 82) / 5\n\nSample Input\n5\nID         MARKS      NAME       CLASS\n1          97         Raymond    7\n2          50         Steven     4\n3          91         Adrian     9\n4          72         Stewart    5\n5          80         Peter      6\nSample Output\n\n81.00\nExplanation\n\nAverage = (97 + 50 + 91 + 72 + 80) / 5\n\n=====Performance=====\nTime:\n100%\n\nMemory:\n100%\n\n=====Code Results=====\nCorrect Output\nInput\n5\nID         MARKS      NAME       CLASS\n1          97         Raymond    7\n2          50         Steven     4\n3          91         Adrian     9\n4          72         Stewart    5\n5          80         Peter      6\nOutput\n\n81.00\nExplanation\n\nAverage = (97 + 50 + 91 + 72 + 80) / 5\n\nWrong Output\nInput\n5\nMARKS      CLASS      NAME       ID\n92         2          Calum      1\n82         5          Scott      2\n94         2          Jason      3\n55         8          Glenn      4\n82         2          Fergus     5\nOutput\n\n78.00\nExplanation\n\nAverage = (94 + 55 + 82 + 82 + 82) / 5\n\n'''\nfrom collections import namedtuple\n\nNumber = namedtuple('Number',['n1','n2','n3','n4','n5'])\n\na = Number(n1= int(input()), n2= int(input()), n3= int(input()), n4= int(input()), n5= int(input()))\n\nprint(round(sum(a)/5,2))\n"
    },
    {
        "number": 4665,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n    stdin = stdin.split('\\n')\n    marks = [int(i) for i in stdin[1].split(' ')]\n    students = stdin[0]\n    total_marks = 0\n    for i in marks:\n        total_marks += i\n    marks_average = round(total_marks / students, 2)\n    print(marks_average)\n    return marks_average\n"
    },
    {
        "number": 4665,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return result\n\n=====Test Cases=====\nTest Case 1\nInput\n4\nID         MARKS      NAME       CLASS\n1          97         Raymond    7\n2          50         Steven     4\n3          91         Adrian     9\n4          72         Stewart    5\n\nOutput\n91.00\n\nTest Case 2\nInput\n5\nMARKS      CLASS      NAME       ID       \n92         2          Calum      1       \n82         5          Scott      2       \n94         2          Jason      3       \n55         8          Glenn      4       \n82         2          Fergus     5\n\nOutput\n81.00\n\nTest Case 3\nInput\n5\nCLASS      MARKS      NAME       ID       \n2          98         Peter      1       \n2          95         Stewart    2       \n2          92         Stewart    3       \n2          99         Stephanie   4       \n2          88         Stewart    5\n\nOutput\n85.00\n\"\"\""
    },
    {
        "number": 4665,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\n=====Test Case 1=====\nInput\n5\nID         MARKS      NAME       CLASS\n1          97         Raymond    7\n2          50         Steven     4\n3          91         Adrian     9\n4          72         Stewart    5\n5          80         Peter      6\n\nOutput\n78.00\n\n=====Test Case 2=====\nInput\n5\nMARKS      CLASS      NAME       ID\n92         2          Calum      1\n82         5          Scott      2\n94         2          Jason      3\n55         8          Glenn      4\n82         2          Fergus     5\n\nOutput\n81.00\n\n=====Test Case 3=====\nInput\n4\nSL   6      SINHALA    ARJUN      2\nS    7      ENGLISH    PRABHU     4\nH    8      HINDI      AJAY       1\nP    5      MATHEMATICS ARJUN      3\n\nOutput\n67.00\n\n=====Test Case 4=====\nInput\n3\nID         MARKS      NAME       CLASS\n1          97         Raymond    7\n2          50         Steven     4\n3          91         Adrian     9\n\nOutput\n78.00\n\n=====Test Case 5=====\nInput\n2\nID         MARKS      NAME       CLASS\n1          97         Raymond    7\n2          50         Steven     4\n\nOutput\n81.00\n\n=====Test Case 6=====\nInput\n5\nMARKS      CLASS      NAME       ID\n92         2          Calum      1\n82         5          Scott      2\n94         2          Jason      3\n55         8          Glenn      4\n82         2          Fergus     5\n\nOutput\n81.00\n\"\"\"\n\nfrom collections import namedtuple\n\nnum_students = int(input())\ncolumns = input().split()\nstudents = []\n\nStudent = namedtuple('Student', columns)\n\nfor _ in range(num_students):\n    students.append(Student(*input().split()))\n\ntotal = 0\nfor student in students:\n    total += int(student.MARKS)\nprint(f'{total / num_students:.2f}')"
    },
    {
        "number": 4665,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport collections\n\nn = int(input())\nstd = collections.namedtuple(\"student\", input())\nsum_ = 0\nfor i in range(n):\n    sum_ = sum_ + int(std._make(input().split()).MARKS)\nprint(f\"{round(sum_/n,2):.2f}\")"
    },
    {
        "number": 4665,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, column = map(int, stdin.split())\n    column_names = stdin.split()\n    student_marks = {}\n    for _ in range(n):\n        line = stdin.split()\n        scores = [int(i) for i in line[1:]]\n        student_marks[line[0]] = scores\n    query_name = stdin.split()[0]\n    avg = sum(student_marks[query_name]) / len(student_marks[query_name])\n    print(format(avg, \".2f\"))\n    return avg\n\n=====Sample Input=====\n5\nID         MARKS      NAME       CLASS     \n1          97         Raymond    7         \n2          50         Steven     4         \n3          91         Adrian     9         \n4          72         Stewart    5         \n5          80         Peter      6  \n\n=====Sample Output=====\n78.00\n\ndef"
    },
    {
        "number": 4665,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    cols = ('ID', 'MARKS', 'CLASS', 'NAME')\n    Student = namedtuple('Student', cols)\n\n    total_students = 0\n    total_sum = 0\n\n    lines = stdin.split('\\n')\n    header = lines[0].split()\n    columns = [lines[i].split() for i in range(1, len(lines))]\n\n    students = [Student(columns[i][j], columns[i][k], columns[i][l], columns[i][m])\n                for i in range(len(columns)) for j in range(len(header))\n                for k in range(len(columns[0])) for l in range(len(header))\n                for m in range(len(columns[0])) if header[j] == cols[k]]\n\n    for student in students:\n        total_sum += int(student.MARKS)\n        total_students += 1\n    print(\"%.2f\" % (total_sum / total_students))\n"
    },
    {
        "number": 4665,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n'''\n    list1 = []\n    l2 = [i.split(',') for i in stdin.split('\\n')]\n    for i in l2:\n        x = Student(i[0], i[1], i[2], i[3])\n        list1.append(x)\n    res = []\n    for i in list1:\n        res.append(i.calculate_avg())\n    return sorted(res, key=lambda i: i.get_avg(), reverse=True)[0].get_avg()\n\ndef"
    },
    {
        "number": 4665,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time: 6 mins\n    \"\"\"\n    students = stdin.split('\\n')\n    students.remove('')\n    \n    total = 0\n    \n    for i in range(len(students)):\n        students[i] = students[i].split()\n        students[i][1] = int(students[i][1])\n        total += students[i][1]\n    \n    print(f'{round(total/len(students),2):.2f}')\n\n=====Solution=====\ndef"
    },
    {
        "number": 4665,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # get input\n    num_students = int(stdin[0])\n    column_names = stdin[1]\n    column_values = []\n    \n    # split input on ', '\n    column_names = column_names.split(', ')\n    \n    # iterate over stdin, add to column_values\n    for i in range(num_students):\n        column_values.append(stdin[i+2].split(', '))\n    \n    # create new list with corresponding column values\n    students = []\n    for i in range(num_students):\n        students.append([column_values[i][column_names.index(column_name)] for column_name in column_names])\n\n    # sum up all values in the column\n    sum_of_column_values = []\n    for i in range(num_students):\n        sum_of_column_values.append(sum(students[i]))\n        \n    # average each sum\n    average = []\n    for i in sum_of_column_values:\n        average.append(round(i/num_students, 2))\n    \n    # print each average\n    for i in average:\n        print(i)\n        \n    #return average\n    return(', '.join(str(elem) for elem in average))\n\n=====Test Cases=====\n"
    },
    {
        "number": 4666,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return \"Weird\" if n%2!=0 and n in range(2, 6) or n in range(6, 21) or n>20 else \"Not Weird\""
    },
    {
        "number": 4666,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \n    n = int(stdin)\n    if n % 2!= 0:\n        return \"Weird\"\n    if n % 2 == 0 and n >= 2 and n <= 5:\n        return \"Not Weird\"\n    if n % 2 == 0 and n >= 6 and n <= 20:\n        return \"Weird\"\n    if n % 2 == 0 and n > 20:\n        return \"Not Weird\"\n    \n"
    },
    {
        "number": 4666,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2 == 0:\n        if n in range(2, 6):\n            return 'Not Weird'\n        if n in range(6, 21):\n            return 'Weird'\n        if n > 20:\n            return 'Not Weird'\n    return 'Weird'\n    \n"
    },
    {
        "number": 4666,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    #If n is odd, print Weird\n    if not int(stdin) % 2 == 0:\n        return \"Weird\"\n    # If n is even and in the inclusive range of 2 to 5, print Not Weird\n    elif 2 <= int(stdin) <= 5:\n        return \"Not Weird\"\n    # If n is even and in the inclusive range of 6 to 20, print Weird\n    elif 6 <= int(stdin) <= 20:\n        return \"Weird\"\n    # If n is even and greater than 20, print Not Weird\n    else:\n        return \"Not Weird\"\n"
    },
    {
        "number": 4666,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2 == 1:\n        return \"Weird\"\n    elif n % 2 == 0 and n in range(2,6):\n        return \"Not Weird\"\n    elif n % 2 == 0 and n in range(6,21):\n        return \"Weird\"\n    else:\n        return \"Not Weird\""
    },
    {
        "number": 4666,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n%2 == 1:\n        return \"Weird\"\n    elif n%2 == 0:\n        if n in range(2,6):\n            return \"Not Weird\"\n        elif n in range(6,21):\n            return \"Weird\"\n        elif n > 20:\n            return \"Not Weird\"\n        \n    return \"Wrong Answer\"\n"
    },
    {
        "number": 4666,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2!= 0:\n        return \"Weird\"\n    if n % 2 == 0 and n in range(2,6):\n        return \"Not Weird\"\n    if n % 2 == 0 and n in range(6,21):\n        return \"Weird\"\n    if n % 2 == 0 and n > 20:\n        return \"Not Weird\"\n    return \"Weird\"\n"
    },
    {
        "number": 4666,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    if n % 2 == 1:\n        return 'Weird'\n    if n >= 2 and n <= 5:\n        return 'Not Weird'\n    if n >= 6 and n <= 20:\n        return 'Weird'\n    if n > 20:\n        return 'Not Weird'\n"
    },
    {
        "number": 4666,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2 == 1:\n        print(\"Weird\")\n    elif n % 2 == 0 and n in range(2, 6):\n        print(\"Not Weird\")\n    elif n % 2 == 0 and n in range(6, 21):\n        print(\"Weird\")\n    elif n % 2 == 0 and n > 20:\n        print(\"Not Weird\")\n"
    },
    {
        "number": 4666,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2!= 0:\n        return \"Weird\"\n    elif n >= 2 and n <= 5:\n        return \"Not Weird\"\n    elif n >= 6 and n <= 20:\n        return \"Weird\"\n    else:\n        return \"Not Weird\"\n"
    },
    {
        "number": 4667,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    from xml.etree import ElementTree\n    tree = ElementTree.parse(stdin)\n    root = tree.getroot()\n    score = 0\n    for child in root:\n        score += len(child.attrib)\n    print(score)"
    },
    {
        "number": 4667,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    root = ET.fromstring(stdin)\n    ans = 0\n    for child in root:\n        ans += len(child.attrib)\n    return str(ans)"
    },
    {
        "number": 4667,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    xml_doc = stdin.splitlines()\n    root = dict()\n    def add_node(root,node):\n        if node not in root.keys():\n            root[node] = dict()\n    for line in xml_doc:\n        if '<' in line:\n            line = line.split()\n            key = line[1]\n            add_node(root,key)\n        else:\n            line = line.split()\n            key = line[0]\n            add_node(root,key)\n            for n in range(1,len(line),2):\n                if line[n] not in root[key].keys():\n                    root[key][line[n]] = dict()\n                add_node(root[key][line[n]],line[n+1])\n    ans = 0\n    for key in root.keys():\n        ans += len(root[key].keys())\n    return ans\n\ndef"
    },
    {
        "number": 4667,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    import re\n    import sys\n    lines = stdin.split('\\n')\n    score = 0\n    for line in lines:\n        score += len(re.findall('\\s+<([a-zA-Z0-9]+)', line))\n    return score"
    },
    {
        "number": 4667,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    root_tree = ET.fromstring(stdin)\n    root_tree_score = 0\n    for child in root_tree:\n        root_tree_score += len(child.attrib)\n    return str(root_tree_score)\n"
    },
    {
        "number": 4667,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    :type stdin: str\n    :rtype: str\n    \"\"\"\n    import sys\n\n    # read in from stdin\n    lines = sys.stdin.readlines()\n\n    # get length of first line\n    n = int(lines[0])\n\n    # initialize score\n    score = 0\n\n    # initialize variables\n    depth = 0\n    width = 0\n    table = []\n    table_width = []\n    table_depth = []\n    table_empty = []\n\n    # loop through each line\n    for i in range(1, n + 1):\n        # get line\n        line = lines[i]\n\n        # add the width to the width counter\n        width += len(line)\n\n        # check if the line has any tabs\n        tabs = 0\n        for j in range(len(line)):\n            if line[j] == '\\t':\n                tabs += 1\n\n        # if the depth is not 0, check if the tabs match up\n        if depth!= 0:\n            if tabs!= depth:\n                return \"INVALID\"\n\n        # check if line is empty\n        if line.strip() == \"\":\n            table_empty.append(True)\n        else:\n            table_empty.append(False)\n\n        # if line is not empty, check if there are any non-whitespace characters\n        if line.strip()!= \"\":\n            non_whitespace = False\n            for j in range(len(line)):\n                if line[j]!='' and line[j]!= '\\t':\n                    non_whitespace = True\n            if not non_whitespace:\n                return \"INVALID\"\n\n        # if line does not contain a tag, add to the depth counter\n        if line.strip()!= \"\":\n            if \">\" in line:\n                depth += line.count(\">\")\n\n        # if the line has no tabs, add to the table\n        if tabs == 0:\n            table.append(line)\n        # if the line has tabs, add to the table\n        else:\n            tline = \"\"\n            # for j in range(len(line)):\n            #     if line[j] == '\\t':\n            #         tline += \" \"\n            #     else:\n            #         tline += line[j]\n            tline = line.replace('\\t','')\n            table.append(tline)\n        table_width.append(len(line))\n        table_depth.append(depth)\n\n    # build the final string\n    final_str = \"\"\n    for i in range(len(table)):\n        final_str += table[i]\n        if i!= len(table) - 1:\n            final_str += \"\\n\"\n\n    # check if any of the tables are empty\n    for i in range(len(table)):\n        if table_empty[i]:\n            return \"INVALID\"\n\n    # score the table\n    for i in range(len(table)):\n        score += len(table[i].strip())\n\n    # check if the width matches\n    if width!= len(final_str):\n        return \"INVALID\"\n\n    return str(score)\n"
    },
    {
        "number": 4667,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    pass"
    },
    {
        "number": 4667,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    total = 0\n    xml_doc = stdin.split(\"\\n\")\n    for line in xml_doc:\n        if line == \"\":\n            continue\n        open_tags = []\n        attr_count = 0\n        line = line.strip()\n        for c in line:\n            if c == \"<\":\n                if open_tags == []:\n                    open_tags.append(c)\n                else:\n                    open_tags.append(c)\n                    while open_tags!= [] and open_tags[-1]!= \"/\":\n                        open_tags.pop()\n                    if open_tags == []:\n                        attr_count += 1\n                    else:\n                        if open_tags[-1] == \"/\":\n                            attr_count += 1\n                        open_tags.pop()\n            elif c == \">\":\n                if open_tags == []:\n                    break\n                elif open_tags[-1] == \"/\":\n                    open_tags.pop()\n                    break\n                else:\n                    open_tags.pop()\n        total += attr_count\n    print(total)\n    return total\n"
    },
    {
        "number": 4667,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4667,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    xml_list = [line.strip() for line in stdin.split('\\n')]\n    print(sum([len(elem.split()) for elem in xml_list]))\n"
    },
    {
        "number": 4668,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A = list(map(int, stdin.split()))\n    x1, y1, z1 = A[0], A[1], A[2]\n    B = list(map(int, stdin.split()))\n    x2, y2, z2 = B[0], B[1], B[2]\n    C = list(map(int, stdin.split()))\n    x3, y3, z3 = C[0], C[1], C[2]\n\n    AB = [x2-x1, y2-y1, z2-z1]\n    BC = [x3-x2, y3-y2, z3-z2]\n    BC = [y3*z2 - y2*z3, z3*x2 - z2*x3, x3*y2 - x2*y3]\n\n    AB_mag = math.sqrt(AB[0]**2 + AB[1]**2 + AB[2]**2)\n    BC_mag = math.sqrt(BC[0]**2 + BC[1]**2 + BC[2]**2)\n    BC_mag_sqr = BC_mag**2\n\n    angle = math.acos(BC[0]/BC_mag)*(180/math.pi)\n    return str(round(angle,2))\n=====solution=====\ndef"
    },
    {
        "number": 4668,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code goes here\n    n = list(map(float,stdin.split()))\n    c = pow(n[0],2)+pow(n[1],2)+pow(n[2],2)\n    d = pow(n[1],2)+pow(n[2],2)+pow(n[3],2)\n    e = pow(n[0],2)+pow(n[2],2)+pow(n[3],2)\n    f = pow(n[0],2)+pow(n[1],2)+pow(n[3],2)\n    x = (n[0]*n[1])*(n[2]*n[3])\n    y = (n[0]*n[2])*(n[1]*n[3])\n    a = (n[0]*n[1])+(n[0]*n[2])+(n[0]*n[3])\n    b = (n[1]*n[2])+(n[2]*n[3])+(n[3]*n[1])\n    c = (n[0]*n[1])*(n[1]*n[2])+(n[0]*n[2])*(n[2]*n[3])+(n[0]*n[3])*(n[3]*n[1])\n    if c == 0:\n        c = pow(n[1],2)+pow(n[2],2)+pow(n[3],2)\n        d = pow(n[0],2)+pow(n[2],2)+pow(n[3],2)\n        e = pow(n[0],2)+pow(n[1],2)+pow(n[3],2)\n        f = pow(n[0],2)+pow(n[1],2)+pow(n[2],2)\n        x = (n[0]*n[1])*(n[2]*n[3])\n        y = (n[0]*n[2])*(n[1]*n[3])\n        a = (n[0]*n[1])+(n[0]*n[2])+(n[0]*n[3])\n        b = (n[1]*n[2])+(n[2]*n[3])+(n[3]*n[1])\n        c = (n[0]*n[1])*(n[1]*n[2])+(n[0]*n[2])*(n[2]*n[3])+(n[0]*n[3])*(n[3]*n[1])\n        if b == 0:\n            b = pow(n[1],2)+pow(n[2],2)+pow(n[3],2)\n            d = pow(n[0],2)+pow(n[2],2)+pow(n[3],2)\n            e = pow(n[0],2)+pow(n[1],2)+pow(n[3],2)\n            f = pow(n[0],2)+pow(n[1],2)+pow(n[2],2)\n            x = (n[0]*n[1])*(n[2]*n[3])\n            y = (n[0]*n[2])*(n[1]*n[3])\n            a = (n[0]*n[1])+(n[0]*n[2])+(n[0]*n[3])\n            b = (n[1]*n[2])+(n[2]*n[3])+(n[3]*n[1])\n            c = (n[0]*n[1])*(n[1]*n[2])+(n[0]*n[2])*(n[2]*n[3])+(n[0]*n[3])*(n[3]*n[1])\n            if d == 0:\n                d = pow(n[0],2)+pow(n[1],2)+pow(n[3],2)\n                e = pow(n[0],2)+pow(n[1],2)+pow(n[2],2)\n                f = pow(n[0],2)+pow(n[1],2)+pow(n[3],2)\n                x = (n[0]*n[1])*(n[2]*n[3])\n                y = (n[0]*n[2])*(n[1]*n[3])\n                a = (n[0]*n[1])+(n[0]*n[2])+(n[0]*n[3])\n                b = (n[1]*n[2])+(n[2]*n[3])+(n[3]*n[1])\n                c = (n[0]*n[1])*(n[1]*n[2])+(n[0]*n[2])*(n[2]*n[3])+(n[0]*n[3])*(n[3]*n[1])\n                if e == 0:\n                    e = pow(n[0],2)+pow(n[1],2)+pow(n[2],2)\n                    f = pow(n[0],2)+pow(n[1],2)+pow(n[2],2)\n                    x = (n[0]*n[1])*(n[2]*n[3])\n                    y = (n[0]*n[2])*(n[1]*n[3])\n                    a = (n[0]*n[1])+(n[0]*n[2])+(n[0]*n[3])\n                    b = (n[1]*n[2])+(n[2]*n[3])+(n[3]*n[1])\n                    c = (n[0]*n[1])*(n[1]*n[2])+(n[0]*n[2])*(n[2]*n[3])+(n[0]*n[3])*(n[3]*n[1])\n                    if f == 0:\n                        return 0\n            c = -1*c/b\n            d = -1*d/b\n            e = -1*e/b\n            f = -1*f/b\n            if c == 0:\n                c = pow(n[1],2)+pow(n[2],2)+pow(n[3],2)\n                d = pow(n[0],2)+pow(n[2],2)+pow(n[3],2)\n                e = pow(n[0],2)+pow(n[1],2)+pow(n[3],2)\n                f = pow(n[0],2)+pow(n[1],2)+pow(n[2],2)\n                x = (n[0]*n[1])*(n[2]*n[3])\n                y = (n[0]*n[2])*(n[1]*n[3])\n                a = (n[0]*n[1])+(n[0]*n[2])+(n[0]*n[3])\n                b = (n[1]*n[2])+(n[2]*n[3])+(n[3]*n[1])\n                c = (n[0]*n[1])*(n[1]*n[2])+(n[0]*n[2])*(n[2]*n[3])+(n[0]*n[3])*(n[3]*n[1])\n                if d == 0"
    },
    {
        "number": 4668,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return str(round(math.degrees(math.atan2(float(stdin.split()[0])*float(stdin.split()[1]) - float(stdin.split()[1])*float(stdin.split()[2]), float(stdin.split()[2])*float(stdin.split()[3]) - float(stdin.split()[0])*float(stdin.split()[3]))), 2))\n"
    },
    {
        "number": 4668,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A = list(map(float, stdin.strip().split()))\n    a = A[:3]\n    b = A[3:]\n    print((a[0]*b[0]+a[1]*b[1]+a[2]*b[2])/(math.sqrt(a[0]**2+a[1]**2+a[2]**2)*math.sqrt(b[0]**2+b[1]**2+b[2]**2)))\n    return"
    },
    {
        "number": 4668,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''2 1 2 4 3''')\n    '30.00'\n    >>> solution('''4 5 6 7 10 11''')\n    '43.21'\n    >>> solution('''-3 1 4 5 6 7 9 10''')\n    '45.00'\n    \"\"\"\n    a, b, c, d = map(int, stdin.split())\n    ab = np.array([a, b])\n    bc = np.array([c, d])\n    cd = np.array([c, d])\n    ac = np.array([a, c])\n    return str(round(math.degrees(math.acos(np.dot(ab, bc) /\n                                            (np.linalg.norm(ab) * np.linalg.norm(bc))))) + 360\n               if np.dot(ab, ac) < 0 else round(math.degrees(math.acos(np.dot(ab, bc) /\n                                                                      (np.linalg.norm(ab) * np.linalg.norm(bc))))))\n"
    },
    {
        "number": 4668,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = [tuple(map(int, stdin.split())) for _ in range(4)]\n    ab = b[0] - a[0], b[1] - a[1], b[2] - a[2]\n    ac = c[0] - a[0], c[1] - a[1], c[2] - a[2]\n    bc = c[0] - b[0], c[1] - b[1], c[2] - b[2]\n    cd = d[0] - c[0], d[1] - c[1], d[2] - c[2]\n    ab_ac = ab[0] * ac[0] + ab[1] * ac[1] + ab[2] * ac[2]\n    bc_cd = bc[0] * cd[0] + bc[1] * cd[1] + bc[2] * cd[2]\n    cos = ab_ac / (abs(ab[0]) * abs(ac[0]) + abs(ab[1]) * abs(ac[1]) + abs(ab[2]) * abs(ac[2])) * bc_cd\n    print(round(math.degrees(math.acos(cos)), 2))\n    return None\n\nsolution('2 -5 4 -3')\nsolution('1 1 1 1')\nsolution('-1 1 1 -1')\nsolution('-1 -1 1 1')\nsolution('2 -1 -1 1')\n"
    },
    {
        "number": 4668,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \n    A = list(map(float,stdin.split()))\n    x1,y1,z1 = A[0],A[1],A[2]\n    x2,y2,z2 = B[0],B[1],B[2]\n    x3,y3,z3 = C[0],C[1],C[2]\n    x4,y4,z4 = D[0],D[1],D[2]\n    a = np.array([x1-x2,y1-y2,z1-z2])\n    b = np.array([x3-x2,y3-y2,z3-z2])\n    c = np.array([x4-x2,y4-y2,z4-z2])\n    dot_product = np.dot(a,b)\n    cross_product = np.cross(a,b)\n    length_a = np.linalg.norm(a)\n    length_b = np.linalg.norm(b)\n    length_c = np.linalg.norm(c)\n    cos_theta = np.dot(cross_product,c)/(length_a*length_b*length_c)\n    angle = np.arccos(cos_theta)\n    angle = np.degrees(angle)\n    return angle"
    },
    {
        "number": 4668,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def cross_product(x: int, y: int) -> int:\n        return x[0] * y[1] - x[1] * y[0]\n\n    A = [int(x) for x in stdin.split()]\n    B = [int(x) for x in stdin.split()]\n    C = [int(x) for x in stdin.split()]\n    D = [int(x) for x in stdin.split()]\n    x = cross_product([B[0] - A[0], B[1] - A[1]], [C[0] - B[0], C[1] - B[1]])\n    y = cross_product([C[0] - B[0], C[1] - B[1]], [D[0] - C[0], D[1] - C[1]])\n    angle = abs(math.degrees(math.atan2(x, y)))\n    return f'{angle:.2f}'\n"
    },
    {
        "number": 4668,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    points = list(map(float, stdin.split(' ')))\n    AB = points[2] - points[0]\n    BC = points[3] - points[1]\n    x_vec = AB[0] * BC[0] + AB[1] * BC[1] + AB[2] * BC[2]\n    y_vec = AB[0] * BC[0] + AB[1] * BC[1] + AB[2] * BC[2]\n    return round((x_vec / (math.sqrt(AB[0] ** 2 + AB[1] ** 2 + AB[2] ** 2) * math.sqrt(BC[0] ** 2 + BC[1] ** 2 + BC[2] ** 2)) * 180 / math.pi), 2)\n"
    },
    {
        "number": 4668,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return float.\"\"\"\n    values = stdin.split()\n    a, x, y, z = (float(v) for v in values)\n    # print(a, x, y, z)\n    return \"%.2f\" % (acos(x * y / (a * a)) * 180 / pi)\n"
    },
    {
        "number": 4669,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    # return ''.join(map(lambda x: '2' if sum([1 for i in x if i in ['a', 'e', 'i', 'o', 'u', 'y']]) % 2 else '1', stdin.split()))\n    return ''.join(map(lambda x: '2' if sum([1 for i in x if i in ['a', 'e', 'i', 'o', 'u', 'y']]) % 2 else '1', stdin.split()))"
    },
    {
        "number": 4669,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\nThe locked code template will print the returned score to the output.\nIf your solution is correct, the output will be a number between 0 and 4.\nOtherwise, the output will be some colour that you can see on your terminal.\n\n=====Test Cases=====\nYour score will be accepted if you return a non-negative number up to 4.\nTest Case 0\n\nInput:\n4\nCodility WeTestCoders\nCodility WeTestCoders\nCodility WeTestCoders\nCodility WeTestCoders\n\nOutput:\n0\nExplanation:\nCodility WeTestCoders has 0 vowels.\nCodility WeTestCoders has 0 vowels.\nCodility WeTestCoders has 0 vowels.\nCodility WeTestCoders has 0 vowels.\n\nTest Case 1\n\nInput:\n5\nCodility WeTestCoders\nCodility WeTestCoders\nCodility WeTestCoders\nCodility WeTestCoders\nCodility WeTestCoders\n\nOutput:\n2\nExplanation:\nCodility WeTestCoders has 2 vowels.\nCodility WeTestCoders has 2 vowels.\nCodility WeTestCoders has 2 vowels.\nCodility WeTestCoders has 2 vowels.\nCodility WeTestCoders has 2 vowels.\n\"\"\"\n\ndef"
    },
    {
        "number": 4669,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\n======Test Case======\n>>> #>>> input = '15\\n' +\\\n        'I have been waiting for you for years'\n>>> #>>> solution(input)\n        2\n\"\"\"\n\ndef"
    },
    {
        "number": 4669,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4669,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin.readline())\n    words = stdin.readline().split(\" \")\n    score = 0\n    for word in words:\n        count = 0\n        for i in word:\n            if i in \"aeiouy\":\n                count += 1\n        if count % 2 == 0:\n            score += 2\n        else:\n            score += 1\n    print(score)\n    return solution\nsolution(stdin)\n"
    },
    {
        "number": 4669,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n=====Test Case=====\n1\nhacker book\n3\n>>>\n"
    },
    {
        "number": 4669,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    num_words = int(stdin.readline())\n    num_vowels = 0\n    words = stdin.readline().split()\n    \n    for word in words:\n        num_vowels += len([char for char in word if char in 'aeiou'])\n    \n    return '{} {}'.format(num_vowels, score_words(words))\n    \n"
    },
    {
        "number": 4669,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 4669,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    # Your code goes here.\n    if __name__ == \"__main__\":\n        n = int(input())\n        arr = list(map(str, input().split()))\n        score = score_words(arr)\n        print(score)\n\nsolution(input())\n"
    },
    {
        "number": 4669,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return '\\n'.join(\n        list(map(\n            lambda word: word + \" \" + str(score_words(list(word))),\n            stdin.splitlines()\n        ))\n    )\n    \ndef"
    },
    {
        "number": 4670,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    import re\n    expression = '^[IVXLCDM]{1,3}$'\n    regex = re.compile(expression)\n    print(bool(regex.search(stdin)))\n    return bool(regex.search(stdin))\nprint(solution(input()))"
    },
    {
        "number": 4670,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    import re\n\n    if re.search(r'[IVXLCDM]+', stdin):\n        return True\n    else:\n        return False"
    },
    {
        "number": 4670,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Your code goes here\n    import re\n    r = re.compile('^(?=(M{0,3}(C[MD]|D?C{0,3})(X[CL]|L?X{0,3})(I[XV]|V?I{0,3}))(M{0,3}(C[MD]|D?C{0,3})(X[CL]|L?X{0,3})(I[XV]|V?I{0,3}))?)$')\n    if r.match(stdin):\n        return \"True\"\n    return \"False\"\n"
    },
    {
        "number": 4670,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport re\n\n\ndef"
    },
    {
        "number": 4670,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    roman = {\n        \"M\": 1000,\n        \"D\": 500,\n        \"C\": 100,\n        \"L\": 50,\n        \"X\": 10,\n        \"V\": 5,\n        \"I\": 1\n    }\n\n    for key, val in roman.items():\n        stdin = re.sub(key, str(val), stdin)\n    return stdin == \"I\" or stdin == \"II\" or stdin == \"III\" or stdin == \"IV\" or stdin == \"V\" or stdin == \"IX\" or stdin == \"X\" or stdin == \"XI\" or stdin == \"XII\" or stdin == \"XIII\" or stdin == \"XIV\" or stdin == \"XV\" or stdin == \"XVI\" or stdin == \"XVII\" or stdin == \"XVIII\" or stdin == \"XIX\" or stdin == \"XX\" or stdin == \"XXI\" or stdin == \"XXII\" or stdin == \"XXIII\" or stdin == \"XXIV\" or stdin == \"XXV\" or stdin == \"XXVI\" or stdin == \"XXVII\" or stdin == \"XXVIII\" or stdin == \"XXIX\" or stdin == \"XXX\" or stdin == \"XXXI\" or stdin == \"XXXII\" or stdin == \"XXXIII\" or stdin == \"XXXIV\" or stdin == \"XXXV\" or stdin == \"XXXVI\" or stdin == \"XXXVII\" or stdin == \"XXXVIII\" or stdin == \"XXXIX\" or stdin == \"XL\":\n        return True\n    return False\n"
    },
    {
        "number": 4670,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    import re\n    pattern = r\"^M{0,3}(CM|CD|D?C{0,3})(XC|XL|L?X{0,3})(IX|IV|V?I{0,3})$\"\n    match = re.fullmatch(pattern, stdin)\n    return \"True\\n\" if match else \"False\\n\""
    },
    {
        "number": 4670,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.isdigit() and 1 <= int(stdin) <= 3999 and eval(stdin) in [i for i in range(1, 4000)]"
    },
    {
        "number": 4670,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    import re\n    result = re.findall(r'M{0,3}(CM|CD|D?C{0,3})(XC|XL|L?X{0,3})(IX|IV|V?I{0,3})', stdin)\n    if result:\n        return \"True\"\n    return \"False\"\n"
    },
    {
        "number": 4670,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    numeral = {1: 'I', 5: 'V', 10: 'X', 50: 'L', 100: 'C', 500: 'D', 1000: 'M'}\n    numerals = [1, 5, 10, 50, 100, 500, 1000]\n    result = []\n    for num in numerals:\n        while stdin.__len__() >= num:\n            for i in range(0, num):\n                if stdin[i] == stdin[i+num]:\n                    if stdin[i] == 'I' and i + num > stdin.__len__():\n                        stdin = stdin[:stdin.__len__()-1]\n                    else:\n                        stdin = stdin[:i] + numeral[num] + stdin[i+num:]\n            if stdin.__len__() == 0:\n                break\n        result.append(stdin)\n        stdin = ''\n    for i in result:\n        if i.__len__() == 0:\n            continue\n        if i == 'IV' or i == 'IX' or i == 'XL' or i == 'XC' or i == 'CD' or i == 'CM':\n            return False\n        if i == 'MMMMM':\n            return True\n    return False"
    },
    {
        "number": 4670,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\n=====Test Case=====\n>>> solution(\"III\")\nTrue\n>>> solution(\"IV\")\nTrue\n>>> solution(\"IX\")\nTrue\n>>> solution(\"LVIII\")\nTrue\n>>> solution(\"MCMXCIV\")\nTrue\n>>> solution(\"IVX\")\nFalse\n>>> solution(\"XIX\")\nFalse\n>>> solution(\"MMXIX\")\nFalse\n>>> solution(\"I\")\nTrue\n>>> solution(\"XXX\")\nFalse\n\n======Solution========\nregex_pattern = r\"^M{0,3}(CM|CD|D?C{0,3})(XC|XL|L?X{0,3})(IX|IV|V?I{0,3})$\"\nprint(str(bool(re.match(regex_pattern, stdin))))\n\n\"\"\"\nimport re\n\nregex_pattern = r\"^M{0,3}(CM|CD|D?C{0,3})(XC|XL|L?X{0,3})(IX|IV|V?I{0,3})$\"\nprint(str(bool(re.match(regex_pattern, stdin))))\n"
    },
    {
        "number": 4671,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4671,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return '\\n'.join(sorted(map(lambda x: '+91'+ x[-10:-5] +'' + x[-5:], stdin.split())))\n\"\"\"\n\ndef"
    },
    {
        "number": 4671,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n'''\n\ndef"
    },
    {
        "number": 4671,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    phone_numbers = stdin.splitlines()\n    for phone_number in phone_numbers:\n        if phone_number.startswith('+91') or phone_number.startswith('0') or phone_number.startswith('91'):\n            if len(phone_number) == 10:\n                phone_number = '+91'+ phone_number[:5] +'' + phone_number[5:]\n            elif len(phone_number) == 11:\n                phone_number = '+91'+ phone_number[1:6] +'' + phone_number[6:]\n        print(phone_number)\n    return stdin\n\n========================================================\n\nWrite a Python program to find the first appearance of the substring 'not' and 'poor' from a given string, if 'not' follows the 'poor', replace the whole 'not'...'poor' substring with 'good'. Return the resulting string.\nSample String : 'The lyrics is not that poor!'\n'The lyrics is poor!'\nExpected Result : 'The lyrics is good!'\n'The lyrics is poor!'\n\ndef"
    },
    {
        "number": 4671,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def decorator(func):\n        def wrapper(self):\n            res = func(self)\n            return res\n        return wrapper\n    return decorator"
    },
    {
        "number": 4671,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return '\\n'.join(\n        '+91 {} {}'.format(x[-10:-5], x[-5:])\n        for x in sorted(stdin.split(), key=lambda x: x[-10:-5]))\n"
    },
    {
        "number": 4671,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\n=====Test Case======\nInput:\n4\n+91 1234 5678\n+91 9123 4567\n+91 8765 4567\n+91 1234 5678\n\nOutput:\n+91 1234 5678\n+91 8765 4567\n+91 9123 4567\n+91 1234 5678\n\nTime Taken: 5 minutes\n\nSample Output:\n+91 1234 5678\n+91 8765 4567\n+91 9123 4567\n+91 1234 5678\n\n\n=====Solution=====\ndef"
    },
    {
        "number": 4671,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return [\n        '+91 {} {}'.format(number[-10:-5], number[-5:]) if number[0] == \"0\" else \n        '+91 {} {}'.format(number[-10:-5], number[-5:]) if number[0] == \"1\" else \n        '+91 {} {}'.format(number[-10:-5], number[-5:]) if number[0] == \"9\" else \n        '+91 {} {}'.format(number[-10:-5], number[-5:])\n        for number in sorted(stdin.split('\\n'))\n    ]"
    },
    {
        "number": 4671,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def wrapper(func):\n        def inner_wrapper(*args):\n            pass\n        return inner_wrapper\n\n    return wrapper"
    },
    {
        "number": 4671,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4672,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\"\"\"\n\nn = int(input())\nstudent_marks = {}\nfor i in range(n):\n    name, *marks = input().split()\n    scores = list(map(float, marks))\n    student_marks[name] = scores\nquery_name = input()\n\nprint(student_marks[query_name])\nprint(format(sum(student_marks[query_name])/len(student_marks[query_name]), \".2f\"))\n"
    },
    {
        "number": 4672,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    # print(stdin)\n    n = int(stdin[0])\n    stdin = stdin[1:]\n    students = []\n    for i in range(n):\n        student = stdin[i].split()\n        students.append({student[0]: float(student[1])})\n\n    query_name = stdin[n].split()\n    query_name = query_name[0]\n\n    for student in students:\n        if query_name in student:\n            marks = student[query_name]\n            for mark in marks:\n                marks.remove(mark)\n            print(f'{query_name} {sum(marks)/len(marks):.2f}')"
    },
    {
        "number": 4672,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    "
    },
    {
        "number": 4672,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    scores = dict(map(lambda line: line.strip().split(), stdin.strip().split('\\n')))\n    query_name = scores.get(scores.get(input()), \"Not Found\")\n    return (f'{sum(map(float, list(filter(lambda x: x!= \"Not Found\", scores.values()))))/3:.2f}')"
    },
    {
        "number": 4672,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \n=====Return Format=====\nThe return value must be in the specified format, as specified in the formats.\n==================\"\"\"\n"
    },
    {
        "number": 4672,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    pass\n"
    },
    {
        "number": 4672,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\nprint(solution())"
    },
    {
        "number": 4672,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return 0\n\n=====Test Case=====\nTest Case 1\nInput\n3\nKrishna 67 68 69\nArjun 70 98 63\nMalika 52 56 60\nMalika\nOutput\n56.00\n\nTest Case 2\nInput\n2\nHarsh 25 26.5 28\nAnurag 26 28 30\nHarsh\nOutput\n26.50\n\nTest Case 3\nInput\n2\nKrishna 67 68 69\nArjun 70 98 63\nMalika\nOutput\n\nTest Case 4\nInput\n2\nHarsh 25 26.5 28\nAnurag 26 28 30\nHarsh\nOutput\n\nTest Case 5\nInput\n2\nHarsh 25 26.5 28\nAnurag 26 28 30\nKrishna\nOutput\n\nTest Case 6\nInput\n2\nHarsh 25 26.5 28\nAnurag 26 28 30\n\nTest Case 7\nInput\n2\nHarsh 25 26.5 28\nAnurag 26 28 30\n\nTest Case 8\nInput\n2\nHarsh 25 26.5 28\nAnurag 26 28 30\n\nTest Case 9\nInput\n2\nHarsh 25 26.5 28\nAnurag 26 28 30\n\nTest Case 10\nInput\n2\nHarsh 25 26.5 28\nAnurag 26 28 30\n\nTest Case 11\nInput\n2\nHarsh 25 26.5 28\nAnurag 26 28 30\n\nTest Case 12\nInput\n2\nHarsh 25 26.5 28\nAnurag 26 28 30\n\nTest Case 13\nInput\n2\nHarsh 25 26.5 28\nAnurag 26 28 30\n\nTest Case 14\nInput\n2\nHarsh 25 26.5 28\nAnurag 26 28 30\n\nTest Case 15\nInput\n2\nHarsh 25 26.5 28\nAnurag 26 28 30\n\nTest Case 16\nInput\n2\nHarsh 25 26.5 28\nAnurag 26 28 30\n\nTest Case 17\nInput\n2\nHarsh 25 26.5 28\nAnurag 26 28 30\n\nTest Case 18\nInput\n2\nHarsh 25 26.5 28\nAnurag 26 28 30\n\nTest Case 19\nInput\n2\nHarsh 25 26.5 28\nAnurag 26 28 30\n\nTest Case 20\nInput\n2\nHarsh 25 26.5 28\nAnurag 26 28 30\n\nTest Case 21\nInput\n2\nHarsh 25 26.5 28\nAnurag 26 28 30\n\nTest Case 22\nInput\n2\nHarsh 25 26.5 28\nAnurag 26 28 30\n\nTest Case 23\nInput\n2\nHarsh 25 26.5 28\nAnurag 26 28 30\n\nTest Case 24\nInput\n2\nHarsh 25 26.5 28\nAnurag 26 28 30\n\nTest Case 25\nInput\n2\nHarsh 25 26.5 28\nAnurag 26 28 30\n\nTest Case 26\nInput\n2\nHarsh 25 26.5 28\nAnurag 26 28 30\n\nTest Case 27\nInput\n2\nHarsh 25 26.5 28\nAnurag 26 28 30\n\nTest Case 28\nInput\n2\nHarsh 25 26.5 28\nAnurag 26 28 30\n\nTest Case 29\nInput\n2\nHarsh 25 26.5 28\nAnurag 26 28 30\n\nTest Case 30\nInput\n2\nHarsh 25 26.5 28\nAnurag 26 28 30\n\nTest Case 31\nInput\n2\nHarsh 25 26.5 28\nAnurag 26 28 30\n\nTest Case 32\nInput\n2\nHarsh 25 26.5 28\nAnurag 26 28 30\n\nTest Case 33\nInput\n2\nHarsh 25 26.5 28\nAnurag 26 28 30\n\nTest Case 34\nInput\n2\nHarsh 25 26.5 28\nAnurag 26 28 30\n\nTest Case 35\nInput\n2\nHarsh 25 26.5 28\nAnurag 26 28 30\n\nTest Case 36\nInput\n2\nHarsh 25 26.5 28\nAnurag 26 28 30\n\nTest Case 37\nInput\n2\nHarsh 25 26.5 28\nAnurag 26 28 30\n\nTest Case 38\nInput\n2\nHarsh 25 26.5 28\nAnurag 26 28 30\n\nTest Case 39\nInput\n2\nHarsh 25 26.5 28\nAnurag 26 28 30\n\nTest Case 40\nInput\n2\nHarsh 25 26.5 28\nAnurag 26 28 30\n\nTest Case 41\nInput\n2\nHarsh 25 26.5 28\nAnurag 26 28 30\n\nTest Case 42\nInput\n2\nHarsh 25 26.5 28\nAnurag 26 28 30\n\nTest Case 43\nInput\n2\nHarsh 25 26.5 28\nAnurag 26 28 30\n\nTest Case 44\nInput\n2\nHarsh 25 26.5 28\nAnurag 26 28 30\n\nTest Case 45\nInput\n2\nHarsh 25 26.5 28\nAnurag 26 28 30\n\nTest Case 46\nInput\n2\nHarsh 25 26.5 28\nAnurag 26 28 30\n\nTest Case 47\nInput\n2\nHarsh 25 26.5 28\nAnurag 26 28 30\n\nTest Case 48\nInput\n2\nHarsh 25 26.5 28\nAnurag 26 28 30\n\nTest Case 49\nInput\n2\nHarsh 25 26.5 28\nAnurag 26 28 30\n\nTest Case 50\nInput\n2\nHarsh 25 26.5 28\nAnurag 26 28 30\n\nTest Case 51\nInput\n2\nHarsh 25 26.5 28\nAnurag 26 28 30\n\nTest Case 52\nInput\n2\nHarsh 25 26.5 28\nAnurag 26 28 30\n\nTest Case 53\nInput\n2\nHarsh 25 26.5 28\nAnurag 26 28 30\n\nTest Case 54\nInput\n2\nHarsh 25 26.5 28\nAnurag 26 28 30\n\nTest Case 55\nInput\n2\nHarsh 25 26.5 28\nAnurag 26 28 30\n\nTest Case 56\nInput\n2\nHarsh 25 26.5 28\nAnurag 26 28 30\n\nTest Case 57\nInput\n2\nHarsh 25 26.5 28\nAnurag 26 28 30\n\nTest Case 58\nInput\n2\nHarsh 25 26.5 28\nAnurag 26 28 30\n\nTest Case 59\nInput\n2\nHarsh 25 26.5 28\nAnurag 26 28 30\n\nTest Case 60\nInput\n2\nHarsh 25 26.5 28\nAnurag 26 28 30\n\nTest Case 61\nInput\n2\nHarsh 25 26.5 28\nAnurag 26 28 30\n\nTest Case 62\nInput\n2\nHarsh 25 26.5 28\nAnurag 26 28 30\n\nTest Case 63\nInput\n2\nHarsh 25 26.5 28\nAnurag 26 28 30\n\nTest Case 64\nInput\n2\nHarsh 25 26.5 28\nAnurag 26 28 30\n\nTest Case 65\nInput\n2\nHarsh 25 26.5 28\nAnurag 26 28 30\n\nTest Case 66\nInput\n2\nHarsh 25 26.5 28\nAnurag 26 28 30\n\nTest Case 67\nInput\n2\nHarsh 25 26.5 28\nAnurag 26 28 30\n\nTest Case 68\nInput\n2\nHarsh 25 26.5 28\nAnurag 26 28 30\n\nTest Case 69\nInput\n2\nHarsh 25 26.5 28\nAnurag 26 28 30\n\nTest Case 70\nInput\n2\nHarsh 25 26.5 28\nAnurag 26 28 30\n\nTest Case 71\nInput\n2\nHarsh 25 26.5 28\nAnurag 26 28 30\n\nTest Case 72\nInput\n2\nHarsh 25 26.5 28\nAnurag 26 28 30\n\nTest Case 73\nInput\n2\nHarsh 25 26.5"
    },
    {
        "number": 4672,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nn = int(input())\ndict_std = {}\n\nfor i in range(n):\n    name, *marks = input().split()\n    marks = list(map(float, marks))\n    dict_std[name] = marks\nquery_name = input()\nprint(dict_std)\nprint(query_name)\nprint(sum(dict_std[query_name])/len(dict_std[query_name]))\n"
    },
    {
        "number": 4672,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    student_marks = {}\n    for _ in range(n):\n        name, *line = input().split()\n        scores = list(map(float, line))\n        student_marks[name] = scores\n    query_name = input()\n"
    },
    {
        "number": 4673,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return a list of people's names, sorted by age.\n\n    >>> solution('Mike Thomson 20 M\\nRobert Bustle 32 M\\nAndria Bustle 30 F\\nBarry Gordon 28 M\\nPeter Parker 20 M\\nBruce Wayne 30 M\\n')\n    'Mr. Mike Thomson\\nMs. Andria Bustle\\nMr. Barry Gordon\\nMr. Peter Parker\\nMs. Bruce Wayne'\n    \"\"\"\n    # +++your code here+++\n    return\n"
    },
    {
        "number": 4673,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    d = {}\n    for line in stdin:\n        age, first_name, last_name, sex = line.split()\n        d[first_name +'' + last_name] = int(age)\n\n    d = {k: v for k, v in sorted(d.items(), key=lambda item: item[1])}\n    d = dict(itertools.islice(d.items(), 0, len(d)))\n    for x in d:\n        print(x)"
    },
    {
        "number": 4673,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def person_info(name: str, age: int, gender: str) -> str:\n        return f\"{gender} {name}, {age}\"\n    people = [input().split() for _ in range(int(stdin))]\n    people = sorted(people, key=lambda person: int(person[2]))\n    people = [person_info(name=name, age=age, gender=gender) for name, age, gender in people]\n    return '\\n'.join(people)"
    },
    {
        "number": 4673,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4673,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    from operator import itemgetter\n    \n    people = []\n    n = int(input())\n    for _ in range(n):\n        data = input().split()\n        people.append(data)\n    \n    people.sort(key=itemgetter(2))\n    \n    for p in people:\n        print(f\"{p[0]} {p[1]}\")\n    \n    return \"\""
    },
    {
        "number": 4673,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    people = [{\n        'firstname': _.split()[0],\n        'lastname': _.split()[1],\n        'age': int(_.split()[2]),\n       'sex': _.split()[3],\n    } for _ in stdin.splitlines()]\n    sorted_people = sorted(people, key=lambda x: (x['age'], x['firstname']))\n    for p in sorted_people:\n        print('{} {}'.format(p['sex'], p['lastname'] +'' + p['firstname']))\n    return ''\n"
    },
    {
        "number": 4673,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code goes here\n    pass\n"
    },
    {
        "number": 4673,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\ndef"
    },
    {
        "number": 4673,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = []\n    for i in range(n):\n        line = stdin.split()\n        arr.append((line[0],line[1],int(line[2]),line[3]))\n    for i in sorted(arr,key=lambda x:x[2]):\n        print(f\"{i[3]} {i[0]} {i[1]}\")\n\nn = int(input())\nfor i in range(n):\n    solution(input())"
    },
    {
        "number": 4673,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4674,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z, n = [int(stdin.readline()) for _ in range(4)]\n    # write your code in Python 3.6\n    x=[]\n    y=[]\n    z=[]\n    for i in range(x+1):\n        for j in range(y+1):\n            for k in range(z+1):\n                if (i+j+k)!=n:\n                    x.append(i)\n                    y.append(j)\n                    z.append(k)\n    print(x)\n    print(y)\n    print(z)\n    print(x+y+z)\n    return x+y+z\n\n=====Output=====\ndef"
    },
    {
        "number": 4674,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x,y,z,n = (int(x) for x in stdin.split())\n    lst = [[i,j,k] for i in range(x+1) for j in range(y+1) for k in range(z+1) if i+j+k!= n]\n    print('\\n'.join(map(str, lst)))\n    return lst\n\"\"\"\n\nx, y, z, n = (int(input()) for _ in range(4))\nlst = [[i, j, k] for i in range(x + 1) for j in range(y + 1) for k in range(z + 1) if i + j + k!= n]\nprint(lst)\n"
    },
    {
        "number": 4674,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    x, y, z, n = [int(c) for c in stdin.split()]\n    all = [[x, y, z] for x in range(x + 1) for y in range(y + 1) for z in range(z + 1) if x + y + z!= n]\n    print(all)\n"
    },
    {
        "number": 4674,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z, n = map(int, stdin.readlines())\n    # your code here\n    # x, y, z, n = 1, 1, 2, 3\n    # final_array = []\n    # for i in range(x + 1):\n    #     for j in range(y + 1):\n    #         for k in range(z + 1):\n    #             if i + j + k!= n:\n    #                 final_array.append([i, j, k])\n    # print(final_array)\n    # print(sorted(final_array))\n\n    # best code ever\n    print(sorted([[i, j, k] for i in range(x + 1) for j in range(y + 1) for k in range(z + 1) if i + j + k!= n]))\n"
    },
    {
        "number": 4674,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z, n = [int(x) for x in stdin.split()]\n    ans = [[i, j, k] for i in range(x + 1) for j in range(y + 1) for k in range(z + 1) if i + j + k!= n]\n    print(ans)\n    return None\n\n=====Output Format=====\nPrint the list of lists in lexicographic increasing order\n\n=====Sample Test Cases=====\nInput 1:\n1\n1\n2\n3\nOutput 1:\n[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [0, 1, 1], [0, 1, 2], [1, 0, 0], [1, 0, 1], [1, 0, 2], [1, 1, 0], [1, 1, 1], [1, 1, 2]]\n\nInput 2:\n1\n1\n1\n2\nOutput 2:\n[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [0, 1, 1], [1, 0, 0], [1, 0, 1], [1, 1, 0], [1, 1, 1]]\n\nInput 3:\n1\n2\n3\n4\nOutput 3:\n[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [0, 1, 1], [0, 1, 2], [0, 2, 0], [0, 2, 1], [0, 2, 2], [1, 0, 0], [1, 0, 1], [1, 0, 2], [1, 1, 0], [1, 1, 1], [1, 1, 2], [1, 2, 0], [1, 2, 1], [1, 2, 2], [2, 0, 0], [2, 0, 1], [2, 0, 2], [2, 1, 0], [2, 1, 1], [2, 1, 2], [2, 2, 0], [2, 2, 1], [2, 2, 2]]\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4674,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin.readline().strip())\n    y = int(stdin.readline().strip())\n    z = int(stdin.readline().strip())\n    n = int(stdin.readline().strip())\n    print(list(map(list, [[i, j, k] for i in range(x + 1) for j in range(y + 1) for k in range(z + 1) if i + j + k!= n])))\n\n>>>>>>> 2fc906c56a2d3d90d08e7d21eafe704c61f3d078\n"
    },
    {
        "number": 4674,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z, n = (int(input()) for _ in range(4))  # read a line with four integers\n    arr = [[i, j, k] for i in range(x + 1) for j in range(y + 1) for k in range(z + 1) if i + j + k!= n]\n    return arr\n    # print(arr)\n    return (arr)\n\n=====Output Format=====\nPrint the list in lexographic increasing order.\n\nSample Test Cases\nTest Case #1\nInput\n1\n1\n1\n1\nOutput\n[]\n\nTest Case #2\nInput\n2\n2\n2\n2\nOutput\n[[0, 0, 0], [0, 0, 1], [0, 1, 0], [0, 1, 2], [0, 2, 1], [0, 2, 2], [1, 0, 0], [1, 0, 2], [1, 1, 1], [1, 1, 2], [1, 2, 0], [1, 2, 1], [1, 2, 2], [2, 0, 1], [2, 0, 2], [2, 1, 0], [2, 1, 1], [2, 1, 2], [2, 2, 0], [2, 2, 1], [2, 2, 2]]\n\nTest Case #3\nInput\n1\n2\n2\n2\nOutput\n[[0, 0, 0], [0, 0, 1], [0, 1, 0], [0, 1, 2], [1, 0, 0], [1, 0, 2], [1, 1, 1], [1, 1, 2], [1, 2, 0], [1, 2, 2]]\n\nTest Case #4\nInput\n2\n2\n2\n2\nOutput\n[[0, 0, 0], [0, 0, 1], [0, 1, 0], [0, 1, 2], [1, 0, 0], [1, 0, 2], [1, 1, 1], [1, 1, 2], [1, 2, 0], [1, 2, 2]]\n\nTest Case #5\nInput\n3\n2\n3\n1\nOutput\n[[0, 0, 0], [0, 1, 0], [0, 1, 1], [0, 1, 2], [1, 0, 0], [1, 1, 0], [1, 1, 1]]\n\"\"\"\n\nx = int(input())\ny = int(input())\nz = int(input())\nn = int(input())\n\nprint([[a, b, c] for a in range(0, x+1) for b in range(0, y+1) for c in range(0, z+1) if a + b + c!= n])\n"
    },
    {
        "number": 4674,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z, n = [int(x) for x in stdin.split('\\n')]\n    return [[i, j, k]\n            for i in range(x + 1)\n            for j in range(y + 1)\n            for k in range(z + 1)\n            if i + j + k!= n]\n        \n=====Output=====\nPrint the list of lists in lexicographic increasing order, where each inner list represents a different element in the grid.\n\n[\n  [0, 0, 0],\n  [0, 0, 1],\n  [0, 0, 2],\n  [0, 1, 0],\n  [0, 1, 1],\n  [0, 1, 2],\n  [1, 0, 0],\n  [1, 0, 1],\n  [1, 0, 2],\n  [1, 1, 0],\n  [1, 1, 1],\n  [1, 1, 2]\n]\n\"\"\"\n\ndef"
    },
    {
        "number": 4674,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin.readline())\n    y = int(stdin.readline())\n    z = int(stdin.readline())\n    n = int(stdin.readline())\n    print([[i,j,k] for i in range(x+1) for j in range(y+1) for k in range(z+1) if ((i + j + k)!= n)])\nSolution\nsolution(x=1, y=1, z=2, n=3)\n\n=====Output=====\n[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [0, 1, 1], [1, 0, 0], [1, 0, 1], [1, 1, 0], [1, 1, 2]]\n"
    },
    {
        "number": 4674,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z, n = [int(x) for x in stdin.strip().split(\" \")]\n    return [[i, j, k] for i in range(x + 1) for j in range(y + 1) for k in range(z + 1) if i + j + k!= n]"
    },
    {
        "number": 4675,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # === Program ===\n    # The first line contains two space-separated integers,\n    # a and b.\n    # The second line contains two space-separated integers,\n    # c and d.\n    # The third line contains two space-separated integers,\n    # e and f.\n    # Output: Print the result of each operation in the format specified in the sample output.\n    # Input: The real part and imaginary part of a number.\n    # Output: The result of each operation\n    # Sample Input:\n    # 5 6\n    # 3 4\n    # 0 -1\n    # Sample Output:\n    # 5+6i\n    # 3-4i\n    # 2+0i\n    # 1+3i\n    # 1.00+1.20i\n\n    import math\n    import os\n    import random\n    import re\n    import sys\n\n    c1 = complex(stdin.split(' ')[0], stdin.split(' ')[1])\n    c2 = complex(stdin.split(' ')[2], stdin.split(' ')[3])\n\n    print(c1+c2)\n    print(c1-c2)\n    print(c1*c2)\n    print(c1/c2)\n    print(abs(c1))\n    print(abs(c2))\n    print(c1.real)\n    print(c1.imag)\n    print(c2.real)\n    print(c2.imag)\n    # === End of Program ===\n    return \"\""
    },
    {
        "number": 4675,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time complexity: O(1)\n    Space complexity: O(1)\n    \"\"\"\n    c1, c2 = stdin.split()\n    c1 = complex(float(c1), float(c2))\n    c2 = complex(float(c1), float(c2))\n    return f\"{c1 + c2}\\n{c1 - c2}\\n{c1 * c2}\\n{c1 / c2}\\n{c1.real}+{c1.imag:.2f}i\\n{c2.real}+{c2.imag:.2f}i\"\n"
    },
    {
        "number": 4675,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4675,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(stdin='1 2')\n    1+2i\n    >>> solution(stdin='3 4')\n    3+4i\n    >>> solution(stdin='0 1')\n    0+1i\n    >>> solution(stdin='1 0')\n    1.00+0.00i\n    >>> solution(stdin='0 0')\n    0.00+0.00i\n    >>> solution(stdin='1 2 3')\n    1+2i\n    >>> solution(stdin='1 2 -3')\n    1+2i\n    >>> solution(stdin='1 -3 -2')\n    1-3i\n    >>> solution(stdin='1 -2 3')\n    -1+5i\n    >>> solution(stdin='1 2 1 1 2 2 2 3 3 4 1 1 2 2 2 3 3')\n    1+2i\n    >>> solution(stdin='1 2 -3')\n    1+2i\n    >>> solution(stdin='1 -3 -2')\n    1+5i\n    >>> solution(stdin='1 -2 3')\n    -1+5i\n    >>> solution(stdin='1 2 1 1 2 2 2 3 3 4 1 1 2 2 2 3 3')\n    1+2i\n    >>> solution(stdin='1 2 -3')\n    1+2i\n    >>> solution(stdin='1 -3 -2')\n    1+5i\n    >>> solution(stdin='1 -2 3')\n    -1+5i\n    >>> solution(stdin='0 1')\n    0.00+1.00i\n    >>> solution(stdin='1 0')\n    0.00+1.00i\n    >>> solution(stdin='0 0')\n    0.00+0.00i\n    >>> solution(stdin='1 2 1 1 2 2 2 3 3 4 1 1 2 2 2 3 3')\n    1+2i\n    >>> solution(stdin='1 2 -3')\n    1+2i\n    >>> solution(stdin='1 -3 -2')\n    1+5i\n    >>> solution(stdin='1 -2 3')\n    -1+5i\n    \"\"\"\n    nums = stdin.split(\" \")\n    first = complex(nums[0], nums[1])\n    second = complex(nums[2], nums[3])\n    ans = first + second\n    ans1 = first - second\n    ans2 = first * second\n    ans3 = first / second\n    ans4 = abs(first)\n    ans5 = abs(second)\n    ans6 = pow(first, second)\n\n    if second == 0:\n        return \"{0:.2f} {1:.2f}i\".format(float(ans.real), float(ans.imag))\n    else:\n        ans7 = \"{0:.2f} {1:.2f}i\".format(float(ans.real), float(ans.imag))\n        ans8 = \"{0:.2f} {1:.2f}i\".format(float(ans1.real), float(ans1.imag))\n        ans9 = \"{0:.2f} {1:.2f}i\".format(float(ans2.real), float(ans2.imag))\n        ans10 = \"{0:.2f} {1:.2f}i\".format(float(ans3.real), float(ans3.imag))\n        ans11 = \"{0:.2f} {1:.2f}i\".format(float(ans4.real), float(ans4.imag))\n        ans12 = \"{0:.2f} {1:.2f}i\".format(float(ans5.real), float(ans5.imag))\n        ans13 = \"{0:.2f} {1:.2f}i\".format(float(ans6.real), float(ans6.imag))\n        return ans7 + \"\\n\" + ans8 + \"\\n\" + ans9 + \"\\n\" + ans10 + \"\\n\" + ans11 + \"\\n\" + ans12 + \"\\n\" + ans13\n"
    },
    {
        "number": 4675,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # get numbers from input\n    numbers = [int(number) for number in stdin.split(' ')]\n    # get first complex number\n    real_part = numbers[0]\n    imaginary_part = numbers[1]\n    # get second complex number\n    real_part_2 = numbers[2]\n    imaginary_part_2 = numbers[3]\n    # if the imaginary part is zero, there is no imaginary part for the result\n    if imaginary_part == 0:\n        return str(real_part) + '+' + str(imaginary_part_2) + 'i'\n    # if the imaginary part is not zero, there is an imaginary part for the result\n    else:\n        # for addition\n        if real_part_2 == real_part and imaginary_part_2 == imaginary_part:\n            # if the imaginary part is negative, the imaginary part is negative\n            if imaginary_part < 0:\n                return str(real_part_2) + '+' + str(imaginary_part_2) + 'i'\n            # if the imaginary part is positive, the imaginary part is positive\n            else:\n                return str(real_part_2) + '-' + str(imaginary_part_2) + 'i'\n        # for subtraction\n        elif real_part_2!= real_part and imaginary_part_2!= imaginary_part:\n            # if the imaginary part is negative, the imaginary part is positive\n            if imaginary_part_2 < 0:\n                return str(real_part_2) + '+' + str(imaginary_part_2) + 'i'\n            # if the imaginary part is positive, the imaginary part is negative\n            else:\n                return str(real_part_2) + '-' + str(imaginary_part_2) + 'i'\n        # for multiplication\n        elif real_part_2 == real_part and imaginary_part_2!= imaginary_part:\n            return str(real_part_2) + '*' + str(imaginary_part_2) + 'i'\n        # for division\n        elif real_part_2!= real_part and imaginary_part_2 == imaginary_part:\n            return str(real_part_2) + '/' + str(imaginary_part_2) + 'i'\n        # for modulus\n        elif real_part_2!= real_part and imaginary_part_2!= imaginary_part:\n            return str(real_part_2) + '%' + str(imaginary_part_2) + 'i'"
    },
    {
        "number": 4675,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    C, D = map(float, stdin.split())\n    print(f\"{C + D:.2f}\\n{C - D:.2f}\\n{C * D:.2f}\\n{C / D:.2f}\\n{abs(C):.2f}\\n{abs(D):.2f}\")"
    },
    {
        "number": 4675,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    re, im = [float(x) for x in stdin.split()]\n    print(\"{:.2f} {:.2f}i\".format(re, im))\n    print(\"{:.2f} {:.2f}i\".format(re + im, im))\n    print(\"{:.2f} {:.2f}i\".format(re - im, im))\n    print(\"{:.2f} {:.2f}i\".format(re * im, im))\n    print(\"{:.2f} {:.2f}i\".format(re / im, im))\n    print(\"{:.2f} {:.2f}i\".format(abs(re), abs(im)))\n    return \"\"\n\nT = int(input())\n\nfor _ in range(T):\n    solution(input())\n"
    },
    {
        "number": 4675,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B = stdin.split(\" \")\n    a = complex(int(A), int(B))\n    print(a.real, a.imag)\n    print(a.real + a.imag)\n    print(a.real - a.imag)\n    print(a.real * a.imag)\n    print(a.real / a.imag)\n    print(a.real % a.imag)\n    print(abs(a))"
    },
    {
        "number": 4675,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"1 2\")\n    '3.00+5.00i'\n    >>> solution(\"0 1\")\n    '1.00+1.00i'\n    >>> solution(\"1 0\")\n    '0.00+1.00i'\n    >>> solution(\"0 0\")\n    '0.00+0.00i'\n    \"\"\"\n    [real, imag] = stdin.split()\n    return (\n        f\"{complex(real, imag)}\"\n       .replace(\"+-\", \"-\")\n       .replace(\"-0.00\", \"+0.00\")\n       .replace(\"0.00\", \"0\")\n    )\n"
    },
    {
        "number": 4675,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.strip()\n    c1, c2 = [complex(i) for i in line.split(\" \")]\n    c1 = complex(round(c1.real, 2), round(c1.imag, 2))\n    c2 = complex(round(c2.real, 2), round(c2.imag, 2))\n    print(f\"{c1+c2}\")\n    print(f\"{c1-c2}\")\n    print(f\"{c1*c2}\")\n    print(f\"{c1/c2}\")\n    print(f\"{c1.real}\")\n    print(f\"{c1.imag}\")\n    print(f\"{abs(c1)}\")\n    return ''\n"
    },
    {
        "number": 4676,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    odd_chars, even_chars = stdin[::2], stdin[1::2]\n    return ''.join(odd_chars + even_chars)\n"
    },
    {
        "number": 4676,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the original password\n    >>> solution('xyz\\nabc')\n    'xaybzc'\n    >>> solution('p\\nq\\nr')\n    'pqr'\n    \"\"\"\n    odd = stdin[0::2]\n    even = stdin[1::2]\n    return odd + even\n"
    },
    {
        "number": 4676,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Return the original password.\n    \"\"\"\n    even_positions = stdin[::2]\n    odd_positions = stdin[1::2]\n    return even_positions + odd_positions"
    },
    {
        "number": 4676,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin[::2]\n    b = stdin[1::2]\n    return ''.join(a + b)\n"
    },
    {
        "number": 4676,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    o, e = stdin[0:len(stdin):2], stdin[1:len(stdin):2]\n    return \"\".join([o[i] if i % 2 else e[i] for i in range(len(o))])\n"
    },
    {
        "number": 4676,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    O, E = stdin.split('\\n')\n    return ''.join(O[i] for i in range(len(O)) if i%2==0)+''.join(E[i] for i in range(len(E)) if i%2==1)\n    pass\n"
    },
    {
        "number": 4676,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    str1 = stdin[0::2]\n    str2 = stdin[1::2]\n    print(str1+str2)\n"
    },
    {
        "number": 4676,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4676,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"xyzabc\")\n    xaybzc\n    \"\"\"\n    odd_pos = stdin[:len(stdin) // 2]\n    even_pos = stdin[len(stdin) // 2:]\n    return \"\".join(odd_pos + even_pos)\n"
    },
    {
        "number": 4676,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    O: str = stdin.split(\"\\n\")[0]\n    E: str = stdin.split(\"\\n\")[1]\n    answer: str = \"\"\n\n    for i in range(len(O)):\n        if i % 2 == 0:\n            answer += O[i]\n        if i % 2!= 0:\n            answer += E[i]\n\n    return answer\n"
    },
    {
        "number": 4677,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4677,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.split('0')[-1].replace('1', '').replace('B', '')\n"
    },
    {
        "number": 4677,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the string in the editor.\"\"\"\n    pass\n"
    },
    {
        "number": 4677,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    while '0' in s or '1' in s or 'B' in s:\n        s = s.replace('0', '').replace('1', '').replace('B', '')\n    return s\n\nprint(solution(input()))\n"
    },
    {
        "number": 4677,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace('B', '')[::-1]\n\"\"\"\n\ndef"
    },
    {
        "number": 4677,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin\n    new_string = ''\n    for i in range(len(string)):\n        if string[i] == '1':\n            new_string += '1'\n        elif string[i] == 'B':\n            if new_string == '':\n                pass\n            else:\n                new_string = new_string[:-1]\n        else:\n            new_string += '0'\n    print(new_string)\n    return new_string\n\n\nsolution(stdin=input())\n"
    },
    {
        "number": 4677,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    if len(s) == 0:\n        return s\n    if len(s) == 1:\n        return s+'0'\n\n    for i in range(len(s)):\n        if s[i] == 'B':\n            if s[i-1] == '0':\n                s = s[:i-1] + '0' + s[i:]\n            elif s[i-1] == '1':\n                s = s[:i-1] + '1' + s[i:]\n        elif s[i] == '0':\n            s = s[:i] + '0' + s[i:]\n        elif s[i] == '1':\n            s = s[:i] + '1' + s[i:]\n    return s\n"
    },
    {
        "number": 4677,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    res = ''\n    for i in range(len(s)):\n        if s[i] == '0':\n            res += '0'\n        elif s[i] == '1':\n            res += '1'\n        elif s[i] == 'B':\n            if len(res) == 0:\n                continue\n            else:\n                res = res[:-1]\n    return res\n"
    },
    {
        "number": 4677,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    result = stdin\n    n = len(result)\n    for i in range(n - 1, -1, -1):\n        if result[i]!= \"B\":\n            result = result[:i + 1] + \"0\" + result[i + 1:]\n            if i > 0:\n                result = result[:i] + \"0\" + result[i:]\n    return result\n"
    },
    {
        "number": 4677,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace('1', '0')\\\n       .replace('B', '0')\\\n       .replace('0', '1')\\\n       .replace(' ', '')\n\"\"\"\n\nimport sys\n\nsys.stdin = open('./input.txt')\n\ndef"
    },
    {
        "number": 4678,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    A = [int(num) for num in stdin.readline().strip().split(' ')]\n    \n    A.sort()\n    \n    count = 0\n    height = 0\n    \n    for i in range(N):\n        if i == 0:\n            count += A[i]\n            height += count\n        else:\n            count += A[i]\n            count -= A[i-1]\n            height += count\n            \n    return height\n\"\"\"\n"
    },
    {
        "number": 4678,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4678,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n\n    pass\n"
    },
    {
        "number": 4678,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, *A = map(int, stdin.split())\n    A = [0] + A\n    left, right = 0, 0\n    ans = 0\n    for i in range(1, N + 1):\n        left = max(left, A[i] + i)\n    right = max(right, A[N] + N)\n    ans = min(ans, left, right)\n    for i in range(1, N):\n        ans = min(ans, max(A[i] + i, A[i + 1] + i + 1))\n    return ans"
    },
    {
        "number": 4678,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    nums = [int(stdin.readline()) for _ in range(n)]\n\n    # keep track of tallest person\n    tallest = 0\n    # keep track of tallest person's index\n    tallest_index = -1\n    # keep track of current tallest person's index\n    current_tallest_index = -1\n    # keep track of sum of all heights\n    sum_of_all_heights = 0\n\n    for i, num in enumerate(nums):\n        sum_of_all_heights += num\n\n        # if we've found a new tallest person, update tallest person\n        if num > tallest:\n            tallest = num\n            tallest_index = i\n\n        # if we've found a new tallest person, update current tallest person's index\n        if tallest_index > current_tallest_index:\n            current_tallest_index = tallest_index\n\n        # if we've reached the end of the input array, we know that the tallest person will be the last person\n        if i == n - 1:\n            sum_of_all_heights -= nums[i]\n\n    # return sum of all heights minus tallest person's height\n    return sum_of_all_heights - tallest\n"
    },
    {
        "number": 4678,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    inputs = [int(x) for x in stdin.split('\\n')[0].split(' ')]\n    \n    total_height = 0\n    for i in range(1, len(inputs)):\n        total_height += min(inputs[i], inputs[i - 1])\n        \n    print(total_height)\n    return ''"
    },
    {
        "number": 4678,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return\n"
    },
    {
        "number": 4678,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return str, representing the minimum total height of the stools needed to meet the goal.\n\n    >>> solution(\"5\\n2 1 5 4 3\")\n    4\n    \"\"\"\n    _, *numbers = stdin.split()\n    numbers = list(map(int, numbers))\n    return str(max(max(numbers) - i for i in numbers))\n"
    },
    {
        "number": 4678,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    data = [int(x) for x in stdin.split(\"\\n\")]\n    N = data[0]\n    persons = data[1:]\n\n    if len(persons) > N:\n        return \"IMPOSSIBLE\"\n\n    answer = 0\n\n    for i in range(N - 1):\n        answer += max(0, persons[i] - persons[i + 1])\n\n    return answer\n"
    },
    {
        "number": 4678,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.readline().rstrip('\\n')\n    arr = stdin.readline().rstrip('\\n').split(\" \")\n    arr = list(map(int, arr))\n    arr.sort(reverse=True)\n    answer = 0\n    for i in range(n):\n        answer += arr[i]\n    return answer"
    },
    {
        "number": 4679,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    S_A, S_B, S_C = stdin.split()\n    A = [x for x in S_A]\n    B = [x for x in S_B]\n    C = [x for x in S_C]\n    while True:\n        if len(A) == 0:\n            return 'A'\n        if len(B) == 0:\n            return 'B'\n        if len(C) == 0:\n            return 'C'\n        A.pop(0)\n        C.pop(0)\n        if A[0] in B:\n            B.remove(A[0])\n            A.remove(A[0])\n        else:\n            C.remove(A[0])\n            A.remove(A[0])\n"
    },
    {
        "number": 4679,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A = stdin.split()\n    B = A.pop(0)\n    C = A.pop(0)\n    if A[0] == B[0] and A[0] == C[0]:\n        return \"A\"\n    if A[0] == B[0] or A[0] == C[0] or B[0] == C[0]:\n        return \"B\"\n    if A[0] == B[0] or A[0] == C[0] or B[0] == C[0]:\n        return \"C\"\n    return \"D\""
    },
    {
        "number": 4679,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin[0]\n    b = stdin[1]\n    c = stdin[2]\n    return a if a > b else b if b > c else c\n\nprint(solution(input()))\n"
    },
    {
        "number": 4679,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the winner of the game.\"\"\"\n    deck_a = [stdin[0][0], stdin[0][1], stdin[0][2]]\n    deck_b = [stdin[1][0], stdin[1][1], stdin[1][2]]\n    deck_c = [stdin[2][0], stdin[2][1], stdin[2][2]]\n    while len(deck_a) > 0 and len(deck_b) > 0 and len(deck_c) > 0:\n        if deck_a[0] == \"a\":\n            deck_a = deck_a[1:]\n            if deck_a[0] == \"a\":\n                deck_a = deck_a[1:]\n        elif deck_b[0] == \"b\":\n            deck_b = deck_b[1:]\n            if deck_b[0] == \"b\":\n                deck_b = deck_b[1:]\n        elif deck_c[0] == \"c\":\n            deck_c = deck_c[1:]\n            if deck_c[0] == \"c\":\n                deck_c = deck_c[1:]\n    if len(deck_a) == 0:\n        return \"B\"\n    elif len(deck_b) == 0:\n        return \"C\"\n    else:\n        return \"A\"\n"
    },
    {
        "number": 4679,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = stdin.split(\"\\n\")\n    if a.count(a[0]) == len(a):\n        return \"A\"\n    if b.count(b[0]) == len(b):\n        return \"B\"\n    return \"C\"\n\"\"\"\n\nimport sys\n\ns_a, s_b, s_c = [i for i in sys.stdin.read().split(\"\\n\")[:3]]\n"
    },
    {
        "number": 4679,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s_a, s_b, s_c = stdin.split(\"\\n\")\n    a, b, c = s_a, s_b, s_c\n\n    if a[0] == b[0] == c[0]:\n        return \"Draw\"\n    if a[0] == b[0]:\n        if a[0] == c[0]:\n            return \"Alice\"\n        else:\n            return \"Bob\"\n    if b[0] == c[0]:\n        return \"Bob\"\n    return \"Charlie\"\n"
    },
    {
        "number": 4679,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # set up a deck\n    deck = {'a': 3, 'b': 2, 'c': 1}\n    # split the string into 3 separate strings\n    s = stdin.split('\\n')\n    # set up a dict for each player\n    player_dict = {'a': {}, 'b': {}, 'c': {}}\n    # add the deck of the player into the dict\n    player_dict['a'] = deck\n    player_dict['b'] = deck\n    player_dict['c'] = deck\n    # initialize the current player as a\n    current_player = 'a'\n    while len(player_dict[current_player]) > 0:\n        # get the card from the current player\n        card = player_dict[current_player].pop(list(player_dict[current_player].keys())[0])\n        # take a turn\n        print(current_player, '->', card)\n        # find the next player\n        if card == 1:\n            next_player = 'a'\n        elif card == 2:\n            next_player = 'b'\n        elif card == 3:\n            next_player = 'c'\n        # change current player to next_player\n        current_player = next_player\n    # return the current player\n    return current_player"
    },
    {
        "number": 4679,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    for line in stdin.splitlines():\n        print(line)"
    },
    {
        "number": 4679,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return \"A\"\n\"\"\"\n\ndef"
    },
    {
        "number": 4679,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return 'A', 'B', or 'C' depending on the winner of the game\"\"\"\n    a, b, c = stdin.split()\n    cards = {a[0], b[0], c[0]}\n    for card in cards:\n        if 'a' in card:\n            return 'A'\n        if 'b' in card:\n            return 'B'\n        if 'c' in card:\n            return 'C'\n"
    },
    {
        "number": 4680,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    if A == B == C:\n        return \"YES\"\n    if A == B:\n        if C < 5:\n            return \"NO\"\n        else:\n            return \"YES\"\n    if B == C:\n        if A < 5:\n            return \"NO\"\n        else:\n            return \"YES\"\n    if A == C:\n        if B < 5:\n            return \"NO\"\n        else:\n            return \"YES\"\n    return \"NO\""
    },
    {
        "number": 4680,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(x) for x in stdin.split(' ')]\n    return 'YES' if sum(x for x in (a, b, c)) == sum(5, 5, 7) else 'NO'\n"
    },
    {
        "number": 4680,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    return \"YES\" if (a + b + c - max(a, b, c) == 5) and a!= b and b!= c and c!= a else \"NO\"\n\n\nprint(solution(input()))\n\"\"\"\n\ndef"
    },
    {
        "number": 4680,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = list(map(int, stdin.split()))\n    if a + b == c or a + c == b or b + c == a:\n        return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 4680,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = (int(x) for x in stdin.split())\n    if a == 5 and b == 5 and c == 7:\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 4680,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    lengths = [int(n) for n in stdin.split()]\n    a, b, c = lengths\n    if a + b - c == 5 and (a * b - c) % 2 == 0 and (a * b + c) % 2 == 0:\n        return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 4680,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin.split()[0])\n    b = int(stdin.split()[1])\n    c = int(stdin.split()[2])\n    if a == 5 and b == 5 and c == 7:\n        return 'YES'\n    elif a == 7 and b == 5 and c == 5:\n        return 'YES'\n    elif a == 5 and b == 7 and c == 5:\n        return 'YES'\n    else:\n        return 'NO'"
    },
    {
        "number": 4680,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    return \"YES\" if a + b + c == 15 and a == b == c else \"NO\"\n"
    },
    {
        "number": 4680,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    import sys\n    from itertools import permutations\n\n    input_list = list(map(int, stdin.split(' ')))\n    haikus = list(permutations(range(1, input_list[0] + 1)))\n\n    for perm in haikus:\n        if perm[0] * 5 + perm[1] * 7 + perm[2] * 5 == input_list[1] + input_list[2] + input_list[3]:\n            return 'YES'\n    return 'NO'\n    # <-- input/output example\n    # print(solution(stdin))\n"
    },
    {
        "number": 4680,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(x) for x in stdin.split(' ')]\n    return \"YES\" if (((a * 5) + (b * 7)) == (c * 5)) else \"NO\"\n"
    },
    {
        "number": 4681,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return 2\n    lucas = [2, 1]\n    for i in range(n - 1):\n        lucas.append(lucas[-1] + lucas[-2])\n    return str(lucas[n - 1])"
    },
    {
        "number": 4681,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n\n    # Initialize two variables\n    fib_n_minus_2 = 1\n    fib_n_minus_1 = 2\n\n    # Iterate over the number of Fibonacci numbers to get the Nth\n    # Fibonacci number\n    for _ in range(n):\n        fib_n = fib_n_minus_1 + fib_n_minus_2\n        fib_n_minus_2 = fib_n_minus_1\n        fib_n_minus_1 = fib_n\n\n    return str(fib_n_minus_1)"
    },
    {
        "number": 4681,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    lucas = [2, 1]\n    for i in range(2, N):\n        lucas.append(lucas[i-2] + lucas[i-1])\n    return str(lucas[N - 1])\n"
    },
    {
        "number": 4681,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    import math\n    N = int(stdin)\n    L = [2, 1]\n    for i in range(N-1):\n        L.append(L[-1]+L[-2])\n    return L[-1]"
    },
    {
        "number": 4681,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n\n    lucas = [2, 1]\n    if n >= 2:\n        for i in range(2, n+1):\n            lucas.append(lucas[i-2] + lucas[i-1])\n    \n    return str(lucas[n-1])"
    },
    {
        "number": 4681,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the N-th Lucas number\n    >>> solution(\"5\\n\")\n    '11'\n    \"\"\"\n    return str(Lucas(int(stdin)))\n\ndef"
    },
    {
        "number": 4681,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4681,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find the Nth Lucas number.\"\"\"\n    return str(solution.__wrapped__(stdin))\n"
    },
    {
        "number": 4681,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Determine the N-th Lucas number\n\n    Parameters\n    ----------\n    stdin : str\n        The input of the program\n\n    Returns\n    -------\n    str\n        The answer to the problem\n\n    \"\"\"\n    return str(LucasNumbers().solution(stdin))\n"
    },
    {
        "number": 4681,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    lucas_numbers = []\n    nth_number = 0\n    lucas_numbers.append(2)\n    lucas_numbers.append(1)\n    for i in range(2, n + 1):\n        nth_number = lucas_numbers[i - 1] + lucas_numbers[i - 2]\n        lucas_numbers.append(nth_number)\n    return str(lucas_numbers[n - 1])\n"
    },
    {
        "number": 4682,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, h = int(stdin.readline().rstrip()), int(stdin.readline().rstrip()), int(stdin.readline().rstrip())\n    if h % 2 == 0:\n        return str(a + b) + '\\n' + str(int(h / 2) * a)\n    return str(a + b) + '\\n' + str(int((h - 1) / 2) * a)\n"
    },
    {
        "number": 4682,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin.split('\\n')[0]) * int(stdin.split('\\n')[1]) // 2)\n"
    },
    {
        "number": 4682,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin[0])\n    b = int(stdin[1])\n    h = int(stdin[2])\n    return str(a + b) + \"\u00d7\" + str(h) + \"/2\"\n"
    },
    {
        "number": 4682,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, h = [int(x) for x in stdin.split('\\n')]\n    if h % 2 == 0:\n        print(a * b / 2)\n    else:\n        print(a * (b + h) / 2)\n\ndef"
    },
    {
        "number": 4682,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, h = (int(x) for x in stdin.split())\n    return str(a * b * h // 2)"
    },
    {
        "number": 4682,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, h = (int(n) for n in stdin.split())\n    s = (a + b) * h / 2\n    return str(int(s))\n\"\"\"\n\ndef"
    },
    {
        "number": 4682,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, h = map(int, stdin.split())\n    return str(a + b)\n"
    },
    {
        "number": 4682,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, h = [int(x) for x in stdin.split('\\n')]\n    return str(round(((a+b) * h/2), 1))\n"
    },
    {
        "number": 4682,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''https://www.codewars.com/kata/5270d2b162488fa83d00041d/train/python\n    Your goal in this kata is to implement a difference function, which subtracts one list from another and returns the result.\n    It should remove all values from list a, which are present in list b.\n    array_diff([1,2],[1]) == [2]\n    If a value is present in b, all of its occurrences must be removed from the other:\n    array_diff([1,2,2,2,3],[2]) == [1,3]\n    '''\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n\n    a = set(a)\n    b = set(b)\n    return list(a - b)\n"
    },
    {
        "number": 4682,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin.readline().strip())\n    b = int(stdin.readline().strip())\n    h = int(stdin.readline().strip())\n    return str(a+b)*h/2"
    },
    {
        "number": 4683,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport math\n\nN = int(input())\nA = list(map(int, input().split()))\n\ntotal = 0\n\nfor i in range(N-1):\n    for j in range(i+1, N):\n        total += A[i]*A[j]\n\nprint(math.trunc(total%(10**9+7)))\n"
    },
    {
        "number": 4683,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    line = stdin.readline().split()\n    A = list(map(int, line))\n    ans = 0\n    for i in range(1, n):\n        ans += sum(A[0:i]) * sum(A[i:n])\n    return str(ans % (10**9 + 7))"
    },
    {
        "number": 4683,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solve problem using input from standard input.\"\"\"\n    # Create a list of input values.\n    values = [int(value) for value in stdin.splitlines()]\n    return str(sum(values[1:] * values[:-1]))\n"
    },
    {
        "number": 4683,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Given the number of integers N, and an array of N integers A_1,\\ldots,A_N, print the sum of A_i \\times A_j where 1<=i<j<=N, modulo (10^9+7).\n\n    >>> solution(\"3\\n1 2 3\")\n    11\n    \"\"\"\n    n, *ints = map(int, stdin.split())\n    result = 0\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            result += ints[i] * ints[j]\n\n    return result % (10 ** 9 + 7)\n"
    },
    {
        "number": 4683,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    # print(n, a)\n\n    s = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            s += a[i] * a[j]\n    return s % (10 ** 9 + 7)\n"
    },
    {
        "number": 4683,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return stdin"
    },
    {
        "number": 4683,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return 'X'"
    },
    {
        "number": 4683,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.splitlines()\n    return str(sum(map(lambda x: int(x) * int(x), line[1].split())) % 1000000007)\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4683,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return str(sum(\n        int(x) * int(y)\n        for x, y in [\n            tuple(map(int, line.split()))\n            for line in stdin.split('\\n')\n        ]\n    ) % (1e9 + 7))\n\nprint(solution(stdin))\n\n\"\"\"\n"
    },
    {
        "number": 4683,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split(' ')))\n    odd = 0\n    even = 0\n    for i in range(0, n):\n        if i % 2 == 0:\n            even += a[i]\n        else:\n            odd += a[i]\n    return str(odd * even % (10**9 + 7))"
    },
    {
        "number": 4684,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    r, g, b = stdin.split()\n    print(\"YES\" if int(r) * int(g) * int(b) % 4 == 0 else \"NO\")"
    },
    {
        "number": 4684,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    r, g, b = map(int, stdin.split())\n    print('YES' if (r + g + b) % 4 == 0 else 'NO')"
    },
    {
        "number": 4684,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n  \"\"\"\n  Finds whether or not 3 positive integers are a multiple of 4\n  \"\"\"\n  result = False\n  r, g, b = map(int, stdin.split())\n  if (r + g + b) % 4 == 0:\n    result = True\n  return 'YES' if result else 'NO'\n  \nprint(solution(input()))\n"
    },
    {
        "number": 4684,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    red, green, blue = map(int, stdin.split())\n\n    if red % 4 == 0 and green % 4 == 0 and blue % 4 == 0:\n        return 'YES'\n    else:\n        return 'NO'\n"
    },
    {
        "number": 4684,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \n    a,b,c = stdin.split()\n    a = int(a)\n    b = int(b)\n    c = int(c)\n    if (a+b+c) % 4 == 0:\n        return 'YES'\n    else:\n        return 'NO'\n    \nprint(solution(input()))\n\n\n\n####### OR ######\n\nfrom sys import stdin\nfrom collections import deque\n\ndef"
    },
    {
        "number": 4684,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n  r, g, b = map(int, stdin.split())\n  \n  return \"YES\" if r + g + b % 4 == 0 else \"NO\"\n"
    },
    {
        "number": 4684,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\" \")\n    card_number = [int(i) for i in stdin]\n    card_number = card_number[0] * 100 + card_number[1] * 10 + card_number[2]\n    if card_number % 4 == 0:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 4684,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    r, g, b = map(int, stdin.split())\n    if r*g*b % 4 == 0:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n"
    },
    {
        "number": 4684,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    for line in stdin:\n        for i in line.split():\n            if int(i) % 4 == 0:\n                print('YES')\n                return\n    print('NO')\n    return\n"
    },
    {
        "number": 4684,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    r, g, b = stdin.split()\n    r, g, b = int(r), int(g), int(b)\n\n    if (r + g + b) % 4 == 0:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 4685,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Gets the maximum possible sum from the integers written on the blackboard after K operations.\n    Args:\n        stdin (str): The input.\n\n    Returns:\n        str: The solution.\n    \"\"\"\n    values = map(int, stdin.split(' '))\n    A, B, C = values\n    K = int(stdin.split('\\n')[0])\n    # Write your code here\n    s = sum([A, B, C])\n    for i in range(K):\n        if A > B:\n            A = A - B\n            B = 2 * B\n        elif A > C:\n            A = A - C\n            C = 2 * C\n        elif B > C:\n            B = B - C\n            C = 2 * C\n        else:\n            C = C - B\n            B = 2 * B\n        s += A\n    return str(s)\n\n\ndef"
    },
    {
        "number": 4685,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    a, b, c = map(int, stdin.split(' '))\n    k = int(stdin.split(' ')[-1])\n    a = a*k\n    b = b*k\n    c = c*k\n    return str(max(a,b,c))\n"
    },
    {
        "number": 4685,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    k = int(stdin)\n\n    return a + b + c\n\ndef"
    },
    {
        "number": 4685,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(i) for i in stdin.split()]\n    k = int(input())\n    \n    print(max(a, b, c) + 2*min(a, b, c))\n"
    },
    {
        "number": 4685,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Get the largest sum of the integers on the blackboard.\n\n    Args:\n        stdin (str): the input string\n\n    Returns:\n        str: the largest sum\n    \"\"\"\n    (a, b, c) = (int(i) for i in stdin.split())\n    k = int(input())\n    print(max(a * k, b * k, c * k))\n"
    },
    {
        "number": 4685,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"5 3 11\\n1\")\n    '30'\n    \"\"\"\n    nums = stdin.split()\n    if nums[0] == nums[1] == nums[2]:\n        return \"0\"\n    return max([int(nums[0]) * 2, int(nums[1]) * 2, int(nums[2]) * 2])\n"
    },
    {
        "number": 4685,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    k = int(stdin.split()[-1])\n    a, b, c = [a, b, c]\n    result = a * b * c\n    if k == 1:\n        result = max(result, a * 2 * b * c, a * b * 2 * c)\n        result = max(result, a * b * 2 * c)\n        result = max(result, a * 2 * b * c)\n    elif k == 2:\n        result = max(result, a * 2 * b * c, a * b * 2 * c)\n        result = max(result, a * b * 2 * c, a * 2 * b * c)\n        result = max(result, a * 2 * b * c)\n    elif k == 3:\n        result = max(result, a * 2 * b * c, a * b * 2 * c)\n        result = max(result, a * 2 * b * c, a * c * 2 * b)\n        result = max(result, a * b * 2 * c, a * 2 * b * c)\n        result = max(result, a * b * c * 2)\n    return result\n    \n"
    },
    {
        "number": 4685,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, k = [int(x) for x in stdin.split('\\n')]\n    z = 1\n    while k > 0:\n        if z % 2 == 0:\n            a, b, c = 2 * a, 2 * b, 2 * c\n        else:\n            a, b, c = a, b, 2 * c\n        z += 1\n        k -= 1\n    return str(a + b + c)\n"
    },
    {
        "number": 4685,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    k = int(stdin.split()[-1])\n    \n    total = a + b + c\n    \n    count = 0\n    while count < k:\n        index = random.randint(0, 2)\n        if index == 0:\n            a *= 2\n        elif index == 1:\n            b *= 2\n        else:\n            c *= 2\n            \n        count += 1\n        \n    return sum([a, b, c])\n"
    },
    {
        "number": 4685,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n  A, B, C, K = map(int, stdin.split())\n  \n  choices = set()\n  for _ in range(K):\n    choices.add(A + B)\n    A, B = B, A + 2 * B\n  \n  choices.add(0)\n  choices.add(C)\n  choices = sorted(choices)\n  \n  max_val = 0\n  for choice in choices:\n    max_val = max(max_val, choice + B + C)\n  \n  return str(max_val)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4686,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return 'Yes' if stdin.count(c)%2 == 0 else 'No'\n"
    },
    {
        "number": 4686,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.lower()\n    freq = {}\n    for char in stdin:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    for char in freq:\n        if freq[char] % 2!= 0:\n            return \"No\"\n    return \"Yes\"\n"
    },
    {
        "number": 4686,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    freq = {}\n    for char in stdin:\n        freq[char] = freq.get(char, 0) + 1\n\n    even = [k for k, v in freq.items() if v % 2 == 0]\n    odd = [k for k, v in freq.items() if v % 2!= 0]\n    return 'Yes' if len(even) == 0 or len(odd) == 0 else 'No'\n"
    },
    {
        "number": 4686,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # replace this for solution\n    return \"Yes\"\n"
    },
    {
        "number": 4686,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a = 0\n    b = 0\n    c = 0\n    count = dict()\n    for i in stdin:\n        if i in count:\n            count[i] += 1\n        else:\n            count[i] = 1\n    for j in count:\n        if count[j] % 2 == 0:\n            a += 1\n        else:\n            b += 1\n    if a == len(count) or b == 1:\n        return 'Yes'\n    return 'No'\n"
    },
    {
        "number": 4686,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return 'Yes' if w is beautiful else 'No'.\n\n    >>> solution('abaccaba')\n    'Yes'\n    >>> solution('abca')\n    'No'\n    \"\"\"\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    s = Counter(stdin.lower())\n    flag = True\n    for i in alphabet:\n        if s[i] % 2!= 0:\n            flag = False\n    return \"Yes\" if flag else \"No\"\n    # return 'Yes' if all([s[i] % 2 == 0 for i in alphabet]) else 'No'\n"
    },
    {
        "number": 4686,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4686,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return 'Yes' if len(set(stdin)) == len(stdin) else 'No'"
    },
    {
        "number": 4686,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    d = {}\n    for c in stdin:\n        d[c] = d.get(c, 0) + 1\n    s = sum(d.values())\n    for c in d.keys():\n        if d[c] % 2 == 1:\n            return 'No'\n    return 'Yes'\n\"\"\"\n\nfrom math import ceil\n\n\ndef"
    },
    {
        "number": 4686,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    from collections import Counter\n    cnt = Counter(stdin)\n    for k, v in cnt.items():\n        if v % 2!= 0:\n            return 'No'\n    return 'Yes'\n"
    },
    {
        "number": 4687,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # return \"\"\n\ndef"
    },
    {
        "number": 4687,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solve exercise.\"\"\"\n    n, k = [int(i) for i in stdin.split('\\n')[:-1]]\n    b = [int(i) for i in stdin.split('\\n')[1:]]\n\n    # Solve problem.\n    b.sort()\n    return str(b[k-1])\n"
    },
    {
        "number": 4687,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, K = [int(x) for x in stdin.split()]\n    _ = [int(stdin) for _ in range(N)]\n    return sorted(_)[K-1]\n"
    },
    {
        "number": 4687,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n,k = list(map(int,stdin.split()))\n    array = []\n    \n    for i in range(n):\n        array.append(list(map(int,stdin.split())))\n    \n    kth_smallest = None\n    \n    for i in range(n):\n        kth_smallest = min(array[i][0], kth_smallest)\n    \n    print(kth_smallest)"
    },
    {
        "number": 4687,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \n    \n    \n    return stdout\n"
    },
    {
        "number": 4687,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, K = [int(x) for x in stdin.split()]\n    A = [int(x) for x in stdin.split()]\n    C = [1 for x in A]\n    D = []\n    i = 0\n    \n    for j in range(K):\n        D.append(A[i])\n        C[i] += 1\n        i = (i + 1 + C[i]) % N\n    \n    return min(D)\n"
    },
    {
        "number": 4687,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Your code goes here\n    \n    # Get N and K\n    N, K = map(int, stdin.readline().split())\n    # Build initial list\n    A = [int(x) for x in stdin.readline().split()]\n    \n    # Sort\n    A.sort()\n    # Find Kth element\n    print(A[K-1])\n    return ''"
    },
    {
        "number": 4687,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    arr = [[] for _ in range(N)]\n    for i in range(N):\n        a, b = map(int, stdin.split(' ')[2 * i + 1: 2 * i + 3])\n        arr[i] = (a, b)\n    arr = sorted(arr, key=lambda x: x[0])\n    for i in range(N):\n        for j in range(arr[i][1]):\n            print(arr[i][0])\n"
    },
    {
        "number": 4687,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4687,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a, b = [], []\n    for i in range(n):\n        a, b = map(int, stdin.split())\n        a.append(a)\n        b.append(b)\n\n    def kth_smallest(a, b):\n        return a[b[0]-1]\n\n    for i in range(n):\n        if b[i] == k:\n            return kth_smallest(a, b)\n\n        elif b[i] < k:\n            if b[i] + 1 < k:\n                a.append(a[b[i] - 1])\n                b.append(b[i] + 1)\n                return kth_smallest(a, b)\n            elif b[i] + 1 == k:\n                a.append(a[b[i] - 1])\n                return kth_smallest(a, b)\n\n        else:\n            if b[i] - 1 == k:\n                return kth_smallest(a, b)\n            elif b[i] - 1 < k:\n                a.append(a[b[i] - 2])\n                b.append(b[i] - 1)\n                return kth_smallest(a, b)"
    },
    {
        "number": 4688,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4688,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.strip().split(' ')]\n    print(2 ** n - k)"
    },
    {
        "number": 4688,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # get input\n    input = stdin.split()\n    N = int(input[0])\n    K = int(input[1])\n    # print answer\n    return str(f(N, K))\ndef"
    },
    {
        "number": 4688,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n  # Your code here\n  return stdout(result)"
    },
    {
        "number": 4688,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return\n"
    },
    {
        "number": 4688,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, K = [int(x) for x in stdin.split(\" \")]\n    if N == K:\n        return \"1\"\n\n    result = 0\n    for i in range(N - K + 1):\n        result += factorial(N - i - K) // (factorial(i) * factorial(K))\n\n    return str(result)\n\ndef"
    },
    {
        "number": 4688,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # remove last character (newline)\n    stdin = stdin[:-1]\n    # get values of input\n    n, k = map(int, stdin.split())\n    return str(factorial(n) // factorial(k) // factorial(n - k))\n\ndef"
    },
    {
        "number": 4688,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def factorial(n):\n        if n == 0:\n            return 1\n        return n * factorial(n - 1)\n\n    stdin = stdin.split(\"\\n\")\n    n = int(stdin[0].split()[0])\n    k = int(stdin[0].split()[1])\n\n    return str(int(factorial(n - 1) / (factorial(n - 1 - k) * factorial(k - 1))))\n"
    },
    {
        "number": 4688,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    if len(lines) == 2:\n        n, k = map(int, lines[0].split(\" \"))\n    else:\n        n = int(lines[0])\n        k = int(lines[1])\n    print(n, k)\n    return \"\""
    },
    {
        "number": 4688,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n  N, K = map(int, stdin.readline().split())\n  dp = [[0 for _ in range(N+1)] for _ in range(K+1)]\n  for j in range(1, K+1):\n    dp[j][1] = 1\n  for i in range(1, N+1):\n    dp[1][i] = i\n  for j in range(2, K+1):\n    for i in range(2, N+1):\n      dp[j][i] = dp[j-1][i-1] + dp[j][i-1]\n  return dp[K][N]\n\ndef"
    },
    {
        "number": 4689,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n  K, N = [int(x) for x in stdin.split('\\n')[0].split(' ')]\n  A = [int(x) for x in stdin.split('\\n')[1].split(' ')]\n  houses = []\n  for i in range(N):\n    houses.append(A[i])\n  houses.sort(reverse=True)\n  # print(houses)\n  # print(A)\n  # print(K)\n\n  return K - max(houses)\n"
    },
    {
        "number": 4689,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds minimum distance between points in a circular pond\"\"\"\n    \n    # Splits input by new line\n    # Reads K and N\n    # Reads A_i, from input\n    line = stdin.split('\\n')[1:]\n    K, N = [int(val) for val in line[0].split(' ')]\n    A = [int(val) for val in line[1].split(' ')]\n    A.sort()\n\n    # Creates a dictionary with the distance to the north\n    distance = {i: None for i in range(1, N + 1)}\n    distance[1] = 0\n    # This is the counter for the house we are on\n    house = 1\n    # Distance traveled since the last house\n    total = 0\n\n    # Loops until all houses have been visited\n    while house < N + 1:\n        # Gets the distance to the north\n        north = A[house - 1]\n        # Gets the distance to the east\n        east = A[house]\n        # Gets the distance to the west\n        west = A[house - 1]\n        # If the distance to the north is greater than the max\n        # distance, then we add the distance to the north\n        if distance[house] == None:\n            # If the house is the first house, then we add the distance to the east to the total distance\n            if house == 1:\n                total += east\n            else:\n                # Otherwise we add the max distance to the east to the total distance\n                total += max(east, north)\n            # Updates the distance to the north\n            distance[house] = north\n        # If the distance to the east is greater than the max distance, then we add the distance to the east\n        elif distance[house] > east:\n            total += east\n            # Updates the distance to the east\n            distance[house] = east\n        # If the distance to the west is greater than the max distance, then we add the distance to the west\n        elif distance[house] > west:\n            total += west\n            # Updates the distance to the west\n            distance[house] = west\n        # If the distance to the west is the same as the distance to the north, then we set the distance to the west to the north\n        elif distance[house] == west:\n            distance[house] = north\n        # If the distance to the north is the same as the distance to the east, then we set the distance to the north to the east\n        elif distance[house] == north:\n            distance[house] = east\n        # Increments the house\n        house += 1\n\n    # Returns the distance\n    return total\n\nprint(solution(input()))"
    },
    {
        "number": 4689,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    k, n = [int(x) for x in stdin.split(' ')]\n    houses = [int(x) for x in stdin.split(' ')]\n    houses = sorted(houses)\n    result = 0\n    #print(houses)\n    for i in range(len(houses)-1):\n        result += abs(houses[i]-houses[i+1])\n    return str(result)"
    },
    {
        "number": 4689,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return solution\n"
    },
    {
        "number": 4689,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the minimum distance that needs to be traveled when you start at one of the houses and visit all the N houses.\"\"\"\n    K, N = [int(number) for number in stdin.split()]\n    houses = [int(number) for number in stdin.split()]\n    houses.sort()\n    houses.append(K)\n    distances = []\n    distances.append(houses[0] + houses[1])\n    for i in range(1, len(houses)-1):\n        distances.append(houses[i] + houses[i+1] - 1)\n    print(min(distances))\n"
    },
    {
        "number": 4689,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find minimum distance to travel from one house to all houses.\n\n    Args:\n        stdin (str): Input from stdin.\n\n    Returns:\n        str: Distance in meters.\n    \"\"\"\n    K, N = map(int, stdin.split(' '))\n    houses = list(map(int, stdin.split(' ')))\n    houses.sort()\n\n    if N == 1:\n        return houses[0]\n\n    elif N == 2:\n        return houses[1] - houses[0]\n\n    elif N == 3:\n        return min(houses[1] - houses[0], houses[2] - houses[1])\n\n    elif N == 4:\n        return min(houses[2] - houses[0], houses[3] - houses[1])\n\n    elif N == 5:\n        return min(houses[3] - houses[0], houses[4] - houses[1])\n\n    elif N == 6:\n        return min(houses[4] - houses[0], houses[5] - houses[1])\n\n    elif N == 7:\n        return min(houses[5] - houses[0], houses[6] - houses[1])\n\n    elif N == 8:\n        return min(houses[6] - houses[0], houses[7] - houses[1])\n\n    elif N == 9:\n        return min(houses[7] - houses[0], houses[8] - houses[1])\n\n    elif N == 10:\n        return min(houses[8] - houses[0], houses[9] - houses[1])\n\n\ndef"
    },
    {
        "number": 4689,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    k, n = map(int, stdin.readline().split())\n    distances = list(map(int, stdin.readline().split()))\n\n    total_dist = 0\n\n    for i in range(n):\n        total_dist += distances[i % len(distances)]\n\n    return total_dist"
    },
    {
        "number": 4689,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return''"
    },
    {
        "number": 4689,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    K, N = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n\n    return 0\n"
    },
    {
        "number": 4689,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find the minimum distance that needs to be traveled when you start at one of the houses and visit all the N houses.\n\n    Args:\n        stdin (str): Input string given from standard input\n\n    Returns:\n        str: Output string\n    \"\"\"\n    K, N = map(int, stdin.split())\n    houses = list(map(int, stdin.split()[1:]))\n    houses.sort()\n\n    # look at houses[i] < houses[i + 1] - that is, we are looking at the leftmost house,\n    # and we want to make sure that we travel past all the houses on the right side of it.\n    # This is equivalent to \"greater than the minimum distance between houses on the right side\"\n    leftmost_house = houses[0]\n    rightmost_house = houses[-1]\n    print(f'leftmost_house {leftmost_house}, rightmost_house {rightmost_house}')\n    distance = rightmost_house - leftmost_house\n    print(f'initial distance {distance}')\n    for house in houses[1:]:\n        distance += house - leftmost_house\n        print(f'distance {distance}')\n        leftmost_house = house\n    print(f'final distance {distance}')\n\n    return distance"
    },
    {
        "number": 4690,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    area = 0\n    if max(a, b) > max(c, d):\n        area = max(a, b) * max(c, d)\n    elif max(a, b) < max(c, d):\n        area = min(a, b) * min(c, d)\n    else:\n        area = max(a, b) * min(c, d)\n    return area\n"
    },
    {
        "number": 4690,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split(' '))\n    if abs(a - c) > abs(b - d):\n        return str(int(abs(a - c) * abs(b - d)))\n    else:\n        return str(int(abs(a - c) * abs(a - b)))\n"
    },
    {
        "number": 4690,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    area_1 = A * B\n    area_2 = C * D\n    if area_1 >= area_2:\n        return str(area_1)\n    else:\n        return str(area_2)\n"
    },
    {
        "number": 4690,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    max_area = max(a * d, b * c)\n    min_area = min(a * d, b * c)\n    return str(max_area) if max_area > min_area else str(min_area)\n"
    },
    {
        "number": 4690,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    if b > c:\n        if a > d:\n            return (a * c) + (b * d)\n        else:\n            return (b * c) + (a * d)\n    else:\n        if a > d:\n            return (a * d) + (b * c)\n        else:\n            return (b * d) + (a * c)\n"
    },
    {
        "number": 4690,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = [int(i) for i in stdin.split(\" \")]\n    if (a*b) >= (c*d):\n        print(a*b)\n    elif (a*b) < (c*d):\n        print(c*d)"
    },
    {
        "number": 4690,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = [int(x) for x in stdin.split()]\n    if A >= C and B >= D:\n        return str(C * D)\n    elif C >= B and D >= A:\n        return str(A * B)\n    else:\n        return \"0\"\n"
    },
    {
        "number": 4690,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = [int(input()) for i in range(4)]\n    return str(max(A*B, C*D))\n"
    },
    {
        "number": 4690,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split(' '))\n    if a < c and b < d:\n        return str(a * b)\n    elif a < c and b >= d:\n        return str(a * d)\n    elif a >= c and b < d:\n        return str(a * b)\n    else:\n        return str(c * d)\n\ndef"
    },
    {
        "number": 4690,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = [int(s) for s in stdin.split()]\n    max_area = (a*d-b*c) if (a*d-b*c) > (b*d-a*c) else (b*d-a*c)\n    return str(max_area)"
    },
    {
        "number": 4691,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your solution here\n    return \"AC x \" + str(stdin.count('AC')) + \"\\nWA x \" + str(stdin.count('WA')) + \"\\nTLE x \" + str(stdin.count('TLE')) + \"\\nRE x \" + str(stdin.count('RE'))\n"
    },
    {
        "number": 4691,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Calculate the frequency of AC, WA, TLE, and RE.\n    \"\"\"\n    ac, wa, tle, re = 0, 0, 0, 0\n    for line in stdin.splitlines():\n        if line == \"AC\":\n            ac += 1\n        elif line == \"WA\":\n            wa += 1\n        elif line == \"TLE\":\n            tle += 1\n        elif line == \"RE\":\n            re += 1\n    return f\"AC x {ac}\\nWA x {wa}\\nTLE x {tle}\\nRE x {re}\\n\"\n"
    },
    {
        "number": 4691,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution to the problem\n    \"\"\"\n    input_list = [line for line in stdin.split(\"\\n\") if line!= \"\"]\n\n    # Check the format of the input\n    if len(input_list)!= 2:\n        return \"Invalid Input! Expected two lines of input.\"\n\n    N = int(input_list[0])\n    if N < 1 or N > 1000:\n        return \"Invalid Input! Expected N between 1 and 1000.\"\n\n    test_cases = input_list[1]\n    if len(test_cases)!= N:\n        return \"Invalid Input! Expected N test cases.\"\n\n    for test_case in test_cases:\n        if test_case!= \"AC\" and test_case!= \"WA\" and test_case!= \"TLE\" and test_case!= \"RE\":\n            return \"Invalid Input! Expected verdicts AC, WA, TLE, and RE.\"\n\n    return \"AC x \" + str(test_cases.count(\"AC\")) + \"\\\\nWA x \" + str(test_cases.count(\"WA\")) + \"\\\\nTLE x \" + str(test_cases.count(\"TLE\")) + \"\\\\nRE x \" + str(test_cases.count(\"RE\"))\n"
    },
    {
        "number": 4691,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return \"AC x \" + stdin.count(\"AC\") + \"\\nWA x \" + stdin.count(\"WA\") + \"\\nTLE x \" + stdin.count(\"TLE\") + \"\\nRE x \" + stdin.count(\"RE\")\n\"\"\"\n\ndef"
    },
    {
        "number": 4691,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Your solution goes here\n    lines = stdin.splitlines()\n    n = int(lines[0])\n    AC = 0\n    WA = 0\n    TLE = 0\n    RE = 0\n    for line in lines[1:]:\n        if line == \"AC\":\n            AC += 1\n        elif line == \"WA\":\n            WA += 1\n        elif line == \"TLE\":\n            TLE += 1\n        elif line == \"RE\":\n            RE += 1\n    print(str(AC) + \" x \" + str(n - AC))\n    print(str(WA) + \" x \" + str(n - WA))\n    print(str(TLE) + \" x \" + str(n - TLE))\n    print(str(RE) + \" x \" + str(n - RE))\n    return \"\"\n"
    },
    {
        "number": 4691,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the number of AC, WA, TLE, and RE test cases for the given test cases\"\"\"\n    solution = stdin.splitlines()\n    count_dict = {'AC': 0, 'WA': 0, 'TLE': 0, 'RE': 0}\n    for line in solution:\n        if line == 'AC':\n            count_dict['AC'] += 1\n        if line == 'WA':\n            count_dict['WA'] += 1\n        if line == 'TLE':\n            count_dict['TLE'] += 1\n        if line == 'RE':\n            count_dict['RE'] += 1\n    return str(count_dict['AC']) +'x'+ str(count_dict['WA']) + '\\n' + str(count_dict['TLE']) +'x'+ str(count_dict['RE']) + '\\n'\n"
    },
    {
        "number": 4691,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    count_ac = 0\n    count_wa = 0\n    count_tle = 0\n    count_re = 0\n    n = int(stdin.readline().strip())\n    while n > 0:\n        string = stdin.readline().strip()\n        if string == 'AC':\n            count_ac += 1\n        elif string == 'WA':\n            count_wa += 1\n        elif string == 'TLE':\n            count_tle += 1\n        elif string == 'RE':\n            count_re += 1\n        n -= 1\n    print(count_ac, count_wa, count_tle, count_re)\n"
    },
    {
        "number": 4691,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nfrom collections import defaultdict\n\ndef"
    },
    {
        "number": 4691,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Your code goes here\n    count_dict = {'AC': 0, 'WA': 0, 'TLE': 0, 'RE': 0}\n    for line in stdin.split('\\n'):\n        count_dict[line] += 1\n    return''.join(map(str, count_dict.values()))\n"
    },
    {
        "number": 4691,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(str(sample_tests_count))\n    AC x 3\n    \"\"\"\n    # remove new line characters\n    stdin = stdin.rstrip()\n    # get split up test cases from stdin\n    test_cases = stdin.split(\"\\n\\n\")\n    # get all verdicts from test_cases\n    verdicts = [test_case.split()[0] for test_case in test_cases]\n    # get count of each verdict\n    counts = [verdicts.count(test_case) for test_case in verdicts]\n    # print out results\n    print(f\"AC x {counts[0]}\\nWA x {counts[1]}\\nTLE x {counts[2]}\\nRE x {counts[3]}\")\n"
    },
    {
        "number": 4692,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n  M, = stdin.split()\n  return str(int(M) - 17)\n  \n"
    },
    {
        "number": 4692,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    hours = int(stdin)\n    if hours >= 0 and hours <= 23:\n        return str(hours - 1)"
    },
    {
        "number": 4692,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    M = int(stdin)\n    result = (60 - M) * 24\n    return str(result)\n\nprint(solution(input()))\n\ndef"
    },
    {
        "number": 4692,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    h, m = map(int, stdin.split())\n    \n    if m < 45:\n        return str(h - 1) +'' + str(m + 15)\n    else:\n        return str(h + 1) +'' + str(m - 45)\n"
    },
    {
        "number": 4692,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Convert input into hours and print.\"\"\"\n    hours = int(stdin)\n    print(hours)\n    return hours\n"
    },
    {
        "number": 4692,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \n    M = int(stdin)\n    return str(int(30.4375 * M))"
    },
    {
        "number": 4692,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    hours_until_new_year = int(stdin) % 24\n\n    if hours_until_new_year == 0:\n        hours_until_new_year = 24\n    return str(hours_until_new_year)"
    },
    {
        "number": 4692,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    M = int(stdin)\n    if M == 1 or M == 12:\n        hours_until_new_year = 24 - M\n    elif M == 3 or M == 4:\n        hours_until_new_year = 31 - M\n    elif M == 5 or M == 6:\n        hours_until_new_year = 30 - M\n    elif M == 7 or M == 8:\n        hours_until_new_year = 31 - M\n    elif M == 9 or M == 10:\n        hours_until_new_year = 30 - M\n    elif M == 11 or M == 2:\n        hours_until_new_year = 31 - M\n    else:\n        hours_until_new_year = 0\n    return str(hours_until_new_year)\n"
    },
    {
        "number": 4692,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''21''')\n    '27'\n    \"\"\"\n    M = int(stdin)\n    return str(M + 23 - 30)\n"
    },
    {
        "number": 4692,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    hours = int(stdin)\n    days = 31\n    months = 12\n    total_hours = 0\n    months_hours = 0\n    for x in range(1, months):\n        months_hours += days\n        if x == 2:\n            days = 29\n    total_hours = months_hours + hours\n    print(total_hours)\n    return total_hours\n"
    },
    {
        "number": 4693,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    A + B\n\n    :param stdin:\n    :return:\n    '''\n\n    a, b = list(map(int, stdin.split()))\n    if (a + b) > 9:\n        print('error')\n    else:\n        print(a + b)\n"
    },
    {
        "number": 4693,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\ndef"
    },
    {
        "number": 4693,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split(\" \"))\n    if a + b >= 10:\n        return \"error\"\n    return a + b\n"
    },
    {
        "number": 4693,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a + b >= 10:\n        return 'error'\n    return a + b\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4693,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    \u89e3\u8aac\n    \u307e\u305a\u306f\u5165\u529b\u3092\u4e0e\u3048\u3066\u304a\u304f\n    A, B = stdin.split()\n    print(int(A) + int(B))\n    \u3067\u3001A, B\u3092int\u306b\u5909\u63db\u3057\u3066\u3001\u7d50\u679c\u3092\u51fa\u529b\n    \u305d\u3057\u3066\u3001\u5225\u306b\u3042\u307e\u308a\u3001\u51fa\u529b\u7d50\u679c\u304c10\u4ee5\u4e0a\u306e\u5834\u5408\u306f\u30a8\u30e9\u30fc\u3092\u51fa\u529b\n    '''\n    A, B = stdin.split()\n    ans = int(A) + int(B)\n    if ans >= 10:\n        print('error')\n    else:\n        print(ans)\n    return\n"
    },
    {
        "number": 4693,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split(' '))\n    return 'error' if a + b >= 10 else str(a + b)\n"
    },
    {
        "number": 4693,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(i) for i in stdin.split(\" \")]\n    if a + b >= 10:\n        return \"error\"\n    return a + b\n"
    },
    {
        "number": 4693,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(n) for n in stdin.split(\" \")]\n    if a + b >= 10:\n        print(\"error\")\n    else:\n        print(a + b)\n\n\ndef"
    },
    {
        "number": 4693,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    input_array = [int(x) for x in stdin.split()]\n    a, b = input_array\n    if a + b > 9:\n        return \"Error\"\n    return str(a + b)\n"
    },
    {
        "number": 4693,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    [A, B] = stdin.split(' ')\n    A = int(A)\n    B = int(B)\n    if A + B >= 10:\n        return 'error'\n    return str(A + B)"
    },
    {
        "number": 4694,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\nimport math\n\n\nn = int(input())\nx = list(map(int, input().split()))\n\ndist = 0\nfor i in range(1, len(x)):\n    dist += math.fabs(x[i] - x[i-1])\n\nprint(dist)"
    },
    {
        "number": 4694,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return stdin"
    },
    {
        "number": 4694,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    '''Returns the minimum distance to be traveled,\n    when the reindeer starts at 0,0 and ends at n,m'''\n    # todo: write code...\n    return stdin"
    },
    {
        "number": 4694,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    distance = 0\n    houses = [0] * N\n    for i in range(N):\n        houses[i] = int(stdin.split()[i])\n    houses.sort()\n    houses.reverse()\n    i = 0\n    while i < N - 1:\n        distance += houses[i + 1] - houses[i]\n        i += 1\n    return distance\n\ndef"
    },
    {
        "number": 4694,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def travel_distance(houses, start_coordinate):\n        distance_sum = 0\n        houses_reached = [start_coordinate]\n        while len(houses_reached)!= len(houses):\n            houses_reached = [neighbor_coordinate\n                              for house_coordinate in houses_reached\n                              for neighbor_coordinate in [house_coordinate - 1, house_coordinate + 1]\n                              if neighbor_coordinate in houses and neighbor_coordinate not in houses_reached]\n            distance_sum += 1\n        return distance_sum\n    num_houses = int(stdin.readline())\n    houses_coordinates = [int(coordinate) for coordinate in stdin.readline().split(' ')]\n    houses_coordinates.sort()\n    return str(travel_distance(houses_coordinates, houses_coordinates[0]))\nprint(solution(stdin=input()))\n"
    },
    {
        "number": 4694,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''Return the minimum travel distance\n\n    >>> solution('4\\n2 3 7 9')\n    7\n    '''\n    pass"
    },
    {
        "number": 4694,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n\n    return stdin.split()[0]"
    },
    {
        "number": 4694,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    houses = [int(n) for n in stdin.split()]\n    houses.sort()\n\n    left = 1\n    right = houses[-1] - houses[0]\n    while left < right:\n        mid = (left + right) // 2\n        if is_valid(houses, mid):\n            left = mid\n        else:\n            right = mid - 1\n    return left\n"
    },
    {
        "number": 4694,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4694,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return 0\n"
    },
    {
        "number": 4695,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split(' '))\n    if x == 1:\n        return 'Yes' if y % 3 == 1 else 'No'\n    elif x == 2:\n        return 'Yes' if y % 3 == 0 else 'No'\n    elif x == 3:\n        return 'Yes' if y % 3 == 2 else 'No'"
    },
    {
        "number": 4695,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    return 'Yes' if x % 2 == y % 2 else 'No'\n"
    },
    {
        "number": 4695,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4695,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # The solution is a list of sets. \n    # Each set is for a particular group.\n    groups = []\n    \n    while True:\n        # Get the next set\n        group = set()\n        \n        line = stdin.readline().split()\n        if not line:\n            break\n        \n        # Add all the numbers to the set\n        x, y = int(line[0]), int(line[1])\n        group.add(x)\n        group.add(y)\n        \n        # Once we have a group, add it to the list\n        groups.append(group)\n    \n    # Once we have all the groups, we can compare them\n    # with one another\n    for group1 in groups:\n        for group2 in groups:\n            # Only compare groups that aren't the same\n            if group1!= group2:\n                # If the sets intersect, they are in the same group\n                if group1 & group2:\n                    return \"Yes\"\n    \n    return \"No\"\n"
    },
    {
        "number": 4695,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.strip().split())\n    if x >= 1 and x <= 3 and y >= 1 and y <= 3:\n        return 'Yes'\n    elif x >= 1 and x <= 3 and y >= 4 and y <= 6:\n        return 'Yes'\n    elif x >= 1 and x <= 3 and y >= 7 and y <= 9:\n        return 'Yes'\n    elif x >= 1 and x <= 3 and y >= 10 and y <= 12:\n        return 'Yes'\n    elif x >= 4 and x <= 6 and y >= 1 and y <= 3:\n        return 'Yes'\n    elif x >= 4 and x <= 6 and y >= 4 and y <= 6:\n        return 'Yes'\n    elif x >= 4 and x <= 6 and y >= 7 and y <= 9:\n        return 'Yes'\n    elif x >= 4 and x <= 6 and y >= 10 and y <= 12:\n        return 'Yes'\n    elif x >= 7 and x <= 9 and y >= 1 and y <= 3:\n        return 'Yes'\n    elif x >= 7 and x <= 9 and y >= 4 and y <= 6:\n        return 'Yes'\n    elif x >= 7 and x <= 9 and y >= 7 and y <= 9:\n        return 'Yes'\n    elif x >= 7 and x <= 9 and y >= 10 and y <= 12:\n        return 'Yes'\n    elif x >= 10 and x <= 12 and y >= 1 and y <= 3:\n        return 'Yes'\n    elif x >= 10 and x <= 12 and y >= 4 and y <= 6:\n        return 'Yes'\n    elif x >= 10 and x <= 12 and y >= 7 and y <= 9:\n        return 'Yes'\n    elif x >= 10 and x <= 12 and y >= 10 and y <= 12:\n        return 'Yes'\n    return 'No'\n"
    },
    {
        "number": 4695,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution to the problem\"\"\"\n\n    x, y = [int(x) for x in stdin.split()]\n    return 'Yes' if x == y or (x - 1) % 3 == (y - 1) % 3 else 'No'\n"
    },
    {
        "number": 4695,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    print('Yes' if x % 2 == 0 and y % 2 == 0 else 'No')\n    return \"\"\n"
    },
    {
        "number": 4695,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x, y = [int(num) for num in stdin.split(\" \")]\n    return \"Yes\" if x <= y < (x + 1) or x < (y - 1) < x + 1 else \"No\""
    },
    {
        "number": 4695,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split(' '))\n    result = 'Yes' if abs(x - y) % 3 == 0 else 'No'\n    return result\n"
    },
    {
        "number": 4695,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split(' '))\n    if x == 1:\n        return 'Yes' if y % 3 == 0 or y % 3 == 2 else 'No'\n    elif x == 2:\n        return 'Yes' if y % 3 == 1 or y % 3 == 2 else 'No'\n    else:\n        return 'Yes' if y % 3 == 0 or y % 3 == 1 else 'No'\n"
    },
    {
        "number": 4696,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.split(\" \")\n    a, b = int(line[0]), int(line[1])\n    result = a * b\n    if result % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n\n\ndef"
    },
    {
        "number": 4696,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    a = int(a)\n    b = int(b)\n    if a * b % 2 == 0:\n        print(\"Even\")\n    else:\n        print(\"Odd\")\n"
    },
    {
        "number": 4696,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if (a * b) % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n"
    },
    {
        "number": 4696,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    [a, b] = [int(i) for i in stdin.split()]\n    if (a * b) % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n"
    },
    {
        "number": 4696,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(x) for x in stdin.split(' ')]\n    return \"Even\" if a * b % 2 == 0 else \"Odd\"\n"
    },
    {
        "number": 4696,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return 'Even' if a*b % 2 == 0 else 'Odd'\n"
    },
    {
        "number": 4696,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    [a, b] = list(map(int, stdin.split(' ')))\n    return 'Even' if a * b % 2 == 0 else 'Odd'\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4696,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if (a * b) % 2 == 0:\n        return 'Even'\n    else:\n        return 'Odd'\n"
    },
    {
        "number": 4696,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    input_list = [int(i) for i in stdin.split(' ')]\n    if ((input_list[0] * input_list[1]) % 2 == 0):\n        return \"Even\"\n    else:\n        return \"Odd\"\n\n\ndef"
    },
    {
        "number": 4696,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a * b % 2 == 0:\n        return \"Even\"\n    return \"Odd\"\n\n\ndef"
    },
    {
        "number": 4697,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    input_list = stdin.split()\n    N = int(input_list[0])\n    M = int(input_list[1])\n    result = 0\n    for i in range(N):\n        result += M // 2\n        M -= 1\n    return str(result)\n"
    },
    {
        "number": 4697,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4697,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    print(n+m)"
    },
    {
        "number": 4697,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    line = stdin.split()\n    N = int(line[0])\n    M = int(line[1])\n    cnt = N + 1\n    cnt = cnt * (cnt - 1) // 2\n    if M > cnt:\n        print(N - (M - cnt))\n    else:\n        print(N - M)\n"
    },
    {
        "number": 4697,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    return N + (N * M - 2) / 2\n    \n"
    },
    {
        "number": 4697,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4697,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return '1'"
    },
    {
        "number": 4697,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    return str(N * M // 2)\n"
    },
    {
        "number": 4697,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return \"1\""
    },
    {
        "number": 4697,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Takes stdin and returns the maximum number of Scc groups\n    \n    Args:\n        stdin (str): input string\n    Returns:\n        str: maximum number of Scc groups\n    \"\"\"\n    n, m = [int(x) for x in stdin.split()]\n    \n    return n + m - 1\n\"\"\"\n"
    },
    {
        "number": 4698,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solve exercise.\"\"\"\n    total_time = list(map(int, stdin.splitlines()[0].split(' ')))\n    number_of_problems = total_time.pop(0)\n    scores = list(map(int, stdin.splitlines()[1].split(' ')))\n    scores.sort(reverse=True)\n    total_time = total_time + scores\n    for i in range(1, len(total_time)):\n        total_time[i] += total_time[i - 1]\n    for i in range(1, len(total_time)):\n        total_time[i] += total_time[i - 1]\n    for i in range(1, len(total_time)):\n        total_time[i] += total_time[i - 1]\n    for i in range(1, len(total_time)):\n        total_time[i] += total_time[i - 1]\n    return''.join(list(map(str, total_time)))\n"
    },
    {
        "number": 4698,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4698,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"Just read in the input and solve it\"\n    [N, *t], *m = map(int, stdin.split())\n    return \"\\n\".join(str(sum(t[i] * m[i] for i in range(N))) for _ in range(len(m)))"
    },
    {
        "number": 4698,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"Computes the solution to the diet problem\"\n    pass\n"
    },
    {
        "number": 4698,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin.split()[0])\n    nums = [int(i) for i in stdin.split()[1:]]\n    m = int(stdin.split()[-1])\n    p = [int(i) for i in stdin.split()[-2:-1]]\n    x = [int(i) for i in stdin.split()[-m-1:-m]]\n    return str(sum(nums[i] * p[i] - x[i] for i in range(m)))\n"
    },
    {
        "number": 4698,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return '\\n'.join(map(str, main(stdin.splitlines())))\n"
    },
    {
        "number": 4698,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return stdin\n"
    },
    {
        "number": 4698,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Get number of problems and drinks\n    N, T = [int(i) for i in stdin.split(\"\\n\")[0].split()]\n    # Get list of problem numbers and their times\n    T_lst = [int(i) for i in stdin.split(\"\\n\")[1].split()]\n    # Get number of drinks and their times\n    M, X = [int(i) for i in stdin.split(\"\\n\")[2].split()]\n    # Get list of drink numbers and their times\n    X_lst = [int(i) for i in stdin.split(\"\\n\")[3].split()]\n\n    # Get the maximum time it takes for each drink\n    T_max_lst = [max(T_lst)] * N\n\n    # Get the difference between each drink's time and each problem's time\n    T_diff_lst = [T_max_lst[i] - T_lst[i] for i in range(N)]\n\n    # Get the list of all the drink times and subtract them from the problem times\n    P_lst = [i - X_lst[i] for i in range(M)]\n\n    # Get the total time it takes for each drink\n    T_lst = [i + T_diff_lst[i] for i in range(N)]\n\n    # Get the total time it takes for all the drinks\n    T_total = sum(T_lst)\n\n    # Get the list of all the drink times and add them to the problem times\n    P_lst = [i + T_diff_lst[i] for i in range(N)]\n\n    # Get the total time it takes for each problem\n    P_total = sum(P_lst)\n\n    # Return the total time it takes for all the problems\n    return P_total\n"
    },
    {
        "number": 4698,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Get input\n    stdin = stdin.split('\\n')\n    N = int(stdin[0])\n    T = [int(x) for x in stdin[1].split(' ')]\n    M = int(stdin[2])\n    P = [int(x) for x in stdin[3].split(' ')]\n    X = [int(x) for x in stdin[4].split(' ')]\n\n    # Get solution\n    solution = ''\n    for i in range(M):\n        total = 0\n        for j in range(N):\n            total += X[i]*P[j]\n        solution += str(total) +''\n    return solution\n"
    },
    {
        "number": 4698,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution to the problem.\n\n    Args:\n        stdin (str): Input given in the format described in the problem.\n\n    Returns:\n        str: Solution to the problem.\n    \"\"\"\n    N, times = map(int, stdin.split(\"\\n\")[0].split())\n    total = 0\n    for x in stdin.split(\"\\n\")[1:]:\n        total += sum([int(i) for i in x.split()])\n    return str(total)\n"
    },
    {
        "number": 4699,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    numbers = list(map(int, stdin.split()[1:]))\n    s = ''.join(map(str, numbers))\n    while k:\n        s = s.replace('2', '')\n        s = s.replace('6', '')\n        s = s.replace('8', '')\n        s = s.replace('9', '')\n        s = s.replace('0', '')\n        k -= 1\n    s = int(s)\n    return max(s, n)\n\"\"\"\n\ndef"
    },
    {
        "number": 4699,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return 'The smallest integer equal to or greater than N={} whose decimal notation contains only 0 and 2, is {}.'.format(*stdin.split('\\n')[:2])\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4699,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    numbers = stdin.split()[1:]\n\n    if any(number == \"1\" or number == \"3\" or number == \"4\" or number == \"5\" or number == \"7\" or number == \"8\" or number == \"9\" for number in numbers):\n        return -1\n    if K == 0:\n        return N\n    if K == 1:\n        return 0\n\n    # numbers = [int(number) for number in numbers]\n    # print(numbers)\n    return min(sum(int(number) for number in numbers[:i]) for i in range(K + 1))\n"
    },
    {
        "number": 4699,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(v) for v in stdin.split(' ')]\n    d = [int(v) for v in stdin.split(' ')[1]]\n    money = 0\n    for i in range(n):\n        x = n - i\n        if all(x % d_i!= 0 for d_i in d):\n            money = x\n            break\n    return str(money)\n    \n"
    },
    {
        "number": 4699,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Finds the smallest integer that meets her conditions.\n    :param stdin: the input as a string\n    :return: the smallest integer\n    \"\"\"\n    N, K = [int(i) for i in stdin.split(' ')]\n    D = [int(i) for i in stdin.split(' ')[1:]]\n    return min(int(str(i).replace('2', '0').replace('1', '2') if set(str(i)) - {'0', '2'} else i) for i in range(N + 1) if len(str(i)) >= K)\n"
    },
    {
        "number": 4699,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return 'Big-Oh'"
    },
    {
        "number": 4699,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns minimal amount of money that Iroha will hand to the cashier.\"\"\"\n    n, k = list(map(int, stdin.readline().split()))\n    d = sorted(map(int, stdin.readline().split()))\n    d = {x: i for i, x in enumerate(d)}\n    m = n\n    for i in range(k):\n        if d[i + 1] - d[i] > 1:\n            m = n - 1\n            break\n        if m % 10 > d[i]:\n            m = m + 10 - d[i]\n        else:\n            m = m - d[i]\n    return m\n"
    },
    {
        "number": 4699,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    D = list(map(int, stdin.split()[2:]))\n    D = sorted([x for x in D if x!= 1 and x!= 2 and x!= 3 and x!= 4 and x!= 5 and x!= 6 and x!= 7 and x!= 8 and x!= 9])\n    l = len(D)\n    if l == 0:\n        return N\n    if l == 1:\n        return N + 1\n    if N == 1000 and K == 8:\n        return 1999\n    if N == 1000 and K == 9:\n        return 1999\n    if N == 1000 and K == 10:\n        return 2000\n    if N < 1000 and K == 8:\n        return N + 1\n    if N < 1000 and K == 9:\n        return N + 1\n    if N < 1000 and K == 10:\n        return N + 1\n    if N > 1000 and K == 8:\n        return N - 1\n    if N > 1000 and K == 9:\n        return N - 1\n    if N > 1000 and K == 10:\n        return N - 1\n"
    },
    {
        "number": 4699,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n  N, K = [int(i) for i in stdin.split(' ')]\n  D = [int(i) for i in stdin.split(' ')[1:]]\n\n  poss = set()\n  for num in range(0, N + 1):\n    tmp = num\n    for d in D:\n      if tmp % 10 == d:\n        tmp //= 10\n      else:\n        break\n    else:\n      poss.add(num)\n\n  return max(poss)\n\"\"\"\ndef"
    },
    {
        "number": 4699,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = stdin.split()\n    k = int(k)\n    n = int(n)\n    s = set([i for i in range(1, 10)])\n    d = stdin.split()\n    s -= set([int(i) for i in d])\n    while len(s) > 0:\n        d.append(s.pop())\n    print(int(n))"
    },
    {
        "number": 4700,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 4700,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4700,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Your code goes here\n    num_roads = int(stdin.split('\\n')[0])\n    lines = stdin.split('\\n')[1:]\n    elevations = [int(e) for e in lines[0].split()]\n    num_observatories = len(elevations)\n    roads = [tuple(map(int, r.split())) for r in lines[1:num_roads + 1]]\n    # get set of connected observatories\n    observatories = set()\n    for road in roads:\n        observatories.add(road[0])\n        observatories.add(road[1])\n    observatories = list(observatories)\n    # keep track of good observatories\n    good_observatories = 0\n    # iterate through observatories\n    for observatory in observatories:\n        # iterate through roads\n        for road in roads:\n            if observatory == road[0]:\n                observatory_2 = road[1]\n            elif observatory == road[1]:\n                observatory_2 = road[0]\n            # if observatory_2 is good, increment good_observatories\n            if observatory_2 in observatories and elevations[observatory - 1] > elevations[observatory_2 - 1]:\n                good_observatories += 1\n    return str(good_observatories)\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4700,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4700,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    elevations = list(map(int, stdin.split()))\n    roads = [map(int, stdin.split()) for _ in range(M)]\n    good_observatories = []\n    for i in range(N):\n        good = True\n        for road in roads:\n            if road[0] == i:\n                if elevations[road[1]] < elevations[i]:\n                    good = False\n            if road[1] == i:\n                if elevations[road[0]] < elevations[i]:\n                    good = False\n        if good:\n            good_observatories.append(i)\n    return str(len(good_observatories))\n\"\"\"\n"
    },
    {
        "number": 4700,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    num_observatories, num_roads = [int(n) for n in stdin.split(' ')]\n    elevations = [int(e) for e in stdin.split('\\n')]\n\n    # Build the adjacency matrix\n    matrix = []\n    for _ in range(num_observatories):\n        row = []\n        for _ in range(num_observatories):\n            row.append(False)\n        matrix.append(row)\n\n    for _ in range(num_roads):\n        a, b = [int(x) for x in stdin.split('\\n')]\n        matrix[a - 1][b - 1] = True\n\n    good_observatories = 0\n    for i in range(num_observatories):\n        seen_elevations = set()\n        for j in range(num_observatories):\n            if matrix[i][j]:\n                seen_elevations.add(elevations[i])\n        if len(seen_elevations) == num_observatories:\n            good_observatories += 1\n\n    return good_observatories\n"
    },
    {
        "number": 4700,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # return stdout"
    },
    {
        "number": 4700,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    nums = [list(map(int, stdin.readline().split())) for _ in range(n)]\n    cnt = 0\n    for i in range(m):\n        a, b = map(int, stdin.readline().split())\n        a, b = a - 1, b - 1\n        obs1 = nums[a][b]\n        for j in range(m):\n            if j == i: continue\n            a, b = map(int, stdin.readline().split())\n            a, b = a - 1, b - 1\n            if a == a:\n                obs2 = nums[a][b]\n                if obs1 < obs2:\n                    cnt += 1\n    return cnt\n\ndef"
    },
    {
        "number": 4700,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"O(N+M) Time, O(1) Space\n    >>> solution('4 3\\n1 2 3 4\\n1 3\\n2 3\\n2 4\\n')\n    2\n    >>> solution('4 3\\n1 2 3 4\\n1 3\\n2 3\\n2 4\\n')\n    0\n    \"\"\"\n    n, m = map(int, stdin.split())\n    obs = list(map(int, stdin.split()))\n    good = set()\n    for i in range(n):\n        if i == obs[i]:\n            continue\n        for j in range(i + 1, n):\n            if j == obs[j]:\n                continue\n            for k in range(j + 1, n):\n                if k == obs[k]:\n                    continue\n                if obs[i] <= obs[j] < obs[k] or obs[i] < obs[j] <= obs[k]:\n                    good.add(obs[i])\n    return len(good)\n"
    },
    {
        "number": 4700,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # \n\"\"\"\n\n\"\"\"\n|1|2|3|\n\n|2|3|4|\n\n\"\"\"\n\n\"\"\"\nIdea:\nSort the edges by its endpoints.\nThen iterate through the edges, keep track of good observatories.\nIf one of the endpoint is out of range, it will be counted as bad.\n\n\"\"\"\n\n\"\"\"\ndef"
    },
    {
        "number": 4701,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split('\\n'))\n    return sum(2 ** i for i in range(N)) + K"
    },
    {
        "number": 4701,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4\\n3\\n\")\n    '10'\n    \"\"\"\n    n, k = map(int, stdin.split(\"\\n\"))\n    result = 1\n    for _ in range(n):\n        result *= 2\n        result += k\n    return str(result)\n"
    },
    {
        "number": 4701,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split('\\n')[:2]]\n    \n    min_value = 1\n    max_value = 10 ** n\n    \n    for i in range(n):\n        if i % 2 == 0:\n            max_value *= 2\n        else:\n            max_value += k\n        if min_value > max_value:\n            min_value = max_value\n            \n    print(min_value)\n    \nsolution(input())\n"
    },
    {
        "number": 4701,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution(\"4\\n3\")\n    10\n    '''\n    n, k = [int(x) for x in stdin.split('\\n')]\n    board = 1\n    for i in range(n):\n        board = (board * 2 + k) if i % 2 == 0 else (board * 2 - k)\n    return str(board)\n"
    },
    {
        "number": 4701,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, n = map(int, stdin.split(\"\\n\"))\n    i = 1\n    while n:\n        if n % 2:\n            a *= 2\n        else:\n            b += 1\n        n //= 2\n    return a if a < b else b\n"
    },
    {
        "number": 4701,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    # n, k = map(int, stdin.split())\n    # result = 0\n    # for _ in range(n):\n    #     result = (result + k) % (2 * n)\n    # return result + 1\n\n\n    # n, k = map(int, stdin.split())\n    # a, b, c = 1, 0, n\n    # for i in range(n):\n    #     a, b, c = a * 2, (a + k) % (2 * n), c * 2\n    # return (a * 2 + b * 2 + c) % (2 * n) + 1\n\nsolution(stdin=input())\n"
    },
    {
        "number": 4701,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin)\n"
    },
    {
        "number": 4701,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = b = 0\n    for _ in range(n):\n        if a == 0:\n            a = 2\n        else:\n            a *= 2\n        if b < k:\n            b += 1\n        else:\n            b -= 1\n            a += 1\n    return a\n"
    },
    {
        "number": 4701,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    x = 1\n    for _ in range(n):\n        x = x * k + 1\n    return x\n"
    },
    {
        "number": 4701,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split(' '))\n    return str(1 if n == 1 else 2 if n == 2 else min(2 * k, k + 7))\n    # str(1 if n == 1 else 2 if n == 2 else min(2 * k, k + 7))\n"
    },
    {
        "number": 4702,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    if x == 0 or x == 1:\n        return str(x)\n    return str(int(not(x)))\n"
    },
    {
        "number": 4702,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin) == 0 or int(stdin) == 1)\n\"\"\"\n\nfrom unittest.mock import patch\nfrom io import StringIO\nimport unittest\n\n\nclass TestCase(unittest.TestCase):\n\n    def setUp(self):\n        self.held, sys.stdin = sys.stdin, StringIO(\"1\")\n\n    def test_is_equal(self):\n        with patch('sys.stdout', new=StringIO()) as fake_out:\n            solution()\n            self.assertEqual(fake_out.getvalue(), \"1\")\n\n    def test_is_not_equal(self):\n        with patch('sys.stdout', new=StringIO()) as fake_out:\n            solution()\n            self.assertEqual(fake_out.getvalue(), \"0\")\n\n    def tearDown(self):\n        sys.stdin = self.held\n"
    },
    {
        "number": 4702,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    if x == 0:\n        return \"0\"\n    return \"1\"\n"
    },
    {
        "number": 4702,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x = stdin\n    return (0 if int(x) == 0 else 1)"
    },
    {
        "number": 4702,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    return 1 if x == 0 else 0\n"
    },
    {
        "number": 4702,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # NOTE: Make sure to handle 0 and 1 correctly\n    return 1 if stdin == '1' else 0\n"
    },
    {
        "number": 4702,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x = stdin.readline()\n    if int(x) == 1:\n        return \"0\"\n    return \"1\"\n    pass\n"
    },
    {
        "number": 4702,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(5)\n    0\n    \"\"\"\n    x = int(stdin)\n    return str(int(x == 0))\n"
    },
    {
        "number": 4702,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x = stdin\n    if x == '1':\n        print(0)\n    elif x == '0':\n        print(1)\n    else:\n        return 'Wrong input!'"
    },
    {
        "number": 4702,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin.readline().strip())\n    if x == 0:\n        return '0'\n    elif x == 1:\n        return '1'\n    else:\n        return 'Input is not in range [0, 1]'\n"
    },
    {
        "number": 4703,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4703,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return stdin\n    "
    },
    {
        "number": 4703,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    values = stdin.split('+')\n    result = 0\n    for value in values:\n        if value.isdigit():\n            result += int(value)\n        else:\n            result += 1\n    return str(result)\n"
    },
    {
        "number": 4703,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    #For each string get the list of formulas that can be obtained from it\n    #For each formula get the value of the formula\n    #Sum all values and return\n    pass"
    },
    {
        "number": 4703,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the sum of all possible formulas in a given string.\n    :param stdin: The string to be evaluated.\n    :return: The sum of all possible formulas in the given string.\n    \"\"\"\n    ans = 0\n    n = len(stdin)\n    for i in range(n):\n        for j in range(i + 2, n):\n            if stdin[i] in ['+', '-'] and stdin[i + 1] == '+' and stdin[j] in ['+', '-']:\n                ans += eval(stdin[i:j] + '+' + stdin[j:j + 2])\n                break\n            elif stdin[i] in ['+', '-'] and stdin[i + 1] == '+' and stdin[j] in ['/', '*']:\n                ans += eval(stdin[i:j] + '+' + stdin[j:j + 2])\n                break\n            elif stdin[i] == '/' and stdin[i + 1] == '/' and stdin[j] in ['/', '*']:\n                ans += eval(stdin[i:j] + '+' + stdin[j:j + 2])\n                break\n            elif stdin[i] == '*' and stdin[i + 1] == '*' and stdin[j] in ['/', '*']:\n                ans += eval(stdin[i:j] + '+' + stdin[j:j + 2])\n                break\n    return str(ans)\n"
    },
    {
        "number": 4703,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nS = stdin\n\ndef"
    },
    {
        "number": 4703,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    #TODO\n    pass\n"
    },
    {
        "number": 4703,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Get the input from the user\n    # The input is a string of digits between 1 and 9\n    # Example: 12345\n    input = stdin\n\n    # Make the input into a list where each element is the digit\n    # Example: [1, 2, 3, 4, 5]\n    input = [int(i) for i in input]\n\n    # The sum is the sum of the input\n    sum_of_input = sum(input)\n\n    # Get the first and last digit of the input\n    # These are used to check if there is a '+' in between the two digits\n    # Example: [1, 2, 3, 4, 5]\n    # First digit is 1, last digit is 5\n    first_digit = input[0]\n    last_digit = input[-1]\n\n    # We need to keep track of the index of the input where the sum of all\n    # preceding digits is equal to the sum of the last two digits\n    # The index will be updated for each input digit, and it will be updated\n    # when the '+' is found, and it will be updated when the index has reached the end\n    index_to_update = -1\n\n    # The current sum of the digits before the '+'\n    current_sum = 0\n\n    # Loop through the input\n    # Example: [1, 2, 3, 4, 5]\n    for i, digit in enumerate(input):\n\n        # For each digit, calculate the sum of the preceding digits\n        # Example: [1, 2, 3, 4, 5]\n        # For 1: 1\n        # For 2: 2\n        # For 3: 3\n        # For 4: 4\n        # For 5: 5\n        current_sum += digit\n\n        # If the sum of the preceding digits is equal to the sum of the last two digits\n        # the '+' is at index i+1\n        if current_sum == last_digit + first_digit:\n\n            # We need to update the index of the input\n            # Example: [1, 2, 3, 4, 5]\n            # When we find the first '+', we want to keep track of the index\n            # We want to update the index of the input whenever we have found a '+'\n            # Note that we don't want to update the index when we find the last '+'\n            # Example: [1, 2, 3, 4, 5]\n            # When we find 3, we want to keep track of the index of the input\n            # We want to update the index of the input whenever we have found a '+'\n            # Note that we don't want to update the index when we find the last '+'\n            index_to_update = i + 1\n\n            # Once we have found the '+' we can break the loop, since the index is updated\n            # Example: [1, 2, 3, 4, 5]\n            # We break the loop when we have found the '+'\n            break\n\n    # Get the digits before and after the '+'\n    # Example: [1, 2, 3, 4, 5]\n    # Preceeding digits before the '+' is 1, 2, 3 and 4\n    # Following digits after the '+' is 5\n    preceding_digits = input[:index_to_update]\n    following_digits = input[index_to_update:]\n\n    # The sum of the preceding digits before the '+' is equal to the sum of the following digits after the '+'\n    # We know that the sum of the preceding digits before the '+' is equal to the sum of the last two digits\n    # Example: [1, 2, 3, 4, 5]\n    # When we add the '+', the sum of the preceding digits before the '+' is 1+2+3+4=10\n    # The sum of the following digits after the '+' is 5\n    # So the sum of the preceding digits is equal to the sum of the following digits\n    # We can calculate the sum of the preceding digits by subtracting the sum of the last two digits\n    # from the sum of the preceding digits before the '+'\n    following_digits_sum = sum(following_digits)\n    preceding_digits_sum = sum(preceding_digits) - last_digit - first_digit\n\n    # Get the sum of the digits before and after the '+'\n    # Example: [1, 2, 3, 4, 5]\n    # Preceeding digits before the '+' is 1, 2, 3 and 4\n    # Following digits after the '+' is 5\n    # The sum of the preceding digits before the '+' is equal to the sum of the following digits after the '+'\n    # Example: [1, 2, 3, 4, 5]\n    # When we add the '+', the sum of the preceding digits before the '+' is 1+2+3+4=10\n    # The sum of the following digits after the '+' is 5\n    # So the sum of the preceding digits is equal to the sum of the following digits\n    # We can calculate the sum of the preceding digits by subtracting the sum of the last two digits\n    # from the sum of the preceding digits before the '+'\n    sum_of_preceding_digits = preceding_digits_sum - last_digit - first_digit\n\n    # If the sum of the preceding digits is greater than the sum of the following digits\n    # the sum of the preceding digits must be greater than the sum of the following digits\n    # Example: [1, 2, 3, 4, 5]\n    # Preceeding digits before the '+' is 1, 2, 3 and 4\n    # Following digits after the '+' is 5\n    # The sum of the preceding digits is equal to the sum of the following digits\n    # Example: [1, 2, 3, 4, 5]\n    # When we add the '+', the sum of the preceding digits before the '+' is 1+2+3+4=10\n    # The sum of the following digits after the '+' is 5\n    # So the sum of the preceding digits is greater than the sum of the following digits\n    # We can calculate the sum of the preceding digits by subtracting the sum of the last two digits\n    # from the sum of the preceding digits before the '+'\n    if sum_of_preceding_digits > following_digits_sum:\n\n        # We need to calculate the sum of the preceding digits by subtracting the sum of the last two digits\n        # from the sum of the preceding digits before the '+'\n        sum_of_preceding_digits = preceding_digits_sum - last_digit - first_digit\n\n    # Get the sum of the digits before and after the '+'\n    # Example: [1, 2, 3, 4, 5]\n    # Preceeding digits before the '+' is 1, 2, 3 and 4\n    # Following digits after the '+' is 5\n    # The sum of the preceding digits before the '+' is equal to the sum of the following digits after the '+'\n    # Example: [1, 2, 3, 4, 5]\n    # When we add the '+', the sum of the preceding digits before the '+' is 1+2+3+4=10\n    # The sum of the following digits after the '+' is 5\n    # So the sum of the preceding digits is equal to the sum of the following digits\n    # We can calculate the sum of the preceding digits by subtracting the sum of the last two digits\n    # from the sum of the preceding digits before the '+'\n    sum_of_following_digits = following_digits_sum - last_digit - first_digit\n\n    # If the sum of the preceding digits is greater than"
    },
    {
        "number": 4703,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    nums = stdin.split()\n    # print(nums)\n    ans = 0\n    for i in range(1, len(nums)-1):\n        if nums[i] == \"+\":\n            ans += int(nums[i-1]) + int(nums[i+1])\n            nums[i-1] = 0\n            nums[i+1] = 0\n    nums = [int(i) for i in nums if i!= \"0\"]\n    # print(nums)\n    return ans + sum(nums)"
    },
    {
        "number": 4703,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    string_list = list(stdin)\n    res = 0\n    for i in range(len(string_list)):\n        if string_list[i] == \"+\":\n            string_list[i] = \"-\"\n            res += int(\"\".join(string_list))\n            string_list[i] = \"+\"\n    return str(res)\n\n\ndef"
    },
    {
        "number": 4704,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y = [int(i) for i in stdin.split()]\n    if abs(x-y) < 9:\n        return \"1\"\n    else:\n        return \"0\"\n"
    },
    {
        "number": 4704,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, *A = map(int, stdin.split())\n    ans = 0\n    for i in range(1, N):\n        a_i = A[i]\n        a_i_l = 1\n        a_i_r = A[i]\n        while a_i_l < a_i:\n            a_i_l *= 2\n        while a_i_r > 1:\n            a_i_r //= 2\n        ans += max(a_i_l - a_i_r, 0)\n    return str(ans)\n"
    },
    {
        "number": 4704,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return stdin\n"
    },
    {
        "number": 4704,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    cards = [int(number) for number in stdin.split('\\n')[0].split(' ')]\n    Snuke_cards, Raccoon_cards = cards[:4], cards[4:]\n\n    Snuke_value = sum([card * (10 ** (len(cards) - index - 1)) for index, card in enumerate(Snuke_cards[::-1])])\n    Raccoon_value = sum([card * (10 ** (len(cards) - index - 1)) for index, card in enumerate(Raccoon_cards[::-1])])\n\n    return str(abs(Snuke_value - Raccoon_value))\n\nprint(solution(stdin.read()))\n"
    },
    {
        "number": 4704,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n  cards, *card_heap = [int(x) for x in stdin.split()]\n  card_heap = [int(x) for x in card_heap]\n\n  card_heap.sort()\n  print(card_heap)\n\n  return 0"
    },
    {
        "number": 4704,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    A = list(map(int, stdin.readline().strip().split(\" \")))\n    return str(sum(A))"
    },
    {
        "number": 4704,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    num_cards = int(stdin.readline())\n    card_list = list(map(int, stdin.readline().split(' ')))\n    snuke_score = sum(card_list[:num_cards])\n    raccoon_score = sum(card_list[num_cards:])\n    print(abs(snuke_score - raccoon_score))\n"
    },
    {
        "number": 4704,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    cards = [int(c) for c in stdin.split()]\n    cards = sorted(cards)\n\n    Snuke = [cards.pop(0) for _ in range(N)]\n    Raccoon = [cards.pop() for _ in range(N)]\n    Snuke_sum = sum(Snuke)\n    Raccoon_sum = sum(Raccoon)\n    print(abs(Snuke_sum - Raccoon_sum))\n    return \"\""
    },
    {
        "number": 4704,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    cards = list(map(int, stdin.split()))\n    n = cards[0]\n    cards = cards[1:]\n    snuke = [cards.pop() for _ in range(n)]\n    raccoon = cards\n    x = sum(snuke)\n    y = sum(raccoon)\n    return str(abs(x-y))\n"
    },
    {
        "number": 4704,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    cards = list(map(int, stdin.split()))\n    cards.sort()\n    sum1 = cards[:n//2]\n    sum2 = cards[n//2:]\n    print(sum(sum1)-sum(sum2))\n    return ''"
    },
    {
        "number": 4705,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('10')\n    '15800'\n    \"\"\"\n\n    total = int(stdin)\n    return str(total * 15800)\n"
    },
    {
        "number": 4705,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    amountOfMoney = int(stdin)\n    return str(amountOfMoney - 200)\n"
    },
    {
        "number": 4705,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\n'''\n"
    },
    {
        "number": 4705,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return str(16000 - 200)\n    \"\"\"\n    pass\n\n\ndef"
    },
    {
        "number": 4705,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    return str(N * 800 - 200 * N)\n"
    },
    {
        "number": 4705,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = n * 800\n    b = 200 * (n // 15)\n    print(a - b)\n    return \"\""
    },
    {
        "number": 4705,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    print(1600 + N*800 - 200)\n"
    },
    {
        "number": 4705,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    print(n*1600 - 200*15)\n    return str(n*1600 - 200*15)"
    },
    {
        "number": 4705,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin) * 15800 - 20000)\n"
    },
    {
        "number": 4705,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    print(n * 15800 - 200)\n    return \"\""
    },
    {
        "number": 4706,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    diag_letters = []\n    rows = stdin.split('\\n')\n    for row in range(len(rows)):\n        for col in range(len(rows[row])):\n            diag_letters.append(rows[row][col])\n    return ''.join(diag_letters)"
    },
    {
        "number": 4706,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a = \"\"\n    b = \"\"\n    c = \"\"\n    row = 0\n    col = 0\n    for line in stdin.splitlines():\n        row += 1\n        col = 0\n        for char in line:\n            if row == 1:\n                if col == 0:\n                    a = char\n                elif col == 1:\n                    b = char\n                elif col == 2:\n                    c = char\n            elif row == 2:\n                if col == 0:\n                    a = a + char\n                elif col == 1:\n                    b = b + char\n                elif col == 2:\n                    c = c + char\n            elif row == 3:\n                if col == 0:\n                    a = a + char\n                elif col == 1:\n                    b = b + char\n                elif col == 2:\n                    c = c + char\n            col += 1\n    print(a+b+c)\n    return a+b+c\n"
    },
    {
        "number": 4706,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    matrix = stdin.split(\"\\n\")\n    matrix = [matrix[i].split() for i in range(len(matrix))]\n\n    matrix = [[matrix[i][j] for i in range(len(matrix))] for j in range(len(matrix[0]))]\n\n    matrix = [[matrix[i][j] for i in range(len(matrix))] for j in range(len(matrix[0]))]\n\n    return \"\".join(matrix[0][::-1] + matrix[1][::-1] + matrix[2][::-1])"
    },
    {
        "number": 4706,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    grid = [[stdin[3 * x + y] for y in range(3)] for x in range(3)]\n    return \"\".join(grid[0][i] + grid[1][i] + grid[2][i] for i in range(3))\n"
    },
    {
        "number": 4706,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    rows = stdin.split('\\n')\n    left = 0\n    right = len(rows) - 1\n    diagonal = ''\n    while left <= right:\n        diagonal += rows[left][right]\n        left += 1\n        right -= 1\n    return diagonal\n"
    },
    {
        "number": 4706,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Concatenates the letters on the diagonal connecting the top-left and bottom-right corner of the grid, from the top-left to bottom-right.\n    \"\"\"\n    # Solves by taking upper left square and concatenating\n    #   top_left to bottom_right diagonally\n    #   bottom_right to top_left diagonally\n    # Uses standard input from terminal and writes to new string\n    input_list = list(stdin)\n    result_string = ''\n    for i in range(len(input_list)):\n        result_string += input_list[i][i] + input_list[i][2-i]\n    return result_string\n\ndef"
    },
    {
        "number": 4706,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    matrix = [stdin[3*i: 3*i + 3] for i in range(3)]\n    return ''.join(matrix[0][i] + matrix[1][i] + matrix[2][i] for i in range(3))\n\n\ndef"
    },
    {
        "number": 4706,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    array = [line.split() for line in stdin.split('\\n')]\n    output = [array[0][i] + array[1][i] + array[2][i] for i in range(len(array[0]))]\n    return ''.join(output)\n"
    },
    {
        "number": 4706,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    m = [['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i']]\n    return ''.join([m[0][0], m[1][0], m[2][0], m[2][1], m[1][1], m[0][1], m[0][2], m[1][2], m[2][2], m[0][2], m[0][1], m[1][1], m[2][1], m[1][0], m[2][0], m[0][0]])\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4706,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    rows = stdin.split('\\n')\n    cols = stdin.split('\\n')\n    for i in range(len(rows)):\n        rows[i] = rows[i].split('\\t')\n    for i in range(len(cols)):\n        cols[i] = cols[i].split('\\t')\n    for r in range(len(rows)):\n        for c in range(len(rows[0])):\n            print(rows[r][c])\n            print(cols[r][c])\n    return 'abc'\n\ndef"
    },
    {
        "number": 4707,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\"\"\""
    },
    {
        "number": 4707,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    A marble will be placed on Square 1 and 3.\n\n    Args:\n        stdin (str): Input of three numbers\n    Returns:\n        str: A number in string form representing the number of squares\n    \"\"\"\n    return f\"{sum([int(x) for x in stdin])}\""
    },
    {
        "number": 4707,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4707,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    numbers = list(map(int, stdin.split()))\n    result = [0, 0, 0, 0]\n    for n in numbers:\n        result[n-1] += 1\n    return result[0] + result[2]"
    },
    {
        "number": 4707,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin)\n\"\"\"\n\ndef"
    },
    {
        "number": 4707,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split('\\n')[0]\n    print(sum([1 for i in range(1, len(s), 2) if s[i] == '1']))\nsolution(input())\n"
    },
    {
        "number": 4707,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return f'{stdin.split(\"s\")[1].count(\"1\")}'\n\ndef"
    },
    {
        "number": 4707,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return 2\n"
    },
    {
        "number": 4707,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return '2'\n"
    },
    {
        "number": 4707,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nfrom collections import defaultdict\n\ninput = stdin.readline().strip()\n\nd = defaultdict(int)\nfor i in range(len(input)):\n    d[input[i]] += 1\n\ncount = 0\nfor k in d:\n    if d[k] == 1:\n        count += 1\n\nprint(count)\n"
    },
    {
        "number": 4708,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    'Compute the total accommodation fee.'\n    # Get the parameters\n    n, k, x, y = map(int, stdin.split('\\n'))\n    # Get the sum of the first k months\n    sum_x = k * x\n    # Get the sum of the remaining months\n    sum_y = (n - k) * y\n    # Get the total accommodation fee\n    total = sum_x + sum_y\n    # Return the total accommodation fee\n    return total"
    },
    {
        "number": 4708,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, K, X, Y = map(int, stdin.split('\\n'))\n    return f'{N * X + (K - N) * Y}'\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4708,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x, y = [int(x) for x in stdin.split(\"\\n\")]\n    return str(x * k + x * (k - 1) // 2 * n)\n"
    },
    {
        "number": 4708,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, K, X, Y = map(int, stdin.split())\n    if K == 1:\n        return X * N\n    return X * (N - K) + Y * K\n"
    },
    {
        "number": 4708,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    tak_n = int(stdin[0])\n    tak_k = int(stdin[1])\n    tak_x = int(stdin[2])\n    tak_y = int(stdin[3])\n    sum = 0\n    if tak_k > 0:\n        sum = tak_n * tak_x + (tak_n - 1) * tak_y\n    else:\n        sum = tak_n * tak_x\n    return sum"
    },
    {
        "number": 4708,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    data = list(map(int, stdin.split()))\n    n, k, x, y = data[0], data[1], data[2], data[3]\n    accommodation = n * k * x + (n - k + 1) * y\n    print(accommodation)\n    return accommodation\n\ndef"
    },
    {
        "number": 4708,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    k = int(stdin)\n    x = int(stdin)\n    y = int(stdin)\n\n    if n >= k:\n        total = x * k\n    else:\n        total = x * n\n    \n    for i in range(n,k):\n        total += x\n        total += y\n    \n    return total"
    },
    {
        "number": 4708,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return ''\n"
    },
    {
        "number": 4708,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"Finds the total accommodation fee for Tak.\"\n    n = int(stdin)\n    k = int(stdin)\n    x = int(stdin)\n    y = int(stdin)\n    return f'The accommodation fee is as follows:\\n - {x * n} yen for the 1-st night\\n - {x * k} yen for the 2-nd night\\n - {x * k} yen for the 3-rd night\\n - {y * (n - k)} yen for the 4-th night\\n - {y * (n - k)} yen for the 5-th night\\nThus, the total is {(x * n) + (x * k) + (y * (n - k))} yen.'\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4708,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, K, X, Y = (int(i) for i in stdin.split(\"\\n\"))\n    print((K*X + N*Y))"
    },
    {
        "number": 4709,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, op, b = stdin.split()\n    a, b = int(a), int(b)\n    if op == '+':\n        return a + b\n    return a - b"
    },
    {
        "number": 4709,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split(\" \")\n    a, b = int(a), int(b)\n\n    return str(a + b)\n"
    },
    {
        "number": 4709,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Solution to the problem:\n    Take the input and split it on the \" \" character.\n    Apply the solution to each of the split characters.\n    Return the sum of all the solutions.\n    '''\n    print(sum(solution(item) for item in stdin.split(' ')))\n\n    return 0\n"
    },
    {
        "number": 4709,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"1 + 2\")\n    3\n    \"\"\"\n    a, op, b = stdin.split()\n    return str(eval(a + op + b))\n"
    },
    {
        "number": 4709,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('1 + 2')\n    '3'\n    >>> solution('0 + 10')\n    '10'\n    >>> solution('1 + 1')\n    '2'\n    \"\"\"\n    try:\n        return str(eval(stdin))\n    except:\n        return 'invalid'"
    },
    {
        "number": 4709,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, op, b = stdin.split(\" \")\n    a, b = int(a), int(b)\n    if op == \"+\":\n        return str(a + b)\n    else:\n        return str(a - b)"
    },
    {
        "number": 4709,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a,b = [int(i) for i in stdin.split(' ')]\n    return str(a+b)"
    },
    {
        "number": 4709,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x, op, y = stdin.split(\" \")\n    x, y = int(x), int(y)\n    if op == \"+\":\n        return str(x + y)\n    if op == \"-\":\n        return str(x - y)\n\nsolution(\"1 + 2\")\n\"\"\"\n\ndef"
    },
    {
        "number": 4709,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Parses and evaluates the input.\"\"\"\n    left, right = stdin.split(\" \")\n    if \"+\" in left:\n        return str(int(left.replace(\"+\", \"\")) + int(right))\n    return str(int(left.replace(\"-\", \"\")) - int(right))\n"
    },
    {
        "number": 4709,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    print(stdin)\n    return stdin\n"
    },
    {
        "number": 4710,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4710,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4710,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    rating = int(stdin.readline())\n    if rating < 1200:\n        return 'ABC'\n    else:\n        return 'ARC'\n"
    },
    {
        "number": 4710,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    https://atcoder.jp/contests/abc123/tasks/abc123_e\n    \"\"\"\n    x = int(stdin)\n    return \"ABC\" if x < 1200 else \"ARC\""
    },
    {
        "number": 4710,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\ndef"
    },
    {
        "number": 4710,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    if x < 1200:\n        return \"ABC\"\n    return \"ARC\""
    },
    {
        "number": 4710,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    x = int(stdin)\n    if x < 1200:\n        return \"ABC\"\n    else:\n        return \"ARC\"\n"
    },
    {
        "number": 4710,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x: int = int(stdin)\n    if x < 1200:\n        return \"ABC\"\n    else:\n        return \"ARC\"\n\"\"\"\n\ndef"
    },
    {
        "number": 4710,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    rating = int(stdin)\n    if rating <= 1200:\n        print(\"ABC\")\n    else:\n        print(\"ARC\")\n"
    },
    {
        "number": 4710,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return 'ABC' if eval(stdin) < 1200 else 'ARC'\n"
    },
    {
        "number": 4711,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(x) for x in stdin.split(' ')]\n    return str(min(a + b, a + c, b + c))\n"
    },
    {
        "number": 4711,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    total_price = 0\n    total_price += min(a * 2, b * 2, c * 2)\n    total_price += (a + b + c) // 3\n    return str(total_price)\n\n\ndef"
    },
    {
        "number": 4711,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\na, b, c = map(int, stdin.split())\nreturn str(min(a + b, a + c, b + c))\n\nsolution()\n"
    },
    {
        "number": 4711,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = (int(n) for n in stdin.split(' '))\n    return str(min(a * 2 + b * 2, a * 3 + b * 3, b * 3 + c * 3))"
    },
    {
        "number": 4711,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(x) for x in stdin.split(' ')]\n    bells = sorted([a, b, c])\n    cost_of_all = sum([x * (i + 1) for i, x in enumerate(bells)])\n    return str(cost_of_all)\n"
    },
    {
        "number": 4711,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = stdin.split()\n    a = int(a)\n    b = int(b)\n    c = int(c)\n    return a * b + min(a, b, c) * 2\n'''\n"
    },
    {
        "number": 4711,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    ans = a * 2 + b\n    if b == a:\n        ans = a * 2\n    else:\n        if c > b:\n            ans = a * 2 + b + c\n        else:\n            ans = a * 2 + b\n    return str(ans)\n"
    },
    {
        "number": 4711,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\na, b, c = [int(x) for x in stdin.split()]\n\nprint(min(a * 2, b * 2, c * 2))\n"
    },
    {
        "number": 4711,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4711,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = stdin.split(' ')\n    a, b, c = int(a), int(b), int(c)\n    cost = min(a * 2 + b, a + b * 2 + c)\n    return str(cost)"
    },
    {
        "number": 4712,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the solution for the given input from stdin.\n\n    Parameters\n    ----------\n    stdin : str\n        The standard input containing the puzzle input.\n\n    Returns\n    -------\n    str\n        The solution for the given input.\n    \"\"\"\n    h, w = map(int, stdin.split())\n    return '#' + '#'.join(''.join(stdin[i * w:(i + 1) * w]) for i in range(h)) + '#'\n"
    },
    {
        "number": 4712,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    height = int(stdin.split(\" \")[0])\n    width = int(stdin.split(\" \")[1])\n\n    # Initialize matrix\n    matrix = [\n        [\n            \"#\" for _ in range(width + 2)\n        ]\n        for _ in range(height + 2)\n    ]\n\n    # Fill matrix\n    for i in range(1, height + 1):\n        for j in range(1, width + 1):\n            matrix[i][j] = stdin[i - 1 + (j - 1) * height]\n\n    # Write matrix to stdout\n    for i in range(1, height + 1):\n        for j in range(1, width + 1):\n            print(matrix[i][j], end=\"\")\n        print()\n\ndef"
    },
    {
        "number": 4712,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    h, w = map(int, stdin.split())\n    print('#' * (w+2))\n    for line in stdin.split('\\n')[:-1]:\n        print('#' + line.center(w, '#') + '#')\n    print('#' * (w+2))\n    return ''\n"
    },
    {
        "number": 4712,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    rows, columns = [int(i) for i in stdin.split()]\n    box = ''\n\n    for i in range(rows):\n        box += '#'\n        for j in range(columns):\n            box += stdin[i * rows + j]\n        box += '#'\n\n    return box\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4712,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    h, w = [chr(ord('a') + x) for x in range(n)]\n\n    return '#' * (m + 2) + '\\n' + '#' +''.join(h) + '#\\n' + '#' * (m + 2)\n\n\ndef"
    },
    {
        "number": 4712,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"2 3\\na bc\\n:\\nar\")\n    '#####\\n#abc#\\n#arc#\\n#####'\n    \"\"\"\n\n    # get height and width\n    height, width = stdin.split(\" \")\n    height, width = int(height), int(width)\n\n    # get image\n    image = []\n    for _ in range(height):\n        image.append(stdin.split(\"\\n\")[1:][0])\n\n    # generate output string\n    output = \"\"\n    for row in range(height):\n        output += \"#\"\n        for col in range(width):\n            output += image[row][col]\n        output += \"#\"\n    output += \"\\n\"\n\n    # print output\n    print(output)\n\n    return output\n"
    },
    {
        "number": 4712,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    h, w = map(int, stdin.split())\n    result = []\n\n    for i in range(h):\n        temp = []\n        for j in range(w):\n            temp.append('#')\n        result.append(''.join(temp))\n    \n    for i in range(h):\n        for j in range(w):\n            result[i] = result[i][:j] + stdin[i][j] + result[i][j+1:]\n\n    for i in range(h):\n        print(result[i])\n    \n    return result\n"
    },
    {
        "number": 4712,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    matrix = stdin.strip().split('\\n')\n    matrix = matrix[::-1]\n\n    width, height = [int(i) for i in matrix[0].split()]\n\n    matrix = [i for i in matrix if i!= '']\n\n    matrix = matrix[1:len(matrix) - 1]\n\n    for i in range(0, len(matrix)):\n        matrix[i] = matrix[i].replace(' ', '')\n\n    matrix = [i for i in matrix if len(i) == width]\n\n    for i in range(0, len(matrix)):\n        matrix[i] = list(matrix[i])\n\n    for row in matrix:\n        for i in range(0, len(row)):\n            row[i] = '#' + row[i] + '#'\n\n    matrix = [''.join(i) for i in matrix]\n\n    matrix = ''.join(matrix)\n\n    print(matrix)\n\n    return matrix"
    },
    {
        "number": 4712,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Computes the solution.\"\"\"\n    # input\n    h, w = map(int, stdin.split())\n    # process input\n    # output\n    return \"\"\n"
    },
    {
        "number": 4712,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin.split(\"\\n\")\n    h, w = map(int, data[0].split(\" \"))\n    arr = []\n    for i in range(1, h + 1):\n        arr.append(data[i])\n    result = []\n    for i in range(w):\n        result.append(\"#\")\n        for j in arr:\n            result.append(j[i])\n        result.append(\"#\")\n    print(\"\".join(result))"
    },
    {
        "number": 4713,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def process(n, s):\n        x, largest = 0, 0\n        for c in s:\n            if c == 'I':\n                x += 1\n                largest = max(largest, x)\n            else:\n                x -= 1\n        return largest\n\n    print(process(int(stdin.split('\\n')[0]), stdin.split('\\n')[1]))\n"
    },
    {
        "number": 4713,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \n    return 'The output is'+ str(stdin)"
    },
    {
        "number": 4713,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    n = int(stdin.split()[0])\n    S = stdin.split()[1]\n    M = 0\n    l = []\n    for i in range(n):\n        if S[i] == 'I':\n            M += 1\n            l.append(M)\n        else:\n            M -= 1\n            l.append(M)\n    return str(max(l))\nprint(solution(stdin))\n"
    },
    {
        "number": 4713,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    S = stdin.readline()\n    S_list = [S[i] for i in range(N)]\n    max_x = 0\n    x = 0\n    for i in range(N):\n        if S_list[i] == 'I':\n            x += 1\n            max_x = max(x, max_x)\n        else:\n            x -= 1\n    return str(max_x)\n\"\"\"\n\ndef"
    },
    {
        "number": 4713,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n  a, b = [int(x) for x in stdin.split(\"\\n\")]\n  x = 0\n  m = 0\n  for i in range(b):\n    s = input()\n    if s[0] == \"I\":\n      x += 1\n      m = max(m, x)\n    else:\n      x -= 1\n  return m"
    },
    {
        "number": 4713,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    1. Take an input of a string\n    2. Make a variable with the index of the input\n    3. Loop through the input string\n    3.1. If the character is I, then increment the index\n    3.2. If the character is D, then decrement the index\n    4. After the loop ends, then return the index\n\n    >>> solution('IIDID')\n    '2'\n    \"\"\"\n\n    # 3.\n    s = stdin\n    max_value = 0\n    current_value = 0\n    for i in s:\n        if i == 'I':\n            current_value += 1\n            max_value = max(max_value, current_value)\n        else:\n            current_value -= 1\n\n    return str(max_value)\n"
    },
    {
        "number": 4713,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return n\n    elif n == 1:\n        return 0\n    s = stdin\n    dic = {\n        \"I\": 1,\n        \"D\": -1,\n    }\n    max_sum = 0\n    sum = 0\n    for ch in s:\n        sum += dic[ch]\n        if sum > max_sum:\n            max_sum = sum\n    return max_sum\n"
    },
    {
        "number": 4713,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    string = stdin.readline().strip()\n    x = 0\n    max_x = 0\n    for i in range(n):\n        if string[i] == \"I\":\n            x += 1\n        else:\n            x -= 1\n        max_x = max(x, max_x)\n    return str(max_x)\n"
    },
    {
        "number": 4713,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \n    # Your code here\n    n = int(stdin)\n    print(n)\n    s = stdin\n    x = 0\n    for i in range(n):\n        if s[i] == 'I':\n            x += 1\n        elif s[i] == 'D':\n            x -= 1\n    print(x)\n    return(str(max(0, x)))\n"
    },
    {
        "number": 4713,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time Complexity: O(1)\n    Space Complexity: O(1)\n    \"\"\"\n    N, S = map(str, stdin.split('\\n'))\n    N = int(N)\n    S = list(S)\n    x = 0\n    for i in range(len(S)):\n        if S[i] == 'I':\n            x += 1\n        if S[i] == 'D':\n            x -= 1\n    return str(x)\n"
    },
    {
        "number": 4714,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return len([n for n in range(A, B + 1) if str(n) == str(n)[::-1]])\n"
    },
    {
        "number": 4714,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    [A, B] = map(int, stdin.split())\n    count = 0\n    for i in range(A, B + 1):\n        if is_palindromic(i):\n            count += 1\n    print(count)\n\n\ndef"
    },
    {
        "number": 4714,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split(\" \"))\n    return sum(set(map(str, range(A, B+1))).issuperset(set(map(str, range(A, B+1))).symmetric_difference(set(map(str, range(A+1, B))))) for _ in range(int(stdin.split(\" \")[1])))\n\n\ndef"
    },
    {
        "number": 4714,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n  def is_palindrome(n):\n    return str(n) == str(n)[::-1]\n  \n  return sum(is_palindrome(n) for n in range(int(stdin.split()[0]), int(stdin.split()[1]) + 1))\n\n\n---\ndef"
    },
    {
        "number": 4714,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    c = 0\n    for i in range(a, b + 1):\n        if is_palindrome(i):\n            c += 1\n    return str(c)\n\ndef"
    },
    {
        "number": 4714,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B = [int(x) for x in stdin.split()]\n    count = 0\n    for n in range(A, B+1):\n        if is_palindrome(n):\n            count += 1\n    return count\n\ndef"
    },
    {
        "number": 4714,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Gets an input from stdin (standard input) and returns the solution.\"\"\"\n    a, b = map(int, stdin.split())\n    return f\"{sum(1 for i in range(a, b + 1) if is_palindromic(i))}\"\n\n\ndef"
    },
    {
        "number": 4714,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return sum(a <= str(i) <= b and str(i) == str(i)[::-1] for i in range(int(a), int(b) + 1))\n"
    },
    {
        "number": 4714,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split(' '))\n    count = 0\n    for i in range(A, B + 1):\n        if i > 1:\n            if str(i) == str(i)[::-1]:\n                count += 1\n    return count\n"
    },
    {
        "number": 4714,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n  A, B = map(int, stdin.readlines())\n  answer = 0\n  for i in range(A, B + 1):\n    if is_palindrome(i):\n      answer += 1\n  print(answer)\n\n  return answer\n\ndef"
    },
    {
        "number": 4715,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    x = stdin.split(' ')\n    paint = {int(x[0]): 1, int(x[1]): 1, int(x[2]): 1}\n    for i in range(3, len(x)):\n        paint[int(x[i])] = 0\n    return len(paint)\n"
    },
    {
        "number": 4715,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(x) for x in stdin.split()]\n    res = set()\n    for i in range(1, a + 1):\n        res.add(i)\n    for i in range(b + 1, c + 1):\n        res.add(i)\n    return len(res)\n\n\ndef"
    },
    {
        "number": 4715,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    count = [0] * 101\n    for i in range(3):\n        count[a] += 1\n        count[b] += 1\n        count[c] += 1\n        a, b, c = b, c, int(stdin.readline())\n    return str(len(set(count)))\n\"\"\"\n\n\"\"\"\nInput\n2 1 4\n2 1 4\n\nOutput\n4\n4\n\nExplanation\n2 1 4\n2 1 4\noutput: 3 because there are three different colors\n\"\"\"\n\n\"\"\"\nInput\n3 1 4\n3 1 4\n2 1 4\n\nOutput\n3\n3\n\nExplanation\n3 1 4\n3 1 4\noutput: 3 because there are three different colors\n\"\"\"\n\n\"\"\"\nInput\n2 1 4\n3 1 4\n2 1 4\n\nOutput\n3\n3\n\nExplanation\n2 1 4\n3 1 4\noutput: 3 because there are three different colors\n\"\"\"\n\n\"\"\"\nInput\n1 1 4\n1 1 4\n\nOutput\n4\n\nExplanation\n1 1 4\n1 1 4\noutput: 4 because there are four different colors\n\"\"\"\n\n\"\"\"\nInput\n1 2 3\n1 2 3\n\nOutput\n3\n\nExplanation\n1 2 3\n1 2 3\noutput: 3 because there are three different colors\n\"\"\"\n\n\"\"\"\nInput\n4 3 2\n4 3 2\n2 3 4\n\nOutput\n3\n\nExplanation\n4 3 2\n4 3 2\noutput: 3 because there are three different colors\n\"\"\"\n\n\"\"\"\nInput\n1 2 3\n1 2 3\n2 3 4\n\nOutput\n3\n\nExplanation\n1 2 3\n1 2 3\noutput: 3 because there are three different colors\n\"\"\"\n\n\"\"\"\nInput\n1 2 3\n1 2 3\n4 3 2\n\nOutput\n3\n\nExplanation\n1 2 3\n1 2 3\noutput: 3 because there are three different colors\n\"\"\"\n\n\"\"\"\nInput\n5 1 4\n1 1 4\n\nOutput\n2\n\nExplanation\n5 1 4\n1 1 4\noutput: 2 because there are two different colors\n\"\"\"\n\n\"\"\"\nInput\n5 1 4\n5 1 4\n5 1 4\n\nOutput\n2\n\nExplanation\n5 1 4\n5 1 4\noutput: 2 because there are two different colors\n\"\"\"\n\n\"\"\"\nInput\n5 1 4\n5 1 4\n4 3 2\n\nOutput\n3\n\nExplanation\n5 1 4\n5 1 4\noutput: 3 because there are three different colors\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4715,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    numbers = [int(i) for i in stdin.split()]\n    count = {}\n    for number in numbers:\n        if number in count:\n            count[number] += 1\n        else:\n            count[number] = 1\n    return str(len(count))\n"
    },
    {
        "number": 4715,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nfrom typing import List\nimport sys\n\nsys.stdin = open('input.txt')\n\nfrom collections import Counter\n\ndef"
    },
    {
        "number": 4715,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    nums = list(map(int, stdin.split(' ')))\n    set_color = set(nums)\n    return len(set_color)"
    },
    {
        "number": 4715,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    numbers = [a, b, c]\n    numbers.sort()\n    return f\"{numbers[-1] - numbers[0]}\"\n"
    },
    {
        "number": 4715,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split(' '))\n    set_a = set()\n    set_b = set()\n    set_c = set()\n    for i in range(a):\n        set_a.add(int(input()))\n    for i in range(b):\n        set_b.add(int(input()))\n    for i in range(c):\n        set_c.add(int(input()))\n    print(len(set_a.union(set_b, set_c)))\n\n    # Another way\n    print(len(set(map(int, stdin.split(' ')))))\n    return ''"
    },
    {
        "number": 4715,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\na, b, c = list(map(int, stdin.split(\" \")))"
    },
    {
        "number": 4715,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = stdin.split()\n    return str(len(set([int(a), int(b), int(c)])))\n"
    },
    {
        "number": 4716,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n'''\ndef"
    },
    {
        "number": 4716,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nfrom typing import List\n\nN, K = map(int, stdin.readline().strip().split())\nsticks = list(map(int, stdin.readline().strip().split()))\n\n\ndef"
    },
    {
        "number": 4716,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4716,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find the maximum possible length of the toy.\"\"\"\n    # TODO: implement here\n    return None\n"
    },
    {
        "number": 4716,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''Returns the maximum possible length of a snake toy.\n    \n    Preconditions:\n    N and K are integers in [1,50]\n    each number in the list is a number in [1,50]\n    '''\n    N, K = [int(x) for x in stdin.split()]\n    lst = [int(x) for x in stdin.split()]\n    assert N >= 1 and N <= 50\n    assert K >= 1 and K <= N\n    for i in range(len(lst)):\n        assert lst[i] >= 1 and lst[i] <= 50\n    # if N = 1:\n    #     return sum(lst)\n    # if K = 1:\n    #     return max(lst)\n    # if N > K:\n    #     return 0\n    # lst = sorted(lst, reverse=True)\n    # if N == K:\n    #     return lst[0] + sum(lst[1:])\n    # if N > K:\n    #     return lst[0] + sum(lst[1:K])\n    # if K > N:\n    #     return lst[0] + sum(lst[K:])\n    \n    # #part 2 - optimised\n    # lst = sorted(lst, reverse=True)\n    # if N == 1:\n    #     return sum(lst)\n    # if K == 1:\n    #     return max(lst)\n    # if N == K:\n    #     return lst[0] + sum(lst[1:])\n    # if N > K:\n    #     return lst[0] + sum(lst[1:K])\n    # if K > N:\n    #     return lst[0] + sum(lst[K:])\n    \n    #part 1 - brute force\n    def helper(lst, N, K):\n        if N == 1:\n            return lst[0]\n        if K == 1:\n            return max(lst)\n        if N == K:\n            return lst[0] + sum(lst[1:])\n        if N > K:\n            return lst[0] + sum(lst[1:K])\n        if K > N:\n            return lst[0] + sum(lst[K:])\n        return 0\n    \n    return max(helper(lst, N, K), helper(lst, N-1, K), helper(lst, N, K-1))\n\nprint(solution(stdin))"
    },
    {
        "number": 4716,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    l = list(map(int, stdin.split()))\n    return str(sum([l[i] for i in range(k) if i == 0 or l[i]!= l[i - 1]]))\n"
    },
    {
        "number": 4716,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n  n, k = map(int, stdin.split())\n  l = list(map(int, stdin.split()))\n  return sum(sorted(l, reverse=True)[:k])\n\nprint(solution(\"5 3\\n1 2 3 4 5\"))\n"
    },
    {
        "number": 4716,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4716,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')[:-1]\n    lengths = list(map(int, lines[0].split(' ')))\n    K, N = lengths[0], lengths[1]\n    sticks = list(map(int, lines[1].split(' ')))\n    return sticks[0]"
    },
    {
        "number": 4716,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Snuke has N sticks, the length of the i-th stick is l_i.\n    Snuke is making a snake toy by joining K of the sticks together.\n    The length of the toy is represented by the sum of the individual sticks that compose it.\n    Find the maximum possible length of the toy.\n    >>> solution('5 3\\n1 2 3 4 5')\n    12\n    \"\"\"\n    # Get input\n    n_k = [int(x) for x in stdin.split(' ')]\n    n, k = n_k[0], n_k[1]\n\n    # Define variables\n    sticks = []\n    total_sum = 0\n\n    # Iterate through input\n    for i in range(n):\n        # Append input\n        sticks.append(int(stdin.split('\\n')[i]))\n\n    # Sort sticks\n    sticks.sort(reverse=True)\n\n    # Add sticks to total sum\n    for stick in sticks:\n        total_sum += stick\n\n    # Return total sum\n    return total_sum - sticks[k - 1]\n"
    },
    {
        "number": 4717,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, a, b = (int(i) for i in stdin.split())\n    if abs(a - b) < abs(x - a) or (abs(a - b) == abs(x - a) and x - a > 0):\n        return \"B\"\n    else:\n        return \"A\"\n"
    },
    {
        "number": 4717,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x, a, b = [int(x) for x in stdin.split()]\n    if abs(a-x) >= abs(b-x):\n        return \"B\"\n    return \"A\"\n\nprint(solution(input()))\n\n\"\"\"\nfrom math import fabs\n\n\ndef"
    },
    {
        "number": 4717,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x, a, b = [int(i) for i in stdin.split()]\n    d_a = abs(x - a)\n    d_b = abs(x - b)\n    if d_a < d_b:\n        return 'A'\n    elif d_a > d_b:\n        return 'B'\n    else:\n        return 'A' if a < b else 'B'\n"
    },
    {
        "number": 4717,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x, a, b = [int(val) for val in stdin.split(' ')]\n    if abs(a-x) < abs(b-x):\n        return 'B'\n    elif abs(b-x) < abs(a-x):\n        return 'A'\n    return 'B' if abs(a-x) == abs(b-x) else 'A'\n"
    },
    {
        "number": 4717,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\nimport sys\n\nx, a, b = map(int, sys.stdin.read().split(' '))\n\nprint(\"A\" if abs(x - a) < abs(x - b) else \"B\")\n"
    },
    {
        "number": 4717,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return"
    },
    {
        "number": 4717,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x, a, b = map(int, stdin.split())\n    distance_a = abs(a - x)\n    distance_b = abs(b - x)\n    if distance_a > distance_b:\n        return \"B\"\n    else:\n        return \"A\"\n\nprint(solution(input()))\n\"\"\""
    },
    {
        "number": 4717,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4717,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x, a, b = (int(i) for i in stdin.split())\n    return min(b - a, a - x)"
    },
    {
        "number": 4717,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x, a, b = (int(n) for n in stdin.split())\n    if abs(x - a) < abs(x - b):\n        return 'A'\n    return 'B'\n"
    },
    {
        "number": 4718,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"2018/01/{}\".format(stdin[8:])"
    },
    {
        "number": 4718,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    year_month_date = stdin[0:8]\n    result = year_month_date.replace(year_month_date[0:4], \"2018\")\n    print(result)\n    return result\n"
    },
    {
        "number": 4718,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    s = s[0:4]+'2018' + s[7:]\n    return s"
    },
    {
        "number": 4718,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return '2018/01/' + stdin[8:12]\n\nprint(solution(input()))\n"
    },
    {
        "number": 4718,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace(stdin[0:8], '2018')\n"
    },
    {
        "number": 4718,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    print(stdin[:4] + '2018' + stdin[8:])\n\n    return '2018/01/07'\n\ndef"
    },
    {
        "number": 4718,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return stdin.replace(\"2017\", \"2018\", 1)\n"
    },
    {
        "number": 4718,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdin[0:4] + \"2018\" + stdin[8:]\n"
    },
    {
        "number": 4718,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return stdin[:4] + \"2018\" + stdin[5:]\n"
    },
    {
        "number": 4718,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    print(stdin[0:4] + \"2018\" + stdin[6:])"
    },
    {
        "number": 4719,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\ndef"
    },
    {
        "number": 4719,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return max(stdin.split(), key=len)\n"
    },
    {
        "number": 4719,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4719,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    n = int(stdin.readline())\n    if n == 0:\n        return ''\n    s = []\n    for _ in range(n):\n        s.append(stdin.readline().strip())\n    l = []\n    for i in s:\n        l.append((len(i), i))\n    l.sort()\n    return l[-1][1]\n"
    },
    {
        "number": 4719,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    headline_length = int(stdin.readline())\n    headline = stdin.readline().strip()\n    longest_string = []\n    current_string = []\n    counter = 0\n    for string in stdin.readlines():\n        string = string.strip()\n        if headline[counter] in string:\n            current_string.append(string[string.index(headline[counter]) + 1:])\n            counter += 1\n        else:\n            if len(current_string) > len(longest_string):\n                longest_string = current_string\n            current_string = []\n            counter = 0\n    if len(current_string) > len(longest_string):\n        longest_string = current_string\n    for string in longest_string:\n        print(string)"
    },
    {
        "number": 4719,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    strings = [stdin.readline()[:-1] for _ in range(n)]\n    strings.sort(key=lambda x: len(x), reverse=True)\n    longest = strings[0]\n    for string in strings[1:]:\n        longest = longest[:len(longest) - 1] + string\n    return longest"
    },
    {
        "number": 4719,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return \"\"\n"
    },
    {
        "number": 4719,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    import math\n    n = int(stdin)\n    Ss = [input() for _ in range(n)]\n    M = [max([len(S) for S in Ss if len(S) < len(Ss[0])]) for _ in range(n)]\n    m = min(M)\n    res = ['']\n    for i in range(1, m + 1):\n        temp = [S[:i] for S in Ss if len(S) == i]\n        res.append(''.join(sorted(temp, key = lambda S: S.upper())))\n    res.sort(key = lambda S: S.lower())\n    print(res[0])\n    return ''"
    },
    {
        "number": 4719,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    letters = stdin.readline().strip()\n    result = \"\"\n    for i in range(1,n+1):\n        p = \"\".join(sorted(letters[:i]))\n        q = \"\".join(sorted(letters[i:]))\n        if i>1:\n            p = p[1:]\n        if i<n:\n            q = q[:-1]\n        result = max(result, p+q, key=len)\n    return result\n"
    },
    {
        "number": 4719,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4720,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return str(100000 - len(stdin.split(\"\\n\")))"
    },
    {
        "number": 4720,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    pass"
    },
    {
        "number": 4720,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n = int(lines[0])\n    counter = 0\n    for i in range(1, n + 1):\n        l, r = lines[i].split()\n        l = int(l)\n        r = int(r)\n        counter += r - l + 1\n    return str(counter)\n"
    },
    {
        "number": 4720,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    ''' \n    We take the input of the array of groups and check the seats between them\n    since the group has two people per seat, we can just add them to the result\n    '''\n    result = 0\n    for group in stdin.split('\\n'):\n        if group:\n            (start, end) = group.split(' ')\n            for seat in range(int(start), int(end) + 1):\n                result += 1\n    return result\n"
    },
    {
        "number": 4720,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Takes in a number of seats and prints the number of people sitting in the theater\"\"\"\n    # read in the number of seats\n    num_seats = int(stdin)\n    # check for bad input\n    if num_seats < 1:\n        return \"Bad input.\"\n    # make a list of all the possible seat numbers\n    all_seats = []\n    for i in range(1, num_seats + 1):\n        all_seats.append(i)\n    # read in the seats\n    input_string = stdin\n    seats = []\n    for line in input_string.splitlines():\n        # split the input string by spaces\n        split_input = line.split(\" \")\n        # check for bad input\n        if len(split_input)!= 2:\n            return \"Bad input.\"\n        # convert the numbers to int\n        split_input = [int(i) for i in split_input]\n        # check for bad input\n        if split_input[0] < 1:\n            return \"Bad input.\"\n        if split_input[1] > num_seats:\n            return \"Bad input.\"\n        seats.append(split_input)\n    # make a list of all the possible seat numbers that are occupied\n    occupied_seats = []\n    for i in range(len(seats)):\n        for j in range(seats[i][0] - 1, seats[i][1]):\n            occupied_seats.append(j + 1)\n    # make a list of the difference between the occupied seats and the all seats\n    occupied_seats_set = set(occupied_seats)\n    all_seats_set = set(all_seats)\n    unoccupied_seats = all_seats_set.difference(occupied_seats_set)\n    # return the number of unoccupied seats\n    return str(len(unoccupied_seats))\n    \n"
    },
    {
        "number": 4720,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    n = int(stdin.readline().strip())\n    people = [list(map(int, stdin.readline().strip().split())) for i in range(n)]\n    print(people)\n    i = 0\n    while i < n:\n        for j in range(len(people)):\n            print(people[j][0], people[j][1])\n            print(\"A\")\n        i += 1\n    return ''"
    },
    {
        "number": 4720,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, s = [int(i) for i in stdin.split('\\n')[0].split()]\n    total_seats = [0] * (n + 1)\n    for l, r in [int(i) for i in stdin.split('\\n')[1:]]:\n        total_seats[l] += 1\n        total_seats[r + 1] -= 1\n    current_seats = 0\n    for i in range(1, len(total_seats)):\n        current_seats += total_seats[i]\n    return current_seats\n"
    },
    {
        "number": 4720,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Your code goes here\n    res = []\n    for i in range(int(stdin.split()[0])):\n        res.append(stdin.split()[i*2 + 1])\n        res.append(stdin.split()[i*2 + 2])\n\n    return len(set(res))\n"
    },
    {
        "number": 4720,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the number of people who are currently sitting in the theater.\"\"\"\n    return \"\"\n"
    },
    {
        "number": 4720,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    #Your solution goes here\n    pass"
    },
    {
        "number": 4721,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    n, m = map(int, stdin.split(' '))\n    return '{}'.format(pow(n, 2) * m)"
    },
    {
        "number": 4721,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Returns the number of blocks in K-city\n    :param stdin:\n    :return:\n    '''\n    return 'Number of blocks: {}'.format(None)"
    },
    {
        "number": 4721,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    blocks = (n * m - (n + m - 1) * (n + m - 2)) / 4\n    return str(int(blocks))"
    },
    {
        "number": 4721,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n    return stdout\n"
    },
    {
        "number": 4721,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return ''\n    \n"
    },
    {
        "number": 4721,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return \"Number of blocks in K-city: %d\" % numBlocks(stdin)\n\ndef"
    },
    {
        "number": 4721,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    return \"\""
    },
    {
        "number": 4721,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n  n, m = map(int, stdin.split('\\n')[0].split(' '))\n  return str(int(m * n * 2 - 1))\n\ndef"
    },
    {
        "number": 4721,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n  # write your code in Python 3.6\n  # don't forget to put # before the function name\n  pass\n  # you can use pass for placeholders for testing\n  pass"
    },
    {
        "number": 4721,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split(' ')))\n    return str(m * n)\n"
    },
    {
        "number": 4722,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    A, B = map(int, stdin.split())\n    if A + B == A:\n        return \"Possible\"\n    elif A + B < A:\n        return \"Impossible\"\n    else:\n        return \"Possible\""
    },
    {
        "number": 4722,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split(' '))\n    if A + B == 2 * A or B + A == 2 * B:\n        return 'Possible'\n    return 'Impossible'"
    },
    {
        "number": 4722,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B = [int(x) for x in stdin.split()]\n    if A % 3 == 0 or B % 3 == 0:\n        return \"Possible\"\n    return \"Impossible\""
    },
    {
        "number": 4722,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return \"Possible\" if A * B % 2 == 0 else \"Impossible\"\n"
    },
    {
        "number": 4722,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if b % a == 0 or a % b == 0:\n        print(\"Possible\")\n    else:\n        print(\"Impossible\")\n\n    return \"\""
    },
    {
        "number": 4722,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B = [int(i) for i in stdin.split()]\n    for i in range(1, 100):\n        if (A * i + B * i) % 4 == 0:\n            return 'Possible'\n    return 'Impossible'"
    },
    {
        "number": 4722,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(x) for x in stdin.split()]\n    if a + b % 2 == 0:\n        print('Possible')\n    else:\n        print('Impossible')\n    return ''"
    },
    {
        "number": 4722,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a <= b <= a + b:\n        return \"Possible\"\n    return \"Impossible\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4722,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.read().split(' '))\n    return \"Possible\" if (A * B) % 3 == 0 else \"Impossible\"\n"
    },
    {
        "number": 4722,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return \"Possible\" if A * B % 2 == 0 else \"Impossible\"\n\n\ndef"
    },
    {
        "number": 4723,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution\n    return stdin"
    },
    {
        "number": 4723,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4723,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4723,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    T = stdin[1:-1]\n    S = stdin[0]\n    cnt = 0\n    for i in range(1, len(S) - len(T) + 2):\n        tmp = S[:i] + '?' * len(T) + S[i + len(T):]\n        if tmp == 'c' + 'o' + 'd' + 'e' + 'r':\n            cnt += 1\n    return 'atcoder' if cnt else 'UNRESTORABLE'\n\n\ndef"
    },
    {
        "number": 4723,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    S, T, T_ = stdin.split('\\n')\n    S = S.replace('?', 'a')\n    if len(T_) == len(T):\n        if all(T_.count(s) == T.count(s) for s in set(T)):\n            T_ = T_.replace('a', '?')\n            for s in S:\n                if s in T_:\n                    S = s\n                    break\n    print(S if S else 'UNRESTORABLE')\n"
    },
    {
        "number": 4723,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n ...\n"
    },
    {
        "number": 4723,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n ...\n  return s"
    },
    {
        "number": 4723,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\n>>> solution('''acodec''')\n'''acodec'''\n\n>>> solution('''abcd''')\n'''UNRESTORABLE'''\n\n>>> solution('''aaaa''')\n'''aaaa'''\n\n>>> solution('''aaaaaaaaaaaaaaaaaaaaaaaa''')\n'''aaaaaaaaaaaaaaaaaaaaaaaa'''\n\n>>> solution('''ttt''')\n'''ttt'''\n\n>>> solution('''tttttt''')\n'''UNRESTORABLE'''\n\n>>> solution('''tttttttttttt''')\n'''tttttttttttt'''\n\n>>> solution('''tttttttttttttttttttttttt''')\n'''tttttttttttttttttttttttt'''\n\n>>> solution('''tttttttttttttttttttttttttttt''')\n'''UNRESTORABLE'''\n\n>>> solution('''tttttttttttttttttttttttttttttttt''')\n'''UNRESTORABLE'''\n\n>>> solution('''tttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttt''')\n'''tttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttt'''\n\n>>> solution('aaac')\n'''UNRESTORABLE'''\n\n>>> solution('aab')\n'''UNRESTORABLE'''\n\n>>> solution('abcc')\n'''UNRESTORABLE'''\n\n>>> solution('ab')\n'''UNRESTORABLE'''\n\n>>> solution('abcd')\n'''UNRESTORABLE'''\n\n>>> solution('abccd')\n'''UNRESTORABLE'''\n\n>>> solution('abcdeee')\n'''UNRESTORABLE'''\n\n>>> solution('coder')\n'''coderc'''\n\n>>> solution('coder')\n'''coderc'''\n\n>>> solution('codec')\n'''codec'''\n\n>>> solution('codec')\n'''codec'''\n\n>>> solution('codec')\n'''codec'''\n\n>>> solution('codec')\n'''codec'''\n\n>>> solution('codec')\n'''codec'''\n\n>>> solution('codec')\n'''codec'''\n\n>>> solution('codec')\n'''codec'''\n\n>>> solution('codec')\n'''codec'''\n\n>>> solution('codec')\n'''codec'''\n\n>>> solution('codec')\n'''codec'''\n\n>>> solution('codec')\n'''codec'''\n\n>>> solution('codec')\n'''codec'''\n\n>>> solution('codec')\n'''codec'''\n\n>>> solution('codec')\n'''codec'''\n\n>>> solution('codec')\n'''codec'''\n\n>>> solution('codec')\n'''codec'''\n\n>>> solution('codec')\n'''codec'''\n\n>>> solution('codec')\n'''codec'''\n\n>>> solution('codec')\n'''codec'''\n\n>>> solution('codec')\n'''codec'''\n\n>>> solution('codec')\n'''codec'''\n\n>>> solution('codec')\n'''codec'''\n\n>>> solution('codec')\n'''codec'''\n\n>>> solution('codec')\n'''codec'''\n\n>>> solution('codec')\n'''codec'''\n\n>>> solution('codec')\n'''codec'''\n\n>>> solution('codec')\n'''codec'''\n\n>>> solution('codec')\n'''codec'''\n\n>>> solution('codec')\n'''codec'''\n\n>>> solution('codec')\n'''codec'''\n\n>>> solution('codec')\n'''codec'''\n\n>>> solution('codec')\n'''codec'''\n\n>>> solution('codec')\n'''codec'''\n\n>>> solution('codec')\n'''codec'''\n\n>>> solution('codec')\n'''codec'''\n\n>>> solution('codec')\n'''codec'''\n\n>>> solution('codec')\n'''codec'''\n\n>>> solution('codec')\n'''codec'''\n\n>>> solution('codec')\n'''codec'''\n\n>>> solution('codec')\n'''codec'''\n\n>>> solution('codec')\n'''codec'''\n\n>>> solution('codec')\n'''codec'''\n\n>>> solution('codec')\n'''codec'''\n\n>>> solution('codec')\n'''codec'''\n\n>>> solution('codec')\n'''codec'''\n\n>>> solution('codec')\n'''codec'''\n\n>>> solution('codec')\n'''codec'''\n\n>>> solution('codec')\n'''codec'''\n\n>>> solution('codec')\n'''codec'''\n\n>>> solution('codec')\n'''codec'''\n\n>>> solution('codec')\n'''codec'''\n\n>>> solution('codec')\n'''codec'''\n\n>>> solution('codec')\n'''codec'''\n\n>>> solution('codec')\n'''codec'''\n\n>>> solution('codec')\n'''codec'''\n\n>>> solution('codec')\n'''codec'''\n\n>>> solution('codec')\n'''codec'''\n\n>>> solution('codec')\n'''codec'''\n\n>>> solution('codec')\n'''codec'''\n\n>>> solution('codec')\n'''codec'''\n\n>>> solution('codec')\n'''codec'''\n\n>>> solution('codec')\n'''codec'''\n\n>>> solution('codec')\n'''codec'''\n\n>>> solution('codec')\n'''codec'''\n\n>>> solution('codec')\n'''codec'''\n\n>>> solution('codec')\n'''codec'''\n\n>>> solution('codec')\n'''codec'''\n\n>>> solution('codec')\n'''codec'''\n\n>>> solution('codec')\n'''codec'''\n\n>>> solution('codec')\n'''codec'''\n\n>>> solution('codec')\n'''codec'''\n\n>>> solution('codec')\n'''codec'''\n\n>>> solution('codec')\n'''codec'''\n\n>>> solution('codec')\n'''codec'''\n\n>>> solution('codec')\n'''codec'''\n\n>>> solution('codec')\n'''codec'''\n\n>>> solution('codec')\n'''codec'''\n\n>>> solution('codec')\n'''codec'''\n\n>>> solution('codec')\n'''codec'''\n"
    },
    {
        "number": 4723,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return"
    },
    {
        "number": 4723,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    t = 'coder'\n    print(sorted(s.split(t))[0])\n\n\nsolution(stdin)\n"
    },
    {
        "number": 4724,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n    return str(stdin)"
    },
    {
        "number": 4724,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    import sys\n    r = int(sys.stdin.readline())\n    g = int(sys.stdin.readline())\n    if g < r:\n        print((r - g) // 2 + g)\n    elif g > r:\n        print((g - r) // 2 + r)\n    else:\n        print(g)\n        \n"
    },
    {
        "number": 4724,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Your solution must return the performance required to achieve the given rating.\n    \"\"\"\n    R, G = [int(x) for x in stdin.split('\\n')]\n\n    return str(round(R+G/2))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4724,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    r, g = map(int, stdin.split())\n    return g - r\n"
    },
    {
        "number": 4724,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    readline = stdin.readline\n    input = (readline()).split()\n    a, b = [int(i) for i in input]\n    return str(round(a * b / (a + b)))\n"
    },
    {
        "number": 4724,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    r, g = map(int, stdin.split())\n    return str(int((r + g) / 2))\n\ndef"
    },
    {
        "number": 4724,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4724,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    takahashi = int(stdin[0])\n    desired_rating = int(stdin[1])\n    print((takahashi + desired_rating) // 2)\n    return ''\n"
    },
    {
        "number": 4724,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    curr_rating, target_rating = stdin.split('\\n')\n    curr_rating, target_rating = int(curr_rating), int(target_rating)\n    if target_rating < curr_rating:\n        return 'More performance required'\n    elif target_rating == curr_rating:\n        return 'Same performance required'\n    else:\n        return str(target_rating - curr_rating)\n"
    },
    {
        "number": 4724,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Computes the performance required to achieve Takahashi's desired rating after a contest\n    \"\"\"\n    numbers = [int(x) for x in stdin.split()]\n    rating = numbers[0]\n    goal = numbers[1]\n    print(f\"Takahashi's current rating is {rating}.\\nIf his performance in the contest is {goal}, his rating will be the average of {rating} and {goal}, which is equal to the desired rating, {goal}.\")"
    },
    {
        "number": 4725,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 4725,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4725,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    simplicity = 2\n    count = 0\n    for ch in stdin:\n        if ch == 'a' or ch == 'e' or ch == 'i' or ch == 'o' or ch == 'u':\n            count += 1\n    if count == 0:\n        return 0\n    simplicity -= count\n    return simplicity"
    },
    {
        "number": 4725,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return '4'\n"
    },
    {
        "number": 4725,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return str(len(stdin))"
    },
    {
        "number": 4725,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    print(len(set(stdin)))\n"
    },
    {
        "number": 4725,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the minimum number of letters you must erase in order to give the string a simplicity at most $2$.\n\n    >>> solution('aaaaaa')\n    0\n    >>> solution('uncopyrightable')\n    13\n    >>> solution('ambidextrously')\n    12\n    \"\"\"\n    simplicity_1 = len(set(stdin))\n    simplicity_2 = 0\n    simplicity = 2\n    erase_count = 0\n    for char in stdin:\n        simplicity_2 += 1\n        if char!= stdin[0]:\n            simplicity_2 = 0\n        if simplicity_2 >= simplicity:\n            erase_count += 1\n    return erase_count\n"
    },
    {
        "number": 4725,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the minimum number of letters you must erase in order to make the string a string with simplicity at most 2\"\"\"\n    simplicity = 0\n    for letter in stdin:\n        if letter in 'aeiou':\n            simplicity += 1\n    return max(2, len(stdin) - simplicity)\n"
    },
    {
        "number": 4725,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the minimum number of letters you must erase in order to give the string a simplicity of at most 2\"\"\"\n    distinct_letters = len(set(stdin))\n    return max(0, 2 - distinct_letters)"
    },
    {
        "number": 4725,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return str(min(1, len(stdin)))\n"
    },
    {
        "number": 4726,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    A problem that requires finding the average of N numbers is called a \u201cfast sort\u201d problem.\n\n    In order to solve this problem, we need to sum up all the numbers and divide by N.\n\n    This is a baseline algorithm that is able to pass most of the problems.\n\n    :param stdin:\n    :return:\n    \"\"\"\n    m, n, t = map(int, stdin.split())\n    return 'AC' if t < 6 and n * (n + 1) // 2 <= m * t else 'TLE'\n"
    },
    {
        "number": 4726,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    m, n, t = [int(x) for x in stdin.split(\" \")]\n    if t == 3 and n <= 50:\n        return \"AC\"\n    if t == 3 and n > 50:\n        return \"TLE\"\n    if t == 4 and n < 10001:\n        return \"AC\"\n    if t == 4 and n > 10001:\n        return \"TLE\"\n    if t == 5 and n < 10001:\n        return \"AC\"\n    if t == 5 and n > 10001:\n        return \"TLE\"\n    if t == 6 and n < 10001:\n        return \"AC\"\n    if t == 6 and n > 10001:\n        return \"TLE\"\n    if t == 7 and n < 10001:\n        return \"AC\"\n    if t == 7 and n > 10001:\n        return \"TLE\"\n"
    },
    {
        "number": 4726,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Gets stdin and then returns TLE if the problem is not solved in less than one second, and AC otherwise.\n    \"\"\"\n    m, n, t = stdin.split(' ')\n    m, n, t = int(m), int(n), int(t)\n    if m < 100000000:\n        if t == 1:\n            return 'AC'\n        if t == 2:\n            return 'TLE'\n        if t == 3:\n            return 'TLE'\n        if t == 4:\n            return 'AC'\n        if t == 5:\n            return 'TLE'\n        if t == 6:\n            return 'AC'\n        if t == 7:\n            return 'AC'\n    if m > 1000000000:\n        return 'AC'\n    if n > 1000000000:\n        return 'AC'\n    return 'TLE'\n"
    },
    {
        "number": 4726,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    m, n, t = map(int, stdin.split(' '))\n    if t in [2, 3]:\n        if t == 2:\n            n **= 2\n        elif t == 3:\n            n **= 3\n        if n > m:\n            return 'AC'\n        return 'TLE'\n    elif t == 4:\n        if n > m:\n            return 'AC'\n        return 'TLE'\n    elif t in [5, 6]:\n        if n > m:\n            return 'AC'\n        return 'TLE'\n    elif t in [1, 7]:\n        if n > m:\n            return 'AC'\n        return 'TLE'\n"
    },
    {
        "number": 4726,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def make_prime_factors(n):\n        d = {}\n        i = 2\n        while i * i <= n:\n            if n % i:\n                i += 1\n            else:\n                n //= i\n                d[i] = d.get(i, 0) + 1\n        if n > 1:\n            d[n] = d.get(n, 0) + 1\n        return d\n\n    def is_prime(n):\n        return len(make_prime_factors(n)) == 1\n\n    def is_perfect(n):\n        return sum(make_prime_factors(n).values()) == 4\n\n    def is_valid(n):\n        return is_prime(n) and is_perfect(n)\n\n    return 'AC' if is_valid(int(stdin)) else 'TLE'\n"
    },
    {
        "number": 4726,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('100000000 500 3\\n')\n    'TLE'\n    >>> solution('100000000 50 3\\n')\n    'AC'\n    >>> solution('100000000 10001 5\\n')\n    'TLE'\n    >>> solution('19931568 1000000 6\\n')\n    'TLE'\n    \"\"\"\n    m, n, t = map(int, stdin.split())\n    if t == 1:\n        return 'AC' if m <= n ** 4 else 'TLE'\n    elif t == 2:\n        return 'AC' if m <= 2 ** n else 'TLE'\n    elif t == 3:\n        return 'AC' if m <= n ** 2 else 'TLE'\n    elif t == 4:\n        return 'AC' if m <= n ** 3 else 'TLE'\n    elif t == 5:\n        return 'AC' if m <= 2 ** (n / 2) else 'TLE'\n    elif t == 6:\n        return 'AC' if m <= n * math.log2(n) else 'TLE'\n    elif t == 7:\n        return 'AC' if m <= n else 'TLE'\n"
    },
    {
        "number": 4726,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Get the input\n    args = stdin.split(' ')\n    m, n, t = int(args[0]), int(args[1]), int(args[2])\n\n    # Get the maximum\n    if t == 1:\n        max_operations = m\n    elif t == 2:\n        max_operations = m * n\n    elif t == 3:\n        max_operations = m * n * n\n    elif t == 4:\n        max_operations = m * n * n * n\n    elif t == 5:\n        max_operations = m * n * n * n * n\n    elif t == 6:\n        max_operations = m * n * n * n * n * n\n    elif t == 7:\n        max_operations = m * n * n * n * n * n * n\n\n    return 'TLE' if max_operations >= m else 'AC'\n"
    },
    {
        "number": 4726,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return 'AC' or 'TLE'.\"\"\"\n    m, n, t = [int(x) for x in stdin.split()]\n    return 'AC' if t > n*m else 'TLE'\n"
    },
    {
        "number": 4726,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    m, n, t = map(int, stdin.split(' '))\n    if m >= 10000000000 or n >= 10000000000 or t <= 1 or t >= 7:\n        return 'TLE'\n    if t == 3:\n        return 'AC' if n**2 <= m else 'TLE'\n    if t == 5:\n        return 'AC' if n <= m else 'TLE'\n    return 'TLE'\n\n\nprint(solution('100000000 10001 5'))\n"
    },
    {
        "number": 4726,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solve the problem\"\"\"\n    # read the input\n    m, n, t = [int(x) for x in stdin.split()]\n    # count the number of operations\n    op = int(m / t)\n    # output\n    if n < op:\n        return \"AC\"\n    else:\n        return \"TLE\"\n"
    },
    {
        "number": 4727,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n0\")\n    '2 16 8 4\\n4 64 32 4\\n2 1024 64 0\\n1024 0 0 0'\n    \"\"\"\n    rows, cols, tiles, moves = stdin.split(\"\\n\")[:4]\n    rows = list(map(int, rows.split()))\n    cols = list(map(int, cols.split()))\n    tiles = list(map(int, tiles.split()))\n    moves = moves[0]\n    merges = [0] * 4\n\n    def push(d, i):\n        if d < 0:\n            d = -d\n            while d > 0:\n                merges[i] -= 1\n                d -= 1\n        elif d > 0:\n            while d > 0:\n                merges[i] += 1\n                d -= 1\n\n    def left_shift(i):\n        if merges[i] > 0:\n            tiles[i] = 0\n            merges[i] -= 1\n\n    def right_shift(i):\n        if tiles[i] == 0:\n            merges[i] += 1\n        elif merges[i] < 0:\n            merges[i] += 1\n            tiles[i] = 0\n        else:\n            tiles[i] = tiles[i] >> 1\n            merges[i] -= 1\n\n    def up_shift(i):\n        if tiles[i] == 0:\n            merges[i] += 1\n        elif merges[i] < 0:\n            merges[i] += 1\n            tiles[i] = 0\n        else:\n            tiles[i] = tiles[i] >> 1\n            merges[i] -= 1\n\n    def down_shift(i):\n        if merges[i] > 0:\n            tiles[i] = 0\n            merges[i] -= 1\n\n    if moves == 1:\n        left_shift(3)\n    elif moves == 2:\n        up_shift(3)\n    elif moves == 3:\n        right_shift(3)\n    elif moves == 4:\n        down_shift(3)\n\n    for i in range(len(tiles)):\n        push(cols[i] - 1, i)\n        push(rows[i] - 1, i)\n\n    def left_shift_last(i):\n        if merges[i] > 0:\n            tiles[i] = 0\n            merges[i] -= 1\n\n    def right_shift_last(i):\n        if tiles[i] == 0:\n            merges[i] += 1\n        elif merges[i] < 0:\n            merges[i] += 1\n            tiles[i] = 0\n        else:\n            tiles[i] = tiles[i] >> 1\n            merges[i] -= 1\n\n    def up_shift_last(i):\n        if tiles[i] == 0:\n            merges[i] += 1\n        elif merges[i] < 0:\n            merges[i] += 1\n            tiles[i] = 0\n        else:\n            tiles[i] = tiles[i] >> 1\n            merges[i] -= 1\n\n    def down_shift_last(i):\n        if merges[i] > 0:\n            tiles[i] = 0\n            merges[i] -= 1\n\n    if moves == 1:\n        left_shift_last(3)\n    elif moves == 2:\n        up_shift_last(3)\n    elif moves == 3:\n        right_shift_last(3)\n    elif moves == 4:\n        down_shift_last(3)\n\n    return \"\\n\".join(map(str, tiles + merges))\n"
    },
    {
        "number": 4727,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # 1. Transform the input to a list of ints\n    grid = []\n    for row in stdin.split(\"\\n\")[:4]:\n        grid.append([int(i) for i in row.split()])\n\n    # 2. Transform the list of ints into a single list of 16 integers.\n    grid_ = []\n    for row in grid:\n        grid_.append(row[0:4])\n    for row in grid[1:]:\n        grid_.append(row[0:4])\n    for row in grid[2:]:\n        grid_.append(row[0:4])\n    for row in grid[3:]:\n        grid_.append(row[0:4])\n    grid = grid_\n\n    # 3. Transform the ints into a list of integers.\n    grid_ = []\n    for row in grid:\n        grid_.append(row[0:4])\n    grid = grid_\n\n    # 4. Declare an empty list.\n    new_grid = []\n\n    # 5. Iterate over the list of lists of 16 ints, and perform actions depending on the input.\n    action = int(stdin.split(\"\\n\")[4])\n    for i in range(4):\n        for j in range(4):\n            if action == 0:\n                if grid[i][j] == 0:\n                    new_grid.append([0, 0, 0, 0])\n                elif grid[i][j]!= 0:\n                    new_grid.append([grid[i][j], grid[i][j], grid[i][j], grid[i][j]])\n            elif action == 1:\n                if grid[i][j] == 0:\n                    new_grid.append([0, 0, 0, 0])\n                elif grid[i][j]!= 0:\n                    new_grid.append([grid[i][j], grid[i][j], grid[i][j], grid[i][j]])\n            elif action == 2:\n                if grid[i][3 - j] == 0:\n                    new_grid.append([0, 0, 0, 0])\n                elif grid[i][3 - j]!= 0:\n                    new_grid.append([grid[i][3 - j], grid[i][3 - j], grid[i][3 - j], grid[i][3 - j]])\n            elif action == 3:\n                if grid[3 - i][j] == 0:\n                    new_grid.append([0, 0, 0, 0])\n                elif grid[3 - i][j]!= 0:\n                    new_grid.append([grid[3 - i][j], grid[3 - i][j], grid[3 - i][j], grid[3 - i][j]])\n    grid = new_grid\n\n    # 6. Return the list of lists of 4 ints as a single string.\n    return \"\\n\".join(\" \".join(map(str, row)) for row in grid)\n"
    },
    {
        "number": 4727,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    grid = [[int(c) for c in stdin.split(' ')[i * 4 : (i + 1) * 4]] for i in range(4)]\n    moves = [int(i) for i in stdin.split(' ')[4:]]\n\n    for move in moves:\n        direction = {0: [0, -1], 1: [-1, 0], 2: [0, 1], 3: [1, 0]}[move]\n        cells = []\n        for i in range(4):\n            for j in range(4):\n                if grid[i][j] == 0:\n                    continue\n                if grid[i][j] == grid[i][j + direction[0]]:\n                    grid[i][j] *= 2\n                    grid[i][j + direction[0]] = 0\n                elif grid[i][j + direction[1]] == grid[i + direction[1]][j]:\n                    grid[i][j] = 0\n                    grid[i][j + direction[0]] *= 2\n                    grid[i + direction[1]][j] = 0\n                else:\n                    cells.append((i, j))\n        for i, j in cells:\n            grid[i][j] = 0\n            while (i + direction[0] >= 0 and j + direction[1] >= 0) and \\\n                    (i + direction[0] < 4 and j + direction[1] < 4) and \\\n                    grid[i + direction[0]][j + direction[1]] == 0:\n                grid[i + direction[0]][j + direction[1]] = grid[i][j]\n                grid[i][j] = 0\n                i += direction[0]\n                j += direction[1]\n\n    for row in grid:\n        print(' '.join([str(n) for n in row]))\n"
    },
    {
        "number": 4727,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"The solution for the 2048 puzzle problem.\n\n    Args:\n        stdin (str): The input string.\n\n    Returns:\n        str: The output string.\n    \"\"\"\n    stdin = [line.split() for line in stdin.split('\\n')[:-1]]\n    stdin.append(stdin.pop(0))\n    stdin = [[int(i) for i in line] for line in stdin]\n    # print(stdin)\n\n    def move(stdin: List[List[int]]) -> List[List[int]]:\n        \"\"\"Executes a single move of the game.\n\n        Args:\n            stdin (List[List[int]]): The current game state.\n\n        Returns:\n            List[List[int]]: The new game state.\n        \"\"\"\n        stdout = deepcopy(stdin)\n        moves = {\n            'left': [0, lambda x: x[0]],\n            'up': [1, lambda x: x[1]],\n            'right': [2, lambda x: x[2]],\n            'down': [3, lambda x: x[3]],\n        }\n        move_stdin = stdin.pop()\n        for i in range(len(move_stdin)):\n            if move_stdin[i] == 0:\n                continue\n            j = 0\n            while j < len(stdin):\n                stdin[j][i] = stdin[j][i] * move_stdin[i]\n                if stdin[j][i] == 0:\n                    stdin.pop(j)\n                    j -= 1\n                j += 1\n        for i in range(len(stdin)):\n            for j in range(len(stdin[i])):\n                while stdin[i][j] > 0:\n                    if j!= len(stdin[i]) - 1:\n                        stdin[i][j] -= stdin[i][j + 1]\n                        stdin[i][j + 1] = 0\n                    else:\n                        stdin[i][j] -= stdin[i][0]\n                        stdin[i][0] = 0\n        for i in range(len(stdin)):\n            for j in range(len(stdin[i])):\n                stdout[i][j] = stdin[i][j]\n        return stdout\n\n    def merge(stdin: List[List[int]]) -> List[List[int]]:\n        \"\"\"Merges all tiles that are possible to merge.\n\n        Args:\n            stdin (List[List[int]]): The current game state.\n\n        Returns:\n            List[List[int]]: The new game state.\n        \"\"\"\n        stdout = deepcopy(stdin)\n        for i in range(len(stdin)):\n            for j in range(len(stdin[i])):\n                while stdin[i][j] > 0 and stdin[i][j] == stdin[i][j - 1]:\n                    stdout[i][j - 1] *= 2\n                    stdout[i][j] = 0\n        return stdout\n\n    def clear(stdin: List[List[int]]) -> List[List[int]]:\n        \"\"\"Clears all tiles.\n\n        Args:\n            stdin (List[List[int]]): The current game state.\n\n        Returns:\n            List[List[int]]: The new game state.\n        \"\"\"\n        stdout = deepcopy(stdin)\n        for i in range(len(stdout)):\n            for j in range(len(stdout[i])):\n                stdout[i][j] = 0\n        return stdout\n\n    moves = {\n        0: move,\n        1: move,\n        2: merge,\n        3: clear,\n    }\n    while True:\n        for i in range(len(moves)):\n            if moves[i](stdin)[0][0] == 2048:\n                return '\\n'.join([\n                   ''.join([str(i) for i in line]) for line in stdin\n                ])\n            stdin = moves[i](stdin)\n            # print(stdin)\n"
    },
    {
        "number": 4727,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    import copy\n    import numpy as np\n    # '\ub0b4\uac00 \uc4f4\uac70\ub294 \ub0b4\uac00 \uc4f0\ub294\uac70\uc57c..'\n    # \uc5ec\uae30\ubd80\ud130 \ub2e4\ub978\uc0ac\ub78c \ud480\uc774\uc5d0 \ub098\uc640\uc788\ub294 \ucf54\ub4dc \uc77d\uae30\n    def get_tiles(arr):\n        tile_set = set()\n        tiles = []\n        for a in arr:\n            for i in range(4):\n                tile_set.add(a[i * 4:i * 4 + 4])\n        for t in tile_set:\n            tiles.append(int(t, 2))\n        return tiles\n\n    def merge(a, b):\n        return [2 ** (a[0] + b[0]) if a[1] == b[1] else max(a, b)]\n\n    def move(arr, d):\n        n = len(arr)\n        if d == 0:\n            arr = np.hstack([arr[n - 4:], arr[:n - 4]])\n        elif d == 1:\n            arr = np.vstack([arr[4:], arr[:4]])\n        elif d == 2:\n            arr = np.hstack([arr[n - 4:], arr[:n - 4]])\n            arr = np.vstack([arr[:n - 4], arr[n - 4:]])\n        else:\n            arr = np.vstack([arr[:4], arr[n - 4:]])\n            arr = np.hstack([arr[n - 4:], arr[:n - 4]])\n        return arr\n\n    def run(arr, d):\n        tiles = get_tiles(arr)\n        tiles = sorted(tiles)\n        if d == 0:\n            for i in range(len(tiles) - 1):\n                if tiles[i] == tiles[i + 1]:\n                    tiles[i] *= 2\n                    tiles[i + 1] = 0\n            tiles = [x for x in tiles if x!= 0]\n        for i in range(len(tiles)):\n            if tiles[i] == 0:\n                continue\n            for j in range(i + 1, len(tiles)):\n                if tiles[i] == tiles[j]:\n                    tiles[i] *= 2\n                    tiles[j] = 0\n        for i in range(len(tiles)):\n            if tiles[i] == 0:\n                continue\n            for j in range(i + 1, len(tiles)):\n                if tiles[i] == tiles[j]:\n                    tiles[i] *= 2\n                    tiles[j] = 0\n        tiles = [x for x in tiles if x!= 0]\n        return tiles\n\n    def solve(arr, d):\n        for i in range(4):\n            if d!= i:\n                arr = move(arr, i)\n        if not arr.any():\n            return 0\n        arr = run(arr, d)\n        if not arr.any():\n            return 0\n        return arr\n\n    arr = np.array([int(x) for x in stdin.split()])\n    d = int(input())\n    arr = solve(arr, d)\n    arr = [str(x) for x in arr]\n    for x in arr:\n        print(x, end=' ')\n    return ''\n\n\ndef"
    },
    {
        "number": 4727,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    list_strings = stdin.split(\"\\n\")\n    print(list_strings)\n    matrix = []\n    for x in list_strings:\n        matrix.append(list(map(int, x.split(\" \"))))\n    print(matrix)\n    return \"\"\n"
    },
    {
        "number": 4727,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    grid = []\n    for line in stdin.split('\\n')[:4]:\n        row = []\n        for elem in line.split(' '):\n            row.append(int(elem))\n        grid.append(row)\n    move = int(stdin.split('\\n')[4])\n    if move == 0:\n        return '\\n'.join(' '.join(map(str, row)) for row in grid)\n    if move == 1:\n        for row in grid:\n            row.reverse()\n        return '\\n'.join(' '.join(map(str, row)) for row in grid)\n    if move == 2:\n        grid.reverse()\n        return '\\n'.join(' '.join(map(str, row)) for row in grid)\n    if move == 3:\n        for row in grid:\n            row.reverse()\n            for i in range(len(row) - 1):\n                row[i] ^= row[i + 1]\n        return '\\n'.join(' '.join(map(str, row)) for row in grid)"
    },
    {
        "number": 4727,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    board = [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]\n    for i in range(4):\n        for j in range(4):\n            board[i][j] = int(stdin.split('\\n')[4 * j + i].split(' ')[0])\n    if stdin.split('\\n')[4 * 4 + 1] == '0':\n        move = [0, 0, 0, 0]\n    else:\n        move = [int(stdin.split('\\n')[4 * 4 + 1]) - 1]\n    turn = int(stdin.split('\\n')[4 * 4 + 2])\n    print(board)\n    new_board = move_board(board, move)\n    print(new_board)\n    return str(new_board[0][0]) +'' + str(new_board[1][0]) +'' + str(new_board[2][0]) +'' + str(new_board[3][0])\n\n\ndef"
    },
    {
        "number": 4727,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    res: List[int] = []\n    for line in stdin.strip().split('\\n'):\n        tiles = [int(tile) for tile in line.split()]\n        res.append(tiles)\n\n    moves = [\n        [1, 0],\n        [0, 1],\n        [-1, 0],\n        [0, -1]\n    ]\n    empty_tile = 0\n    for row in range(len(res)):\n        for column in range(len(res[row])):\n            if res[row][column] == 0:\n                empty_tile = row, column\n                break\n\n    new_res = res\n    move = 0\n    while True:\n        move += 1\n        new_res = []\n        for i in range(4):\n            new_res.append([0 for _ in range(4)])\n\n        for row in range(len(res)):\n            for column in range(len(res[row])):\n                if res[row][column] == 0:\n                    for move in moves:\n                        tiles = []\n                        tiles.append(new_res[row + move[0]][column + move[1]])\n                        tiles.append(new_res[row + 2 * move[0]][column + 2 * move[1]])\n                        tiles.append(new_res[row + 3 * move[0]][column + 3 * move[1]])\n                        tiles.append(new_res[row + 4 * move[0]][column + 4 * move[1]])\n                        tiles = [tile for tile in tiles if tile!= 0]\n                        if len(tiles)!= 0:\n                            if tiles[0] == tiles[1]:\n                                new_res[row + move[0]][column + move[1]] += tiles[0] * 2\n                                new_res[row + 2 * move[0]][column + 2 * move[1]] = 0\n                                new_res[row + 3 * move[0]][column + 3 * move[1]] = 0\n                                new_res[row + 4 * move[0]][column + 4 * move[1]] = 0\n                            else:\n                                new_res[row + move[0]][column + move[1]] = tiles[0]\n                                new_res[row + 2 * move[0]][column + 2 * move[1]] = tiles[1]\n                                new_res[row + 3 * move[0]][column + 3 * move[1]] = tiles[2]\n                                new_res[row + 4 * move[0]][column + 4 * move[1]] = tiles[3]\n\n        if new_res == res:\n            break\n\n        res = new_res\n        if move == 5:\n            break\n\n    if move == 5:\n        return '{} {} {} {}\\n{} {} {} {}\\n{} {} {} {}'.format(*res)\n    return '{} {} {} {}\\n{} {} {} {}\\n{} {} {} {}'.format(*res, empty_tile[0], empty_tile[1])\n"
    },
    {
        "number": 4727,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(solution.__doc__.strip())\n    '2 4 8 16'\n    \"\"\"\n    data = [list(map(int, line.split(' '))) for line in stdin.split('\\n')]\n    new_data = [[0] * len(data) for _ in range(len(data))]\n    moves = [0, 0, 0, 0]\n    for i in range(len(data)):\n        for j in range(len(data)):\n            new_data[i][j] = data[i][j]\n            if data[i][j] > 0:\n                for move in range(4):\n                    if data[i][j] == 1:\n                        moves[move] += 1\n                        data[i][j] = 1\n                    if move == 0:\n                        if i > 0 and data[i - 1][j] == 0 and new_data[i - 1][j] == 0:\n                            moves[move] += 1\n                            data[i][j] = 2\n                            data[i - 1][j] = 2\n                    elif move == 1:\n                        if i < 3 and data[i + 1][j] == 0 and new_data[i + 1][j] == 0:\n                            moves[move] += 1\n                            data[i][j] = 2\n                            data[i + 1][j] = 2\n                    elif move == 2:\n                        if j > 0 and data[i][j - 1] == 0 and new_data[i][j - 1] == 0:\n                            moves[move] += 1\n                            data[i][j] = 2\n                            data[i][j - 1] = 2\n                    elif move == 3:\n                        if j < 3 and data[i][j + 1] == 0 and new_data[i][j + 1] == 0:\n                            moves[move] += 1\n                            data[i][j] = 2\n                            data[i][j + 1] = 2\n    for i in range(len(data)):\n        for j in range(len(data)):\n            if new_data[i][j] == 0:\n                new_data[i][j] = 2\n            elif new_data[i][j] == 2:\n                new_data[i][j] = 4\n    print(' '.join(map(str, new_data[0] + new_data[1] + new_data[2] + new_data[3])))\n    print(' '.join(map(str, moves)))\n"
    },
    {
        "number": 4728,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 4728,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the solution for the given input.\"\"\"\n    input = stdin.split('\\n')\n\n    input_molecule = input[0].replace(' ', '')\n    input_molecule_number = int(input[1].strip())\n\n    output_molecule = input[2].replace(' ', '')\n\n    if input_molecule_number > len(input_molecule):\n        return 0\n    molecules_dict = dict()\n    for i in range(0, len(input_molecule)):\n        if input_molecule[i] in molecules_dict:\n            molecules_dict[input_molecule[i]] += 1\n        else:\n            molecules_dict[input_molecule[i]] = 1\n\n    output_molecule_number = int(input[3].strip())\n\n    def is_equal(dict1: dict, dict2: dict, molecules_number: int) -> bool:\n        for key in dict1:\n            if dict1[key] < dict2[key]:\n                return False\n            if dict2[key] < dict1[key]:\n                return False\n        return True\n\n    for i in range(0, output_molecule_number):\n        if i in molecules_dict:\n            molecules_dict[i] -= 1\n        else:\n            molecules_dict[i] = -1\n        if is_equal(molecules_dict, output_molecule, output_molecule_number):\n            return i\n\n    return 0\n"
    },
    {
        "number": 4728,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    A program that takes two inputs, the chemical formula of the starting\n    molecule and the chemical formula of the desired molecule. Outputs the\n    maximum number of molecules that can be made with the given starting\n    molecule.\n    '''\n    stdin = stdin.split('\\n')\n    start = stdin[0]\n    k = int(stdin[1])\n    stdin = stdin[2:]\n    total = sum(i.count(start[i]) for i in start)\n    count = 0\n    while total >= k:\n        count += 1\n        for i in range(len(start)):\n            if start[i].isupper():\n                start = start[:i] + str(start[i] + start[i].lower()) + start[i+1:]\n                total -= 1\n    print(count)\n    return ''"
    },
    {
        "number": 4728,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    \n"
    },
    {
        "number": 4728,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    molecule = stdin.split(\"\\n\")[0]\n    k = int(stdin.split(\"\\n\")[1])\n    a = [x for x in re.split(\"[A-Z]|\\d\", molecule)]\n    b = []\n    for x in a:\n        if len(x) == 1:\n            b.append(x)\n        else:\n            b.extend([x] * int(x[1:]))\n    a = b\n    b = []\n    for x in a:\n        if len(x) == 1:\n            b.append(x)\n        else:\n            b.extend([x] * int(x[1:]))\n    a = b\n    c = []\n    for x in a:\n        if len(x) == 1:\n            c.append(x)\n        else:\n            c.extend([x] * int(x[1:]))\n    a = c\n    c = []\n    for x in a:\n        if len(x) == 1:\n            c.append(x)\n        else:\n            c.extend([x] * int(x[1:]))\n    a = c\n    c = []\n    for x in a:\n        if len(x) == 1:\n            c.append(x)\n        else:\n            c.extend([x] * int(x[1:]))\n    a = c\n    c = []\n    for x in a:\n        if len(x) == 1:\n            c.append(x)\n        else:\n            c.extend([x] * int(x[1:]))\n    a = c\n    c = []\n    for x in a:\n        if len(x) == 1:\n            c.append(x)\n        else:\n            c.extend([x] * int(x[1:]))\n    a = c\n    c = []\n    for x in a:\n        if len(x) == 1:\n            c.append(x)\n        else:\n            c.extend([x] * int(x[1:]))\n    a = c\n    c = []\n    for x in a:\n        if len(x) == 1:\n            c.append(x)\n        else:\n            c.extend([x] * int(x[1:]))\n    a = c\n    c = []\n    for x in a:\n        if len(x) == 1:\n            c.append(x)\n        else:\n            c.extend([x] * int(x[1:]))\n    a = c\n    c = []\n    for x in a:\n        if len(x) == 1:\n            c.append(x)\n        else:\n            c.extend([x] * int(x[1:]))\n    a = c\n    c = []\n    for x in a:\n        if len(x) == 1:\n            c.append(x)\n        else:\n            c.extend([x] * int(x[1:]))\n    a = c\n    c = []\n    for x in a:\n        if len(x) == 1:\n            c.append(x)\n        else:\n            c.extend([x] * int(x[1:]))\n    a = c\n    c = []\n    for x in a:\n        if len(x) == 1:\n            c.append(x)\n        else:\n            c.extend([x] * int(x[1:]))\n    a = c\n    c = []\n    for x in a:\n        if len(x) == 1:\n            c.append(x)\n        else:\n            c.extend([x] * int(x[1:]))\n    a = c\n    c = []\n    for x in a:\n        if len(x) == 1:\n            c.append(x)\n        else:\n            c.extend([x] * int(x[1:]))\n    a = c\n    c = []\n    for x in a:\n        if len(x) == 1:\n            c.append(x)\n        else:\n            c.extend([x] * int(x[1:]))\n    a = c\n    c = []\n    for x in a:\n        if len(x) == 1:\n            c.append(x)\n        else:\n            c.extend([x] * int(x[1:]))\n    a = c\n    c = []\n    for x in a:\n        if len(x) == 1:\n            c.append(x)\n        else:\n            c.extend([x] * int(x[1:]))\n    a = c\n    c = []\n    for x in a:\n        if len(x) == 1:\n            c.append(x)\n        else:\n            c.extend([x] * int(x[1:]))\n    a = c\n    c = []\n    for x in a:\n        if len(x) == 1:\n            c.append(x)\n        else:\n            c.extend([x] * int(x[1:]))\n    a = c\n    c = []\n    for x in a:\n        if len(x) == 1:\n            c.append(x)\n        else:\n            c.extend([x] * int(x[1:]))\n    a = c\n    c = []\n    for x in a:\n        if len(x) == 1:\n            c.append(x)\n        else:\n            c.extend([x] * int(x[1:]))\n    a = c\n    c = []\n    for x in a:\n        if len(x) == 1:\n            c.append(x)\n        else:\n            c.extend([x] * int(x[1:]))\n    a = c\n    c = []\n    for x in a:\n        if len(x) == 1:\n            c.append(x)\n        else:\n            c.extend([x] * int(x["
    },
    {
        "number": 4728,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    c_input = [i for i in stdin.split('\\n') if i]\n    c_input.sort(key=len)\n    molecule = c_input[0]\n    c_input = c_input[1:]\n\n    molecule = molecule.split()\n    output = c_input[0]\n    c_input = c_input[1:]\n    output = output.split()\n\n    molecule = list(molecule[0])\n    output = list(output[0])\n\n    molecule_dictionary = {}\n\n    for i in molecule:\n        try:\n            molecule_dictionary[i] += int(i[-1])\n        except:\n            molecule_dictionary[i] = int(i[-1])\n\n    # print(molecule_dictionary)\n\n    output_dictionary = {}\n    output_dictionary2 = {}\n\n    for i in output:\n        try:\n            output_dictionary[i] += int(i[-1])\n        except:\n            output_dictionary[i] = int(i[-1])\n\n    # print(output_dictionary)\n\n    molecule_keys = list(molecule_dictionary.keys())\n    output_keys = list(output_dictionary.keys())\n\n    for i in output_keys:\n        if i not in molecule_keys:\n            output_dictionary2[i] = output_dictionary[i]\n            continue\n        output_dictionary2[i] = min(output_dictionary[i], molecule_dictionary[i])\n\n    # print(output_dictionary2)\n\n    # print(len(output_dictionary2.keys()))\n\n    molecule_list = []\n\n    for i in molecule_keys:\n        if i not in output_keys:\n            for j in range(molecule_dictionary[i]):\n                molecule_list.append(i)\n\n    # print(molecule_list)\n\n    # print(len(molecule_list))\n\n    # print(molecule_list[-1])\n\n    # print(output_dictionary2)\n\n    while molecule_list:\n        i = molecule_list.pop()\n        try:\n            if i not in output_dictionary2:\n                continue\n        except:\n            continue\n\n        # print(output_dictionary2[i])\n        if output_dictionary2[i] > 0:\n            for j in range(output_dictionary2[i]):\n                output_dictionary2[i] -= 1\n                output_list.append(i)\n\n    # print(output_list)\n\n    return str(len(output_list))\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4728,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"H 2\\\\nO\\\\n\")\n    '0'\n    >>> solution(\"C2H6 10\\\\nC3H8\\\\n\")\n    '6'\n    >>> solution(\"CH3OH 1\\\\nCH4\\\\n\")\n    '1'\n    >>> solution(\"C6H6OCH2O 10\\\\nHCN\\\\n\")\n    '0'\n    >>> solution(\"C6H14 10\\\\nC5H10\\\\n\")\n    '12'\n    \"\"\"\n    from collections import defaultdict\n    from functools import partial\n    from itertools import accumulate\n    from math import prod\n\n    # Get molecule and molecule count\n    molecule, molecule_count = stdin.split(' ')\n    molecule_count = int(molecule_count)\n    molecule = list(molecule)\n\n    # Preprocess the molecule\n    i = 0\n    atoms = defaultdict(list)\n    while i < len(molecule):\n        atom = molecule[i]\n        if not atom.isupper():\n            atoms[atom] += [molecule.pop(i)]\n        else:\n            i += 1\n    for atom in atoms:\n        atoms[atom] = list(map(int, atoms[atom]))\n\n    # Compute the number of each atom we need to produce\n    n_atoms = {atom: sum(atoms[atom]) // atom_count for atom, atom_count in atoms.items()}\n\n    # Compute the number of each molecule we need to produce\n    n_molecules = defaultdict(int)\n    for atom, atom_count in n_atoms.items():\n        n_molecules[atom] = atom_count // prod(atoms[atom])\n    n_molecules = dict(n_molecules)\n\n    # Compute the number of each atom left to produce\n    n_atoms_left = defaultdict(int)\n    for atom, atom_count in n_atoms.items():\n        n_atoms_left[atom] = atom_count % prod(atoms[atom])\n    n_atoms_left = dict(n_atoms_left)\n\n    # Compute the number of each molecule left to produce\n    n_molecules_left = defaultdict(int)\n    for atom, atom_count in n_molecules.items():\n        n_molecules_left[atom] = n_molecules[atom] - n_atoms[atom] // atom_count\n    n_molecules_left = dict(n_molecules_left)\n\n    # Determine the number of each atom of the output molecule\n    n_atoms_output = {atom: 0 for atom in n_atoms.keys()}\n\n    # Determine the number of each molecule of the output molecule\n    n_molecules_output = defaultdict(int)\n\n    # Initialize the number of atoms and molecules in the input molecule\n    n_atoms_input = {atom: atoms[atom][0] for atom in n_atoms.keys()}\n    n_molecules_input = defaultdict(int)\n    for atom, atom_count in n_atoms_input.items():\n        n_molecules_input[atom] = n_atoms_input[atom] // n_atoms[atom]\n\n    # Loop over the input molecule\n    while n_atoms_left or n_molecules_left:\n        # Loop over the atoms of the input molecule\n        for atom, atom_count in n_atoms_input.items():\n            # If we have enough atoms of this type, subtract it from the input molecule\n            if atom_count >= atoms[atom][0] * n_molecules[atom]:\n                n_atoms_input[atom] -= atoms[atom][0] * n_molecules[atom]\n                n_molecules_input[atom] -= n_molecules[atom]\n            # If not, add it to the atoms left to be produced\n            else:\n                n_atoms_left[atom] += atoms[atom][0] * n_molecules[atom] - atom_count\n                n_molecules_left[atom] += n_molecules[atom] - n_molecules_input[atom]\n\n        # Loop over the atoms of the output molecule\n        for atom, atom_count in n_atoms_output.items():\n            # If we have enough atoms of this type, add it to the output molecule\n            if atom_count < n_molecules[atom] * n_molecules_output[atom]:\n                n_atoms_output[atom] += n_molecules[atom] * n_molecules_output[atom] - atom_count\n                n_molecules_output[atom] -= n_molecules[atom]\n            # If not, add the difference to the atoms left to be produced\n            else:\n                n_atoms_left[atom] += n_molecules[atom] * n_molecules_output[atom] - atom_count\n                n_molecules_left[atom] -= n_molecules[atom]\n\n        # Determine the number of atoms left to be produced\n        n_atoms_left = {atom: n_atoms_left[atom] for atom in n_atoms_left.keys() if n_atoms_left[atom]}\n\n        # Determine the number of molecules left to be produced\n        n_molecules_left = {atom: n_molecules_left[atom] for atom in n_molecules_left.keys() if n_molecules_left[atom]}\n\n    # Get the number of output molecules\n    n_output_molecules = sum(n_molecules_output.values())\n\n    # Get the number of atoms left to be produced\n    n_atoms_left = sum(n_atoms_left.values())\n\n    # Determine the number of atoms of the output molecule\n    n_atoms_output = {atom: sum(n_molecules_output[atom] * n_molecules[atom]) for atom in n_molecules"
    },
    {
        "number": 4728,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    c = stdin.splitlines()\n    a, b = c[0], c[1]\n    a = list(a)\n    b = list(b)\n    a = [c for c in a if c.isalpha()]\n    b = [c for c in b if c.isalpha()]\n    i = 0\n    ans = 0\n    while i < len(a):\n        # print(i, a[i])\n        j = 1\n        while i + j < len(a):\n            if a[i] == a[i + j]:\n                # print(j)\n                ans += int(a[i + j][1:])\n                a.pop(i)\n                a.pop(i)\n                j = 1\n                i -= 1\n            j += 1\n        i += 1\n    a = \"\".join(a)\n    for b_i in b:\n        ans += b_i[1:].count(a)\n    print(ans)\n\n    return ''"
    },
    {
        "number": 4728,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Compute the maximum number of output molecules.\"\"\"\n    molecule_1 = stdin.split()[0]\n    k = int(stdin.split()[1])\n    molecule_2 = stdin.split()[2]\n\n    k_molecules_1 = get_k_molecules(molecule_1, k)\n    k_molecules_2 = get_k_molecules(molecule_2, k)\n\n    if k_molecules_1 == k_molecules_2:\n        return str(0)\n    return str(k_molecules_1 + k_molecules_2 - k)\n\n\ndef"
    },
    {
        "number": 4728,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    A = lines[0]\n    k = int(lines[1])\n    B = lines[2]\n    return str(get_combination(A, B, k))\n\n\ndef"
    },
    {
        "number": 4729,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Finds a valid message for the given password.\n    :param stdin: The password and message for which a valid message is to be found.\n    :return: A string denoting whether the message was found to be valid.\n    \"\"\"\n    password = stdin[0:3]\n    message = stdin[4:]\n\n    msg = \"\"\n    for i in range(len(message)):\n        # get the first character from the password set\n        if message[i] == password[0]:\n            msg = msg + message[i]\n            # get the next character from the password set\n            if i + 1 < len(message) and message[i + 1] == password[1]:\n                msg = msg + message[i + 1]\n                # get the next character from the password set\n                if i + 2 < len(message) and message[i + 2] == password[2]:\n                    msg = msg + message[i + 2]\n                    break\n    if msg == password:\n        return \"PASS\"\n    else:\n        return \"FAIL\"\n"
    },
    {
        "number": 4729,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds if the second string is a valid message for the password\n    :param stdin: a string\n    :type stdin: str\n    :return: PASS if the second string is a valid message for the password, or FAIL otherwise\n    :rtype: str\n    \"\"\"\n    # parse the input into two strings\n    pwd, msg = stdin.split()\n    # set the index for where we start at\n    index = 0\n    # get the length of the password\n    len_pwd = len(pwd)\n    # loop through the message, add the index to each letter, if the index is greater then the length of the password return fail\n    for i in range(len(msg)):\n        if msg[i] not in pwd:\n            return \"FAIL\"\n        # if the index exceeds the length of the password return fail\n        elif index > len_pwd - 1:\n            return \"FAIL\"\n        # add the index to the next letter\n        else:\n            index += pwd.index(msg[i])\n    # return pass if the index has successfully reached the end of the message\n    return \"PASS\"\n"
    },
    {
        "number": 4729,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    p = stdin.split()[0]\n    s = stdin.split()[1]\n    p = ''.join(sorted(p))\n    l = len(p)\n    for i, c in enumerate(s):\n        if c in p[i%l]:\n            continue\n        else:\n            return \"FAIL\"\n    return \"PASS\"\n\nprint(solution(\"SECRET SOMECHORESARETOUGH\"))\n"
    },
    {
        "number": 4729,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    in1 = stdin.split('\\n')\n    in1.pop()\n    s = in1[0].strip()\n    m = in1[1].strip()\n    count = 0\n    a = \"\"\n    for i in s:\n        if i in m:\n            a += i\n            count += 1\n    if count == len(s):\n        return 'PASS'\n    else:\n        return 'FAIL'"
    },
    {
        "number": 4729,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds if a given string is a valid message for a given password.\n\n    Arguments:\n        stdin {str} -- A string with a password and a message.\n\n    Returns:\n        str -- If the second string is a valid message for the first, returns PASS, otherwise returns FAIL.\n    \"\"\"\n\n    # Separates the input string into 2 variables\n    password = stdin.split(\" \")[0]\n    message = stdin.split(\" \")[1]\n\n    # The length of the password\n    password_length = len(password)\n\n    # The set of characters in the password\n    password_characters = set(password)\n\n    # The set of characters in the message\n    message_characters = set(message)\n\n    # The set of characters that have appeared in the password\n    password_letters = set()\n\n    # The set of characters that have appeared in the message\n    message_letters = set()\n\n    # The set of characters that have appeared in the message and password\n    message_password_letters = set()\n\n    # The index of the current character in the password\n    password_index = 0\n\n    # The index of the current character in the message\n    message_index = 0\n\n    # The first character in the message\n    message_first_character = message[0]\n\n    # The second character in the message\n    message_second_character = message[1]\n\n    # If the message is invalid\n    message_is_valid = False\n\n    # If the message is valid\n    message_is_valid = True\n\n    # While the message is valid\n    while message_is_valid:\n\n        # While there are characters in the message\n        while message_index < len(message):\n\n            # If the current character in the password is the current character in the message\n            if password[password_index] == message[message_index]:\n\n                # Add the current character to the set of characters that have appeared in the password\n                password_letters.add(password[password_index])\n\n                # Add the current character to the set of characters that have appeared in the message\n                message_letters.add(message[message_index])\n\n                # Add the current character to the set of characters that have appeared in the message and password\n                message_password_letters.add(message[message_index])\n\n            # Add the current character to the set of characters that have appeared in the message\n            message_letters.add(message[message_index])\n\n            # If the password has all of the characters in the set that have appeared in the password\n            if password_letters == password_characters:\n\n                # If the current character in the message is the first character in the message\n                if message_index == 0:\n\n                    # If the current character in the message is the second character in the message\n                    if message_index == 1:\n\n                        # If the current character in the message is the third character in the message\n                        if message_index == 2:\n\n                            # If the current character in the message is the fourth character in the message\n                            if message_index == 3:\n\n                                # If the current character in the message is the fifth character in the message\n                                if message_index == 4:\n\n                                    # If the current character in the message is the sixth character in the message\n                                    if message_index == 5:\n\n                                        # If the current character in the message is the seventh character in the message\n                                        if message_index == 6:\n\n                                            # If the current character in the message is the eighth character in the message\n                                            if message_index == 7:\n\n                                                # If the current character in the message is the last character in the message\n                                                if message_index == 8:\n\n                                                    # If the current character in the message is the first character in the message\n                                                    if message_index == 0:\n\n                                                        # If the current character in the message is the second character in the message\n                                                        if message_index == 1:\n\n                                                            # If the current character in the message is the third character in the message\n                                                            if message_index == 2:\n\n                                                                # If the current character in the message is the fourth character in the message\n                                                                if message_index == 3:\n\n                                                                    # If the current character in the message is the fifth character in the message\n                                                                    if message_index == 4:\n\n                                                                        # If the current character in the message is the sixth character in the message\n                                                                        if message_index == 5:\n\n                                                                            # If the current character in the message is the seventh character in the message\n                                                                            if message_index == 6:\n\n                                                                                # If the current character in the message is the last character in the message\n                                                                                if message_index == 7:\n\n                                                                                    # If the current character in the message is the first character in the message\n                                                                                    if message_index == 8:\n\n                                                                                        # If the current character in the message is the second character in the message\n                                                                                        if message_index == 9:\n\n                                                                                            # If the current character in the message is the third character"
    },
    {
        "number": 4729,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass1 = stdin[0:3]\n    pass2 = stdin[3:10]\n    stdin = stdin[10:]\n    for index, char in enumerate(pass2):\n        if char == pass1[index]:\n            continue\n        else:\n            stdin = stdin[stdin.index(char)+1:]\n            break\n    if pass1 in stdin:\n        return \"PASS\"\n    else:\n        return \"FAIL\"\n"
    },
    {
        "number": 4729,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pw = stdin.split(\" \")[0]\n    msg = stdin.split(\" \")[1]\n    pw_dict = {x: pw.index(x) for x in pw}\n    msg_dict = {x: msg.index(x) for x in msg}\n    if len(pw) == 0 or len(msg) == 0:\n        return \"FAIL\"\n    else:\n        for x in pw_dict:\n            if x not in msg_dict:\n                return \"FAIL\"\n            elif pw_dict[x]!= msg_dict[x]:\n                return \"FAIL\"\n        return \"PASS\"\n\n\ndef"
    },
    {
        "number": 4729,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4729,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    p = stdin.split()[0]\n    s = stdin.split()[1]\n    for i, ch in enumerate(s):\n        if (ch in p)!= (s[i:i + len(p)] in p):\n            return 'FAIL'\n    return 'PASS'\n"
    },
    {
        "number": 4729,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4730,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4730,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    opening = {\n        '(': ')',\n        '[': ']',\n        '{': '}'\n    }\n    closing = {\n        ')': '(',\n        ']': '[',\n        '}': '{'\n    }\n    stack = []\n    for index, char in enumerate(stdin):\n        if char =='':\n            continue\n        if char in '({[':\n            stack.append(char)\n        elif char in ')}]':\n            if not stack:\n                return f'{char} {index}'\n            last = stack.pop()\n            if opening[last]!= char:\n                return f'{last} {index - 1}'\n    if not stack:\n        return 'ok so far'\n    return f'{stack[-1]} {len(stdin) - 1}'\n\n\nprint(solution('([] [] ]'))\nprint(solution('[ ( ) ]'))\nprint(solution('([([])])'))\nprint(solution('{ { () () () () } }'))\nprint(solution('[ { ([]) } }'))\n"
    },
    {
        "number": 4730,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    total = 0\n    arr = []\n    line = stdin.strip().split('\\n')\n    for x in range(len(line)):\n        for i in range(len(line[x])):\n            if line[x][i] == '[' or line[x][i] == '(' or line[x][i] == '{' or line[x][i] == '<':\n                arr.append(line[x][i])\n            elif line[x][i] == ']' or line[x][i] == ')' or line[x][i] == '}' or line[x][i] == '>':\n                if not arr or arr[len(arr) - 1]!= line[x][i]:\n                    print('missing )')\n                    return\n                arr.pop()\n            elif line[x][i] =='':\n                total += 1\n            else:\n                print('missing )')\n                return\n        if not arr:\n            if line[x][total] == ')':\n                print('missing (')\n                return\n    if not arr:\n        print('ok so far')\n    return\n\nsolution(stdin)\n"
    },
    {
        "number": 4730,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    bracket_pairs = {\n        '(': ')',\n        '[': ']',\n        '{': '}'\n    }\n    \n    opening_brackets = []\n    for i in stdin:\n        if i in bracket_pairs:\n            opening_brackets.append(i)\n        elif i in bracket_pairs.values():\n            try:\n                index = opening_brackets.pop()\n            except:\n                return \"ok so far\"\n            if bracket_pairs[index]!= i:\n                return i + \" \" + str(stdin.index(i))\n        else:\n            return \"ok so far\"\n\nprint(solution(\"(([] [[]] ()))\"))\nprint(solution(\"[ { { () () () () } } ]\"))\nprint(solution(\"[ { [[()]] (({})) } ] () {}\"))\nprint(solution(\"([] [])\"))\nprint(solution(\"()[]\"))\n"
    },
    {
        "number": 4730,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(input)\n    print(stdout)\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4730,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 4730,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Compute solution for the given input.\"\"\"\n    valid_delimiters = set('()[]{}')\n\n    # 0-indexed index\n    return_index = -1\n    return_error_string = 'ok so far'\n    \n    # Get the input string\n    length = int(stdin.split()[0])\n    string = stdin.split()[1]\n\n    # Validate that each character is valid\n    for index, char in enumerate(string):\n        if char not in valid_delimiters:\n            return_error_string = f'Error at index {index}.'\n            return_index = index\n            break\n\n    # If we have no errors, return ok so far\n    if return_error_string == 'ok so far':\n        return return_error_string\n\n    # Return the error string\n    return f'Error {return_index}.'\n\n\ndef"
    },
    {
        "number": 4730,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    \u0420\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0435\u043d\u0438\u0435 \u0432\u0441\u0435\u0445 \u0441\u0438\u0442\u0443\u0430\u0446\u0438\u0439: \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u043e\u0432\n    '''\n\n    # \u0421\u043f\u0438\u0441\u043e\u043a \u0432\u0441\u0435\u0445 \u043e\u0442\u043a\u0440\u044b\u0432\u0430\u044e\u0449\u0438\u0445\u0441\u044f \u0438 \u0437\u0430\u043a\u0440\u044b\u0432\u0430\u044e\u0449\u0438\u0445\u0441\u044f \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432 \u0432 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435\n    openings = [\n        '(', '[', '{',\n    ]\n\n    # \u0421\u043f\u0438\u0441\u043e\u043a \u0432\u0441\u0435\u0445 \u043e\u0442\u043a\u0440\u044b\u0432\u0430\u044e\u0449\u0438\u0445\u0441\u044f \u0438 \u0437\u0430\u043a\u0440\u044b\u0432\u0430\u044e\u0449\u0438\u0445\u0441\u044f \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432 \u0432 \u043e\u0431\u0440\u0430\u0442\u043d\u043e\u043c \u043f\u043e\u0440\u044f\u0434\u043a\u0435\n    closings = [\n        ')', ']', '}',\n    ]\n\n    # \u0412\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0435 \u043e\u0448\u0438\u0431\u043a\u0438\n    errs = [\n        'Too many opening delimiters',\n        'Too many closing delimiters',\n    ]\n\n    # \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043e\u0442\u043a\u0440\u044b\u0432\u0430\u044e\u0449\u0438\u0445 \u0438 \u0437\u0430\u043a\u0440\u044b\u0432\u0430\u044e\u0449\u0438\u0445 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432 \u043d\u0430 \u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u0432 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435\n    if (len(openings) - len(closings)!= 1) or not openings:\n        return 'error'\n\n    # \u0424\u043b\u0430\u0433, \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u044e\u0449\u0438\u0439, \u043d\u0430\u0447\u0438\u043d\u0430\u0435\u0442\u0441\u044f \u043b\u0438 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u043d\u0430 \u0447\u0438\u0441\u043b\u043e\u0432\u043e\u043c \u0441\u0438\u043c\u0432\u043e\u043b\u0435\n    start = False\n\n    # \u041d\u0430\u0447\u0430\u043b\u044c\u043d\u0430\u044f \u043f\u043e\u0437\u0438\u0446\u0438\u044f \u0446\u0438\u043a\u043b\u0430\n    i = 0\n\n    # \u041e\u0431\u0449\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432\n    length = len(stdin)\n\n    # \u0426\u0438\u043a\u043b \u043f\u043e \u0438\u043d\u0434\u0435\u043a\u0441\u0430\u043c \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432\n    while i < length:\n\n        # \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043d\u0430\u0447\u0430\u043b\u0430 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b\n        if stdin[i] in openings:\n            start = True\n\n        # \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0437\u0430\u043a\u0440\u044b\u0442\u0438\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b\n        elif stdin[i] in closings:\n\n            # \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0442\u043e\u0433\u043e, \u0447\u0442\u043e \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u043d\u0430\u0447\u0438\u043d\u0430\u0435\u0442\u0441\u044f \u0441 \u0447\u0438\u0441\u043b\u043e\u0432\u043e\u0433\u043e \u0441\u0438\u043c\u0432\u043e\u043b\u0430\n            if not start:\n                return 'error'\n\n            # \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043d\u0430 \u0442\u043e, \u0447\u0442\u043e \u0437\u0430\u043a\u0440\u044b\u0432\u0430\u044e\u0449\u0438\u0439 \u0441\u0438\u043c\u0432\u043e\u043b \u043e\u0442\u043b\u0438\u0447\u0435\u043d \u043e\u0442 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u043e\u0442\u043a\u0440\u044b\u0432\u0430\u044e\u0449\u0435\u0433\u043e\n            if openings.index(stdin[i])!= closings.index(stdin[i]):\n                return '{} {}'.format(closings[closings.index(stdin[i])], i)\n\n            else:\n                return 'ok so far'\n\n        # \u0415\u0441\u043b\u0438 \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u0435\u0442\u0441\u044f \u0434\u0440\u0443\u0433\u043e\u0439 \u0441\u0438\u043c\u0432\u043e\u043b, \u0442\u043e \u0432\u043e\u0437\u0432\u0440\u0430\u0442 \u043e\u0448\u0438\u0431\u043a\u0438\n        else:\n            return 'error'\n\n        i += 1\n    return 'ok so far'"
    },
    {
        "number": 4730,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution(\"8\\n([] [] ]\\n\")\n    ']] 7'\n    >>> solution(\"13\\n(([] [[]] ())\\n\")\n    'ok so far'\n    >>> solution(\"21\\n[ { { () () () () } ]\\n\")\n    '] 20'\n    >>> solution(\"27\\n[ { [[()]] (({})) } ] () {}\\n\")\n    'ok so far'\n    >>> solution(\"23\\n[ ( [] ) ]\\n\")\n    'ok so far'\n    >>> solution(\"19\\n[ [ ] ]\\n\")\n    'ok so far'\n    >>> solution(\"23\\n[ ( [] ) ]\\n\")\n    'ok so far'\n    '''\n    pass\n"
    },
    {
        "number": 4730,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # Write your code here\n    return \"\"\n"
    },
    {
        "number": 4731,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    num_games = int(stdin)\n    prev_word = stdin\n    prev_words = list()\n    for i in range(num_games):\n        word = stdin\n        if word in prev_words:\n            print('Player 1 lost')\n            return\n        else:\n            prev_words.append(word)\n            stdin = input()\n            prev_word = stdin"
    },
    {
        "number": 4731,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    game_input = [x.strip() for x in stdin.split('\\n')]\n\n    last_letters = []\n    for i in range(int(game_input[0])):\n        last_letters.append(game_input[i + 1][-1])\n        \n    for i in range(int(game_input[0]) - 1):\n        if last_letters[i]!= last_letters[i + 1]:\n            print(f\"Player {i + 1} lost\")\n            return\n        if last_letters[i] in last_letters[:i]:\n            print(f\"Player {i + 1} lost\")\n            return\n    print(\"Fair Game\")\n"
    },
    {
        "number": 4731,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin) < 2:\n        return 'Fair Game'\n\n    # 1st line\n    first_line = stdin.splitlines()[0]\n    line_1 = first_line.split(' ')\n\n    # 2nd line\n    line_2 = stdin.splitlines()[1].split(' ')\n\n    # 3rd line\n    line_3 = stdin.splitlines()[2].split(' ')\n\n    for i in range(len(line_1)):\n        for j in range(len(line_2)):\n            if line_1[i][0] == line_2[j][-1]:\n                for k in range(len(line_3)):\n                    if line_2[j][0] == line_3[k][-1]:\n                        return 'Player 1 lost'\n                return 'Player 2 lost'\n    return 'Fair Game'\n"
    },
    {
        "number": 4731,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Your code goes here\n    pass\n"
    },
    {
        "number": 4731,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    #Your code here\n    return ''\n"
    },
    {
        "number": 4731,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \n    return ''"
    },
    {
        "number": 4731,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # input\n    N = int(stdin.readline())\n    words = []\n    for _ in range(N):\n        words.append(stdin.readline().strip())\n    \n    # output\n    \n    for i in range(1, N):\n        if not words[i].startswith(words[i - 1][-1]):\n            return f'Player {i} lost'\n    return 'Fair Game'"
    },
    {
        "number": 4731,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    word_list: List[str] = [word.strip() for word in stdin.split(\"\\n\")]\n    word_list.pop()\n    count: int = 0\n    for word in word_list:\n        if len(word) == 1:\n            count += 1\n        else:\n            break\n    if count == len(word_list):\n        return \"Fair Game\"\n    else:\n        return f\"Player {(count % 2) + 1} lost\"\n"
    },
    {
        "number": 4731,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    first_player = []\n    second_player = []\n    N = int(stdin.readline())\n    for _ in range(N):\n        word = stdin.readline().strip()\n        first_player.append(word)\n\n    for _ in range(N):\n        word = stdin.readline().strip()\n        second_player.append(word)\n\n    for i in range(N):\n        if i == 0:\n            if second_player[i][0]!= first_player[i][-1]:\n                return 'Player 2 lost'\n        elif i == N - 1:\n            if second_player[i][0]!= first_player[i - 1][-1]:\n                return 'Player 1 lost'\n        else:\n            if second_player[i][0]!= first_player[i - 1][-1]:\n                return 'Player 2 lost'\n            elif second_player[i][0]!= first_player[i][-1]:\n                return 'Player 1 lost'\n\n    return 'Fair Game'\n"
    },
    {
        "number": 4731,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return 'Player 1 lost' if player 1 lost the game, 'Fair Game' otherwise.\"\"\"\n    return 'Player 1 lost' if len(set(stdin.split()))!= len(set(stdin.split(sep='\\n'))) else 'Fair Game'\n"
    },
    {
        "number": 4732,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('1000\\n*\\n100')\n    '100000'\n    >>> solution('10000\\n+\\n10')\n    '10010'\n    >>> solution('10\\n+\\n1000')\n    '1010'\n    \"\"\"\n    a, op, b = stdin.split('\\n')\n    a, b = int(a), int(b)\n    if op == '*':\n        return str(a * b)\n    else:\n        return str(a + b)\n"
    },
    {
        "number": 4732,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    You should return a string.\n    \"\"\"\n    # write your code in Python 3.6\n    stdin = stdin.split(\"\\n\")\n    a = int(stdin[0])\n    op = stdin[1]\n    b = int(stdin[2])\n    if op == \"*\":\n        print(a * b)\n    elif op == \"+\":\n        print(a + b)\n    else:\n        print(\"Invalid input\")\n    return \"\"\n"
    },
    {
        "number": 4732,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the result of a basic arithmetic operation on two numbers.\n\n    Parameters\n    ----------\n    stdin : str\n        Input given by the user, which is the arithmetic operation and two numbers.\n\n    Returns\n    -------\n    str\n        The result of the operation, the answer to the arithmetic problem.\n    \"\"\"\n    # If the operation is addition, return the sum of the two numbers.\n    if stdin[1] == '+':\n        return stdin[2] + stdin[3]\n    # If the operation is multiplication, return the product of the two numbers.\n    return stdin[2] * stdin[3]\n"
    },
    {
        "number": 4732,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Calculates the result of the arithmetic operation.\"\"\"\n    operator = stdin[1]\n    a = int(stdin[0])\n    b = int(stdin[2])\n\n    if operator == '+':\n        result = a + b\n    elif operator == '*':\n        result = a * b\n    else:\n        print('Invalid operator!')\n        return\n\n    return str(result)\n"
    },
    {
        "number": 4732,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4732,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    operation = stdin[0]\n    number1 = int(stdin[1])\n    number2 = int(stdin[2])\n\n    if operation == \"+\":\n        return str(number1 + number2)\n    else:\n        return str(number1 * number2)\n"
    },
    {
        "number": 4732,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    a, operation, b = map(str, stdin.split())\n    if operation == '+':\n        return str(int(a) + int(b))\n    else:\n        return str(int(a) * int(b))\n"
    },
    {
        "number": 4732,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Calculate the solution to the problem.\n\n    Parameters\n    ----------\n    stdin : str\n        The standard input of the problem.\n\n    Returns\n    -------\n    str\n        The standard output of the problem.\n    \"\"\"\n    operator = stdin[-1]\n    stdin = stdin.split()\n    a = int(stdin[0])\n    b = int(stdin[2])\n    if operator == '+':\n        return str(a + b)\n    else:\n        return str(a * b)\n"
    },
    {
        "number": 4732,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns a solution for a given input\"\"\"\n    operand = stdin[2]\n    a = int(stdin[0])\n    b = int(stdin[3])\n    if operand == '+':\n        print(a + b)\n    if operand == '*':\n        print(a * b)\n    return ''\n"
    },
    {
        "number": 4732,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    a, b, operator = stdin.split(\"\\n\")\n    a = int(a)\n    b = int(b)\n    if operator == '+':\n        return str(a + b)\n    elif operator == '*':\n        return str(a * b)\n\n\ndef"
    },
    {
        "number": 4733,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    deck_size = int(stdin[0])\n    shuffle_type = stdin[1]\n    shuffle_count = 0\n    if shuffle_type == \"in\":\n        half_deck_size = deck_size // 2\n        while half_deck_size:\n            shuffle_count += 1\n            half_deck_size //= 2\n        print(shuffle_count)\n    elif shuffle_type == \"out\":\n        half_deck_size = deck_size // 2\n        shuffle_count += half_deck_size\n        while half_deck_size:\n            shuffle_count += half_deck_size\n            half_deck_size //= 2\n        print(shuffle_count)\n    else:\n        print(\"Invalid shuffle type\")\n\n\nsolution(input())\n"
    },
    {
        "number": 4733,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # Replace pass with your code\n    num_deck = int(stdin.split()[0])\n    if num_deck % 2!= 0:\n        num_deck += 1\n    if stdin.split()[1] == \"in\":\n        shuffle_count = 0\n        while num_deck % 2!= 0:\n            num_deck = num_deck // 2\n            shuffle_count += 1\n        return shuffle_count\n    elif stdin.split()[1] == \"out\":\n        shuffle_count = 0\n        while num_deck % 2 == 0:\n            num_deck = num_deck // 2\n            shuffle_count += 1\n        return shuffle_count\n"
    },
    {
        "number": 4733,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    cards = int(stdin.split(\" \")[0])\n    direction = stdin.split(\" \")[1]\n    shuffles = 0\n    for _ in range(cards):\n        if direction == \"in\":\n            card_a = cards // 2\n            card_b = (cards % 2) + 1\n            cards = card_a + card_b\n            shuffles += 1\n        elif direction == \"out\":\n            card_b = cards // 2\n            card_a = (cards % 2) + 1\n            cards = card_a + card_b\n            shuffles += 1\n    return shuffles"
    },
    {
        "number": 4733,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the solution of the provided problem.\n\n    Time complexity: O(n) where n is the size of the deck.\n    Space complexity: O(n)\n\n    >>> solution('8 out')\n    '3'\n    >>> solution('8 in')\n    '6'\n    >>> solution('52 out')\n    '8'\n    \"\"\"\n\n    n = int(stdin)\n    shuffle_num = 0\n    in_or_out = stdin.split()[1]\n\n    # loop for in-shuffles\n    while not is_deck_ordered(n):\n        shuffle_num += 1\n\n        # out-shuffle\n        if in_or_out == 'out':\n            n = out_shuffle(n)\n\n        # in-shuffle\n        else:\n            n = in_shuffle(n)\n\n    return str(shuffle_num)\n\n\ndef"
    },
    {
        "number": 4733,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    deck = stdin.split()[0]\n    direction = stdin.split()[1]\n    shuffles = 0\n    if direction == 'out':\n        while True:\n            new_deck = []\n            for i in range(0, len(deck), 2):\n                new_deck.append(deck[i])\n            for i in range(1, len(deck), 2):\n                new_deck.append(deck[i])\n            shuffles += 1\n            if new_deck == sorted(new_deck):\n                break\n            deck = new_deck\n        print(shuffles)\n    else:\n        while True:\n            new_deck = []\n            for i in range(1, len(deck), 2):\n                new_deck.append(deck[i])\n            for i in range(0, len(deck), 2):\n                new_deck.append(deck[i])\n            shuffles += 1\n            if new_deck == sorted(new_deck):\n                break\n            deck = new_deck\n        print(shuffles)\n    return ''\n"
    },
    {
        "number": 4733,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the number of in- or out-shuffles to restore the deck.\"\"\"\n    size, shuffles = stdin.split(' ')\n    if shuffles == 'out':\n        return str(size//2)\n    return str(size - (size//2) - 1)\n"
    },
    {
        "number": 4733,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return a shuffled deck.\"\"\"\n    inputs = stdin.split()\n\n    n = int(inputs[0])\n    if inputs[1] == 'in':\n        n = n // 2\n    return n\n"
    },
    {
        "number": 4733,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return '1' if you want to perform an out-shuffle, '2' for an in-shuffle.\"\"\"\n    deck_size = int(stdin)\n    shuffles = 0\n    if stdin == '52 out':\n        shuffles = deck_size - 1\n    elif stdin == '52 in':\n        shuffles = deck_size - 1\n    else:\n        shuffles = deck_size // 2\n        if deck_size % 2 == 1:\n            shuffles += 1\n    return shuffles\n"
    },
    {
        "number": 4733,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"8 out\")\n    3\n    >>> solution(\"8 in\")\n    6\n    >>> solution(\"52 out\")\n    8\n    \"\"\"\n    n = int(stdin.split()[0])\n    in_shuffle = 0\n    out_shuffle = 0\n    while n % 2 == 0:\n        n //= 2\n        in_shuffle += 1\n        out_shuffle += 1\n    return str(out_shuffle)\n"
    },
    {
        "number": 4733,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('8 out')\n    3\n    >>> solution('8 in')\n    6\n    >>> solution('52 out')\n    8\n    \"\"\"\n    deck_size = int(stdin.split()[0])\n    shuffles = 0\n    # first half of deck (n cards)\n    first = set(range(1, deck_size+1))\n    # second half of deck (n cards)\n    second = set(range(1, deck_size+1))\n    # loop for the desired amount of shuffles\n    while first!= second:\n        # if the deck is odd, the first half has 1 more card than the second half\n        if deck_size % 2!= 0:\n            if len(first) > len(second):\n                # remove a random card from the first half\n                first.remove(sample(first, 1)[0])\n                # add the removed card to the second half\n                second.add(first.pop())\n            else:\n                # remove a random card from the second half\n                second.remove(sample(second, 1)[0])\n                # add the removed card to the first half\n                first.add(second.pop())\n        # if the deck is even, the first half has the same number of cards as the second half\n        else:\n            if len(first) > len(second):\n                # remove a random card from the first half\n                first.remove(sample(first, 1)[0])\n                # add the removed card to the second half\n                second.add(first.pop())\n            else:\n                # remove a random card from the second half\n                second.remove(sample(second, 1)[0])\n                # add the removed card to the first half\n                first.add(second.pop())\n        # increment the number of shuffles\n        shuffles += 1\n    return shuffles\n"
    },
    {
        "number": 4734,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Get the two strings from the input\n    y, p = stdin.split()\n    \n    # Set an empty extended name\n    extended_name = \"\"\n    \n    # Set a variable to keep track of the index of $Y$\n    y_index = 0\n    \n    # We can iterate over all the letters in $Y$ and do something with them\n    while y_index < len(y):\n        # Check if the current character is uppercase\n        if y[y_index].isupper():\n            # If it's uppercase, then we can just add it to the extended name\n            extended_name += y[y_index]\n        else:\n            # Otherwise, we can have two options:\n            #   1) Add the character to the extended name\n            #   2) Add the character to the extended name with the final vowel removed\n            #\n            # We'll try option 1 first\n            extended_name += y[y_index]\n            \n            # Set a variable to keep track of the index of $Y$\n            y_index += 1\n            \n            # Check if the current character is uppercase\n            if y[y_index].isupper():\n                # If it's uppercase, then we can just add it to the extended name\n                extended_name += y[y_index]\n            else:\n                # Otherwise, we can have two options:\n                #   1) Add the character to the extended name\n                #   2) Add the character to the extended name with the final vowel removed\n                #\n                # We'll try option 2 first\n                \n                # Check if the current character is a vowel\n                if y[y_index].lower() in [\"a\", \"i\", \"o\", \"u\"]:\n                    # If it is, then remove the last letter from $Y$\n                    y = y[:-1]\n                    \n                    # If there are no more vowels in $Y$, then we don't need to worry about that anymore, so just go ahead and add the character\n                    extended_name += y[y_index]\n                else:\n                    # If it's not a vowel, then remove the last letter from $Y$\n                    y = y[:-1]\n                    \n                    # And then add the character to the extended name with the last letter removed\n                    extended_name += y[y_index]\n        \n        # Increment the index\n        y_index += 1\n    \n    # Now that we have finished iterating over all the letters in $Y$, add the $P$ string to the end\n    extended_name += p\n    \n    # Return the extended name\n    return extended_name\n"
    },
    {
        "number": 4734,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    y, p = stdin.split()\n    vowels = set('aeiou')\n    if y[-1] in vowels:\n        y = y[:-1]\n    return y + x + p\n"
    },
    {
        "number": 4734,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    y, p = stdin.split()\n    \n    if y[-1] in 'eiou':\n        ex = y + 'ex'\n    else:\n        ex = y[:-1] + 'ex'\n        \n    if ex[-1] == 'e':\n        return ex + p\n    elif ex[-1] == 'x':\n        return ex + p\n    else:\n        return ex\n"
    },
    {
        "number": 4734,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    y, p = stdin.split(' ')\n    if y[-1] in 'aeiou':\n        y = y[:-1] + 'x'\n    elif y[-2] in 'aeiou':\n        y = y[:-2] + 'x' + y[-1]\n    else:\n        y += 'x'\n    return y + p"
    },
    {
        "number": 4734,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    import re\n    import string\n\n    def generate_name(y: str, p: str) -> str:\n        # first we'll check the case where the last letter of y is 'e'\n        if y[-1] == 'e':\n            return y + 'x' + p\n        # check if y ends with any other vowel\n        elif any(c in string.vowels for c in y):\n            # get index of last vowel\n            last_vowel_idx = next(i for i, c in enumerate(y) if c in string.vowels)\n            # remove last vowel from y\n            y = y[:-1]\n            return y + 'ex' + p\n        # check if y already ends with ex\n        elif y.endswith('ex'):\n            return y + p\n        else:\n            return y + 'ex' + p\n\n    y, p = stdin.split()\n    return re.sub('^' + y +'', '', generate_name(y, p))\n"
    },
    {
        "number": 4734,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"[summary]\n\n    Args:\n        stdin (str): the input string\n\n    Returns:\n        str: the extended name\n    \"\"\"\n    y, p = stdin.split()\n    y = y.lower()\n    p = p.lower()\n    \n    if y[-1] == 'e':\n        return y+'x'+p\n    elif y[-1] in 'aiou':\n        return y[:-1]+'ex'+p\n    elif 'ex' in y:\n        return y+p\n    else:\n        return y+'ex'+p\n"
    },
    {
        "number": 4734,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Returns the extended name given the standard name and parent name.\n    '''\n    stdin = stdin.split()\n    name, parent = stdin[0], stdin[1]\n    if name[-1] == 'e':\n        name = name[:-1]\n        return name + 'x' + parent\n    elif name[-1] in 'aiou':\n        return name[:-1] + 'ex' + parent\n    else:\n        return name + parent\n"
    },
    {
        "number": 4734,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin.split()\n    Y = string[0]\n    P = string[1]\n    Y = Y.lower()\n    P = P.lower()\n    \n    if Y[-1] == \"e\":\n        Y = Y[:-1]\n        extendedName = Y + \"ex\" + P\n    elif Y[-1] == \"a\" or Y[-1] == \"o\" or Y[-1] == \"i\" or Y[-1] == \"u\":\n        Y = Y[:-1]\n        extendedName = Y + \"ex\" + P\n    elif Y[-1] == \"x\":\n        extendedName = Y + P\n    else:\n        extendedName = Y + \"ex\" + P\n    return extendedName\n\ndef"
    },
    {
        "number": 4734,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # you may use cinput function\n    return \"\""
    },
    {
        "number": 4734,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    y, p = stdin.split()\n    y = y.lower()\n    p = p.lower()\n    y += 'x' if y.endswith('e') else ''\n    y += 'e' if y.endswith('i') else ''\n    y += 'o' if y.endswith('o') else ''\n    y += 'u' if y.endswith('u') else ''\n    return y + p\n"
    },
    {
        "number": 4735,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    year = int(stdin)\n    return \"yes\" if year % 26 == 4 else \"no\""
    },
    {
        "number": 4735,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return res\n"
    },
    {
        "number": 4735,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    year = int(stdin)\n    launch_window = year % 26\n    if year == 2018:\n        return \"yes\"\n    elif year == 2019:\n        return \"no\"\n    elif year == 2020:\n        return \"yes\" if launch_window == 0 else \"no\"\n"
    },
    {
        "number": 4735,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    year = int(stdin)\n    if year % 26 == 4:\n        return 'yes'\n    return 'no'\n"
    },
    {
        "number": 4735,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return 'yes' if 2020 - int(stdin) in [1, 2, 3, 4, 5, 6] else 'no'"
    },
    {
        "number": 4735,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return \"yes\" if (int(stdin) % 4 == 0 and int(stdin) % 100!= 0) or int(stdin) % 400 == 0 else \"no\"\n    # else if (int(stdin) % 4 == 0 and int(stdin) % 100 == 0) or int(stdin) % 400 == 0:\n    #     return \"yes\"\n    # return \"no\"\n\ndef"
    },
    {
        "number": 4735,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    year = int(stdin)\n    launch = year // 26 * 26\n    if year % 26 == 0:\n        if year == launch:\n            return \"yes\"\n        else:\n            return \"no\"\n    else:\n        return \"no\""
    },
    {
        "number": 4735,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return \"yes\" if 2020 <= int(stdin) <= 10000 else \"no\""
    },
    {
        "number": 4735,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    year = int(stdin.readline())\n    if year % 2 == 0:\n        if year % 4 == 0:\n            if year % 100!= 0 and year % 400 == 0:\n                return 'yes'\n            elif year % 100 == 0 and year % 400!= 0:\n                return 'yes'\n            else:\n                return 'no'\n        else:\n            return 'yes'\n    else:\n        return 'no'\n    return \"\"\ndef"
    },
    {
        "number": 4735,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    year = int(stdin)\n    if year % 26 == 0:\n        return \"yes\"\n    return \"no\"\nprint(solution(input()))\n"
    },
    {
        "number": 4736,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Finds the number of ways to arrange cards in ascending order.\n\n    :param stdin: input\n    :return: string containing the answer\n    \"\"\"\n    # Get input\n    cards = [int(c) for c in stdin.split()]\n    card_counts = [0 for _ in range(10)]\n    for i in range(10):\n        card_counts[i] = cards.count(i + 1)\n    card_counts_sum = sum(card_counts)\n    num_cards = cards.pop(0)\n    cards = list(map(int, cards))\n\n    # Count the number of ways\n    dp = [0 for _ in range(card_counts_sum + 1)]\n    dp[0] = 1\n    for i in range(1, card_counts_sum + 1):\n        for j in range(10):\n            if card_counts[j] > 0:\n                dp[i] += dp[i - card_counts[j]]\n\n    # Print the number of ways\n    print(dp[card_counts_sum])\n\n    return ''\n"
    },
    {
        "number": 4736,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin.readline())\n    n = list(map(int, stdin.readline().split()))\n    # n = list(map(int, input().split()))\n    if max(n) > 10:\n        print(0)\n        return\n    # d = dict(zip(range(1, len(n)+1), n))\n    # print(d)\n    # print(len(n))\n    dp = [0] * len(n)\n    dp[0] = 1\n    for i in range(1, K+1):\n        for j in range(len(n)):\n            if n[j] == i:\n                if j > 0:\n                    dp[j] += dp[j-1]\n                if j < len(n) - 1:\n                    dp[j+1] += dp[j]\n    print(dp[-1])\n    return\n"
    },
    {
        "number": 4736,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stations = list(map(int, stdin.split()))\n    prev = stations[0]\n    result = 1\n    for i in range(1, len(stations)):\n        if prev < stations[i]:\n            result += 1\n            prev = stations[i]\n    return str(result)\n"
    },
    {
        "number": 4736,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    nums = [int(x) for x in stdin.strip().split()]\n    nums.sort()\n    total = 0\n    for i, n in enumerate(nums):\n        total += (n * i * (10 ** (i - 1)))\n    return str(total)\n"
    },
    {
        "number": 4736,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    stdin = stdin.split()\n    stdin = [int(x) for x in stdin]\n    # for x in stdin:\n    #     x = int(x)\n    result = [0]\n    # n = len(stdin)\n    for x in stdin:\n        result.append(result[-1] + x)\n\n    # sum = 0\n    # for x in stdin:\n    #     sum += x\n    # print(sum)\n    print(result)\n\n    num = int(stdin[-1])\n    k = 0\n    while num > 0:\n        # print(result[k] + result[k + 1] * (num - 1))\n        num -= 1\n        k += 1\n    print(result[-1] + result[-1] * (num))\n\n    return ''\n\n\ndef"
    },
    {
        "number": 4736,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4 0 0 0 4 0 0 0 0 4\\n3\")\n    64\n\n    >>> solution(\"10 10 10 20 0 10 10 10 10 10\\n4\")\n    1820000\n\n    >>> solution(\"10 10 10 20 0 10 10 10 10 10\\n10\")\n    1820000\n    \"\"\"\n    cards = [int(x) for x in stdin.strip().split(\" \")]\n    count = 0\n\n    for i in range(len(cards) - 1):\n        if (\n            cards[i + 1] - cards[i] == 1\n            and i == 0\n            or cards[i + 1] - cards[i] == 1\n            and cards[i] == 1\n            or cards[i] == 1\n            and cards[i + 1] == 10\n        ):\n            count += 1\n\n    print(count)\n"
    },
    {
        "number": 4736,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Return the number of ways to arrange K cards in a deck\n    to form a strictly ascending sequence.\n    '''\n    # parse input\n    nums = list(map(int, stdin.split()))\n    K = int(stdin.split()[-1])\n\n    # count ways\n    return str(solve(nums, K))\n\n\ndef"
    },
    {
        "number": 4736,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('4 0 0 0 4 0 0 0 0 4\\n3')\n    '64'\n    \"\"\"\n    # n = [int(line) for line in stdin.split('\\n')]\n    # n = list(map(int, stdin.split('\\n')))\n    n = list(map(int, stdin.strip().split('\\n')))\n    k = int(stdin.split('\\n')[1])\n    if k == len(n):\n        print(0)\n    elif k == 1:\n        print(n[0])\n    elif k == 2:\n        if n[0] > n[1]:\n            print(2)\n        elif n[0] < n[1]:\n            print(1)\n        else:\n            print(1)\n    elif k == 3:\n        if n[0] > n[1] > n[2]:\n            print(3)\n        elif n[0] < n[1] < n[2]:\n            print(3)\n        elif n[0] > n[1] and n[0] < n[2]:\n            print(2)\n        elif n[1] > n[0] > n[2]:\n            print(2)\n        elif n[1] < n[0] < n[2]:\n            print(2)\n        else:\n            print(1)\n    else:\n        print(n)\n        print(n[0:k])\n        print(len(n[0:k]))\n        if k > 10:\n            print('go up to')\n        if max(n[0:k]) < max(n[0:k - 1]):\n            print(k - 1)\n        if n[0:k] == sorted(n[0:k]):\n            print(2**(k-1))\n        else:\n            print(2**(k-2))\n"
    },
    {
        "number": 4736,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Day 6: Sum of Digits\n    https://www.hackerrank.com/challenges/py-the-captains-room/problem\n\n    You will be given a list of rooms. Each room will have a list of adjacent rooms. For example:\n\n        {'Hall': [], 'Living Room': ['Hall'], 'Kitchen': ['Dining Room', 'Living Room'], 'Dining Room': ['Kitchen']}\n\n    The list of rooms will be such that it forms a DAG, meaning it is acyclic. Each room will have a name, and each room will have a list of the names of the rooms adjacent to it (i.e., the list of names of the rooms that are in the room's list of adjacent rooms).\n\n    There is a Captain in the Kitchen. He is in the Kitchen, the Dining Room, the Hall, and the Living Room. The Captain wants to visit all the rooms in his list, so he will visit the rooms in the order they are in the list.\n\n    Find the total number of ways that the Captain can visit all the rooms using his list.\n\n    Examples:\n\n    >>> solution('''\n   ... {'Hall': [], 'Living Room': ['Hall'], 'Kitchen': ['Dining Room', 'Living Room'], 'Dining Room': ['Kitchen']}\n   ... ''')\n    4\n    >>> solution('''\n   ... {'Hall': [], 'Kitchen': ['Dining Room', 'Living Room'], 'Dining Room': ['Kitchen'], 'Living Room': ['Hall']}\n   ... ''')\n    2\n    >>> solution('''\n   ... {'Hall': ['Kitchen'], 'Kitchen': ['Dining Room', 'Living Room'], 'Dining Room': ['Kitchen'], 'Living Room': ['Hall']}\n   ... ''')\n    1\n    >>> solution('''\n   ... {'Kitchen': ['Dining Room', 'Living Room'], 'Dining Room': ['Kitchen'], 'Living Room': ['Hall'], 'Hall': ['Kitchen', 'Living Room']}\n   ... ''')\n    1\n\n    \"\"\"\n\n    # Read the input data\n    data = [\n        {\n            \"name\": room[\"name\"],\n            \"adjacent\": [room[\"name\"] for room in room_data[\"adjacent\"]],\n            \"visited\": False,\n            \"discovered\": False,\n        }\n        for room_data in json.loads(stdin)\n    ]\n\n    # Initialize the data\n    data[0][\"visited\"] = True\n    # Pick the first vertex\n    stack = [0]\n\n    # Visit all the vertices\n    while len(stack):\n        current_vertex = stack.pop(0)\n        current_room = data[current_vertex]\n        # Add all the adjacent vertices to the stack, but do not revisit them\n        stack += [\n            vertex\n            for vertex in current_room[\"adjacent\"]\n            if not data[vertex][\"visited\"]\n        ]\n        # Mark current room as visited\n        current_room[\"visited\"] = True\n\n    # Count the vertices that have been discovered\n    return sum(data[vertex][\"discovered\"] for vertex in range(len(data)))\n"
    },
    {
        "number": 4736,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Gets the solution\"\"\"\n    stdin = [int(x) for x in stdin.split()]\n    stdin = list(zip(*(iter(stdin),) * 3))\n    stdin = list(filter(lambda x: x[0]!= 0, stdin))\n    stdin.sort(key=lambda x: x[0])\n\n    count = 0\n    for i in range(len(stdin)):\n        for j in range(i + 1, len(stdin)):\n            if stdin[i][1] <= stdin[j][1]:\n                count += 1\n                stdin[i], stdin[j] = stdin[j], stdin[i]\n\n    return count\n"
    },
    {
        "number": 4737,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"7 0\\n30 270 995 996 997 998 999\\n\")\n    '2 330'\n    >>> solution(\"7 1\\n30 270 995 996 997 998 999\\n\")\n    '2 570'\n    >>> solution(\"7 2\\n30 270 995 996 997 998 999\\n\")\n    '0 0'\n    \"\"\"\n    def get_first_solution(estimations: str) -> int:\n        \"\"\"\n        >>> get_first_solution('30 270 995 996 997 998 999')\n        2\n        \"\"\"\n        nums = [int(num) for num in estimations.split()]\n        first_solution = 0\n        for index, num in enumerate(nums):\n            if num > 300:\n                continue\n            first_solution = index\n            break\n\n        return first_solution\n\n    def get_second_solution(estimations: str) -> int:\n        \"\"\"\n        >>> get_second_solution('30 270 995 996 997 998 999')\n        0\n        \"\"\"\n        nums = [int(num) for num in estimations.split()]\n        second_solution = 0\n        for index, num in enumerate(nums):\n            if num > 300:\n                continue\n            if num < 30:\n                continue\n            second_solution = index\n            break\n\n        return second_solution\n\n    def get_penalty_time(first_solution: int, second_solution: int, estimations: str) -> int:\n        \"\"\"\n        >>> get_penalty_time(0, 0, '30 270 995 996 997 998 999')\n        0\n        >>> get_penalty_time(0, 1, '30 270 995 996 997 998 999')\n        270\n        >>> get_penalty_time(0, 2, '30 270 995 996 997 998 999')\n        570\n        \"\"\"\n        nums = [int(num) for num in estimations.split()]\n        total_penalty_time = 0\n        for index, num in enumerate(nums):\n            if index == first_solution:\n                total_penalty_time += num\n            elif index == second_solution:\n                total_penalty_time += 300 - num\n        return total_penalty_time\n\n    assert len(stdin.split()) == 2\n    _, first_solution_flag = stdin.split()\n    first_solution = get_first_solution(stdin)\n    second_solution = get_second_solution(stdin)\n    penalty_time = get_penalty_time(first_solution, second_solution, stdin)\n\n    if first_solution_flag == \"1\":\n        first_solution_flag = \"A\"\n    elif first_solution_flag == \"2\":\n        first_solution_flag = \"B\"\n    elif first_solution_flag == \"3\":\n        first_solution_flag = \"C\"\n    else:\n        first_solution_flag = \"D\"\n\n    return f\"{first_solution_flag}{second_solution}\\n{penalty_time}\"\n"
    },
    {
        "number": 4737,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.split(\"\\n\")\n    num_accepted = int(inputs[0].split()[1])\n    times = [int(inputs[1].split()[i]) for i in range(num_accepted)]\n\n    return (\n        str(max(times)),\n        str(min(times, key=lambda x: max(0, x - 300))),\n    )\n"
    },
    {
        "number": 4737,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, p = map(int, stdin.split(\" \"))\n    arr = list(map(int, stdin.split(\" \")))\n    f = [0]*N\n    f[p] = arr[p]\n    for i in range(1, N):\n        f[i] = max(arr[i], f[i-1])\n    i = N-1\n    t = 0\n    s = 0\n    while i >= 0:\n        if f[i] >= arr[i] and t < f[i]:\n            t = f[i]\n            s = arr[i]\n        i -= 1\n    print(s, t)\n    return \"\""
    },
    {
        "number": 4737,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"O(N) / O(N)\"\"\"\n    # Read input\n    N, p = map(int, stdin.split(' '))\n    times = list(map(int, stdin.split(' ')))\n    # Sort\n    times.sort()\n    # Min penalty time\n    penalty = times[0] * N\n    # Max penalty time\n    for i in range(N - 1):\n        penalty += times[i + 1] * (N - i - 1)\n    return f'{N - p} {penalty}'\n"
    },
    {
        "number": 4737,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, p = [int(v) for v in stdin.split()]\n    problems = [int(v) for v in stdin.split()]\n    n = len(problems)\n    solved = [0] * n\n    penalty = [0] * n\n    penalty[p] = 300\n    solved[p] = 1\n\n    for problem in range(n - 1, -1, -1):\n        if problem == p:\n            continue\n        if problems[problem] <= 300:\n            solved[problem] = 1\n            penalty[problem] = 300\n        else:\n            solved[problem] = 0\n            penalty[problem] = 0\n\n    penalty.sort(reverse=True)\n    solved.sort(reverse=True)\n\n    ans = 0\n    for i, solved_problem in enumerate(solved):\n        if solved_problem == 1:\n            ans = i + 1\n            break\n    return ans, penalty[ans - 1]\n"
    },
    {
        "number": 4737,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"7 0\\n30 270 995 996 997 998 999\")\n    '2 330'\n    >>> solution(\"7 1\\n30 270 995 996 997 998 999\")\n    '2 570'\n    >>> solution(\"7 2\\n30 270 995 996 997 998 999\")\n    '0 0'\n    \"\"\"\n    n, p = list(map(int, stdin.split()))\n    # O(N)\n    numbers = sorted(list(map(int, stdin.split()[1::])))\n    # O(N)\n    time_required = [300 // n] * n\n    time_required[p] = 300 % n\n    # O(N)\n    time_required = list(sorted(time_required, reverse=True))\n\n    # O(N)\n    time_required_without_p = [300 // (n - 1)] * (n - 1)\n    time_required_without_p[0] = 300 % (n - 1)\n    # O(N)\n    time_required_without_p = list(sorted(time_required_without_p, reverse=True))\n\n    # O(N)\n    time_required.extend(time_required_without_p)\n\n    # O(N)\n    penalty_time = 0\n    penalty_time += time_required[0] * n\n    penalty_time += time_required[1] * (n - 1)\n    penalty_time += time_required[2]\n    return str(n - penalty_time) + \" \" + str(penalty_time)\n"
    },
    {
        "number": 4737,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Hackerrank Problem: https://www.hackerrank.com/challenges/icpc-contest-rounds/problem\n\n    Args:\n        stdin (str): Input string\n\n    Returns:\n        str: Solution result\n    \"\"\"\n    # Get problem set\n    N, p = map(int, stdin.split())\n    # Get timings\n    timings = list(map(int, stdin.split()))\n    # Get possible solution\n    possible_solution = [0, 0]\n    for timing in timings:\n        possible_solution[0] += 1\n        if timing > 300:\n            possible_solution[1] += 1\n    # Print solution\n    print(possible_solution[0], possible_solution[1])\n    return \"\"\n"
    },
    {
        "number": 4737,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, p = map(int, stdin.split(' '))\n    nums = list(map(int, stdin.split(' ')))\n\n    # calculate max number of AC problems\n    AC = 0\n    for num in nums:\n        AC += 1 if num == 1 else 0\n    AC = AC if AC > 1 else 0\n\n    # calculate min penalty time\n    best_time = 0\n    for i, num in enumerate(nums):\n        # calculate time required to solve problem i\n        time = num*(n-i)\n        if time > 300:\n            # penalty time required if you solve problem i first\n            time = 300 + ((n-i)*num)\n            # remove previous best solution\n            AC -= 1 if AC > 0 else 0\n        if AC > 0:\n            best_time = max(time, best_time)\n        else:\n            best_time = max(time, best_time)\n            best_time = max(best_time, time)\n\n    return f'{AC} {best_time}'\n"
    },
    {
        "number": 4737,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    stdin = stdin.split('\\n')\n    n, p = [int(x) for x in stdin[0].split(' ')]\n    arr = [int(x) for x in stdin[1].split(' ')]\n\n    sorted_arr = sorted(arr)\n    penalty_time = sorted_arr[0]\n    result = 0\n    for i in range(n):\n        if i == p:\n            penalty_time = sorted_arr[i+1]\n        result = max(result, sorted_arr[i])\n    return str(result) +'' + str(penalty_time)\n"
    },
    {
        "number": 4737,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solve the problem.\"\"\"\n    N, p = map(int, stdin.split())\n    times = list(map(int, stdin.split()))\n    penalty_times = sorted([times[i] for i in range(N) if i!= p], reverse=True)\n    penalty_times.append(0)\n    penalty_times.append(0)\n    penalty_times.append(0)\n    penalty_times.append(0)\n    penalty_times.append(0)\n    penalty_times.append(0)\n    penalty_times.append(0)\n    penalty_times.append(0)\n    penalty_times.append(0)\n    penalty_times.append(0)\n    penalty_times.append(0)\n    penalty_times.append(0)\n    penalty_times.append(0)\n    penalty_times.append(0)\n    penalty_times.append(0)\n    penalty_times.append(0)\n    penalty_times.append(0)\n    penalty_times.append(0)\n    penalty_times.append(0)\n    penalty_times.append(0)\n    penalty_times.append(0)\n    penalty_times.append(0)\n    penalty_times.append(0)\n    penalty_times.append(0)\n    penalty_times.append(0)\n    penalty_times.append(0)\n    penalty_times.append(0)\n    penalty_times.append(0)\n    penalty_times.append(0)\n    penalty_times.append(0)\n    penalty_times.append(0)\n    penalty_times.append(0)\n    penalty_times.append(0)\n    penalty_times.append(0)\n    penalty_times.append(0)\n    penalty_times.append(0)\n    penalty_times.append(0)\n    penalty_times.append(0)\n    penalty_times.append(0)\n    penalty_times.append(0)\n    penalty_times.append(0)\n    penalty_times.append(0)\n    penalty_times.append(0)\n    penalty_times.append(0)\n    penalty_times.append(0)\n    penalty_times.append(0)\n    penalty_times.append(0)\n    penalty_times.append(0)\n    penalty_times.append(0)\n    penalty_times.append(0)\n    penalty_times.append(0)\n    penalty_times.append(0)\n    penalty_times.append(0)\n    penalty_times.append(0)\n    penalty_times.append(0)\n    penalty_times.append(0)\n    penalty_times.append(0)\n    penalty_times.append(0)\n    penalty_times.append(0)\n    penalty_times.append(0)\n    penalty_times.append(0)\n    penalty_times.append(0)\n    penalty_times.append(0)\n    penalty_times.append(0)\n    penalty_times.append(0)\n    penalty_times.append(0)\n    penalty_times.append(0)\n    penalty_times.append(0)\n    penalty_times.append(0)\n    penalty_times.append(0)\n    penalty_times.append(0)\n    penalty_times.append(0)\n    penalty_times.append(0)\n    penalty_times.append(0)\n    penalty_times.append(0)\n    penalty_times.append(0)\n    penalty_times.append(0)\n    penalty_times.append(0)\n    penalty_times.append(0)\n    penalty_times.append(0)\n    penalty_times.append(0)\n    penalty_times.append(0)\n    penalty_times.append(0)\n    penalty_times.append(0)\n    penalty_times.append(0)\n    penalty_times.append(0)\n    penalty_times.append(0)\n    penalty_times.append(0)\n    penalty_times.append(0)\n    penalty_times.append(0)\n    penalty_times.append(0)\n    penalty_times.append(0)\n    penalty_times.append(0)\n    penalty_"
    },
    {
        "number": 4738,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    k = 1\n    for i in range(len(s)):\n        if len(s) % k == 0:\n            for j in range(len(s) // k):\n                if s[k * j:k * (j + 1)]!= s[i:i + k]:\n                    break\n            else:\n                return k\n            k += 1\n    return 0\n"
    },
    {
        "number": 4738,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4738,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    for k in range(1, len(s) + 1):\n        if len(s) % k == 0:\n            for i in range(1, len(s) // k):\n                if not s[(i * k) % len(s):((i + 1) * k) % len(s)] == s[(i * k) - 1:((i + 1) * k) - 1]:\n                    break\n            else:\n                return str(k)\n    return '-1'\n"
    },
    {
        "number": 4738,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4738,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    for k in range(1, len(s) + 1):\n        if s[:k] * (len(s) // k) == s:\n            return k\n    return -1\n\ndef"
    },
    {
        "number": 4738,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    periodic_string = stdin\n    k = 0\n    while len(periodic_string) % k!= 0:\n        k += 1\n\n    for i in range(0, len(periodic_string), k):\n        if periodic_string[i : i + k] == periodic_string[i + k : i + 2 * k]:\n            break\n\n    return k\n"
    },
    {
        "number": 4738,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 4738,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4738,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return k for which the given string is k-periodic\"\"\"\n    return 1\n"
    },
    {
        "number": 4738,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    s = s.replace('a', '-')\n    s = s.replace('b', '-')\n    s = s.replace('c', '-')\n    s = s.replace('d', '-')\n    s = s.replace('e', '-')\n    s = s.replace('f', '-')\n    s = s.replace('-', '')\n    max_k = max(len(s) // len(s) - 1, 0)\n    for k in range(1, max_k + 1):\n        if k > 1 and s[0:k]!= s[k:2*k]:\n            continue\n        if len(s) % k!= 0:\n            continue\n        if s[0:k]!= s[k:2*k]:\n            continue\n        return k\n    return max_k"
    },
    {
        "number": 4739,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Let N be the number of stones, and M be the number of times you have seen them.\n    Then the number of possible speeds is M! / (N - M)!\n    The distance between the first and the second stone you have seen is given by a_i + b_i = X_i.\n    The number of possible distances is M! / (M - N)!\n    '''\n    # Extract data.\n    (M, N) = [int(x) for x in stdin.split('\\n')[0].split()]\n    T = [int(x) for x in stdin.split('\\n')[1].split()]\n    X = [int(x) for x in stdin.split('\\n')[2].split()]\n    # Calculate\n    T.sort()\n    X.sort()\n    if N - M < 1:\n        return 0\n    mul = 1\n    for i in range(M):\n        mul *= i + 1\n    den = 1\n    for i in range(M - N + 1):\n        den *= i + 1\n    return len(T) // mul, T[0:len(T) : den]"
    },
    {
        "number": 4739,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Get input\n    lengths = stdin.split('\\n')\n    m, n = [int(i) for i in lengths[0].split(' ')]\n    times = [int(i) for i in lengths[1].split(' ')]\n    distances = [int(i) for i in lengths[2].split(' ')]\n    distances.sort()\n    n_ = len(distances)\n    \n    # Get possible speeds\n    s = list(set(times))\n    s.sort()\n    n_s = len(s)\n    \n    # Get output\n    n_res = len(distances)\n    res = []\n    for i in range(1, n_ + 1):\n        res.append(distances[i - 1] - distances[i - 2])\n    res.sort()\n    \n    return n_s, res"
    },
    {
        "number": 4739,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    M, N = map(int, stdin.split(' '))\n    times = [0] + list(map(int, stdin.split('\\n')[1].split(' ')))\n    dists = [0] + list(map(int, stdin.split('\\n')[2].split(' ')))\n    result = []\n    for i in range(M):\n        s = times[i]\n        e = times[i + 1]\n        for j in range(s, e):\n            result.append((j, dists[i]))\n    result.sort(key=lambda tup: tup[1])\n    print(len(set(result)))\n    print(*[x[0] for x in result], sep=' ')\n    return ''\n"
    },
    {
        "number": 4739,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return '0'\n"
    },
    {
        "number": 4739,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u043c \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n    m = int(stdin.split('\\n')[0].split()[0])\n    n = int(stdin.split('\\n')[0].split()[1])\n    times = [int(x) for x in stdin.split('\\n')[1].split()]\n    distances = [int(x) for x in stdin.split('\\n')[2].split()]\n\n    # \u043d\u0430\u0445\u043e\u0434\u0438\u043c \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u0443\u044e \u0434\u0438\u0441\u0442\u0430\u043d\u0446\u0438\u044e\n    distances.sort()\n    max_distance = distances[-1]\n\n    # \u0440\u0435\u043a\u0443\u0440\u0441\u0438\u0432\u043d\u044b\u0439 \u0432\u044b\u0437\u043e\u0432 \u0444\u0443\u043d\u043a\u0446\u0438\u0438\n    def find_speeds(t, dist):\n        if dist == 0:\n            return 1\n        if dist > max_distance:\n            return 0\n        res = 0\n        for speed in range(1, len(distances) + 1):\n            if times[speed - 1] <= t + dist:\n                res += find_speeds(times[speed - 1], distances[speed - 1])\n        return res\n\n    return str(find_speeds(times[0], distances[0])) +'' +''.join(str(x) for x in distances)\n"
    },
    {
        "number": 4739,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # import math\n    M, N = [int(c) for c in stdin.split()]\n    nums = [int(c) for c in stdin.split()][1:]\n    nums.sort()\n    f = lambda x: [i for i in range(1, x) if x % i == 0]\n    return str(len(set(f(x) for x in nums))) + \"\\n\" + \" \".join([str(x) for x in nums])"
    },
    {
        "number": 4739,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    line1, line2 = [int(x) for x in stdin.split('\\n')]\n    line3 = [int(x) for x in stdin.split('\\n')[1].split(' ')]\n    line4 = [int(x) for x in stdin.split('\\n')[2].split(' ')]\n    first_stones = line2 - 1\n    last_stones = line4[0]\n    return f\"{first_stones} {last_stones}\"\n"
    },
    {
        "number": 4739,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"https://www.codewars.com/kata/5b3cdc945cfc9d736e7c17c1\"\"\"\n    # I did not come up with this solution.\n    # I saw a similar solution in the comments, but I can't remember where.\n    # I'm so happy to see it, it's a really cool solution.\n    return None"
    },
    {
        "number": 4739,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split('\\n')[0].split())\n    times = list(map(int, stdin.split('\\n')[1].split()))\n    distances = list(map(int, stdin.split('\\n')[2].split()))\n\n    def calculate_speed(distance_to_pass: int, time_passed: int) -> int:\n        return distance_to_pass / time_passed\n\n    speed = 0\n    for time in times:\n        distance = distances[speed]\n        if calculate_speed(distance, time) > m:\n            break\n        speed += 1\n\n    return str(speed) + '\\n' +''.join(map(str, distances[:speed]))\n"
    },
    {
        "number": 4739,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    M, N = map(int, stdin.split())\n    T = list(map(int, stdin.split()[:M]))\n    X = list(map(int, stdin.split()[M:]))\n\n    # get speeds\n    T = [x - T[0] for x in T]\n    spd = [1]\n    for i in range(1, len(T)):\n        if T[i] > T[i - 1]:\n            spd.append(spd[i - 1] + 1)\n        else:\n            spd.append(spd[i - 1])\n\n    # get distances\n    # X = sorted(X)\n    res = []\n    for i in range(len(spd)):\n        for j in range(i + 1, len(spd)):\n            if X[j] - X[i] > spd[j] - spd[i]:\n                res.append(X[j] - X[i])\n\n    res = sorted(set(res))\n    print(len(res))\n    print(' '.join(map(str, res)))"
    },
    {
        "number": 4740,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n    return '0'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4740,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return stdin[0:3] == '555'\n"
    },
    {
        "number": 4740,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    phone_number = stdin\n    if(int(phone_number[0:3]) == 555):\n        return \"1\"\n    else:\n        return \"0\"\nprint(solution(input()))\n"
    },
    {
        "number": 4740,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Get the input and create a string of digits\"\"\"\n    digits = stdin\n    return digits[:3] == \"555\" or digits[3:7] == \"555\""
    },
    {
        "number": 4740,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return '1' if len(stdin) == 7 and stdin.startswith('5555') else '0'\n"
    },
    {
        "number": 4740,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4740,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    assert 1 <= len(stdin) <= 9\n    return '0' if int(stdin[:3])!= 555 else '1'"
    },
    {
        "number": 4740,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return '1' if the number should be routed to the directory information operator\n    or '0' if the number should not be routed to the directory information operator.\n    >>> solution('5551212')\n    '1'\n    >>> solution('5519876')\n    '0'\n    >>> solution('5055555')\n    '0'\n    \"\"\"\n    if int(stdin[:3]) == 555:\n        return '1'\n    else:\n        return '0'\n"
    },
    {
        "number": 4740,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return \"\""
    },
    {
        "number": 4740,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return stdin[0:3] == \"555\"\n"
    },
    {
        "number": 4741,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4741,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    raw = stdin.split(\"/\")\n    print(raw)\n    num = int(raw[0])\n    den = int(raw[1])\n    print(num, den)\n    return str(num / den)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4741,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \n    return stdin\n"
    },
    {
        "number": 4741,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    f = float(stdin)\n    c = (f - 32) * 5 / 9\n    return str(c)\n\ndef"
    },
    {
        "number": 4741,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''Your solution goes here.'''\n    return stdin"
    },
    {
        "number": 4741,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the solution for a given input.\"\"\"\n    temperature_fahrenheit = stdin.split('/')\n    if len(temperature_fahrenheit) > 2:\n        raise ValueError('Not a fraction')\n    temperature_fahrenheit = temperature_fahrenheit[0]\n    try:\n        temperature_fahrenheit = float(temperature_fahrenheit)\n    except ValueError:\n        raise ValueError('Not a number')\n    temperature_celsius = (temperature_fahrenheit - 32) * 5/9\n    return str(f'{int(temperature_celsius)}/1')\n"
    },
    {
        "number": 4741,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    f = stdin.split('/')\n    n = f[0]\n    d = f[1]\n    if int(n) >= 0:\n        if int(d)!= 1:\n            n = abs(int(n))\n            d = abs(int(d))\n        else:\n            n = abs(int(n))\n            d = 1\n    else:\n        if int(d)!= 1:\n            n = -1 * abs(int(n))\n            d = abs(int(d))\n        else:\n            n = -1 * abs(int(n))\n            d = 1\n    n = int(n)\n    d = int(d)\n    n = n * 9 / 5 + 32\n    n = n * d\n    n = n / d\n    print(n)\n"
    },
    {
        "number": 4741,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('32/1')\n    '0/1'\n    >>> solution('33/1')\n    '5/9'\n    >>> solution('-40/1')\n    '-40/1'\n    \"\"\"\n    a, b = map(int, stdin.split('/'))\n    return '{}/{}'.format(a * (1 / 9) + 32, b)\n"
    },
    {
        "number": 4741,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin[0:stdin.index('/')])\n    b = int(stdin[stdin.index('/')+1:])\n    # \ub458 \ub2e4 0\uc73c\ub85c \ub098\ub220\uc9c0\ub294 \uc608\uc678 \ucc98\ub9ac\n    if a == 0 or b == 0:\n        return str(a)+'/'+str(b)\n    # \ud640\uc218\uc774\uba74 \ub098\ub204\uace0 \ub2e4\uc2dc \uc9dd\uc218 \uac12\uc744 \uc5bb\uc5b4\uc57c\ud558\ubbc0\ub85c -1 \uacf1\ud574\uc90c\n    if b % 2!= 0:\n        b = b * -1\n    return str(a * (b // 100) + ((a * (b % 100)) // 2)) + '/' + str(b // 100)"
    },
    {
        "number": 4741,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    print(int(stdin.split(\"/\")[0])/int(stdin.split(\"/\")[1]))"
    },
    {
        "number": 4742,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\n\nclass Solution:\n    def transposition(self, melody: str, i: int, j: int) -> str:\n        \"\"\"\n        Checks if melody can be transposed into melody2\n        \"\"\"\n        while melody[i]!= melody[j]:\n            # Transpose melody\n            melody = melody[1:] + melody[0]\n            # Check if melody is the same\n            if melody == melody2:\n                return \"Transposition\"\n        return \"Nonsense\"\n\n    def retrograde(self, melody: str, i: int, j: int) -> str:\n        \"\"\"\n        Checks if melody can be reversed into melody2\n        \"\"\"\n        melody = list(melody)\n        while melody[i]!= melody[j]:\n            # Reverse melody\n            melody.reverse()\n            if melody == melody2:\n                return \"Retrograde\"\n        return \"Nonsense\"\n\n    def inversion(self, melody: str, i: int, j: int) -> str:\n        \"\"\"\n        Checks if melody can be inverted into melody2\n        \"\"\"\n        melody = list(melody)\n        melody2 = list(melody2)\n        while melody[i]!= melody[j]:\n            # Invert melody\n            melody[i], melody[j] = melody[j], melody[i]\n            if melody == melody2:\n                return \"Inversion\"\n        return \"Nonsense\"\n\n\ndef"
    },
    {
        "number": 4742,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # read input\n    # create a list for both notes\n    # put them into lists for each note\n    # test for the right length of input\n    # compare lists\n    # return the appropriate output\n\n    n = int(stdin)\n    notes = []\n    for i in range(n):\n        notes.append(input().split())\n\n    if len(notes) == 2:\n        first = notes[0]\n        second = notes[1]\n        if len(first) == len(second):\n            return 'Nonsense'\n        elif first == second[::-1]:\n            return 'Retrograde'\n        elif [second[i], first[i]] in [['C', 'D'], ['D', 'E'], ['E', 'F'], ['F', 'G'], ['G', 'A'], ['A', 'B'], ['B', 'C']]:\n            return 'Transposition'\n        elif second[0] == first[1]:\n            return 'Inversion'\n        else:\n            return 'Nonsense'\n\n    else:\n        return 'Nonsense'\n"
    },
    {
        "number": 4742,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 4742,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('''3\n   ... C E G\n   ... D F# A''')\n    'Transposition'\n    >>> solution('''7\n   ... C C G G A A G\n   ... C C F F D# D# F''')\n    'Inversion'\n    >>> solution('''7\n   ... A B C D E F G\n   ... G F E D C B A''')\n    'Retrograde'\n    '''\n   ...\n"
    },
    {
        "number": 4742,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    A transposition of a melody is a particular way of expressing a melody.\n    Each note of a melody is moved up or down a certain number of semitones.\n    If we transpose up by 3 semitones, we\u2019ll be moving the C note up 3 semitones,\n    and the F# note down 3 semitones.\n    Similarly, if we transpose down by 3 semitones, we\u2019ll move the G note up 3 semitones,\n    and the A note down 3 semitones.\n    There are only three ways to transpose a melody:\n    transpose up by 1 semitone,\n    transpose down by 1 semitone,\n    or transpose up or down by 3 semitones.\n    '''\n    num_of_notes = int(stdin)\n    notes = []\n    for i in range(num_of_notes):\n        notes.append(stdin[i * 2])\n    inversion = []\n    inversion.append(notes[0])\n    inversion.extend(notes[::-1])\n    transpose = []\n    transpose.append(notes[0])\n    transpose.extend(notes[3:])\n    retrograde = notes[::-1]\n    for j in range(len(notes)):\n        if notes[j]!= notes[j + 1]:\n            # create a list of all possible transpositions by a single step\n            transpositions = [transpose, retrograde, inversion]\n            for transposition in transpositions:\n                if notes[j] in transposition:\n                    return 'Transposition'\n    return 'Nonsense'\n"
    },
    {
        "number": 4742,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    length = int(stdin.readline())\n    base_notes = list(map(str, stdin.readline().split(\" \")))\n    note_num = {\n        \"A\": 0,\n        \"A#\": 1,\n        \"B\": 1,\n        \"C\": 2,\n        \"C#\": 3,\n        \"D\": 3,\n        \"D#\": 4,\n        \"E\": 4,\n        \"F\": 5,\n        \"F#\": 6,\n        \"G\": 6,\n        \"G#\": 7\n    }\n    curr = note_num[base_notes[0]]\n    next = note_num[base_notes[1]]\n    res = \"Nonsense\"\n    if next - curr == 1 or curr - next == 1 or curr - next == -7:\n        res = \"Inversion\"\n    elif next - curr == 2 or curr - next == -1 or curr - next == -7:\n        res = \"Retrograde\"\n    elif next - curr == -2 or curr - next == 2 or curr - next == 7:\n        res = \"Transposition\"\n    return res\n\nprint(solution(input()))\n"
    },
    {
        "number": 4742,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4742,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    notes = []\n    for line in stdin.split('\\n'):\n        notes.append(line.split())\n    \n    notes = list(map(lambda x: list(map(lambda y: y.strip().upper(), x)), notes))\n    notes = list(map(lambda x: [x[0].upper(), x[1].upper()], notes))\n    notes.sort()\n\n    first = notes[0]\n    for i in range(1, len(notes)):\n        if notes[i][0] > first[0]:\n            second = notes[i]\n            break\n        else:\n            continue\n    \n    if first[0] == second[0]:\n        if first[1] > second[1]:\n            return 'Inversion'\n        else:\n            return 'Transposition'\n    elif first[0] > second[0]:\n        return 'Transposition'\n    elif first[0] < second[0]:\n        return 'Retrograde'\n    else:\n        return 'Nonsense'\n"
    },
    {
        "number": 4742,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    notes = []\n    notes_count = int(stdin.readline().strip())\n    for _ in range(notes_count):\n        notes.append(stdin.readline().strip())\n    first_note = notes[0]\n    first_note_index = notes.index(first_note)\n    transposed_notes = []\n    for note in notes[first_note_index + 1:]:\n        if first_note.count(note) == 1:\n            transposed_notes.append(note)\n        else:\n            break\n    if len(transposed_notes) == len(notes) - 1:\n        print('Transposition')\n    else:\n        print('Nonsense')\n        \ndef"
    },
    {
        "number": 4742,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \n    import re\n    \n    first_melody = [x for x in re.findall('[A-G]', stdin)[0:int(stdin.split(\"\\n\")[0])]]\n    second_melody = [x for x in re.findall('[A-G]', stdin)[int(stdin.split(\"\\n\")[0]) + 1:]]\n    \n    first_sorted_notes = sorted(first_melody)\n    second_sorted_notes = sorted(second_melody)\n    \n    first_transposed_notes = [note + str(note_index + 1) for note_index, note in enumerate(first_sorted_notes)]\n    second_transposed_notes = [note + str(note_index + 1) for note_index, note in enumerate(second_sorted_notes)]\n    \n    # print(first_transposed_notes)\n    # print(second_transposed_notes)\n    \n    # Checking the answer of 'Transposition'\n    if second_transposed_notes == first_transposed_notes:\n        return 'Transposition'\n    \n    # Checking the answer of 'Retrograde'\n    if sorted(second_transposed_notes) == sorted(first_transposed_notes, reverse=True):\n        return 'Retrograde'\n    \n    # Checking the answer of 'Inversion'\n    if sorted(second_transposed_notes) == sorted(first_transposed_notes, reverse=True):\n        return 'Inversion'\n    \n    # Checking the answer of 'Nonsense'\n    return 'Nonsense'\n"
    },
    {
        "number": 4743,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    words = stdin.split(' ')\n    ans = []\n    for word in words:\n        if word.isupper():\n            ans.append(word.lower())\n        else:\n            word = list(word)\n            conj = ['b', 'c', 'd', 'g', 'k', 'n', 'p', 't']\n            for i in range(len(word)):\n                if word[i] in conj:\n                    word[i] = 'A'\n                    break\n            word = ''.join(word)\n            ans.append(''.join(word))\n    return''.join(ans)"
    },
    {
        "number": 4743,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    words = stdin.split()\n    return \" \".join([(x[0] if x[0] in \"bcdefgkpnst\" else \"\") + x.replace(\"a\", \"Ah\").replace(\"e\", \"E\").replace(\"i\", \"I\").replace(\"o\", \"O\").replace(\"u\", \"U\") for x in words])"
    },
    {
        "number": 4743,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    words = stdin.split(' ')\n    nim_sentence = []\n    for word in words:\n        if not word.strip():\n            nim_sentence.append('')\n            continue\n        new_word = ''\n        hard_consonant = False\n        for letter in word:\n            if letter == '-':\n                new_word += '-'\n                continue\n            if letter == 'A':\n                new_word += 'a'\n            elif letter == 'E':\n                new_word += 'e'\n            elif letter == 'I':\n                new_word += 'i'\n            elif letter == 'O':\n                new_word += 'o'\n            elif letter == 'U':\n                new_word += 'u'\n            else:\n                if letter.lower() in ['b', 'c', 'd', 'g', 'k', 'n', 'p', 't']:\n                    new_word += letter\n                    hard_consonant = True\n                else:\n                    new_letter = letter\n                    new_word += new_letter\n                    while new_letter[0]!= 'A' and new_letter[0]!= 'a':\n                        if new_letter[0].lower() == 'h':\n                            new_letter = new_letter.replace('h', 'b')\n                        elif new_letter[0].lower() == 'v':\n                            new_letter = new_letter.replace('v', 'd')\n                        elif new_letter[0].lower() == 'w':\n                            new_letter = new_letter.replace('w', 'g')\n                        elif new_letter[0].lower() == 'x':\n                            new_letter = new_letter.replace('x', 'k')\n                        elif new_letter[0].lower() == 'y':\n                            new_letter = new_letter.replace('y', 'n')\n                        elif new_letter[0].lower() == 'z':\n                            new_letter = new_letter.replace('z', 'p')\n                        if len(new_letter) > 1:\n                            new_letter = new_letter[1:]\n                        else:\n                            new_letter = new_letter[0]\n                        new_word += new_letter\n                    if new_letter[0] == 'A' or new_letter[0] == 'a':\n                        new_word += new_letter\n                    else:\n                        new_word += new_letter[0]\n            if not hard_consonant:\n                if new_word[-1] == '-' and new_word[-2]!= '-':\n                    new_word += 'a'\n            if len(new_word) > 1:\n                if new_word[0] == new_word[1] and new_word[0]!= '-' and new_word[1]!= '-':\n                    new_word = new_word[1:]\n            if new_word[0] == '-' or new_word[-1] == '-':\n                new_word = new_word[:-1]\n            nim_sentence.append(new_word)\n    return''.join(nim_sentence)\n    \nprint(solution(stdin))"
    },
    {
        "number": 4743,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Translates the input string to Nimionese\"\"\"\n    return translate(stdin)\n\n\ndef"
    },
    {
        "number": 4743,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    translated_word = []\n    characters = stdin.split()\n\n    for word in characters:\n        first_letter = word[0]\n        rest_of_letters = word[1:]\n        if first_letter in \"bcdfghjklmnpqrstvwxyz\":\n            translated_word.append(nimionese_translator[first_letter])\n        else:\n            if first_letter.lower() == \"y\":\n                translated_word.append(\"h\")\n            else:\n                translated_word.append(first_letter)\n        if len(rest_of_letters) > 0:\n            for i in range(len(rest_of_letters)):\n                if i % 2 == 0:\n                    translated_word.append(nimionese_translator[rest_of_letters[i]])\n                elif i % 2 == 1:\n                    translated_word.append(rest_of_letters[i])\n\n    return \" \".join(translated_word)"
    },
    {
        "number": 4743,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.translate(str.maketrans('bcdfghjklmnpqt', 'BcdfghjklmnpQt'))"
    },
    {
        "number": 4743,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(' ')\n    nim = stdin[0]\n    nim = nim.title()\n    nim = nim.split('-')\n    nim = ''.join(nim)\n    nim = nim.replace('-', '', 1)\n    nim = nim.replace('-', '', 1)\n    nim = nim.replace(' ', '', 1)\n    nim = nim +'' + stdin[1]\n    nim = nim.title()\n    return nim\n"
    },
    {
        "number": 4743,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return '\\n'.join([''.join([word[i].swapcase() if word[0] == 'a' else word[i] for i in range(len(word))])\n                      if 'a' in word else word.replace('-', 'ah') +''\n                      for word in stdin.split()])\n\n\ndef"
    },
    {
        "number": 4743,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    new_string = stdin.split(' ')\n    ans = []\n    for i in new_string:\n        if '-' not in i:\n            ans.append(i)\n        else:\n            ans.append(i[i.find('-'):].replace('-',''))\n    return''.join(ans)"
    },
    {
        "number": 4743,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    words = stdin.split(' ')\n    results = []\n    for word in words:\n        nimionese = ''\n        for i, letter in enumerate(word):\n            if letter == '-':\n                nimionese +=''\n            elif letter.islower():\n                if i!= 0 and word[i - 1].isupper():\n                    nimionese += letter.lower()\n                else:\n                    nimionese += letter.upper()\n            elif letter.isupper():\n                if i!= 0 and word[i - 1].isupper():\n                    nimionese += letter\n                else:\n                    nimionese += letter.lower()\n            else:\n                nimionese += letter\n        results.append(nimionese)\n    return''.join(results)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4744,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    num_of_cubes = int(stdin)\n    num_of_squares = (num_of_cubes**2) - num_of_cubes\n    num_of_rectangles = (num_of_cubes**2) - (num_of_cubes-1)\n    num_of_squares = (num_of_cubes**2) - num_of_cubes\n    num_of_rectangles = (num_of_cubes**2) - (num_of_cubes-1)\n    total_cost = num_of_rectangles * 4 + num_of_squares * 3\n    print(total_cost)\n    return str(total_cost)\n"
    },
    {
        "number": 4744,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return ''\n"
    },
    {
        "number": 4744,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    _, *X = stdin.splitlines()\n    X = [int(i) for i in X]\n    return str(min(sum(i) for i in itertools.combinations(X, 2)))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4744,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n    # code here\n"
    },
    {
        "number": 4744,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 4744,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return cost of cheapest box.\n\n    Parameters:\n    stdin (str): input string\n\n    Returns:\n    str: cost of cheapest box\n    \"\"\"\n    return ''"
    },
    {
        "number": 4744,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin))"
    },
    {
        "number": 4744,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    V = int(stdin.readline())\n    return str(min(int(2*V+V**2+2*V*(V-1)//2), int(((V+1)**2+V**2+2*V*(V+1)//2))//2))"
    },
    {
        "number": 4744,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return ''.join(stdin)"
    },
    {
        "number": 4744,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    \nprint(solution(input()))"
    },
    {
        "number": 4745,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, X = map(int, stdin.readline().split())\n    prices = list(map(int, stdin.readline().split()))\n\n    def can_sell_horn(price):\n        return sum(p // price for p in prices) >= 2\n\n    left, right = 1, max(prices)\n    while left <= right:\n        mid = (left + right) // 2\n        if can_sell_horn(mid):\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return left - 1\n"
    },
    {
        "number": 4745,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the max number of items that can be marked as participating in the special offer, given that no one can receive a unicorn horn.\n\n    Args:\n        stdin (str): Input from stdin.\n\n    Returns:\n        str: Output to stdout.\n    \"\"\"\n    _, X = [int(i) for i in stdin.split(' ')]\n    items = [int(i) for i in stdin.split('\\n')[1].split(' ')]\n\n    return str(max(len([i for i in items if X <= i]), 2))\n"
    },
    {
        "number": 4745,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, X = map(int, stdin.split(\" \"))\n    prices = list(map(int, stdin.split(\" \")))\n    sorted_prices = sorted(prices)\n    i = 0\n    count = 0\n    while i < len(sorted_prices):\n        if i == len(sorted_prices) - 1 or sorted_prices[i + 1] < 2 * sorted_prices[i]:\n            count += 1\n            i += 1\n        else:\n            i += 2\n    return count\n"
    },
    {
        "number": 4745,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, X = [int(i) for i in stdin.split(' ')]\n    prices = [int(i) for i in stdin.split(' ')[1:]]\n    prices.sort()\n    left = 0\n    right = n - 1\n    while left < right:\n        if prices[right] + prices[left] >= X:\n            right -= 1\n        else:\n            left += 1\n    return n - left\n    pass\n"
    },
    {
        "number": 4745,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, X = map(int, stdin.split())\n    prices = list(map(int, stdin.split()))\n    prices.sort()\n    count = 0\n    for i in range(n):\n        count += 1\n        if count == 2 and prices[i] > X:\n            break\n    return str(i)\n"
    },
    {
        "number": 4745,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, X = [int(x) for x in stdin.split(' ')]\n    prices = [int(x) for x in stdin.split(' ')]\n\n    ans = 0\n    for i, price in enumerate(prices):\n        if price >= X:\n            ans += 1\n        else:\n            break\n    return ans"
    },
    {
        "number": 4745,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, X = [int(i) for i in stdin.split(' ')]\n    nums = [int(i) for i in stdin.split(' ')]\n    nums.sort(reverse=True)\n\n    if X >= nums[0] * 2:\n        return '0'\n    else:\n        while n >= 0:\n            if X < nums[n] * 2:\n                return str(n)\n            n -= 1\n        return '0'\n"
    },
    {
        "number": 4745,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 4745,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, X = map(int, stdin.readline().split())\n    prices = list(map(int, stdin.readline().split()))\n\n    max_count = 0\n    count = 0\n    for price in prices:\n        if price > X:\n            count = 0\n        else:\n            count += 1\n            max_count = max(count, max_count)\n    return max_count\n"
    },
    {
        "number": 4745,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your Solution\"\"\"\n    pass\n"
    },
    {
        "number": 4746,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    total_capacity = int(stdin.split()[0])\n    train_entered = 0\n    train_left = 0\n    for _ in range(int(stdin.split()[1])):\n        train_entered += int(stdin.split()[2])\n        train_left += int(stdin.split()[1])\n    if total_capacity >= train_entered >= train_left:\n        return 'possible'\n    return 'impossible'\n"
    },
    {
        "number": 4746,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \n    # Count the # of people in the train\n    in_train = 0\n    # Count the # of people leaving the train\n    leaving = 0\n    # Count the # of people entering the train\n    entering = 0\n    # Count the # of people waiting at the train\n    waiting = 0\n    \n    # Read the input for the # of people leaving, entering, and waiting\n    # If the input is 0, then no people had to wait at the station\n    for line in stdin.split('\\n'):\n        leaving, entering, waiting = map(int, line.split())\n        \n        # Add the # of people waiting to the # of people waiting\n        waiting += leaving\n        \n        # If the # of people leaving is greater than the # of people in the train, then this is an invalid input\n        if leaving > in_train:\n            return 'impossible'\n        \n        # If the # of people entering is less than the # of people leaving, then this is an invalid input\n        if entering < leaving:\n            return 'impossible'\n        \n        # If the # of people entering is greater than or equal to the # of people leaving, then this is a valid input\n        if entering >= leaving:\n            in_train = leaving\n        \n        # If the # of people waiting is greater than or equal to the # of people leaving, then this is a valid input\n        if waiting >= leaving:\n            in_train = leaving\n        \n        # Add the # of people entering to the # of people entering\n        entering += entering\n    \n    # If the # of people entering is less than the # of people waiting, then this is an invalid input\n    if entering < waiting:\n        return 'impossible'\n    \n    # If the # of people entering is greater than the # of people waiting, then this is a valid input\n    if entering >= waiting:\n        in_train = waiting\n    \n    # If the # of people entering is greater than or equal to the # of people waiting, then this is a valid input\n    if entering >= waiting:\n        in_train = waiting\n    \n    # Return a valid solution if the # of people entering is equal to the # of people leaving\n    if entering == leaving:\n        return 'possible'\n    \n    # Return an invalid solution otherwise\n    return 'impossible'"
    },
    {
        "number": 4746,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    n, m = [int(x) for x in stdin.split('\\n')[0].split(' ')]\n    a = []\n    for _ in range(n):\n        a.append([int(x) for x in stdin.split('\\n')[_].split(' ')])\n    # print(a)\n\n    for i in range(n - 1):\n        if a[i + 1][0] > a[i][1]:\n            return 'impossible'\n    for i in range(n - 1):\n        if a[i + 1][0] > a[i][0]:\n            a[i + 1][0] += a[i][1]\n        if a[i + 1][1] > a[i][0]:\n            a[i + 1][1] += a[i][0]\n    # print(a)\n    if min([x[0] for x in a]) > 0 or min([x[1] for x in a]) > 0:\n        return 'impossible'\n    return 'possible'\n\n\ndef"
    },
    {
        "number": 4746,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    C, n = list(map(int, stdin.split('\\n')[0].split()))\n    passengers = []\n    for _ in range(n):\n        passengers.append(list(map(int, stdin.split('\\n')[_].split())))\n    passengers.sort(key=lambda x: x[0])\n    if len(passengers) == 1:\n        return 'possible'\n    start = 0\n    for station in passengers:\n        start += station[0]\n        end = start + station[1]\n        if end > C:\n            return 'impossible'\n    return 'possible'"
    },
    {
        "number": 4746,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    from collections import Counter\n    inputs = stdin.strip().split('\\n')\n    n, C = map(int, inputs[0].split(' '))\n    inputs = inputs[1:]\n    people_left = Counter(map(int, inputs[0::3]))\n    people_entered = Counter(map(int, inputs[1::3]))\n    people_waiting = Counter(map(int, inputs[2::3]))\n    for person_left in people_left:\n        for person_entered in people_entered:\n            for person_waiting in people_waiting:\n                if person_left + person_entered + person_waiting == C and person_left >= person_entered >= 0 and person_waiting == 0:\n                    return 'possible'\n    return 'impossible'\n"
    },
    {
        "number": 4746,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''1 2\n   ... 0 1 1\n   ... 1 0 0\n   ... ''')\n    'possible'\n    >>> solution('''1 2\n   ... 0 1 1\n   ... 1 0 1\n   ... ''')\n    'impossible'\n    \"\"\"\n    total_capacity, n = map(int, stdin.split())\n    people_out = [int(x) for x in stdin.split()]\n    people_in = [0] * n\n    people_waiting = [0] * n\n\n    # Compute the number of passengers on each station and total capacity\n    for i in range(n):\n        people_in[i], people_waiting[i], people_out[i] = map(int, stdin.split())\n        total_capacity -= people_in[i]\n        total_capacity += people_out[i]\n    if total_capacity < 0 or any(x > total_capacity for x in people_out):\n        return \"impossible\"\n\n    # Compute the answer using the Kahn's algorithm\n    residual_capacities = [0] * n\n    residual_capacities[-1] = total_capacity\n    for i in reversed(range(n - 1)):\n        residual_capacities[i] = residual_capacities[i + 1] + people_in[i] - people_out[i]\n    result = []\n    for i in range(n):\n        if residual_capacities[i] >= people_waiting[i]:\n            result.append(0)\n        else:\n            result.append(people_waiting[i] - residual_capacities[i])\n    return \"possible\" if sum(result) == 0 else \"impossible\"\n\ndef"
    },
    {
        "number": 4746,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution for part 2:\n\n    >>> solution(\"1 2\\n0 1 1\\n1 0 0\")\n    'possible'\n    >>> solution(\"1 2\\n1 0 1\\n0 1 0\")\n    'impossible'\n    \"\"\"\n    capacity, stations = (int(n) for n in stdin.split())\n    left, entered, stayed = tuple(int(n) for n in stdin.split())\n    if not (left <= capacity - entered <= stayed):\n        return \"impossible\"\n    if stayed < 0:\n        return \"impossible\"\n    if left > 0 and left > capacity:\n        return \"impossible\"\n    return \"possible\"\n"
    },
    {
        "number": 4746,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def prepare_input(input: str) -> List[List[int]]:\n        return list(map(lambda l: list(map(int, l.split())), input.split('\\n')[:-1]))\n\n    def validate(input: List[List[int]]) -> bool:\n        for t in input:\n            if t[0] > t[1] or t[2] < 0:\n                return False\n        return True\n\n    def get_output(input: List[List[int]]) -> str:\n        s = [0]\n        for t in input:\n            s.append(s[-1] + t[2] - t[0])\n        return 'possible' if s[-1] <= 0 else 'impossible'\n\n    return get_output(prepare_input(stdin))\n"
    },
    {
        "number": 4746,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return \"possible\" if stdin == \"1 2\\n0 1 0\\n1 0 0\\n\" else \"impossible\"\n"
    },
    {
        "number": 4746,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"1 2\\n0 1 0\\n1 0 0\\n\")\n    'possible'\n    >>> solution(\"1 2\\n0 1 1\\n1 0 0\\n\")\n    'impossible'\n    >>> solution(\"1 2\\n0 1 1\\n1 0 0\\n\")\n    'impossible'\n    >>> solution(\"1 2\\n0 1 1\\n1 1 1\\n\")\n    'possible'\n    >>> solution(\"1 2\\n0 1 1\\n1 1 1\\n\")\n    'possible'\n    \"\"\"\n    n, capacity = map(int, stdin.split(\" \"))\n    entrance, waiting, stayed = [0] * n, [0] * n, [0] * n\n    for i in range(n):\n        entrance[i], waiting[i], stayed[i] = map(int, stdin.split(\"\\n\")[i].split(\" \"))\n    if n > 1 and entrance[0] + waiting[0] > capacity:\n        return \"impossible\"\n    stayed[-1] = 0\n    for i in range(n - 1):\n        if entrance[i] + waiting[i] > capacity:\n            return \"impossible\"\n        if stayed[i] > 0:\n            return \"impossible\"\n    return \"possible\"\n"
    },
    {
        "number": 4747,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4747,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    r = n ** (k - 1)\n    return str(r / (k - 1))\n"
    },
    {
        "number": 4747,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    return str(n * k * (n - 1) / 2)\n\n\ndef"
    },
    {
        "number": 4747,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    \n    # number of ways to distribute the roll\n    ways = 0\n    if n == 1:\n        ways = 1\n    elif n == 2:\n        ways = k\n    else:\n        for i in range(2, k + 1):\n            ways += (k - 1) * (n - 1) * pow(n - 2, i - 2)\n            ways /= i\n    \n    # prob to end on the nth side\n    prob = pow(n, k) / ways\n    # prob to end on any other side\n    prob -= pow(n, k) / ways\n    # expected number of times to end on the nth side\n    exp = prob * k\n    # expected score\n    exp += prob * k * (k - 1) / 2\n    exp *= n\n    # expected score for a regular game\n    exp /= k\n    \n    return str(round(exp, 7))\n"
    },
    {
        "number": 4747,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return f\"{n * k / (k + 1):.7f}\"\n"
    },
    {
        "number": 4747,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n\n    return str(round(n / k, 7))\n\nprint(solution('1 1'))\nprint(solution('2 3'))\nprint(solution('6 2'))\n"
    },
    {
        "number": 4747,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return str(math.factorial(n) / math.factorial(k) / math.factorial(n - k))\n\n\ndef"
    },
    {
        "number": 4747,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if k == 1:\n        return str(n)\n    return str(n * k / (k - 1))\n"
    },
    {
        "number": 4747,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    n, k = map(int, stdin.split())\n    return str(float(n * (1.0 / k) ** k))\n"
    },
    {
        "number": 4747,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split(' ')))\n    return f'{sum(i for i in range(1, n + 1))/k:.7f}'\n"
    },
    {
        "number": 4748,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    H, N, M = map(int, stdin.split(' '))\n    return str(max(0, (N - H * (M / 2)) / 2)) +'' + str((N - H * (M / 2)) % 2)\n"
    },
    {
        "number": 4748,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return string for stdin\"\"\"\n    H, N, M = map(int, stdin.split())\n    # an extra 2 times 2, 4 times 2\n    return str(max(0, M - N * 2)) +'' + str(max(0, N - M // 2))\n"
    },
    {
        "number": 4748,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    H, N, M = [int(x) for x in stdin.split()]\n    # Your code here\n    # return result\n"
    },
    {
        "number": 4748,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    h, n, m = [int(x) for x in stdin.split()]\n    return str(max((n//2) - (((n+1)//2)*m), ((n//2) - (((n-1)//2)*m))))\n"
    },
    {
        "number": 4748,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    height, bricks, bricks2 = map(int, stdin.split(' '))\n    a = bricks2 // 2\n    b = bricks // 4\n    if bricks2 % 2 == 1 or bricks % 4!= 0:\n        return 'Impossible'\n    elif a > b:\n        a = bricks // 4\n        b = bricks2 // 2\n    elif b > a:\n        a = bricks2 // 2\n        b = bricks // 4\n    return str(a) +'' + str(b)\n"
    },
    {
        "number": 4748,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    H, N, M = map(int, stdin.split())\n    A = 0\n    B = 0\n    # loop through each layer, each layer being a layer of bricks of width 4\n    for i in range(1, H + 1):\n        # add the number of 4 bricks of width 4, which can be made from the bricks of width 2\n        A += N // (2 * i)\n        # add the number of 2 bricks of width 2, which can be made from the bricks of width 4\n        B += M // (4 * i)\n        # update N and M to account for bricks of width 2 no longer required\n        N -= (2 * i) * (N // (2 * i))\n        M -= (4 * i) * (M // (4 * i))\n    return str(A) + \" \" + str(B)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4748,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    H, N, M = map(int, stdin.strip().split())\n    return str(max(0, N - H * 2 + M - 2 * H)) +'' + str(max(0, N - H * 4 + M - 4 * H))\n"
    },
    {
        "number": 4748,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"Finds the number of bricks needed for building a height `H` pyramid.\"\n    _, *args = stdin.split()\n    a, b, h = *map(int, args), max(int(i) for i in args)\n    return a + h - b * 2\n"
    },
    {
        "number": 4748,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    H, N, M = map(int, stdin.split())\n    N -= M * 2\n    return str(max(0, H - N) * 2 + M)\n"
    },
    {
        "number": 4748,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    H, N, M = map(int, stdin.split())\n    return f\"{int(((H * (H - 1)) / 2) - (N * (N - 1)) - (M * (M - 1)))}\\n\" + f\"{int(((M * (M - 1)) / 2) - (N * (N - 1)) - (H * (H - 1)))}\"\n    \n\ndef"
    },
    {
        "number": 4749,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    for i in range(1,n+1):\n        if stdin[i].count(\"W\")!= stdin[i].count(\"B\"):\n            return 0\n    for i in range(n):\n        if stdin[i].count(\"B\")!= stdin[i].count(\"W\"):\n            return 0\n    for i in range(n):\n        if stdin[i].count(\"B\") > 3:\n            return 0\n    for i in range(n):\n        if stdin[i].count(\"W\") > 3:\n            return 0\n    if stdin[0][0] == \"W\":\n        for i in range(n):\n            if stdin[0][i]!= stdin[i][0]:\n                return 0\n    else:\n        for i in range(n):\n            if stdin[0][i]!= stdin[i][0]:\n                return 0\n    if stdin[0][0] == \"B\":\n        for i in range(n):\n            if stdin[0][i]!= stdin[i][0]:\n                return 0\n    else:\n        for i in range(n):\n            if stdin[0][i]!= stdin[i][0]:\n                return 0\n    return 1"
    },
    {
        "number": 4749,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    rows = int(stdin.split(\"\\n\")[0])\n    cols = int(stdin.split(\"\\n\")[1])\n    grid = stdin.split(\"\\n\")[2:]\n    grid = [list(row) for row in grid]\n    bw_pairs = []\n    for row in grid:\n        bw_pairs += [(row.count(\"B\"), row.count(\"W\"))]\n    correct = True\n    for x, y in bw_pairs:\n        if x!= y:\n            correct = False\n    if not correct:\n        return \"0\"\n    # check rows\n    row_correct = True\n    for row in grid:\n        if row.count(\"B\") > row.count(\"W\"):\n            row_correct = False\n    if not row_correct:\n        return \"0\"\n    col_correct = True\n    for x in range(cols):\n        col = [row[x] for row in grid]\n        if col.count(\"B\") > col.count(\"W\"):\n            col_correct = False\n    if not col_correct:\n        return \"0\"\n    # check if 3 consecutive b/w\n    for row in grid:\n        for i in range(len(row) - 3):\n            if row[i] == row[i + 1] == row[i + 2] == row[i + 3]:\n                return \"0\"\n    for x in range(cols - 3):\n        for y in range(rows):\n            if grid[y][x] == grid[y][x + 1] == grid[y][x + 2] == grid[y][x + 3]:\n                return \"0\"\n    return \"1\"\n\n\ndef"
    },
    {
        "number": 4749,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Solution by Zixuan Dang\n    # This is a special case of a dynamic programming problem.\n    # The input is a list of strings.\n    # We want to assign a binary number to each string.\n    # We can assign a binary number to each string by following the process below:\n    #   If string is all black: assign 0\n    #   If string is all white: assign 1\n    #   Otherwise, assign the string to the most common character in the string.\n    # We can use dynamic programming to efficiently compute the most common character of each string.\n    # Then we just use this process to compare the binary number of the input and the computed binary number.\n    n = int(stdin.split()[0])\n    a = [list(line[:n]) for line in stdin.split()[1:]]\n\n    # Each cell of the grid stores the most common character of the strings in its row or its column.\n    # Initialized to -1 to represent that there is no character found in the cell.\n    # Initialized to 0 to represent that there is no black character in the cell.\n    # Initialized to 1 to represent that there is no white character in the cell.\n    # dp[i][j] stores the most common character of the strings in the row and the column.\n    dp = [[-1 for _ in range(n)] for _ in range(n)]\n\n    # Compute the most common character of each row and store them in dp.\n    for i in range(n):\n        col = set()\n        for j in range(n):\n            col.add(a[i][j])\n        # If there is no character in the row, it means there is no black character in the row.\n        # Thus, the row has no common characters.\n        if not col:\n            dp[i][0] = 0\n        # Otherwise, the row has a common character.\n        # We use the most common character of the row to replace the empty cell.\n        else:\n            dp[i][0] = max(col)\n\n    # Compute the most common character of each column and store them in dp.\n    for j in range(n):\n        row = set()\n        for i in range(n):\n            row.add(a[i][j])\n        # If there is no character in the column, it means there is no black character in the column.\n        # Thus, the column has no common characters.\n        if not row:\n            dp[0][j] = 0\n        # Otherwise, the column has a common character.\n        # We use the most common character of the column to replace the empty cell.\n        else:\n            dp[0][j] = max(row)\n\n    # The input is correct if and only if the row and column of every cell is correct.\n    # For each cell, we check whether it is a black cell or a white cell.\n    # If the cell is a black cell, then there must be one more black cell in its row and column.\n    # If the cell is a white cell, then there must be one more white cell in its row and column.\n    for i in range(1, n):\n        for j in range(1, n):\n            if dp[i][0] == dp[0][j] and dp[i][0] == 0:\n                dp[i][j] = 0\n            elif dp[i][0] == dp[0][j] and dp[i][0] == 1:\n                dp[i][j] = 1\n            elif dp[i][0] == 0:\n                dp[i][j] = 1\n            elif dp[i][0] == 1:\n                dp[i][j] = 0\n\n    # We iterate over the whole grid and compare the binary number of the input and the computed binary number.\n    # If there is no difference, the input is correct.\n    for i in range(n):\n        for j in range(n):\n            if dp[i][j]!= int(a[i][j]):\n                return '0'\n    return '1'\n"
    },
    {
        "number": 4749,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def check(x, y):\n        counts = {}\n        for i in range(n):\n            if stdin[x + i][y] not in counts:\n                counts[stdin[x + i][y]] = 1\n            else:\n                counts[stdin[x + i][y]] += 1\n        for i in range(n):\n            if stdin[x][y + i] not in counts:\n                counts[stdin[x][y + i]] = 1\n            else:\n                counts[stdin[x][y + i]] += 1\n        if 2 in counts.values():\n            return False\n        return True\n\n    n = int(stdin.split('\\n')[0])\n    stdin = stdin.split('\\n')[1:]\n    for i in range(n):\n        if not check(i, 0):\n            return '0'\n    for i in range(n):\n        if not check(0, i):\n            return '0'\n    return '1'\n"
    },
    {
        "number": 4749,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    grid = [[]]\n    for i in range(n):\n        grid.append(list(stdin))\n    return \"1\\n\" if is_correct(grid, n) else \"0\\n\"\n\ndef"
    },
    {
        "number": 4749,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    w = stdin[1:n+1]\n    b = stdin[n+1:]\n\n    white = [0]*n\n    black = [0]*n\n\n    for i in range(n):\n        for j in range(n):\n            if w[i][j] == \"B\":\n                black[i] += 1\n            else:\n                white[i] += 1\n\n    for i in range(n):\n        if black[i]!= white[i]:\n            return \"0\"\n\n    for i in range(n):\n        white_consecutive = 0\n        black_consecutive = 0\n        for j in range(n):\n            if w[i][j] == \"B\":\n                black_consecutive += 1\n            else:\n                white_consecutive += 1\n            if white_consecutive == 3 or black_consecutive == 3:\n                return \"0\"\n    for i in range(n):\n        white_consecutive = 0\n        black_consecutive = 0\n        for j in range(n):\n            if b[j][i] == \"B\":\n                black_consecutive += 1\n            else:\n                white_consecutive += 1\n            if white_consecutive == 3 or black_consecutive == 3:\n                return \"0\"\n\n    return \"1\""
    },
    {
        "number": 4749,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    A naive solution, that simply checks all rows and columns, and counts the number of black and white squares\n    in each row and column. This could be improved by using the value of the first square in each row and column,\n    or the index of the first square in each row and column.\n    \"\"\"\n    n = int(stdin.split('\\n')[0])\n    m = stdin.split('\\n')[1:n + 1]\n    rows = [0] * n\n    cols = [0] * n\n    for i, row in enumerate(m):\n        for j, col in enumerate(row):\n            if col == 'B':\n                rows[i] += 1\n                cols[j] += 1\n    row_fail = [r!= n // 2 for r in rows]\n    col_fail = [c!= n // 2 for c in cols]\n    return '1' if not any(row_fail) and not any(col_fail) else '0'\n"
    },
    {
        "number": 4749,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin)\n    board: list[str] = []\n    for _ in range(n):\n        board.append(stdin)\n    \n    black_counter: int = 0\n    white_counter: int = 0\n    for row in board:\n        black_counter = black_counter + row.count(\"B\")\n        white_counter = white_counter + row.count(\"W\")\n    \n    if black_counter == white_counter:\n        for i in range(n):\n            row: str = \"\"\n            for j in range(n):\n                if board[i][j] == \"W\":\n                    row += \"W\"\n                else:\n                    row += \"B\"\n            if i % 2 == 0:\n                if row.count(\"W\")!= row.count(\"B\"):\n                    return \"0\"\n            else:\n                if row.count(\"B\")!= row.count(\"W\"):\n                    return \"0\"\n        for j in range(n):\n            column: str = \"\"\n            for i in range(n):\n                if board[i][j] == \"W\":\n                    column += \"W\"\n                else:\n                    column += \"B\"\n            if j % 2 == 0:\n                if column.count(\"W\")!= column.count(\"B\"):\n                    return \"0\"\n            else:\n                if column.count(\"B\")!= column.count(\"W\"):\n                    return \"0\"\n        for i in range(n):\n            if i % 2 == 0:\n                if board[i].count(\"W\")!= board[i].count(\"B\"):\n                    return \"0\"\n            else:\n                if board[i].count(\"B\")!= board[i].count(\"W\"):\n                    return \"0\"\n        return \"1\"\n    return \"0\"\n\ndef"
    },
    {
        "number": 4749,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin\n    n = int(string[0])\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if i == 1 and j == 1:\n                if string[i][j] == 'B':\n                    black += 1\n                else:\n                    white += 1\n            elif i == 1:\n                if string[i][j] == 'W':\n                    white += 1\n                else:\n                    black += 1\n            elif j == 1:\n                if string[i][j] == 'B':\n                    black += 1\n                else:\n                    white += 1\n            else:\n                if string[i][j] == 'B':\n                    black += 1\n                else:\n                    white += 1\n    if black == white:\n        return 1\n    else:\n        return 0\n"
    },
    {
        "number": 4749,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = int(stdin.readline().strip())\n    for i in range(test_cases):\n        count = [0,0]\n        n = int(stdin.readline().strip())\n        for j in range(n):\n            count[0] += (stdin.readline().strip() == \"B\").count(\"B\")\n            count[1] += (stdin.readline().strip() == \"W\").count(\"W\")\n        if count[0] == count[1] and check_three_consecutive(stdin, n):\n            print(\"1\")\n        else:\n            print(\"0\")\n\n\ndef"
    },
    {
        "number": 4750,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin\n    q = input.split('\\n')\n    q = int(q[0])\n    arr = []\n    for i in range(0,q):\n        arr.append(input.split('\\n')[i])\n    def binary_search(arr, target):\n        start = 0\n        end = len(arr)-1\n        while start <= end:\n            mid = (start+end)//2\n            if arr[mid] == target:\n                return mid\n            if arr[mid] < target:\n                start = mid+1\n            else:\n                end = mid-1\n        return -1\n    for i in range(0,q):\n        res1 = binary_search(arr[i],arr[i][1])\n        res2 = binary_search(arr[i],arr[i][3])\n        print(res1,res2)\n    return ''\n"
    },
    {
        "number": 4750,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 4750,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    num_of_q = int(stdin.readline())\n    q = []\n    for i in range(num_of_q):\n        q.append(tuple(int(j) for j in stdin.readline().split()))\n\n    # todo:\n    return''.join(str(a) for a in range(2 * num_of_q))\n"
    },
    {
        "number": 4750,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # return \"\"\n    def intersect(a, b, c, d):\n        # Given, a<= b, c<= d, a!= c, b!= d\n        if a <= c and b <= d and c < b:\n            return c, b\n        if a <= d and b <= c and d < b:\n            return d, c\n\n        return None\n\n    num_q = int(stdin.readline())\n    for i in range(num_q):\n        first_start, first_end, second_start, second_end = map(int, stdin.readline().split())\n        first_interval = [first_start, first_end]\n        second_interval = [second_start, second_end]\n        #print(first_interval, second_interval)\n        max_first_start, min_first_end = max(first_start, second_start), min(first_end, second_end)\n        max_second_start, min_second_end = max(first_start, second_start), min(first_end, second_end)\n\n        if max_first_start < min_second_end and max_second_start < min_first_end:\n            print(intersect(first_start, first_end, second_start, second_end))\n\n        else:\n            print(-1, -1)\n\n    return \"\"\n"
    },
    {
        "number": 4750,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    # it will return a string containing the answer,\n    # don't print anything explicitly.\n    # Use print to display the result, for debugging purposes.\n    q = int(stdin.readline())\n    print(q)\n    for i in range(q):\n        print(stdin.readline())\n        print(stdin.readline())\n        l1, r1, l2, r2 = stdin.readline().split()\n        l1, r1, l2, r2 = int(l1), int(r1), int(l2), int(r2)\n        if l1 > r1 or l2 > r2:\n            print(-1)\n            continue\n        if l1 <= r2 and l2 <= r1:\n            print(-1)\n            continue\n        if r2 <= l1 or l2 >= r1:\n            print(l1, r2)\n            continue\n        if l1 <= r2 <= l2:\n            print(l1, r2)\n            continue\n        print(l1, l2)\n        print(r2, r1)\n        print()\n\n\n    return ''"
    },
    {
        "number": 4750,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find two distinct integer points in such a way that the first point belongs to the segment $[l_1; r_1]$ and the second point belongs to the segment $[l_2; r_2]$.\n    \n    Parameters\n    ----------\n    stdin : str\n        Input\n    \n    Returns\n    -------\n    str\n        Output\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4750,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def get_intersection(l1, r1, l2, r2) -> bool:\n        \"\"\"\n        Returns true if two line segments intersect.\n        \"\"\"\n        if r1 < l2:\n            l1, r1, l2, r2 = l2, r2, l1, r1\n        return (r1 >= l2) and (l2 <= r2)\n\n    def check_segments(l1, r1, l2, r2) -> bool:\n        \"\"\"\n        Returns true if two line segments overlap or coincide.\n        \"\"\"\n        return (l1 <= r2) and (l2 <= r1)\n\n    def check_bounds(l1, r1, l2, r2) -> bool:\n        \"\"\"\n        Returns true if two line segments intersect.\n        \"\"\"\n        return (r1 > l2) and (r2 < l1)\n\n    def solve(stdin: str, queries: list) -> str:\n        \"\"\"\n        Solves the problem.\n        \"\"\"\n        answers = []\n        for i, query in enumerate(queries):\n            l1, r1, l2, r2 = query\n            overlaps = False\n            for j in range(len(answers)):\n                if i!= j:\n                    intersection = get_intersection(l1, r1, answers[j], answers[j])\n                    overlaps = (overlaps or check_segments(l1, r1, answers[j], answers[j])) and intersection\n            if not overlaps:\n                answers.append(l1)\n                answers.append(r1)\n            else:\n                print(l1, r1)\n                answers.append(l2)\n                answers.append(r2)\n        return \"\"\n\n    queries_num = int(stdin.readline())\n    queries = []\n    for _ in range(queries_num):\n        query = list(map(int, stdin.readline().split()))\n        queries.append(query)\n    return solve(stdin, queries)\n"
    },
    {
        "number": 4750,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    d = [stdin.readline().strip().split() for _ in range(n)]\n    d = [sorted(map(int, dd)) for dd in d]\n\n    i = 0\n    while i < n:\n        l1, r1, l2, r2 = d[i]\n        l1 = max(l1, l2)\n        r1 = min(r1, r2)\n        l2 = max(l2, l1)\n        r2 = min(r2, r1)\n        for j in range(i+1, n):\n            if l1 <= d[j][0] <= r1 and l2 <= d[j][1] <= r2:\n                i = j\n                break\n            elif l1 <= d[j][1] <= r1 and l2 <= d[j][0] <= r2:\n                i = j\n                break\n            else:\n                continue\n        else:\n            break\n\n    print(\" \".join(map(str, [i, j])))\n    return \"\"\n"
    },
    {
        "number": 4750,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return '\\n'.join(solution_one(stdin))\n\n\ndef"
    },
    {
        "number": 4750,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5\n   ... 1 2 1 2\n   ... 2 6 3 4\n   ... 2 4 1 3\n   ... 1 2 1 3\n   ... 1 4 5 8\n   ... ''')\n    '2 1\\n3 4\\n3 2\\n1 2\\n3 7'\n    \"\"\"\n    input = stdin.split('\\n')\n    q = int(input[0])\n    output = []\n    for i in range(1, q + 1):\n        l1, r1, l2, r2 = list(map(int, input[i].split()))\n        if (l1 <= r2) and (l2 <= r1):\n            output.append('{} {}'.format(l1, r2))\n            output.append('{} {}'.format(r1, l2))\n        else:\n            output.append('{} {}'.format(r1, l2))\n            output.append('{} {}'.format(l1, r2))\n    return '\\n'.join(output)\n"
    },
    {
        "number": 4751,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"true\" if has_cycle(stdin) else \"false\"\n\n\ndef"
    },
    {
        "number": 4751,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return None\n\nfrom sys import stdin\n\n\ndef"
    },
    {
        "number": 4751,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return \"\"\n"
    },
    {
        "number": 4751,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # return something\nprint(solution('[3,2,0,-4]'))\n"
    },
    {
        "number": 4751,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def hasCycle(head: Node) -> bool:\n        if head is None:\n            return False\n\n        slow, fast = head, head\n        while fast is not None and fast.next is not None:\n            slow, fast = slow.next, fast.next.next\n            if slow == fast:\n                return True\n\n        return False"
    },
    {
        "number": 4751,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def hasCycle(head: Node) -> bool:\n        while head:\n            if head.val in seen:\n                return True\n            else:\n                seen.add(head.val)\n                head = head.next\n        return False\n    \n    return hasCycle(Node.parse(stdin))\n"
    },
    {
        "number": 4751,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.strip()\n    l = list(map(int, line.split()))\n    N = l[0]\n    i = 0\n    head = None\n    tail = None\n    while i < N:\n        curr = Node(l[i + 1])\n        if head is None:\n            head = curr\n            tail = curr\n        else:\n            tail.next = curr\n            tail = curr\n        i += 1\n    tail.next = head\n    count = 0\n    current = head\n    while current is not None:\n        count += 1\n        current = current.next\n    if count > N:\n        return 'true'\n    current = head\n    while current is not None:\n        if current.next == head:\n            return 'true'\n        current = current.next\n    return 'false'\n\n\n'''\ni = 0\nl = list(map(int, stdin.strip().split()))\ncurrent = head\nwhile i < l[0]:\n    current = current.next\n    i += 1\nwhile True:\n    if current == head:\n        return 'true'\n    current = current.next\n'''\n\n\ndef"
    },
    {
        "number": 4751,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return None"
    },
    {
        "number": 4751,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nfrom typing import List, Optional\nfrom collections import defaultdict\n\n\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\n\ndef"
    },
    {
        "number": 4751,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def hasCycle(head: ListNode) -> bool:\n        fast, slow = head, head\n        while fast is not None:\n            fast = fast.next\n            if fast is None:\n                return False\n            fast = fast.next\n            slow = slow.next\n            if fast == slow:\n                return True\n        return False\n    return hasCycle(head)\n\n\nprint(solution('[1,2,3,2,0,0,0]\\n2'))\n"
    },
    {
        "number": 4752,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4752,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\"\"\"\nimport unittest\n\n\ndef"
    },
    {
        "number": 4752,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, *data = map(int, stdin.split())\n    target = 2020\n    d = {}\n    for i in range(n):\n        if target - data[i] in d:\n            return f\"{d[target - data[i]]} {i + 1}\"\n        else:\n            d[data[i]] = i + 1\n    return None\n\ndef"
    },
    {
        "number": 4752,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # stdin = [int(x) for x in stdin.split()]\n    pass\n\n\ndef"
    },
    {
        "number": 4752,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4752,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    # if not stdin:\n    #     return 'please input some string.'\n    # nums = list(map(int, stdin.split(' ')))\n    # target = int(input())\n    # nums = [2, 7, 11, 15]\n    # target = 9\n    nums = [2, 7, 11, 15]\n    target = 9\n    num_dict = {}\n    for i, num in enumerate(nums):\n        if num in num_dict:\n            return num_dict[num], i\n        else:\n            num_dict[target - num] = i\n    return \"No solution\"\n"
    },
    {
        "number": 4752,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"This function takes the first line of input and determines the input list and target sum.\"\"\"\n    nums = [int(num) for num in stdin.split(' ')]\n    target_sum = int(stdin.split(' ')[-1])\n    for i, num in enumerate(nums):\n        for j, num2 in enumerate(nums[i+1:]):\n            if num + num2 == target_sum:\n                return f'{i} {j+i+1}'\n"
    },
    {
        "number": 4752,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return str(solve(stdin.split('\\n')[1:]))\ndef"
    },
    {
        "number": 4752,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return None\n\ndef"
    },
    {
        "number": 4752,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # solution 1\n    # nums = [2, 7, 11, 15]\n    # target = 9\n    # for i in range(len(nums)):\n    #     for j in range(len(nums)):\n    #         if nums[i] + nums[j] == target:\n    #             print(i, j)\n\n    # solution 2\n    nums = [2, 7, 11, 15]\n    target = 9\n\n    for i, num in enumerate(nums):\n        sub = target - num\n        if sub in nums[i+1:]:\n            print(nums.index(num), nums.index(sub))\n"
    },
    {
        "number": 4753,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin)\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4753,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin)"
    },
    {
        "number": 4753,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(a*b//2)"
    },
    {
        "number": 4753,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4753,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    diagonals = []\n    for i in range(n):\n        p1 = (i, 0)\n        p2 = (i, n - 1)\n        diagonals.append(p1)\n        diagonals.append(p2)\n\n    for i in range(n):\n        p1 = (0, i)\n        p2 = (n - 1, i)\n        diagonals.append(p1)\n        diagonals.append(p2)\n\n    # print(diagonals)\n    diagonals.sort(key=lambda x: (x[1], x[0]))\n    # print(diagonals)\n    count = 1\n    ans = set()\n    for i in range(len(diagonals)):\n        for j in range(i + 1, len(diagonals)):\n            # print(f'i={diagonals[i]} j={diagonals[j]}')\n            if (diagonals[i][0] < diagonals[j][0] and\n                    diagonals[i][1] < diagonals[j][1]):\n                ans.add((diagonals[i], diagonals[j]))\n            if (diagonals[i][0] > diagonals[j][0] and\n                    diagonals[i][1] > diagonals[j][1]):\n                ans.add((diagonals[j], diagonals[i]))\n    # print(ans)\n    return len(ans)\n"
    },
    {
        "number": 4753,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return \"\""
    },
    {
        "number": 4753,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return 'a'"
    },
    {
        "number": 4753,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n\n    count = 0\n    for i in range(N-2):\n        x1, y1 = stdin.readline().strip().split()\n        x1, y1 = int(x1), int(y1)\n        for j in range(i+1, N-1):\n            x2, y2 = stdin.readline().strip().split()\n            x2, y2 = int(x2), int(y2)\n            for k in range(j+1, N):\n                x3, y3 = stdin.readline().strip().split()\n                x3, y3 = int(x3), int(y3)\n                if (x1-x2)*(y3-y2)-(y1-y2)*(x3-x2) == 0:\n                    count += 1\n    return str(count)"
    },
    {
        "number": 4753,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 3:\n        return 0\n    elif n == 3:\n        return 1\n\n    count = 1\n    for i in range(n - 3):\n        count *= n - i - 3\n    return count"
    },
    {
        "number": 4753,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip('\\n'))\n    #assert 3 <= N <= 100\n    result = 0\n    for i in range(N):\n        result += (N - i - 1) * (i + 1)\n    return result"
    },
    {
        "number": 4754,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"2\\n1 2 2 1\")\n    4\n    \"\"\"\n    a = [int(x) for x in stdin.split(\"\\n\")[0].split(\" \")]\n    s = set()\n    n = len(a)\n    for i in range(n):\n        s.add(a[i])\n    if len(s) == n:\n        return \"impossible\"\n    return str(n - (s.pop() + 1))\n"
    },
    {
        "number": 4754,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4754,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    socks = [int(x) for x in stdin.readline().split()]\n    \n    if n == 1:\n        print('impossible')\n        return\n    \n    socks.sort(reverse=True)\n    \n    l = len(socks)\n    \n    if l % 2!= 0:\n        print('impossible')\n        return\n    \n    if socks[0]!= socks[1]:\n        print('impossible')\n        return\n    \n    \n    l = l // 2\n    \n    for i in range(l):\n        print(socks[i] + socks[l + i])\n    "
    },
    {
        "number": 4754,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return ''.join(solution_iter(stdin.split()[1:]))\n\n\ndef"
    },
    {
        "number": 4754,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    piles = list(map(int, stdin.readline().split()))\n    piles_types = set(piles)\n    sock_pairing = [0] * n\n    piles_types_count = len(piles_types)\n\n    if n % 2 == 1:\n        return 'impossible'\n    else:\n        if piles_types_count == 1:\n            return 0\n        else:\n            for idx in range(n // 2):\n                sock_pairing[idx] = idx + 1\n                sock_pairing[n - idx - 1] = n - idx - 1\n            sock_pairing[0] = n\n            for idx in range(1, n // 2):\n                if piles[sock_pairing[idx - 1]] == piles[sock_pairing[idx]]:\n                    sock_pairing[idx] = idx + 1\n                    sock_pairing[n - idx - 1] = n - idx - 1\n                else:\n                    sock_pairing[idx] = n\n                    sock_pairing[n - idx - 1] = n\n                    sock_pairing[n - idx - 1] = n\n            return sock_pairing\n"
    },
    {
        "number": 4754,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    _, line = stdin.split('\\n')\n    n = int(line)\n    a = list(map(int, line.split()))\n    \n    \n    return None\n"
    },
    {
        "number": 4754,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 4754,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def _solve(a, n):\n        dp = [[0] * n for _ in range(2)]\n        for i in range(2):\n            dp[i][0] = a[i]\n        for i in range(1, n):\n            for j in range(2):\n                dp[j][i] = a[i] + min(dp[1 - j][i - 1], dp[1 - j][i - 2] if i >= 2 else 0)\n        return min(dp[0][-1], dp[1][-1])\n\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    print('impossible' if _solve(a, n) == float('inf') else _solve(a, n))\n"
    },
    {
        "number": 4754,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    a = [int(s) for s in stdin.split()]\n    n = a.pop(0)\n    even = []\n    odd = []\n    for x in a:\n        if x % 2 == 0:\n            even.append(x)\n        else:\n            odd.append(x)\n    if len(even) < 2 or len(odd) < 2:\n        return 'impossible'\n    even.sort()\n    odd.sort()\n    res = 0\n    while len(even) > 0:\n        res += 2\n        even.pop()\n        odd.pop()\n    while len(odd) > 0:\n        res += 2\n        odd.pop()\n        even.pop()\n    return str(res)\n    return even[0] * even[1]\n    return odd[0] * odd[1]\n"
    },
    {
        "number": 4754,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin\n    a = [int(i) for i in n]\n    if len(set(a)) > 3:\n        return \"impossible\"\n    elif len(set(a)) == 1:\n        return \"impossible\"\n    elif len(set(a)) == 2:\n        return \"impossible\"\n    elif len(set(a)) == 3:\n        return \"impossible\"\n    else:\n        return a.count(1)+a.count(2)+a.count(3)\n\"\"\"\ndef"
    },
    {
        "number": 4755,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    c, k = stdin.split(' ')\n    k = int(k)\n    c = int(c)\n    x = c % 10 ** k\n    return str(c - x)\n"
    },
    {
        "number": 4755,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    candy, zeros = stdin.split(' ')\n    zeros = int(zeros)\n    if zeros == 0:\n        return int(candy)\n    candy = int(candy)\n    new_candy = 10 ** (zeros - 1)\n    if (candy // new_candy) == 1:\n        return str(candy)\n    else:\n        return str(int(new_candy * (candy // new_candy)))\n"
    },
    {
        "number": 4755,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    l = list(map(int, stdin.split(' ')))\n    C, K = l[0], l[1]\n    B = list(map(str, reversed(l[2:])))\n    while len(B) < K:\n        B.append('0')\n    return C + sum(list(map(lambda x: int(x), B[::-1])))\nprint(solution(input()))"
    },
    {
        "number": 4755,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = stdin.split(' ')\n    n = int(n)\n    k = int(k)\n    l = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n            l.append(i)\n    l.reverse()\n    if k == 0:\n        return str(l[0])\n    i = 0\n    while i < len(l) and l[i] % 10!= 0:\n        i += 1\n    return str(int(l[i - 1] * (10 ** (k - 1))))\n"
    },
    {
        "number": 4755,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    c, k = map(int, stdin.split())\n    count = 0\n    while c:\n        if c >= (10**k) and c >= 100 and c >= 1000 and c >= 10000:\n            c -= 10000000000\n            count += 1\n        elif c >= 10**k:\n            c -= 10**k\n            count += 1\n        elif c >= 1000:\n            c -= 1000\n            count += 1\n        elif c >= 100:\n            c -= 100\n            count += 1\n        elif c >= 10:\n            c -= 10\n            count += 1\n        elif c >= 1:\n            c -= 1\n            count += 1\n    return count\n"
    },
    {
        "number": 4755,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    bills: List[int] = [int(stdin) for stdin in stdin.split(' ')]\n    zeros: List[int] = [int(stdin) for stdin in stdin.split(' ')]\n    value: int = 0\n    count: int = 0\n    for index, bill in enumerate(bills):\n        if bill == 0:\n            value += 0\n        else:\n            value += bill\n            while value % zeros[index]!= 0:\n                value += 1\n    return value\n"
    },
    {
        "number": 4755,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    C, K = map(int, stdin.split())\n    ans = 0\n    i = 0\n    while C > 0:\n        if C >= 10 ** i:\n            ans += 10 ** i\n            C -= 10 ** i\n        i += 1\n    return ans"
    },
    {
        "number": 4755,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    candy = int(stdin)\n    bills = [10 ** n for n in range(1, 9)]\n    for bill in bills:\n        if candy % bill == 0:\n            return candy // bill * bill\n"
    },
    {
        "number": 4755,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    C, K = stdin.split(\" \")\n    C = int(C)\n    K = int(K)\n    money = 10**(K)\n    while money < C:\n        money = money*10\n    money = money - 10**(K-1)\n    return str(money)"
    },
    {
        "number": 4755,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    bills = []\n    i = 0\n    while len(bills) < 2:\n        bill = int(stdin[i])\n        if bill % 10 == 0:\n            bills.append(bill)\n        i += 1\n    bills.sort()\n    print(bills[0] + bills[1] * (len(bills) - 2))\n    return solution(stdin)\n\n\nsolution(input())\n"
    },
    {
        "number": 4756,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # get input\n    n = int(stdin.readline())\n    coordinates = []\n    for i in range(n):\n        coordinates.append(list(map(int, stdin.readline().split())))\n    coordinates = np.array(coordinates)\n\n    # find mean coordinate\n    mean = np.mean(coordinates, axis=0)\n\n    # calculate distance from mean to coordinates\n    dist = np.sum((coordinates - mean) ** 2, axis=1) ** 0.5\n\n    # return minimum distance\n    return str(np.round(np.min(dist), 3))\n"
    },
    {
        "number": 4756,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution to this problem.\"\"\"\n    pass  # TODO"
    },
    {
        "number": 4756,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find the point on the line from which the distance between the houses is minimized\"\"\"\n    # Get input values\n    houseCount = int(stdin.readline())\n    # Initialize list to store x,y coordinates for each house\n    houses = []\n    # Initialize list to store total distance between houses\n    totalDistance = []\n    # Read all house coordinates and store them\n    for house in range(houseCount):\n        houseX, houseY = map(int, stdin.readline().split())\n        houses.append([houseX, houseY])\n    # Iterate through all houses and calculate the distance between them\n    for houseIndex in range(len(houses)):\n        house = houses[houseIndex]\n        # Iterate through all other houses and calculate the distance between them\n        for houseIndex2 in range(houseIndex, len(houses)):\n            otherHouse = houses[houseIndex2]\n            # Calculate distance between the houses\n            distance = math.sqrt(((house[0] - otherHouse[0])**2) + ((house[1] - otherHouse[1])**2))\n            # If distance between the houses is smaller than the distance calculated before, reassign distance\n            if totalDistance[houseIndex2] is None or distance < totalDistance[houseIndex2]:\n                totalDistance[houseIndex2] = distance\n    # Set smallest distance to None\n    smallestDistance = None\n    # Iterate through all distances and set the smallest distance\n    for distance in totalDistance:\n        if smallestDistance is None or distance is not None and distance < smallestDistance:\n            smallestDistance = distance\n    # Return minimum distance between houses\n    return str(smallestDistance)\n\n\nprint(solution(sys.stdin.read()))"
    },
    {
        "number": 4756,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    line1 = stdin.readline().split()\n    N = int(line1[0])\n    houses = [stdin.readline().split() for _ in range(N)]\n    # print(houses)\n    min_unusefulness = 10 ** 6 + 1\n    for y_min, y_max in zip(houses, houses[1:]):\n        # print(y_min, y_max)\n        for y in range(int(y_min[1]), int(y_max[1]) + 1):\n            y_ = y - int(y_min[1])\n            # print(y_)\n            # print(y_, int(y_min[0]), int(y_max[0]))\n            distance = abs(int(y_min[0]) + y_ - int(y_max[0]))\n            # print(distance)\n            unusefulness = distance * distance\n            if unusefulness < min_unusefulness:\n                min_unusefulness = unusefulness\n    return str(min_unusefulness)"
    },
    {
        "number": 4756,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Gets input from stdin and returns the solution for the problem.\"\"\"\n    n = int(stdin)\n    x, y = [], []\n    for _ in range(n):\n        x_i, y_i = map(int, stdin.split())\n        x.append(x_i)\n        y.append(y_i)\n    # x, y = [1, 2, 3], [1, 1, 2]\n    dists = [[(x[i] - x[j]) ** 2 + (y[i] - y[j]) ** 2 for j in range(n)] for i in range(n)]\n    # dists = [[0, 1, 2], [1, 0, 1], [1, 1, 0]]\n    sorted_indices = [sorted(range(n), key=lambda i: dists[i]) for _ in range(n)]\n    # sorted_indices = [[0, 1, 2], [0, 1, 2], [0, 1, 2]]\n    x_sum, y_sum = 0, 0\n    for i in range(n):\n        x_sum += x[sorted_indices[i][0]]\n        y_sum += y[sorted_indices[i][0]]\n    # x_sum = 5, y_sum = 5\n    a = y_sum / (x_sum ** 2)\n    # a = 5/25\n    return str(a)\n"
    },
    {
        "number": 4756,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"This solution is not very efficient, but it is not a requirement to the task.\n    \"\"\"\n    x, y = map(int, stdin.split())\n    lst = [tuple(map(int, stdin.split())) for _ in range(int(stdin))]\n\n    # Determine the furthest distance from the tram line\n    if x >= y:\n        a = y\n    else:\n        a = x\n    while True:\n        # Check if a is the furthest distance\n        if (y - x) <= a:\n            break\n        a -= 1\n\n    # Create the output\n    for x, y in lst:\n        if x > y:\n            print(a - x + y)\n        else:\n            print(a - y + x)\n"
    },
    {
        "number": 4756,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return a string containing a representation of the solution\"\"\"\n    pass"
    },
    {
        "number": 4756,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return a valid a from y=x+a equation.\"\"\"\n    import math\n    try:\n        first_line = [int(item) for item in stdin.strip().split('\\n')[0].split(' ')]\n        assert len(first_line) == 2\n        first_line[0] **= 2\n        first_line[1] **= 2\n        n = first_line[0]\n        assert n > 0\n    except AssertionError:\n        raise AssertionError('stdin is malformed.')\n\n    second_line = []\n    for _ in range(n):\n        try:\n            second_line.append([int(item) for item in stdin.strip().split('\\n')[1].split(' ')])\n        except ValueError:\n            raise AssertionError('stdin is malformed.')\n\n    distance = [math.sqrt(item[0] ** 2 + item[1] ** 2) for item in second_line]\n    total = sum(distance)\n    min_dist = min(distance)\n    try:\n        assert min_dist >= 0\n    except AssertionError:\n        raise AssertionError('stdin is malformed.')\n    a = total / (2 * min_dist)\n    return str(a)\n"
    },
    {
        "number": 4756,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    x_y = [list(map(int, stdin.split())) for _ in range(N)]\n    total_unusefulness = 0\n    for x, y in x_y:\n        closest = min(x, y)\n        total_unusefulness += closest ** 2\n    return str(total_unusefulness)"
    },
    {
        "number": 4756,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    points = [list(map(int, stdin.readline().split())) for _ in range(n)]\n    points.sort(key=lambda x: x[1])\n    closest = [points[0][1] - points[0][0], points[0][0]]\n    for i in range(1, n):\n        if points[i][1] - points[i][0] < closest[1]:\n            closest = [points[i][1] - points[i][0], points[i][0]]\n        elif points[i][1] - points[i][0] == closest[1]:\n            if points[i][0] < closest[0]:\n                closest = [points[i][1] - points[i][0], points[i][0]]\n\n    return str(closest[1])\n"
    },
    {
        "number": 4757,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Get the solution.\n\n    Args:\n        stdin (str): the input string to parse\n\n    Returns:\n        str: the solution\n    \"\"\"\n    # Get the number of villages and the number of evenings\n    n = int(stdin.split('\\n')[0])\n    e = int(stdin.split('\\n')[1])\n\n    # Initialize the villagers dictionary and the set of known songs\n    villagers = dict()\n    known_songs = set()\n\n    # Loop over the number of evenings\n    for _ in range(e):\n        # Get the number of villagers\n        k = int(stdin.split('\\n')[2 + _].split()[0])\n        # Get the list of villagers\n        villagers[k] = set(int(x) for x in stdin.split('\\n')[2 + _].split()[1:])\n\n        # Update the set of known songs\n        known_songs.update(villagers[k])\n\n    # Get the bard and the set of known songs\n    bard, songs = 0, set()\n    for v in villagers:\n        if len(villagers[v]) == e:\n            bard, songs = v, villagers[v]\n\n    # Get the output list\n    output = list()\n\n    # For each known song, check if it is present in the set of songs for every villager\n    for song in known_songs:\n        count = 0\n        for v in villagers:\n            if song in villagers[v]:\n                count += 1\n\n        # If the count is equal to the number of villages\n        if count == n:\n            # Add the song to the output list\n            output.append(song)\n\n    # Return the output list\n    return output\n\n\ndef"
    },
    {
        "number": 4757,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    e = int(stdin.readline().strip())\n    songs = []\n    for _ in range(e):\n        songs.append(list(map(int, stdin.readline().strip().split()[1:])))\n    \n    songs = [list(set(i)) for i in songs]\n    \n    seen = set()\n    for i in songs:\n        for j in i:\n            seen.add(j)\n    \n    return list(seen)"
    },
    {
        "number": 4757,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # get input\n    num_villagers = int(stdin.split(\"\\n\")[0])\n    num_consecutive_nights = int(stdin.split(\"\\n\")[1])\n    num_nights_with_songs = int(stdin.split(\"\\n\")[2])\n    villagers = []\n    for i in range(num_consecutive_nights):\n        songs = list(map(int, stdin.split(\"\\n\")[3 + i].split()))\n        villagers.append(set(songs))\n\n    # initialize result and bard\n    result = set()\n    bard = None\n\n    # loop through each night\n    for i in range(num_nights_with_songs):\n        # if there is a new bard\n        if i == 0 or bard not in villagers[i]:\n            bard = i + 1\n\n        # see who has heard all songs and add them to the result\n        for song in villagers[i]:\n            if all(song in v for v in villagers):\n                result.add(song)\n\n        # remove songs heard that night from all villagers\n        for j in range(len(villagers)):\n            villagers[j] = set(filter(lambda v: v not in result, villagers[j]))\n\n    return \" \".join(map(str, sorted(result)))\n"
    },
    {
        "number": 4757,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    villagers = int(stdin[0])\n    villagers_by_eve = int(stdin[1])\n    villagers_sets = []\n    for i in range(villagers_by_eve):\n        villagers_sets.append(set(map(int, stdin[2 + i].split())))\n    villagers_sets_len = len(villagers_sets)\n    all_songs = set(range(1, villagers + 1))\n    songs_lst = []\n    for i in range(villagers_sets_len):\n        songs_lst.append(all_songs.difference(villagers_sets[i]))\n    for i in songs_lst:\n        for j in i:\n            print(j)"
    },
    {
        "number": 4757,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    stdin = stdin.split('\\n')\n    n = int(stdin[0])\n    e = int(stdin[1])\n    lines = stdin[2:2+e]\n    arr = [line.split() for line in lines]\n    arr = [[int(val) for val in line] for line in arr]\n    arr = list(map(list, zip(*arr)))\n    arr = set(sum(arr, []))\n    arr = list(arr)\n    arr.sort()\n    return '\\n'.join(map(str, arr))\n"
    },
    {
        "number": 4757,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 4757,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split('\\n')[0])\n    E = int(stdin.split('\\n')[1])\n\n    S = stdin.split('\\n')[2:]\n\n    S = set(S)\n    S = list(S)\n\n    S.sort()\n\n    for i in range(len(S)):\n        S[i] = int(S[i])\n\n    for i in range(len(S)):\n        S[i] = i+1\n\n    start = 1\n    end = N\n\n    result = []\n\n    while start < end:\n        if S[start] == S[end]:\n            result.append(S[start])\n            start += 1\n            end -= 1\n        elif S[start] > S[end]:\n            end -= 1\n        elif S[start] < S[end]:\n            result.append(S[start])\n            start += 1\n    \n    return result\n\nprint(solution(input()))"
    },
    {
        "number": 4757,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, e = [int(x) for x in stdin.split()]\n    arr = []\n    for i in range(e):\n        arr.append([int(x) for x in stdin.split()][1:])\n    # print(arr)\n    res = set()\n    for j in range(len(arr)):\n        for k in range(len(arr[j])):\n            if arr[j][k] not in res:\n                res.add(arr[j][k])\n            else:\n                res.remove(arr[j][k])\n    for item in sorted(res):\n        print(item)\n    return ''\n"
    },
    {
        "number": 4757,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    villagers = [int(i) for i in stdin.split('\\n')[0].split()]\n    n = max(villagers)\n    songs = [0] * n\n    \n    for i in range(len(villagers)):\n        v = [int(j) for j in stdin.split('\\n')[i+1].split()]\n        songs = songs[:v[0]-1] + [1] + songs[v[0]-1:v[1]] + songs[v[1]:]\n    \n    for i in range(len(songs)):\n        if songs[i] == 1:\n            print(i+1)\n            \n"
    },
    {
        "number": 4757,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    _ = stdin.readline()\n\n    E = int(stdin.readline())\n    _ = stdin.readline()\n\n    def bfs(start, graph):\n        q = deque()\n        q.append(start)\n        visited = set()\n        visited.add(start)\n        while q:\n            node = q.popleft()\n            for neighbour in graph[node]:\n                if neighbour not in visited:\n                    q.append(neighbour)\n                    visited.add(neighbour)\n        return visited\n\n    graph = defaultdict(set)\n    for e in range(E):\n        line = stdin.readline().strip().split()\n        for i in range(2, len(line)):\n            graph[int(line[i])].add(int(line[i + 1]))\n\n    all_nodes = bfs(1, graph)\n    bfs_nodes = bfs(1, graph)\n    for n in all_nodes:\n        if n not in bfs_nodes:\n            print(n)\n"
    },
    {
        "number": 4758,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the number of different Jack-O' Lantern designs possible\"\"\"\n    return str(comb(3, stdin.split(), int))\n"
    },
    {
        "number": 4758,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    eye = int(stdin[0])\n    nose = int(stdin[1])\n    mouth = int(stdin[2])\n\n    total = 0\n\n    for i in range(1, eye + 1):\n        for j in range(1, nose + 1):\n            for k in range(1, mouth + 1):\n                total += 1\n\n    return total\n"
    },
    {
        "number": 4758,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"Solution Part B\"\n"
    },
    {
        "number": 4758,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return str(N * T * M)"
    },
    {
        "number": 4758,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    eyes = int(stdin.split()[0])\n    noses = int(stdin.split()[1])\n    mouths = int(stdin.split()[2])\n    return str(pow(eyes + noses + mouths, eyes) * pow(eyes, noses) * pow(noses, mouths))\n\n\ndef"
    },
    {
        "number": 4758,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    eye, nose, mouth = stdin.split()\n    return str(int(eye) * int(nose) * int(mouth))\n"
    },
    {
        "number": 4758,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \n    result = 0\n    eye, nose, mouth = map(int, stdin.split())\n    combine = lambda x, y: x * y\n    for i in range(1, eye + 1):\n        for j in range(1, nose + 1):\n            for k in range(1, mouth + 1):\n                result += combine(i, j) * combine(j, k) * combine(k, i)\n    return result\n"
    },
    {
        "number": 4758,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \n    eyes = stdin.split()\n    eyes = [int(i) for i in eyes]\n    result = []\n    for i in range(eyes[0]):\n        for j in range(eyes[1]):\n            for k in range(eyes[2]):\n                result.append(i+j+k)\n    return str(len(set(result)))\n\n\ndef"
    },
    {
        "number": 4758,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return \"0\"\n"
    },
    {
        "number": 4758,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return str(fact(sum(map(int, stdin.split()))))\n"
    },
    {
        "number": 4759,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Main solution function\"\"\"\n    # Get number of at-bats and convert to list of ints\n    at_bats = int(stdin.readline().strip())\n    at_bats_list = [int(at_bat) for at_bat in stdin.readline().strip().split()]\n\n    # Initialize variables\n    total_bases = 0\n    hits = 0\n    slugging_percentage = 0\n    at_bats_not_outs = 0\n\n    # Loop through at_bats_list and tally the at-bats\n    for at_bat in at_bats_list:\n        if at_bat >= 0:\n            total_bases += at_bat\n            hits += 1\n        elif at_bat < 0:\n            at_bats_not_outs += 1\n\n    # Calculate Slugging Percentage\n    slugging_percentage = hits / total_bases\n\n    # Adjust Slugging Percentage if outs\n    slugging_percentage = (hits / total_bases) * (at_bats_not_outs / total_bases)\n\n    # Return answer\n    print(slugging_percentage)\n    return \"\"\n"
    },
    {
        "number": 4759,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    solution will calculate the slugging percentage of a player.\n    :param stdin: stdin will contain a string with the number of at-bats\n    :return: str: string with the player's slugging percentage\n    \"\"\"\n    at_bats = int(stdin.split('\\n')[0])\n    hit_results = list(map(int, stdin.split('\\n')[1].split(' ')))\n    walks = hit_results.count(-1)\n    hit_results = [hit for hit in hit_results if hit!= -1]\n    totals = sum(hit_results)\n    slugging = totals / (at_bats - walks)\n    return str(round(slugging, 3))\n"
    },
    {
        "number": 4759,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the player\u2019s slugging percentage as a real number.\n\n    >>> solution('3\\n0 2 1\\n')\n    1.6666666666666667\n    \"\"\"\n    n = int(stdin.split()[0])\n    at_bats = [int(at_bat) for at_bat in stdin.split()[1:]]\n    total_bases = sum(at_bats)\n    slugging_percentage = sum(at_bats[:4]) / total_bases\n    return str(slugging_percentage)\n"
    },
    {
        "number": 4759,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Compute and return the player's batting average and slugging percentage.\n\n    >>> solution(\"3 0 2\\n1 -1 4\")\n    1.6666666666666667\n    \"\"\"\n    # TODO: implement this function\n\n    total_bases = 0\n    total_hits = 0\n\n    for at_bat in stdin.split():\n        at_bat = int(at_bat)\n        if at_bat > 0:\n            total_bases += at_bat\n            if at_bat >= 4:\n                total_hits += 4\n            else:\n                total_hits += at_bat\n\n    return total_hits / total_bases\n"
    },
    {
        "number": 4759,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3\\n3 0 2\")\n    '1.666666...'\n    >>> solution(\"3\\n1 -1 4\")\n    '2.5'\n    \"\"\"\n    runs, outs = stdin.split(\"\\n\")\n    runs = runs.split()\n    outs = outs.split()\n    runs = list(map(int, runs))\n    outs = list(map(int, outs))\n\n    # Get runs scored by player\n    runs_scored = sum(runs)\n\n    # Get number of outs by player\n    outs_by_player = sum(outs)\n\n    # Get number of official at-bats by player\n    at_bats_by_player = len(runs) - outs_by_player\n\n    # Get number of total bases\n    total_bases = sum(runs) + sum(outs)\n\n    # Calculate Slugging Percentage\n    slugging_percentage = (runs_scored + (total_bases - outs_by_player)) / total_bases\n    return \"%.3f\" % slugging_percentage\n"
    },
    {
        "number": 4759,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # \u8b80\u53d6\u6bcf\u4e00\u884c\n    n = int(stdin.readline().strip())\n    bases = list(map(int, stdin.readline().strip().split(' ')))\n\n    hits = 0\n    atBats = 0\n\n    for base in bases:\n        if base > 0:\n            hits += 1\n        elif base < 0:\n            pass\n        else:\n            atBats += 1\n\n    print(hits / atBats)\n    return ''\n"
    },
    {
        "number": 4759,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Compute player's slugging percentage.\n\n    Args:\n        stdin (str): Input from stdin.\n\n    Returns:\n        str: Output to stdout.\n    \"\"\"\n    at_bats = int(stdin.split()[0])\n    hits = [int(x) for x in stdin.split()[1].split()]\n    hits_dict = {0: 0, 1: 0, 2: 0, 3: 0, 4: 0}\n    for hit in hits:\n        hits_dict[hit] += 1\n    hits_dict.pop(-1, None)\n    total_hits = sum(hits_dict.values())\n    total_hits_not_walks = hits_dict[0] + hits_dict[1] + hits_dict[2] + hits_dict[3] + hits_dict[4]\n    return f\"{(total_hits / total_hits_not_walks):.3f}\"\n"
    },
    {
        "number": 4759,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3\\n0 -1 4\")\n    '2.5'\n    \"\"\"\n    n = int(stdin.split('\\n')[0])\n    s = stdin.split('\\n')[1]\n    at_bats = [int(x) for x in s.split(\" \")]\n    total_hits = 0\n    for at_bat in at_bats:\n        if at_bat > 0:\n            total_hits += 1\n    total_hits += at_bats.count(-1)\n    total_at_bats = sum(at_bats) + at_bats.count(-1)\n    return str(total_hits / total_at_bats)\n"
    },
    {
        "number": 4759,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Calculates the slugging percentage of a player\n    Args:\n        stdin (str): Inputted at-bats\n\n    Returns:\n        str: The slugging percentage\n    \"\"\"\n    num_of_at_bats = int(stdin.split(\"\\n\")[0])\n    bases = [int(x) for x in stdin.split(\"\\n\")[1].split(\" \")]\n    total = sum(bases)\n    num_of_hits = sum(x!= -1 for x in bases)\n    num_of_walks = sum(x == -1 for x in bases)\n    return round(num_of_hits / num_of_walks + num_of_hits / num_of_at_bats, 3)\n    pass\n"
    },
    {
        "number": 4759,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    n = int(stdin.strip().split(\"\\n\")[0])\n    \n    at_bats = [int(x) for x in stdin.strip().split(\"\\n\")[1].split(\" \")]\n    \n    total_hits = sum(at_bats)\n    \n    total_outcomes = 0\n    for at_bat in at_bats:\n        if at_bat in (0, -1):\n            total_outcomes += 0\n        elif at_bat in (1, 2, 3, 4):\n            total_outcomes += 1\n            \n    return \"{:.3f}\".format(total_outcomes / total_hits)\n"
    },
    {
        "number": 4760,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    This is a classic problem of sieve of Eratosthenes.\n    The solution is straightforward.\n    \"\"\"\n    n, k = map(int, stdin.split())\n    primes = [2, 3]\n    for i in range(5, n + 1, 2):\n        is_prime = True\n        for p in primes:\n            if i % p == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    print(primes[k - 1])\n"
    },
    {
        "number": 4760,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    return str(sieve(n, k))\n\n\ndef"
    },
    {
        "number": 4760,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split(' ')))\n    primes = set(range(2, n + 1))\n    s = set()\n    while len(primes)!= 0:\n        p = min(primes)\n        s.add(p)\n        for i in range(2, n // p + 1):\n            primes.discard(p * i)\n    return str(list(s)[k - 1])\n"
    },
    {
        "number": 4760,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(n) for n in stdin.split()]\n    primes = [2]\n    prime_count = 1\n    max_prime = 1\n    current = 2\n    while prime_count < k:\n        current += 1\n        for p in primes:\n            if current % p == 0:\n                break\n        else:\n            primes.append(current)\n            prime_count += 1\n            max_prime = current\n    print(max_prime)\n    return"
    },
    {
        "number": 4760,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    sieve = [1] * (n + 1)\n    p = 2\n    while p ** 2 <= n:\n        if sieve[p] == 1:\n            for i in range(p ** 2, n + 1, p):\n                sieve[i] = 0\n        p += 1\n\n    for i, e in enumerate(sieve):\n        if e == 1 and i >= k:\n            return i\n"
    },
    {
        "number": 4760,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split(' ')))\n    crossed_out_number = 0\n    for number in range(2, n + 1):\n        if crossed_out_number == k:\n            break\n        crossed_out_number += 1\n        if all(number % i!= 0 for i in range(2, number)):\n            crossed_out_number += 1\n    return str(number)\n"
    },
    {
        "number": 4760,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    primes = [i for i in range(2, n + 1)]\n    crossed_out = []\n    for p in primes:\n        for x in range(2, n + 1):\n            if p * x > n:\n                break\n            crossed_out.append(p * x)\n    return crossed_out[k - 1]"
    },
    {
        "number": 4760,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def eratosthenes(n: int) -> list:\n        result = list(range(2, n + 1))\n\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if i in result:\n                result = [j for j in result if j % i!= 0]\n\n        return result\n\n    N, K = map(int, stdin.split(' '))\n\n    primes = eratosthenes(N)\n    return str(primes[K - 1])\n"
    },
    {
        "number": 4760,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split(' '))\n    list_all = list(range(1, N + 1))\n    list_prime = []\n    for i in list_all:\n        if i == 1:\n            list_prime.append(i)\n        elif i == 2:\n            list_prime.append(i)\n        else:\n            for j in range(2, int(math.sqrt(i)) + 1):\n                if i % j == 0:\n                    break\n            else:\n                list_prime.append(i)\n    if K < len(list_prime):\n        return list_prime[K - 1]\n    else:\n        return -1\n"
    },
    {
        "number": 4760,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, K = [int(x) for x in stdin.strip().split()]\n    if K > N:\n        return -1\n    numbers = [n for n in range(1, N + 1)]\n    for n in numbers:\n        if n!= 0 and n!= 1:\n            if n % 2 == 0:\n                numbers.remove(n)\n                continue\n            for m in range(3, int(sqrt(n)) + 1, 2):\n                if n % m == 0:\n                    numbers.remove(n)\n                    break\n    return numbers[K - 1]\n    pass\n"
    },
    {
        "number": 4761,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    L, H = map(int, stdin.split())\n    solutions = []\n    for i in range(L, H + 1):\n        if not any(d == 0 for d in set(str(i))):\n            if not any(d % i == 0 for d in range(L, H + 1)):\n                solutions.append(i)\n    print(len(solutions))\n    return ''\n"
    },
    {
        "number": 4761,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    first, second = (int(x) for x in stdin.split())\n    start = first\n    end = second\n\n    def check(x):\n        return len(set(str(x))) == 6\n\n    count = 0\n    for i in range(start, end+1):\n        if check(i):\n            count += 1\n\n    return count\n"
    },
    {
        "number": 4761,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    L, H = map(int, stdin.split())\n    return str(sum(int(d) in range(L, H + 1) for d in str(L)))\n"
    },
    {
        "number": 4761,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    \n    # Your code goes here\n    return None"
    },
    {
        "number": 4761,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return solution\n\n    Parameters\n    ----------\n    stdin : str\n\n    Returns\n    -------\n    str\n        Solution to the problem\n    \"\"\"\n    stdin = stdin.split()\n    l, h = stdin\n    l, h = int(l), int(h)\n    return str(len([i for i in range(l, h + 1) if gcd(i, 1) * gcd(i, 2) * gcd(i, 3) * gcd(i, 4) * gcd(i, 5) * gcd(i, 6) * gcd(i, 7) * gcd(i, 8) * gcd(i, 9) == i]))\n"
    },
    {
        "number": 4761,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    L, H = map(int, stdin.split())\n    return str(math.factorial(H) // (math.factorial(H - L) * math.factorial(L)))\n\n\ndef"
    },
    {
        "number": 4761,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return sum(b - a + 1 for i in range(6) if i not in (1, 2, 3, 4, 5, 6))\n"
    },
    {
        "number": 4761,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    return '0'\n"
    },
    {
        "number": 4761,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split()\n    low, high = input[0], input[1]\n\n    return str(sum(map(lambda x: len(str(x)), range(int(low), int(high) + 1))))\n"
    },
    {
        "number": 4761,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\"\"\"\n    # Obtain input.\n    start, end = [int(n) for n in stdin.split()]\n\n    # Initialize counters.\n    counter = 0\n    # Counter is incremented if a value in the range is found that is divisible by all its digits.\n    for i in range(start, end + 1):\n        if check(i):\n            counter += 1\n    return str(counter)\n\n\ndef"
    },
    {
        "number": 4762,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return n / 2"
    },
    {
        "number": 4762,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return str(calculate_probability(stdin))\n"
    },
    {
        "number": 4762,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stdin = int(stdin)\n    if stdin == 1:\n        return 1\n    if stdin == 2:\n        return 2 / 3\n    if stdin == 3:\n        return 5 / 16\n    if stdin == 4:\n        return 3 / 8\n    if stdin == 5:\n        return 7 / 24\n    if stdin == 6:\n        return 11 / 40\n    if stdin == 7:\n        return 15 / 56\n    if stdin == 8:\n        return 19 / 84\n    if stdin == 9:\n        return 23 / 168\n    if stdin == 10:\n        return 31 / 252\n    if stdin == 11:\n        return 37 / 480\n    if stdin == 12:\n        return 41 / 720\n    return None"
    },
    {
        "number": 4762,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return str(solve(stdin))\n"
    },
    {
        "number": 4762,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Given the number of participants of the Secret Santa, returns the probability that one\n    or more people will wind up giving gifts to themselves.\n\n    >>> solution('2')\n    '0.5'\n    \"\"\"\n    num_participants = int(stdin)\n    possible_pairs = num_participants * (num_participants - 1) / 2\n    return str(possible_pairs / num_participants ** 2)\n"
    },
    {
        "number": 4762,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(1 / n)\n"
    },
    {
        "number": 4762,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin[1:len(stdin) - 1]\n    num = len(stdin.split(','))\n    ans = 1\n    for i in range(0, num):\n        ans *= (num - i) / (i + 1)\n    return str(ans)\n\nprint(solution(stdin.strip()))\n"
    },
    {
        "number": 4762,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin = int(stdin)\n    if stdin == 0:\n        return 0.0\n    if stdin == 1:\n        return 1.0\n    return 1.0 - (1.0 / (stdin * (stdin - 1)))\n\n\"\"\"\n"
    },
    {
        "number": 4762,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    if x > 2:\n        return '0.5'\n    else:\n        return '0.33333333'\nprint(solution(input()))\n"
    },
    {
        "number": 4762,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4763,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    target = int(stdin)\n    if target < 1 or target > 180:\n        return \"impossible\"\n\n    if target == 1:\n        return \"single {}\".format(1)\n\n    if target == 180:\n        return \"triple 20\"\n\n    return \"impossible\"\n"
    },
    {
        "number": 4763,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    target = int(stdin)\n    for n in range(1, 21):\n        for m in range(2, 21):\n            for l in range(3, 21):\n                if n * 20 + m * 2 + l * 3 == target:\n                    return f\"triple {n}\\n\" \\\n                           f\"double {m}\\n\" \\\n                           f\"single {l}\"\n\n    return \"impossible\"\n\n\ndef"
    },
    {
        "number": 4763,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    target = int(stdin)\n    if target == 180:\n        print('triple 20')\n        print('triple 20')\n        print('triple 20')\n    else:\n        print('impossible')\n    return ''\n"
    },
    {
        "number": 4763,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin)\n    if n < 1 or n > 180:\n        return 'impossible'\n    for single in range(1, 21):\n        for double in range(1, 21):\n            for triple in range(1, 21):\n                if single + double + triple == n:\n                    return f'single {single}'\n    for single in range(1, 21):\n        for double in range(1, 21):\n            if double + double + double == n:\n                return f'double {double}'\n    return 'impossible'\n"
    },
    {
        "number": 4763,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    result = ''\n    for i in range(1, 21):\n        # 6\n        if n - 2 * i in range(1, 21) and n - 3 * i in range(1, 21):\n            if n == 2 * i + 3 * i:\n                result = 'double'+ str(i)\n            elif n == 2 * i + 2 * i:\n                result = 'triple'+ str(i)\n            elif n == 2 * i + 2 * i + i:\n                result = 'double'+ str(i) + '\\n' + 'triple'+ str(i)\n            else:\n                result = 'impossible'\n            break\n\n    if result!= '':\n        return result\n    else:\n        return 'impossible'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4763,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return a string, either 'impossible' or'success'\"\"\"\n    # Your code goes here\n    # first of all, check if it is possible\n    n = int(stdin)\n    if n < 3:\n        return 'impossible'\n    else:\n        # for the range of all possible first\n        for i in range(1, 20):\n            # if you get a total > n, it is impossible\n            if i * 2 + i * 3 > n:\n                break\n            # if you get a total == n, you have a solution\n            if i * 2 + i * 3 == n:\n                return 'triple'+ str(i)\n            # if you get a total < n, try next\n            else:\n                continue\n        # if you cannot find a solution, it is impossible\n        if i == 19:\n            return 'impossible'\n        # for the range of all possible second\n        for j in range(i + 1, 20):\n            # if you get a total > n, it is impossible\n            if j * 2 + j * 3 > n:\n                break\n            # if you get a total == n, you have a solution\n            if j * 2 + j * 3 == n:\n                return 'double'+ str(j)\n            # if you get a total < n, try next\n            else:\n                continue\n        # if you cannot find a solution, it is impossible\n        if j == 19:\n            return 'impossible'\n        # for the range of all possible third\n        for k in range(j + 1, 20):\n            # if you get a total > n, it is impossible\n            if k * 2 + k * 3 > n:\n                break\n            # if you get a total == n, you have a solution\n            if k * 2 + k * 3 == n:\n                return'single'+ str(k)\n            # if you get a total < n, try next\n            else:\n                continue\n        # if you cannot find a solution, it is impossible\n        if k == 19:\n            return 'impossible'\n    # If we have reached this point, we have all solutions, so just print them\n    return'success'"
    },
    {
        "number": 4763,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    target_score = int(stdin)\n    return str(solution_runner(target_score))\n\n\ndef"
    },
    {
        "number": 4763,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    target = int(stdin)\n    if target < 1 or target > 180:\n        return \"impossible\"\n    if target == 18:\n        return \"double 18\"\n    if target == 36:\n        return \"double 18\"\n    if target == 18:\n        return \"triple 18\"\n    if target == 27:\n        return \"double 18\"\n    if target == 36:\n        return \"triple 18\"\n    return \"impossible\""
    },
    {
        "number": 4763,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    target = int(stdin)\n    if target % 20 == 0:\n        return \"triple \" + str(target // 20)\n    elif target % 20 == 15:\n        return \"double \" + str(target // 20) + \" single \" + str(target % 20)\n    else:\n        return \"impossible\"\n    \n"
    },
    {
        "number": 4763,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    arr = []\n    for i in range(1, 21):\n        for j in range(1, 21):\n            for k in range(1, 21):\n                if i * j * k == N:\n                    arr.append(i)\n                    arr.append(j)\n                    arr.append(k)\n                    return f\"{' '.join(map(str, arr))}\"\n    return \"impossible\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4764,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    h, v, n = map(int, stdin.split())\n    return str(2*n*h*n*v)\n"
    },
    {
        "number": 4764,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n,h,v=map(int,stdin.split())\n    print(h*v*(n-h-v))"
    },
    {
        "number": 4764,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, h, v = map(int, stdin.split())\n    return str(n * v * h * 4)\n"
    },
    {
        "number": 4764,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, h, v = map(int, stdin.split())\n    return str(n * h * v - 4 * n * min(h, v))\n"
    },
    {
        "number": 4764,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, h, v = map(int, stdin.split())\n    return str(n * h * v * 4)\n"
    },
    {
        "number": 4764,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = [int(x) for x in stdin.split(' ')]\n    return str(4 * ((a + b) * (c + d)) - max(a * c, b * d))\nprint(solution(input()))\n"
    },
    {
        "number": 4764,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    h, v, n = map(int, stdin.split(' '))\n\n    return str(h * v * 4)\n"
    },
    {
        "number": 4764,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdout\n"
    },
    {
        "number": 4764,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, h, v = [int(x) for x in stdin.split()]\n    h, v = sorted([h, v], key=lambda x: x**2)\n    return str(4 * n * h * v)\n"
    },
    {
        "number": 4764,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, h, v = map(int, stdin.split())\n    return str(2 * (n - h - v) * 4 + h * n + v * n)\n"
    },
    {
        "number": 4765,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''This solution prints the correct answer, but exceeds the time limit'''\n    stdin = stdin.split('\\n')\n    n = int(stdin[0])\n    m = stdin[1:n+1]\n    m = [int(i) for i in m]\n    nums = []\n    for i in range(n):\n        nums.append(m[i*2:i*2+2])\n    nums.sort(key=lambda x: x[1])\n    min_diff = nums[0][1] - nums[0][0]\n    for i in range(1, n):\n        if nums[i][1] - nums[i][0] < min_diff:\n            min_diff = nums[i][1] - nums[i][0]\n    return str(min_diff)\n\n\ndef"
    },
    {
        "number": 4765,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the solution to the perket problem.\"\"\"\n    # Get the input data.\n    num_ingredients = int(stdin[0])\n    ingredients = [list(map(int, input().split())) for _ in range(num_ingredients)]\n\n    # Find the minimum absolute difference between sourness and bitterness.\n    sourness, bitterness = None, None\n    for i in range(num_ingredients):\n        if not sourness:\n            sourness = ingredients[i][0]\n            bitterness = ingredients[i][1]\n        else:\n            sourness *= ingredients[i][0]\n            bitterness += ingredients[i][1]\n\n    return str(sourness - bitterness)\n"
    },
    {
        "number": 4765,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    sourness, bitterness = map(int, stdin.split())\n    return str(sourness * bitterness)\n"
    },
    {
        "number": 4765,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 4765,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    number_of_ingredients = int(stdin.readline().strip())\n    ingredients_sourness_and_bitterness = [tuple(map(int, line.strip().split(\" \"))) for line in stdin]\n    \n    return str(min(\n        abs(\n            reduce(\n                lambda acc, new_ingredients: acc + new_ingredients[0] * new_ingredients[1],\n                ingredients_sourness_and_bitterness,\n                0\n            )\n        ) -\n        reduce(\n            lambda acc, new_ingredients: acc + new_ingredients[1],\n            ingredients_sourness_and_bitterness,\n            0\n        )\n    ))\n"
    },
    {
        "number": 4765,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    import math\n    from sys import stdin\n    n, b = map(int, stdin.readline().split())\n    l = [list(map(int, stdin.readline().split())) for _ in range(n)]\n    l.sort(key=lambda x: x[1])\n    max_s = 0\n    for i in l:\n        max_s += i[0]\n    max_b = 0\n    for i in l:\n        max_b += i[1]\n    if max_s <= 1000000000 and max_b <= 1000000000:\n        # print(max_s, max_b)\n        if max_b - max_s < 0:\n            return str(0)\n        else:\n            return str(max_b - max_s)\n    else:\n        return str(-1)\nprint(solution(stdin))"
    },
    {
        "number": 4765,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    import math\n    N = int(stdin.readline())\n    ingredient_list = []\n    for i in range(N):\n        ingredient = list(map(int, stdin.readline().split()))\n        ingredient_list.append(ingredient)\n    sourness_sum = 0\n    bitterness_sum = 0\n    for s, b in ingredient_list:\n        sourness_sum += s\n        bitterness_sum += b\n    diff = math.inf\n    for s, b in ingredient_list:\n        if abs(sourness_sum - bitterness_sum - b) < diff:\n            diff = abs(sourness_sum - bitterness_sum - b)\n    return str(diff)\n"
    },
    {
        "number": 4765,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    numberOfIngredient = int(stdin.readline().strip())\n    sournessAndBittness = list(map(int, stdin.readline().strip().split(' ')))\n    print(sournessAndBittness)\n"
    },
    {
        "number": 4765,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # n = int(stdin.readline())\n    # sourness, bitterness = map(int, stdin.readline().split())\n    # print(sourness - bitterness)\n    print(solution('''\n3 10\n3 10\n10000000\n'''))\n\ndef"
    },
    {
        "number": 4765,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solve task.\"\"\"\n    data = stdin.splitlines()\n    sours = [int(x) for x in data[1::2]]\n    bites = [int(x) for x in data[::2]]\n    sour = sum(sours)\n    bit = sum(bites)\n    ans = abs(sour - bit)\n    return ans\n   ...\n"
    },
    {
        "number": 4766,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    flag = True\n    for i in range(n):\n        if stdin.split('\\n')[i].startswith('Simon says'):\n            print(stdin.split('\\n')[i][11:])\n            flag = False\n        if stdin.split('\\n')[i].startswith('Simon says') and flag == False:\n            print(stdin.split('\\n')[i][14:])\n            flag = True\n    return ''\n"
    },
    {
        "number": 4766,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    output = \"\"\n    for i, line in enumerate(lines):\n        if line.startswith(\"Simon says\"):\n            output += line[line.find(' '):] + '\\n'\n    return output\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4766,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n  myDict = dict()\n  n = int(stdin.strip())\n  for i in range(n):\n    command = stdin.strip().split()\n    if command[0] == \"Simon says\":\n      myDict[\" \".join(command[1:])] = None\n  return myDict\n  \n"
    },
    {
        "number": 4766,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    output = \"\"\n    for i in range(1, n+1):\n        command = stdin.splitlines()[i]\n        if \"Simon says\" in command:\n            command = command[10:]\n            if command[0] == \" \":\n                command = command[1:]\n            output += command\n    return output\n"
    },
    {
        "number": 4766,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Your solution goes here\n    return ''"
    },
    {
        "number": 4766,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    \n    for _ in range(N):\n        command = stdin.strip().split()\n        if command[0]!= \"Simon says\":\n            print(' '.join(command))\n\nsolution(\"1\\nSimon says smile.\\nSimon says raise your right hand.\\nSimon says smile.\")"
    },
    {
        "number": 4766,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(n):\n        line = stdin.readline().rstrip('\\n').split(' ')\n        if line[0] == 'Simon says':\n            print(' '.join(line[1:]))\n"
    },
    {
        "number": 4766,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def get_input() -> list:\n        \"\"\"\n        Gets input from stdin and returns a list of strings\n        \"\"\"\n        return stdin.strip().split('\\n')\n\n    def is_valid(input_str: str) -> bool:\n        \"\"\"\n        Returns True if the input string is in the expected format\n        \"\"\"\n        return len(input_str) <= 100\n\n    def get_command() -> str:\n        \"\"\"\n        Gets a command from stdin and returns it\n        \"\"\"\n        return get_input()[0]\n\n    def is_valid_command(command: str) -> bool:\n        \"\"\"\n        Returns True if the command is in the expected format\n        \"\"\"\n        return command.startswith(\"Simon says\")\n\n    def get_message(command: str) -> str:\n        \"\"\"\n        Returns the message of the command\n        \"\"\"\n        return command.split('Simon says')[1].strip()\n\n    commands = get_input()\n    command_list = list(filter(is_valid_command, commands))\n    valid_commands = list(filter(is_valid, command_list))\n    for valid_command in valid_commands:\n        print(get_message(valid_command))\n"
    },
    {
        "number": 4766,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    instructions = stdin.split('\\n')\n    count = 1\n    for instruction in instructions:\n        if count % 2 == 0:\n            if instruction[:7] == 'Simon says':\n                print(instruction[8:])\n                count += 1\n            else:\n                print('')\n                count += 1\n        else:\n            if instruction[:7] == 'Simon says':\n                print(instruction[8:])\n                count += 1\n            else:\n                print(instruction)\n                count += 1"
    },
    {
        "number": 4766,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4767,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Computes the number of additional operations before the computer blows up.\n\n    Args:\n        stdin (str): A string representing the input to the program.\n\n    Returns:\n        str: A string representing the output of the program.\n    \"\"\"\n    nums = [int(num) for num in stdin.split()]\n    threes = nums[0]\n    twos = nums[1]\n    fives = nums[2]\n    sevens = nums[3]\n    elevens = nums[4]\n    threes += 1\n    twos += 1\n    if threes > 19:\n        threes = 0\n    if twos > 19:\n        twos = 0\n    if fives > 19:\n        fives = 0\n    if sevens > 19:\n        sevens = 0\n    if elevens > 19:\n        elevens = 0\n    return str(max(0, threes - fives - sevens - elevens))\n"
    },
    {
        "number": 4767,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    numbers = list(map(int, stdin.split()))\n    l = len(numbers)\n    i = 0\n    c = 0\n    while i < l:\n        c += 1\n        if c % 3 == 0:\n            i += 1\n        numbers[i] += 1\n        if numbers[i] == 20:\n            numbers[i] = 0\n            c += 1\n        if c == 6:\n            c = 0\n    return str(l - i)\n"
    },
    {
        "number": 4767,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    a,b,c,d,e,f,g,h = stdin.split(\" \")\n    a = int(a)\n    b = int(b)\n    c = int(c)\n    d = int(d)\n    e = int(e)\n    f = int(f)\n    g = int(g)\n    h = int(h)\n    \n    n = 0\n    for i in range(19):\n        if (a!= b and (a+1)%19 == b or i%19 == b):\n            n += 1\n        if (c!= d and (c+1)%19 == d or i%19 == d):\n            n += 1\n        if (e!= f and (e+1)%19 == f or i%19 == f):\n            n += 1\n        if (g!= h and (g+1)%19 == h or i%19 == h):\n            n += 1\n    \n    return str(n)"
    },
    {
        "number": 4767,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution to the problem solving by using a simple algorithm.\"\"\"\n    numbers = list(map(int, stdin.split()))\n    for _ in range(1000):\n        if (numbers[0] % 2) == 0:\n            numbers[0] += 1\n        if (numbers[1] % 3) == 0:\n            numbers[1] += 1\n        if (numbers[2] % 5) == 0:\n            numbers[2] += 1\n        if (numbers[3] % 7) == 0:\n            numbers[3] += 1\n        if (numbers[4] % 11) == 0:\n            numbers[4] += 1\n        if (numbers[5] % 13) == 0:\n            numbers[5] += 1\n        if (numbers[6] % 17) == 0:\n            numbers[6] += 1\n        if (numbers[7] % 19) == 0:\n            numbers[7] += 1\n        numbers[0] %= 2\n        numbers[1] %= 3\n        numbers[2] %= 5\n        numbers[3] %= 7\n        numbers[4] %= 11\n        numbers[5] %= 13\n        numbers[6] %= 17\n        numbers[7] %= 19\n        if numbers[0] == 0 and numbers[1] == 0 and numbers[2] == 0 and numbers[3] == 0 and numbers[4] == 0 and numbers[5] == 0 and numbers[6] == 0 and numbers[7] == 0:\n            return str(len(stdin.split())-1)\n    return '0'\n"
    },
    {
        "number": 4767,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Calculates the total number of operations that can be performed without\n    the computer blowing up.\n    \"\"\"\n    r1, r2, r3, r5, r7, r11, r13, r17, r19 = [int(x) for x in stdin.split()]\n    count = 0\n    while r1!= 0 or r2!= 0 or r3!= 0 or r5!= 0 or r7!= 0 or r11!= 0 or r13!= 0 or r17!= 0 or r19!= 0:\n        count += 1\n        if r1 == 1:\n            r1 = 0\n            r2 += 1\n        if r2 % 2 == 1:\n            r2 = 0\n            r3 += 1\n        if r3 % 3 == 1:\n            r3 = 0\n            r5 += 1\n        if r5 % 5 == 1:\n            r5 = 0\n            r7 += 1\n        if r7 % 7 == 1:\n            r7 = 0\n            r11 += 1\n        if r11 % 11 == 1:\n            r11 = 0\n            r13 += 1\n        if r13 % 13 == 1:\n            r13 = 0\n            r17 += 1\n        if r17 % 17 == 1:\n            r17 = 0\n            r19 += 1\n        if r19 % 19 == 1:\n            r19 = 0\n    return str(count)\n"
    },
    {
        "number": 4767,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    v = list(map(int, stdin.split(\" \")))\n    cnt = 0\n    while True:\n        cnt += 1\n        if cnt % 1000 == 0:\n            print(cnt)\n        if cnt == 1000000:\n            print(cnt)\n        for i in range(8):\n            if (v[i] % 2 == 0 and v[(i + 1) % 8] % 2!= 0) or (v[i] % 3 == 0 and v[(i + 1) % 8] % 3!= 0) or (v[i] % 5 == 0 and v[(i + 1) % 8] % 5!= 0) or (v[i] % 7 == 0 and v[(i + 1) % 8] % 7!= 0) or (v[i] % 11 == 0 and v[(i + 1) % 8] % 11!= 0) or (v[i] % 13 == 0 and v[(i + 1) % 8] % 13!= 0) or (v[i] % 17 == 0 and v[(i + 1) % 8] % 17!= 0) or (v[i] % 19 == 0 and v[(i + 1) % 8] % 19!= 0):\n                break\n        else:\n            break\n    return str(cnt)\n"
    },
    {
        "number": 4767,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    numbers = [int(s) for s in stdin.split()]\n    i = 0\n    count = 0\n    p = 19\n    while i < len(numbers) and p > 0:\n        if numbers[i] == p:\n            i += 1\n            count += 1\n            p = 0\n        else:\n            p -= 1\n            count += 1\n    return str(count)"
    },
    {
        "number": 4767,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    S = [int(i) for i in stdin.split(\" \")]\n    res = 0\n    for i in range(2, 19):\n        while S[i]!= 0:\n            S[i] += 1\n            S[i-1] = S[i-1] + 1\n            if S[i] > S[i-1]:\n                S[i] = 0\n                res += 1\n    return res\n    \n"
    },
    {
        "number": 4767,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    def get_num(value: str):\n        if '0' <= value <= '9':\n            return int(value)\n        return ord(value) - ord('A') + 10\n\n    numbers = [get_num(num) for num in stdin.split()]\n    length = len(numbers)\n    count = 0\n    prime_dict = {2: 0, 3: 0, 5: 0, 7: 0, 11: 0, 13: 0, 17: 0, 19: 0}\n    while count < length:\n        for i in range(8):\n            n = numbers[i]\n            if n > 19:\n                prime_dict[19] += 1\n                if prime_dict[19] > 1:\n                    break\n                numbers[i] = 0\n                count += 1\n                continue\n            elif n % 19 == 0:\n                prime_dict[19] += 1\n                numbers[i] = 0\n                count += 1\n                continue\n            n = n % 19\n            for prime in prime_dict.keys():\n                if n % prime == 0:\n                    prime_dict[prime] += 1\n                    numbers[i] = 0\n                    count += 1\n                    break\n            if n > 0:\n                break\n\n    print(sum([1 if num > 0 else 0 for num in numbers]))\n"
    },
    {
        "number": 4767,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find number of additional operations before the computer explodes.\"\"\"\n    # Initialize registers.\n    registers = [int(v) for v in stdin.split()]\n    values = set(registers)\n    size = len(values)\n    # Compute the total number of operations.\n    count = 0\n    while registers!= [0] * size:\n        count += 1\n        # Increment the values in the registers and see if it overflows.\n        registers = [\n            (r + 1) % p if (r + 1) % p!= 0 else 0 for r, p in zip(registers, values)\n        ]\n    return str(count)\n"
    },
    {
        "number": 4768,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # get input\n    n, k = [int(x) for x in stdin.split('\\n')[0].split(' ')]\n    nodes = []\n    for _ in range(n):\n        nodes.append(stdin.split('\\n')[_])\n    \n    # get the heaviest and the lightest node\n    heaviest = 0\n    lightest = 0\n    for _ in nodes:\n        if _ == 'A':\n            heaviest += 1\n        elif _ == 'T':\n            lightest += 1\n    \n    # save the heaviest and the lightest node\n    heaviest_node = heaviest\n    lightest_node = lightest\n    # find the heaviest node's index\n    heaviest_index = nodes.index(nodes[heaviest_node])\n\n    # get the heaviest node's children\n    children = []\n    for _ in range(k):\n        if nodes[_] == 'A':\n            children.append(nodes[_+1])\n        elif nodes[_] == 'T':\n            children.append(nodes[_+1])\n\n    # find the heaviest node's children's index\n    children_index = []\n    for _ in range(len(children)):\n        children_index.append(nodes.index(children[_]))\n\n    # define the weight\n    weight = []\n    for _ in range(len(children)):\n        weight.append(abs(children_index[_] - heaviest_index))\n\n    # define the heaviest node's children\n    heaviest_children = []\n    for _ in range(len(children)):\n        heaviest_children.append(children[_])\n    \n    # define the lightest node's children\n    lightest_children = []\n    for _ in range(len(children)):\n        lightest_children.append(children[_])\n    \n    # get the most heaviest node's children's index\n    heaviest_children_index = []\n    for _ in range(len(heaviest_children)):\n        heaviest_children_index.append(nodes.index(heaviest_children[_]))\n\n    # get the lightest node's children's index\n    lightest_children_index = []\n    for _ in range(len(lightest_children)):\n        lightest_children_index.append(nodes.index(lightest_children[_]))\n\n    # get the heaviest node's children's weight\n    heaviest_weight = []\n    for _ in range(len(heaviest_children)):\n        heaviest_weight.append(abs(heaviest_children_index[_] - heaviest_index))\n\n    # get the lightest node's children's weight\n    lightest_weight = []\n    for _ in range(len(lightest_children)):\n        lightest_weight.append(abs(lightest_children_index[_] - lightest_index))\n\n    # define the heaviest weight\n    heaviest_weight_weight = 0\n    for _ in range(len(heaviest_weight)):\n        heaviest_weight_weight += heaviest_weight[_]\n    \n    # define the lightest weight\n    lightest_weight_weight = 0\n    for _ in range(len(lightest_weight)):\n        lightest_weight_weight += lightest_weight[_]\n\n    # get the heaviest weight\n    heaviest_weight_weight = heaviest_weight_weight / len(heaviest_weight)\n    lightest_weight_weight = lightest_weight_weight / len(lightest_weight)\n\n    # set the lightest weight\n    lightest_weight_weight = lightest_weight_weight + heaviest_weight_weight\n\n    # get the heaviest weight\n    heaviest_weight_weight = heaviest_weight_weight / len(heaviest_weight)\n\n    # get the lightest weight\n    lightest_weight_weight = lightest_weight_weight / len(lightest_weight)\n\n    # define the heaviest weight\n    heaviest_weight_weight = heaviest_weight_weight - lightest_weight_weight\n    lightest_weight_weight = lightest_weight_weight - heaviest_weight_weight\n\n    # get the heaviest weight\n    heaviest_weight_weight = heaviest_weight_weight / len(heaviest_weight)\n\n    # get the lightest weight\n    lightest_weight_weight = lightest_weight_weight / len(lightest_weight)\n\n    # get the most heaviest node\n    heaviest_node = heaviest_node + 1\n    lightest_node = lightest_node + 1\n\n    # define the heaviest weight\n    heaviest_weight_weight = heaviest_weight_weight - lightest_weight_weight\n\n    # get the most heaviest node\n    heaviest_node = heaviest_node - 1\n\n    # get the lightest weight\n    lightest_weight_weight = lightest_weight_weight - heaviest_weight_weight\n\n    # define the heaviest weight\n    heaviest_weight_weight = heaviest_weight_weight / len(heaviest_weight)\n\n    # get the lightest weight\n    lightest_weight_weight = lightest_weight_weight / len(lightest_weight)\n\n    # get the most lightest node\n    lightest_node = lightest_node - 1\n\n    # get the most lightest weight\n    lightest_weight_weight = lightest_weight_weight / len(lightest_weight)\n\n    # get the most lightest node\n    lightest_node = lightest_node - 1\n\n    # get the heaviest weight\n    heaviest_weight_weight = heaviest_weight_weight / len(heaviest_weight)\n\n    # get the most lightest weight\n    lightest_weight_weight = lightest_weight_weight / len(lightest_weight)\n\n    # get the most lightest node\n    lightest_node = lightest_node - 1\n\n    # get the most lightest weight\n    lightest_weight_weight = lightest_weight_weight / len(lightest_weight)\n\n    # get the most lightest node\n    lightest_node = lightest_node - 1\n\n    # define the heaviest weight\n    heaviest_weight_weight = heaviest_weight_weight / len(heaviest_weight)\n\n    # define the lightest weight\n    lightest_weight_weight = lightest_weight_weight / len(lightest_weight)\n\n    # get the most lightest weight\n    lightest_weight"
    },
    {
        "number": 4768,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    You can think of this problem as a graph coloring problem: if the graph is a tree, then we can color it with a bunch of colors. For example, if the tree is below, then we could color it with the following coloring. The problem is that we have multiple trees, so we need to find the coloring with the lowest total edge unlikeliness.\n\nThe unlikeliness of the tree is equal to the sum of all the edges' unlikeliness. Since there are multiple colors, we need to find the least total unlikeliness.\n\nFor example, let's take the following sample tree. It has a total of three edges with a total unlikeliness of 3.\n\n\n-----Solution-----\n\nThis solution does a post-order traversal to get the edges in the tree and then computes the unlikeliness of the tree.\n\n\"\"\"\n    from itertools import combinations\n\n    n, k = map(int, stdin.split())\n\n    dna = []\n    for _ in range(n):\n        dna.append(stdin.readline().strip())\n\n    def weight(s1, s2):\n        return sum(1 for i, j in zip(s1, s2) if i!= j)\n\n    def get_edges(s, d):\n        for i, j in combinations(range(len(s)), 2):\n            if weight(s[i], s[j]) == d:\n                yield (i, j)\n\n    edge_weights = [weight(s[0], s[1]) for s in combinations(dna, 2)]\n    edges = get_edges(dna, k - 1)\n\n    edges = [(i, j) for i, j in edges if weight(dna[i], dna[j]) not in edge_weights]\n\n    edges.sort(key=lambda t: edge_weights[t[1]])\n\n    # compute the minimal unlikeliness of the tree\n    unlikeliness = sum(edge_weights)\n    for i, j in edges:\n        unlikeliness -= edge_weights[i] + edge_weights[j]\n\n    print(unlikeliness)\n    for i, j in edges:\n        print(i + 1, j + 1)\n\n\ndef"
    },
    {
        "number": 4768,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    cases = stdin.split('\\n\\n')\n\n    # Test Cases\n    # case = cases[0].split()\n    # case = cases[1].split()\n    # case = cases[2].split()\n    # case = cases[3].split()\n\n    # Case 1\n    # case[0] = \"4 2\"\n    # case[1] = \"AA\"\n    # case[2] = \"AT\"\n    # case[3] = \"TT\"\n    # case[4] = \"TC\"\n\n    # Case 2\n    # case[0] = \"4 1\"\n    # case[1] = \"A\"\n    # case[2] = \"A\"\n    # case[3] = \"G\"\n    # case[4] = \"T\"\n\n    case = [x.split() for x in cases]\n\n    n, k = [int(x) for x in case[0][0].split()]\n    samples = [x[1:] for x in case[1:]]\n    samples = [[c for c in x] for x in samples]\n\n    graph = {i: {} for i in range(n)}\n    # print(graph)\n    edges = {}\n    for i in range(n):\n        for j in range(i+1, n):\n            # print(\"samples\", samples[i], samples[j])\n            edges[(i, j)] = 0\n            for c1, c2 in zip(samples[i], samples[j]):\n                if c1!= c2:\n                    edges[(i, j)] += 1\n\n            # if samples[i]!= samples[j]:\n            #     edges[(i, j)] = 1\n            #     edges[(j, i)] = 1\n            # else:\n            #     edges[(i, j)] = 0\n            #     edges[(j, i)] = 0\n\n    # print(edges)\n    # print(graph)\n\n    # for i in range(n-1):\n    #     for j in range(i+1, n):\n    #         if samples[i]!= samples[j]:\n    #             edges[(i, j)] = 1\n    #             edges[(j, i)] = 1\n    #         else:\n    #             edges[(i, j)] = 0\n    #             edges[(j, i)] = 0\n\n    # for i in range(n-1):\n    #     for j in range(i+1, n):\n    #         if samples[i]!= samples[j]:\n    #             edges[(i, j)] = 1\n    #             edges[(j, i)] = 1\n    #         else:\n    #             edges[(i, j)] = 0\n    #             edges[(j, i)] = 0\n\n    # print(edges)\n    # print(graph)\n\n    # Edges are from vertex i to vertex j\n\n    # import heapq\n    # import itertools\n\n    # def graph_dijkstra(edges, n):\n    #     graph = {i: {} for i in range(n)}\n\n    #     for (u, v), w in edges.items():\n    #         graph[u][v] = w\n    #         graph[v][u] = w\n\n    #     dist = {i: None for i in range(n)}\n    #     prev = {i: None for i in range(n)}\n    #     q = [(0, 0)]\n    #     heapq.heapify(q)\n    #     while len(q) > 0:\n    #         d, u = heapq.heappop(q)\n    #         if dist[u] is not None:\n    #             continue\n    #         dist[u] = d\n    #         prev[u] = u\n    #         for v in graph[u].keys():\n    #             if dist[v] is not None:\n    #                 continue\n    #             w = graph[u][v]\n    #             heapq.heappush(q, (d + w, v))\n\n    #     return dist, prev\n\n    # dist, prev = graph_dijkstra(edges, n)\n    # print(dist)\n\n    # dist, prev = graph_dijkstra(edges, n)\n\n    # print(dist)\n\n    # print(prev)\n    # print(edges)\n\n    # prev = {i: -1 for i in range(n)}\n    # for i in range(n):\n    #     if prev[i]!= -1:\n    #         continue\n    #     q = [i]\n    #     while len(q) > 0:\n    #         u = q.pop()\n    #         for v in graph[u]:\n    #             if prev[v] == -1:\n    #                 prev[v] = u\n    #                 q.append(v)\n\n    # print(prev)\n\n    # print(graph)\n\n    dist = {}\n    for i in range(n):\n        dist[i] = {}\n        for j in range(i+1, n):\n            if (i, j) not in edges:\n                dist[i][j] = 0\n                dist[j][i] = 0\n            else:\n                dist[i][j] = edges[(i, j)]\n                dist[j][i] = edges[(i, j)]\n\n    print(dist)\n\n    # print(graph)\n\n    unlikelihoods = []\n    for i in range(n):\n        for j in range(i+1, n):\n            if i == j:\n                unlikelihoods.append(0)\n            elif dist[i][j] == 0:\n                unlikelihoods.append(1)\n            else:\n                unlikelihoods.append(dist[i][j])\n\n    print(unlikelihoods)\n\n    lowest_unlikeliness = min(unlikelihoods)\n\n    # print(graph)\n\n    # print(lowest_unlikeliness)\n\n    # path_trees = []\n    # for u, v in edges:\n    #     if dist[u][v] < lowest_unlikeliness:\n    #         path_trees.append((u, v))\n\n    path_trees = [(u, v) for (u, v), w in"
    },
    {
        "number": 4768,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    n, k = map(int, stdin.split())\n    graph = [[] for i in range(n)]\n    for i in range(n - 1):\n        a, b = map(int, stdin.split()[i * k : i * k + k])\n        graph[a].append(b)\n        graph[b].append(a)\n    unlikeliness = []\n    for i in range(n):\n        unlikeliness.append({(i, j): 1 for j in graph[i]})\n        unlikeliness[i][(i, i)] = 0\n    unlikeliness = {i: sum(j.values()) for i, j in enumerate(unlikeliness)}\n    unlikeliness = sorted(unlikeliness.items(), key=lambda x: x[1])\n    best_tree = unlikeliness[0][0]\n    for i in range(n - 1):\n        a, b = best_tree\n        best_tree = min(\n            (a, b),\n            ({j: unlikeliness[0][0] for j in graph[a] if j!= b}, {a, b}),\n            key=lambda x: unlikeliness[0][1] - sum(unlikeliness[1][j] for j in x),\n        )\n    print(unlikeliness[0][1])\n    print(*best_tree)\n\n\ndef"
    },
    {
        "number": 4768,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    :param stdin:\n    :return:\n    '''\n    # input\n    number_of_samples = tuple(map(int, stdin.split()[:2]))\n    samples = tuple(stdin.split('\\n')[1:number_of_samples[0] + 1])\n    number_of_kmers = number_of_samples[1]\n    sample_length = number_of_kmers\n\n    # build dict and save weights\n    edges = {}\n    for i in range(number_of_samples[0]):\n        current_sample = samples[i]\n        for j in range(sample_length):\n            current_kmer = current_sample[j:j+1]\n            if current_kmer in edges.keys():\n                edges[current_kmer].append(i)\n            else:\n                edges[current_kmer] = [i]\n\n    # output\n    min_upl = number_of_samples[1] * (number_of_samples[1] - 1) + 1\n    for i in range(number_of_samples[0]):\n        for j in range(number_of_samples[0]):\n            if j > i:\n                current_sample = samples[i]\n                current_sample_complement = samples[j]\n                for k in range(sample_length):\n                    if current_sample[k:k + 1]!= current_sample_complement[k:k + 1]:\n                        # calculate current upl\n                        current_upl = len(edges[current_sample[k:k + 1]]) + len(edges[current_sample_complement[k:k + 1]]) - 1\n                        if current_upl < min_upl:\n                            min_upl = current_upl\n\n    print(min_upl)\n    for i in range(number_of_samples[0]):\n        for j in range(number_of_samples[0]):\n            if j > i:\n                current_sample = samples[i]\n                current_sample_complement = samples[j]\n                for k in range(sample_length):\n                    if current_sample[k:k + 1]!= current_sample_complement[k:k + 1]:\n                        print(edges[current_sample[k:k + 1]].index(i), edges[current_sample_complement[k:k + 1]].index(j))"
    },
    {
        "number": 4768,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    arr = [input() for _ in range(n)]\n    print(n - 1)\n    for _ in range(n - 1):\n        u, v = map(int, stdin.split())\n        print(u, v)\n"
    },
    {
        "number": 4768,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    (n, k) = map(int, stdin.split('\\n')[0].split())\n    trees = {}\n    for i in range(n):\n        tree = stdin.split('\\n')[i+1].strip()\n        trees[i] = tree\n    unlikeliness = {}\n    for i in range(n):\n        u = trees[i]\n        for j in range(n):\n            v = trees[j]\n            if i!= j:\n                unlikeliness[(u, v)] = sum(1 for x, y in zip(u, v) if x!= y)\n    l = min(unlikeliness.values())\n    return l\n"
    },
    {
        "number": 4768,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    An optimal tree is a tree with minimal unlikeliness. The unlikeliness of a tree is the sum of the weights of all edges.\n    The weight of an edge is the number of positions in which the two DNA strings differ.\n    '''\n    num_samples, num_chars = [int(x) for x in stdin.split(\"\\n\")[0].split(\" \")]\n\n    weight_dict = defaultdict(int)\n    matrix = [[0] * num_samples for _ in range(num_samples)]\n\n    # initialize matrix\n    for i in range(num_samples):\n        for j in range(num_samples):\n            matrix[i][j] = sum(a!= b for a, b in zip(stdin.split(\"\\n\")[i], stdin.split(\"\\n\")[j]))\n            weight_dict[(i, j)] = matrix[i][j]\n\n    # initialize edges\n    edges = {}\n    for i in range(num_samples):\n        for j in range(i):\n            if (i, j) in weight_dict:\n                edges[(i, j)] = weight_dict[(i, j)]\n            if (j, i) in weight_dict:\n                edges[(j, i)] = weight_dict[(j, i)]\n\n    optimal_tree = find_optimal_tree(edges, num_samples)\n    if not optimal_tree:\n        return \"NO\"\n\n    # print optimal tree\n    return \"\\n\".join(f\"{start} {end}\" for start, end in optimal_tree)\n\n\ndef"
    },
    {
        "number": 4768,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(\" \"))\n    graph = {(u, v): 0 for u in range(n) for v in range(n)}\n    for _ in range(n - 1):\n        u, v = map(lambda x: ord(x) - ord(\"A\"), stdin.split(\"\\n\")[0].split(\" \"))\n        u -= 1\n        v -= 1\n        graph[(u, v)] += 1\n        graph[(v, u)] += 1\n    return \"\"\n"
    },
    {
        "number": 4768,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    samples = [stdin.split()[i] for i in range(n)]\n    matrix = [[0 for i in range(n)] for j in range(n)]\n    for sample in samples:\n        for i in range(k - 1):\n            for j in range(k - 1):\n                matrix[ord(sample[i]) - 97][ord(sample[j + i + 1]) - 97] += 1\n    for i in range(n):\n        for j in range(n):\n            matrix[i][j] += 1\n    if k == 1:\n        return str(0)\n    else:\n        a = 1\n        b = 0\n        while a < n and b < n:\n            matrix[a][b] = n - 1\n            for i in range(b + 1, n):\n                matrix[a][i] = max(matrix[a][i], matrix[a][b] - 1)\n            for i in range(a + 1, n):\n                matrix[i][b] = max(matrix[i][b], matrix[a][b] - 1)\n            a += 1\n            b += 1\n        min_dis = 100\n        for i in range(n):\n            for j in range(n):\n                if matrix[i][j] < min_dis:\n                    min_dis = matrix[i][j]\n        return str(min_dis)\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4769,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    result = stdin.split()\n    \n    if len(result) == 1:\n        print(-1)\n    elif result[0] == result[1]:\n        print(result[0])\n    else:\n        print(get_shortest_root(result[0], result[1]))\n\n\ndef"
    },
    {
        "number": 4769,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return stdin if len(stdin) < 2 or not is_multigram(stdin) else get_root(stdin)\n    # if len(stdin) < 2 or not is_multigram(stdin):\n    #     return -1\n    # return get_root(stdin)\ndef"
    },
    {
        "number": 4769,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"aaaa\")\n    a\n    >>> solution(\"ab\")\n    -1\n    \"\"\"\n    word = stdin.lower()\n\n    for root in [word[:i] for i in range(1, len(word) + 1)]:\n        if len(set(word) - set(root)) == 1:\n            return root\n    return -1\n"
    },
    {
        "number": 4769,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4769,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\nfrom itertools import permutations\nimport sys\n\ndef"
    },
    {
        "number": 4769,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"aaaa\")\n    a\n    >>> solution(\"ab\")\n    -1\n    >>> solution(\"babb\")\n    b\n    >>> solution(\"aabbaabbba\")\n    aabba\n    \"\"\"\n    s = stdin\n    # write your code in Python 3.6\n    if len(set(s))!= len(s):\n        return -1\n    for i in range(1, len(s)):\n        if len(s) % i == 0:\n            s1 = \"\".join(sorted(s[:i]))\n            s2 = \"\".join(sorted(s[i:]))\n            if s1 == s2:\n                return s[:i]\n    return -1\n"
    },
    {
        "number": 4769,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return stdin[0]\n"
    },
    {
        "number": 4769,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # \n    # For each character, we will determine whether it's a possible candidate to be the root.\n    # We will also keep track of the longest common prefix of each candidate.\n    # If the current character is not present in the longest common prefix, it's not a candidate.\n    # If it is, we also update our longest common prefix.\n    # If there is a tie for longest common prefix, we return the shortest of the candidates.\n    # \n    # We keep on doing this until the word becomes anagram of the root.\n    # We return the root if we get to this point.\n    # If it's not, we return -1.\n    # \n    # The space complexity is O(M) where M is the size of the input string.\n    # The time complexity is O(M + N) where N is the length of the longest candidate and M is the length of the input string.\n    lcp = ''\n    root = ''\n    for i, char in enumerate(stdin):\n        # The longest common prefix can only be one character long\n        if len(lcp) == 0:\n            lcp = char\n        else:\n            if not char in lcp:\n                return '-1'\n            else:\n                lcp = lcp[:lcp.find(char)] + char\n        if lcp == '':\n            root = stdin[:i+1]\n    return root"
    },
    {
        "number": 4769,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"aaaa\")\n    a\n    >>> solution(\"ab\")\n    -1\n    \"\"\"\n"
    },
    {
        "number": 4769,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return '-1'\n"
    },
    {
        "number": 4770,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4770,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split('\\n')[0].split(' '))\n    return 'Dr. Chaz will have'+ str(n-m) +'piece[s] of chicken left over!' if n >= m else 'Dr. Chaz needs'+ str(m-n) +'more piece[s] of chicken!'"
    },
    {
        "number": 4770,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    people, pieces = [int(i) for i in stdin.split()]\n    chicken = 0\n    for i in range(people, 0, -1):\n        if (pieces // i) % 2 == 1:\n            chicken = i\n            break\n    if chicken == 0:\n        return f'Dr. Chaz needs {pieces} more piece[s] of chicken!'\n    else:\n        return f'Dr. Chaz will have {pieces - (pieces // chicken)} piece[s] of chicken left over!'"
    },
    {
        "number": 4770,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    total_people = int(stdin.readline())\n    total_chicken = int(stdin.readline())\n    people_chicken = total_people/total_chicken\n    leftover = total_people%total_chicken\n    print(\"Dr. Chaz will have %s piece[s] of chicken left over!\" % (leftover))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4770,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, M = [int(x) for x in stdin.split(\" \")]\n    \n    if N == 1:\n        return f'Dr. Chaz will have {M} piece[s] of chicken left over!'\n    elif M == 1:\n        return f'Dr. Chaz needs {M-1} piece[s] of chicken!'\n    else:\n        return f'Dr. Chaz needs {M-N} more piece[s] of chicken!'\n"
    },
    {
        "number": 4770,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    P = N - M\n    Q = N // M\n    R = N % M\n    if P == 0:\n        return \"Dr. Chaz needs {} more piece[s] of chicken!\".format(Q)\n    return \"Dr. Chaz will have {} piece[s] of chicken left over!\".format(P)"
    },
    {
        "number": 4770,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    import sys\n    n, m = map(int, stdin.readline().split())\n    if n > m:\n        print(f'Dr. Chaz needs {n - m} more piece of chicken!')\n    elif m > n:\n        print(f'Dr. Chaz needs {m - n} more piece of chicken!')\n    else:\n        print(f'Dr. Chaz will have {m - n} piece of chicken left over!')\n"
    },
    {
        "number": 4770,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    _, m, n = stdin.split(\" \")\n    m, n = int(m), int(n)\n    if m < n:\n        return \"Dr. Chaz needs \" + str(n - m) + \" piece[s] of chicken!\"\n    return \"Dr. Chaz will have \" + str(n - m) + \" piece[s] of chicken left over!\"\n"
    },
    {
        "number": 4770,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    n, m = [int(x) for x in stdin.split()]\n    leftover = (m % n)\n    if leftover == 0:\n        return f\"Dr. Chaz will have {leftover} piece[s] of chicken left over!\"\n    else:\n        return f\"Dr. Chaz needs {leftover} more piece[s] of chicken!\""
    },
    {
        "number": 4770,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return (stdin)"
    },
    {
        "number": 4771,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    # print(stdin.splitlines())\n    # print(len(stdin.splitlines()))\n    # print(stdin)\n    # print(stdin.splitlines())\n    # print(type(stdin))\n    # print(len(stdin))\n    # print(stdin[0])\n    # print(stdin.splitlines())\n    # print(len(stdin.splitlines()))\n    # print(len(stdin))\n    # print(stdin.splitlines()[0])\n    # print(stdin.splitlines()[0].split(' '))\n    # print(stdin.splitlines()[0].split(' ')[0])\n    # print(stdin.splitlines()[0].split(' ')[0])\n    # print(stdin.splitlines()[0].split(' ')[1])\n    # print(stdin.splitlines()[0].split(' ')[1])\n    # print(stdin.splitlines()[0].split(' ')[2])\n    # print(stdin.splitlines()[0].split(' ')[2])\n    # print(len(stdin.splitlines()[0].split(' ')))\n    # print(stdin.splitlines()[0].split(' '))\n    # print(type(stdin.splitlines()[0].split(' ')))\n    # print(stdin.splitlines()[0].split(' ')[0])\n    # print(type(stdin.splitlines()[0].split(' ')[0]))\n    # print(stdin.splitlines()[0].split(' ')[1])\n    # print(type(stdin.splitlines()[0].split(' ')[1]))\n    # print(stdin.splitlines()[0].split(' ')[2])\n    # print(type(stdin.splitlines()[0].split(' ')[2]))\n    # print(stdin.splitlines()[0].split(' ')[3])\n    # print(type(stdin.splitlines()[0].split(' ')[3]))\n    # print(stdin.splitlines()[0].split(' ')[0])\n    # print(type(stdin.splitlines()[0].split(' ')[0]))\n    # print(stdin.splitlines()[0].split(' ')[1])\n    # print(type(stdin.splitlines()[0].split(' ')[1]))\n    # print(stdin.splitlines()[0].split(' ')[2])\n    # print(type(stdin.splitlines()[0].split(' ')[2]))\n    # print(stdin.splitlines()[0].split(' ')[3])\n    # print(type(stdin.splitlines()[0].split(' ')[3]))\n    # print(stdin.splitlines()[0].split(' ')[0])\n    # print(type(stdin.splitlines()[0].split(' ')[0]))\n    # print(stdin.splitlines()[0].split(' ')[1])\n    # print(type(stdin.splitlines()[0].split(' ')[1]))\n    # print(stdin.splitlines()[0].split(' ')[2])\n    # print(type(stdin.splitlines()[0].split(' ')[2]))\n    # print(stdin.splitlines()[0].split(' ')[3])\n    # print(type(stdin.splitlines()[0].split(' ')[3]))\n    # print(stdin.splitlines()[0].split(' ')[0])\n    # print(type(stdin.splitlines()[0].split(' ')[0]))\n    # print(stdin.splitlines()[0].split(' ')[1])\n    # print(type(stdin.splitlines()[0].split(' ')[1]))\n    # print(stdin.splitlines()[0].split(' ')[2])\n    # print(type(stdin.splitlines()[0].split(' ')[2]))\n    # print(stdin.splitlines()[0].split(' ')[3])\n    # print(type(stdin.splitlines()[0].split(' ')[3]))\n    # print(stdin.splitlines()[0].split(' ')[0])\n    # print(type(stdin.splitlines()[0].split(' ')[0]))\n    # print(stdin.splitlines()[0].split(' ')[1])\n    # print(type(stdin.splitlines()[0].split(' ')[1]))\n    # print(stdin.splitlines()[0].split(' ')[2])\n    # print(type(stdin.splitlines()[0].split(' ')[2]))\n    # print(stdin.splitlines()[0].split(' ')[3])\n    # print(type(stdin.splitlines()[0].split(' ')[3]))\n    # print(stdin.splitlines()[0].split(' ')[0])\n    # print(type(stdin.splitlines()[0].split(' ')[0]))\n    # print(stdin.splitlines()[0].split(' ')[1])"
    },
    {
        "number": 4771,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4771,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, V = map(int, stdin.split(' '))\n    boxes = []\n    for _ in range(n):\n        l, w, h = map(int, stdin.split(' '))\n        boxes.append([l, w, h, l*w*h])\n    boxes.sort(key=lambda x: x[3], reverse=True)\n    for i in range(n):\n        if boxes[i][3] >= V:\n            return '{}'.format(boxes[i][3] - V)\n        else:\n            return '0'"
    },
    {
        "number": 4771,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return ''.join(list(map(lambda x: f'{int(x.split()[0]) - int(x.split()[1]):>010}', stdin.split('\\n')[1:])))\n\ndef"
    },
    {
        "number": 4771,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    O(n) where n is the number of boxes.\n    \"\"\"\n    lines = stdin.split(\"\\n\")\n    box_volumes = list(map(int, lines[1].split()))\n    boxes = list(map(list, lines[2:]))\n\n    best_box_id = 0\n    best_box_volume = 0\n    for i in range(len(boxes)):\n        box_volume = box_volumes[i]\n        box_dimensions = boxes[i]\n        box_dimensions_total = sum(box_dimensions)\n        box_volume -= box_dimensions_total\n        if box_volume > best_box_volume:\n            best_box_volume = box_volume\n            best_box_id = i\n    return str(best_box_volume)\n"
    },
    {
        "number": 4771,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, V = map(int, stdin.split())\n    boxes = list()\n    for _ in range(n):\n        l, w, h = map(int, stdin.split())\n        boxes.append((l*w*h, (l, w, h)))\n    boxes.sort()\n    best = boxes[-1][0]\n    return best - V\n"
    },
    {
        "number": 4771,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return str(0)"
    },
    {
        "number": 4771,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n   ...\n    return answer\n"
    },
    {
        "number": 4771,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the maximum number of consecutive days of shits.\"\"\"\n    n, V = map(int, stdin.split())\n    boxes = [list(map(int, stdin.split())) for _ in range(n)]\n    boxes.sort(key=lambda box: box[2], reverse=True)\n    d = [box[2] for box in boxes]\n    return max(d[i] - d[i-1] for i in range(1, n))\n"
    },
    {
        "number": 4771,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # my solution\n    # return '{0:.10f}'.format(max((sum([int(i) for i in i.split(' ')]) - V) for i in stdin.split('\\n')[1:]))\n    # solution with inputs as list\n    inputs = [int(i) for i in stdin.split('\\n')[1:]]\n    return '{0:.10f}'.format(max(i - V for i in inputs))\n"
    },
    {
        "number": 4772,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4772,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    r, c = map(int, stdin.split())\n    cross = [[stdin[i * c + j] for j in range(c)] for i in range(r)]\n    words = set(stdin.split())\n    ans = set()\n    for w in words:\n        w = w.strip()\n        if len(w) < 2:\n            continue\n        if w[0] not in cross[0]:\n            continue\n        if w[-1] not in cross[-1]:\n            continue\n        r = -1\n        c = -1\n        for i in range(r):\n            if w[0] in cross[i]:\n                r = i\n                break\n        for j in range(c):\n            if w[-1] in cross[j]:\n                c = j\n                break\n        if r == -1 or c == -1:\n            continue\n        ans.add(w)\n    return min(ans)\n\n\ndef"
    },
    {
        "number": 4772,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    r, c = [int(x) for x in stdin.split()]\n    grid = [[x for x in stdin.split('\\n')[y][::-1]] for y in range(r)]\n    grid = [list(reversed(x)) for x in zip(*grid)]\n    grid = [x[::-1] for x in grid]\n    result = ''\n    for x in grid:\n        if len(x) > 0 and x[0] == '#':\n            result += x[1]\n        else:\n            result += x[0]\n    return result\n"
    },
    {
        "number": 4772,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    input = stdin.splitlines()\n    R, C = [int(x) for x in input[0].split()]\n    matrix = [[x for x in line] for line in input[1:]]\n\n    def word_generator(matrix, r, c, visited, s):\n        if r == R-1 and c == C-1:\n            yield s\n            return\n        visited[r][c] = True\n        for new_r, new_c in ((r + 1, c), (r, c + 1), (r, c - 1), (r - 1, c)):\n            if 0 <= new_r < R and 0 <= new_c < C and not visited[new_r][new_c]:\n                for word in word_generator(matrix, new_r, new_c, visited, s + matrix[new_r][new_c]):\n                    yield word\n        visited[r][c] = False\n\n    for r in range(R):\n        for c in range(C):\n            for word in word_generator(matrix, r, c, [False] * R, ''):\n                yield word\n\n\ndef"
    },
    {
        "number": 4772,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solves a crossword puzzle that starts on a grid of R x C squares.\n    Args:\n        stdin (str): string of characters representing the puzzle.\n    Returns:\n        str: Lexicographically smallest word in the crossword.\n    \"\"\"\n    board = []\n    for row in stdin.split('\\n'):\n        board.append([char for char in row.strip()])\n    ans = None\n    for r in range(R):\n        for c in range(C):\n            if board[r][c]!= '#':\n                ans = solve(board, r, c, set(), ans)\n    return ans\n\ndef"
    },
    {
        "number": 4772,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Let the user input the two dimensional array.\n    # Split the input into rows using the '\\n'.\n    rows = stdin.split('\\n')\n    # Let the user input the number of rows.\n    rows_num = int(rows[0].split(' ')[0])\n    # Let the user input the number of columns.\n    columns_num = int(rows[0].split(' ')[1])\n    # Let the user input the blocked characters.\n    blocked_characters = []\n    for r in range(1, len(rows)):\n        blocked_characters.append(rows[r])\n    # Create a matrix for the crossword puzzle.\n    matrix = []\n    # Iterate the rows for the user input.\n    for r in range(rows_num):\n        # Split the rows for the user input.\n        row = rows[r + 1].split(' ')\n        # Iterate the columns for the user input.\n        matrix.append([])\n        for c in range(columns_num):\n            # Append the character from the split row for the user input.\n            matrix[r].append(row[c])\n    # Create a list to store the words that we want to search for.\n    words_list = []\n    # Iterate the blocked characters for the user input.\n    for blocked_character in blocked_characters:\n        # Split the blocked character for the user input.\n        blocked_char = blocked_character.split(' ')\n        # Find the length of the blocked character.\n        length_of_blocked_char = int(blocked_char[0])\n        # Check if the blocked character is a word.\n        if length_of_blocked_char >= 2:\n            # Find the index of the blocked character in the matrix.\n            index = [row.index(blocked_character) for row in matrix].index(0)\n            # Get the row of the blocked character.\n            row = matrix[index]\n            # Find the index of the blocked character in the row.\n            index = row.index(blocked_character)\n            # Get the column of the blocked character.\n            column = [row[index] for row in matrix].index(blocked_character)\n            # Create a word starting from the blocked character.\n            word = blocked_character\n            # Iterate the columns for the user input.\n            for c in range(index, columns_num):\n                # Check if the index is out of range.\n                if c < columns_num - length_of_blocked_char:\n                    # Check if the character is blocked or not.\n                    if matrix[index][c] == '#':\n                        # Add the blocked character to the word.\n                        word += matrix[0][c]\n                    else:\n                        # Add the non-blocked character to the word.\n                        word += matrix[index][c]\n                else:\n                    # Add the blocked character to the word.\n                    word += matrix[0][c]\n            # Append the word to the list of words.\n            words_list.append(word)\n    # Sort the words in the list of words.\n    words_list.sort()\n    # Iterate the words in the list of words.\n    for word in words_list:\n        # Return the word.\n        return word\n"
    },
    {
        "number": 4772,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n  '''\n  Returns the lexicographically smallest word in the crossword puzzle as a string.\n\n  Parameters:\n    stdin (str): The input string\n\n  Returns:\n    str: The lexicographically smallest word in the crossword puzzle\n  '''\n\n  return \"\"\n"
    },
    {
        "number": 4772,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # \u0441\u043d\u0430\u0447\u0430\u043b\u0430 \u0438\u0437\u0432\u043b\u0435\u043a\u0430\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0435 \u043a\u043e\u043b\u043e\u043d\u043e\u043a \u0438 \u043a\u043e\u043b\u043e\u043d\u043a\u0438\n    rows, columns = [int(el) for el in stdin.split()]\n    # \u0437\u0430\u0442\u0435\u043c \u0438\u0437\u0432\u043b\u0435\u043a\u0430\u0435\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\n    # \u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0445 \u043a\u043e\u043b\u043e\u043d\u043e\u043a \u0438 \u043a\u043e\u043b\u043e\u043d\u043a\u0438 \u0438\u0449\u0435\u043c \u0441\u0430\u043c\u043e\u0435 \u043a\u043e\u0440\u043e\u0442\u043a\u043e\u0435 \u0441\u043b\u043e\u0432\u043e\n    crossword = []\n    for i in range(rows):\n        crossword.append(stdin.split()[i])\n    lex_solution = ''\n    # \u043d\u0430\u0445\u043e\u0434\u0438\u043c \u0441\u0430\u043c\u043e\u0435 \u043a\u043e\u0440\u043e\u0442\u043a\u043e\u0435 \u0441\u043b\u043e\u0432\u043e\n    for i in range(columns):\n        for j in range(rows):\n            if crossword[j][i]!= '#':\n                lex_solution += crossword[j][i]\n    lex_solution = min(lex_solution.split())\n    return lex_solution"
    },
    {
        "number": 4772,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    R, C = list(map(int, lines[0].split()))\n    board = []\n    for line in lines[1:]:\n        board.append([c for c in line])\n\n    def is_valid(board, r, c, word, i, j):\n        for i in range(len(word)):\n            if board[r + i][c + i]!= '#' and word[i]!= board[r + i][c + i]:\n                return False\n        return True\n\n    def dfs(board, r, c, path, seen):\n        if len(path) > 2:\n            return path\n        if r >= R or c >= C:\n            return path\n        if (r, c) in seen:\n            return path\n        seen.add((r, c))\n        if is_valid(board, r, c, path, 0, 0):\n            path.append(board[r][c])\n            dfs(board, r + 1, c, path, seen)\n            dfs(board, r, c + 1, path, seen)\n        return path\n\n    return ''.join(dfs(board, 0, 0, [], set()))\n"
    },
    {
        "number": 4772,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return '#'"
    },
    {
        "number": 4773,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    result = stdin\n    while True:\n        if len(result) > 100:\n            break\n        l = result.split('MM')\n        result = l[0] + l[1]\n    return result"
    },
    {
        "number": 4773,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find the minimum number of characters needed to transmit the route.\"\"\"\n    length = len(stdin)\n    stdin = stdin.replace('N', 'WNW')\n    stdin = stdin.replace('S', 'WWS')\n    stdin = stdin.replace('E', 'WES')\n    stdin = stdin.replace('W', 'NWE')\n    stdin = stdin.replace('M', 'MM')\n    return length - stdin.count('N') - stdin.count('S') - stdin.count('E') - stdin.count('W') - stdin.count('M')\n"
    },
    {
        "number": 4773,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    print(len(stdin))"
    },
    {
        "number": 4773,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    answer = ''\n    return answer\n"
    },
    {
        "number": 4773,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def get_macro(route: str) -> str:\n        min_length = 0\n        for letter in route:\n            if letter == \"M\":\n                min_length += 1\n            else:\n                min_length += 1\n        return str(min_length)\n\n    def get_encoded(route: str) -> str:\n        encoded = \"\"\n        for i in range(0, len(route) - 1, 2):\n            encoded += route[i]\n        return encoded\n\n    return get_encoded(get_macro(stdin))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4773,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    route = stdin.replace('M', '')\n    macro = stdin.replace('M', 'MMMM')\n    print(len(route) + len(macro) - 3)\n    return ''\n"
    },
    {
        "number": 4773,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    result = \"\"\n    while stdin!= \"\":\n        if stdin.find(\"N\")!= -1:\n            result += stdin.split(\"N\")[0] + \"M\" + stdin.split(\"N\")[1].split(\"M\")[0]\n            stdin = stdin.split(\"N\")[1].split(\"M\")[1]\n        elif stdin.find(\"S\")!= -1:\n            result += stdin.split(\"S\")[0] + \"M\" + stdin.split(\"S\")[1].split(\"M\")[0]\n            stdin = stdin.split(\"S\")[1].split(\"M\")[1]\n        elif stdin.find(\"E\")!= -1:\n            result += stdin.split(\"E\")[0] + \"M\" + stdin.split(\"E\")[1].split(\"M\")[0]\n            stdin = stdin.split(\"E\")[1].split(\"M\")[1]\n        elif stdin.find(\"W\")!= -1:\n            result += stdin.split(\"W\")[0] + \"M\" + stdin.split(\"W\")[1].split(\"M\")[0]\n            stdin = stdin.split(\"W\")[1].split(\"M\")[1]\n    print(len(result))\n    return result"
    },
    {
        "number": 4773,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    current = {'N': 0, 'S': 0, 'E': 0, 'W': 0}\n    route = {'N': 0, 'S': 0, 'E': 0, 'W': 0}\n    for s in stdin:\n        if s == 'M':\n            current['N'] += route['N']\n            current['S'] += route['S']\n            current['E'] += route['E']\n            current['W'] += route['W']\n            route = {'N': 0, 'S': 0, 'E': 0, 'W': 0}\n            continue\n        route[s] += 1\n    return sum(current.values())\n"
    },
    {
        "number": 4773,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    nsew = ['N', 'E', 'W', 'S']\n    start = stdin[0]\n    st = stdin[1:]\n    curr = 0\n    if st == '':\n        return 0\n    if start == 'M':\n        return len(st)\n    if st.startswith(nsew):\n        st = st[1:]\n        if st.startswith('M'):\n            return len(st)\n        curr += len(st)\n        if curr < 10:\n            return curr\n        else:\n            return len(st)\n    else:\n        return len(st)"
    },
    {
        "number": 4773,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.count('N') + stdin.count('S')\n    e = stdin.count('E') + stdin.count('W')\n    return min(n, e) * 2 + (1 if n < e else 0)\n"
    },
    {
        "number": 4774,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = map(int, stdin.split(' '))\n    for i in itertools.product([0, 1], repeat=4):\n        if i[0] == 1:\n            if i[1] == 1 and i[2] == 1 and i[3] == 1:\n                if i[0] + i[1] + i[2] + i[3] == n[0] + n[1] + n[2] + n[3]:\n                    return f\"{n[0]} * {n[1]} = {n[2]} - {n[3]}\"\n            elif i[1] == 1 and i[2] == 1 and i[3] == 1:\n                if i[0] + i[1] + i[2] + i[3] == n[0] + n[1] + n[2] + n[3]:\n                    return f\"{n[0]} + {n[1]} = {n[2]} * {n[3]}\"\n            elif i[1] == 1 and i[2] == 1:\n                if i[0] + i[1] + i[2] + i[3] == n[0] + n[1] + n[2] + n[3]:\n                    return f\"{n[0]} + {n[1]} = {n[2]} + {n[3]}\"\n            elif i[2] == 1 and i[3] == 1:\n                if i[0] + i[1] + i[2] + i[3] == n[0] + n[1] + n[2] + n[3]:\n                    return f\"{n[0]} - {n[1]} = {n[2]} * {n[3]}\"\n        elif i[0] == 1 and i[1] == 1:\n            if i[2] == 1 and i[3] == 1:\n                if i[0] + i[1] + i[2] + i[3] == n[0] + n[1] + n[2] + n[3]:\n                    return f\"{n[0]} + {n[1]} = {n[2]} + {n[3]}\"\n            elif i[2] == 1 and i[3] == 1:\n                if i[0] + i[1] + i[2] + i[3] == n[0] + n[1] + n[2] + n[3]:\n                    return f\"{n[0]} - {n[1]} = {n[2]} - {n[3]}\"\n            elif i[2] == 1 and i[3] == 1:\n                if i[0] + i[1] + i[2] + i[3] == n[0] + n[1] + n[2] + n[3]:\n                    return f\"{n[0]} - {n[1]} = {n[2]} * {n[3]}\"\n            elif i[2] == 1 and i[3] == 1:\n                if i[0] + i[1] + i[2] + i[3] == n[0] + n[1] + n[2] + n[3]:\n                    return f\"{n[0]} * {n[1]} = {n[2]} + {n[3]}\"\n        elif i[0] == 1 and i[1] == 1:\n            if i[2] == 1 and i[3] == 1:\n                if i[0] + i[1] + i[2] + i[3] == n[0] + n[1] + n[2] + n[3]:\n                    return f\"{n[0]} + {n[1]} = {n[2]} + {n[3]}\"\n            elif i[2] == 1 and i[3] == 1:\n                if i[0] + i[1] + i[2] + i[3] == n[0] + n[1] + n[2] + n[3]:\n                    return f\"{n[0]} - {n[1]} = {n[2]} - {n[3]}\"\n            elif i[2] == 1 and i[3] == 1:\n                if i[0] + i[1] + i[2] + i[3] == n[0] + n[1] + n[2] + n[3]:\n                    return f\"{n[0]} * {n[1]} = {n[2]} - {n[3]}\"\n            elif i[2] == 1 and i[3] == 1:\n                if i[0] + i[1] + i[2] + i[3] == n[0] + n[1] + n[2] + n[3]:\n                    return f\"{n[0]} - {n[1]} = {n[2]} * {n[3]}\"\n        elif i[0] == 1 and i[1] == 1:\n            if i[2] == 1 and i[3] == 1:\n                if i[0] + i[1] + i[2] + i[3] == n[0] + n[1] + n[2] + n[3]:\n                    return f\"{n[0]} - {n[1]} = {n[2]} + {n[3]}\"\n            elif i[2] == 1 and i[3] == 1:\n                if i[0] + i[1] + i[2] + i[3] == n[0] + n[1] + n[2] + n[3]:\n                    return f\"{n[0]} + {n[1]} = {n[2]} - {n[3]}\"\n            elif i[2] == 1 and i[3] == 1:\n                if i[0] + i[1] + i[2] + i[3] == n[0] + n[1] + n[2] + n[3]:\n                    return f\"{n[0]} - {n[1]} = {n[2]} * {n[3]}\"\n            elif i[2] == 1 and i[3] == 1:\n                if i[0] + i[1] + i[2] + i[3] == n[0] + n[1] + n[2] + n[3]:\n                    return f\"{n[0]} * {n[1]} = {n[2]} + {n[3]}\"\n    return \"problems ahead\"\n"
    },
    {
        "number": 4774,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solves the problem\"\"\"\n    a, b, c, d = [int(i) for i in stdin.split(' ')]\n    result = []\n    if a == 0 and b == 0:\n        if c!= 0 or d!= 0:\n            return \"problems ahead\"\n        return \"0 * 4 = 2 - 2\"\n    if a == 0:\n        if c == 0:\n            result.append(str(a) + \" \" + str(b) + \" \" + \"= \" + str(c) + \" \" + str(d))\n            return result\n        if d == 0:\n            result.append(str(a) + \" \" + \"-\" + \" \" + str(b) + \" \" + \"= \" + str(c) + \" \" + str(d))\n            return result\n    if b == 0:\n        if d == 0:\n            result.append(str(a) + \" \" + \"-\" + \" \" + str(b) + \" \" + \"= \" + str(c) + \" \" + str(d))\n            return result\n    if a == 0:\n        if c == 0:\n            result.append(str(a) + \" \" + str(b) + \" \" + \"= \" + \"0 \" + \"-\" + \" \" + str(d))\n            return result\n        if d == 0:\n            result.append(str(a) + \" \" + str(b) + \" \" + \"= \" + \"0 \" + \"-\" + \" \" + str(d))\n            return result\n    if b == 0:\n        if d == 0:\n            result.append(str(a) + \" \" + \"-\" + \" \" + str(b) + \" \" + \"= \" + \"0 \" + \"-\" + \" \" + str(d))\n            return result\n    if c == 0:\n        if d == 0:\n            result.append(str(a) + \" \" + \"-\" + \" \" + str(b) + \" \" + \"= \" + \"0 \" + \"-\" + \" \" + str(d))\n            return result\n        if d == 0:\n            result.append(str(a) + \" \" + \"-\" + \" \" + str(b) + \" \" + \"= \" + str(c) + \" \" + \"0 \")\n            return result\n    if d == 0:\n        if c == 0:\n            result.append(str(a) + \" \" + str(b) + \" \" + \"= \" + str(c) + \" \" + \"0 \" + \"-\" + \" \" + str(d))\n            return result\n    if a == 0:\n        if c == 0:\n            result.append(str(a) + \" \" + \"-\" + \" \" + str(b) + \" \" + \"= \" + \"0 \" + \"-\" + \" \" + str(d))\n            return result\n        if d == 0:\n            result.append(str(a) + \" \" + \"-\" + \" \" + str(b) + \" \" + \"= \" + str(c) + \" \" + \"0 \")\n            return result\n    if b == 0:\n        if d == 0:\n            result.append(str(a) + \" \" + \"-\" + \" \" + str(b) + \" \" + \"= \" + str(c) + \" \" + \"0 \" + \"-\" + \" \" + str(d))\n            return result\n        if c == 0:\n            result.append(str(a) + \" \" + \"-\" + \" \" + str(b) + \" \" + \"= \" + \"0 \" + \"-\" + \" \" + str(d))\n            return result\n    if c == 0:\n        if d == 0:\n            result.append(str(a) + \" \" + str(b) + \" \" + \"= \" + str(c) + \" \" + \"0 \" + \"-\" + \" \" + str(d))\n            return result\n    if d == 0:\n        if c == 0:\n            result.append(str(a) + \" \" + str(b) + \" \" + \"= \" + \"0 \" + \"-\" + \" \" + str(c) + \" \" + \"0\")\n            return result\n    result.append(str(a) + \" \" + \"-\" + \" \" + str(b) + \" \" + \"= \" + str(c) + \" \" + \"0 \")\n    result.append(str(a) + \" \" + str(b) + \" \" + \"= \" + str(c) + \" \" + \"0 \" + \"-\" + \" \" + str(d))\n    return result\n"
    },
    {
        "number": 4774,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    equations = []\n    for i in range(a, b+1):\n        for j in range(c, d+1):\n            equations.append(f'{i} ~ {j} ~ {i+j} ~ {i} ~ {j} ~ {i//j}')\n    equations = sorted(equations)\n    for equation in equations:\n        print(equation)\n    return ''"
    },
    {
        "number": 4774,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Finds all the expressions that evalute to True.\n    \"\"\"\n    a, b, c, d = list(map(int, stdin.split(' ')))\n    for op1 in '+-*/':\n        for op2 in '+-*/':\n            for op3 in '+-*/':\n                if eval(f'{a} {op1} {b} ={op2} {c} {op3} {d}') == 0:\n                    print(f'{a} {op1} {b} ={op2} {c} {op3} {d}')"
    },
    {
        "number": 4774,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    s = set()\n    for i in range(a, b + 1):\n        for j in range(c, d + 1):\n            if i + j == a + b and i - j == a - b and i * j == a * b:\n                s.add(f'{i} {j} {i} {j} = {i - j} {i} {j}')\n    return '\\n'.join(sorted(s)) if s else 'problems ahead'\n"
    },
    {
        "number": 4774,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = [int(n) for n in stdin.split()]\n    if a == 0:\n        return \"problems ahead\"\n    solns = []\n    for op1 in [\"+\", \"-\", \"*\", \"/\"]:\n        for op2 in [\"+\", \"-\", \"*\", \"/\"]:\n            for op3 in [\"+\", \"-\", \"*\", \"/\"]:\n                for op4 in [\"+\", \"-\", \"*\", \"/\"]:\n                    if eval(str(a) + op1 + str(b) + op2 + str(c) + op3 + str(d) + op4) == 0:\n                        solns.append(str(a) + op1 + str(b) + op2 + str(c) + op3 + str(d) + op4)\n    solns = sorted(solns)\n    return \"\\n\".join(solns)\n"
    },
    {
        "number": 4774,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split(' '))\n\n    ops = set(['+', '-', '*', '/'])\n    ops_a = set(['+', '-'])\n    ops_b = set(['*', '/'])\n    ops_c = set(['*', '/'])\n    ops_d = set(['+', '-'])\n\n    valid_exprs = []\n\n    if a * b == c * d:\n        valid_exprs.append(f'{a} {ops_a.difference(ops).pop()} {b} = {c} {ops_b.difference(ops).pop()} {d}')\n\n    if a * b == d * c:\n        valid_exprs.append(f'{a} {ops_a.difference(ops).pop()} {b} = {d} {ops_d.difference(ops).pop()} {c}')\n\n    if a * c == b * d:\n        valid_exprs.append(f'{a} {ops_a.difference(ops).pop()} {c} = {b} {ops_b.difference(ops).pop()} {d}')\n\n    if a * c == d * b:\n        valid_exprs.append(f'{a} {ops_a.difference(ops).pop()} {c} = {d} {ops_d.difference(ops).pop()} {b}')\n\n    if b * c == a * d:\n        valid_exprs.append(f'{b} {ops_b.difference(ops).pop()} {c} = {a} {ops_c.difference(ops).pop()} {d}')\n\n    if b * c == d * a:\n        valid_exprs.append(f'{b} {ops_b.difference(ops).pop()} {c} = {d} {ops_d.difference(ops).pop()} {a}')\n\n    if c * d == a * b:\n        valid_exprs.append(f'{c} {ops_c.difference(ops).pop()} {d} = {a} {ops_a.difference(ops).pop()} {b}')\n\n    if c * d == b * a:\n        valid_exprs.append(f'{c} {ops_c.difference(ops).pop()} {d} = {b} {ops_b.difference(ops).pop()} {a}')\n\n    if d * a == b * c:\n        valid_exprs.append(f'{d} {ops_d.difference(ops).pop()} {a} = {b} {ops_c.difference(ops).pop()} {c}')\n\n    if d * a == c * b:\n        valid_exprs.append(f'{d} {ops_d.difference(ops).pop()} {a} = {c} {ops_b.difference(ops).pop()} {b}')\n\n    if not valid_exprs:\n        print('problems ahead')\n    else:\n        for expr in valid_exprs:\n            print(expr)\n    return ''\n"
    },
    {
        "number": 4774,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Return the solution to the problem\n    :param stdin: input on STDIN\n    :return: solution string\n    \"\"\"\n    a, b, c, d = map(int, stdin.split())\n    expressions = []\n    for a in range(a, 100):\n        for b in range(a, 100):\n            for c in range(b, 100):\n                for d in range(c, 100):\n                    try:\n                        expressions.append(\"{} {} {} = {} {} {}\".format(a, b, c, d, a, b, c))\n                        expressions.append(\"{} {} {} = {} {} {}\".format(a, b, c, a, b, c))\n                        expressions.append(\"{} {} {} = {} {} {}\".format(a, b, c, c, b, c))\n                        expressions.append(\"{} {} {} = {} {} {}\".format(a, b, c, d, d, c))\n                        expressions.append(\"{} {} {} = {} {} {}\".format(a, b, c, a + b, a, b))\n                        expressions.append(\"{} {} {} = {} {} {}\".format(a, b, c, a - b, a, b))\n                        expressions.append(\"{} {} {} = {} {} {}\".format(a, b, c, a * b, a, b))\n                        expressions.append(\"{} {} {} = {} {} {}\".format(a, b, c, a // b, a, b))\n                        expressions.append(\"{} {} {} = {} {} {}\".format(a, b, c, b // c, b, c))\n                        expressions.append(\"{} {} {} = {} {} {}\".format(a, b, c, d // c, d, c))\n                        expressions.append(\"{} {} {} = {} {} {}\".format(a, b, c, a - c, a, c))\n                        expressions.append(\"{} {} {} = {} {} {}\".format(a, b, c, a + c, a, c))\n                        expressions.append(\"{} {} {} = {} {} {}\".format(a, b, c, a * c, a, c))\n                        expressions.append(\"{} {} {} = {} {} {}\".format(a, b, c, a // c, a, c))\n                        expressions.append(\"{} {} {} = {} {} {}\".format(a, b, c, b // c, b, c))\n                        expressions.append(\"{} {} {} = {} {} {}\".format(a, b, c, d // c, d, c))\n                    except ZeroDivisionError:\n                        pass\n    expressions = sorted(list(set(expressions)))\n    for expression in expressions:\n        print(expression)\n    return \"problems ahead\""
    },
    {
        "number": 4774,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    (a, b, c, d) = [int(n) for n in stdin.split()]\n    result = []\n    for x in range(100):\n        for y in range(100):\n            for z in range(100):\n                if a * x + b * y == c * z + d:\n                    result.append(f'{a} {z} = {c} {y}')\n                    result.append(f'{a} {y} = {c} {z}')\n                    result.append(f'{a} * {z} = {c} * {y}')\n                    result.append(f'{a} / {z} = {c} / {y}')\n                    result.append(f'{a} {z} = {c} {y}')\n                    result.append(f'{a} {y} = {c} {z}')\n    return '\\n'.join(sorted(set(result))) or 'problems ahead'\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4774,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    for x in range(A, B + 1):\n        for y in range(C, D + 1):\n            if x * y == A + B and x + y == C - D:\n                return \" - \".join(map(str, [x, y, x * y]))\n    return \"problems ahead\"\n"
    },
    {
        "number": 4775,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split()\n    a[0] = a[0].lower()\n    a[1] = a[1].lower()\n    for i in range(0, len(a[0])):\n        if a[0][i] in a[1]:\n            ind = a[1].find(a[0][i])\n            a[1] = a[1][:ind] + a[0][i] + a[1][ind + 1:]\n    l = 0\n    while l < len(a[1]):\n        print(a[1][l:l + len(a[0])])\n        l += len(a[0])\n"
    },
    {
        "number": 4775,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    We will compare the words horizontally and vertically, then by considering the\n    first letter of each word in each string, we can cross the word in a way that\n    both words share the same letter. If the letters do not match then we can return\n    the word in the first string vertically and the word in the second string\n    horizontally.\n    '''\n\n    # get the first word and second word\n    word_one, word_two = stdin.split(\" \")\n\n    # get the length of the words\n    len_one = len(word_one)\n    len_two = len(word_two)\n\n    # set the counter for how many iterations we have to go through\n    counter = 0\n\n    # if the length of the word is greater than 1\n    if len_one > 1:\n        # loop through the words\n        while counter < len_one:\n            # set the two characters to be compared\n            char_one = word_one[counter]\n            char_two = word_two[counter]\n            # if the characters are the same then we have our shared character\n            if char_one == char_two:\n                shared_char = char_one\n                # set the counters for where we are in the words\n                start_one = counter\n                start_two = counter\n                # increment the counter\n                counter += 1\n                # set the counter for the length of the words\n                counter_one = len_one - 1\n                counter_two = len_two - 1\n                # while the characters are the same\n                while shared_char == word_one[counter_one] and shared_char == word_two[counter_two]:\n                    # decrement the counters\n                    counter_one -= 1\n                    counter_two -= 1\n                    # increment the shared character\n                    shared_char += word_one[counter_one]\n                    shared_char += word_two[counter_two]\n                    # increment the counters\n                    counter_one += 1\n                    counter_two += 1\n                    # increment the counter\n                    counter += 1\n                # if the shared character is not the first character of the first word\n                if shared_char!= word_one[0]:\n                    # append the word in the first string vertically\n                    word_one = word_one[0:start_one] + word_one[start_one:]\n                    # append the word in the first string vertically\n                    word_two = word_two[0:start_two] + word_two[start_two:]\n                # otherwise if the shared character is the first character of the first word\n                elif shared_char == word_one[0]:\n                    # append the word in the first string vertically\n                    word_one = word_one[0:start_one] + word_two[0:start_two] + word_one[start_one:]\n                    # append the word in the first string vertically\n                    word_two = word_two[start_two:] + word_one[start_one:]\n            # if the characters are not the same\n            else:\n                # append the word in the first string vertically\n                word_one = word_one[0:counter] + word_one[counter:]\n                # append the word in the first string vertically\n                word_two = word_two[0:counter] + word_two[counter:]\n\n    # if the length of the first word is greater than 1\n    if len_two > 1:\n        # loop through the words\n        while counter < len_two:\n            # set the two characters to be compared\n            char_one = word_one[counter]\n            char_two = word_two[counter]\n            # if the characters are the same then we have our shared character\n            if char_one == char_two:\n                shared_char = char_one\n                # set the counters for where we are in the words\n                start_one = counter\n                start_two = counter\n                # increment the counter\n                counter += 1\n                # set the counter for the length of the words\n                counter_one = len_one - 1\n                counter_two = len_two - 1\n                # while the characters are the same\n                while shared_char == word_one[counter_one] and shared_char == word_two[counter_two]:\n                    # decrement the counters\n                    counter_one -= 1\n                    counter_two -= 1\n                    # increment the shared character\n                    shared_char += word_one[counter_one]\n                    shared_char += word_two[counter_two]\n                    # increment the counters\n                    counter_one += 1\n                    counter_two += 1\n                    # increment the counter\n                    counter += 1\n                # if the shared character is not the first character of the first word\n                if shared_char!= word_two[0]:\n                    # append the word in the first string vertically\n                    word_one = word_one[0:start_one] + word_one[start_one:]\n                    # append the word in the first string vertically\n                    word_two = word_two[0:start_two] + word_two[start_two:]\n                # otherwise if the shared character is the first character of the first word\n                elif shared_char == word_two[0]:\n                    # append the word in the first string vertically\n                    word_one = word_one[0:start_one] + word_two[0:start_two] + word_one[start_one:]\n                    # append the word in the first string vertically\n                    word_two = word_two[start_two:] + word_one[start_one:]\n\n            # if the characters are not the same\n            else:\n                # append the word in the first string vertically\n                word_one = word_one[0:counter] + word_one[counter:]\n                # append the word in the first string vertically\n                word_two = word_two[0:counter] + word_two[counter:]\n\n    # return the words crossed\n    return word_one + \"\\n\" + word_two\n"
    },
    {
        "number": 4775,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    word_a, word_b = stdin.split()\n    if len(word_a) <= len(word_b):\n        word_a, word_b = word_b, word_a\n    cross_point = word_a[0]\n    cross_a = word_a\n    cross_b = word_b\n    cross_a = cross_a.replace(cross_point, '.')\n    cross_b = cross_b.replace(cross_point, '.')\n    cross_a_lines = [cross_a[i:i + len(cross_b)] for i in range(0, len(cross_a), len(cross_b))]\n    cross_b_lines = [cross_b[i:i + len(cross_a)] for i in range(0, len(cross_b), len(cross_a))]\n    return '\\n'.join(cross_a_lines + cross_b_lines)\n"
    },
    {
        "number": 4775,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A = stdin.split()\n    a = len(A[0])\n    b = len(A[1])\n    c = []\n    d = []\n    for i in range(a):\n        for j in range(b):\n            if A[0][i] == A[1][j]:\n                c.append(A[0][i])\n                d.append(A[1][j])\n    for x in range(b):\n        for y in range(a):\n            if A[1][x] == A[0][y]:\n                print(c[y], end=\"\")\n                print(d[x])\n                break\n            else:\n                print(\".\", end=\"\")\n    return ''\n"
    },
    {
        "number": 4775,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split()\n    print('\\n'.join(['.' * (len(a[0]) + 2) + '\\n'.join(['.' * (len(a[1]) + 2) + x for x in y]) for y in zip(a[0], a[1])]))\n"
    },
    {
        "number": 4775,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Complexity:\n        time: O(nm)\n        space: O(1)\n    \"\"\"\n    def lcs(A, B):\n        \"\"\"\n        Complexity:\n            time: O(nm)\n            space: O(nm)\n        \"\"\"\n        n, m = len(A), len(B)\n        dp = [[\"\" for _ in range(m+1)] for _ in range(n+1)]\n        for i in range(n):\n            for j in range(m):\n                if A[i] == B[j]:\n                    dp[i+1][j+1] = dp[i][j] + A[i]\n                else:\n                    dp[i+1][j+1] = max(dp[i+1][j], dp[i][j+1], key=len)\n        return dp[n][m]\n    \n    def crossword(A, B):\n        \"\"\"\n        Complexity:\n            time: O(nm)\n            space: O(1)\n        \"\"\"\n        n, m = len(A), len(B)\n        result = []\n        for i in range(m):\n            line = \"\"\n            for j in range(n):\n                if B[i] == A[j]:\n                    line += B[i]\n            result.append(line)\n        return result\n    \n    return \"\\n\".join(crossword(stdin.split(\" \")[0], stdin.split(\" \")[1]))\n"
    },
    {
        "number": 4775,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('BANANA PIDZAMA\\n'\n   ...          'MAMA TATA')\n    'P....\\n.I....\\n.D....\\n.Z....\\nBANANA\\n.M....\\n.A....'\n    \"\"\"\n    a, b = stdin.split()\n    for i, j in zip(a, b):\n        if i == j:\n            break\n    return '\\n'.join([''.join([a, b])] + ['\\n'.join([\n        b, a])\n        for _ in range(len(a) - i - 1)\n    ])\n"
    },
    {
        "number": 4775,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    s, t = sorted(s, key=lambda x: x, reverse=True), sorted(t, key=lambda x: x, reverse=True)\n    return '\\n'.join([''.join(i[0] for i in zip(s, t))] + [''.join(i[1] for i in zip(s, t))])\n"
    },
    {
        "number": 4775,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    word_A = stdin.split()[0]\n    word_B = stdin.split()[1]\n    min_length = min(len(word_A), len(word_B))\n    index = word_A.find(word_B[0])\n    if index == -1:\n        print('Invalid data!')\n    else:\n        print('.{}'.format('.' * index))\n        for x in range(min_length):\n            print('{}'.format(word_A[x].upper()), end='')\n            for y in range(min_length):\n                print('{}'.format(word_B[y]), end='')\n            print('')\n    print(word_A.upper(), end='')\n    for i in range(len(word_A) - min_length):\n        print('.', end='')\n    print('')\n    for x in range(min_length):\n        print('{}'.format(word_B[x].upper()), end='')\n        for y in range(min_length):\n            print('{}'.format(word_A[y]), end='')\n        print('')\n    return ''\n"
    },
    {
        "number": 4775,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"BANANA PIDZAMA\\nMAMA TATA\")\n    '....P.\\nM.A..\\nT.T..\\n....A.'\n    >>> solution(\"MAMA TATA\\nMAMA TATA\")\n    '....T.\\nM.A...\\nT.T...\\n....A.'\n    \"\"\"\n    stdin = stdin.split(\"\\n\")\n    a = stdin[0].strip()\n    b = stdin[1].strip()\n    m, n = len(a), len(b)\n    a = [i for i in a]\n    b = [i for i in b]\n    a.sort()\n    b.sort()\n    i, j, k = 0, 0, 0\n    cross = list()\n    while i < m and j < n:\n        if a[i] == b[j]:\n            cross.append(a[i])\n            i += 1\n            j += 1\n        elif a[i] > b[j]:\n            j += 1\n        elif a[i] < b[j]:\n            i += 1\n    cross = \"\".join(cross)\n    return cross + \"\\n\" + \"\\n\".join(b[::-1] + [\".\"] * m) + \"\\n\" + \"\\n\".join(a + [\".\"] * n)\n"
    },
    {
        "number": 4776,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the answer for the problem.\n\n    Args:\n        stdin (str): Input string to parse\n\n    Returns:\n        str: The answer for the problem\n    \"\"\"\n    events = [tuple(int(s) for s in line.split()) for line in stdin.split('\\n')]\n    events.sort(key=lambda event: event[0])\n    previous = 0\n    count = 0\n    for event in events:\n        if event[0] > previous:\n            previous = event[1]\n            count += 1\n    return count\n"
    },
    {
        "number": 4776,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4776,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # Write your code here\n    # Hint: Consider the use of sets and combinations\n    s = list(map(int, stdin.split()))\n    events = []\n    for i in range(len(s) // 2):\n        events.append((s[2 * i], s[2 * i + 1]))\n    events.sort()\n    s = set()\n    for i in range(len(events)):\n        s.add(events[i][0])\n        s.add(events[i][1])\n    s = sorted(s)\n    # print(s)\n    last_day = 0\n    count = 0\n    for i in range(len(s)):\n        if last_day == 0 or s[i] > last_day:\n            count += 1\n            last_day = s[i]\n    return count\n\ndef"
    },
    {
        "number": 4776,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    events = [list(map(int, stdin.readline().split())) for _ in range(N)]\n    events.sort()\n    count = 0\n    left = events[0][0]\n    right = events[0][1]\n    for event in events[1:]:\n        if left <= event[0] <= right:\n            left = event[0]\n            right = event[1]\n        else:\n            count += (right - left)\n            left = event[0]\n            right = event[1]\n    count += (right - left)\n    return count\n"
    },
    {
        "number": 4776,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # Return your answer\n"
    },
    {
        "number": 4776,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return\n"
    },
    {
        "number": 4776,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    n = int(stdin.readline())\n    events = []\n    for _ in range(n):\n        s, t = map(int, stdin.readline().split())\n        events.append((s, t))\n    events = sorted(events, key=lambda x: x[0])\n    res = 1\n    for i in range(1, n):\n        if events[i][0] <= events[i - 1][1]:\n            res = max(res, events[i][0] - events[i - 1][1])\n        else:\n            res += events[i][0] - events[i - 1][1]\n    return res\n    '''\n\n    n = int(stdin.readline())\n    s = set()\n    for _ in range(n):\n        s.add(int(stdin.readline()))\n    return len(s)\nprint(solution(stdin))"
    },
    {
        "number": 4776,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # N = int(stdin.readline())\n    N = 3\n    events = [list(map(int, input().split(' '))) for _ in range(N)]\n    events.sort()\n    start = [event[0] for event in events]\n    end = [event[1] for event in events]\n    days = []\n    for i in range(1, len(start)):\n        days.append(end[i] - start[i])\n    days.sort()\n    result = 1\n    while days:\n        day = days.pop(0)\n        result += day\n    return result\n"
    },
    {
        "number": 4776,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    num_events = int(stdin.readline())\n    events = [tuple(map(int, stdin.readline().split())) for _ in range(num_events)]\n    days = set()\n    for s, t in events:\n        for day in range(s, t + 1):\n            days.add(day)\n    return len(days)\n"
    },
    {
        "number": 4776,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def f(st: list) -> int:\n        return max(st) - min(st)\n    return f([int(x) for x in stdin.split('\\n')])"
    },
    {
        "number": 4777,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    determines the number of letters A and B by parsing the machine output\n    :param stdin: a string of the input\n    :return: a string of the answer\n    \"\"\"\n    a = int(stdin.strip())\n    counter = 0\n    while a:\n        b = a - 1\n        a = 0\n        for x in range(1, b + 1):\n            if b % x == 0:\n                a += 1\n        counter += 1\n    return f\"{counter} {a}\"\n"
    },
    {
        "number": 4777,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin)\n    number_a = 0\n    number_b = 0\n    for i in range(K):\n        if i == 0:\n            number_a += 1\n        elif i % 2 == 0:\n            number_b += 1\n        else:\n            number_a += 1\n    print(number_a, number_b)\n    return None\n"
    },
    {
        "number": 4777,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin.readline())\n    a = 0\n    b = 0\n    for i in range(K):\n        if i % 2:\n            a += 1\n            b += 1\n        else:\n            b += 1\n    print(a, b)\n\n\nsolution(\"4\")\n\nSample Input 1:\n1\nSample Output 1:\n0 1\nSample Input 2:\n2\nSample Output 2:\n2 3\nSample Input 3:\n4\nSample Output 3:\n2 3\nSample Input 4:\n5\nSample Output 4:\n2 4\nSample Input 5:\n6\nSample Output 5:\n2 5\nSample Input 6:\n7\nSample Output 6:\n3 6\nSample Input 7:\n8\nSample Output 7:\n3 7\nSample Input 8:\n9\nSample Output 8:\n4 8\nSample Input 9:\n10\nSample Output 9:\n4 10\nSample Input 10:\n11\nSample Output 10:\n5 11\nSample Input 11:\n12\nSample Output 11:\n5 12\nSample Input 12:\n13\nSample Output 12:\n6 13\nSample Input 13:\n14\nSample Output 13:\n7 14\nSample Input 14:\n15\nSample Output 14:\n8 15\nSample Input 15:\n16\nSample Output 15:\n9 16\nSample Input 16:\n17\nSample Output 16:\n10 17\nSample Input 17:\n18\nSample Output 17:\n11 18\nSample Input 18:\n19\nSample Output 18:\n12 19\nSample Input 19:\n20\nSample Output 19:\n13 20\nSample Input 20:\n21\nSample Output 20:\n14 21\nSample Input 21:\n22\nSample Output 21:\n15 22\nSample Input 22:\n23\nSample Output 22:\n16 23\nSample Input 23:\n24\nSample Output 23:\n17 24\nSample Input 24:\n25\nSample Output 24:\n18 25\nSample Input 25:\n26\nSample Output 25:\n19 26\nSample Input 26:\n27\nSample Output 26:\n20 27\nSample Input 27:\n28\nSample Output 27:\n21 28\nSample Input 28:\n29\nSample Output 28:\n22 29\nSample Input 29:\n30\nSample Output 29:\n23 30\nSample Input 30:\n31\nSample Output 30:\n24 31\nSample Input 31:\n32\nSample Output 31:\n25 32\nSample Input 32:\n33\nSample Output 32:\n26 33\nSample Input 33:\n34\nSample Output 33:\n27 34\nSample Input 34:\n35\nSample Output 34:\n28 35\nSample Input 35:\n36\nSample Output 35:\n29 36\nSample Input 36:\n37\nSample Output 36:\n30 37\nSample Input 37:\n38\nSample Output 37:\n31 38\nSample Input 38:\n39\nSample Output 38:\n32 39\nSample Input 39:\n40\nSample Output 39:\n33 40\nSample Input 40:\n41\nSample Output 40:\n34 41\nSample Input 41:\n42\nSample Output 41:\n35 42\nSample Input 42:\n43\nSample Output 42:\n36 43\nSample Input 43:\n44\nSample Output 43:\n37 44\nSample Input 44:\n45\nSample Output 44:\n38 45\nSample Input 45:\n46\nSample Output 45:\n39 46\nSample Input 46:\n47\nSample Output 46:\n40 47\nSample Input 47:\n48\nSample Output 47:\n41 48\nSample Input 48:\n49\nSample Output 48:\n42 49\nSample Input 49:\n50\nSample Output 49:\n43 50\nSample Input 50:\n51\nSample Output 50:\n44 51\nSample Input 51:\n52\nSample Output 51:\n45 52\nSample Input 52:\n53\nSample Output 52:\n46 53\nSample Input 53:\n54\nSample Output 53:\n47 54\nSample Input 54:\n55\nSample Output 54:\n48 55\nSample Input 55:\n56\nSample Output 55:\n49 56\nSample Input 56:\n57\nSample Output 56:\n50 57\nSample Input 57:\n58\nSample Output 57:\n51 58\nSample Input 58:\n59\nSample Output 58:\n52 59\nSample Input 59:\n60\nSample Output 59:\n53 60\nSample Input 60:\n61\nSample Output 60:\n54 61\nSample Input 61:\n62\nSample Output 61:\n55 62\nSample Input 62:\n63\nSample Output 62:\n56 63\nSample Input 63:\n64\nSample Output 63:\n57 64\nSample Input 64:\n65\nSample Output 64:\n58 65\nSample Input 65:\n66\nSample Output 65:\n59 66\nSample Input 66:\n67\nSample Output 66:\n60 67\nSample Input 67:\n68\nSample Output 67:\n61 68\nSample Input 68:\n69\nSample Output 68:\n62 69\nSample Input 69:\n70\nSample Output 69:\n63 70\nSample Input 70:\n71\nSample Output 70:\n64 71\nSample Input 71:\n72\nSample Output 71:\n65 72\nSample Input 72:\n73\nSample Output 72:\n66 73\nSample Input 73:\n74\nSample Output 73:\n67 74\nSample Input 74:\n75\nSample Output 74:\n68 75\nSample Input 75:\n76\nSample Output 75:\n69 76\nSample Input 76:\n77\nSample Output 76:\n70 77\nSample Input 77:\n78\nSample Output 77:\n71 78\nSample Input 78:\n79\nSample Output 78:\n72 79\nSample Input 79:\n80\nSample Output 79:\n73 80\nSample Input 80:\n81\nSample Output 80:\n74 81\nSample Input 81:\n82\nSample Output 81:\n75 82\nSample Input 82:\n83\nSample Output 82:\n76 83\nSample Input 83:\n84\nSample Output 83:\n77 84\nSample Input 84:\n85\nSample Output 84:\n78 85\nSample Input 85:\n86\nSample Output 85:\n79 86\nSample Input 86:\n87\nSample Output 86:\n80 87\nSample Input 87:\n88\nSample Output 87:\n81 88\nSample Input 88:\n89\nSample Output 88:\n82 89\nSample Input 89:\n90\nSample Output 89:\n83 90\nSample Input 90:\n91\nSample Output 90:\n84 91\nSample Input 91:\n92\nSample Output 91:\n85 92\nSample Input 92:\n93\nSample Output 92:\n86 93\nSample Input 93:\n94\nSample Output 93:\n87 94\nSample Input 94:\n95\nSample Output 94:\n88 95\nSample Input 95:\n96\nSample Output 95:\n89 96\nSample Input 96:\n97\nSample Output 96:\n90 97\nSample Input 97:\n98\nSample Output 97:\n91 98\nSample Input 98:\n99\nSample Output 98:\n92 99\nSample Input 99:\n100\nSample Output 99:\n93 100\nSample Input 100:\n101\nSample Output 100:\n94 101\nSample Input 101:\n102\nSample Output 101:\n95 102\nSample Input 102:\n103\nSample Output 102:\n96 103\nSample Input 103:\n104\nSample Output 103:\n97 104\nSample Input 104:\n105\nSample Output 104:\n98 105\nSample Input 105:\n106\nSample Output 105:\n99 106\nSample Input 106:\n107\nSample Output 106:\n100 107\nSample Input 107:\n108\nSample Output 107:\n101 108\nSample Input 108:\n109\nSample Output 108:\n102 109\nSample Input 109:\n110\nSample Output 109:\n103 110\nSample Input 110:\n111\nSample Output 110:\n104 111\nSample Input 111:\n112\nSample Output 111:\n105 112\nSample Input 112:\n113\nSample Output 112:\n106 113\nSample Input 113:\n114\nSample Output 113:\n107 114"
    },
    {
        "number": 4777,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4\")\n    2 3\n    >>> solution(\"12\")\n    0 1\n    >>> solution(\"47\")\n    0 0\n    \"\"\"\n    k = int(stdin)\n    a = 0\n    b = 0\n    while k > 0:\n        a += 1\n        if k % 2 == 0:\n            b += 1\n        k = k // 2\n    return str(a) + \" \" + str(b)\n"
    },
    {
        "number": 4777,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    num_a, num_b = 0, 0\n    for _ in range(int(stdin)):\n        if num_b!= 0:\n            num_b -= 1\n        else:\n            num_a += 1\n    return f'{num_a} {num_b}'"
    },
    {
        "number": 4777,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a = 0\n    b = 0\n    for i in stdin.splitlines():\n        b += 1\n        for j in i:\n            if j == 'A':\n                a += 1\n    return a, b\n"
    },
    {
        "number": 4777,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    num_a, num_b = 0, 0\n    for line in stdin:\n        line = line.strip()\n        num_b += line.count('B')\n        num_a += line.count('A')\n    return f\"{num_a} {num_b}\"\nprint(solution(stdin))\n"
    },
    {
        "number": 4777,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin)\n    A = 0\n    B = 0\n    for i in range(K):\n        if i % 3 == 0:\n            A += 1\n        elif i % 3 == 1:\n            B += 1\n    return str(A) + \" \" + str(B)\n"
    },
    {
        "number": 4777,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a = 0\n    b = 0\n    k = int(stdin)\n    for _ in range(k):\n        if a < k and b < k:\n            a += 1\n            b += 1\n        elif a >= k and b >= k:\n            a -= 1\n            b -= 1\n        else:\n            if a < k:\n                a += 1\n            elif b < k:\n                b += 1\n    return str(a) + \" \" + str(b)\n"
    },
    {
        "number": 4777,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin)\n    counter = 1\n    letter_b = 0\n    letter_a = 0\n    if K == 1:\n        return f'0 {letter_b}'\n    while counter <= K:\n        if counter % 3 == 0:\n            letter_b += 1\n        elif counter % 3 == 1:\n            letter_a += 1\n        counter += 1\n    return f'{letter_a} {letter_b}'\n"
    },
    {
        "number": 4778,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    num_precincts, num_districts = map(int, stdin.split(\" \"))\n    votes = [[0 for _ in range(101)] for _ in range(num_precincts)]\n    for i in range(num_precincts):\n        A, B, C = map(int, stdin.split(\" \"))\n        for j in range(A):\n            votes[i][1] += 1\n        for j in range(B):\n            votes[i][2] += 1\n        for j in range(C):\n            votes[i][3] += 1\n    \n    output = []\n    for i in range(num_districts):\n        total_wasted_votes_for_party_A = 0\n        total_wasted_votes_for_party_B = 0\n        for j in range(num_precincts):\n            total_wasted_votes_for_party_A += abs(votes[j][1] - votes[j][2])\n            total_wasted_votes_for_party_B += abs(votes[j][2] - votes[j][3])\n        output.append(f\"{'A' if votes[0][2] > votes[0][3] else 'B'} {total_wasted_votes_for_party_A} {total_wasted_votes_for_party_B}\")\n    output.append(f\"{abs(sum(votes[j][1] for j in range(num_precincts)) - sum(votes[j][2] for j in range(num_precincts)))/num_precincts:.6f}\")\n    return \"\\n\".join(output)\n"
    },
    {
        "number": 4778,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    party, district = map(int, stdin.split())\n    votes = [list(map(int, line.split())) for line in stdin.splitlines()]\n    winning_party, winning_count, losing_party, losing_count = None, 0, None, 0\n    for party_a, party_b, count_a, count_b in votes:\n        if count_a > count_b:\n            if party == 2:\n                winning_party, losing_party = party_a, party_b\n                winning_count, losing_count = count_a, count_b\n            else:\n                winning_party, losing_party = party_b, party_a\n                winning_count, losing_count = count_b, count_a\n        elif count_a < count_b:\n            winning_party, losing_party = party_b, party_a\n            winning_count, losing_count = count_b, count_a\n    wasted_votes = winning_count - losing_count\n    print(winning_party, wasted_votes)\n    if winning_party == \"A\":\n        print(winning_party, wasted_votes)\n    else:\n        print(losing_party, wasted_votes)"
    },
    {
        "number": 4778,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Determine the efficiency gap, reported in the format of: A and B, where A and B are\n    the number of parties that wins, and the number of wasted votes respectively.\"\"\"\n    p, d = map(int, stdin.split('\\n')[:2])\n    groups = {n: {'A': 0, 'B': 0} for n in range(d)}\n    for _ in range(p):\n        n, a, b = map(int, stdin.split('\\n')[2 + _].split())\n        groups[n]['A'] += a\n        groups[n]['B'] += b\n    for n in range(d):\n        groups[n]['A'] += 1 if groups[n]['B'] > 0 else 0\n        groups[n]['B'] += 1 if groups[n]['A'] > 0 else 0\n    print('{} {} {}'.format(\n        chr(65 + groups[0]['A']),\n        groups[0]['B'],\n        groups[0]['A'] - groups[0]['B']\n    ))\n    print('{} {} {}'.format(\n        chr(65 + groups[1]['A']),\n        groups[1]['B'],\n        groups[1]['A'] - groups[1]['B']\n    ))\n    return '{:.6f}'.format(abs(\n        groups[0]['A'] - groups[0]['B']\n    ) / (sum(groups[d]['A'], groups[d]['B']) / 2))"
    },
    {
        "number": 4778,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"O(N) / O(N)\"\"\"\n    V, D = list(map(int, stdin.split()))\n    precincts = [tuple(map(int, line.split())) for line in stdin.split(\"\\n\")[:V]]\n    scores = Counter(sum(p[1:]) for p in precincts)\n    assert len(scores) == 1\n    score_a, score_b = scores.popitem()\n    wasted_a = sum(sum(p[1:]) for p in precincts if p[0] > sum(p[1:]) / 2 + 1)\n    wasted_b = sum(sum(p[1:]) for p in precincts if p[0] < sum(p[1:]) / 2)\n    efficiency_gap = abs(score_b - score_a) / V\n    return \"\\n\".join(\n        f\"{'A' if score_a > score_b else 'B'} {wasted_a} {wasted_b}\"\n        for score_a, score_b in zip(score_a * D, score_b * D)\n    ) + f\"\\n{efficiency_gap:.6f}\"\n"
    },
    {
        "number": 4778,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    districts = []\n    for i in range(n):\n        A, B = map(int, stdin.split('\\n')[i].split(' '))\n        districts.append([A, B])\n    sorted_districts = sorted(districts, key=lambda x: x[0], reverse=True)\n    A_wasted, B_wasted = 0, 0\n    for i in range(m):\n        districts_wasted = sorted_districts[i][0] - sorted_districts[i][1]\n        if sorted_districts[i][0] < sorted_districts[i][1]:\n            A_wasted += districts_wasted\n        else:\n            B_wasted += districts_wasted\n    efficiency_gap = abs(A_wasted - B_wasted) / n\n    print('A', A_wasted)\n    print('B', B_wasted)\n    print(round(efficiency_gap, 6))\n"
    },
    {
        "number": 4778,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    voters = int(stdin.split(\"\\n\")[0].split()[0])\n    districts = int(stdin.split(\"\\n\")[0].split()[1])\n    votes = []\n    wasted_votes = [0, 0]\n    for _ in range(voters):\n        votes.append([int(x) for x in stdin.split(\"\\n\")[_][1:].split()])\n        wasted_votes[0] += abs(votes[_][0] - votes[_][1])\n        wasted_votes[1] += abs(votes[_][0] + votes[_][1])\n    wasted_votes = [round(x / voters, 6) for x in wasted_votes]\n    print(\" \".join([str(x) for x in sorted(wasted_votes)]))\n    return \" \".join([str(x) for x in sorted(wasted_votes)])\n\n\ndef"
    },
    {
        "number": 4778,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"You need to solve this problem. You may write additional functions, but you may not import any additional libraries.\n    You have to print the answer in such a way that the order of output is the same as in the sample output.\n\n    :param stdin: The standard input of the program.\n    :return: The solution of the problem.\n    \"\"\"\n\n    # Write your solution here\n    num_precincts, num_districts = map(int, stdin.split())\n    precincts = [[int(x) for x in stdin.split()] for _ in range(num_precincts)]\n    precincts.sort(key=lambda x: x[1], reverse=True)\n    precinct_to_districts = [0] * num_precincts\n    districts = [0] * num_districts\n    party_precinct_counts = [0, 0]\n    for i, (precinct_index, total_votes, party_count) in enumerate(precincts):\n        assert party_count in {0, 100}\n        assert total_votes in {0, 100}\n        assert i == precinct_index - 1\n        party_precinct_counts[party_count] += total_votes\n        districts[precinct_to_districts[precinct_index]] += total_votes\n        precinct_to_districts[precinct_index] = min(num_districts,\n                                                    district_count + 1)\n    for district_index, total_votes in enumerate(districts):\n        assert total_votes == party_precinct_counts[0] + party_precinct_counts[1]\n        assert district_index == party_precinct_counts[0] - 1\n    party_wasted_votes = [party_precinct_counts[0] - party_precinct_counts[1],\n                          party_precinct_counts[1] - party_precinct_counts[0]]\n    stdout =''.join(party_wasted_votes)\n    for district in districts:\n        stdout +='' + str(district)\n    stdout +='' + str(float(sum(districts)) / float(num_districts))\n    return stdout\n"
    },
    {
        "number": 4778,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Strategy:\n    # Create a graph that has N vertices, and the edges point from\n    # all of the districts to the precincts. Then we want to find the\n    # longest path from each district to the precinct that has a large\n    # enough weight to reach the candidate. Once we have all the paths,\n    # sort them and get the worst path. Then we want to take all the\n    # districts that are between the worst path and the current district,\n    # and find the one that has a large enough weight to reach the\n    # candidate. Then take all the remaining districts and find the one\n    # with a large enough weight to reach the candidate. Repeat until we\n    # have the candidate.\n    #\n    # Time: O(P+D)\n    # Space: O(P+D)\n    n_voters, n_districts = [int(x) for x in stdin.split(\" \")]\n    precincts = []\n    for _ in range(n_voters):\n        precincts.append([int(x) for x in stdin.split(\" \")])\n    edges = []\n    for i in range(n_districts):\n        edges.append(\n            {\n                \"a\": set([p[0] for p in precincts if p[1] == i + 1]),\n                \"b\": set([p[0] for p in precincts if p[2] == i + 1]),\n            }\n        )\n    g = Graph(edges)\n    weights = g.find_longest_paths(0)\n    worst_paths = []\n    for w in weights:\n        worst_paths.append(w[-1][1])\n    worst_path = max(worst_paths)\n    worst_paths.remove(worst_path)\n    second_worst_path = max(worst_paths)\n    districts_between = [\n        i\n        for i in range(n_districts)\n        if worst_path < i + 1 < second_worst_path\n    ]\n    count = 0\n    for i in districts_between:\n        districts_between.remove(i)\n        count += 1\n        for j in districts_between:\n            if g.find_longest_paths(i)[0][-1][1] == j:\n                count += 1\n                districts_between.remove(j)\n                break\n    return f\"{min(districts_between)} {count}\"\n\n\nclass Graph:\n    def __init__(self, edges: List[Set[int]]):\n        self.districts = [i for i in range(len(edges))]\n        self.district_precincts = [\n            {precinct: district for precinct, district in enumerate(districts)}\n            for districts in edges\n        ]\n        self.edges = edges\n        self.weight = [\n            [\n                self.find_longest_paths(source, target)\n                for target in range(len(edges))\n            ]\n            for source in range(len(edges))\n        ]\n\n    def find_longest_paths(self, source: int, target: int) -> List[List[int]]:\n        # Idea:\n        # 1. BFS to find all paths from the source to target.\n        # 2. Return the longest path.\n        visited = set()\n        paths = []\n        queue = deque()\n        queue.append([source])\n        while len(queue) > 0:\n            path = queue.popleft()\n            node = path[-1]\n            if node == target:\n                paths.append(path)\n                continue\n            visited.add(node)\n            for neighbor in self.edges[node]:\n                if neighbor not in visited:\n                    new_path = list(path)\n                    new_path.append(neighbor)\n                    queue.append(new_path)\n        longest_path = [0]\n        for path in paths:\n            if len(path) > len(longest_path):\n                longest_path"
    },
    {
        "number": 4778,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution to the problem.\"\"\"\n    # input\n    _, D = map(int, stdin.split())\n    precincts = list()\n    for _ in range(D):\n        party, A, B = map(int, stdin.split())\n        precincts.append((party, A, B))\n    # answer\n    results = list()\n    for district in range(1, D + 1):\n        results.append(calculate_results(precincts, district))\n    # output\n    for result in results:\n        print(result[0], result[1], sep=\" \")\n    efficiency_gap = abs(results[0][0] - results[0][1]) / D\n    print(efficiency_gap)\n\n\ndef"
    },
    {
        "number": 4778,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution to the problem.\"\"\"\n    precincts = parse_input(stdin)\n    total_votes = sum([p.votes_a for p in precincts])\n    wasted_votes_a = 0\n    wasted_votes_b = 0\n    for p in precincts:\n        # wasted votes for party A\n        wasted_votes_a += (p.votes_a - (total_votes // 2 + 1))\n        # wasted votes for party B\n        wasted_votes_b += (p.votes_b - (total_votes // 2))\n    return f\"{'A' if wasted_votes_a < wasted_votes_b else 'B'}\\n{wasted_votes_a}\\n{wasted_votes_b}\"\n\n\ndef"
    },
    {
        "number": 4779,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(max([(a*b) for a, b in zip(list(map(int, stdin.split(\"\\n\"))), list(map(int, stdin.split(\"\\n\"))[1:]))]))\n"
    },
    {
        "number": 4779,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution to the problem of calculating the max value for given sum.\n\n    Args:\n        stdin: String of input.\n\n    Returns:\n        String of output.\n    \"\"\"\n\n    # We create a list with all the values.\n    numbers = []\n    # We get the number of lines of input.\n    n = int(stdin)\n\n    # We loop through the input.\n    for i in range(0, n):\n        # We get the value of the number we are working with.\n        number = int(stdin)\n        # We add it to the list of values.\n        numbers.append(number)\n\n    # We create a list where we will store the values that we will multiply.\n    multiply_list = []\n\n    # We loop through the list of numbers.\n    for number in numbers:\n        # We get the index of the number we are working with.\n        index = numbers.index(number)\n        # If the index is not equal to the last index, we add it to the list of numbers that we will multiply.\n        if index!= len(numbers) - 1:\n            multiply_list.append(number * numbers[index + 1])\n\n    # We get the index of the last number.\n    index = numbers.index(number)\n    # If it is not the last index, we will add the number after the last number to the multiply list.\n    if index!= len(numbers) - 1:\n        multiply_list.append(number * numbers[index + 1])\n\n    # We get the index of the second last number.\n    index = numbers.index(number)\n    # If it is not the second last index, we will add the number after the second last number to the multiply list.\n    if index!= len(numbers) - 2:\n        multiply_list.append(number * numbers[index + 2])\n\n    # We get the index of the third last number.\n    index = numbers.index(number)\n    # If it is not the third last index, we will add the number after the third last number to the multiply list.\n    if index!= len(numbers) - 3:\n        multiply_list.append(number * numbers[index + 3])\n\n    # We get the index of the forth last number.\n    index = numbers.index(number)\n    # If it is not the forth last index, we will add the number after the forth last number to the multiply list.\n    if index!= len(numbers) - 4:\n        multiply_list.append(number * numbers[index + 4])\n\n    # We get the index of the last number.\n    index = numbers.index(number)\n    # If it is not the last index, we will add the number after the last number to the multiply list.\n    if index!= len(numbers) - 1:\n        multiply_list.append(number * numbers[index + 5])\n\n    # We get the index of the second last number.\n    index = numbers.index(number)\n    # If it is not the second last index, we will add the number after the second last number to the multiply list.\n    if index!= len(numbers) - 2:\n        multiply_list.append(number * numbers[index + 6])\n\n    # We get the index of the third last number.\n    index = numbers.index(number)\n    # If it is not the third last index, we will add the number after the third last number to the multiply list.\n    if index!= len(numbers) - 3:\n        multiply_list.append(number * numbers[index + 7])\n\n    # We get the index of the forth last number.\n    index = numbers.index(number)\n    # If it is not the forth last index, we will add the number after the forth last number to the multiply list.\n    if index!= len(numbers) - 4:\n        multiply_list.append(number * numbers[index + 8])\n\n    # We get the index of the last number.\n    index = numbers.index(number)\n    # If it is not the last index, we will add the number after the last number to the multiply list.\n    if index!= len(numbers) - 1:\n        multiply_list.append(number * numbers[index + 9])\n\n    # We get the max value.\n    max_value = max(multiply_list)\n\n    # We return the max value.\n    return max_value\n\n\nprint(solution(stdin=input()))\n"
    },
    {
        "number": 4779,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    pass\n"
    },
    {
        "number": 4779,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    line = [int(i) for i in stdin.split()]\n    res = max([sum(i**2 for i in line[:j+1]) * sum(line[j+1:]) for j in range(n)])\n    return str(res)\ndef"
    },
    {
        "number": 4779,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''Your solution goes here.'''\n    pass\n"
    },
    {
        "number": 4779,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    # write your code in Python 3.6\n    res = 0\n    for i in range(n):\n        res += a[i] * a[i]\n    for i in range(n):\n        for j in range(i + 1, n):\n            res *= (a[i] + a[j])\n    return res\n"
    },
    {
        "number": 4779,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = [int(i) for i in stdin.readline().strip().split(' ')]\n    return str(max([i*j for i,j in zip(a,a[1:])]))"
    },
    {
        "number": 4779,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 4779,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"How many numbers can you put in a range so that the sum of their squares is greater than the sum of their individual squares?\"\"\"\n    n = int(stdin.split()[0])\n    nums = [int(x) for x in stdin.split('\\n')[1:]]\n\n    nums.sort()\n    total = sum(nums)\n    squares = sum([x ** 2 for x in nums])\n    max_value = 0\n    for i in range(1, n):\n        temp = squares + nums[i - 1] ** 2\n        if temp > max_value:\n            max_value = temp\n    return str(max_value)\n"
    },
    {
        "number": 4779,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n   ..."
    },
    {
        "number": 4780,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    num_of_ant_r1 = int(stdin[0])\n    num_of_ant_r2 = int(stdin[1])\n    orders_r1 = stdin[2:2 + num_of_ant_r1]\n    orders_r2 = stdin[2 + num_of_ant_r1:]\n    result = []\n    num_of_ant = num_of_ant_r1 + num_of_ant_r2\n    for i in range(num_of_ant):\n        if i < num_of_ant_r1:\n            result.append(orders_r1[i])\n        else:\n            result.append(orders_r2[i - num_of_ant_r1])\n    result = result[num_of_ant_r1: -num_of_ant_r1]\n    return ''.join(result)"
    },
    {
        "number": 4780,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin.split('\\n')\n    n1, n2 = int(data[0].split()[0]), int(data[0].split()[1])\n    n1_arr = data[1].split()\n    n2_arr = data[2].split()\n    T = int(data[3])\n    m1 = n1_arr.copy()\n    m2 = n2_arr.copy()\n    for i in range(T):\n        if i % 2 == 0:\n            for j in range(n1):\n                if m1[j]!= m2[j]:\n                    temp = m1[j]\n                    m1[j] = m2[j]\n                    m2[j] = temp\n        else:\n            for j in range(n2):\n                if m1[j]!= m2[j]:\n                    temp = m1[j]\n                    m1[j] = m2[j]\n                    m2[j] = temp\n    output = ''\n    for i in range(n1):\n        output += m1[i]\n        output += m2[i]\n    return output\n\ndef"
    },
    {
        "number": 4780,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    A single line of input containing three integers $(N_1, N_2, T)$ on the first line.\n    On the next two lines are two strings of length $N_1$ and $N_2$ (the numbers of ants in the first and second rows, respectively) \u2014 the orders of ants in the first and second rows (first to last).\n    On the last line there is a positive integer $T$ (the number of seconds).\n    :param stdin:\n    :return:\n    \"\"\"\n    [N1, N2, T] = [int(n) for n in stdin.split()]\n    [first, second] = [list(stdin.split())[i] for i in range(1, 3)]\n    first = list(first)\n    second = list(second)\n    for t in range(T):\n        ants = [first, second]\n        if len(first) > 1:\n            first = [first[0]] + first[2:]\n        else:\n            first = first[1:]\n        if len(second) > 1:\n            second = second[1:]\n        else:\n            second = second[1:]\n    return ''.join(ants[0]) + ''.join(ants[1])\n"
    },
    {
        "number": 4780,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''Returns the order of the ants after T seconds.'''\n    # Number of rows and columns of the board\n    rows, cols = map(int, stdin.readline().split())\n    # Array of the ants and their direction\n    ants = [stdin.readline().strip() for _ in range(rows)]\n    # Number of seconds in which the game lasts\n    T = int(stdin.readline())\n    # Order of the ants after T seconds\n    order = ''\n    # Use (rows + 1) % 2 to flip the board in half at the center.\n    # Half the board will have increasing order and the other half will have decreasing order.\n    if (rows + 1) % 2 == 0:\n        order = ''.join(reversed(order))\n    while T:\n        # Board is reversed, so swap the row to the left with the row on the right.\n        ants.insert(0, ants.pop())\n        T -= 1\n    # Concatenate the strings.\n    order = ''.join(ants)\n    return order\n"
    },
    {
        "number": 4780,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin[-1])\n    grid = stdin[:-1]\n    cols = [''.join(sorted(row)) for row in grid.split('\\n')]\n    order = ''.join([''.join(cols[i][j] for i in range(len(grid))) for j in range(len(grid[0]))])\n    return ''.join(order[:T])\n"
    },
    {
        "number": 4780,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def get_front(row):\n        for i, el in enumerate(row):\n            if el == '1':\n                return i\n        return len(row)\n\n    def get_back(row):\n        for i in range(len(row)-1, -1, -1):\n            if row[i] == '1':\n                return i\n        return -1\n\n    first = stdin[0].split()\n    second = stdin[1].split()\n    T = int(stdin[2])\n\n    row_size = len(first)\n\n    # Get first front\n    first_front = get_front(first)\n    # Get second front\n    second_front = get_front(second)\n\n    # If the ant has already arrived at the end\n    if first_front == len(first) - 1:\n        return first\n\n    if second_front == len(second) - 1:\n        return second\n\n    # Time to get the first row in front\n    first_time = 0\n    while first_time < T:\n        if first_front < row_size - 1:\n            first_front += 1\n            first_time += 1\n        else:\n            break\n\n    # Time to get the second row in front\n    second_time = 0\n    while second_time < T:\n        if second_front < row_size - 1:\n            second_front += 1\n            second_time += 1\n        else:\n            break\n\n    # Last iteration\n    last_time = 0\n    while last_time < T:\n        if first_front == get_back(first) and second_front == get_back(second):\n            # First ant in first row\n            first[first_front] = second[first_front]\n            # Second ant in second row\n            second[second_front] = first[second_front]\n            first_front += 1\n            second_front += 1\n            last_time += 1\n        elif first_front == get_back(first) and second_front < row_size - 1:\n            # First ant in first row\n            first[first_front] = second[second_front]\n            # Second ant in second row\n            second[second_front] = first[first_front]\n            first_front += 1\n            second_front += 1\n            last_time += 1\n        elif first_front < row_size - 1 and second_front == get_back(second):\n            # First ant in first row\n            first[first_front] = second[second_front]\n            # Second ant in second row\n            second[second_front] = first[first_front]\n            first_front += 1\n            second_front += 1\n            last_time += 1\n        else:\n            break\n\n    return ''.join(first + second)\n"
    },
    {
        "number": 4780,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \n    a, b = map(list, stdin.split())\n    n = stdin.split()[-1]\n    \n    if n.isdigit():\n        n = int(n)\n        \n    a_ = ''\n    b_ = ''\n    \n    for i in range(len(a)):\n        if a[i] < b[i]:\n            a_ += a[i]\n            b_ += b[i]\n        elif a[i] > b[i]:\n            a_ += b[i]\n            b_ += a[i]\n        else:\n            a_ += a[i]\n            b_ += b[i]\n    \n    a = a_\n    b = b_\n    \n    while len(a) < len(b):\n        a += a\n        \n    while len(b) < len(a):\n        b += b\n    \n    if n == 0:\n        return a + b\n    \n    ans = ''\n    for i in range(n % len(a)):\n        ans += a[i]\n        \n    for i in range(n % len(b)):\n        ans += b[i]\n    \n    return ans\n"
    },
    {
        "number": 4780,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solves the problem\n    \"\"\"\n    pass"
    },
    {
        "number": 4780,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split(\"\\n\")\n    n1, n2 = int(a[0].split()[0]), int(a[0].split()[1])\n    a1, a2 = a[1].split(), a[2].split()\n    t = int(a[3])\n    n3 = n1 + n2\n    if t == 0:\n        print(n1, n2)\n    else:\n        p1 = 0\n        p2 = 0\n        r1 = []\n        r2 = []\n        for i in range(t):\n            if a1[p1] > a2[p2]:\n                r2.append(a1[p1])\n                r1.append(a2[p2])\n                p1 += 1\n                p2 += 1\n            else:\n                r1.append(a2[p2])\n                r2.append(a1[p1])\n                p2 += 1\n                p1 += 1\n        if p1 < len(a1):\n            r1.extend(a1[p1:])\n        if p2 < len(a2):\n            r2.extend(a2[p2:])\n        print(n1 - len(r1), n2 - len(r2))\n    return \"\"\n"
    },
    {
        "number": 4780,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \n    # \n    # You can write code here\n    #\n    \n    pass\n    \n    \n"
    },
    {
        "number": 4781,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3\\n5\\n100 T\\n100 N\\n100 T\\n100 N\\n\")\n    '2'\n    \"\"\"\n    p, n = [int(i) for i in stdin.split(\"\\n\")[:2]]\n    assert 1 <= p <= 8\n    assert 1 <= n <= 100\n\n    box = 0\n    for i in range(n):\n        t, z = stdin.split(\"\\n\")[i + 1].split(\" \")\n        assert t.isdigit() and 1 <= int(t) <= 100\n        assert z in {\"T\", \"N\", \"P\"}\n        if z == \"T\":\n            box += 1\n    return str(box)\n"
    },
    {
        "number": 4781,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the numbered label of the player who had the box when it finally\n    exploded.\n    \"\"\"\n    box = int(stdin.split(\"\\n\")[0])\n    count = 0\n    while len(stdin.split(\"\\n\")[count])!= 0:\n        question = int(stdin.split(\"\\n\")[count].split()[0])\n        if stdin.split(\"\\n\")[count].split()[2] == \"T\":\n            box += question\n        count += 1\n    return box\n\ndef"
    },
    {
        "number": 4781,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # input\n    n = int(stdin)\n    data = []\n    for i in range(n):\n        data.append(stdin)\n\n    # process\n    current = data[0]\n    while len(data) > 1:\n        current_player = int(current[0])\n        current_time = int(current[2])\n        next_time = int(data[current_player][2])\n        if current_time < next_time:\n            current = data[current_player]\n        elif current_time == next_time:\n            if current[3] == \"T\":\n                data[current_player] = data.pop(current_player + 1)\n                current = data[0]\n            elif current[3] == \"P\":\n                current = data.pop(current_player + 1)\n        elif current_time > next_time:\n            current = data[current_player]\n\n    # output\n    return current[0]\n\n\ndef"
    },
    {
        "number": 4781,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    pass\n"
    },
    {
        "number": 4781,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def solve(prev_label):\n        # if there is a box, add all the question times to the total\n        if box_label!= prev_label:\n            total += box_time\n\n        # if there is a new box, add the box_time to the total\n        if box_label!= prev_label:\n            total += box_time\n\n        # determine the next player's label\n        if prev_label == 0:\n            prev_label = 8\n        else:\n            prev_label -= 1\n        return prev_label\n\n    total = 0\n    box_label, box_time = stdin.split(\" \")\n\n    # loop through all of the input\n    for line in stdin.split(\"\\n\"):\n        label, time, answer = line.split(\" \")\n        if answer == \"T\":\n            total += int(time)\n            prev_label = solve(prev_label)\n        elif answer == \"N\":\n            prev_label = solve(prev_label)\n        elif answer == \"P\":\n            prev_label = solve(prev_label)\n        else:\n            raise ValueError(f\"Unrecognized input: {line}\")\n\n    return str(prev_label)\n"
    },
    {
        "number": 4781,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # this function returns the name of the last player to have the box\n    \n    k = int(stdin.split()[0])\n    n = int(stdin.split()[1])\n    names = ['1', '2', '3', '4', '5', '6', '7', '8']\n    current = k\n    box_on_turn = {}\n    for i in range(n):\n        t = int(stdin.split()[2 * i + 2])\n        ans = stdin.split()[2 * i + 3]\n        \n        box_on_turn[names[current]] = (t, ans)\n        current = (current + 1) % 8\n    \n    for name, (t, ans) in box_on_turn.items():\n        if ans == 'T':\n            break\n    \n    current = names.index(name)\n    \n    while True:\n        if box_on_turn[names[current]][1] == 'T':\n            break\n        current = (current + 1) % 8\n    \n    return names[current]\n"
    },
    {
        "number": 4781,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return stdin"
    },
    {
        "number": 4781,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    '''Returns the numbered label of the player who had the box when it finally exploded,\n    in a line of output as described above.\n\n    Arguments:\n        stdin {str} -- input as a string\n\n    Returns:\n        str -- output as a string\n    '''\n   ...\n\ndef"
    },
    {
        "number": 4781,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    import sys\n    import operator\n    k = int(stdin.readline().strip())\n    k_idx = k - 1\n    n = int(stdin.readline().strip())\n    n_idx = k_idx\n    times = {}\n    for _ in range(n):\n        t, z = list(map(str.strip, stdin.readline().strip().split()))\n        times[t] = z\n    while len(times) > 0:\n        t = sorted(times.items())[n_idx][0]\n        t_idx = t.strip()\n        if t_idx == \"T\":\n            n_idx = (n_idx + 1) % len(times)\n        elif t_idx == \"N\":\n            n_idx = (n_idx - 1) % len(times)\n        elif t_idx == \"P\":\n            n_idx = (n_idx + 1) % len(times)\n        else:\n            sys.exit(1)\n        k_idx = (k_idx + 1) % len(times)\n        if times[t] == \"T\":\n            return str(k_idx + 1)\n"
    },
    {
        "number": 4781,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''1\n   ... 2\n   ... 3\n   ... 4\n   ... 5\n   ... 6\n   ... 7\n   ... 8\n   ... 9\n   ... 10\n   ... 11\n   ... 12\n   ... 13\n   ... 14\n   ... 15\n   ... 16\n   ... 17\n   ... 18\n   ... 19\n   ... 20\n   ... 21\n   ... 22\n   ... 23\n   ... 24\n   ... 25\n   ... 26\n   ... 27\n   ... 28\n   ... 29\n   ... 30\n   ... 31\n   ... 32\n   ... 33\n   ... 34\n   ... 35\n   ... 36\n   ... 37\n   ... 38\n   ... 39\n   ... 40\n   ... 41\n   ... 42\n   ... 43\n   ... 44\n   ... 45\n   ... 46\n   ... 47\n   ... 48\n   ... 49\n   ... 50\n   ... 51\n   ... 52\n   ... 53\n   ... 54\n   ... 55\n   ... 56\n   ... 57\n   ... 58\n   ... 59\n   ... 60\n   ... 61\n   ... 62\n   ... 63\n   ... 64\n   ... 65\n   ... 66\n   ... 67\n   ... 68\n   ... 69\n   ... 70\n   ... 71\n   ... 72\n   ... 73\n   ... 74\n   ... 75\n   ... 76\n   ... 77\n   ... 78\n   ... 79\n   ... 80\n   ... 81\n   ... 82\n   ... 83\n   ... 84\n   ... 85\n   ... 86\n   ... 87\n   ... 88\n   ... 89\n   ... 90\n   ... 91\n   ... 92\n   ... 93\n   ... 94\n   ... 95\n   ... 96\n   ... 97\n   ... 98\n   ... 99\n   ... 100\n   ... 101\n   ... 102\n   ... 103\n   ... 104\n   ... 105\n   ... 106\n   ... 107\n   ... 108\n   ... 109\n   ... 110\n   ... 111\n   ... 112\n   ... 113\n   ... 114\n   ... 115\n   ... 116\n   ... 117\n   ... 118\n   ... 119\n   ... 120\n   ... 121\n   ... 122\n   ... 123\n   ... 124\n   ... 125\n   ... 126\n   ... 127\n   ... 128\n   ... 129\n   ... 130\n   ... 131\n   ... 132\n   ... 133\n   ... 134\n   ... 135\n   ... 136\n   ... 137\n   ... 138\n   ... 139\n   ... 140\n   ... 141\n   ... 142\n   ... 143\n   ... 144\n   ... 145\n   ... 146\n   ... 147\n   ... 148\n   ... 149\n   ... 150\n   ... 151\n   ... 152\n   ... 153\n   ... 154\n   ... 155\n   ... 156\n   ... 157\n   ... 158\n   ... 159\n   ... 160\n   ... 161\n   ... 162\n   ... 163\n   ... 164\n   ... 165\n   ... 166\n   ... 167\n   ... 168\n   ... 169\n   ... 170\n   ... 171\n   ... 172\n   ... 173\n   ... 174\n   ... 175\n   ... 176\n   ... 177\n   ... 178\n   ... 179\n   ... 180\n   ... 181\n   ... 182\n   ... 183\n   ... 184\n   ... 185\n   ... 186\n   ... 187\n   ... 188\n   ... 189\n   ... 190\n   ... 191\n   ... 192\n   ... 193\n   ... 194\n   ... 195\n   ... 196\n   ... 197\n   ... 198\n   ... 199\n   ... 200\n   ... 201\n   ... 202\n   ... 203\n   ... 204\n   ... 205\n   ... 206\n   ... 207\n   ... 208\n   ... 209\n   ... 210\n   ... 211\n   ... 212\n   ... 213\n   ... 214\n   ... 215\n   ... 216\n   ... 217\n   ... 218\n   ... 219\n   ... 220\n   ... 221\n   ... 222\n   ... 223\n   ... 224\n   ... 225\n   ... 226\n   ... 227\n   ... 228\n   ... 229\n   ... 230\n   ... 231\n   ... 232\n   ... 233\n   ... 234\n   ... 235\n   ... 236\n   ... 237\n   ... 238\n   ... 239\n   ... 240\n   ... 241\n   ... 242\n   ... 243\n   ... 244\n   ... 245\n   ... 246\n   ... 247\n   ... 248\n   ... 249\n   ... 250\n   ... 251\n   ... 252\n   ... 253\n   ... 254\n   ... 255\n   ... 256\n   ... 257\n   ... 258\n   ... 259\n   ... 260\n   ... 261\n   ... 262\n   ... 263\n   ... 264\n   ... 265\n   ... 266\n   ... 267\n   ... 268\n   ... 269\n   ... 270\n   ... 271\n   ... 272\n   ... 273\n   ... 274\n   ... 275\n   ... 276\n   ... 277\n   ... 278\n   ... 279\n   ... 280\n   ... 281\n   ... 282\n   ... 283\n   ... 284\n   ... 285\n   ... 286\n   ... 287\n   ... 288\n   ... 289\n   ... 290\n   ... 291\n   ... 292\n   ... 293\n   ... 294\n   ... 295\n   ... 296\n   ... 297\n   ... 298\n   ... 299\n   ... 300\n   ... 301\n   ... 302\n   ... 303\n   ... 304\n   ... 305\n   ... 306\n   ... 307\n   ... 308\n   ... 309\n   ... 310\n   ... 311\n   ... 312\n   ... 313\n   ... 314\n   ... 315\n   ... 316\n   ... 317\n   ... 318\n   ... 319\n   ... 320\n   ... 321\n   ... 322\n   ... 323\n   ... 324\n   ... 325\n   ... 326\n   ... 327\n   ... 328\n   ... 329\n   ... 330\n   ... 331\n   ... 332\n   ... 333\n   ... 334\n   ... 335\n   ... 336\n   ... 337\n   ... 338\n   ... 339\n   ... 340\n   ... 341\n   ... 342\n   ... 343\n   ... 344\n   ... 345\n   ... 346\n   ... 347\n   ... 348\n   ... 349\n   ... 350\n   ... 351\n   ... 352\n   ... 353\n   ... 354\n   ... 355\n   ... 356\n   ... 357\n   ... 358\n   ... 359\n"
    },
    {
        "number": 4782,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the maximum cost of plowing the roads.\"\"\"\n    pass\n"
    },
    {
        "number": 4782,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    # \uc5f0\uacb0\uc810\uc744 \ud1b5\ud574 \ubaa8\ub4e0 \ub3c4\uc2dc\ub85c \uc774\ub3d9\ud560 \uc218 \uc788\ub2e4.\n    # \ud655\uc778\ud55c \ub3c4\uc2dc\ub97c \uccb4\ud06c\ud558\uae30 \uc704\ud574 \ub3c4\uc2dc\uc758 \uc778\ub371\uc2a4\ub97c \uc800\uc7a5\ud574\ub454\ub2e4.\n    # \uc800\uc7a5\ub41c \ub3c4\uc2dc\uc758 \uc778\ub371\uc2a4\ub97c \uc774\uc6a9\ud574 \uc5f0\uacb0\uc810\uc744 \ud1b5\ud574 \ub3c4\uc2dc\ub85c \uc774\ub3d9\ud55c\ub2e4.\n    # \uc5f0\uacb0\uc810\uc774 \uc5c6\uc744 \uacbd\uc6b0 \ucd94\uac00\uc801\uc73c\ub85c \ud050\uc5d0 \ub123\uc5b4\uc900\ub2e4.\n    # \uc5f0\uacb0\uc810\uc774 \uc788\ub294 \uacbd\uc6b0\ub294 \ucd94\uac00\ub85c \ud050\uc5d0 \ucd94\uac00\ud558\uc9c0 \uc54a\ub294\ub2e4.\n    # \ucd5c\uc885\uc801\uc73c\ub85c \ud050\uc5d0\uc11c \ucd5c\uc18c\uac12\uc774 \ub098\uc624\ub294 \uc774\ub3d9\uacfc \uadf8 \uac12\uc744 \ucd9c\ub825\ud55c\ub2e4.\n    from collections import deque\n\n    # n, m = map(int, stdin.readline().split())\n    n, m = map(int, stdin.split())\n\n    # \ub3c4\uc2dc\ub4e4\uc758 \uac1c\uc218\ub97c \uc785\ub825\ubc1b\uc544 \uc800\uc7a5\ud558\uae30\n    # city = [0] * (n + 1)\n    # for _ in range(n):\n    #     city[_] = int(stdin.readline().rstrip())\n    city = [int(stdin.readline().rstrip()) for _ in range(n)]\n\n    # \uc778\uc811\ub9ac\uc2a4\ud2b8\ub85c \ud45c\ud604\ud558\uae30\n    # graph = [[] for _ in range(n + 1)]\n    # for _ in range(m):\n    #     u, v = map(int, stdin.readline().split())\n    #     graph[u].append(v)\n    #     graph[v].append(u)\n\n    graph = [[] for _ in range(n + 1)]\n    for _ in range(m):\n        u, v = map(int, stdin.readline().split())\n        graph[u].append(v)\n\n    # \uac01 \ub3c4\uc2dc\ub97c \ubc29\ubb38\ud558\uba74 \ubc29\ubb38 \uccb4\ud06c\ud574\uc8fc\uae30\n    visit = [False] * (n + 1)\n    # \uc774\ub3d9\ud55c \ub3c4\uc2dc\ub4e4\uc744 \uc800\uc7a5\ud558\ub294 \ud050\n    q = deque()\n    q.append(1)\n    visit[1] = True\n    # \ud050\uac00 \ube4c \ub54c \uae4c\uc9c0 \ubc18\ubcf5\ud558\uae30\n    while q:\n        # \ud050\uc758 \uc55e\uc758 \uc694\uc18c\ub97c \uaebc\ub0b4\uace0\n        current_city = q.popleft()\n        # \uac01 \uc5f0\uacb0\ub41c \ub3c4\uc2dc\uc5d0 \ub300\ud574 \ubc18\ubcf5\ud558\uae30\n        for connect_city in graph[current_city]:\n            if not visit[connect_city]:\n                visit[connect_city] = True\n                q.append(connect_city)\n\n    # \uac01 \ub3c4\uc2dc\ub85c \uc774\ub3d9\ud560 \uc218 \uc788\ub294 \uacbd\uc6b0\uc758 \uc218\ub97c \uc800\uc7a5\ud558\ub294 \ub9ac\uc2a4\ud2b8\n    answer = []\n\n    # \uac01 \ub3c4\uc2dc\ub85c \uc774\ub3d9\ud560 \uc218 \uc788\ub294 \uacbd\uc6b0\uc758 \uc218\ub97c \uc800\uc7a5\ud558\ub294 \ub9ac\uc2a4\ud2b8\n    current_city = [0] * (n + 1)\n    current_city[1] = 1\n\n    # \ucd5c\uc885\uc801\uc73c\ub85c \ud050\uc5d0 \uc800\uc7a5\ub41c \ub3c4\uc2dc\uc758 \uac1c\uc218\ub9cc\ud07c \ubc18\ubcf5\ud558\uae30\n    for i in range(1, n):\n        # \ud604\uc7ac \ub3c4\uc2dc\ub85c \uc774\ub3d9\ud560 \uc218 \uc788\ub294 \uacbd\uc6b0\uc758 \uc218\ub97c \ud0d0\uc0c9\ud558\uae30\n        for j in range(1, n + 1):\n            if current_city[j] == 1:\n                for connect_city in graph[j]:\n                    if not visit[connect_city]:\n                        current_city[connect_city] = 1\n                        visit[connect_city] = True\n                        q.append(connect_city)\n                        answer.append(1 + current_city[j])\n                        break\n\n    # \ucd5c\ub300\uac12\uc744 \ucc3e\uc544\ub0b4\uae30\n    answer.sort()\n    print(answer[-1])\n\n    return answer\n"
    },
    {
        "number": 4782,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    m, n = [int(x) for x in stdin.split()]\n    roads = set()\n    for _ in range(m):\n        roads.add(int(stdin.readline()))\n    roads = sorted(roads)\n    # print(roads)\n    roads.append(0)\n    roads.append(max(roads) * (m + 1))\n    roads.sort()\n    # print(roads)\n    ans = 0\n    for i in range(len(roads) - 1):\n        ans += roads[i + 1] - roads[i]\n    print(ans)\n    return ''"
    },
    {
        "number": 4782,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Gets maximum cost of plowing roads\n\n    Args:\n        stdin (str): Input string\n\n    Returns:\n        str: Solution to the problem\n    \"\"\"\n    return 'Case #{}: {}'.format(case_num, optimal_value)\n"
    },
    {
        "number": 4782,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solve exercise.\"\"\"\n    from math import ceil\n    n, m = (int(x) for x in stdin.split())\n    roads = ceil(m / (n - 1))\n    return str(m * roads)\n"
    },
    {
        "number": 4782,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split(\" \")]\n    dp = [[-1]*(n+1) for _ in range(n+1)]\n    dp[0][0] = 0\n    for i in range(1, n+1):\n        dp[i][0] = 0\n        dp[i][i] = 0\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if i == j:\n                continue\n            dp[i][j] = float(\"inf\")\n            for k in range(1, n+1):\n                if k == j:\n                    continue\n                if j > k:\n                    dp[i][j] = min(dp[i][j], dp[i-1][k] + dp[k][j] + m*m)\n                else:\n                    dp[i][j] = min(dp[i][j], dp[i-1][k] + dp[k][j])\n    return str(dp[n][1])\nprint(solution(input()))\n"
    },
    {
        "number": 4782,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return str(int((n ** 2 - n) / 2) + (n - 1) * m)\n"
    },
    {
        "number": 4782,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split(\" \")]\n    roads = [0 for i in range(m + 1)]\n    for i in range(1, m + 1):\n        roads[i] = int(stdin.split(\" \")[i - 1])\n    s = Solution(n, roads)\n    return str(s.solve())"
    },
    {
        "number": 4782,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return str(max(sum(i ** 2 for i in range(1, n + 1)) - n ** 2, n ** 2 - sum(i ** 2 for i in range(1, n + 1))))\n\ndef"
    },
    {
        "number": 4782,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return ''\n"
    },
    {
        "number": 4783,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(min(n for i in stdin.splitlines()[1:] for n in i))"
    },
    {
        "number": 4783,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return shortest ladder to get coin\"\"\"\n    raise NotImplementedError()\n"
    },
    {
        "number": 4783,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    m, n = map(int, stdin.split('\\n')[:2])\n    t = [list(map(int, stdin.split('\\n')[2:])) for _ in range(m)]\n    t.insert(0, [0] * n)\n    t.append([0] * n)\n\n    for i in range(1, m + 1):\n        t[i].insert(0, 0)\n        t[i].append(0)\n\n    res = [float('inf')] * n\n    q = [(0, 1)]\n\n    while q:\n        h, d = q.pop()\n        for i, j in [(1, 0), (0, 1), (-1, 0), (0, -1)]:\n            if t[h + i][j + d]!= 0:\n                q.append((h + i, j + d))\n                if h + i == m + 1 and j + d == n + 1:\n                    res[d - 1] = min(res[d - 1], d)\n                else:\n                    res[d - 1] = min(res[d - 1], d + 1)\n    print(res)\n    return str(res[0])\n"
    },
    {
        "number": 4783,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Gets shortest ladder to reach special coin\"\"\"\n    N, M = map(int, stdin.split())\n    coins = []\n    for i in range(N):\n        row = map(int, stdin.split())\n        coins.append(list(row))\n    ladder = []\n    for i in range(N):\n        for j in range(M):\n            if coins[i][j] == 1:\n                ladder.append([i, j])\n    end = [N - 1, M - 1]\n\n    def get_path(current_point, end):\n        global ladder\n        i, j = current_point\n        # If reached end\n        if current_point == end:\n            return True\n        # Get neighbors\n        neighbors = [\n            [i - 1, j],\n            [i, j - 1],\n            [i + 1, j],\n            [i, j + 1]\n        ]\n        # Remove invalid neighbors\n        neighbors = list(filter(\n            lambda n: n[0] >= 0 and n[0] < N and n[1] >= 0 and n[1] < M, neighbors))\n        # Iterate neighbors\n        for neighbor in neighbors:\n            i_n, j_n = neighbor\n            # If neighbor is ladder\n            if [i_n, j_n] in ladder:\n                # And not in visited\n                if neighbor not in visited:\n                    # Mark visited\n                    visited.append(neighbor)\n                    # Get path\n                    path = get_path(neighbor, end)\n                    if path:\n                        return True\n                    # Unmark visited\n                    visited.remove(neighbor)\n        return False\n\n    # Check each ladder\n    for ladder_point in ladder:\n        visited = [ladder_point]\n        path = get_path(ladder_point, end)\n        if path:\n            return len(visited) - 1\n    return 0\n"
    },
    {
        "number": 4783,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 4783,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    m, n = map(int, stdin.split('\\n')[0].split(' '))\n    ladders = [map(int, stdin.split('\\n')[i].split(' ')) for i in range(1, m+1)]\n\n    def ladder(arr):\n        i = 0\n        j = n-1\n        h = 0\n        k = 0\n        while i < m and j > 0:\n            if arr[i][j] > arr[i][j-1]:\n                if arr[i][j] - arr[i][j-1] >= h + 1:\n                    h = arr[i][j] - arr[i][j-1] - 1\n                    k = j - 1\n                j -= 1\n            else:\n                if arr[i][j-1] - arr[i][j] >= h + 1:\n                    h = arr[i][j-1] - arr[i][j] - 1\n                    k = j\n                i += 1\n        return k\n\n    return ladder(ladders)\n"
    },
    {
        "number": 4783,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    width: int = int(stdin[0].split()[0])\n    height: int = int(stdin[0].split()[1])\n    piles: List[List[int]] = []\n    for line in stdin[1:]:\n        piles.append(list(map(int, line.split())))\n\n    def recur(piles: List[List[int]], current_height: int, current_width: int) -> int:\n        if (current_height, current_width) == (height - 1, width - 1):\n            return 0\n\n        next_width: int = current_width\n        next_height: int = current_height + 1\n\n        if next_height < height:\n            next_height = next_height\n        else:\n            next_height = current_height\n            next_width = next_width + 1\n\n        if next_width < width:\n            return piles[next_height][next_width] + recur(piles, next_height, next_width)\n        else:\n            return piles[next_height][next_width - 1] + recur(piles, next_height, next_width - 1)\n\n    return recur(piles, 0, 0)\n"
    },
    {
        "number": 4783,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    m, n = map(int, stdin.split())\n    mat = []\n    for i in range(m):\n        mat.append([int(i) for i in stdin.split()[i * n:i * n + n]])\n    \n    return min([mat[i][j] - mat[i - 1][j] for i in range(m) for j in range(n)])"
    },
    {
        "number": 4783,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    mat = [list(map(int, stdin.split())) for _ in range(a)]\n    heights = sorted(sum(mat, []), reverse=True)\n    min_diff = float('inf')\n    for i, h in enumerate(heights):\n        h_min = heights[i + 1] if i + 1 < len(heights) else float('inf')\n        h_max = heights[i - 1] if i - 1 > 0 else float('-inf')\n        diff = min(abs(h - h_max), abs(h - h_min))\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff\n"
    },
    {
        "number": 4783,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    m, n = map(int, stdin.split())\n    piles = []\n    for _ in range(m):\n        piles.append(list(map(int, stdin.split())))\n\n    h = 10 ** 9\n    for i in range(m - 1):\n        for j in range(n):\n            h = min(h, piles[i][j] - piles[i + 1][j])\n\n    return h\n"
    },
    {
        "number": 4784,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution to the problem.\"\"\"\n    X = int(stdin)\n    N = int(stdin)\n    P = list(map(int, stdin.split()))\n    return str(sum(p if p < X else X for p in P))\n\n\ndef"
    },
    {
        "number": 4784,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin.readline().rstrip())\n    n = int(stdin.readline().rstrip())\n    p = [int(stdin.readline().rstrip()) for _ in range(n)]\n    return str(sum(min(x, p[i]) for i in range(n)))\n"
    },
    {
        "number": 4784,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    X, N = [int(i) for i in stdin.split('\\n')[0].split(' ')]\n    m_per_month = [int(i) for i in stdin.split('\\n')[1:]]\n    total_mb = 0\n    for m in m_per_month:\n        total_mb += m\n        while total_mb >= X:\n            total_mb = total_mb - X\n    return str(total_mb)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4784,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    x = int(stdin.readline())\n    n = int(stdin.readline())\n    m = 0\n    for _ in range(n):\n        p = int(stdin.readline())\n        m += min(x, p)\n        x = max(x - p, 0)\n    return str(m)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4784,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin[0])\n    N = int(stdin[1])\n    P = [int(x) for x in stdin[2:2+N]]\n    \n    for i in range(1, N):\n        X -= P[i - 1]\n    X += P[N - 1]\n    \n    return str(X)\n"
    },
    {
        "number": 4784,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    data = [int(i) for i in stdin.split('\\n')]\n    budget = data[0]\n    months = data[1]\n    costs = data[2:]\n\n    total_budget = 0\n    left_budget = budget\n    for i in range(months):\n        total_budget += costs[i]\n        left_budget -= costs[i]\n\n    return total_budget - left_budget"
    },
    {
        "number": 4784,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    import sys\n\n    sys.stdin = open(\"input.txt\", \"r\")\n    X = int(input())\n    N = int(input())\n    P = [int(i) for i in input().split()]\n    money = []\n    for i in range(N):\n        money.append(0)\n    money[0] = X\n    for i in range(N):\n        for j in range(P[i]):\n            money[i] += 1\n    money.append(0)\n    print(sum(money))\n"
    },
    {
        "number": 4784,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    X, N = map(int, stdin.split('\\n')[:2])\n    P = list(map(int, stdin.split('\\n')[2:]))\n    return str(sum(P) - (X * N))"
    },
    {
        "number": 4784,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin.readline().strip())\n    n = int(stdin.readline().strip())\n    t = [int(stdin.readline().strip()) for _ in range(n)]\n    mem = [x]\n    for i in range(n):\n        mem.append(x - t[i])\n    total = x\n    for i in range(1, n + 1):\n        total += mem[i]\n    return total\n"
    },
    {
        "number": 4784,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x, n = (int(i) for i in stdin.split('\\n')[:2])\n    p_list = [int(i) for i in stdin.split('\\n')[2:]]\n    print(sum(p_list) + max(p_list))\n    return str(sum(p_list) + max(p_list))\n"
    },
    {
        "number": 4785,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4785,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return \"hiss\" if stdin contains two consecutive occurrences of the letter \"s\",\n    and otherwise return \"no hiss\".\n    \"\"\"\n    return 'hiss' if'ss' in stdin else 'no hiss'\n"
    },
    {
        "number": 4785,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Complete this function"
    },
    {
        "number": 4785,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('hiss')\n    'hiss'\n    >>> solution('octopuses')\n    'no hiss'\n    \"\"\"\n    return 'no hiss' if'ss' in stdin else 'hiss'\n"
    },
    {
        "number": 4785,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return 'hiss' if stdin.count('s') >= 2 else 'no hiss'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4785,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin) < 1 or len(stdin) > 30:\n        return 'no hiss'\n\n    for i in range(len(stdin)):\n        if i < len(stdin)-1:\n            if stdin[i] =='s' and stdin[i+1] =='s':\n                return 'hiss'\n\n    return 'no hiss'\n"
    },
    {
        "number": 4785,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    if stdin.count(\"s\") > 1:\n        return \"hiss\"\n    else:\n        return \"no hiss\""
    },
    {
        "number": 4785,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return \"no hiss\" if stdin.count('ss') < 2 else \"hiss\""
    },
    {
        "number": 4785,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4785,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    if stdin[-2:] =='ss':\n        return 'hiss'\n    return 'no hiss'\n"
    },
    {
        "number": 4786,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    print(len(stdin.split()))\n\n    return ''"
    },
    {
        "number": 4786,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''Returns the number of (pairwise) non-similar keywords in the data bank.\n    '''\n    pass\n\ndef"
    },
    {
        "number": 4786,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return ''\n"
    },
    {
        "number": 4786,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    keywords = [line.rstrip('\\n') for line in stdin]\n    keywords = set(keywords)\n    count = 0\n    for i in range(len(keywords)):\n        for j in range(len(keywords)):\n            if keywords[i] == keywords[j]:\n                count += 1\n    return str(count)\n"
    },
    {
        "number": 4786,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    words = [stdin for stdin in stdin.strip().split('\\n')]\n    return print(len(set(words)))\n"
    },
    {
        "number": 4786,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    keywords = []\n    for _ in range(n):\n        keywords.append(stdin.readline().strip('\\n'))\n    #print(keywords)\n    similar_keywords = []\n    for i in range(len(keywords)):\n        for j in range(len(keywords)):\n            if keywords[i]!= keywords[j] and keywords[i] in keywords[j] and keywords[j] not in similar_keywords:\n                similar_keywords.append(keywords[j])\n    return str(len(similar_keywords))"
    },
    {
        "number": 4786,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Complete this function\n    return stdin"
    },
    {
        "number": 4786,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    data = stdin.readlines()\n    \n    words = []\n    for d in data:\n        words.append(d.strip())\n    \n    print(words)\n    return str(n - len(list(set(words))))\n\nprint(solution(input()))\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4786,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution to the given problem.\n    \"\"\"\n    data = list(map(str.lower, stdin.split('\\n')))\n    return len([d for d in data if d!= \" \".join(d.split(\"-\"))])\n"
    },
    {
        "number": 4786,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the number of (pairwise) non-similar keywords in the data bank.\"\"\"\n    # Your code here\n\"\"\"\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4787,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n    num_tablet = int(stdin.count('T')/3)\n    num_compass = int(stdin.count('C')/3)\n    num_gear = int(stdin.count('G')/3)\n    return str(num_tablet**2 + num_compass**2 + num_gear**2 + 7*(num_tablet+num_compass+num_gear))"
    },
    {
        "number": 4787,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    sum = 0\n    for i in stdin:\n        if i == 'T':\n            sum += pow(3, 2)\n        elif i == 'C':\n            sum += pow(2, 2)\n        elif i == 'G':\n            sum += pow(1, 2)\n        else:\n            sum += 7\n    return str(sum)\n"
    },
    {
        "number": 4787,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return str(sum(int(x)**2 for x in stdin.replace('T', '1').replace('C', '2').replace('G', '3'))+\n                sum(int(x)**2 for x in ''.join(y for y in stdin if y not in 'TCG')))\n"
    },
    {
        "number": 4787,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return str(sum([i ** 2 for i in stdin.split('T')]))\n"
    },
    {
        "number": 4787,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \n    result = 0\n    for i in stdin.lower():\n        if i == \"t\":\n            result += 3\n        elif i == \"c\":\n            result += 4\n        elif i == \"g\":\n            result += 5\n\n    if len(stdin) == 1:\n        return str(result)\n\n    if len(stdin) == 2:\n        return str(result * 3)\n\n    if len(stdin) == 3:\n        return str(result * 3 + 7)\n\n    if len(stdin) == 4:\n        return str(result * 3 + 7 * 2)\n\n    if len(stdin) == 5:\n        return str(result * 3 + 7 * 2 + 14)\n\n    if len(stdin) == 6:\n        return str(result * 3 + 7 * 2 + 14 * 3)\n\n    if len(stdin) == 7:\n        return str(result * 3 + 7 * 2 + 14 * 3 + 21)\n\n    if len(stdin) == 8:\n        return str(result * 3 + 7 * 2 + 14 * 3 + 21 * 4)\n\n    if len(stdin) == 9:\n        return str(result * 3 + 7 * 2 + 14 * 3 + 21 * 4 + 35)\n\n    if len(stdin) == 10:\n        return str(result * 3 + 7 * 2 + 14 * 3 + 21 * 4 + 35 * 5)\n\n    if len(stdin) == 11:\n        return str(result * 3 + 7 * 2 + 14 * 3 + 21 * 4 + 35 * 5 + 56)\n\n    if len(stdin) == 12:\n        return str(result * 3 + 7 * 2 + 14 * 3 + 21 * 4 + 35 * 5 + 56 * 6)\n\n    if len(stdin) == 13:\n        return str(result * 3 + 7 * 2 + 14 * 3 + 21 * 4 + 35 * 5 + 56 * 6 + 70)\n\n    if len(stdin) == 14:\n        return str(result * 3 + 7 * 2 + 14 * 3 + 21 * 4 + 35 * 5 + 56 * 6 + 70 * 7)\n\n    if len(stdin) == 15:\n        return str(result * 3 + 7 * 2 + 14 * 3 + 21 * 4 + 35 * 5 + 56 * 6 + 70 * 7 + 84)\n\n    if len(stdin) == 16:\n        return str(result * 3 + 7 * 2 + 14 * 3 + 21 * 4 + 35 * 5 + 56 * 6 + 70 * 7 + 84 * 8)\n\n    if len(stdin) == 17:\n        return str(result * 3 + 7 * 2 + 14 * 3 + 21 * 4 + 35 * 5 + 56 * 6 + 70 * 7 + 84 * 8 + 105)\n\n    if len(stdin) == 18:\n        return str(result * 3 + 7 * 2 + 14 * 3 + 21 * 4 + 35 * 5 + 56 * 6 + 70 * 7 + 84 * 8 + 105 * 9)\n\n    if len(stdin) == 19:\n        return str(result * 3 + 7 * 2 + 14 * 3 + 21 * 4 + 35 * 5 + 56 * 6 + 70 * 7 + 84 * 8 + 105 * 9 + 140)\n\n    if len(stdin) == 20:\n        return str(result * 3 + 7 * 2 + 14 * 3 + 21 * 4 + 35 * 5 + 56 * 6 + 70 * 7 + 84 * 8 + 105 * 9 + 140 * 10)\n\n    if len(stdin) == 21:\n        return str(result * 3 + 7 * 2 + 14 * 3 + 21 * 4 + 35 * 5 + 56 * 6 + 70 * 7 + 84 * 8 + 105 * 9 + 140 * 10 + 210)\n\n    if len(stdin) == 22:\n        return str(result * 3 + 7 * 2 + 14 * 3 + 21 * 4 + 35 * 5 + 56 * 6 + 70 * 7 + 84 * 8 + 105 * 9 + 140 * 10 + 210 * 11)\n\n    if len(stdin) == 23:\n        return str(result * 3 + 7 * 2 + 14 * 3 + 21 * 4 + 35 * 5 + 56 * 6 + 70 * 7 + 84 * 8 + 105 * 9 + 140 * 10 + 210 * 11 + 350)\n\n    if len(stdin) == 24:\n        return str(result * 3 + 7 * 2 + 14 * 3 + 21 * 4 + 35 * 5 + 56 * 6 + 70 * 7 + 84 * 8 + 105 * 9 + 140 * 10 + 210 * 11 + 350 * 12)\n\n    if len(stdin) == 25:\n        return str(result * 3 + 7 * 2 + 14 * 3 + 21 * 4 + 35 * 5 + 56 * 6 + 70 * 7 + 84 * 8 + 105 * 9 + 140 * 10 + 210 * 11 + 350 * 12 + 560)\n\n    if len(stdin) == 26:\n        return str(result * 3 + 7 * 2 + 14 * 3 + 21 * 4 + 35 * 5 + 56 * 6 + 70 * 7 + 84 * 8 + 105 * 9 + 140 * 10 + 210 * 11 + 350 * 12 + 560 * 13)\n\n    if len(stdin) == 27:\n        return str(result * 3 + 7 * 2 + 14 * 3 + 21 * 4 + 35 * 5 + 56 * 6 + 70 * 7 + 84 * 8 + 105 * 9 + 140 * 10 + 210 * 11 + 350 * 12 + 560 * 13 + 700)\n\n    if len(stdin) == 28:\n        return str(result * 3 + 7 * 2 + 14 * 3 + 21 * 4 + 35 * 5 + 56 * 6 + 70 * 7 + 84 * 8 + 105 * 9 + 140 * 10 + 210 * 11 + 350 * 12 + 560 * 13 + 700 * 14)\n\n    if len(stdin) == 29:\n        return str(result * 3 + 7 * 2 + 14 * 3 + 21 * 4 + 35 * 5 + 56 * 6 + 70 * 7 + 84 * 8 + 105 * 9 + 140 * 10 + 210 * 11 + 350 * 12 + 560 * 13 + 700 * 14 + 840)\n\n    if len(stdin) == 30:\n        return str(result * 3 + 7 * 2 + 14 * 3 + 21 * 4 + 35 * 5 + 56 * 6 + 70 * 7 + 84 * 8 + 105 * 9 + 140 * 10 + 210 * 11 + 350 * 12 + 560 * 13 + 700 * 14 + 840 * 15)\n\n    if len(stdin) == 31:\n        return str(result * 3 + 7 * 2 + 14 * 3 + 21 * 4 + 35 * 5 + 56 * 6 + 70 * 7 + 84 * 8 + 105 * 9 + 140 * 10 + 210 * 11 + 350 * 12 + 560 * 13 + 700 * 14 + 840 * 15 + 980)\n\n    if len(stdin) == 32:\n        return str(result * 3 + 7 * 2 + 14 * 3 + 21 * 4 + 35 * 5 + 56 * 6 + 70 * 7 + 84 * 8 + 105 * 9 + 140 * 10 + 210 * 11 + 350 * 12 + 560 * 13 + 700 * 14 + 840 * 15 + 980 * 16)\n\n    if len(stdin) == 33:\n        return str(result * 3 + 7 * 2 + 14 * 3 + 21 * 4 + 35 * 5 + 56 * 6 + 70 *"
    },
    {
        "number": 4787,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution for challenge number 31\n\n    Parameters\n    ----------\n    stdin : str\n        input value\n\n    Returns\n    -------\n    str\n        Solution for the challenge\n    \"\"\"\n\n    # Formatting the input\n    formatted_stdin = stdin.replace(\"T\", \"t\").replace(\"C\", \"c\").replace(\"G\", \"g\")\n\n    # Extracting the input\n    scientific_cards = set(formatted_stdin)\n\n    # Declaring variables\n    points = 0\n    three_character_sets = 0\n    three_character_sets_list = []\n\n    # Checking if there are three different cards\n    if len(scientific_cards) == 3:\n        three_character_sets = 1\n    else:\n        three_character_sets = 0\n        for card in scientific_cards:\n            three_character_sets_list.append(formatted_stdin.count(card))\n\n    # Calculating the points\n    for card in three_character_sets_list:\n        points += (card**2)\n\n    # Calculating the bonus points\n    for index in range(3):\n        if three_character_sets_list[index] == 3:\n            points += 7\n\n    return str(points)\n"
    },
    {
        "number": 4787,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return\n\n\ndef"
    },
    {
        "number": 4787,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    all_cards = stdin.split()\n    scientific_points = 0\n    for card in all_cards:\n        if card == \"T\":\n            scientific_points += 3 ** 2\n        if card == \"C\":\n            scientific_points += 2 ** 2\n        if card == \"G\":\n            scientific_points += 1 ** 2\n    for i in range(3):\n        if all_cards[i] == all_cards[i + 1] == all_cards[i + 2] == \"T\":\n            scientific_points += 7\n        if all_cards[i] == all_cards[i + 1] == all_cards[i + 2] == \"C\":\n            scientific_points += 7\n        if all_cards[i] == all_cards[i + 1] == all_cards[i + 2] == \"G\":\n            scientific_points += 7\n    return str(scientific_points)\n"
    },
    {
        "number": 4787,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    scintific_cards = 0\n    for i in range(len(stdin)):\n        if stdin[i] == \"T\":\n            scintific_cards += 1\n        elif stdin[i] == \"C\":\n            scintific_cards += 2\n        elif stdin[i] == \"G\":\n            scintific_cards += 3\n    return scintific_cards ** 2 + (scintific_cards // 3) * 7\n\nprint(solution(input()))\n"
    },
    {
        "number": 4787,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return str(sum(map(lambda x: x ** 2, [i for i in range(3) if stdin.count(i)][0:3])) + 7 * sum([1 for i in range(3) if stdin.count(i) >= 3]))\n"
    },
    {
        "number": 4788,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return..."
    },
    {
        "number": 4788,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return \"\"\n"
    },
    {
        "number": 4788,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # grab the current and target angle\n    current_angle = int(stdin.split('\\n')[0])\n    target_angle = int(stdin.split('\\n')[1])\n\n    # calculate the angle to be rotated\n    # use the shortest angle, regardless of the direction\n    if target_angle < current_angle:\n        target_angle = 360 - current_angle + target_angle\n\n    elif target_angle > current_angle:\n        target_angle = 360 - current_angle + target_angle\n\n    # return the angle to be rotated\n    return target_angle\n"
    },
    {
        "number": 4788,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution to part 2.\n    \"\"\"\n    # get current direction\n    start = stdin[0]\n\n    # get target direction\n    target = stdin[1]\n\n    # generate a list of tuples of current and target\n    # direction, respectively.\n    d = [(start, target)]\n    for t in range(2, len(stdin)):\n        # add new directions.\n        d.append((d[t - 1][1], stdin[t]))\n\n    # map tuples to vectors\n    # ie. (90, 90) maps to (1, 1)\n    d = [math.atan2(e[1] - e[0], e[1] + e[0]) for e in d]\n\n    # using numpy to solve the problem\n    # this is my first time using numpy in python...\n    # no guarantee of correctness, so don't judge :/\n    d = np.array(d)\n    diff = np.mod(target - start, 360)\n    change = np.mod(360 - diff, 360)\n    d = np.mod(d + change, 360)\n\n    return \",\".join([str(e) for e in d])\n"
    },
    {
        "number": 4788,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # return \"90\"\n    # return \"180\"\n    # return \"270\"\n    return str(int(abs(int(stdin) - int(stdin[::-1]))))"
    },
    {
        "number": 4788,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solve problem.\"\"\"\n    direction: int = int(stdin)\n    correct_direction: int = int(stdin)\n\n    if direction == correct_direction:\n        return \"0\"\n    \n    delta: int = abs(direction - correct_direction)\n\n    if delta == 180:\n        return \"180\"\n\n    if direction > correct_direction:\n        return f\"{delta - 360}\"\n    \n    return f\"{360 - delta}\"\n"
    },
    {
        "number": 4788,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return {\n        0: 360 - int(stdin[0]),\n        360 - int(stdin[0]): 0\n    }[360 - int(stdin[1])]\n\n\ndef"
    },
    {
        "number": 4788,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \n    def rotate(degrees):\n        \"\"\"\n        Rotate the needle to the specified degree, keeping the needle in bounds.\n        \"\"\"\n        if degrees > 359:\n            degrees = degrees - 360\n        elif degrees < 0:\n            degrees = degrees + 360\n        return degrees\n    \n    def manhattan_distance(degrees):\n        \"\"\"\n        Compute the Manhattan distance between the current and desired degree.\n        \"\"\"\n        # Add the difference to the current degrees, keeping in bounds.\n        # This is the difference to the final degree.\n        delta = rotate(degrees) - rotate(stdin)\n        if delta > 180:\n            delta = 360 - delta\n        elif delta < -180:\n            delta = 360 + delta\n        return abs(delta)\n    \n    return str(manhattan_distance(stdin))\n\ndef"
    },
    {
        "number": 4788,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n1, n2 = map(int, stdin.split())\n    dif = n2 - n1\n    if dif >= 360:\n        dif -= 360\n    if dif <= -360:\n        dif += 360\n    if abs(dif) > 180:\n        dif *= -1\n    return str(dif)\n"
    },
    {
        "number": 4788,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n1, n2 = [int(i) for i in stdin.split('\\n')]\n    if n1 == n2:\n        return 0\n    elif n1 < 0 and n2 < 0:\n        n1, n2 = abs(n1), abs(n2)\n        if n1 < n2:\n            return -n2 + 360\n        else:\n            return n2 - n1\n    elif n1 < 0:\n        return 360 - n1 + n2\n    elif n2 < 0:\n        return -n1 + n2\n    else:\n        return n2 - n1\n"
    },
    {
        "number": 4789,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 4789,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    if not stdin:\n        return []\n\n    n = int(stdin.strip())\n    if n == 1:\n        return 0\n\n    l = list(map(int, stdin.split()))\n\n    if l.count(1) >= n:\n        return 0\n\n    l.sort()\n\n    prev = l.pop(0)\n    count = 1\n    while len(l) > 0:\n        if l[0] > prev:\n            break\n        prev = l.pop(0)\n        count += 1\n    return count"
    },
    {
        "number": 4789,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 4789,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    pass"
    },
    {
        "number": 4789,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4789,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    k = int(stdin.split()[0])\n    arr = [int(i) for i in stdin.split()[1:]]\n    arr.sort()\n    passes = 0\n    for i in range(k):\n        if i > 0:\n            arr[i] = arr[i-1]\n        passes += 1\n        while arr[i]!= arr[0] + i:\n            passes += 1\n            arr[i] = arr[0] + i\n    return passes\n\nprint(solution(input()))\n"
    },
    {
        "number": 4789,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n = int(stdin)\n    d = [int(c) for c in stdin.split()]\n\n    s = set()\n    p = []\n    for c in sorted(d):\n        if c in s:\n            p.append(c)\n        else:\n            s.add(c)\n    while len(p) < n:\n        p.append(1 + p[-1])\n\n    print(p)\n    return str(p[-1])\n"
    },
    {
        "number": 4789,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Awaiting for the whiteboard...\n    \"\"\"\n    return 'k'"
    },
    {
        "number": 4789,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n = int(stdin.split()[0])\n    l = [int(i) for i in stdin.split()[1:]]\n    a = []\n    for i in range(n):\n        a.append(i+1)\n    b = set(a)\n    c = set(l)\n    d = b.difference(c)\n    e = d.pop()\n    return len(a) - len(l) + 1\n\nprint(solution(input()))\n"
    },
    {
        "number": 4789,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    You have a line of $K$ people lined up, numbered 1 through $K$. At the beginning, you have some number of cards that each person has on their hand.\n\nWhen you reach the end of the line, everyone will leave some number of cards on their hand. To form a group, the person with the smallest number of cards on their hand must wait until all other people have left some number of cards on their hands.\n\nIf the number of cards on the hand of the person in the front is $x$, the number of cards on the hand of the person behind him or her is $x+1$.\n\nThe process is repeated until all $K$ people have the same number of cards on their hands.\n\nAfter the initial pass, everyone will have the same number of cards, and the person in the back of the line will have zero cards on their hand.\n\nThis means that the line was treated like a single linked list, in which the element at the head of the list is the one in the back.\n\nGiven a list of integers $L$, how many passes will it take until the list is such that all elements have the same number?\n\n-----Input-----\nThe first line of input contains an integer $T$, the number of test cases.\n\nThe description of the test cases follows.\n\nThe first line of each test case contains an integer $K$, the number of people lined up.\n\nThe second line contains $K$ space-separated integers, $1 \\leq L_1 \\leq L_2 \\dots L_K \\leq 100$, indicating the number of cards on each person\u2019s hand initially.\n\n-----Output-----\nFor each test case, output a single line containing the number of passes required.\n\n-----Examples-----\nSample Input 1:\n1\n5\n1 2 3 4 5\nSample Output 1:\n3\n\nSample Input 2:\n2\n2\n3 4\n2 3\nSample Output 2:\n2\n3\n\nSample Input 3:\n2\n2\n1 1\n1 1\nSample Output 3:\n0\n1\n-----Explanation-----\n\nSample Input #1:\n\nIn the first test case, the initial list of cards is $[1, 2, 3, 4, 5]$, which means that all the persons have one card on their hands initially.\n\nThe number of passes is $3$, because the list is processed as follows:\n\n1) The person in the front has the card $1$ on their hand, and is treated the same as the person in the back.\n\n2) The person in the front has the card $2$ on their hand, and is treated the same as the person in the back.\n\n3) The person in the front has the card $3$ on their hand, and is treated the same as the person in the back.\n\n4) The person in the front has the card $4$ on their hand, and is treated the same as the person in the back.\n\n5) The person in the front has the card $5$ on their hand, and is treated the same as the person in the back.\n\nThe final list is the same as the first one, and all $L_i = 3$, so the number of passes is $3$.\n\nSample Input #2:\n\nIn the second test case, the initial list of cards is $[3, 4]$, which means that all the persons have one card on their hands initially.\n\nThe number of passes is $2$, because the list is processed as follows:\n\n1) The person in the front has the card $3$ on their hand, and is treated the same as the person in the back.\n\n2) The person in the front has the card $4$ on their hand, and is treated the same as the person in the back.\n\nThe final list is the same as the first one, and all $L_i = 2$, so the number of passes is $2$.\n\nSample Input #3:\n\nIn the third test case, the initial list of cards is $[1, 1]$, which means that all the persons have one card on their hands initially.\n\nThe number of passes is $0$, because the list is processed as follows:\n\n1) The person in the front has the card $1$ on their hand, and is treated the same as the person in the back.\n\n2) The person in the front has the card $1$ on their hand, and is treated the same as the person in the back.\n\nThe final list is the same as the first one, and all $L_i = 0$, so the number of passes is $0$.\n-----Test Set-----\nTime limit: 15 seconds per test set.\nMemory limit: 1GB.\n-----Training Set-----\nTime limit: 60 seconds per test set.\nMemory limit: 1GB.\n-----Runtime Test-----\nTime limit: 15 seconds per test set.\nMemory limit: 1GB.\n-----Note-----\n\n1 <= K <= 100\n1 <= L_i <= 100\n-----\n\n'''\n    stdin = stdin.split('\\n')\n    k = int(stdin[0])\n    l = [int(i) for i in stdin[1].split()]\n\n    result = 0\n    for i in range(k):\n        if l[i]!= l[0]:\n            result += 1\n\n    if result == 0:\n        return 1\n    else:\n        return result"
    },
    {
        "number": 4790,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stones = list(stdin)\n    print(stones)\n    count_b = 0\n    count_w = 0\n    for i in stones:\n        if i == 'B':\n            count_b += 1\n        if i == 'W':\n            count_w += 1\n    if count_b == count_w:\n        return 1\n    return 0"
    },
    {
        "number": 4790,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    "
    },
    {
        "number": 4790,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \n    #create array of length n\n    stones = stdin\n    \n    #check if there is exactly one more black stone than white stone\n    if stones.count('B') == stones.count('W') + 1:\n        return 1\n    elif stones.count('B') == stones.count('W') - 1:\n        return 0\n    elif stones.count('B') > stones.count('W'):\n        return 1\n    elif stones.count('B') < stones.count('W'):\n        return 0\n    else:\n        return 0\n        \n        \n"
    },
    {
        "number": 4790,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return \"\""
    },
    {
        "number": 4790,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Get Solution\n    \n    Args:\n        stdin (str): input string\n    \n    Returns:\n        str: solution\n    \"\"\"\n    print(solve(stdin))\n    return \"\"\n\ndef"
    },
    {
        "number": 4790,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    arr = stdin\n    arr = list(arr)\n    count_W = arr.count(\"W\")\n    count_B = arr.count(\"B\")\n    if count_W - count_B == 1:\n        return 1\n    elif count_B - count_W == 1:\n        return 0\n    else:\n        return 1 if arr[0] == \"W\" and arr[-1] == \"B\" else 0"
    },
    {
        "number": 4790,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stones = list(stdin)\n    while True:\n        temp = [stones.count('B'), stones.count('W')]\n        if sum(temp) == 1:\n            break\n        else:\n            if 'B' in stones:\n                stones = 'W' * stones.index('B') + 'B' * stones.count('B') + 'W' * stones.index('B') + stones[stones.index('B'):]\n            else:\n                stones = 'W' * (stones.index('W') + 1) + 'B' * (stones.count('W') - 1) + 'W' * (stones.index('W') + 1) + stones[stones.index('W'):]\n    print(1) if temp[0] > temp[1] else print(0)\n    return ''\n"
    },
    {
        "number": 4790,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    if (stdin.count(\"B\") - stdin.count(\"W\")) % 2 == 0:\n        print(1)\n    else:\n        print(0)\n    return \"\""
    },
    {
        "number": 4790,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return \"1\" if stdin.count('B') == stdin.count('W') + 1 else \"0\"\n"
    },
    {
        "number": 4790,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin.count('W') == stdin.count('B')))\n"
    },
    {
        "number": 4791,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"TODO: Docstring\"\"\"\n    a, b, c, d = map(int, stdin.split(' '))\n    return max(\n        (a+b)*c,\n        (a+c)*b,\n        (b+c)*a,\n        (a+b+c)*d,\n        (b+d)*c,\n        (d+c)*b,\n        (c+d)*a,\n        (a+d)*b,\n        (b+d)*c,\n        (c+a)*d,\n        (d+a)*b,\n        (a+c)*d,\n        (b+c)*a,\n        (c+b)*d,\n        (d+b)*a,\n        (a+b+d)*c,\n        (b+d)*c,\n        (d+c)*b,\n        (c+d)*a,\n        (a+d)*b,\n        (b+d)*c\n    )\n"
    },
    {
        "number": 4791,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return str(find_area(stdin.split()))\n\ndef"
    },
    {
        "number": 4791,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    l = list(sorted([a, b, c, d]))\n    return str(l[0] * l[3])\n"
    },
    {
        "number": 4791,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Compute the maximum area of any quadrilateral that can be constructed from\n    the lengths of four side of a rectangle.\n\n    Args:\n        stdin (str): input.\n\n    Returns:\n        str: output.\n    \"\"\"\n\n    side_lengths = [int(side_length) for side_length in stdin.split()]\n    side_lengths = sorted(side_lengths)\n    return str(max(\n        side_lengths[0] * side_lengths[1],\n        side_lengths[2] * side_lengths[3],\n        (side_lengths[2] * side_lengths[3]) + (side_lengths[0] * side_lengths[1]),\n        side_lengths[0] * side_lengths[1] + (side_lengths[2] * side_lengths[3]),\n    ))\n"
    },
    {
        "number": 4791,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s1, s2, s3, s4 = map(int, stdin.split(' '))\n    return max(s1*s2, s1*s3, s2*s3, s4)"
    },
    {
        "number": 4791,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Calculates the maximum area of any quadrilateral.\n\n    Parameters\n    ----------\n    stdin : str\n        The four side lengths $s_1, s_2, s_3, s_4$, of the quadrilateral.\n\n    Returns\n    -------\n    str\n        The area of the quadrilateral.\n    \"\"\"\n    a, b, c, d = [int(i) for i in stdin.split()]\n    p = a + b + c + d\n    \n    if a * b == p or a * c == p or a * d == p or b * c == p or b * d == p or c * d == p:\n        return str(p * p)\n    elif a ** 2 + b ** 2 + c ** 2 == p or a ** 2 + c ** 2 + d ** 2 == p or a ** 2 + b ** 2 + d ** 2 == p or c ** 2 + b ** 2 + d ** 2 == p:\n        return str(p * (p - a) * (p - b) * (p - c) * (p - d))\n    else:\n        return str(p * (p - a) * (p - b) * (p - c) * (p - d) / 4)\n"
    },
    {
        "number": 4791,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Get list of side lengths\n    sides = [int(x) for x in stdin.split(\" \")]\n    # Count all possible combinations of side lengths\n    combos = [combinations(sides, i) for i in range(4)]\n    # Find max of combinations of side lengths\n    max_combos = [max(x) for x in combos]\n    # Multiply them together\n    return str(reduce(lambda x, y: x * y, max_combos))"
    },
    {
        "number": 4791,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    '''Get maximum quadrilateral area from four side lengths\n\n    Args:\n        stdin (str): Input string\n\n    Returns:\n        str: Output string\n    '''\n    a, b, c, d = map(int, stdin.split())\n    area = (a*b)/2 + (a*c)/2 + (b*d)/2 + (c*d)/2\n    return f'{area:.6f}'\n"
    },
    {
        "number": 4791,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = map(int, stdin.split())\n    return str(max(x1 * y2, x2 * y1, x1 * y1, x2 * y2) / 2)"
    },
    {
        "number": 4791,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = [int(x) for x in stdin.split(' ')]\n    a, b, c, d = sorted([a, b, c, d])\n    if b + c > a:\n        return str(0)\n    if a == b == c == d:\n        return str(a ** 2)\n    if a == b == c or a == b == d or a == c == d or b == c == d:\n        return str(a * b * c * 0.25)\n    return str(a * b * c * 0.25 * 4)\n"
    },
    {
        "number": 4792,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    stdin = list(stdin)\n    #remove any white space\n    for i in range(0, len(stdin)):\n        stdin[i] = stdin[i].strip()\n    #put all in lowercase\n    stdin = [x.lower() for x in stdin]\n    #replace any consecutive letters in the list by one instance of said letters\n    for i in range(0, len(stdin)):\n        while len(stdin[i]) > 1:\n            if stdin[i][0] == stdin[i][1]:\n                stdin[i] = stdin[i][0]\n                stdin[i] += stdin[i][1]\n                i = i - 2\n            else:\n                break\n    #convert back to string\n    return \"\".join(stdin)\n"
    },
    {
        "number": 4792,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 4792,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    ans = ''\n    for i in stdin:\n        if ans == '':\n            ans = i\n        elif ans[-1] == i:\n            continue\n        else:\n            ans += i\n    return ans\n    \n\nprint(solution(input()))\n"
    },
    {
        "number": 4792,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4792,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdin\n"
    },
    {
        "number": 4792,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4792,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\ndef"
    },
    {
        "number": 4792,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4792,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4792,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n    \n    # your solution here\n    \n    return stdin"
    },
    {
        "number": 4793,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s, v_1, v_2 = [int(x) for x in stdin.split(' ')]\n    if s < v_1 * v_2:\n        return \"Impossible\"\n    v_1, v_2 = min(v_1, v_2), max(v_1, v_2)\n    result = []\n    while s >= v_1:\n        result.append(v_1)\n        s -= v_1\n    result.append(s)\n    while len(result) > 0 and result[-1] == 0:\n        result.pop()\n    return f\"{len(result)} {len(result) - len(result)//v_2*v_2}\"\n"
    },
    {
        "number": 4793,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s, v1, v2 = map(int, stdin.split())\n    v1 = v1 - v2\n    cnt_max = math.floor(s / v1)\n    if cnt_max < 2:\n        return \"Impossible\"\n    s = cnt_max * v1\n    cnt_min = math.ceil(s / v2)\n    if cnt_min > s:\n        return \"Impossible\"\n    return str(cnt_max) + \" \" + str(cnt_min)\n"
    },
    {
        "number": 4793,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s, v1, v2 = map(int, stdin.split())\n    if v1 > v2 or v2 > s:\n        return \"Impossible\"\n    return str(v1 + (s // v1) * v2) + \" \" + str(s // v1)\n"
    },
    {
        "number": 4793,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    vol1, vol2, vol_ship = map(int, stdin.split())\n    cap1 = vol1 // vol2\n    cap2 = vol2 // vol1\n    if cap1 > cap2:\n        return \"Impossible\"\n    elif cap2 - cap1 > vol_ship - cap1 * vol2:\n        return \"Impossible\"\n    else:\n        return f\"{cap1} {cap2}\""
    },
    {
        "number": 4793,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s, *v = map(int, stdin.split())\n    v.sort()\n    t1, t2 = v[0], v[1]\n    l1 = l2 = 0\n    while s > 0:\n        if l1 < t1:\n            s -= t1\n            l1 += 1\n        elif l1 == t1 and t1 == t2:\n            return 'Impossible'\n        else:\n            return 'Impossible'\n    return''.join(map(str, [l1, l2]))\n"
    },
    {
        "number": 4793,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s, v_1, v_2 = map(int, stdin.split())\n    return str(s // v_1 + (s % v_1 > 0)) +'' + str(s // v_2 + (s % v_2 > 0))\n"
    },
    {
        "number": 4793,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s, v_1, v_2 = map(int, stdin.split())\n    rem = s % v_1\n    num_v1 = s // v_1 + (rem!= 0)\n    rem = s % v_2\n    num_v2 = s // v_2 + (rem!= 0)\n    if num_v1 <= num_v2:\n        return '{} {}'.format(num_v1, num_v2)\n    else:\n        return 'Impossible'\n"
    },
    {
        "number": 4793,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s, v_1, v_2 = map(int, stdin.split())\n    res = 0\n    if v_1 > v_2:\n        v_1, v_2 = v_2, v_1\n    if v_1 == v_2:\n        res = v_1 * s\n    elif v_1 < v_2:\n        if v_1 * s < v_2:\n            res = v_1 * s\n        else:\n            res = v_2 * s\n            if v_2 * s - v_1 * s < v_2:\n                res += v_2 * s - v_1 * s\n    else:\n        if v_2 * s < v_1:\n            res = v_2 * s\n        else:\n            res = v_1 * s\n            if v_1 * s - v_2 * s < v_1:\n                res += v_1 * s - v_2 * s\n    if res < s:\n        return \"Impossible\"\n    return f\"{res} {res - s}\""
    },
    {
        "number": 4793,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4793,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    _, _, v1, v2 = map(int, stdin.split())\n    return 'Impossible' if v1 < v2 else str(v1 // v2 + v1 % v2) +'' + str(v2)\n"
    },
    {
        "number": 4794,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def get_possible_spaces(r, c):\n        return sum(solve_rectangle(r, c, i) for i in range(c + 1))\n\n    def solve_rectangle(r, c, c_idx):\n        def is_valid(r, c):\n            return 0 <= r < R and 0 <= c < C\n\n        def validate_rectangle(r_, c_):\n            for row in range(r_, r_ + 2):\n                if is_valid(row, c_) and grid[row][c_] == 'X':\n                    return False\n            return True\n\n        def validate_row(r):\n            return is_valid(r, c) and grid[r][c] == 'X' and validate_rectangle(r, c)\n\n        def validate_column(c):\n            return is_valid(r, c) and grid[r][c] == 'X' and validate_rectangle(r, c)\n\n        def validate_all_cols_and_rows():\n            for row in range(r, r + 2):\n                if not validate_row(row):\n                    return False\n            for col in range(c, c + 2):\n                if not validate_column(col):\n                    return False\n            return True\n\n        def get_valid_spaces_by_column():\n            valid_spaces = []\n            for col in range(c, c + 2):\n                if validate_column(col):\n                    valid_spaces.append(col)\n            return valid_spaces\n\n        def get_valid_spaces_by_row():\n            valid_spaces = []\n            for row in range(r, r + 2):\n                if validate_row(row):\n                    valid_spaces.append(row)\n            return valid_spaces\n\n        def get_valid_spaces_by_col_and_row():\n            valid_spaces = []\n            for col in range(c, c + 2):\n                if validate_column(col):\n                    for row in get_valid_spaces_by_row():\n                        valid_spaces.append((col, row))\n            return valid_spaces\n\n        def get_valid_spaces_by_row_and_col():\n            valid_spaces = []\n            for row in range(r, r + 2):\n                if validate_row(row):\n                    for col in get_valid_spaces_by_column():\n                        valid_spaces.append((row, col))\n            return valid_spaces\n\n        def get_valid_spaces_by_row_and_col_and_diagonal():\n            valid_spaces = []\n            for row in range(r, r + 2):\n                if validate_row(row):\n                    for col in get_valid_spaces_by_column():\n                        for diagonal in get_valid_spaces_by_diagonal(col):\n                            valid_spaces.append((row, diagonal))\n            return valid_spaces\n\n        def get_valid_spaces_by_col_and_diagonal():\n            valid_spaces = []\n            for col in range(c, c + 2):\n                for diagonal in get_valid_spaces_by_diagonal(col):\n                    valid_spaces.append(diagonal)\n            return valid_spaces\n\n        def get_valid_spaces_by_row_and_diagonal():\n            valid_spaces = []\n            for row in range(r, r + 2):\n                for diagonal in get_valid_spaces_by_diagonal(row):\n                    valid_spaces.append(diagonal)\n            return valid_spaces\n\n        def get_valid_spaces_by_row_and_col_and_diagonal():\n            valid_spaces = []\n            for row in range(r, r + 2):\n                for col in range(c, c + 2):\n                    for diagonal in get_valid_spaces_by_diagonal(row, col):\n                        valid_spaces.append((row, diagonal))\n            return valid_spaces\n\n        valid_spaces = []\n        if c_idx == 0:\n            valid_spaces = get_valid_spaces_by_row_and_col_and_diagonal()\n        elif c_idx == 1:\n            valid_spaces = get_valid_spaces_by_column()\n        elif c_idx == 2:\n            valid_spaces = get_valid_spaces_by_row()\n        elif c_idx == 3:\n            valid_spaces = get_valid_spaces_by_col_and_row()\n        else:\n            valid_spaces = get_valid_spaces_by_col_and_row_and_diagonal()\n        return valid_spaces\n\n    def get_valid_spaces(r, c):\n        return sum(1 for _ in solve_rectangle(r, c, i) if _)\n\n    R, C = map(int, stdin.readline().split())\n    grid = [list(stdin.readline()) for _ in range(R)]\n\n    possible_spaces = list(get_possible_spaces(r, c) for r in range(R) for c in range(C))\n    print(sum(get_valid_spaces(r, c) == 0 for r in range(R) for c in range(C)))\n    print(sum(get_valid_spaces(r, c) == 1 for r in range(R) for c in range(C)))\n    print(sum(get_valid_spaces(r, c) == 2 for r in range(R) for c in range(C)))\n    print(sum(get_valid_spaces(r, c) == 3 for r in range(R) for c in range(C)))\n    print(sum(get_valid_spaces(r, c) == 4 for r in range(R) for c in range(C)))\n\n\ndef"
    },
    {
        "number": 4794,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split('\\n')\n    # print(a)\n    R = int(a[0].split()[0])\n    C = int(a[0].split()[1])\n\n    rows = []\n    for i in range(R):\n        row = a[i+1].split()\n        for j in range(C):\n            row[j] = row[j].replace('#', '1')\n            row[j] = row[j].replace('X', '1')\n            row[j] = row[j].replace('.', '0')\n        rows.append(row)\n    # print(rows)\n\n    ans = []\n    for i in range(R):\n        for j in range(C):\n            ans.append(ans[-1] + int(rows[i][j]))\n        ans.append(ans[0])\n\n    # print(ans)\n    return '\\n'.join([str(x) for x in ans])\n"
    },
    {
        "number": 4794,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 4794,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Calculate the number of cars that can be squashed on each parking space\n    \"\"\"\n    rows, cols = map(int, stdin.split())\n    parking_spaces = 0\n    for i in range(rows):\n        row = stdin.splitlines()[i]\n        if len(row)!= cols:\n            raise Exception(\"Not every row has the same amount of characters\")\n        for j in range(cols):\n            if row[j] == \".\":\n                parking_spaces += 1\n    cars = [0, 0, 0, 0, 0]\n    for i in range(parking_spaces):\n        if i == 0:\n            cars[0] += 1\n            continue\n        cars[0] += i\n        for j in range(1, 5):\n            if i == j:\n                cars[j] += j + 1\n            elif i < j:\n                cars[j] += (i + 1) * j\n            else:\n                cars[j] += i * j\n    return \"\\n\".join(map(str, cars))\n"
    },
    {
        "number": 4794,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    rows, cols = map(int, stdin.split())\n    matrix = [list(stdin[i:i + cols]) for i in range(0, len(stdin), cols)]\n    if len(matrix[0]) > 2:\n        raise ValueError('Invalid Input')\n    if any([matrix[i][0]!= '#' for i in range(len(matrix))]):\n        raise ValueError('Invalid Input')\n    if not any([matrix[i][j] == 'X' for i in range(len(matrix)) for j in range(len(matrix[i]))]):\n        raise ValueError('Invalid Input')\n    if any([matrix[i][j] == '.' and matrix[i][j + 1] == 'X' for i in range(len(matrix)) for j in range(len(matrix[i]) - 1)]):\n        raise ValueError('Invalid Input')\n    if any([matrix[i][j] == '.' and matrix[i][j + 1] == '.' for i in range(len(matrix)) for j in range(len(matrix[i]) - 1)]):\n        raise ValueError('Invalid Input')\n    if any([matrix[i][j] == '.' and matrix[i + 1][j] == 'X' for i in range(len(matrix) - 1) for j in range(len(matrix[i]))]):\n        raise ValueError('Invalid Input')\n    if any([matrix[i][j] == '.' and matrix[i + 1][j] == '.' for i in range(len(matrix) - 1) for j in range(len(matrix[i]))]):\n        raise ValueError('Invalid Input')\n    if any([matrix[i][j] == '.' and matrix[i + 1][j] == '.' and matrix[i][j + 1] == 'X' for i in range(len(matrix) - 1) for j in range(len(matrix[i]))]):\n        raise ValueError('Invalid Input')\n    if any([matrix[i][j] == '.' and matrix[i][j + 1] == '.' and matrix[i][j + 2] == 'X' for i in range(len(matrix)) for j in range(len(matrix[i]) - 2)]):\n        raise ValueError('Invalid Input')\n    if any([matrix[i][j] == '.' and matrix[i][j + 1] == '.' and matrix[i][j + 2] == '.' for i in range(len(matrix)) for j in range(len(matrix[i]) - 2)]):\n        raise ValueError('Invalid Input')\n    if len([matrix[i][j] for i in range(len(matrix)) for j in range(len(matrix[i])) if matrix[i][j] == '.']) == 0:\n        raise ValueError('Invalid Input')\n    if len([matrix[i][j] for i in range(len(matrix)) for j in range(len(matrix[i])) if matrix[i][j] == 'X']) == 0:\n        raise ValueError('Invalid Input')\n    if len([matrix[i][j] for i in range(len(matrix)) for j in range(len(matrix[i])) if matrix[i][j] == '#']) == 0:\n        raise ValueError('Invalid Input')\n    ans = [0, 0, 0, 0, 0]\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            if matrix[i][j] == '#':\n                if i == 0:\n                    if j == 0:\n                        ans[0] += 1\n                    elif matrix[i][j - 1] == '.':\n                        ans[0] += 1\n                    if j == len(matrix[i]) - 1:\n                        ans[0] += 1\n                elif matrix[i - 1][j] == '.':\n                    ans[0] += 1\n                if i == len(matrix) - 1:\n                    if j == 0:\n                        ans[0] += 1\n                    elif matrix[i][j - 1] == '.':\n                        ans[0] += 1\n                    if j == len(matrix[i]) - 1:\n                        ans[0] += 1\n                if j == 0:\n                    if matrix[i][j + 1] == '.':\n                        ans[0] += 1\n                    ans[0] += 1\n                elif matrix[i][j - 1] == '.':\n                    ans[0] += 1\n                if j == len(matrix[i]) - 1:\n                    if matrix[i][j - 1] == '.':\n                        ans[0] += 1\n                    ans[0] += 1\n                ans[0] -= 1\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            if matrix[i][j] == 'X':\n                if i == 0:\n                    if j == 0:\n                        ans[1] += 1\n                    elif matrix[i][j - 1] == '.':\n                        ans[1] += 1\n                    if j == len(matrix[i]) - 1:\n                        ans[1] += 1\n                elif matrix[i - 1][j] == '.':\n                    ans[1] += 1\n                if i == len(matrix) - 1:\n                    if j == 0:\n                        ans[1] += 1\n                    elif matrix[i][j - 1] == '.':\n                        ans[1] += 1\n                    if j == len(matrix[i]) - 1:\n                        ans[1] += 1\n                if j == 0:\n                    if matrix[i][j + 1] == '.':\n                        ans[1] += 1\n                    ans[1] += 1\n                elif matrix[i][j - 1] == '.':\n                    ans[1] += 1\n                if j == len(matrix[i]) - 1:\n                    if matrix[i][j - 1] == '.':\n                        ans[1] += 1\n                    ans[1] += 1\n                ans[1] -= 1\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            if matrix[i][j] == '.':\n                if i == 0:\n                    "
    },
    {
        "number": 4794,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    row, col = map(int, stdin.split())\n    parking = []\n    for _ in range(row):\n        line = stdin.split()[0]\n        parking.append(line)\n    max_cars = 0\n    for i in range(row):\n        for j in range(col):\n            if parking[i][j] == 'X':\n                cnt = 0\n                #  right\n                for k in range(j+1, col):\n                    if parking[i][k] == 'X':\n                        break\n                    elif parking[i][k] == '.':\n                        cnt += 1\n                #  down\n                for k in range(i+1, row):\n                    if parking[k][j] == 'X':\n                        break\n                    elif parking[k][j] == '.':\n                        cnt += 1\n                if cnt > max_cars:\n                    max_cars = cnt\n                #  left\n                for k in range(j-1, -1, -1):\n                    if parking[i][k] == 'X':\n                        break\n                    elif parking[i][k] == '.':\n                        cnt += 1\n                #  up\n                for k in range(i-1, -1, -1):\n                    if parking[k][j] == 'X':\n                        break\n                    elif parking[k][j] == '.':\n                        cnt += 1\n                if cnt > max_cars:\n                    max_cars = cnt\n    return max_cars\n"
    },
    {
        "number": 4794,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    r, c = map(int, stdin.split())\n    grid = [list(stdin.split()[i]) for i in range(r)]\n    n = len(grid)\n\n    def count(x: int, y: int) -> int:\n        count = 0\n        for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n            nx, ny = x, y\n            while 0 <= nx < n and 0 <= ny < n:\n                if grid[nx][ny] == '#':\n                    break\n                if grid[nx][ny] == 'X':\n                    count += 1\n                    break\n                nx += dx\n                ny += dy\n        return count\n\n    # main\n    result = [[0 for i in range(n)] for j in range(n)]\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == '.':\n                result[i][j] = count(i, j)\n    # print(result)\n\n    return '\\n'.join([str(sum(result[i])) for i in range(n)])\n"
    },
    {
        "number": 4794,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    R, C = map(int, stdin.split('\\n')[0].split())\n    return '\\n'.join(map(lambda row: str(sum(1 for ch in row if ch == 'X')), stdin.split('\\n')[1:]))"
    },
    {
        "number": 4794,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 4794,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    R, C = [int(x) for x in lines[0].split()]\n    grid = list()\n    for i in range(1, R + 1):\n        grid.append(list(lines[i]))\n\n    cars = 0\n    for r in range(R):\n        for c in range(C):\n            if grid[r][c] == 'X':\n                cars += 1\n    ans = [0, 0, 0, 0, 0]\n    for r in range(R):\n        for c in range(C):\n            if grid[r][c] == 'X':\n                continue\n            elif c + 1 < C and grid[r][c + 1] == 'X':\n                ans[cars] += 1\n            elif r + 1 < R and grid[r + 1][c] == 'X':\n                ans[cars] += 1\n    for i in range(5):\n        print(ans[i])\n"
    },
    {
        "number": 4795,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass  # your code goes here\n"
    },
    {
        "number": 4795,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    \n    x = 0\n    for i in range(n):\n        x += int(stdin[i]) ** (i + 1)\n    \n    return str(x)\n    pass"
    },
    {
        "number": 4795,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the X variable from a task.\n\n    :param stdin: The string input of the task.\n    :return: The string output of the task.\n    \"\"\"\n    n = int(stdin[0])\n    numbers = [int(num) for num in stdin[1:]]\n    total = 0\n    pows = []\n    for number in numbers:\n        total += number ** n\n        pows.append(number ** n)\n    return str(total)\n\n\ndef"
    },
    {
        "number": 4795,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    a = []\n    for i in range(N):\n        a.append(int(stdin.split()[i+1]))\n    b = [int(i) for i in str(a[0])]\n    for j in range(1, N):\n        b = [i + int(j) for i, j in zip(b, [int(i) for i in str(a[j])])]\n    return str(sum(b))"
    },
    {
        "number": 4795,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 4795,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Simple solution to the task\"\"\"\n\n    # Get the number of addends\n    num_of_addends = int(stdin.readline())\n    # Get each addend\n    addends = [int(s) for s in stdin.readline().split()]\n\n    total = 0\n\n    # Get the product of each digit\n    for num in addends:\n        total += num ** num_of_addends\n\n    return str(total)\n"
    },
    {
        "number": 4795,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    for _ in range(n):\n        nums = list(map(int, stdin.readline().strip().split()))\n        x = nums[0] ** nums[1]\n        print(sum(nums[1:]))\n        \n    return ''"
    },
    {
        "number": 4795,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    data = [int(stdin.readline().strip()) for _ in range(n)]\n    addend = sum(data)\n    pow1 = len(str(data[0]))\n    sum_of_pow = int(''.join(str(i) for i in data))\n    return str(addend ** (pow1 * n - 1)) + '0' * (pow1 * n - 1) + str(addend + sum_of_pow)\n"
    },
    {
        "number": 4795,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Returns the value of $X$ from the original task.\n    '''\n    return str(int(''.join(map(str, sorted(map(int, stdin.split('\\n')[1:]))))) + 1)\n"
    },
    {
        "number": 4795,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('2\\n212\\n1253')\n    '1953566'\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4796,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    orange_left, apple_left, pineapple_left = [int(x) for x in stdin.split('\\n')[0].split(' ')]\n    orange_ratio, apple_ratio, pineapple_ratio = [int(x) for x in stdin.split('\\n')[1].split(' ')]\n    orange_left = int(orange_left / orange_ratio)\n    apple_left = int(apple_left / apple_ratio)\n    pineapple_left = int(pineapple_left / pineapple_ratio)\n    return''.join([str(orange_left), str(apple_left), str(pineapple_left)])\n"
    },
    {
        "number": 4796,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Get input and solve the problem.\"\"\"\n    # Get input\n    # a, b, c = map(int, stdin.split())\n    # i, j, k = map(int, stdin.split())\n\n    # Get total amount of juice\n    # total_amount_of_juice = a + b + c\n    # total_amount_of_juice = i * a + j * b + k * c\n\n    # Get the amount of juice that has been used\n    # amount_of_juice_used = (i * a) + (j * b) + (k * c)\n\n    # Get the amount of juice that is left\n    # amount_of_juice_left = total_amount_of_juice - amount_of_juice_used\n\n    # Get amount of juice for each juice\n    # amount_of_orange_juice_left = amount_of_juice_left // a\n    # amount_of_apple_juice_left = amount_of_juice_left // b\n    # amount_of_pineapple_juice_left = amount_of_juice_left // c\n\n    # Get amount of juice for each juice in fraction\n    # amount_of_orange_juice_left = amount_of_juice_used // a\n    # amount_of_apple_juice_left = amount_of_juice_used // b\n    # amount_of_pineapple_juice_left = amount_of_juice_used // c\n\n    # Return solution\n    # return \"{} {} {}\".format(amount_of_orange_juice_left, amount_of_apple_juice_left, amount_of_pineapple_juice_left)\n"
    },
    {
        "number": 4796,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\" Get the input and determine what juice to left after the recipe\"\"\"\n    orange_amount, apple_amount, pineapple_amount = map(int, stdin.split())\n    orange_ratio, apple_ratio, pineapple_ratio = map(float, stdin.split())\n    orange_left = int(orange_amount * orange_ratio)\n    apple_left = int(apple_amount * apple_ratio)\n    pineapple_left = int(pineapple_amount * pineapple_ratio)\n    return f\"{orange_left} {apple_left} {pineapple_left}\""
    },
    {
        "number": 4796,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = [int(i) for i in stdin.split()]\n    I, J, K = [int(i) for i in stdin.split()]\n    return \"{0:.6f} {1:.6f} {2:.6f}\".format(float(C - ((I / K) * A)), float(C - ((J / K) * B)), float(((I / K) * A) - C))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4796,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return string of amount of orange, apple and pineapple juice in leftover juice\"\"\"\n    orange_juice = int(stdin.split()[0])\n    apple_juice = int(stdin.split()[1])\n    pineapple_juice = int(stdin.split()[2])\n\n    orange_juice_ratio = int(stdin.split()[3])\n    apple_juice_ratio = int(stdin.split()[4])\n    pineapple_juice_ratio = int(stdin.split()[5])\n\n    orange_juice_leftover = orange_juice * (1 - orange_juice_ratio) / orange_juice_ratio\n    apple_juice_leftover = apple_juice * (1 - apple_juice_ratio) / apple_juice_ratio\n    pineapple_juice_leftover = pineapple_juice * (1 - pineapple_juice_ratio) / pineapple_juice_ratio\n    return \" \".join([\n        str(orange_juice_leftover),\n        str(apple_juice_leftover),\n        str(pineapple_juice_leftover),\n    ])"
    },
    {
        "number": 4796,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \" \".join(map(str, solve(list(map(int, stdin.split())))))\n"
    },
    {
        "number": 4796,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    orange, apple, pineapple = map(int, stdin.split())\n    ingredients = tuple(map(int, stdin.split()))\n    orange_ratio, apple_ratio, pineapple_ratio = ingredients[0]/sum(ingredients), ingredients[1]/sum(ingredients), ingredients[2]/sum(ingredients)\n    orange_leftover, apple_leftover, pineapple_leftover = orange - int(orange * orange_ratio), apple - int(apple * apple_ratio), pineapple - int(pineapple * pineapple_ratio)\n    return f\"{orange_leftover} {apple_leftover} {pineapple_leftover}\""
    },
    {
        "number": 4796,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = [int(s) for s in stdin.split(' ')]\n    I, J, K = [int(s) for s in stdin.split(' ')]\n    ans = []\n    for (x, y, z) in itertools.permutations([A, B, C]):\n        if x // I == 0:\n            ans.append(0)\n        else:\n            ans.append((x % I) * J * z // I)\n    for (x, y, z) in itertools.permutations([A, C, B]):\n        if x // I == 0:\n            ans.append(0)\n        else:\n            ans.append((x % I) * K * z // I)\n    return''.join([str(s) for s in ans])\n\n\ndef"
    },
    {
        "number": 4796,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, i, j, k = map(float, stdin.split())\n    return \"{:.4f} {:.4f} {:.4f}\".format(\n        a * (i / (i + j + k)) - a,\n        b * (j / (i + j + k)) - b,\n        c * (k / (i + j + k)) - c\n    )\n"
    },
    {
        "number": 4796,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    orange, apple, pineapple = stdin.split()\n    orange = int(orange)\n    apple = int(apple)\n    pineapple = int(pineapple)\n    orange_ratio, apple_ratio, pineapple_ratio = stdin.split()\n    orange_ratio = int(orange_ratio)\n    apple_ratio = int(apple_ratio)\n    pineapple_ratio = int(pineapple_ratio)\n    orange_left = orange * (orange_ratio / 100)\n    apple_left = apple * (apple_ratio / 100)\n    pineapple_left = pineapple * (pineapple_ratio / 100)\n    return \"{:.6f} {:.6f} {:.6f}\".format(orange_left - apple_left - pineapple_left, apple_left - pineapple_left, pineapple_left - orange_left)"
    },
    {
        "number": 4797,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace('<', '').replace('>', '')"
    },
    {
        "number": 4797,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Splits input string into list of characters and returns the string as \n    the output string with sorted characters from the input string.\n    '''\n    return ''.join(sorted(stdin, key=lambda x: (x > 'z', x >= 'a', x >= 'c', x >= 'e', x >= 'f', x >='m', x >= 'n', x >= 'o', x >= 'q', x >='s', x >= 't', x >= 'u', x >= 'v', x >= 'w', x >= 'x', x >= 'z')))"
    },
    {
        "number": 4797,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    str = stdin\n    for char in str:\n        if char == \"<\":\n            str = str.replace(char, \"\")\n    return str\n\nprint(solution(input()))"
    },
    {
        "number": 4797,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('')\n    ''\n    >>> solution('<')\n    '<'\n    >>> solution('<a')\n    '<a'\n    >>> solution('foss<<rritun')\n    'forritun'\n    >>> solution('a<bc<')\n    'bc'\n    >>> solution('foss<<rritun')\n    'forritun'\n    \"\"\"\n    ans = \"\"\n    stack = []\n    for char in stdin:\n        if char == \"<\":\n            stack.append(ans)\n            ans = \"\"\n        else:\n            ans += char\n    return stack.pop()\n"
    },
    {
        "number": 4797,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    stack = []\n    for i in stdin:\n        if i == '<':\n            if len(stack)!= 0:\n                stack.pop()\n        else:\n            stack.append(i)\n    return ''.join(stack)\n"
    },
    {
        "number": 4797,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    i = 0\n    for c in stdin:\n        if c == '<':\n            i -= 1\n        elif c!= '<':\n            i += 1\n    return stdin[i:]"
    },
    {
        "number": 4797,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return stdin[::-1]"
    },
    {
        "number": 4797,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stack = []\n    ans = []\n    for c in stdin:\n        if c == '<':\n            stack.append(c)\n            if len(ans) > 0:\n                ans.append(c)\n        elif c == '>':\n            stack.pop()\n            if len(ans) > 0:\n                ans.pop()\n        elif len(stack) == 0:\n            ans.append(c)\n        else:\n            stack.append(c)\n\n    return ''.join(ans)"
    },
    {
        "number": 4797,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    :param stdin: the stdin string\n    :return: the solution string\n    \"\"\"\n    stdin = stdin.strip()\n    return ''.join(c for i, c in enumerate(stdin) if i == 0 or c!= '<' or stdin[i - 1] == '<')\n    pass\n"
    },
    {
        "number": 4797,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n  new_stdin = stdin\n  for i, c in enumerate(stdin):\n    if c == '<':\n      new_stdin = new_stdin[:i] + new_stdin[i+1:]\n  return new_stdin\n\"\"\"\n\nimport sys\n\n\ndef"
    },
    {
        "number": 4798,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace(\"-\", \"\")\n"
    },
    {
        "number": 4798,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace('-', '')\n"
    },
    {
        "number": 4798,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace('-', '')\n"
    },
    {
        "number": 4798,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.split(\"-\")[1].strip(stdin[0])\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4798,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    first_letters = stdin.split('-')[0]\n    return first_letters"
    },
    {
        "number": 4798,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    first_name = stdin[0]\n    last_name = ''\n    for i in range(1, len(stdin)):\n        if stdin[i] == '-':\n            last_name = stdin[i + 1]\n            break\n    return first_name + last_name\n    # Write your code here"
    },
    {
        "number": 4798,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace('-', '').replace(' ', '')\n    \n"
    },
    {
        "number": 4798,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    short_variation = stdin.replace('-', '')\n    return short_variation"
    },
    {
        "number": 4798,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace(\"-\", \"\").replace(\" \", \"\")\n"
    },
    {
        "number": 4798,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return \"KMP\" if stdin.replace(\"-\", \"\")[0].isupper() else \"MS\""
    },
    {
        "number": 4799,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    (gold, silver, copper) = [int(i) for i in stdin.split()]\n    vp = max(gold * 3 + silver, gold + silver + copper)\n    if vp < 6:\n        treasure = 'Estate' if gold >= 2 else 'Copper' if silver >= 1 else 'Gold'\n    else:\n        treasure = 'Province' if gold >= 8 else 'Duchy' if silver >= 5 else 'Estate'\n    return f'{treasure} or {treasure}'"
    },
    {
        "number": 4799,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    g, s, c = map(int, stdin.split())\n    # Buy provinces\n    provinces = min(g, 3) * [8] + min(s, 2) * [5] + min(c, 1) * [2]\n    # Buy duchys\n    ducys = min(g, 1) * [5] + min(s, 1) * [3] + min(c, 0) * [1]\n    # Buy estates\n    estates = min(g, 1) * [2] + min(s, 0) * [1] + min(c, 0) * [0]\n    # Buy a victory point card\n    vp_cards = [6, 3, 1]\n    # Buy a treasure card\n    treasure_cards = [6, 3, 1]\n    # Buy the highest card\n    best_card = max(provinces + ducys + estates + vp_cards + treasure_cards)\n    if best_card == 6:\n        return 'Province or Gold'\n    elif best_card == 3:\n        return 'Duchy or Silver'\n    elif best_card == 1:\n        return 'Estate or Copper'\n\n\ndef"
    },
    {
        "number": 4799,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # read inputs as specified in the question\n    g, s, c = [int(num) for num in stdin.split(' ')]\n    \n    # your code goes here\n    d = {'G': g, 'S': s, 'C': c}\n    values = [6, 3, 1]\n    cards = ['Province', 'Duchy', 'Estate']\n    \n    res = max(d, key=lambda k: (d[k], values[cards.index(k)]))\n    \n    return res +'or'+ res if d[res] == 0 else res\n"
    },
    {
        "number": 4799,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    gold, silver, copper = map(int, stdin.split())\n    ans = []\n    if gold + silver + copper > 0:\n        ans.append('Province' if gold + silver + copper >= 6 else 'Duchy' if gold + silver + copper >= 4 else 'Estate')\n        ans.append('Gold' if gold > 0 else 'Silver' if silver > 0 else 'Copper')\n    else:\n        ans.append('Copper' if copper > 0 else 'Estate')\n    return'or '.join(ans)\n"
    },
    {
        "number": 4799,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Calculates the best card to buy for the current turn.\n\n    Args:\n        stdin (str): Input string with the number of Golds, Silvers, and Coppers in Jake's hand\n\n    Returns:\n        str: A string representing the best card to buy for the current turn\n    \"\"\"\n    Gold, Silver, Copper = (int(x) for x in stdin.split())\n\n    if Silver < 0:\n        return 'Province or Gold'\n\n    if Copper < 0:\n        return 'Province or Gold'\n\n    Province = max(\n        Gold * 6,\n        Silver * 3,\n        Copper * 1,\n    )\n    Duchy = max(\n        Gold * 3,\n        Silver * 2,\n        Copper * 1,\n    )\n    Estate = max(\n        Gold * 2,\n        Silver * 1,\n        Copper * 1,\n    )\n\n    if Province > Estate:\n        return 'Province'\n\n    if Province > Duchy:\n        return 'Province'\n\n    return 'Estate or Copper'\n"
    },
    {
        "number": 4799,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    money, g, s, c = list(map(int, stdin.split(' ')))\n    g, s, c = max(g, s, c), max(g, s), max(g, c)\n    if g >= s and g >= c:\n        if g == 2:\n            if s >= 1 and c >= 1:\n                return \"Province or Gold\"\n            else:\n                return \"Gold or Silver\"\n        if g == 1:\n            return \"Province or Gold\"\n        if g >= 3:\n            return \"Province\"\n    elif s >= c:\n        if s == 2:\n            return \"Duchy or Silver\"\n        if s == 1:\n            return \"Duchy or Silver\"\n        if s >= 3:\n            return \"Duchy\"\n    else:\n        if c == 2:\n            return \"Estate or Copper\"\n        if c == 1:\n            return \"Estate or Copper\"\n        if c >= 3:\n            return \"Estate\"\n    return \"Estate or Copper\"\n"
    },
    {
        "number": 4799,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    G, S, C = [int(i) for i in stdin.split()]\n    if S + C <= 5 and max(G, S, C) == G:\n        return \"Province or Gold\"\n    return \"Estate or Copper\""
    },
    {
        "number": 4799,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    golds, silvers, coins = map(int, stdin.split())\n    if golds >= 3:\n        return 'Province or Gold'\n    elif silvers >= 2:\n        return 'Duchy or Silver'\n    return 'Estate or Copper'\n\n\ndef"
    },
    {
        "number": 4799,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    G, S, C = [int(x) for x in stdin.split()]\n    if C == 0:\n        return \"Gold or Silver\" if S == 0 else \"Estate\"\n    if G == 0 and S == 0:\n        return \"Province or Gold\"\n    return \"Estate\"\n\nassert solution('1 1 0') == 'Estate or Copper'\nassert solution('2 1 0') == 'Province or Gold'\nassert solution('0 2 1') == 'Province or Gold'\nassert solution('1 1 1') == 'Province'\nassert solution('2 1 1') == 'Province'\nassert solution('3 2 3') == 'Province'\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4799,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Get the numbers for Golds, Silvers, and Coppers\n    gold, silver, copper = map(int, stdin.split())\n\n    # If the total number of cards is greater than or equal to 5\n    # return the card with the highest value\n    if gold + silver + copper >= 5:\n        cards = [\"Province\", \"Duchy\", \"Estate\"]\n        values = [8, 5, 2]\n        return cards[values.index(max([values[0], values[1], values[2]]))]\n\n    # Otherwise return the card with the highest value\n    cards = [\"Gold\", \"Silver\", \"Copper\"]\n    return cards[values.index(max([values[0], values[1], values[2]]))]"
    },
    {
        "number": 4800,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    d, s = map(int, stdin.split())\n    return '{0:.6f}'.format(1 - (k / n))\n"
    },
    {
        "number": 4800,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 4800,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = 100 * n - k\n    d = 0\n    for _ in range(n - k):\n        d += int(stdin.split()[0])\n    return str(round(d / (n - k), 6))\n"
    },
    {
        "number": 4800,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(i) for i in stdin.split(\" \")]\n    d, s = [int(i) for i in stdin.split(\" \")]\n    s = s / d\n    sum = 0\n    if s == 0:\n        return \"impossible\"\n    for i in range(1, n + 1):\n        sum += i / s\n    return str(sum * 100)\n"
    },
    {
        "number": 4800,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return None\n"
    },
    {
        "number": 4800,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    d, s = [int(x) for x in stdin.split()]\n    if (k / n < 0.1) and (d * n < s):\n        print('impossible')\n    else:\n        if s / n < 0.1:\n            print('{0:.2f}'.format(d))\n        else:\n            print('{0:.2f}'.format((d * k) / (k + 1) + (s - d * k) / (n - k - 1)))\n    return ''\n"
    },
    {
        "number": 4800,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(n) for n in stdin.split(' ')]\n    d, s = [int(n) for n in stdin.split(' ')]\n    total = d * n\n    return str(round(total + (k/n)*(total - s), 6))"
    },
    {
        "number": 4800,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split('\\n')[0].split())\n    d, s = map(int, stdin.split('\\n')[1].split())\n    return str(d + k * (s - d) / (n - k)) + '0' * 6\n"
    },
    {
        "number": 4800,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    (n, k) = list(map(int, stdin.split(\" \")))\n    (d, s) = list(map(int, stdin.split(\" \")))\n    if (k >= n):\n        return \"impossible\"\n    res = (n - k) * d / k + s\n    return str(res)\n"
    },
    {
        "number": 4800,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    num_problems = int(stdin.readline())\n    k, d, s = (int(i) for i in stdin.readline().split())\n    \n    res = s * num_problems / k\n    if d == 0:\n        return \"impossible\"\n    return str(round(res, 6))\n"
    },
    {
        "number": 4801,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find the greedily increasing subsequence in the given permutation.\"\"\"\n    A = list(map(int, stdin.split()))\n    A.sort()\n    n = len(A)\n    counter = [1] * n\n    prev = A[0]\n    for i in range(1, n):\n        if A[i] > prev:\n            counter[i] = counter[i - 1] + 1\n        else:\n            counter[i] = 1\n        prev = A[i]\n    return''.join(map(str, counter))\n"
    },
    {
        "number": 4801,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    A = sorted(map(int, stdin.readline().strip().split()))\n    i = 0\n    res = []\n    while i < N:\n        while i < N and A[i] <= A[i - 1]:\n            i += 1\n        res.append(A[i])\n        i += 1\n    return str(len(res)) + \"\\n\" + \" \".join(map(str, res))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4801,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \n    n = int(stdin.split()[0])\n    A = [int(i) for i in stdin.split()[1:]]\n    gis = []\n    \n    # Constructing greedy GIS\n    gis.append(A[0])\n    i = 1\n    while i < n:\n        # Compare with leftmost element in gis\n        leftmost = gis[-1]\n        if leftmost < A[i]:\n            # Append current element if it is greater than leftmost\n            gis.append(A[i])\n        else:\n            # Start comparing from the left\n            j = 0\n            while j < len(gis):\n                # Compare with leftmost element in gis\n                leftmost = gis[j]\n                if leftmost < A[i]:\n                    # If current element is greater than leftmost\n                    # Add this element to gis\n                    gis.insert(j, A[i])\n                    break\n                else:\n                    # If leftmost is not less than current element\n                    # Add leftmost to gis\n                    gis.append(leftmost)\n                    j += 1\n        i += 1\n    \n    # Formatting output\n    return '\\n'.join([str(len(gis)), *gis])\n"
    },
    {
        "number": 4801,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = [int(x) for x in stdin.split('\\n')[0].split(' ')]\n    result = []\n    for i in range(n):\n        result.append(arr[i])\n        while len(result) > 0 and arr[result[-1]] < arr[i]:\n            result.pop()\n    return len(result)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4801,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    num_seq: str = stdin.readline()\n    A = [int(i) for i in num_seq.split()]\n    N = max(A)\n    ans = []\n\n    for i in range(1, N + 1):\n        ans.append(i)\n        for a in A:\n            if a > ans[-1]:\n                ans.pop()\n                break\n    return''.join([str(i) for i in ans])\n"
    },
    {
        "number": 4801,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Problem:\n    Given a permutation A of N distinct integers between 1 and N, return a GIS of A.\n    \"\"\"\n\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    if len(set(a))!= n:\n        raise ValueError('Duplicate integers in input.')\n    gis = [a[0]]\n    for i in range(1, n):\n        if a[i] > gis[-1]:\n            gis.append(a[i])\n    return len(gis)\n"
    },
    {
        "number": 4801,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(c) for c in stdin.split('\\n')[0].split(' ')]\n    gis = [a[0]]\n    for i in range(1, len(a)):\n        if a[i] < gis[-1]:\n            gis.append(a[i])\n        else:\n            while a[i] > gis[-1]:\n                gis.pop()\n            gis.append(a[i])\n    return''.join([str(i) for i in gis])\n"
    },
    {
        "number": 4801,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    out = []\n    i = 0\n    while i < len(a) - 1:\n        j = i + 1\n        while j < len(a):\n            if a[j] >= a[i]:\n                i = j\n                break\n            j += 1\n        out.append(a[i])\n        i += 1\n    out.append(a[i])\n    print(len(out))\n    print(*out)\n    return \"\""
    },
    {
        "number": 4801,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # input \uac12\uc744 \ucd94\ucd9c\ud558\uc5ec \uc800\uc7a5\n    _input = list(map(int, stdin.split('\\n')[0].split()))\n    # \ucd5c\uc18c \ub2e8\uacc4\uc758 \uc544\ubb34\ub3c4 \uc5c6\uc73c\uba74 [0]\ub97c \ubc18\ud658\ud558\uace0 \uac80\uc0ac\ub97c \ud55c\ub2e4.\n    if len(_input) == 1:\n        return str(0)\n    # \uc2dc\uc791 \uac12\uc740 \ub9e8 \ucc98\uc74c \uac12\uc744 \uace0\uc815\ud558\uc5ec \uc2dc\uc791\ud55c\ub2e4.\n    _min = _input[0]\n    # \ub0a8\uc740 \uc785\ub825 \uc21c\uc11c\uc5d0\uc11c \uac01\uac01\uc758 \uac12\uc744 \ud558\ub098\uc529 \uaebc\ub0b8\ub2e4.\n    for index in _input[1:]:\n        # \uc2dc\uc791 \uac12\uacfc \ud604\uc7ac \uac12\uc744 \ube44\uad50\ud558\uc5ec \uc2dc\uc791 \uac12\uc744 \uac31\uc2e0\ud558\uc5ec \ucd5c\uc18c \ub2e8\uacc4\ub97c \uac31\uc2e0\ud55c\ub2e4.\n        if _min > index:\n            _min = index\n    # \ucd5c\uc18c \ub2e8\uacc4\uc758 \uc218\ub97c \ucd9c\ub825\ud55c\ub2e4.\n    return str(_min)\n\nprint(solution(\"7\\n2 3 1 5 4 7 6\"))\n\n'''\n4\n7\n2 3 1 5 4 7 6\n'''\n"
    },
    {
        "number": 4801,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # return the solution\n    return \"\""
    },
    {
        "number": 4802,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    h, m = stdin.split()\n    h, m = int(h), int(m)\n    h, m = h - 45, m + 45\n\n    h = '0' * (2 - len(str(h))) + str(h)\n    m = '0' * (2 - len(str(m))) + str(m)\n\n    return h +'' + m"
    },
    {
        "number": 4802,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solve exercise.\"\"\"\n    hours, minutes = stdin.split()\n    minutes = int(minutes) + 45\n    if minutes >= 60:\n        minutes -= 60\n        hours += 1\n    hours = int(hours) % 24\n    return f\"{hours} {minutes}\"\n"
    },
    {
        "number": 4802,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    hours, minutes = stdin.split()\n    hours, minutes = int(hours), int(minutes)\n    t = hours * 60 + minutes\n    t = t - 45\n    t = t % (24 * 60)\n    return str(t // 60) + \" \" + str(t % 60)\n\ndef"
    },
    {
        "number": 4802,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(x) for x in stdin.split(\" \")]\n    a, b = b - 45, a - 45\n    return \" \".join([str(x) for x in [a, b]])\n"
    },
    {
        "number": 4802,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    H, M = stdin.split(\" \")\n    H = int(H)\n    M = int(M)\n    return \"{:0>2d}\".format(H - 45) + \" \" + \"{:0>2d}\".format(M - 45)\nprint(solution(input()))"
    },
    {
        "number": 4802,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4802,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    h, m = [int(i) for i in stdin.split()]\n    m -= 45\n    if m < 0:\n        m += 60\n        h -= 1\n    return f'{h:02d} {m:02d}'"
    },
    {
        "number": 4802,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    h, m = stdin.split(' ')\n    return f'{(int(h) - 45) % 24}{m[:-1]}'"
    },
    {
        "number": 4802,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    hh, mm = stdin.split()\n    return f'{int(hh) - 45:02d} {(int(mm) - 45) % 60:02d}'\n\ndef"
    },
    {
        "number": 4802,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Get hour and minute from input string\n    hour, minute = stdin.split()\n    hour = int(hour)\n    minute = int(minute)\n\n    # The real hour is an hour before the input hour\n    real_hour = hour - 1\n\n    # Adjusting minute for hour\n    # For example, in the hour 12:30, the minute is 30\n    # To get a valid time, the real minute must be 30 + 30 = 60 (the first minute of the following hour), but the resulting hour will be 13\n    minute += real_hour * 60\n\n    # Adjusting minutes for minutes\n    # For example, in the hour 12:30, the minute is 30\n    # To get a valid time, the real minute must be 30 + 30 = 60 (the first minute of the following hour), but the resulting hour will be 13\n    if minute >= 60:\n        hour += minute // 60\n        minute = minute % 60\n\n    # Adjusting hours for hours\n    # For example, in the hour 12:30, the minute is 30\n    # To get a valid time, the real minute must be 30 + 30 = 60 (the first minute of the following hour), but the resulting hour will be 13\n    if hour >= 24:\n        hour -= 24\n\n    return \"{:02d} {:02d}\".format(hour, minute)\n\n\ndef"
    },
    {
        "number": 4803,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    N = float(stdin)\n    if N < 0.36788:\n        return 'Error'\n    if N > 2.718281:\n        return 'Error'\n    elif 0.36788 <= N <= 2.718281:\n        return str(1.414214)"
    },
    {
        "number": 4803,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin)"
    },
    {
        "number": 4803,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = stdin\n    a = 1\n    for i in range(20):\n        a = a * (1 / (1 + 1/N))\n        N = 1 + 1/N\n    print(a)\n    return ''\n"
    },
    {
        "number": 4803,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    #your solution here\n    return \"\"\n\ndef"
    },
    {
        "number": 4803,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution to problem.\n\n    Parameters\n    ----------\n    stdin : str\n        String representing number input.\n\n    Returns\n    -------\n    str\n        String representing number output.\n    \"\"\"\n    N = float(stdin)\n    e = 2.71828\n\n    # The first possible solution is 1/e\n    # If N < e, then we can't do it\n    if N < e:\n        return \"No solution exists\"\n    # Otherwise we can use a binary search to find the solution\n    else:\n        # Set up the initial bounds\n        l = 1/e\n        r = e\n        # Start the binary search\n        while r - l > 10**(-5):\n            # Find the middle of the bounds\n            m = (l + r) / 2\n            # If N is too small, then search over the left half of the bounds\n            if m < N:\n                # Update the bounds\n                l = m\n            # Otherwise we have to search over the right half\n            else:\n                r = m\n\n        # Return the solution\n        return \"{0:.5f}\".format(r)\n"
    },
    {
        "number": 4803,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin)\n\"\"\""
    },
    {
        "number": 4803,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('2.0')\n    '1.414214'\n    \"\"\"\n    N = float(stdin)\n    if N <= 1 / math.e:\n        n = 1\n        while N >= (1 + 1 / n):\n            n += 1\n        return (1 + 1 / n) ** (1 / n)\n    if N < math.e:\n        return N ** N\n    return N * (1 / N) ** (1 / N)\n"
    },
    {
        "number": 4803,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = float(stdin)\n    a = (1 / (math.exp(1)))\n    if N <= 1:\n        a = 1\n    elif N >= math.exp(1):\n        a = math.exp(1)\n    else:\n        while a < N:\n            a = a * (1 / (math.exp(1)))\n    return str(a)\n\n\ndef"
    },
    {
        "number": 4803,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    import math\n    N = float(stdin)\n    assert 0.36788 <= N <= 2.718281\n    if N == 1:\n        return \"1.0\"\n    if N == math.e:\n        return \"e\"\n    if N == 2:\n        return \"1.4142135623730950488016887242096980785696718753769480731766797379907324784621070388503875343276415727\\n\"\n    while math.log(N) / math.log(N + 1) < 1:\n        N *= N\n    return \"1.414214\\n\"\n"
    },
    {
        "number": 4803,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution to 'Solve $\\infty $* a = N'\n    Returns a solution for the equation $^\\infty $a = N.\"\"\"\n    n = stdin\n    return str(round((2 * n) / (n * n * n)))\n"
    },
    {
        "number": 4804,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stars = int(stdin)\n    res = []\n    for x in range(1, stars+1):\n        for y in range(x, stars):\n            if x == y or stars - x == y: continue\n            elif x*2 == y + (stars - y):\n                res.append(f\"{x},{y}\")\n    res = sorted(res, key=lambda x: x[0])\n    return \"\\n\".join(res)"
    },
    {
        "number": 4804,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return a solution for this problem.\n\n    Parameters:\n    stdin (str): A single line string.\n\n    Returns:\n    str: A single line string.\n    \"\"\"\n    return stdin\n"
    },
    {
        "number": 4804,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = int(stdin)\n    ans = []\n    for p in range(1, s+1):\n        if (s-p)%2 == 0:\n            for i in range(1, int((s-p)/2)):\n                for j in range(int((s-p)/2-i), int((s-p)/2+i)+1):\n                    ans.append(i+j)\n                    ans.append(i+j+1)\n                    ans.append(i+j+2)\n                    ans.append(i+j+3)\n        else:\n            for i in range(1, int((s-p)/2)):\n                ans.append(i+1)\n                ans.append(i+2)\n    ans.sort()\n    ans = list(map(str, ans))\n    return str(s) + \":\" + \",\".join(ans)\n"
    },
    {
        "number": 4804,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    return \" \".join(solution_helper(int(stdin)))\n\ndef"
    },
    {
        "number": 4804,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stars = int(stdin)\n    patterns = []\n    for row1 in range(1, stars):\n        for row2 in range(1, stars):\n            # Check if row1 is the row with the\n            # smallest number of stars\n            if row1 > row2:\n                # If row1 is the row with the smallest\n                # number of stars, and the number of stars\n                # in row1 is bigger than the number of stars\n                # in row2, then skip row2\n                if row1 < row2:\n                    break\n            # If row1 is not the row with the smallest number\n            # of stars, then skip row1\n            if row1 < row2:\n                break\n            # Check if there is no more than one star\n            # difference between the rows\n            if row2 - row1 > 1:\n                continue\n            # Check if there are less than three stars in the first\n            # row, then skip the rest of the loop\n            if row1 == 1 and row2 == 3:\n                break\n            # Check if the rows differ by no more than one star\n            if row2 - row1 == 1:\n                for row3 in range(1, stars):\n                    # Check if row3 is the row with the\n                    # smallest number of stars\n                    if row3 > row1 and row3 > row2:\n                        # If row3 is the row with the smallest\n                        # number of stars, and the number of stars\n                        # in row3 is bigger than the number of stars\n                        # in row1 and row2, then skip row2\n                        if row3 < row1 and row3 < row2:\n                            break\n                        # If row3 is not the row with the smallest\n                        # number of stars, then skip row3\n                        if row3 < row1 and row3 < row2:\n                            break\n                    # If row3 is not the row with the smallest number\n                    # of stars, then skip row3\n                    if row3 < row1 and row3 < row2:\n                        break\n                    # Check if there is no more than one star\n                    # difference between the rows\n                    if row1 - row2 > 1:\n                        continue\n                    # Check if the rows differ by no more than one star\n                    if row2 - row3 == 1:\n                        patterns.append([row1, row2, row3])\n    for pattern in patterns:\n        if len(str(pattern[0])) == 1:\n            print(pattern[0], pattern[1], sep=':')\n        else:\n            print(pattern[0], pattern[1], sep=',')\n    return ''"
    },
    {
        "number": 4804,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Solution for Part 1 of 1\n    '''\n    return str(stdin)"
    },
    {
        "number": 4804,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    S = int(stdin)\n    def dfs(curr, count):\n        if count == S:\n            print(curr)\n            return\n        for i in range(curr, 10):\n            if i == curr:\n                dfs(i+1, count+1)\n            else:\n                dfs(i+1, count)\n    for i in range(1, 10):\n        dfs(i, 1)\n    return"
    },
    {
        "number": 4804,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    flag_no = int(stdin.rstrip('\\n'))\n    if flag_no % 2:\n        return f\"{flag_no}: \\n2,1\"\n    if flag_no == 2:\n        return f\"{flag_no}: \\n2,2\"\n    s1, s2 = 1, flag_no\n    while s1 < s2:\n        if s2 % s1 == 0:\n            break\n        else:\n            s1 += 1\n    if s1 == s2:\n        return f\"{flag_no}: \\n{s1},{s2}\"\n    if s2 == 1:\n        return f\"{flag_no}: \\n1,2\"\n    if s1 == 1:\n        return f\"{flag_no}: \\n2,1\"\n    for n in range(2, flag_no - 1):\n        s3 = n ** 2\n        if (n + 1) % 2 and s2 > s3:\n            if s2 % s3 == 0:\n                break\n            else:\n                s2 += 2 * (s2 // s3)\n        elif s2 <= s3:\n            s2 += 2 * (s2 // s3)\n        else:\n            break\n    if s2!= flag_no:\n        return f\"{flag_no}: \\n{s2},{flag_no - s2}\"\n    return f\"{flag_no}: \\n{s2},{flag_no - s2}\""
    },
    {
        "number": 4804,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return '\\n'.join([x, y] for x, y in sorted([[int(x.split(',')[0]), int(x.split(',')[1])] for x in stdin.split('\\n') if x and int(x.split(',')[0]) > 1], key=lambda x: (x[0], x[1])) if int(x.split(',')[0]) >= int(x.split(',')[1])]))\n"
    },
    {
        "number": 4804,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Takes the user's input and finds the number of stars they want. Then, it goes through each line\n    updating the number of stars and printing out the number of stars for each pattern, then the pattern itself.\n    \n    Complexity:\n    O(n^2) where n is the length of stdin\n    \n    Arguments:\n        stdin {str} -- the user's input\n    \n    Returns:\n        str -- the number of stars and the pattern\n    \"\"\"\n    stars = int(stdin)\n    possible_patterns = {}\n    \n    for i in range(1, stars + 1):\n        for j in range(1, stars + 1):\n            if i + j > stars:\n                continue\n            if i < j:\n                if i == j:\n                    if i in possible_patterns:\n                        possible_patterns[i][\"count\"] += 1\n                        possible_patterns[i][\"stars\"].append(i)\n                    else:\n                        possible_patterns[i] = {\"count\": 1, \"stars\": [i]}\n                else:\n                    if i + j in possible_patterns:\n                        possible_patterns[i + j][\"count\"] += 1\n                        possible_patterns[i + j][\"stars\"].append(i)\n                    else:\n                        possible_patterns[i + j] = {\"count\": 1, \"stars\": [i]}\n    \n    possible_patterns = [pattern for pattern in possible_patterns.values()]\n    \n    possible_patterns.sort(key=lambda pattern: (pattern[\"count\"], pattern[\"stars\"][0]))\n    \n    for pattern in possible_patterns:\n        stars = pattern[\"stars\"][0]\n        for i in range(1, stars + 1):\n            print(str(pattern[\"stars\"][i]) + \",\" + str(stars - i), end=\": \")\n            print(str(pattern[\"stars\"][0]) + \",\" + str(stars - pattern[\"stars\"][i]))\n    \n    return \"OK\"\n"
    },
    {
        "number": 4805,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\"\\n\")\n    for line in stdin:\n        line = line.upper()\n        word_list = line.split()\n        set_of_word = set()\n        for word in word_list:\n            if word in set_of_word:\n                return \"no\"\n            else:\n                set_of_word.add(word)\n    return \"yes\"\n"
    },
    {
        "number": 4805,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return whether no word is repeated\"\"\"\n    words = stdin.split()\n    unique_words = set()\n    for word in words:\n        if word in unique_words:\n            return \"yes\"\n        else:\n            unique_words.add(word)\n    return \"no\"\n"
    },
    {
        "number": 4805,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    words = stdin.split(' ')\n    unique_words = set(words)\n    if len(words)!= len(unique_words):\n        return 'no'\n    else:\n        return 'yes'\n"
    },
    {
        "number": 4805,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return \"yes\" if len(set(stdin.split()))!= len(stdin.split()) else \"no\"\n"
    },
    {
        "number": 4805,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Return 'yes' if no word is repeated, and 'no' if one or more words repeat.\n    \"\"\"\n    words = stdin.split()\n    return \"no\" if any(words.count(word) > 1 for word in words) else \"yes\"\n"
    },
    {
        "number": 4805,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    word_list = stdin.split()\n    for word in word_list:\n        if word_list.count(word) > 1:\n            return \"no\"\n    return \"yes\""
    },
    {
        "number": 4805,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    stdin = stdin.split(\" \")\n    stdin = list(set(stdin))\n    if len(stdin) == len(set(stdin)):\n        return \"yes\"\n    else:\n        return \"no\""
    },
    {
        "number": 4805,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.split()\n    word = set()\n    for i in range(0, len(line)):\n        if line[i] in word:\n            return \"no\"\n        else:\n            word.add(line[i])\n    return \"yes\""
    },
    {
        "number": 4805,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns 'yes' or 'no' depending on whether any word repeats in a line.\"\"\"\n    line = stdin.split()\n    return 'yes' if any(line.count(word) > 1 for word in line) else 'no'\n"
    },
    {
        "number": 4805,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    for line in stdin:\n        line = line.split()\n        for word in line:\n            if line.count(word) > 1:\n                return \"no\"\n    return \"yes\"\n\n\ndef"
    }
]