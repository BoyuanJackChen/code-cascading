[
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"O(V+E) / O(V)\"\"\"\n    n, edges = int(stdin.readline()), set()\n    for _ in range(n - 1):\n        a, b = map(int, stdin.readline().split())\n        edges.add((a, b))\n        edges.add((b, a))\n    edges = list(edges)\n    edges.sort(key=lambda x: x[0])\n    dp = [1 for _ in range(n)]\n    for i, (a, b) in enumerate(edges):\n        for j in range(i):\n            if edges[j][1]!= a:\n                dp[a] = max(dp[a], dp[edges[j][1]] + dp[edges[j][0]])\n    print(max(dp))\n    print(*edges[dp.index(max(dp))])\n"
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    :type stdin: str\n    :rtype: str\n    \"\"\"\n    n = int(stdin.split(\"\\n\")[0])\n    adj = [list(map(int, line.split())) for line in stdin.split(\"\\n\")[1:]]\n    s = {node for line in adj for node in line}\n    vertices = list(range(1, n + 1))\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            if len(set(adj[i - 1]) & set(adj[j - 1])) > 0:\n                vertices.remove(j)\n                vertices.remove(i)\n    return \" \".join(map(str, max(set(vertices), key=vertices.count)))\n    pass\n\n\ndef"
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \n    def dfs(start, path):\n        if len(path) == 3:\n            paths.append(path[:])\n            return\n        for i in graph[start]:\n            if i not in path:\n                path.append(i)\n                dfs(i, path)\n                path.pop()\n    \n    n = int(stdin.readline())\n    graph = [[] for _ in range(n)]\n    for i in range(n - 1):\n        a, b = list(map(int, stdin.readline().split()))\n        graph[a - 1].append(b - 1)\n        graph[b - 1].append(a - 1)\n    \n    paths = []\n    for i in range(n):\n        dfs(i, [i])\n    \n    paths.sort(key=len, reverse=True)\n    \n    max_len = len(paths[0])\n    max_ind = 0\n    for i in range(1, len(paths)):\n        if len(paths[i]) == max_len:\n            if max_ind!= 0 and paths[i][0] < paths[max_ind][0]:\n                continue\n            max_ind = i\n    \n    return''.join(map(str, paths[max_ind]))\n\n\nsolution(stdin=input)\n"
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds maximum number of edges which belong to at least one of the simple paths.\"\"\"\n    n = int(stdin.readline())\n    edges = list(map(int, stdin.readlines()))\n    matrix = [[0] * n for _ in range(n)]\n    for i in range(0, len(edges), 2):\n        matrix[edges[i] - 1][edges[i + 1] - 1] = 1\n    res = 0\n    for u in range(n):\n        for v in range(n):\n            if matrix[u][v] == 1:\n                res = max(res, dfs(matrix, u, v) - 1)\n    return str(res)\n\n\ndef"
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return 0\n"
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    g = [set() for _ in range(n)]\n    for line in stdin.splitlines()[1:]:\n        a, b = map(int, line.split())\n        g[a - 1].add(b)\n        g[b - 1].add(a)\n    res = 0\n    for i in range(n):\n        for j in range(n):\n            for k in range(n):\n                if len(g[i].union(g[j], g[k])) > res:\n                    res = len(g[i].union(g[j], g[k]))\n                    a, b, c = i + 1, j + 1, k + 1\n    return f\"{res}\\n{a} {b} {c}\"\n"
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n\n    return None\n"
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    inputs = []\n    for line in stdin.split('\\n'):\n        inputs.append([int(i) for i in line.split()])\n    inputs.sort()\n    first, second, third = 0, 1, 2\n    current = -1\n    count = 0\n    n = inputs[0][0]\n    for i in range(1, len(inputs)):\n        if inputs[i][1]!= current:\n            count += 1\n            current = inputs[i][1]\n        if count == 2:\n            count = 0\n            if first < inputs[i][0]:\n                third = second\n                second = first\n                first = inputs[i][0]\n            elif second < inputs[i][0]:\n                third = second\n                second = inputs[i][0]\n            elif third < inputs[i][0]:\n                third = inputs[i][0]\n    print(third, second, first)\n    return''.join(str(i) for i in [first, second, third])\n\n\nprint(solution('''\n8\n1 2\n2 3\n3 4\n4 5\n4 6\n3 7\n3 8\n'''))\n"
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip('\\n'))\n    x = int(stdin.readline().strip('\\n'))\n    y = int(stdin.readline().strip('\\n'))\n    divisors = list(map(int, stdin.readline().strip('\\n').split(' ')))\n    res = []\n    for i in range(n):\n        if x % divisors[i] == 0 and y % divisors[i] == 0:\n            res.append(divisors[i])\n    res = [x for x in res if x not in res if x!= 1]\n    res =''.join(map(str, res))\n    return res\n"
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    divs = list(map(int, stdin.readline().split()))\n    divs_freq = {x: divs.count(x) for x in divs}\n    divs_set = set(divs)\n    x, y = 0, 0\n    while divs_freq:\n        x_found = False\n        y_found = False\n        for div in divs_set:\n            if div in divs_freq and x_found is False:\n                x_found = True\n                x = div\n            if div in divs_freq and y_found is False:\n                y_found = True\n                y = div\n            if x_found and y_found:\n                break\n        if x_found and y_found:\n            break\n        divs_set.remove(x)\n        divs_set.remove(y)\n        divs_freq.pop(x)\n        divs_freq.pop(y)\n    return x, y\n"
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return stdout\n"
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Checks if two input numbers are the same when they share all divisors\n    '''\n    x = int(stdin[0])\n    y = int(stdin[1])\n    list_of_x = []\n    list_of_y = []\n    for i in range(1, x + 1):\n        if x % i == 0:\n            list_of_x.append(i)\n    for j in range(1, y + 1):\n        if y % j == 0:\n            list_of_y.append(j)\n    divisors_x = list_of_x\n    divisors_y = list_of_y\n    list_of_common = []\n    for i in range(len(list_of_x)):\n        for j in range(len(list_of_y)):\n            if list_of_x[i] == list_of_y[j]:\n                list_of_common.append(list_of_x[i])\n                divisors_x.remove(list_of_x[i])\n                divisors_y.remove(list_of_y[j])\n    return str(list_of_common[0]) +'' + str(list_of_common[1])\n    \n"
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('10\\n10 2 8 1 2 4 1 20 4 5\\n')\n    20 8\n    \"\"\"\n    x, y, *divisors = map(int, stdin.split())\n\n    divs = set()\n    for d in divisors:\n        if d < x:\n            divs.add(d)\n        elif d <= y:\n            divs.add(d)\n            divs.add(d * 2)\n        else:\n            break\n    else:\n        return x, y\n\n    x_candidates = [x]\n    for d in divisors:\n        if d < x:\n            continue\n        if d <= y:\n            x_candidates.append(d)\n        else:\n            break\n    else:\n        return x, y\n\n    y_candidates = [y]\n    for d in divisors:\n        if d <= x:\n            continue\n        if d <= y:\n            y_candidates.append(d)\n        else:\n            break\n    else:\n        return x, y\n\n    x_divs = set(x_candidates)\n    y_divs = set(y_candidates)\n\n    common_divs = x_divs & y_divs\n    if not common_divs:\n        return x, y\n\n    x_divs -= common_divs\n    y_divs -= common_divs\n\n    x_candidates = [x]\n    for d in x_divs:\n        if d <= y:\n            x_candidates.append(d)\n        else:\n            break\n    else:\n        return x, y\n\n    y_candidates = [y]\n    for d in y_divs:\n        if d <= x:\n            y_candidates.append(d)\n        else:\n            break\n    else:\n        return x, y\n\n    y_candidates.sort(reverse=True)\n    while x_candidates and x_candidates[-1] <= y_candidates[-1]:\n        x_candidates.pop()\n\n    while y_candidates and y_candidates[-1] <= x_candidates[-1]:\n        y_candidates.pop()\n\n    assert x_candidates and y_candidates\n    return x_candidates[-1], y_candidates[-1]\n"
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    pass"
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('10\\n10 2 8 1 2 4 1 20 4 5\\n')\n    '20 8'\n    \"\"\"\n    d = stdin.strip().split('\\n')[1:]\n    d = [int(x) for x in d]\n    ans = [0] * (len(d) * 2)\n    for i in range(len(d)):\n        for j in range(len(d)):\n            if d[i] == d[j] and i!= j:\n                ans[i] += d[j]\n                ans[j] += d[i]\n    for i in range(len(d)):\n        if ans[i] > 0:\n            return str(d[i]) +'' + str(ans[i])\n"
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"10\\n10 2 8 1 2 4 1 20 4 5\\n\")\n    20 8\n    \"\"\"\n    a = stdin.split(\"\\n\")\n    n = int(a[0])\n    lst = a[1].split()\n    l = []\n    for i in range(1, n + 1):\n        l.extend([int(i) for i in lst if int(i) == i])\n    l.sort()\n    l2 = [x for x in l if x % 2 == 0]\n    l3 = [x for x in l if x % 2!= 0]\n    l4 = [x for x in l3 if x % 2!= 0]\n    l5 = [x for x in l3 if x % 2 == 0]\n    l6 = []\n    for i in l2:\n        if i in l4 and i in l5:\n            l6.append(i)\n        elif i in l4:\n            l6.append(i)\n            l6.append(i)\n        elif i in l5:\n            l6.append(i)\n            l6.append(i)\n    l6.sort()\n    print(l6[0], l6[1])\n    return \"\"\n"
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"10\\n10 2 8 1 2 4 1 20 4 5\")\n    '20 8'\n    \"\"\"\n    x, y, *d = [int(c) for c in stdin.split('\\n')[0].split()]\n    for _x, _y in permutations(d):\n        _x, _y = abs(_x), abs(_y)\n        if gcd(_x, _y) == 1 and x < _x < y < _y:\n            return '{} {}'.format(_x, _y)\n"
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    l = list(map(int, stdin.readline().split(' ')))\n    l = list(set(l))\n    l.sort()\n    m = {}\n    for i in range(len(l)):\n        m[l[i]] = 1\n    for i in range(len(l)):\n        m[l[i] + l[i]] = 2\n    m = {v: k for k, v in m.items()}\n    res = []\n    for i in range(len(l)):\n        if m[l[i]] == 1:\n            res.append(l[i])\n        else:\n            res.append(l[i] * l[i])\n    return str(res[0]) +'' + str(res[1])"
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4 5 4\\n1 2 4 2 1\\n3 5 1 2 4\\n1 5 7 1 2\\n3 8 7 1 2\\n8 4 7 1 6\")\n    56\n    \"\"\"\n    stdin = stdin.splitlines()\n    matrix = [\n        [int(x) for x in row.split(\" \")]\n        for row in stdin[1:]\n    ]\n    n, m, k = [int(x) for x in stdin[0].split(\" \")]\n    matrix = [\n        [\n            x\n            for _, x in sorted(\n                zip(range(len(row)), row), key=lambda x: x[0]\n            )\n        ]\n        for row in matrix\n    ]\n    sums = [sum(row) for row in matrix]\n    for i, row in enumerate(matrix):\n        for j in range(0, len(row) - m + 1):\n            if sum(row[j : j + m]) % k == 0:\n                return str(max(sums[i], sum(row[j : j + m])))\n"
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.readline().split())\n    mat = []\n    for _ in range(n):\n        mat.append(list(map(int, stdin.readline().split())))\n    \n    sums = [0] * n\n    for j in range(m):\n        max_s = 0\n        for i in range(n):\n            sums[i] += mat[i][j]\n            if sums[i] > max_s:\n                max_s = sums[i]\n        for i in range(n):\n            if sums[i] < k:\n                sums[i] = 0\n            else:\n                sums[i] -= k\n        max_s = 0\n        for i in range(n):\n            if sums[i] > max_s:\n                max_s = sums[i]\n        \n    return max_s\n"
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3 4 3\\n1 2 3 4\\n5 2 2 2\\n7 1 1 4\\n\")\n    24\n    \"\"\"\n    rows, columns, k = map(int, stdin.split())\n    a = [[int(c) for c in row.split()] for row in stdin.split(\"\\n\")]\n    half = min(rows, columns) // 2\n    a = [row[:half] for row in a]\n    for row in a:\n        for i in range(len(row)):\n            row[i] = k * row[i] if row[i] % k == 0 else row[i]\n    a = [sum(row) for row in a]\n    return max(a)\n"
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    '''\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        '''\n    n, m, k = map(int, stdin.readline().split())\n    a = [list(map(int, stdin.readline().split())) for _ in range(n)]\n    mod = lambda x: x % k\n    dp = [[0] * m for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            for di in range(1, min(m, k)):\n                if j + di < m:\n                    dp[i][j + di] = max(dp[i][j + di], mod(dp[i][j] + a[i][j + di]))\n            for dj in range(1, min(n, k)):\n                if i + dj < n:\n                    dp[i + dj][j] = max(dp[i + dj][j], mod(dp[i][j] + a[i + dj][j]))\n    ans = 0\n    for i in range(n):\n        for j in range(m):\n            ans = max(ans, dp[i][j])\n    return ans\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Finds the maximum sum of elements from the rows of a matrix\n    that can be divided by k and such sum is the maximum.\n\n    >>> solution(\"3 4 3\\n1 2 3 4\\n5 2 2 2\\n7 1 1 4\")\n    24\n    '''\n    n, m, k = [int(x) for x in stdin.split()]\n    matrix = [[int(x) for x in stdin.split()] for _ in range(n)]\n    max_s = 0\n    for row in matrix:\n        half = math.floor(m/2)\n        for i in range(half):\n            sum_row = 0\n            for el in row[i:i+1]:\n                sum_row += el\n            if sum_row % k == 0 and sum_row > max_s:\n                max_s = sum_row\n    return max_s\n"
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = list(map(int, stdin.split(' ')))\n    mults = []\n    for _ in range(n):\n        mults.append(list(map(int, stdin.split(' '))))\n\n    p = [0] * (k + 1)\n    for x in mults:\n        for i, e in enumerate(x):\n            p[i + 1] = (p[i] + e) % k\n\n    ans = 0\n    for x in mults:\n        ans = (ans + sum(x)) % k\n\n    ans = (ans + k - ans % k) % k\n    ans = ans % k\n    return ans\n"
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split(' '))\n    a = [list(map(int, stdin.split('\\n')[i].split(' '))) for i in range(n)]\n    res = 0\n    for i in range(n):\n        half = m//2\n        r = 0\n        l = 0\n        for j in range(half):\n            l += a[i][j]\n        for j in range(half, m):\n            r += a[i][j]\n        if k>0:\n            res = max(res, l*k + r*k)\n    return str(res)\n\n\ndef"
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def input() -> str:\n        return stdin.readline()[:-1]\n\n    def integer() -> int:\n        return int(input())\n\n    def integers(delimiter: str ='') -> list[int]:\n        return [int(x) for x in input().split(delimiter)]\n\n    def mat(n: int, m: int) -> list[list[int]]:\n        return [integers(delimiter=' ') for _ in range(n)]\n\n    def row(n: int, m: int, mat: list[list[int]], k: int) -> list[int]:\n        sums = [0] * n\n        for j in range(m):\n            for i in range(n):\n                sums[i] += mat[i][j]\n            sums[:] = [sum % k for sum in sums]\n        return sums\n\n    n, m, k = integers(delimiter=' ')\n    mat = mat(n, m)\n    sums = row(n, m, mat, k)\n    print(max(sums))\n"
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(x) for x in stdin.split(\"\\n\")[0].split()]\n    a = []\n    for i in range(n):\n        a.append([int(x) for x in stdin.split(\"\\n\")[i + 1].split()])\n    r = 0\n    for i in range(n):\n        c = 0\n        while c < len(a[i]) // 2 and k - a[i][c] * (len(a[i]) // 2) >= 0:\n            c += 1\n        r += len(a[i]) - c * (len(a[i]) // 2)\n    return r\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def get_even_k_sum(n: int, k: int, m: int, k_sum: int):\n        ans = 0\n        for i in range(n):\n            a = []\n            for j in range(m):\n                if j % 2 == 0:\n                    a.append(k_sum + a[j // 2])\n                else:\n                    a.append(a[j // 2] - a[j // 2 - 1])\n            ans = max(ans, max(a))\n        return ans\n\n    n, m, k = map(int, stdin.split())\n    return str(get_even_k_sum(n, k, m, 0))\n\n\n\ndef"
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    sequence = list(map(int, stdin.split()))\n    sequence.sort()\n    for i in range(n):\n        print(sequence[i])\n    return ''\n\nprint(solution(input()))\n"
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return..."
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\nThe function will be called as follows:\n\nsolution('stdin')\n\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nimport math\nimport re\nfrom collections import deque"
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''Solution'''\n\n    return stdin\n\n\ndef"
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    We have to find a positive integer $d$ such that\n    for any i, x_i + d = x_i, x_i - d = x_i.\n    '''\n    a = [int(x) for x in stdin.split()]\n    d = 0\n    for i in range(len(a)):\n        for j in range(i, len(a)):\n            if a[i] + d == a[j]:\n                d = d + 1\n                break\n            elif a[i] - d == a[j]:\n                d = d - 1\n                break\n            elif a[i] == a[j]:\n                break\n    return d\n\n\ndef"
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    The shortest solution.\n    \"\"\"\n    n = int(stdin.readline())\n    nums = [int(x) for x in stdin.readline().split()]\n    targets = set([sum(nums) // n] + [0])\n    ans = 0\n    while targets:\n        ans += 1\n        targets.add(ans)\n        targets.add(ans - 1)\n    return str(ans - 1) if ans > 0 else '-1'\n"
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n    n = int(stdin)\n    arr = list(map(int, stdin.split()))\n    d = {}\n    \n    for el in arr:\n        if el in d:\n            d[el] += 1\n        else:\n            d[el] = 1\n    \n    # number of elements that have negative value\n    count = 0\n    \n    for key, value in d.items():\n        if value % 2!= 0:\n            count += 1\n    \n    if count > 1:\n        return '-1'\n    \n    minimum = min(arr)\n    maximum = max(arr)\n    \n    if minimum == maximum:\n        return '1'\n    \n    # if there is no negative value in the array\n    if count == 0:\n        return '1'\n    \n    # if there is one negative value in the array\n    if count == 1:\n        # go through the list from the left and find the first element, that has 2 elements with negative value\n        # if such element is not found, return -1\n        for i in range(len(arr)):\n            if arr[i]!= minimum and arr[i]!= maximum:\n                if arr[i] < minimum:\n                    return -1\n                else:\n                    return 1\n        \n        return 1\n    \n    # if there are 2 or more negative values in the array\n    # set the value as the minimum value\n    # subtract minimum value from all negative values\n    # add minimum value to all values\n    # return the difference between the maximum value and minimum value\n    d[minimum] = d[minimum] - 1\n    d[maximum] = d[maximum] - 1\n    d[minimum] = d[minimum] + 1\n    return maximum - minimum\n\n\n\ndef"
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return minimal D for achieving equilibrium\n    \"\"\"\n    pass"
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    A = list(map(int, stdin.readline().split()))\n    D = float(\"inf\")\n    for d in range(n):\n        if D > n - d:\n            break\n        B = A[:]\n        for i, x in enumerate(B):\n            if x % D:\n                B[i] += (D - (x % D))\n            else:\n                B[i] -= D\n            if not B[i] % D:\n                B[i] = B[i] // D\n            else:\n                break\n        else:\n            if not all(map(lambda x: x % D, B)):\n                D = D // D\n            else:\n                break\n        if not any(B):\n            break\n    return str(D) if D!= float(\"inf\") else str(-1)\n"
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return a sequence of equal integers\"\"\"\n    n = int(stdin)\n    a = [int(i) for i in stdin.split()]\n    d = []\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i] + a[j] == a[j] + a[i]:\n                d.append(a[j] - a[i])\n                break\n    if len(d) == 0:\n        return -1\n    else:\n        d = min(d)\n    return d"
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = map(int, stdin.split())\n    x3, y3, x4, y4 = map(int, stdin.split())\n    x5, y5, x6, y6 = map(int, stdin.split())\n\n    dx1 = x2 - x1\n    dy1 = y2 - y1\n    dx2 = x4 - x3\n    dy2 = y4 - y3\n    dx3 = x6 - x5\n    dy3 = y6 - y5\n    dx4 = x1 - x3\n    dy4 = y1 - y3\n    dx5 = x2 - x5\n    dy5 = y2 - y5\n    dx6 = x4 - x6\n    dy6 = y4 - y6\n    # print(dx1, dy1, dx2, dy2, dx3, dy3, dx4, dy4, dx5, dy5, dx6, dy6)\n\n    if (dx1 * dy2 - dx2 * dy1) * (dx3 * dy4 - dx4 * dy3) == 0:\n        if (dx1 * dy2 - dx2 * dy1) * (dx5 * dy6 - dx6 * dy5) == 0:\n            if (dx3 * dy4 - dx4 * dy3) * (dx5 * dy6 - dx6 * dy5) == 0:\n                if dx1 * dx3 + dy1 * dy3 == 0 or dx1 * dx5 + dy1 * dy5 == 0:\n                    if dx2 * dx4 + dy2 * dy4 == 0 or dx2 * dx6 + dy2 * dy6 == 0:\n                        if dx3 * dx4 + dy3 * dy4 == 0 or dx3 * dx6 + dy3 * dy6 == 0:\n                            return 'YES'\n    return 'NO'"
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = [int(x) for x in stdin.split(' ')]\n    x3, y3, x4, y4 = [int(x) for x in stdin.split(' ')]\n    x5, y5, x6, y6 = [int(x) for x in stdin.split(' ')]\n    return 'YES' if not (x1 < x3 < x2) or not (y3 < y4 < y1) or not (x1 < x5 < x2) or not (y5 < y6 < y1) else 'NO'\n"
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = map(int, stdin.split('\\n')[0].split())\n    x3, y3, x4, y4 = map(int, stdin.split('\\n')[1].split())\n    x5, y5, x6, y6 = map(int, stdin.split('\\n')[2].split())\n\n    res = 'YES'\n    if x1 > x3 or y1 > y3 or x2 < x5 or y2 < y5:\n        res = 'NO'\n\n    if x1 > x4 or y1 > y4 or x2 < x6 or y2 < y6:\n        res = 'NO'\n\n    return res\n"
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    first = [int(i) for i in stdin.split('\\n')[0].split()]\n    second = [int(i) for i in stdin.split('\\n')[1].split()]\n    third = [int(i) for i in stdin.split('\\n')[2].split()]\n    fourth = [int(i) for i in stdin.split('\\n')[3].split()]\n\n    left = [first[0], first[1]]\n    right = [first[2], first[3]]\n    bottom = [second[0], second[1]]\n    top = [second[2], second[3]]\n    left_side = [third[0], third[1]]\n    right_side = [third[2], third[3]]\n    bottom_side = [fourth[0], fourth[1]]\n    top_side = [fourth[2], fourth[3]]\n\n    x = top_side[0] - bottom_side[0]\n    y = top_side[1] - bottom_side[1]\n\n    if left_side[0] < right[0] and bottom_side[0] < top_side[0] and left_side[1] < top[1] and bottom_side[1] < right_side[1] and x < 0 and y > 0:\n        print('YES')\n    else:\n        print('NO')\n\n    return 'YES' if x >= 0 and y <= 0 else 'NO'\n\n\nsolution('2 2 4 4\\n1 1 3 5\\n3 1 5 5\\n') == 'YES'\nsolution('5 2 10 5\\n3 1 7 6\\n8 1 11 7\\n') == 'YES'\nsolution('0 0 1000000 1000000\\n0 0 499999 1000000\\n500000 0 1000000 1000000\\n') == 'YES'\nsolution('0 0 1000000 1000000\\n0 0 499999 1000000\\n500000 0 1000000 1000000\\n') == 'YES'\nsolution('0 0 1000000 1000000\\n0 0 499999 1000000\\n500000 0 1000000 1000000\\n') == 'YES'\n"
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    l, t, r, b = map(int, stdin.split(' '))\n    xs = sorted([l, r])\n    ys = sorted([t, b])\n    return 'YES' if (r - l) * (b - t) < (r - xs[0]) * (b - ys[0]) + (xs[1] - l) * (b - ys[1]) else 'NO'\n\"\"\"\n\ndef"
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if stdin.count(\"NO\") == 0 else \"NO\"\n\n\ndef"
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # x1, y1, x2, y2 = [int(x) for x in stdin.split(\"\\n\")[0].split()]\n    x1, y1, x2, y2 = map(int, stdin.split(\"\\n\")[0].split())\n    x3, y3, x4, y4 = map(int, stdin.split(\"\\n\")[1].split())\n    x5, y5, x6, y6 = map(int, stdin.split(\"\\n\")[2].split())\n\n    l1 = max(x1, x2)\n    l2 = max(x3, x4)\n    l3 = max(x5, x6)\n    h1 = min(y1, y2)\n    h2 = min(y3, y4)\n    h3 = min(y5, y6)\n\n    if l1 < x3 < x2 < x1 and l1 < x5 < x4 < x3 or l2 < x1 < x4 < x2 and l2 < x3 < x6 < x4 or l3 < x3 < x6 < x4 < x5:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n"
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # https://en.wikipedia.org/wiki/Line%E2%80%93line_intersection\n    points = list(map(list, map(int, stdin.split())))\n    x1, y1 = points[0]\n    x2, y2 = points[1]\n    x3, y3 = points[2]\n    x4, y4 = points[3]\n    if (x4 - x3) * (y1 - y2) - (y4 - y3) * (x1 - x2) == 0:\n        print('YES')\n        return\n    if (x4 - x3) * (y1 - y2) - (y4 - y3) * (x1 - x2) == 0:\n        print('YES')\n        return\n    a = (y1 - y2) / (x1 - x2)\n    b = y1 - a * x1\n    c = (y3 - y4) / (x3 - x4)\n    d = y3 - c * x3\n    e = (y1 - y2) / (x1 - x2)\n    f = y1 - e * x1\n    g = (y3 - y4) / (x3 - x4)\n    h = y3 - g * x3\n    if (a - c) * (x4 - x3) - (d - h) * (y4 - y3) == 0:\n        print('YES')\n        return\n    if (a - c) * (x4 - x3) - (d - h) * (y4 - y3) == 0:\n        print('YES')\n        return\n    print('NO')\n    return\n"
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = map(int, stdin.split())\n    x3, y3, x4, y4 = map(int, stdin.split())\n    x5, y5, x6, y6 = map(int, stdin.split())\n\n    x_list = [x1, x2, x3, x4, x5, x6]\n    y_list = [y1, y2, y3, y4, y5, y6]\n\n    # condition 1\n    # x1 <= x <= x2\n    # y1 <= y <= y2\n\n    # condition 2\n    # x3 <= x <= x4\n    # y3 <= y <= y4\n\n    # condition 3\n    # x5 <= x <= x6\n    # y5 <= y <= y6\n\n    # condition 4\n    # (x1, y1) < (x3, y3) < (x2, y2)\n    # (x4, y4) < (x5, y5) < (x6, y6)\n\n    def is_inside(x: int, y: int) -> bool:\n        return all(x_list[i] <= x <= x_list[i + 1] for i in range(len(x_list) - 1)) and \\\n               all(y_list[i] <= y <= y_list[i + 1] for i in range(len(y_list) - 1))\n\n    return \"YES\" if is_inside(x5, y5) and not is_inside(x5, y5) and not is_inside(x5, y6) else \"NO\"\n"
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''"
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    seen = set()\n    seen.add(n)\n    for i in range(1, 10 ** 6):\n        if n == 1:\n            return str(i)\n        if n - 1 in seen:\n            return str(i)\n        n = n * 10 + 1\n        seen.add(n)\n"
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    dp[1] = 1\n    for i in range(2, n + 1):\n        dp[i] = dp[i - 1] + 1 if i % 2 == 0 else dp[i - 1]\n        for j in range(2, i):\n            if i % j == 0:\n                dp[i] = min(dp[i], dp[j] + (i // j))\n    return dp[n]\n"
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your solution\n    return ''\n    # pass"
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    reachable = {n}\n    for _ in range(9):\n        new_reachable = set()\n        for num in reachable:\n            new_num = num + 1\n            while new_num:\n                new_num, digit = divmod(new_num, 10)\n                if digit == 0:\n                    new_num += 1\n                    continue\n                new_num += digit ** 2\n            new_reachable.add(new_num)\n        reachable = new_reachable\n    return len(reachable)\n"
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return '0'\n"
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\nn = int(stdin.readline())\nd = {}\nd[n] = 1\n\nwhile n!= 1:\n    if n % 2 == 0:\n        n //= 2\n    else:\n        n = n * 3 + 1\n    d[n] = d.get(n, 0) + 1\n\nprint(len(d))\n\n------\ndef"
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\n----\n\n\nimport sys\nfrom collections import deque\n\ninput = sys.stdin.readline\n\nn = int(input())\n\nvisited = {}\nqueue = deque([(n, 0)])\n\nwhile queue:\n    current, steps = queue.popleft()\n\n    if current == 1:\n        print(steps)\n        break\n\n    if current in visited:\n        continue\n\n    visited[current] = True\n    queue.append((current + 1, steps + 1))\n    queue.append((current - 1, steps + 1))\n    queue.append((current * 2, steps + 1))\n    if current % 2 == 0:\n        queue.append((current // 2, steps + 1))\n"
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    return \"\"\n"
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    nums = list(map(int, stdin.readline().split()))\n    i = 0\n    while i < n:\n        if nums[i] == 0:\n            nums[i] = i + 1\n            i += 1\n        else:\n            break\n    while i < n:\n        if nums[i] == 0:\n            nums[i] = n + 1\n            n -= 1\n            if n < 0:\n                return \"IMPOSSIBLE\"\n        else:\n            i += 1\n    print(\" \".join(map(str, nums)))\n\ndef"
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    \u4efb\u610f\u306e\u89e3\u3092\u51fa\u529b\u3057\u3066\u3001\u9ad8\u901f\u5316\u3055\u305b\u308b\n    \u89e3\u306e\u7d44\u307f\u5408\u308f\u305b\u304c\u4e00\u610f\u306b\u5b9a\u307e\u308b\u306e\u3067\u3001\u914d\u5217\u306b\u5165\u308c\u3066\u304a\u304d\u3001\u305d\u306e\u4e2d\u306e\u89e3\u3092\u51fa\u529b\n    \u81ea\u5206\u304c\u7ba1\u7406\u3057\u3066\u3044\u308b\u914d\u5217\u3092\u5909\u3048\u308b\u5fc5\u8981\u306f\u3042\u308a\u305d\u3046\n    \"\"\"\n    n = stdin.split()[0]\n    arr = [int(i) for i in stdin.split()[1].split(\" \")]\n    arr = set(arr)\n    arr.remove(0)\n    ans = []\n    for i in range(1, n+1):\n        if i in arr:\n            ans.append(i)\n    for i in range(1, n+1):\n        if i not in ans:\n            ans.append(i)\n    return \" \".join([str(i) for i in ans])\n\n\ndef"
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    friends_numbers = [int(x) for x in stdin.split()]\n    friends_dictionary = {x: 0 for x in range(n + 1)}\n\n    for x in range(len(friends_numbers)):\n        if friends_numbers[x]!= 0:\n            friends_dictionary[friends_numbers[x]] = x\n\n    result = []\n    for x in friends_dictionary:\n        if friends_dictionary[x] == 0:\n            result.append(x)\n\n    for x in range(len(friends_dictionary) - 1, -1, -1):\n        if friends_dictionary[x] == 0:\n            result.append(x)\n\n    return''.join(str(x) for x in result)\n"
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    n = int(stdin)\n    line = stdin.splitlines()[1]\n    f = [int(i) for i in line.split()]\n    total = sum(f)\n    f[0] = total-f[0]\n    for i in range(1, n):\n        f[i] = total-f[i]-1\n    return \" \".join(map(str, f))"
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    f = [0] + list(map(int, stdin.split()))\n    s = [0] * (n + 1)\n    for i in range(1, n + 1):\n        s[f[i]] += 1\n    ans = [i for i in range(n + 1) if s[i] == 1]\n    print(*ans)\n    return \" \"\n\nprint(solution('5 0 0 2 4'))\nprint(solution('7 0 0 1 4 0 6'))\nprint(solution('7 4 0 3 0 5 1'))\nprint(solution('5 2 1 0 0'))\n\n5\n0 0 0 0 0\n3\n4\n0 1 2 3\n7\n0 0 0 0 0 0 0\n1\n1\n0 1\n2\n0 0 2\n4\n0 0 0 0 0 0 0 0\n5\n1 2 3 4\n0\n0 0 0 0 0\n0\n0 0 0 0 0 0 0\n0\n0 0 0 0 0\n0\n0 0 0 0 0\n0\n0 0 0 0 0\n2\n1 3\n0\n0 0 0 0 0 0 0 0\n3\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n4\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n"
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Computes the solution.\"\"\"\n    n = int(stdin.readline())\n    f = list(map(int, stdin.readline().split()))\n    f_i = [0] * n\n    for i in range(n):\n        if f[i] == 0:\n            f_i[i] = f[i]\n    m = int(stdin.readline())\n    for _ in range(m):\n        g = int(stdin.readline())\n        f_i[g - 1] = f[g - 1]\n    return''.join(map(str, f_i))\n"
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"5\\n5 0 0 2 4\")\n    '5 3 1 2 4'\n    >>> solution(\"7\\n7 0 0 1 4 0 6\")\n    '7 3 2 1 4 5 6'\n    >>> solution(\"7\\n7 4 0 3 0 5 1\")\n    '7 4 2 3 6 5 1'\n    \"\"\"\n\n    n = int(stdin.readline())\n    friends = list(map(int, stdin.readline().split()))\n\n    gifts = set()\n    for idx, friend in enumerate(friends):\n        if friend:\n            gifts.add(idx)\n\n    answer = [0] * n\n    for gift in gifts:\n        answer[gift] = gift\n\n    for gift in range(n):\n        for friend in range(n):\n            if gift == friend or gift in gifts:\n                continue\n            if friends[gift] and friends[friend] and (gift not in gifts or friend not in gifts):\n                if answer[gift] == gift:\n                    answer[gift] = friend\n                elif answer[friend] == friend:\n                    answer[friend] = gift\n\n    return''.join(map(str, answer))\n"
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    nums = [0] + [int(num) for num in stdin.split()]\n    zeroes = [0] * n\n    for i in range(n):\n        if nums[i] == 0:\n            zeroes[i] = nums[i]\n        else:\n            zeroes[nums[i]-1] = nums[i]\n    print(*zeroes, sep=\" \")\n    return \"\"\n\n\"\"\"\nimport unittest\n\ndef"
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds all solution of the problem \"\"\"\n    n = int(stdin.readline())\n    input_list = list(map(int, stdin.readline().split(' ')))\n    friends = list()\n    for num in input_list:\n        if num == 0:\n            friends.append(0)\n        else:\n            friends.append(num)\n    for i in range(n):\n        if i in friends:\n            continue\n        else:\n            friends[i] = i\n            break\n    return''.join(list(map(str, friends)))\n"
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    n, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    ans = []\n    for i in range(k):\n        ans.append([])\n        for j in range(n):\n            if i in a[j]:\n                ans[i].append(j)\n    if len(ans) < k:\n        return \"NO\"\n    \n    res = []\n    for i in ans:\n        if len(i) < n:\n            return \"NO\"\n        t = []\n        for j in range(n):\n            t.append(str(i[j]))\n        res.append(t)\n    \n    if len(set(res)) < len(res):\n        return \"NO\"\n    \n    res = [sorted(i) for i in res]\n    for i in range(len(res) - 1):\n        if res[i]!= res[i + 1]:\n            return \"NO\"\n    return''.join(res[0])\n\ndef"
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    A simple solution.\n    '''\n    n, k = map(int, stdin.split())\n    colors = map(int, stdin.split())\n    colors = {c for c in colors}\n    if len(colors) < k:\n        return 'NO'\n    colors = list(colors)\n    colors.sort()\n    colors = {c: i for i, c in enumerate(colors)}\n    stdout = 'YES'\n    for c in colors:\n        if colors[c] > k:\n            return 'NO'\n        if colors[c] == k:\n            stdout = '{} {}'.format(stdout, c)\n            if c!= colors[-1]:\n                stdout = '{} {}'.format(stdout, c)\n            if c!= colors[0]:\n                stdout = '{} {}'.format(stdout, c)\n    return stdout\n"
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    color = set()\n    a = list(map(int, stdin.split()))\n    for i in a:\n        color.add(i)\n    if len(color) == k:\n        return 'YES\\n' +''.join(map(str, sorted(a)))\n    else:\n        return 'NO'\n    \n    \n"
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution of \"Coloring an array\" problem\n    \"\"\"\n    # n, k = map(int, stdin.readline().split())\n    n, k = map(int, input().split())\n    a = map(int, input().split())\n    # if k * n < len(a):\n    #     return \"NO\"\n    # if len(set(a)) < k:\n    #     return \"NO\"\n    # if len(set(a)) == k:\n    #     return \"YES\"\n    # a.sort()\n    # ans = []\n    # for i in range(1, k + 1):\n    #     flag = True\n    #     for j in range(n):\n    #         if a[j] % k == i - 1:\n    #             ans.append(i)\n    #             flag = False\n    #             break\n    #     if flag:\n    #         ans.append(i)\n    # return \"YES\" + \" \" + \" \".join(map(str, ans))\n    return 'YES' if len(set(a)) == k else 'NO'\n"
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    pass\n"
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, k = map(int, stdin.split(\"\\n\")[0].split())\n    return \"YES\\n\" + \" \".join(map(str, (i + 1 for i in range(k - 1) for j in range(i + 1, k))))\n"
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    We want to ensure that there is no repeating elements for each color.\n    We can use the fact that number of different elements is the same as number of different colors.\n    We can use it to find colors.\n\n    Since all elements are distinct, we don't have to care about duplicates in a row.\n    We can mark each element as visited, and on each step we can mark previous elements as visited.\n    That way we can check if number of colors is the same.\n    \"\"\"\n    n, k = map(int, stdin.split())\n    colors = set()\n    s = set()\n    s.add(0)\n    for i in range(n):\n        a = int(stdin.readline())\n        s.add(a)\n        colors.add(a)\n        for j in s:\n            if j == 0:\n                continue\n            if a % j == 0:\n                s.add(j)\n    colors = list(colors)\n    print(\"YES\" if len(colors) == k else \"NO\")\n    if len(colors) == k:\n        print(*colors)\n    return ''\n\ndef"
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = [int(i) for i in stdin.split()]\n    n = str(n)\n    x, y = int(x), int(y)\n    count = 0\n    for i in range(len(n)):\n        if n[i] == '0':\n            count += y\n        else:\n            count += x\n    return count"
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def get_n_th_num(n):\n        if n == 0:\n            return \"0\"\n        if n == 1:\n            return \"1\"\n        if n % 2 == 0:\n            return get_n_th_num(n // 2) + get_n_th_num(n // 2)\n        else:\n            return get_n_th_num(n // 2) + get_n_th_num(n // 2 + 1)\n\n    def get_digit(n, i):\n        if n == 0:\n            return 0\n        if i == 0:\n            return 1 if n % 2 == 0 else 0\n        else:\n            return 1 if n % 2 == 0 else 0 if get_digit(n // 10, i - 1) == 0 else 1\n\n    n, x, y = list(map(int, stdin.split()))\n    nth_num = get_n_th_num(n)\n    res = \"\"\n    for i in range(n - 1, -1, -1):\n        res = str(get_digit(int(nth_num[i]), y)) + res\n        if i < x:\n            res = str(get_digit(int(nth_num[i]), y)) + res\n        nth_num = nth_num[:i] + res\n    print(res)\n"
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n, x, y = [int(i) for i in lines[0].split(' ')]\n    num = list(lines[1])\n    i, num_ = 0, ''.join(num)\n    while True:\n        if i % 2 == 0 and int(num_) % (10 ** x) == y:\n            break\n        elif i % 2 == 1 and int(num_) % (10 ** x) == (y + 1):\n            break\n        num[i % n] = str(int(num[i % n]) ^ 1)\n        i += 1\n        num_ = ''.join(num)\n    return str(i)\n"
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, stdin.split())\n    a = int(stdin)\n    z = a % (10 ** x)\n    z = z - 10 ** y\n    print(z)\n    if z > 0:\n        z = 10 ** y - z\n    print(z)\n    return str(z)\n"
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = [int(i) for i in stdin.split(' ')]\n    res = 0\n    while y > 0:\n        if n == 1:\n            res += y\n            break\n        a = n % x\n        if a == 0:\n            res += y\n            break\n        n //= x\n        res += 1\n        y -= 1\n    return res\n\"\"\"\n\ndef"
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = [int(x) for x in stdin.split(' ')]\n    n, x, y = list(str(n)), int(x), int(y)\n    x_to_1, x_to_0, y_to_1, y_to_0 = 0, 0, 0, 0\n    for digit in n:\n        digit = int(digit)\n        if digit == 1:\n            x_to_1, x_to_0, y_to_1, y_to_0 = (\n                x_to_1 + x_to_0 + y_to_1 + y_to_0,\n                x_to_1,\n                x_to_0,\n                y_to_1,\n                y_to_0\n            )\n        elif digit == 0:\n            x_to_1, x_to_0, y_to_1, y_to_0 = (\n                x_to_1,\n                x_to_0 + x_to_1 + y_to_0 + y_to_1,\n                y_to_1,\n                y_to_0,\n            )\n    remainder = (10 ** y) % (10 ** x)\n    return min(x_to_1 + x_to_0 + y_to_1 + y_to_0, remainder)\n"
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = [int(i) for i in stdin.split(' ')]\n    return str(len([i for i in range(n) if n % (10 ** i) % 10 == y]))\n\ndef"
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = [int(x) for x in stdin.split(\" \")]\n    A = stdin\n    \n    return \"\""
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = [int(i) for i in stdin.split(' ')]\n    num = list(stdin[:n])\n    num.reverse()\n    x = x % n\n    y = y % n\n\n    ans = 0\n\n    for i in range(n):\n        if num[i] == '0':\n            if i < x:\n                ans += n - x\n            elif i >= x:\n                ans += n - y + 1\n    print(ans)\n    return \"\""
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    # Please take input and output as parameters.\n    # For more information on how to take input, refer to the problem statement.\n    # For more information on how to take output, refer to the problem statement."
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n"
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"O(n)\"\"\"\n    t = int(stdin.readline())\n    output = []\n    for _ in range(t):\n        n = int(stdin.readline())\n        a = [int(i) for i in stdin.readline().split(' ')]\n        checker = False\n        for i in range(n - 2):\n            for j in range(i + 3, n):\n                if a[i] == a[j]:\n                    for k in range(i + 1, j):\n                        if a[k] == a[i] or a[k] == a[j]:\n                            continue\n                        else:\n                            checker = True\n                            break\n                    if checker:\n                        break\n            if checker:\n                break\n        if checker:\n            output.append('YES')\n        else:\n            output.append('NO')\n    return '\\n'.join(output)\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n    \"\"\"\n    :type n: int\n    :type a: List[int]\n    :rtype: str\n    \"\"\"\n    #Your code here\n    #We get the amount of inputs from the first line of the input\n    t = int(stdin.readline())\n    \n    #We loop through all inputs\n    for i in range(0, t):\n        n = int(stdin.readline())\n        a = [int(i) for i in stdin.readline().split(' ')]\n        \n        #We loop through the array of the first line\n        for i in range(0, n):\n            #We check if the sum of the array is greater than or equal to 3\n            if (sum(a) >= 3):\n                #We check if there is a palindrome of length 3 which is a subset of the array\n                if (palindrome(a, 3)):\n                    #We print a palindrome, as we found one\n                    print(\"YES\")\n                    break\n            #We check if the sum of the array is greater than or equal to 3\n            elif (sum(a) < 3):\n                #We check if there is a palindrome of length 2 which is a subset of the array\n                if (palindrome(a, 2)):\n                    #We print a palindrome, as we found one\n                    print(\"YES\")\n                    break\n    #We loop through all inputs\n    for i in range(0, t):\n        n = int(stdin.readline())\n        a = [int(i) for i in stdin.readline().split(' ')]\n        \n        #We loop through the array of the first line\n        for i in range(0, n):\n            #We check if the sum of the array is greater than or equal to 3\n            if (sum(a) >= 3):\n                #We check if there is a palindrome of length 3 which is a subset of the array\n                if (palindrome(a, 3)):\n                    #We print a palindrome, as we found one\n                    print(\"YES\")\n                    break\n            #We check if the sum of the array is greater than or equal to 3\n            elif (sum(a) < 3):\n                #We check if there is a palindrome of length 2 which is a subset of the array\n                if (palindrome(a, 2)):\n                    #We print a palindrome, as we found one\n                    print(\"YES\")\n                    break\n    #We loop through all inputs\n    for i in range(0, t):\n        n = int(stdin.readline())\n        a = [int(i) for i in stdin.readline().split(' ')]\n        \n        #We loop through the array of the first line\n        for i in range(0, n):\n            #We check if the sum of the array is greater than or equal to 3\n            if (sum(a) >= 3):\n                #We check if there is a palindrome of length 3 which is a subset of the array\n                if (palindrome(a, 3)):\n                    #We print a palindrome, as we found one\n                    print(\"YES\")\n                    break\n            #We check if the sum of the array is greater than or equal to 3\n            elif (sum(a) < 3):\n                #We check if there is a palindrome of length 2 which is a subset of the array\n                if (palindrome(a, 2)):\n                    #We print a palindrome, as we found one\n                    print(\"YES\")\n                    break\n    \n    #We return a blank string\n    return \"\"\n\ndef"
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    time complexity: O(n**2)\n    space complexity: O(1)\n    \"\"\"\n    t = int(stdin.readline())\n    for i in range(t):\n        n = int(stdin.readline())\n        a = list(map(int, stdin.readline().strip().split()))\n        for j in range(n - 2):\n            for k in range(j + 1, n - 1):\n                if is_palindrome(a[j: k + 1]):\n                    return \"YES\"\n        return \"NO\"\n\n\ndef"
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def test_palindrome(s, l):\n        for i in range(len(s) - l + 1):\n            if s[i:i + l] == s[i:i + l][::-1]:\n                return True\n        return False\n\n    n = int(stdin.readline().strip())\n    l = 1\n    s = list(map(int, stdin.readline().strip().split()))\n    while l < len(s):\n        if not test_palindrome(s, l):\n            l += 1\n        else:\n            break\n    print('YES' if test_palindrome(s, l) else 'NO')\n"
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time: O(n * log(n))\n    Space: O(n)\n    \"\"\"\n    digits, mapping, result = [], [], [0] * len(stdin)\n    for digit in stdin:\n        digits.append(int(digit))\n    for i in range(len(stdin)):\n        digits[i] = mapping[digits[i]]\n    result[0] = max(digits)\n\n    for i in range(1, len(stdin)):\n        digits[i] = max(digits[i], result[i - 1])\n        result[i] = max(result[i - 1], digits[i])\n    return str(result[-1])\n\n\ndef"
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def f(num: str) -> str:\n        if num == '1':\n            return '9'\n        elif num == '2':\n            return '8'\n        elif num == '3':\n            return '7'\n        elif num == '4':\n            return '6'\n        elif num == '5':\n            return '5'\n        elif num == '6':\n            return '4'\n        elif num == '7':\n            return '3'\n        elif num == '8':\n            return '2'\n        elif num == '9':\n            return '1'\n\n    n = int(stdin.readline())\n    num = stdin.readline()[:-1]\n\n    if n == 1:\n        return str(int(num))\n    num = list(num)\n    i = 0\n    while i < n:\n        if num[i] == '9':\n            num[i] = '1'\n            break\n        if num[i] == '1':\n            if i == n - 1:\n                num[i] = f(num[i - 1])\n                break\n            if num[i + 1] == '9':\n                num[i] = '9'\n                num[i + 1] = f(num[i + 1])\n                i += 1\n            else:\n                num[i] = f(num[i])\n                i += 1\n        else:\n            num[i] = f(num[i])\n            i += 1\n    return ''.join(num)\n\nprint(solution(stdin=input()))\n"
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(stdin[1])\n    99999\n    \"\"\"\n    digits = stdin[0]\n    num = stdin[1]\n    replace = {\n        1: stdin[2],\n        2: stdin[3],\n        3: stdin[4],\n        4: stdin[5],\n        5: stdin[6],\n        6: stdin[7],\n        7: stdin[8],\n        8: stdin[9],\n        9: stdin[10],\n    }\n    res = []\n    for digit in num:\n        res.append(replace[int(digit)])\n    res = \"\".join(res)\n    return str(int(res))\n"
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin.split()[0]\n    f = list(map(int, stdin.split()[1:]))\n    \n    res = int(s)\n    for i in range(n-1):\n        for j in range(n-i-1):\n            a = int(s[j:j+i+2])\n            b = int(s[j+1:j+i+2])\n            if f[a-1] < f[b-1]:\n                a, b = b, a\n            \n            res = max(res, a * f[b-1])\n            s = s[:j] + str(b) + s[j+i+2:]\n            \n    return res\n\n\nsolution(input)"
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    a = [str(f(x)) for x in a]\n    nums = []\n    for i in range(1, 10):\n        nums.append(str(i))\n    res = []\n    for i in range(n - 1):\n        for j in range(n - i - 1):\n            res.append(nums[0])\n            nums.pop(0)\n        res.append(a[i])\n    res.append(a[-1])\n    return ''.join(res)"
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = stdin.readline().strip()\n    # initialize new string\n    new_a = \"\"\n\n    # for each digit in string\n    for i in range(n):\n        # fetch character and map it\n        new_a += str(int(a[i]) * int(stdin.readline().strip()))\n\n    return new_a\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = stdin.readline()\n    f = list(map(int, stdin.readline().split(' ')))\n\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    for i in range(n):\n        for j in range(i, -1, -1):\n            dp[j + 1] = max(dp[j + 1], dp[j] + f[int(a[j]) - 1])\n            if i + 1 < n:\n                dp[i + 1] = max(dp[i + 1], dp[i] + f[int(a[i + 1]) - 1])\n    return dp[-1]\n\n\ndef"
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"You are given a long decimal number $a$, consisting of $n$ digits from $1$ to $9$. You also have a function $f$ that maps every digit from $1$ to $9$ to some (possibly the same) digit from $1$ to $9$.\n\n    You can perform the following operation no more than once: choose a non-empty contiguous subsegment of digits in $a$, and replace each digit $x$ from this segment with $f(x)$. For example, if $a = 1337$, $f(1) = 1$, $f(3) = 5$, $f(7) = 3$, and you choose the segment consisting of three rightmost digits, you get $1553$ as the result.\n\n    What is the maximum possible number you can obtain applying this operation no more than once?\n\n    >>> solution(\"4\\n1337\")\n    1557\n\n    >>> solution(\"5\\n11111\")\n    99999\n\n    >>> solution(\"2\\n33\")\n    33\n\n    \"\"\"\n    number_of_digits = int(stdin.readline())\n    number = stdin.readline().strip()\n    f = list(map(int, stdin.readline().strip().split()))\n\n    result = 0\n\n    for i in range(number_of_digits - 1, -1, -1):\n        number = number[:-1]\n        f_result = str(f[int(number) - 1])\n        result = result * 10 + int(f_result)\n\n    print(result)\n\n\nsolution(input())\n"
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \n    # Preprocess the input\n    n = int(stdin.split(\"\\n\")[0])\n    a = stdin.split(\"\\n\")[1].strip()\n    \n    # Loop through all combinations of the digits and replace them\n    for i in range(1, 10):\n        b = a\n        for j in range(0, len(a)):\n            if int(a[j]) == i:\n                b = b[:j] + str(i) + b[j+1:]\n        if len(b) == n:\n            break\n    \n    # Return the max of the possible combinations\n    return str(int(max(b)))\n"
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = stdin.split()\n    f = [int(n) for n in stdin.split()]\n    ans = 0\n    for i in range(n):\n        suba = int(a[i])\n        while suba > 0:\n            ans = (ans * 10 + f[suba % 10 - 1])\n            suba //= 10\n    return str(ans)\n"
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Get input for t tests.\"\"\"\n   ...\n\n\ndef"
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n        You are given three integers $a \\le b \\le c$.\n\n        In one move, you can add $+1$ or $-1$ to any of these integers (i.e. increase or decrease any number by one). You can perform such operation any (possibly, zero) number of times, you can even perform this operation several times with one number. Note that you cannot make non-positive numbers using such operations.\n\n        You have to perform the minimum number of such operations in order to obtain three integers $A \\le B \\le C$ such that $B$ is divisible by $A$ and $C$ is divisible by $B$.\n\n        You have to answer $t$ independent test cases.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        a, b, c = list(map(int, stdin.readline().strip().split()))\n        if (c - b) % a == 0 and (c - a) % b == 0:\n            print(0)\n            print(a, b, c)\n        elif (c - b) % a == 0:\n            print((c - b) // a)\n            print(a, c)\n        elif (c - a) % b == 0:\n            print((c - a) // b)\n            print(b, c)\n        else:\n            print(1)\n            print(a, b, c)\n    '''\n    import math\n    def gcd(a: int, b: int) -> int:\n        if b == 0:\n            return a\n        else:\n            return gcd(b, a % b)\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        a, b, c = list(map(int, stdin.readline().strip().split()))\n        print(math.ceil((c-a)/gcd(a, b)) if (c-a) % gcd(a, b) == 0 else 1)\n        print(gcd(a, b), end=' ')\n        print(a, end=' ')\n        print(b, end=' ')\n        print(c)\n    return ''"
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    "
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"1 2 3\\n123 321 456\\n5 10 15\\n15 18 21\\n100 100 101\\n1 22 29\\n3 19 38\\n6 30 46\")\n    '1'\n    \"\"\"\n    a, b, c = map(int, stdin.split())\n\n    if a == b:\n        if a == c:\n            return \"0\"\n        else:\n            return \"1\"\n\n    if a > b:\n        a, b = b, a\n\n    if b > c:\n        b, c = c, b\n\n    if b % a == 0:\n        return \"0\"\n    elif b % a == 1 and c % b == 0:\n        return \"1\"\n    else:\n        if b % c == 0:\n            return \"2\"\n        else:\n            return \"3\"\n"
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    t, *cases = map(int, stdin.split())\n    for a, b, c in zip(*map(lambda z: map(int, z.split()), cases)):\n        stdin = ''\n        while (stdin == '' or stdin[0] not in '+-' or int(stdin) <= a or int(stdin) >= b or int(stdin) > c):\n            stdin = input()\n        print(stdin)\n    '''\n    return ''\n    \n"
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    cases = int(stdin.readline())\n    for _ in range(cases):\n        a, b, c = map(int, stdin.readline().split())\n        lcm = a * b // gcd(a, b)\n        ans = c - lcm + 1\n        while ans % a!= 0 or ans % b!= 0:\n            ans += 1\n        print(ans)\n        print(lcm, a, b)\n        \n        \n        \n"
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    cases = int(stdin.readline())\n    result = []\n    for i in range(cases):\n        arr = [int(x) for x in stdin.readline().split(' ')]\n        a = arr[0]\n        b = arr[1]\n        c = arr[2]\n        print(arr)\n        \n        #print(gcd(a, b))\n        while(gcd(a, b)!= gcd(a, c)):\n            if(a > b):\n                a = a - 1\n            else:\n                b = b - 1\n        #print(gcd(a, b))\n        if(gcd(a, b) == 1):\n            result.append(3)\n            print(a, b, c)\n        else:\n            result.append(2)\n            if(a > b):\n                a = a - 1\n                b = b + 1\n            else:\n                b = b - 1\n                a = a + 1\n            while(a <= b):\n                if(a % b == 0):\n                    result[-1] = result[-1] + 1\n                    break\n                else:\n                    if(a > b):\n                        a = a - 1\n                        b = b + 1\n                    else:\n                        b = b - 1\n                        a = a + 1\n            result.append(3)\n            print(a, b, c)\n    return result\n\ndef"
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    pass\n"
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    # TODO: Implement me\n    # return \"\""
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    array = list(map(int, stdin.readline().strip().split()))\n    minim = 0\n    for i in range(n):\n        if array[i] < array[0] or array[i] < array[1]:\n            minim = max(minim, array[i])\n    if minim == 0:\n        return \"0\"\n    else:\n        return str(minim - array[0] - array[1])\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def get_ints(inp: str) -> list:\n        return [int(n) for n in inp.split()]\n\n    n = int(stdin.readline())\n    a = get_ints(stdin.readline())\n\n    mini, maxi = min(a), max(a)\n    if mini == maxi:\n        return 0\n\n    return max(mini - min(a), maxi - mini)\n"
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"You are given an array $a$ consisting of $n$ integer numbers.\n\n    Let instability of the array be the following value: $\\max\\limits_{i = 1}^{n} a_i - \\min\\limits_{i = 1}^{n} a_i$.\n\n    You have to remove exactly one element from this array to minimize instability of the resulting $(n-1)$-elements array. Your task is to calculate the minimum possible instability.\n\n    -----Input-----\n\n    The first line of the input contains one integer $n$ ($2 \\le n \\le 10^5$) \u2014 the number of elements in the array $a$.\n\n    The second line of the input contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 10^5$) \u2014 elements of the array $a$.\n\n    -----Output-----\n\n    Print one integer \u2014 the minimum possible instability of the array if you have to remove exactly one element from the array $a$.\n\n    -----Examples-----\n\n    Input\n    4\n    1 3 3 7\n\n    Output\n    2\n\n    Input\n    2\n    1 100000\n\n    Output\n    0\n\n    \"\"\"\n    # Write your code here\n    stdin = stdin.split()\n    n = int(stdin[0])\n    a = [int(i) for i in stdin[1:]]\n    d = [a[i] - a[i - 1] for i in range(1, n)]\n    d.sort()\n    return max(d[1] - d[0], d[n - 1] - d[n - 2])\n"
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\n==== Tests ====\ndef"
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = list(map(int, stdin.split()))\n    a.sort()\n    mini = (a[0] - a[-1]) * (n - 1)\n    for i in range(n):\n        a[i] -= 1\n        mini = min(mini, (a[i] - a[i-1]) * (n - 1))\n    return mini\n\nprint(solution(input()))\n\n\nimport heapq\n\ndef"
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    arr = list(map(int, stdin.readline().strip().split(\" \")))\n    ans = float('inf')\n    for i in range(n):\n        ans = min(ans, max(arr) - min(arr))\n        arr[arr.index(max(arr))] = -1\n        arr[arr.index(min(arr))] = -1\n    print(ans)\n    return ''\n"
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    nums = [int(n) for n in stdin.split()]\n    n = len(nums)\n    if n == 1:\n        return 0\n    min_diff = 0\n    for i in range(n):\n        min_diff = max(min_diff, nums[i] - nums[0])\n        for j in range(i + 1, n):\n            min_diff = max(min_diff, nums[i] - nums[j])\n    return min_diff\n"
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Compute the solution\"\"\"\n    # your code here\n    return ''\n"
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    days = [0] * n\n    for _ in range(m):\n        s, d, p = map(int, stdin.readline().split())\n        days[s - 1] += p\n        if d < n:\n            days[d] -= p\n\n    for i in range(n):\n        if days[i] < 0:\n            return \"-1\"\n    return \" \".join(map(str, days))\n\n\ndef"
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.readline().split()]\n    pass_exams = [list(map(int, x.split())) for x in stdin.read().splitlines()]\n\n    # min_times = [0] * (n + 1)\n    # max_times = [0] * (n + 1)\n    # for i in range(1, m + 1):\n    #     s, d, c = pass_exams[i - 1]\n    #     min_times[s] = i\n    #     max_times[d] = i\n\n    # print(min_times)\n    # print(max_times)\n\n    # min_times_ = [0] * (n + 1)\n    # max_times_ = [0] * (n + 1)\n    # for i in range(1, m + 1):\n    #     s, d, c = pass_exams[i - 1]\n    #     min_times_[d] = i\n    #     max_times_[s] = i\n\n    # print(min_times_)\n    # print(max_times_)\n\n    # last_day = -1\n    # for d in range(1, n + 1):\n    #     if min_times[d]!= 0 and min_times_[d] == 0:\n    #         min_times[d] = -1\n    #         last_day = d\n    #         break\n\n    # print(min_times)\n    # for d in range(1, n + 1):\n    #     if min_times_[d]!= 0 and min_times[d] == 0:\n    #         min_times[d] = last_day + 1\n    #         last_day = d\n    #         break\n\n    # print(min_times)\n\n    min_times = [0] * (n + 1)\n    max_times = [0] * (n + 1)\n    for i in range(1, m + 1):\n        s, d, c = pass_exams[i - 1]\n        min_times[s] = max(min_times[s], i)\n        max_times[d] = max(max_times[d], i)\n\n    result = [0] * (n + 1)\n    for i in range(1, n + 1):\n        result[i] = max(min_times[i] + 1, max_times[i] + 1)\n\n    return''.join([str(x) for x in result])"
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nfrom itertools import permutations\nfrom typing import List, Tuple\n\n\ndef"
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    days, exams = map(int, stdin.split('\\n')[:2])\n    schedule = []\n    for i in range(exams):\n        day, rest, exam = map(int, stdin.split('\\n')[i + 2].split())\n        schedule.append(day - rest)\n    schedule.sort()\n    return '\\n'.join(map(str, schedule)) if set(schedule) == {0} else '-1'"
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def can_pass_all_exams(inp: list) -> bool:\n        for i in inp:\n            for j in inp:\n                if i[0] == j[0] and i[1] > j[1]:\n                    return False\n        return True\n\n    n, m = list(map(int, stdin.split('\\n')[0].split()))\n    inp = [list(map(int, i.split())) for i in stdin.split('\\n')[1:]]\n    if not can_pass_all_exams(inp):\n        return \"-1\"\n    inp.sort()\n    result = []\n    for i in range(m):\n        day = inp[i][0]\n        result.append(m + 1)\n        for j in range(i + 1, n):\n            if day == inp[j][0]:\n                result[-1] = j - i\n                break\n    return''.join(list(map(str, result)))\n\n\ndef"
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    days, exams = map(int, stdin.readline().split())\n    exam_dict = {exam: list(map(int, stdin.readline().split())) for exam in range(1, exams+1)}\n    exam_dict = dict(sorted(exam_dict.items(), key=lambda x: x[1][0]))\n    exam_dict = dict(sorted(exam_dict.items(), key=lambda x: x[1][1]))\n    exam_dict = dict(sorted(exam_dict.items(), key=lambda x: x[1][2]))\n    exam_dict = dict(sorted(exam_dict.items(), key=lambda x: x[1][0]))\n    exam_dict = dict(sorted(exam_dict.items(), key=lambda x: x[1][1]))\n    \n    pass_exams = {exam: [] for exam in range(1, exams+1)}\n    prep_exams = {exam: [] for exam in range(1, exams+1)}\n    for exam in exam_dict:\n        day, exam_start_num, exam_end_num = exam_dict[exam]\n        exam_end = stdin.readline().strip().split()\n        exam_end = list(map(int, exam_end))\n        exam_end_day = exam_end.index(day)\n        exam_end = exam_end[exam_end_day:]\n        for exam_time in exam_end:\n            prep_exams[exam].append(exam_time)\n        for exam_time in exam_end:\n            if exam_time < exam_start_num:\n                pass_exams[exam].append(exam_time)\n        if exam_end_num!= len(exam_end):\n            if exam_end_day == 0:\n                pass_exams[exam].append(exam_end_num)\n            elif exam_end_day > 0:\n                pass_exams[exam].append(exam_end_num + exam_start_num - 1)\n    \n    for exam in exam_dict:\n        day, exam_start_num, exam_end_num = exam_dict[exam]\n        if exam_start_num < day:\n            pass_exams[exam].append(day)\n        if exam_end_num < day:\n            pass_exams[exam].append(day + exam_end_num - exam_start_num + 1)\n    \n    pass_exams = dict(sorted(pass_exams.items(), key=lambda x: x[1]))\n    pass_exams = dict(sorted(pass_exams.items(), key=lambda x: x[0]))\n    prep_exams = dict(sorted(prep_exams.items(), key=lambda x: x[1]))\n    prep_exams = dict(sorted(prep_exams.items(), key=lambda x: x[0]))\n    if pass_exams == prep_exams:\n        return''.join([str(day) for day in prep_exams[list(prep_exams.keys())[0]]])\n    else:\n        return '-1'\n"
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    days = []\n    for i in range(m):\n        s, d, c = list(map(int, stdin.split()))\n        days.append([s, d, c])\n    days = sorted(days, key=lambda x: x[0])\n    pets = [[0] * (n + 1) for _ in range(m)]\n    prepared = 0\n    for day in days:\n        if prepared < day[0]:\n            if prepared + day[2] > n:\n                return '-1'\n            for i in range(prepared, day[0]):\n                pets[day[1] - 1][i] = (day[1] + 1)\n            prepared = day[0]\n            continue\n        for i in range(prepared, day[0]):\n            pets[day[1] - 1][i] = 0\n        prepared = day[0] + day[2]\n    return''.join(map(str, pets[-1]))\n"
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    days = [int(i) for i in stdin.split('\\n')[0].split()]\n    n = days[0]\n    m = days[1]\n    exams = []\n    for i in range(m):\n        exams.append(int(stdin.split('\\n')[i].split()[2]))\n    exams = sorted(exams, reverse=True)\n    exams = [exams[0]] + exams[1:]\n    exams = sorted(exams)\n    # print(exams)\n    stdin = stdin.split('\\n')[1:]\n    stdin = sorted(stdin, reverse=True)\n    i = 0\n    j = 0\n    while i < m:\n        if j >= n:\n            return '-1'\n        while j < n and exams[i] == stdin[j]:\n            j += 1\n        if j < n:\n            return '-1'\n        i += 1\n    answer = ''\n    for j in range(n):\n        if j % 10 == 0:\n            answer +=''\n        if stdin[j] == 0:\n            answer += '0'\n        else:\n            answer += str(exams.index(stdin[j]) + 1)\n    return answer"
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a % 3 == 0:\n        print(a // 3 - 1)\n    elif b % 3 == 0:\n        print(b // 3)\n    else:\n        print('-1')\n    return ''\n"
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    count = 0\n    while n!= m:\n        if n < m:\n            if n == 0:\n                return str(count)\n            if n % 3 == 0:\n                n = n // 3\n            else:\n                n -= 1\n            count += 1\n        else:\n            if m % 2 == 0:\n                m = m // 2\n            else:\n                m -= 1\n            count += 1\n    return str(count)\n"
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    steps = 0\n    while True:\n        if n % 2 == 0 and n % 3 == 0:\n            break\n        if n > m:\n            n = n // 2 if n % 2 == 0 else n // 3\n            steps += 1\n        else:\n            steps = -1\n            break\n    print(steps)\n    return None\n"
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split(\" \")]\n    if n % 2!= 0 or n < 1 or n > 10_000_000 or m < 1 or m > 10_000_000:\n        return \"Invalid input!\"\n    elif m % 3!= 0 or m < 1 or m > 10_000_000:\n        return \"Invalid input!\"\n    elif m % 2!= 0 or n < 1 or n > 10_000_000:\n        return \"Invalid input!\"\n    else:\n        if n == m:\n            return \"0\"\n        elif n == m // 2 or n == m // 3:\n            return \"1\"\n        elif n < m:\n            d = m - n\n            cnt = 1\n            while d % 2 == 0:\n                d //= 2\n                cnt += 1\n            while d % 3 == 0:\n                d //= 3\n                cnt += 1\n            if cnt > 1:\n                return str(cnt)\n            else:\n                return \"2\"\n        else:\n            return \"-1\"\n"
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n == m:\n        return 0\n    elif n > m:\n        if n % m == 0:\n            return 1\n        else:\n            return -1\n    else:\n        if m % n == 0:\n            return 1\n        else:\n            return -1\n"
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('120 51840')\n    7\n    >>> solution('42 42')\n    0\n    >>> solution('48 72')\n    -1\n    \"\"\"\n    n, m = [int(x) for x in stdin.split()]\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n    for i in range(1, m + 1):\n        dp[1][i] = abs(i - n)\n    for i in range(1, n + 1):\n        dp[i][1] = i\n\n    for i in range(2, n + 1):\n        for j in range(2, m + 1):\n            dp[i][j] = dp[i][j - 1] + dp[i - 1][j] - dp[i - 1][j - 1]\n            if i % 3 == 0 and j % 3 == 0:\n                dp[i][j] = min(dp[i][j], dp[i // 3][j // 3] + abs(i - j))\n    if dp[n][m] < 0:\n        return -1\n    return dp[n][m]\n"
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split(\" \")\n    a = int(a)\n    b = int(b)\n    c = a\n    d = b\n    if (b%2 == 0):\n        while c!= b:\n            if c%3 == 0:\n                if c%2 == 0:\n                    break\n                else:\n                    c = c//2\n            else:\n                if c%3 == 1:\n                    c = c*2\n                    break\n                else:\n                    c = c//3\n        if c == b:\n            print(c)\n        else:\n            print(-1)\n    elif (b%3 == 0):\n        while c!= b:\n            if c%2 == 0:\n                if c%3 == 0:\n                    break\n                else:\n                    c = c//3\n            else:\n                if c%2 == 1:\n                    c = c*2\n                    break\n                else:\n                    c = c//2\n        if c == b:\n            print(c)\n        else:\n            print(-1)\n    else:\n        print(-1)\n\nsolution(stdin)"
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    i, j = n, m\n    c = 0\n    while i!= j:\n        if i < j:\n            if i == 2:\n                i *= 3\n                c += 1\n            else:\n                i *= 2\n                c += 1\n        elif i > j:\n            if j == 2:\n                j *= 3\n                c += 1\n            else:\n                j *= 2\n                c += 1\n    if i == m:\n        return str(c)\n    else:\n        return '-1'\n"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    text, subtext = stdin.split()\n    print(text * (int(subtext) // len(text) + 1))\n\n\ndef"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    import sys\n    n, k = map(int, sys.stdin.readline().split())\n    t = sys.stdin.readline().rstrip()\n    \n    result = []\n    \n    for i in range(n - k + 1):\n        result.append(t[i: i + k])\n        \n    return ''.join(result)\n"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    s = stdin[:n]\n    n, k = len(s), k - 1\n    t = stdin[:k]\n    res = s + s\n    if n > 1:\n        for i in range(n - 1):\n            curr = t * (n - i - 1)\n            tmp = res[-k:]\n            if curr in tmp:\n                res = tmp + curr\n                break\n    print(res)\n    return res\n"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n  # get parameters\n  string = stdin[0].strip()\n  k = int(stdin[1])\n\n  # make sure it's unique\n  if k > len(set(string)):\n    return string\n\n  # make a dictionary of all strings of length n\n  string_dict = {}\n  for i in range(len(string)):\n    string_dict[string[i]] = string_dict.get(string[i], []) + [string[i : i + len(string) - k + 1]]\n\n  # make a dictionary of the unique strings\n  unique_string_dict = {}\n  for key, value in string_dict.items():\n    if len(value) == k:\n      unique_string_dict[key] = value\n\n  # make a list of the keys\n  unique_string_list = [i for i in unique_string_dict.keys()]\n\n  # make a list of substrings\n  substrings = []\n  for key, value in unique_string_dict.items():\n    for string in value:\n      substrings.append(string)\n\n  # sort the substrings\n  substrings.sort()\n\n  # make a string from the substrings\n  string = \"\"\n  for substring in substrings:\n    string += substring\n\n  return string\n\n\ndef"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    t = stdin.split()[1]\n\n    s = ''\n    for i in range(n):\n        for j in range(i, n):\n            if s.count(t[i:j+1]) == k:\n                return s + t[i:j+1]\n            s += t[i:j+1]\n"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin.split()\n    string = string[0]\n    k = int(string[1])\n    n = len(string)\n    res = [0 for _ in range(n + 1)]\n    k_diffs = [0 for _ in range(k + 1)]\n    for i in range(n):\n        res[i + 1] = res[i] + (string[i] == string[i - 1])\n    for i in range(1, n):\n        k_diffs[res[i] + 1] += 1\n    for i in range(1, k):\n        k_diffs[i] = k_diffs[i - 1]\n    for i in range(n - 1):\n        if k_diffs[res[i] + 1] > 0:\n            if k_diffs[res[i] + 1] > k_diffs[res[i]]:\n                res[i] += 1\n                k_diffs[res[i] + 1] -= 1\n    j = 0\n    while res[j]!= k - 1:\n        j += 1\n    while j < n:\n        print(string[j], end=\"\")\n        j += 1\nsolution(input())\n"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    t = stdin[:n]\n    if k < n:\n        t = stdin[:k]\n    elif k == n:\n        return t\n    arr = []\n    for i in range(n):\n        for j in range(i, n):\n            sub = t[i:j]\n            if sub == sub[::-1] and len(sub) < n:\n                arr.append(sub)\n    arr.sort(key=len)\n    return arr[k - 1]\n"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    t = stdin\n    s = ''\n    for i in range(k):\n        s += t[i]\n    while True:\n        flag = False\n        for i in range(k):\n            if s[i]!= t[i]:\n                flag = True\n                break\n        if not flag:\n            return s\n        s += t[k]\n"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    t = stdin[:n]\n\n    return t + t[:k-1] * (k-1)\n"
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return all index of the array that can make the array good\n    \"\"\"\n   ..."
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0438\u043d\u0434\u0435\u043a\u0441\u044b \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u0432 \u043c\u0430\u0441\u0441\u0438\u0432\u0435, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043c\u043e\u0436\u043d\u043e \u0443\u0434\u0430\u043b\u0438\u0442\u044c.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    \n"
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \n    def find_nice_removals(nums: str) -> list:\n        # list of all possible sums from the input string\n        sums = []\n        for i in range(0, len(nums)):\n            # print('num', nums[i])\n            sums.append(sum(map(int, nums[i:])))\n        # print(sums)\n        \n        # list of all numbers from the input string that sum up to the largest number in sums\n        nice_numbers = []\n        for s in sums:\n            # print('s', s)\n            for num in nums:\n                # print('num', num)\n                if s - int(num) in nums:\n                    # print('{} - {} = {}'.format(s, int(num), s-int(num)))\n                    nice_numbers.append(num)\n                    break\n        return nice_numbers\n    \n    # parse input\n    n = int(stdin.readline())\n    a = stdin.readline().split()\n    nums = list(map(int, a))\n    \n    nice_removals = find_nice_removals(a)\n    # print(nice_removals)\n    if not nice_removals:\n        print(0)\n    else:\n        # print(nice_removals)\n        print(len(nice_removals))\n        print(*nice_removals)\n    return ''"
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \n\"\"\"\n\n\n\ndef"
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\"\"\"\n\na = list(map(int, stdin.split()))\n\ndef"
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = stdin.split()\n    s = stdin.strip()\n    if len(s) < k:\n        return -1\n    if len(s) == k:\n        return 0\n    return len(s) - k + 1\n\nprint(solution(\"ajihiushda\"))\n"
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = stdin.split('\\n')\n    s = stdin.split('\\n')[1]\n    return n - len(s)\n"
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return \"\"\n"
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def _gen(s: str) -> [str]:\n        res = []\n        for i in range(1, len(s)+1):\n            for j in range(i):\n                yield s[j:i]\n\n    def _check(s: str, size: int) -> bool:\n        if len(s) < size:\n            return False\n        s = set(s)\n        return size == len(s)\n\n    n, k = stdin.split()\n    n, k = int(n), int(k)\n    s = stdin.split()[0]\n\n    # if len(s) < n or n < 1:\n    #     raise ValueError\n    # if k < 1 or k > 10 ** 12:\n    #     raise ValueError\n    # if not s.isalpha():\n    #     raise ValueError\n\n    # print(_check('asdf', 5))\n\n    # print(next(_gen('asdf')))\n\n    cost = 0\n    for t in _gen(s):\n        cost += len(t) - len(set(t))\n    if cost <= k:\n        return cost\n    return -1\n"
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    s = stdin.split()\n    dp = [k + 1] * (k + 1)\n    dp[0] = 0\n    for i in range(1, n + 1):\n        dp[i % k] = min(dp[(i - 1) % k] + 1, dp[(i - 1) % k] + n - i + 1)\n    return -1 if dp[k - 1] == k + 1 else dp[k - 1]\n"
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # return \"\"\n    # Your code here\n    # return \"\"\n    # Your code here\n    return \"\""
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin[:-1]\n    # print(n, k, s)\n\n    sols = ['']\n    for i in s:\n        n -= len(sols[-1]) + 1\n        if n > 0:\n            sols = [x + i for x in sols]\n            n += len(i)\n        else:\n            break\n\n    print(n)\n    if n > 0:\n        return -1\n    else:\n        return len(sols[-1])\n"
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(i) for i in stdin.split()]\n    s = stdin[1:]\n    # if k == 1:\n    #     print(sum(list(map(lambda x: 0 if x!= 0 else x, [1] * n))))\n    #     return\n    print(helper(s, k, {}, 0))\n    return None\n\n\ndef"
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4 5\\nasdf\")\n    4\n    >>> solution(\"5 6\\naaaaa\")\n    15\n    >>> solution(\"5 7\\naaaaa\")\n    -1\n    >>> solution(\"10 100\\najihiushda\")\n    233\n    \"\"\"\n    s, k = stdin.split(\"\\n\")\n    s = s.replace(\"\\n\", \"\")\n    k = int(k)\n\n    cost = 0\n    for i in range(1, len(s) + 1):\n        for j in range(i + 1, len(s) + 1):\n            t = s[i - 1:j]\n            if t not in set(s):\n                if len(t)!= k:\n                    continue\n                cost += len(t)\n    if cost < 0:\n        return -1\n    return cost\n"
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n    return \"\"\n\"\"\"\n\n\nfrom queue import Queue\nfrom collections import defaultdict\n\n\ndef"
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return \"\""
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    # Your code goes here.\n    return \"\"\n"
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    return 'YES' if stdin == 'YES' else 'NO'"
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n"
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\"\"\"\n"
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\ndef"
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\""
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    h1, m1 = [int(i) for i in stdin.split(':')]\n    h2, m2 = [int(i) for i in stdin.split(':')]\n    h3 = (h1 + h2) // 2\n    m3 = (m1 + m2) // 2\n    print('{:0>2d}:{:0>2d}'.format(h3, m3))\n    return"
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    h1, m1 = stdin.split(\":\")\n    h2, m2 = stdin.split(\":\")\n    h1, m1 = int(h1), int(m1)\n    h2, m2 = int(h2), int(m2)\n\n    if m1 == m2:\n        m3 = (60 - m1) // 2 + m1\n    elif m1 > m2:\n        m3 = m1 + m2 + 60 - m1 - m2\n    else:\n        m3 = (60 - m1) // 2 + m1\n\n    if m3 < 10:\n        m3 = f\"0{m3}\"\n\n    if h1 == h2:\n        h3 = h1\n    elif h1 < h2:\n        h3 = h1 + h2\n    else:\n        h3 = h1 + h2 + 24 - h1 - h2\n\n    if h3 < 10:\n        h3 = f\"0{h3}\"\n    return f\"{h3}:{m3}\"\n"
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    h1, m1 = stdin.split(':')\n    h2, m2 = stdin.split(':')\n    return f'{int(h1) + int(h2) - 1}:{int(m1) + int(m2) // 2:02d}'\n"
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    start_str = stdin.split(\"\\n\")[0].split(\" \")[0] + \":\" + stdin.split(\"\\n\")[0].split(\" \")[1]\n    end_str = stdin.split(\"\\n\")[1].split(\" \")[0] + \":\" + stdin.split(\"\\n\")[1].split(\" \")[1]\n\n    start_h, start_m = int(start_str.split(\":\")[0]), int(start_str.split(\":\")[1])\n    end_h, end_m = int(end_str.split(\":\")[0]), int(end_str.split(\":\")[1])\n\n    time_diff = (end_h - start_h) * 60 + end_m - start_m\n    time_diff_div_2 = time_diff // 2\n    time_diff_mod_2 = time_diff % 2\n\n    time_mod_2_h = time_diff_mod_2 // 60\n    time_mod_2_m = time_diff_mod_2 % 60\n    \n    return str(start_h + time_mod_2_h) + \":\" + str(start_m + time_mod_2_m)"
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    h1, m1, h2, m2 = [int(x) for x in stdin.strip().split()]\n    if m1 == m2:\n        h = h1 + (h2 - h1) // 2\n        return f'{h:02d}:00'\n    else:\n        h = h1 + ((h2 - h1) // 2) + ((h2 - h1) % 2)\n        return f'{h:02d}:30'\n"
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    time1 = stdin.split(':')\n    time1[0] = int(time1[0])\n    time1[1] = int(time1[1])\n    time2 = stdin.split(':')\n    time2[0] = int(time2[0])\n    time2[1] = int(time2[1])\n    time1[0], time2[0] = time1[0] + time1[1] / 60, time2[0] + time2[1] / 60\n    if time1[1] >= time2[1]:\n        return f'{time1[0]}:{time1[1] - time2[1]}'\n    return f'{time2[0] - time1[0]}:00'\n\nsolution(stdin)\n"
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    h1, m1 = [int(n) for n in stdin.split(':')]\n    h2, m2 = [int(n) for n in stdin.split(':')]\n    h3 = ((h1 + h2) // 2) % 24\n    m3 = ((m1 + m2) // 2) % 60\n    return '{0:0=2d}:{1:0=2d}'.format(h3, m3)\n"
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    h1, m1 = stdin.split(\":\")\n    h2, m2 = stdin.split(\":\")\n    h3 = (int(h1) + int(h2)) // 2\n    m3 = (int(m1) + int(m2)) // 2\n    if m3 < 10:\n        m3 = \"0\" + str(m3)\n    return str(h3) + \":\" + str(m3)\n"
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Your solution here\n    \"\"\"\n    h1, m1 = stdin.split(\":\")\n    h2, m2 = stdin.split(\":\")\n    return str(int(h1 + h2) // 2) + \":\" + str(int(m1 + m2) // 2)\n\nprint(solution(\"10:00\"))\nprint(solution(\"11:00\"))\nprint(solution(\"11:10\"))\nprint(solution(\"01:02\"))\n"
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()\n    a = s[0]\n    b = s[1]\n    h1 = int(a[0:2])\n    m1 = int(a[3:])\n    h2 = int(b[0:2])\n    m2 = int(b[3:])\n    if h1 < h2:\n        h3 = h1 + 1\n        m3 = m1 + m2 // 2\n    elif h1 == h2:\n        if m1 < m2:\n            h3 = h1 + 1\n            m3 = m1 + m2 // 2\n        else:\n            h3 = h1\n            m3 = m1 + m2 // 2\n    else:\n        h3 = h1\n        m3 = m1 + m2 // 2\n    if m3 >= 60:\n        h3 += 1\n        m3 -= 60\n    if h3 < 0:\n        h3 += 24\n    return f'{h3:02}:{m3:02}'\n"
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin)\n    ans = 0\n    i = 1\n    while True:\n        if i * i > num:\n            ans = i\n            break\n        i += 1\n    return ans\n"
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    d = int(stdin)\n    d += 1\n    a = 0\n    b = 0\n    while d > 1:\n        if d % 2 == 0:\n            d //= 2\n        else:\n            a += 1\n            d -= 1\n            d //= 2\n        b += 1\n    return a, b\n"
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return 1\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    max_digit = 0\n    result = 0\n    while stdin:\n        digit = stdin % 10\n        if digit > max_digit:\n            max_digit = digit\n            result = 1\n        stdin //= 10\n    return result\n"
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if (a < 2):\n        return 1\n    if (a == 2):\n        return 2\n    if (a == 3):\n        return 3\n    if (a % 2 == 0):\n        return solution(a // 2) + 1\n    if (a % 3 == 0):\n        return solution(a // 3) + 1\n    if (a % 5 == 0):\n        return solution(a // 5) + 1\n    return solution(a // 3) + 1"
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"https://app.codility.com/demo/results/trainingQCKH5-9A6/\"\"\"\n    # cast to int\n    a = int(stdin)\n\n    # use bitwise operators\n    i = a >> 1\n    while i > 0:\n        if a & i == 0:\n            return 1\n        i >>= 1\n\n    return 0\n"
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return None"
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return None\n"
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution to the problem.\n    \"\"\"\n    return str(solution_impl(stdin))\n\ndef"
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4\\n1 3\\n2 6\\n0 4\\n3 3\")\n    '1'\n    >>> solution(\"5\\n2 6\\n1 3\\n0 4\\n1 20\\n0 4\")\n    '2'\n    >>> solution(\"3\\n4 5\\n1 2\\n9 20\")\n    '0'\n    >>> solution(\"2\\n3 10\\n1 5\")\n    '7'\n    \"\"\"\n    #\n    #\n    #\n    #\n    #\n    pass\n"
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    segments = [list(map(int, line.split())) for line in stdin.splitlines()]\n\n    # set of intervals with one non-overlapping segment and\n    # the most right extreme point\n    not_overlapping = set()\n\n    # return the longest common subsequence\n    def longest_common_subsequence(\n        not_overlapping,\n        s,\n        e\n    ) -> int:\n        if s == e:\n            return 0\n        else:\n            # if the set is empty return 0\n            if not not_overlapping:\n                return 0\n            # otherwise return the longest subsequence from one of the segments\n            else:\n                return max(\n                    # the longest common subsequence of the largest subsequence\n                    # that does not intersect with not_overlapping\n                    longest_common_subsequence(\n                        not_overlapping.difference({segment[0], segment[1]}),\n                        segment[0],\n                        segment[1]\n                    ) + segment[2],\n                    # the longest common subsequence of the largest subsequence\n                    # that does not intersect with not_overlapping\n                    longest_common_subsequence(\n                        not_overlapping.difference({segment[0], segment[1]}),\n                        segment[1],\n                        segment[0]\n                    ) + segment[2]\n                )\n    # iterate over all segments\n    for segment in segments:\n        # if there is no other segment with the same right end point\n        if not not_overlapping.intersection({segment[0], segment[1]}):\n            # add the right end point to the set\n            not_overlapping.add(segment[1])\n        # if there is no other segment with the same left end point\n        if not not_overlapping.intersection({segment[0], segment[1]}):\n            # add the left end point to the set\n            not_overlapping.add(segment[0])\n\n    # return the longest common subsequence\n    return max(\n        # the longest common subsequence of the largest subsequence\n        # that does not intersect with not_overlapping\n        longest_common_subsequence(\n            not_overlapping,\n            0,\n            segments[0][0]\n        ) + segments[0][2],\n        # the longest common subsequence of the largest subsequence\n        # that does not intersect with not_overlapping\n        longest_common_subsequence(\n            not_overlapping,\n            segments[-1][1],\n            10 ** 9\n        ) + segments[-1][2],\n    )\n"
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # Replace pass above with your code\n    # pass\n    pass"
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n    n = int(stdin.readline())\n    segments = [map(int, stdin.readline().split()) for i in range(n)]\n    segments.sort()\n    sorted_segments = [seg for _, seg in sorted(zip(segments, segments))]\n    del sorted_segments[0]\n    segments = sorted_segments\n    left = segments[0][0]\n    right = segments[-1][1]\n    total = len(segments)\n    res = 0\n    while left <= right:\n        mid = (left + right) // 2\n        count = 1\n        length = 0\n        for segment in segments:\n            if length > mid:\n                break\n            length += segment[1] - segment[0] + 1\n            count += 1\n        if count < total:\n            res = mid\n            right = mid - 1\n        else:\n            left = mid + 1\n    return res\n\ndef"
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution for this problem.\"\"\"\n    pass\n"
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    n = int(stdin.readline().strip())\n    intersections = []\n    for i in range(n):\n        line = stdin.readline().strip().split(\" \")\n        intersections.append(list(map(int, line)))\n    intersections = sorted(intersections, key=lambda x: x[1])\n    a = intersections[0]\n    b = intersections[-1]\n    # \u53bb\u9664\u91cd\u5408\u533a\u57df\n    if a[0] < b[0] < a[1] < b[1]:\n        if a[1] == b[1]:\n            intersections.pop()\n        else:\n            intersections.pop(0)\n            intersections.pop()\n    elif a[0] < b[0] < a[1] < b[1]:\n        if b[0] == a[1]:\n            intersections.pop()\n        else:\n            intersections.pop(0)\n            intersections.pop()\n    # \u5224\u65ad\u6700\u5927\u533a\u57df\n    max_intersections = 0\n    for i in range(1, len(intersections)):\n        if a[1] < intersections[i][0] < b[1]:\n            continue\n        else:\n            intersections[i][0] = a[1]\n            intersections[i][1] = b[0]\n    intersections = sorted(intersections, key=lambda x: x[0])\n    for i in range(1, len(intersections)):\n        if intersections[i][0] == intersections[i - 1][1]:\n            continue\n        else:\n            intersection_length = intersections[i][0] - intersections[i - 1][1]\n            if intersection_length > max_intersections:\n                max_intersections = intersection_length\n    print(max_intersections)\n    return max_intersections\n"
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the maximal possible length of the intersection of $(n - 1)$ remaining segments after you remove exactly one segment from the sequence.\"\"\"\n    line = stdin.split('\\n')\n    # the number of segments in the sequence\n    n = int(line[0])\n    # list of length n of each segment, each segment is a tuple (left, right)\n    segments = [(int(l), int(r)) for l, r in line[1:n+1]]\n    # initialize the intersection with the first segment\n    intersection = segments[0]\n\n    # for each segment in the sequence, check if it intersects with the intersection\n    # if it does, add it to the intersection and check the length\n    # if it doesn't, then remove it from the intersection\n    # the new intersection is the intersection of the remaining segments\n    for segment in segments[1:]:\n        if intersection[0] <= segment[0] <= intersection[1] or intersection[0] <= segment[1] <= intersection[1] or segment[0] <= intersection[0] <= segment[1] or segment[0] <= intersection[1] <= segment[1]:\n            intersection = [max(intersection[0], segment[0]), min(intersection[1], segment[1])]\n        else:\n            intersection = [min(intersection[0], segment[0]), max(intersection[1], segment[1])]\n    # return the length of the intersection\n    return str(max(intersection[1] - intersection[0] + 1, 0))\n\n\ndef"
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\"Yes\n    No\"\"\"\n\n\"\"\"\nGiven a number n, print a pyramid of size n using the asterisk symbol.\n\nFor example, if n = 4, then print:\n\n****\n***\n**\n*\nNote that you must print a new line after printing the last row of the pyramid.\n\nInput Format:\n\nThe first and only line of input contains the integer, n.\n\nConstraints:\n\n1 \u2264 n \u2264 100\n\nOutput Format:\n\nPrint n lines where each line i (where 1 \u2264 i \u2264 n) contains a pyramid of asterisks of height i.\n\nSample Input:\n\n4\nSample Output:\n\n****\n***\n**\n*\n\"\"\"\ndef"
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def is_complete(n, a):\n        return n == len(set(a))\n\n    n = int(stdin.readline().strip())\n    a = [int(x) for x in stdin.readline().strip().split(\" \")]\n    if is_complete(n, a):\n        return \"YES\"\n    for i in range(n):\n        if i == 0 and a[i]!= 1:\n            return \"NO\"\n        if i == n - 1 and a[i]!= n:\n            return \"NO\"\n        if a[i - 1]!= a[i] and a[i]!= a[i + 1]:\n            return \"NO\"\n    return \"NO\"\n"
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n = int(lines[0])\n    a = list(map(int, lines[1].split()))\n\n    if n == 1:\n        return \"YES\"\n    elif n == 2:\n        if a[0] == a[1]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    else:\n        s = set(a)\n        if len(s) == n:\n            return \"YES\"\n        elif len(s) == 1:\n            return \"NO\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns 'YES' if Vova can complete the wall using any amount of bricks (possibly zero).\n\n    Otherwise returns 'NO'.\n\n    >>> solution('5\\n2 1 1 2 5')\n    'YES'\n    >>> solution('3\\n4 5 3')\n    'NO'\n    >>> solution('2\\n10 10')\n    'YES'\n    \"\"\"\n    n = int(stdin.readline())\n    heights = [int(x) for x in stdin.readline().split()]\n\n    # \u0435\u0441\u043b\u0438 \u0440\u0430\u0437\u043d\u043e\u0441\u0442\u044c \u043c\u0435\u0436\u0434\u0443 \u0442\u0435\u043a\u0443\u0449\u0435\u0439 \u0438 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0435\u0439 \u0432\u044b\u0441\u043e\u0442\u043e\u0439 \u0441\u0442\u0435\u043d\u044b \u043c\u0435\u043d\u044c\u0448\u0435 1\n    # \u043d\u0435\u0442 \u0441\u043c\u044b\u0441\u043b\u0430 \u0432\u044b\u0431\u0438\u0440\u0430\u0442\u044c \u0431\u0440\u0438\u0442\u0432\u0443, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0432\u044b\u0431\u0438\u0440\u0430\u0435\u043c \u0431\u0440\u0438\u0442\u0432\u0443 \u043a\u0430\u043a \u0445\u043e\u0442\u044f \u0431\u044b \u043d\u0430 \u043e\u0434\u043d\u0443 \u0432\u044b\u0441\u043e\u0442\u0443 \u0431\u043e\u043b\u044c\u0448\u0435\n    prev_height = heights[0]\n    for curr_height in heights:\n        if curr_height - prev_height > 1:\n            return 'NO'\n        prev_height = curr_height\n    return 'YES'\n"
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    total_parts = int(stdin.readline())\n    current_heights = list(map(int, stdin.readline().split()))\n    current_heights_size = len(current_heights)\n    answer = \"YES\"\n    for i in range(current_heights_size - 1):\n        if current_heights[i] == current_heights[i + 1]:\n            current_heights[i] += 1\n            current_heights[i + 1] += 1\n    if current_heights[-1] == current_heights[0]:\n        current_heights[-1] += 1\n        current_heights[0] += 1\n    if current_heights_size!= len(set(current_heights)):\n        answer = \"NO\"\n    return answer\n"
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Complete the code below to find the maximum number of bricks that can be placed in the wall.\n    The input will be in the following format:\n        the first line will contain an integer that represents the number of parts of the wall\n        the second line will contain n integers with the height of each part\n    \"\"\"\n    # Write your code here\n    \n    \n    return \"\""
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"5\\n2 1 1 2 5\\n\")\n    'YES'\n    >>> solution(\"3\\n4 5 3\\n\")\n    'NO'\n    >>> solution(\"2\\n10 10\\n\")\n    'YES'\n    \"\"\"\n   ..."
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \n    #write your code in Python 3.6\n    num_parts = int(stdin.readline().strip())\n    wall = list(map(int, stdin.readline().strip().split()))\n    \n    all_equal = True\n    non_equal = False\n    if len(set(wall)) == 1:\n        non_equal = True\n    \n    for idx in range(num_parts - 1):\n        if wall[idx] == wall[idx + 1]:\n            all_equal = True\n        else:\n            all_equal = False\n            break\n    \n    if all_equal:\n        if non_equal:\n            print(\"NO\")\n        else:\n            print(\"YES\")\n    else:\n        print(\"NO\")\n        \n"
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    _, k = list(map(int, stdin.split(' ')))\n    n = int(stdin)\n    s = list(stdin)\n\n    l, r = 0, len(s) - 1\n    # sum = 0\n    # while r > 0:\n    #     sum += r - l\n    #     l += 1\n    #     r -= 1\n    # if k == 1:\n    #     return sum\n\n    # dp = [[0 for i in range(k + 1)] for j in range(n + 1)]\n    # for i in range(1, n + 1):\n    #     for j in range(1, k + 1):\n    #         if j < s[i - 1]:\n    #             dp[i][j] = dp[i - 1][j]\n    #         else:\n    #             dp[i][j] = min(dp[i - 1][j], dp[i - 1][j - s[i - 1]] + 1)\n    #     sum += dp[i][j]\n    # if k < 1:\n    #     return sum\n    # else:\n    #     return sum - dp[n][k]\n\n    # dp = [[0 for i in range(k + 1)] for j in range(n + 1)]\n    # for i in range(1, n + 1):\n    #     for j in range(1, k + 1):\n    #         if j < s[i - 1]:\n    #             dp[i][j] = dp[i - 1][j]\n    #         else:\n    #             dp[i][j] = min(dp[i - 1][j], dp[i - 1][j - s[i - 1]] + 1)\n    #     sum += dp[i][j]\n    # return sum\n"
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin[0:n]\n\n    dp = [[0] * (k + 1) for _ in range(n + 1)]\n    dp[0][0] = 0\n\n    for i in range(1, n + 1):\n        dp[i][0] = i\n        for j in range(1, k + 1):\n            if j > i:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = min(dp[i - 1][j], dp[i - 1][j - i] + i)\n\n    if dp[n][k] == n:\n        print(-1)\n    else:\n        print(dp[n][k])\n\n    return ''\n"
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    for t in possible_subsequences(s):\n        if t in S:\n            return len(t) * n - sum(n - len(i) for i in possible_subsequences(t))\n"
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    #n, k = [int(i) for i in stdin.split()]\n    #s = stdin\n    s = \"aaaaa\"\n    n = len(s)\n    k = 6\n    dp = [[0] * (k+1) for _ in range(n+1)]\n    for i in range(1, n+1):\n        dp[i][1] = i\n    for j in range(1, k+1):\n        dp[1][j] = j\n\n    for i in range(2, n+1):\n        for j in range(2, k+1):\n            dp[i][j] = dp[i-1][j-1] + min([dp[i-1][j-1], dp[i-1][j]])\n    return dp[n][k] if dp[n][k]!= k else -1\n\nn = 10\nk = 100\ns = \"aaaaa\"\ndp = [[0] * (k+1) for _ in range(n+1)]\nfor i in range(1, n+1):\n    dp[i][1] = i\nfor j in range(1, k+1):\n    dp[1][j] = j\nfor i in range(2, n+1):\n    for j in range(2, k+1):\n        dp[i][j] = dp[i-1][j-1] + min([dp[i-1][j-1], dp[i-1][j]])\nprint(dp[n][k])\n"
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return \"\""
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    if n > k:\n        return '-1'\n    elif n == k:\n        return '0'\n    result = 0\n    while n > k:\n        n -= 1\n        result += 1\n    return result\n"
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = stdin.split()\n    n = int(n)\n    k = int(k)\n    s = stdin[2:len(stdin)]\n\n    cost = 0\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            if len(set(s[i:j + 1])) == k:\n                cost = cost + j - i + 1\n    if cost == 0:\n        return -1\n    else:\n        return cost\n"
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\ndef"
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \n    n, k = map(int, stdin.split())\n    \n    s = stdin.strip()\n    \n    cost = n - len(set(s))\n    \n    \n    def get_cost(prefix):\n        count = 0\n        for char in prefix:\n            if char not in s:\n                count += 1\n        return count\n    \n    def is_ok(k, prefix):\n        return len(set(prefix)) == k\n    \n    def dfs(k, prefix, cost):\n        nonlocal ans\n        if not is_ok(k, prefix):\n            return\n        if len(prefix) == k:\n            ans = min(ans, cost)\n            return\n        for i in range(n):\n            dfs(k, prefix + s[i], cost + get_cost(prefix) - get_cost(s[:i]))\n    \n    ans = float('inf')\n    dfs(k, \"\", cost)\n    return ans if ans < float('inf') else -1\n"
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\n=======\n"
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    return min(a, b, c) * 2 + max(a, b, c)\n"
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = (int(x) for x in stdin.split())\n    dp = [[0, 0, 0]] * (a+1)\n    dp[1] = [a, 0, 0]\n    for i in range(2, a+1):\n        dp[i][0] = min(dp[i-1][1], dp[i-1][2])\n        dp[i][1] = min(dp[i-1][0], dp[i-1][2])\n        dp[i][2] = min(dp[i-1][0], dp[i-1][1])\n    return dp[a][0]\n"
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    (a, b, c) = map(int, stdin.split())\n    print(3 * (a - 1) + 3 * (b - 1) + 2 * (c - 1))\n    return ''\n"
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(x) for x in stdin.split()]\n    \n    d = [0] * 7\n    d[0] = 0\n    d[1] = 0\n    d[2] = b\n    d[3] = c\n    for i in range(4, 7):\n        d[i] = d[i-1] + d[i-2] + d[i-3]\n    print(max(d))\n    return ''\n\"\"\"\n\na, b, c = [int(x) for x in input().split()]\nd = [0] * 7\nd[0] = 0\nd[1] = 0\nd[2] = b\nd[3] = c\nfor i in range(4, 7):\n    d[i] = d[i-1] + d[i-2] + d[i-3]\nprint(max(d))\n"
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return '9'\n"
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    return (((a + b + c) // 4) + (a + b + c) % 4)\n"
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the best day to start your trip to eat without additional food.\n\n    Args:\n        stdin (str): String with three positive integers a, b and c in that order.\n\n    Returns:\n        str: String with the maximum number of days to start your trip to eat without additional food.\n    \"\"\"\n    food = [int(number) for number in stdin.split()]\n    a, b, c = food\n    # Number of days\n    d = [0, 0, 0]\n    d[0] = a // 2 + (b + c) // 3\n    d[1] = b // 2 + (a + c) // 3\n    d[2] = c // 2 + (a + b) // 3\n    d[3] = min(d[0], d[1], d[2])\n    return f\"{d[3]}\"\n"
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    this function returns 'YES' or 'NO' based on whether Masha can\n    or cannot construct a square.\n    \"\"\"\n    \n    # read the input\n    t = int(stdin.readline())\n    for _ in range(t):\n        # read the input\n        n, m = [int(x) for x in stdin.readline().split()]\n        # a dict of tile types\n        tile_types = {}\n        # read the tile types\n        for _ in range(n):\n            # read the tile\n            tile_type, x, y = [int(x) for x in stdin.readline().split()]\n            # add the tile to the tile types\n            if tile_type not in tile_types:\n                tile_types[tile_type] = set()\n            tile_types[tile_type].add((x, y))\n        # construct the square\n        square = []\n        for _ in range(m):\n            row = [0] * m\n            square.append(row)\n        for i in range(m):\n            for j in range(m):\n                # get the top-left corner\n                topleft = square[i][j] = next(iter(tile_types[tile] for tile in tile_types if (tile, tile) in tile_types))\n                # get the top-right corner\n                topright = square[i][j + 1] = next(iter(tile_types[tile] for tile in tile_types if (tile, tile) in tile_types))\n                # get the bottom-left corner\n                bottomleft = square[i + 1][j] = next(iter(tile_types[tile] for tile in tile_types if (tile, tile) in tile_types))\n                # get the bottom-right corner\n                bottomright = square[i + 1][j + 1] = next(iter(tile_types[tile] for tile in tile_types if (tile, tile) in tile_types))\n                # if there is a duplicate tile in one of the corners, it is not symmetric\n                if any(tile == topleft and tile == topright for tile in tile_types.get(topleft, [])):\n                    return \"NO\"\n                if any(tile == bottomleft and tile == bottomright for tile in tile_types.get(bottomleft, [])):\n                    return \"NO\"\n                if any(tile == topleft and tile == bottomleft for tile in tile_types.get(topleft, [])):\n                    return \"NO\"\n                if any(tile == topright and tile == bottomright for tile in tile_types.get(topright, [])):\n                    return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    pass\n    \n    \n"
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return \"NO\"\n"
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3 4\\n1 2\\n5 6\\n5 7\\n7 4\\n8 9\\n9 8\\n2 5\\n1 1\\n1 1\\n1 2\\n3 4\\n1 2\\n1 1\\n1 1\\n\")\n    YES\n    \"\"\"\n    # TODO: Complete solution\n    return ''\n"
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time Complexity: O(n * m * log n)\n    Space Complexity: O(n)\n    \"\"\"\n    t = int(stdin.readline())\n    for _ in range(t):\n        n, m = map(int, stdin.readline().split())\n        tiles = []\n        for _ in range(2 * n):\n            tiles.append(list(map(int, stdin.readline().split())))\n        if _is_symmetric_matrix(tiles, n, m):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\n\ndef"
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N % 2 == 1:\n        return f\"{sum(range(1, int(N / 2) + 1))}\\n{sum(range(int(N / 2) + 1, N + 1))}\"\n    return f\"{sum(range(1, int(N / 2) + 1))}\\n{sum(range(int(N / 2) + 1, N))}\"\n    # \u041a\u043e\u043c\u0430\u043d\u0434\u0430 \u0437\u0430\u043c\u0435\u043d\u0438\u043b\u0430 \u043d\u0430 \u0441\u0442\u0440\u043e\u043a\u0438, \u0442\u0430\u043a \u043a\u0430\u043a \u0442\u0430\u043a\u043e\u0435 \u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u0432\u0441\u0435\u0433\u0434\u0430 \u0431\u0443\u0434\u0435\u0442 \u0432\u0435\u0440\u043d\u044b\u043c \u0438 \u043d\u0430 \u044d\u0442\u043e \u0437\u0430\u043d\u0438\u043c\u0430\u0435\u0442 \u043c\u0435\u043d\u044c\u0448\u0435 \u0432\u0440\u0435\u043c\u0435\u043d\u0438\n"
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def f(n):\n        n = int(n)\n        h = n // 2\n        return h * (h + 1) - n\n\n    n = stdin.strip()\n    return str(f(n))\n"
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(n)\n"
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution to 'Minimum difference between two sets' codewars question.\"\"\"\n    # Split the input string into two sets and check their difference\n    sets = stdin.split('\\n\\n')\n    sets[0] = sets[0].split('\\n')[1:]\n    sets[1] = sets[1].split('\\n')[1:]\n    print(abs(sum(map(int, sets[0])) - sum(map(int, sets[1]))))\n    return ''\n"
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return \"1\"\n"
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def sum_set(lst):\n        return sum(map(abs, lst))\n\n    n = int(stdin.readline())\n    A = [int(x) for x in stdin.readline().split()]\n    B = [int(x) for x in stdin.readline().split()]\n    diff = abs(sum(A) - sum(B))\n    for i in range(n - 1):\n        new_A = B\n        new_B = A\n        new_diff = abs(sum_set(new_A) - sum_set(new_B))\n        if new_diff < diff:\n            diff = new_diff\n        A = [A[i] + B[i] for i in range(n)]\n        B = [A[i] - B[i] for i in range(n)]\n    print(diff)\n    return ''\n"
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return str(result)\n"
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\nfrom functools import reduce\nfrom typing import List\n\n\ndef"
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('2\\n(())')\n    4\n    \"\"\"\n    n = int(stdin.split()[0])\n    s = stdin.split()[1]\n    print(sum(1 if '(' in t else -1 for t in zip(s, s[1:])) % 1000000007)"
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    length = int(stdin.readline())\n    bracket_sequence = stdin.readline()\n    current_bracket_sequence = bracket_sequence\n    counter = 0\n    for i in range(1, length):\n        for j in range(len(current_bracket_sequence)):\n            if current_bracket_sequence[j] == \"(\" and current_bracket_sequence[j + 1] == \")\":\n                current_bracket_sequence = current_bracket_sequence[:j] + \"1\" + current_bracket_sequence[j:]\n                current_bracket_sequence = current_bracket_sequence[:j + 1] + \"+\" + current_bracket_sequence[j + 1:]\n                counter += 1\n            if current_bracket_sequence[j] == \"(\" and current_bracket_sequence[j + 1] == \"(\":\n                current_bracket_sequence = current_bracket_sequence[:j] + \"1\" + current_bracket_sequence[j:]\n                current_bracket_sequence = current_bracket_sequence[:j + 1] + \"+\" + current_bracket_sequence[j + 1:]\n                counter += 1\n            if current_bracket_sequence[j] == \")\" and current_bracket_sequence[j + 1] == \")\":\n                current_bracket_sequence = current_bracket_sequence[:j] + \"1\" + current_bracket_sequence[j:]\n                current_bracket_sequence = current_bracket_sequence[:j + 1] + \"+\" + current_bracket_sequence[j + 1:]\n                counter += 1\n    print(counter % 1000000007)"
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    stdin = stdin.split(\"\\n\")\n    n = int(stdin[0])\n    s = stdin[1]\n    if len(s) > 200:\n        return \"0\"\n    s = s[:n * 2]\n    if len(s) == n:\n        if s[:n] == s[n:2 * n]:\n            return \"0\"\n    count = 0\n    for i in range(len(s) - 2 * n + 1):\n        if s[i] == s[i + n] == s[i + 2 * n] == \"(\":\n            count += 1\n    return str(count % 1000000007)\n"
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    count = 0\n    return count\n"
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution for https://www.codewars.com/kata/51fce89ec29dd3f552000037\"\"\"\n\n    half_len = int(stdin)\n    bracket_seq = stdin\n    return int((((int(bracket_seq.replace(\"()\", \"1+1\").replace(\"(\", \"1+(\").replace(\")\", \"1+)\")[1:]) - 1) // 2) + 1) % 100000000007)\n"
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    We want to make the answer modulo 1_000_000_007,\n    so first convert stdin to a string of digits\n    representing the number.\n    \"\"\"\n    num_str = stdin.strip()\n    num_digits = len(num_str)\n    num = int(num_str)\n\n    # The number of regular bracket sequences\n    # of length 2n given the sequence s\n    # is equal to the number of digits in the\n    # sequence, multiplied by the number of\n    # digits in the sequence, plus 1, modulo 1_000_000_007.\n    reg = (num_digits * (num_digits + 1) // 2) % (10 ** 9 + 7)\n\n    # The number of regular bracket sequences\n    # of length 2n + 1 given the sequence s\n    # is equal to the number of digits in the\n    # sequence, multiplied by the number of\n    # digits in the sequence, plus 2, modulo 1_000_000_007.\n    reg += (num_digits * (num_digits + 2) // 2) % (10 ** 9 + 7)\n\n    # The number of regular bracket sequences\n    # of length 2n + 2 given the sequence s\n    # is equal to the number of digits in the\n    # sequence, multiplied by the number of\n    # digits in the sequence, plus 3, modulo 1_000_000_007.\n    reg += (num_digits * (num_digits + 3) // 2) % (10 ** 9 + 7)\n\n    return reg\n"
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    We want to calculate:\n    P(n) = C * P(n-1) = C * (10^9 + P(n-2))\n    where C = (10^9 + 7)^n / (10^9+7-1) = 1, 10^9+7, 10^9+7^2,..., 10^9+7^(n-1)\n    '''\n    n = int(stdin)\n    M = 10 ** 9 + 7\n    P = [1] * n\n    for i in range(1, n):\n        P[i] = (10 ** 9 + 7) * P[i - 1] // M\n    return sum(P) % M\n    \n"
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    len_s = int(stdin)\n    s = stdin[:len_s]\n    n = s.count('(')\n    res = 0\n    # s = '(()(()(('\n    if n % 2 == 0:\n        res = ((n // 2) ** 2) * 2\n    else:\n        res = ((n // 2) ** 2) * 2 + ((n // 2) + 1)\n    res = res % 1000000007\n    return res\n\"\"\""
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    s = stdin[1]\n    return str((pow(10, 9) + 7) - (((pow(10, 2 * n) - 1) // (pow(10, n) - 1)) * (pow(10, n) - 1) * (pow(10, n) - 1) * (pow(10, n) - 1)))\n"
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the minimum number of moves to obtain a number that is divisible by 25, otherwise return -1.\n    \"\"\"\n    number = stdin.strip()\n    divisor = 25\n    moves = 0\n    for i in range(len(number)):\n        for j in range(i, len(number)):\n            if int(number[i:j+1]) % divisor == 0 and (j+1 - i) > moves:\n                moves = j - i + 1\n    return moves if moves else -1\n    # If we wanted to make this program more general (i.e. it wouldn't be possible to obtain a number that is divisible by any number),\n    # we could use the numpy module to perform modular arithmetic using only mathematically-generating numbers.\n"
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\n-----TODO-----\n\n1. Understand the problem\n2. Find out the underlying pattern\n3. Formulate a solution\n4. Proof the solution\n5. Optimize the solution\n\n\"\"\"\n"
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    number = int(stdin)\n    i = 0\n    while True:\n        # print(number)\n        if number % 25!= 0:\n            number = number * 10 % 25\n            i += 1\n            continue\n        else:\n            break\n    return i if number == 0 else -1"
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    return '1'\n"
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\"\"\"\n\nfrom math import gcd\nfrom collections import Counter\nfrom functools import reduce\nfrom operator import mul\n\n\ndef"
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    #Your code here\n    return stdin"
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\"\"\"\n\ndef"
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time complexity: O(log(n))\n    Space complexity: O(1)\n    \"\"\"\n    n = int(stdin)\n    # If the last digit is a 0, we can never find a valid n such that n % 25 == 0\n    if n % 10 == 0:\n        return -1\n    \n    # Check if n is divisible by 25\n    if not n % 25:\n        return 0\n\n    m = 1\n    while n % 25:\n        # Check if n is divisible by 25\n        if not n % 25:\n            break\n        # Get the first two digits from n\n        d1, d2 = n // 100, n % 100\n        # If the last digit is not 0, we can always find a valid n such that n % 25 == 0\n        if d2:\n            n = d1 * 10 + d2 - 1\n            m += 1\n        # Otherwise we have to swap the last two digits\n        else:\n            n //= 10\n            n *= 10\n            n += d1 % 10\n            n += 1\n            m += 1\n    return m\n"
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    coloring_m = 0\n    res = 0\n    a = sorted(stdin)\n    a = list(stdin)\n    dic = {}\n    for i in a:\n        if i in dic:\n            dic[i] += 1\n        else:\n            dic[i] = 1\n        coloring_m = max(coloring_m, dic[i])\n    if len(a) == 1:\n        return 1\n    for i in range(1, coloring_m + 1):\n        dic2 = {}\n        for j in range(len(a)):\n            if a[j] in dic2 and dic2[a[j]] == i:\n                dic2[a[j]] += 1\n            else:\n                dic2[a[j]] = 1\n        c = 0\n        for x in dic2:\n            if dic2[x] > i:\n                c += dic2[x] // i\n        if c <= i:\n            res = i\n        if res >= coloring_m:\n            break\n    return res\n    \nsolution(stdin)\n"
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    n = len(s)\n    dp = [[0 for j in range(n)] for i in range(n)]\n    colors = [0 for i in range(n)]\n    res = 0\n\n    for j in range(n):\n        for i in range(n):\n            if i!= j:\n                dp[i][j] = 1\n                colors[j] = 1\n\n    for i in range(n):\n        if colors[i] == 0:\n            colors[i] = res\n            res += 1\n\n            for j in range(i+1, n):\n                if s[j] < s[i]:\n                    if colors[j] == 0:\n                        colors[j] = res\n                        res += 1\n\n                    if dp[i][j] == 1:\n                        dp[i][j] = res\n                        dp[j][i] = res\n                        res += 1\n\n    return res\n\n\ndef"
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin\n    res = n\n    colors = [0 for _ in range(n)]\n    \n    for i, c in enumerate(s):\n        colors[i] = s.index(c)\n        \n    for i in range(n):\n        for j in range(i+1, n):\n            if colors[i] == colors[j]:\n                res -= 1\n    \n    return res\n"
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def get_color(s: str, i: int) -> int:\n        if i == 0:\n            return 1\n        elif i == 1:\n            if s[0] < s[1]:\n                return 1\n            else:\n                return 2\n        else:\n            if s[i - 2] < s[i - 1] < s[i]:\n                return i\n            else:\n                return i + 1\n\n    def get_min_colors(s: str) -> int:\n        c: List[int] = [0] * len(s)\n        c[0] = get_color(s, 0)\n        for i in range(1, len(s)):\n            c[i] = get_color(s, i)\n        return max(c)\n\n    print(get_min_colors(stdin))\n    return \"\"\n\n\ndef"
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n\n    # count number of character in string\n    count = 0\n    for char in s:\n        if char == \"a\":\n            count += 1\n        elif char == \"b\":\n            count += 1\n        elif char == \"c\":\n            count += 1\n        elif char == \"d\":\n            count += 1\n        elif char == \"e\":\n            count += 1\n\n    if count == 0:\n        return 0\n\n    if n == 1:\n        return 1\n\n    # count number of character in string\n    count = 0\n    for char in s:\n        if char == \"a\":\n            count += 1\n        elif char == \"b\":\n            count += 1\n        elif char == \"c\":\n            count += 1\n        elif char == \"d\":\n            count += 1\n        elif char == \"e\":\n            count += 1\n\n    if count == 0:\n        return 0\n\n    # count number of character in string\n    count = 0\n    for char in s:\n        if char == \"a\":\n            count += 1\n        elif char == \"b\":\n            count += 1\n        elif char == \"c\":\n            count += 1\n        elif char == \"d\":\n            count += 1\n        elif char == \"e\":\n            count += 1\n\n    if count == 0:\n        return 0\n\n    # count number of character in string\n    count = 0\n    for char in s:\n        if char == \"a\":\n            count += 1\n        elif char == \"b\":\n            count += 1\n        elif char == \"c\":\n            count += 1\n        elif char == \"d\":\n            count += 1\n        elif char == \"e\":\n            count += 1\n\n    if count == 0:\n        return 0\n\n    # initialize result and color array\n    res = n\n    color = [0] * n\n    # color array\n    color[0] = 1\n    color[1] = 2\n\n    for i in range(2, len(s)):\n        if s[i] == \"a\":\n            if color[i-2] == color[i-1]:\n                color[i] = color[i-1]\n            else:\n                color[i] = color[i-1] + 1\n                res = min(res, color[i])\n        elif s[i] == \"b\":\n            if color[i-2] == color[i-1]:\n                color[i] = color[i-1]\n            else:\n                color[i] = color[i-1] + 1\n                res = min(res, color[i])\n        elif s[i] == \"c\":\n            if color[i-2] == color[i-1]:\n                color[i] = color[i-1]\n            else:\n                color[i] = color[i-1] + 1\n                res = min(res, color[i])\n        elif s[i] == \"d\":\n            if color[i-2] == color[i-1]:\n                color[i] = color[i-1]\n            else:\n                color[i] = color[i-1] + 1\n                res = min(res, color[i])\n        elif s[i] == \"e\":\n            if color[i-2] == color[i-1]:\n                color[i] = color[i-1]\n            else:\n                color[i] = color[i-1] + 1\n                res = min(res, color[i])\n\n    return res\n\nsolution(sys.stdin.readline().strip())"
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return None\n"
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin\n    if n == 1:\n        return \"1\"\n    s = sorted(s)\n    res = 0\n    i = 0\n    while i < n:\n        if s[i] == i + 1:\n            res += 1\n            i += 1\n        else:\n            break\n    return str(res)\n"
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    \u0420\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043f\u0440\u0438\u043c\u0435\u0440\n    1) \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 \u0441\u0442\u0440\u043e\u043a\u0430 s = \"abcde\", \u0441 \u043d\u0443\u043b\u0435\u0432\u043e\u0439 \u0438\u043d\u0434\u0435\u043a\u0441\u043e\u043c\n    1.1) \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 \u043f\u043e \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u043c\u0443 \u0441\u043b\u0443\u0447\u0430\u0439\u0443\u043c\u0435, \u043f\u0440\u0438 \u043f\u0435\u0440\u0432\u043e\u043c \u0432\u044b\u0431\u043e\u0440\u0435 \u0446\u0432\u0435\u0442\u0430, \u0431\u0443\u0434\u0443\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0446\u0432\u0435\u0442\u0430 1, 2, 3\n    1.1.1) \u0441\u0442\u0440\u043e\u043a\u0430 s \u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0441\u044f \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u044b\u043c \u0434\u043b\u044f \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0432\u044b\u0431\u043e\u0440\u0430 \u0446\u0432\u0435\u0442\u0430, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0434\u0435\u043b\u0430\u0435\u043c \u043e\u0431\u043c\u0435\u043d \u0446\u0432\u0435\u0442\u043e\u0432, \u043f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u0443 \u0446\u0432\u0435\u0442 \u043e\u0434\u0438\u043d \u0438\u0437 \u043d\u0443\u043b\u0435\u0432\u043e\u0439\n    1.1.2) \u0437\u0430\u0442\u0435\u043c \u0446\u0432\u0435\u0442\u0430 1, 2, 3 \u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0441\u044f \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u044b\u043c \u0434\u043b\u044f \u0432\u0442\u043e\u0440\u043e\u0433\u043e \u0432\u044b\u0431\u043e\u0440\u0430 \u0446\u0432\u0435\u0442\u0430, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0434\u0435\u043b\u0430\u0435\u043c \u043e\u0431\u043c\u0435\u043d \u0446\u0432\u0435\u0442\u043e\u0432\n    1.1.3) \u0437\u0430\u0442\u0435\u043c \u0446\u0432\u0435\u0442\u0430 1, 2, 3 \u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0441\u044f \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u044b\u043c \u0434\u043b\u044f \u0442\u0440\u0435\u0442\u044c\u0435\u0433\u043e \u0432\u044b\u0431\u043e\u0440\u0430 \u0446\u0432\u0435\u0442\u0430, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0434\u0435\u043b\u0430\u0435\u043c \u043e\u0431\u043c\u0435\u043d \u0446\u0432\u0435\u0442\u043e\u0432\n    2) \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 \u0441\u0442\u0440\u043e\u043a\u0430 s = \"abcde\", \u0441 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0432\u044b\u0431\u043e\u0440\u0430 \u0446\u0432\u0435\u0442\u0430\n    2.1) \u043f\u043e \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u043c\u0443 \u0441\u043b\u0443\u0447\u0430\u0439\u0443\u043c\u0435, \u043f\u0440\u0438 \u043f\u0435\u0440\u0432\u043e\u043c \u0432\u044b\u0431\u043e\u0440\u0435 \u0446\u0432\u0435\u0442\u0430, \u0431\u0443\u0434\u0443\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0446\u0432\u0435\u0442\u0430 2, 3, 4\n    2.1.1) \u0441\u0442\u0440\u043e\u043a\u0430 s \u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0441\u044f \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u044b\u043c \u0434\u043b\u044f \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0432\u044b\u0431\u043e\u0440\u0430 \u0446\u0432\u0435\u0442\u0430, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0434\u0435\u043b\u0430\u0435\u043c \u043e\u0431\u043c\u0435\u043d \u0446\u0432\u0435\u0442\u043e\u0432, \u043f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u0443 \u0446\u0432\u0435\u0442 \u043e\u0434\u0438\u043d \u0438\u0437 \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u044b\u0445 \u0446\u0432\u0435\u0442\u043e\u0432\n    2.1.2) \u0437\u0430\u0442\u0435\u043c \u0446\u0432\u0435\u0442\u0430 2, 3, 4 \u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0441\u044f \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u044b\u043c \u0434\u043b\u044f \u0432\u0442\u043e\u0440\u043e\u0433\u043e \u0432\u044b\u0431\u043e\u0440\u0430 \u0446\u0432\u0435\u0442\u0430, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0434\u0435\u043b\u0430\u0435\u043c \u043e\u0431\u043c\u0435\u043d \u0446\u0432\u0435\u0442\u043e\u0432\n    2.1.3) \u0437\u0430\u0442\u0435\u043c \u0446\u0432\u0435\u0442\u0430 2, 3, 4 \u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0441\u044f \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u044b\u043c \u0434\u043b\u044f \u0442\u0440\u0435\u0442\u044c\u0435\u0433\u043e \u0432\u044b\u0431\u043e\u0440\u0430 \u0446\u0432\u0435\u0442\u0430, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0434\u0435\u043b\u0430\u0435\u043c \u043e\u0431\u043c\u0435\u043d \u0446\u0432\u0435\u0442\u043e\u0432\n    3) \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 \u0441\u0442\u0440\u043e\u043a\u0430 s = \"abcde\", \u0441\u043e \u0432\u0442\u043e\u0440\u043e\u0433\u043e \u0432\u044b\u0431\u043e\u0440\u0430 \u0446\u0432\u0435\u0442\u0430\n    3.1) \u043f\u043e \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u043c\u0443 \u0441\u043b\u0443\u0447\u0430\u0439\u0443\u043c\u0435, \u043f\u0440\u0438 \u043f\u0435\u0440\u0432\u043e\u043c \u0432\u044b\u0431\u043e\u0440\u0435 \u0446\u0432\u0435\u0442\u0430, \u0431\u0443\u0434\u0443\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0446\u0432\u0435\u0442\u0430 3, 4, 5\n    3.1.1) \u0441\u0442\u0440\u043e\u043a\u0430 s \u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0441\u044f \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u044b\u043c \u0434\u043b\u044f \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0432\u044b\u0431\u043e\u0440\u0430 \u0446\u0432\u0435\u0442\u0430, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0434\u0435\u043b\u0430\u0435\u043c \u043e\u0431\u043c\u0435\u043d \u0446\u0432\u0435\u0442\u043e\u0432, \u043f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u0443 \u0446\u0432\u0435\u0442 \u043e\u0434\u0438\u043d \u0438\u0437 \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u044b\u0445 \u0446\u0432\u0435\u0442\u043e\u0432\n    3.1.2) \u0437\u0430\u0442\u0435\u043c \u0446\u0432\u0435\u0442\u0430 3, 4, 5 \u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0441\u044f \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u044b\u043c \u0434\u043b\u044f \u0432\u0442\u043e\u0440\u043e\u0433\u043e \u0432\u044b\u0431\u043e\u0440\u0430 \u0446\u0432\u0435\u0442\u0430, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0434\u0435\u043b\u0430\u0435\u043c \u043e\u0431\u043c\u0435\u043d \u0446\u0432\u0435\u0442\u043e\u0432\n    3.1.3) \u0437\u0430\u0442\u0435\u043c \u0446\u0432\u0435\u0442\u0430 3, 4, 5 \u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0441\u044f \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u044b\u043c \u0434\u043b\u044f \u0442\u0440\u0435\u0442\u044c\u0435\u0433\u043e \u0432\u044b\u0431\u043e\u0440\u0430 \u0446\u0432\u0435\u0442\u0430, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0434\u0435\u043b\u0430\u0435\u043c \u043e\u0431\u043c\u0435"
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    https://www.codewars.com/kata/58a5a0d4c0bdbb40260018f8/python\n    \"\"\"\n    colors = []\n    start = 0\n    for i in range(len(stdin)):\n        if stdin[i]!= stdin[start]:\n            colors.append(stdin[start])\n            start = i\n        if i == len(stdin) - 1:\n            colors.append(stdin[start])\n    return colors\n"
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nimport sys\nfrom collections import defaultdict\nfrom itertools import groupby\n\ndef"
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport unittest\n\n\ndef"
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n    return \"YES\" if reorder(stdin.splitlines(1)) else \"NO\"\n\ndef"
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES' if len(stdin) == len(set(stdin)) else 'NO'"
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    pass\n"
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES' if stdin == '' else 'NO'\n\"\"\"\nimport sys\n\nfor line in sys.stdin:\n    n = int(line)\n    if n == 0:\n        break\n    strings = list(map(str, sys.stdin.readline().split()))\n    result = 'NO'\n    for i in range(0, n):\n        for j in range(i + 1, n):\n            if strings[j].find(strings[i])!= -1:\n                result = 'YES'\n    print(result)\n"
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\ndef"
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    arr = [int(x) for x in stdin.split()]\n    res = 0\n    while k >= min(arr):\n        res += 1\n        arr = arr[1:] if len(arr) > 1 else []\n    return str(res)\n"
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def solve(stdin: str, k: int, left: int = 0, right: int = 0):\n        if right == len(stdin):\n            return 0\n        if k >= left or k >= right:\n            return 0\n        if left > right:\n            return 0\n        if left == right:\n            return 1\n        if stdin[left] > k:\n            return solve(stdin, k, left + 1, right)\n        if stdin[right] > k:\n            return solve(stdin, k, left, right - 1)\n        return max(1 + solve(stdin, k, left + 1, right), 1 + solve(stdin, k, left, right - 1))\n    k, n = map(int, stdin.split())\n    stdin = list(map(int, stdin.split()))\n    return solve(stdin, k)\nprint(solution(\"5 100 12 34 55 43 21\"))\n"
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    _, k = map(int, stdin.split())\n    diff = list(map(int, stdin.split()))\n    count = 0\n    while k!= 0 and len(diff)!= 0:\n        i = 0\n        while i < len(diff):\n            if diff[i] > k:\n                del diff[i]\n                i = 0\n            else:\n                i += 1\n        if len(diff) == 0:\n            break\n        if i == 0:\n            del diff[0]\n            count += 1\n        else:\n            del diff[i - 1]\n            count += 1\n    return str(count)\n"
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the number of solved problems.\"\"\"\n    num, skill = stdin.split(' ')\n    num = int(num)\n    skill = int(skill)\n    lst = [int(x) for x in stdin.split(' ')[1:]]\n    left, right = 0, num - 1\n    while left <= right and left < num and right > 0:\n        if lst[left] < skill and lst[right] < skill:\n            return 0\n        elif lst[left] >= skill and lst[right] >= skill:\n            return num\n        elif lst[left] < skill and lst[right] >= skill:\n            left += 1\n        elif lst[left] >= skill and lst[right] < skill:\n            right -= 1\n    return num - right - 1\n"
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    array = list(map(int, stdin.split()))\n    left = 0\n    right = n - 1\n    while left < right:\n        if array[left] <= k:\n            left += 1\n        if array[right] <= k:\n            right -= 1\n        array = array[:left] + array[right + 1:]\n    return n - len(array)\n"
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n\n    left = 0\n    right = n - 1\n\n    num_solved = 0\n    while left < right:\n        if arr[left] <= k:\n            num_solved += 1\n            left += 1\n        if arr[right] <= k:\n            num_solved += 1\n            right -= 1\n        if arr[left] > k and arr[right] > k:\n            break\n\n    return num_solved\n"
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\n----\n\"\"\"\n\nimport sys\nimport itertools\n\n\ndef"
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split('\\n')[0].split()]\n    difficulty = [int(x) for x in stdin.split('\\n')[1].split()]\n    left = 0\n    right = n - 1\n    solved = 0\n    while True:\n        if k > min(difficulty[left], difficulty[right]):\n            break\n        if difficulty[left] > k or difficulty[right] > k:\n            break\n        if difficulty[left] == difficulty[right]:\n            left += 1\n            right -= 1\n            continue\n        if difficulty[left] < difficulty[right]:\n            solved += right - left + 1\n            left += 1\n        else:\n            solved += right - left + 1\n            right -= 1\n    return solved\n"
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the maximum number of problems Mishka can solve.\"\"\"\n    n, k = [int(i) for i in stdin.split(' ')]\n    difficulties = [int(i) for i in stdin.split('\\n')[1].split(' ')]\n    if len(difficulties) == 1:\n        return n if difficulties[0] < k else 0\n    else:\n        left = sum([i for i in difficulties[:len(difficulties)//2] if i < k])\n        right = sum([i for i in difficulties[len(difficulties)//2:] if i < k])\n        if left < right:\n            return n - (len(difficulties) - len(difficulties)//2)\n        else:\n            return n - (len(difficulties) - len(difficulties)//2 - 1)\n\nprint(solution(stdin))"
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return (a + b) * 2 if a * b >= (a + b) * 2 else (a + b) * 2 - 2\n\n\ndef"
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    res = a*(a+1) + b*(b+1)\n    return str(res)\n\n\ndef"
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = list(map(int, stdin.split(' ')))\n    if a+b<=10:\n        return b\n    return b+a\nprint(solution(input()))\n"
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = (int(stdin) for stdin in stdin.split())\n    return str(max(a * 8, b * 12))\n"
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(2 * (a + b) - 4)\n"
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return (2 * b + 2 * a + 1) * (2 * b + 2 * a + 1) if a + b == (a + b) * (a + b) else (2 * b + 2 * a) * (2 * b + 2 * a)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split(' '))\n    return a * b * (1 + (a + b) ** 2)\n"
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n"
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return max((a+b) * 2, min(a+b, a+2*b, a+3*b))\n"
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return (a + b) * 2 - min(a, b)\n"
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin\n    #create a matrix of the same size as the string\n    #each item in the matrix is the number of occurences of each color\n    counts = [0] * 2\n    for c in s:\n        counts[ord(c) - ord('a')] += 1\n    print(counts)\n    #start with the largest group of ones and go from there\n    #This is an optimization to reduce the complexity of the algorithm\n    #This optimization is not required, and may not make the algorithm faster\n    result = \"YES\"\n    for i in range(n - 1, -1, -1):\n        if counts[ord(s[i]) - ord('a')] > 1:\n            counts[ord(s[i]) - ord('a')] -= 1\n            continue\n        #if you cannot combine the largest group of ones with any other group, the string is impossible to sort\n        result = \"NO\"\n        break\n    return result\n\n\nsolution(stdin)"
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Get the length of the input string\n    stringLength = int(stdin)\n    \n    # Get the input string\n    string = stdin\n    \n    # Create a list to keep track of the colors of the characters\n    listOfColors = []\n\n    # Create a list to keep track of the characters that have to be colored\n    listOfCharactersToBeColored = []\n\n    # For each character in the input string\n    for i in range(stringLength):\n        # If the character has not been colored\n        if string[i] not in listOfColors:\n            # Add it to the list of characters to be colored\n            listOfCharactersToBeColored.append(string[i])\n            # Add a color (1) to the list of colors\n            listOfColors.append('1')\n        # Otherwise\n        else:\n            # Add a color (0) to the list of colors\n            listOfColors.append('0')\n\n    # Return the answer\n    return \"YES\" if isPossibleToColor(listOfCharactersToBeColored, listOfColors) else \"NO\"\n\ndef"
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # create a set of all the characters in stdin\n    charset = set(stdin)\n    # convert set to a list\n    chars = list(charset)\n    # create a dictionary that maps characters to their index in the list\n    dictionary = dict(zip(chars, range(len(chars))))\n    # create a list of characters that are sorted in ascending order\n    sorted_chars = \"\".join(sorted(stdin))\n    # create an empty list to store the colors of each character\n    colors = []\n    # create a list of False values equal in length to the length of chars\n    false_array = [False] * len(chars)\n    # loop over all characters in the list\n    for char in chars:\n        # set the color to 0\n        color = 0\n        # loop over all characters in the sorted_chars list\n        for i in range(len(sorted_chars)):\n            # if the character in the sorted list is the same as the character in the stdin\n            if sorted_chars[i] == char:\n                # set the color to 1\n                color = 1\n                # set the color of the character to the color in the sorted list\n                colors.append(color)\n                # set the color of the character to the color in the stdin\n                false_array[dictionary[char]] = False\n                # break the loop\n                break\n        # if the loop is finished without any breaks\n        else:\n            # set the color to 1\n            color = 1\n            # set the color of the character to the color in the sorted list\n            colors.append(color)\n            # set the color of the character to the color in the stdin\n            false_array[dictionary[char]] = False\n    # create an empty list to store the indices of the characters to swap\n    swaps = []\n    # loop over the indices in the sorted_chars\n    for i in range(len(sorted_chars) - 1):\n        # if the current character is the same as the next character in the sorted_chars\n        if sorted_chars[i] == sorted_chars[i + 1]:\n            # set the color of the current character to the color of the next character\n            false_array[dictionary[sorted_chars[i]]] = false_array[dictionary[sorted_chars[i + 1]]]\n            # set the color of the next character to the color of the current character\n            false_array[dictionary[sorted_chars[i + 1]]] = false_array[dictionary[sorted_chars[i]]]\n            # append the index of the current character to the list of swaps\n            swaps.append(dictionary[sorted_chars[i]])\n            # append the index of the next character to the list of swaps\n            swaps.append(dictionary[sorted_chars[i + 1]])\n    # if the swaps list is not empty\n    if swaps:\n        # create a dictionary that maps characters to their color in the list\n        dictionary = dict(zip(chars, colors))\n        # loop over all characters in the swaps list\n        for char in swaps:\n            # set the color of the character in the dictionary to 1 if the color is 0 and vice versa\n            if dictionary[char] == 0:\n                dictionary[char] = 1\n            else:\n                dictionary[char] = 0\n        # convert the dictionary to a string by converting it to a list\n        sorted_colors = list(dictionary.values())\n        # return the result in the form of a string\n        return \"YES\\n\" + \"\".join(sorted_colors)\n    else:\n        return \"NO\"\n\n\ndef"
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    len_s = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    coloring = []\n\n    for i in range(len_s):\n        if s[i] == \"a\":\n            coloring.append(0)\n        else:\n            coloring.append(1)\n\n    if coloring == sorted(coloring):\n        return \"YES\"\n\n    return \"NO\"\n\n\nprint(solution(stdin))\n\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.split('\\n')\n    l = int(line[0])\n    a = line[1]\n    dp = [0] * l\n    dp[0] = 1\n    for i in range(1, l):\n        if a[i-1] > a[i]:\n            dp[i] = dp[i-1]\n        else:\n            dp[i] = dp[i-1] + 1\n    if dp[l-1] > 1:\n        return 'YES\\n' + ''.join([str(e) for e in dp])\n    else:\n        return 'NO\\n'\n"
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return solution\n"
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin\n    l = [0] * n\n    for c in s:\n        l[int(c) - 1] += 1\n    a = [0] * n\n    for i in range(n):\n        a[l[i]] = i + 1\n\n    def f(a):\n        for i in range(1, n):\n            if a[i] < a[i - 1]:\n                return True\n        return False\n\n    l = 0\n    while f(l):\n        l += 1\n\n    for i in range(n - 1):\n        if a[i] > a[i + 1]:\n            return \"YES\\n\" + \"\".join([str(1 - x) for x in l])\n    return \"NO\\n\" + \"\".join([str(x) for x in l])\n"
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''9\n   ... abacbecfd\n   ... ''')\n    'YES\\n001010101'\n    \"\"\"\n    n = int(stdin.readline())\n    s = list(stdin.readline())\n    print('YES' if sorted(coloring(n, s)) == s else 'NO')\n    return ''.join(coloring(n, s))\n"
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[0:n]\n    # colors[i] - color of ith char\n    colors = [0] * n\n    for i, ch in enumerate(s):\n        colors[i] = 1 - (int(ch) % 2)\n    # print(colors)\n    diff_indices = [i for i, c in enumerate(colors) if c!= colors[0]]\n    # print(diff_indices)\n    # num of swaps\n    swaps = 0\n    for i in range(1, len(diff_indices)):\n        if diff_indices[i] - diff_indices[i - 1] > 1:\n            swaps += 1\n    # print(swaps)\n    # num of swaps to make colors same\n    swaps_to_make_same = 0\n    for i in range(1, len(diff_indices)):\n        if diff_indices[i] - diff_indices[i - 1] > 1:\n            swaps_to_make_same += 1\n    # print(swaps_to_make_same)\n    # print(swaps, swaps_to_make_same)\n    # print(diff_indices)\n    if swaps == swaps_to_make_same or swaps == 0:\n        print(\"NO\")\n    else:\n        print(\"YES\")\n        if swaps_to_make_same!= 0:\n            for i in range(0, len(diff_indices)):\n                if i == 0:\n                    print(int(colors[diff_indices[i]]), end='')\n                else:\n                    print(\"%d\" % int(colors[diff_indices[i]]), end='')\n"
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    n = len(s)\n    even_sum = 0\n    odd_sum = 0\n\n    # Calculate sum of even and odd letters.\n    for c in s:\n        if c % 2 == 0:\n            even_sum += int(c)\n        else:\n            odd_sum += int(c)\n\n    # If sum of even characters is even, we need to swap odd characters.\n    if even_sum % 2 == 0:\n        if odd_sum % 2 == 0:\n            return 'YES'\n        return 'NO'\n\n    # Else, we need to swap even characters.\n    return 'YES'\n"
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    result = 0\n    for i in range(a, b + 1):\n        result += math.floor(i * 0.08) + math.floor(i * 0.1)\n    if result < b:\n        return result\n    return -1\n"
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Find the lowest price before tax that satisfies the condition.\n\n    Argument\n    --\n    stdin : str. the input to be processed.\n\n    Return\n    --\n    str. the lowest price before tax that satisfies the condition.\n    '''\n    args = stdin.split()\n    A = int(args[0])\n    B = int(args[1])\n    price = None\n    for a in range(A, B + 1):\n        # \u6ce8\u610f\uff1a\u9700\u8981\u518d\u5faa\u73af\u7684\u65f6\u5019\u8981\u8bbe\u7f6e\u4e0b\u6b21\u5faa\u73af\u7684A\uff0c\u4e0d\u80fd\u76f4\u63a5\u8fd4\u56dea\n        a_times_0_8 = a * 0.08\n        a_times_0_1 = a * 0.1\n        if round(a_times_0_8) == 2:\n            price = a\n            break\n        elif round(a_times_0_1) == 2.5:\n            price = a\n    if price:\n        return str(price)\n    else:\n        return '-1'\n"
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    a, b = min(a, b), max(a, b)\n    if a * 100 <= b:\n        print(a * 100)\n    else:\n        print(-1)"
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    min_price = 1001\n    for price in range(A, B+1):\n        tax_a = price*0.08\n        tax_b = price*0.1\n        if price*(1+tax_a) >= B:\n            min_price = min(price, min_price)\n        else:\n            if price*(1+tax_b) >= B:\n                min_price = min(price, min_price)\n    if min_price == 1001:\n        return -1\n    return min_price\n"
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin.split(\"\\n\")\n    a, b = data[0].split(\" \")\n    a, b = int(a), int(b)\n\n    count = 0\n    for i in range(a, b + 1):\n        count += i * 0.08\n        count += i * 0.1\n    if count < b:\n        return str(int(b / 2))\n    return \"No solution\"\n"
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    print(max(a, b) - min(a, b))"
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A + B > 100:\n        return -1\n    min_price = max(A, B)\n    if A > B:\n        max_price = A\n        min_price = B\n    else:\n        max_price = B\n        min_price = A\n    if max_price * (1 + 0.08) < min_price * (1 + 0.1):\n        max_price = min_price\n    while (max_price * (1 + 0.08) >= min_price * (1 + 0.1)):\n        if max_price * (1 + 0.08) == min_price * (1 + 0.1):\n            return min_price\n        min_price += 1\n    return -1\n"
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split(' '))\n    count = 0\n    for price in range(A, B+1):\n        if price * 0.08 == int(price * 0.08) and price * 0.1 == int(price * 0.1):\n            count += 1\n    if count:\n        return count\n    else:\n        return '-1'\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split(' '))\n    if a > b:\n        return -1\n    \n    max_a = int(math.sqrt(b / 2))\n    max_b = int(math.sqrt(b / 10))\n    \n    \n    for i in range(max_a, max_b+1):\n        for j in range(max_a, max_b+1):\n            if j * i == b:\n                return i\n    return -1\n"
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k, n = list(map(int, stdin.split()))\n    if n == k:\n        return 'YES\\n1 1'\n\n    if k == 1:\n        return 'YES\\n' + str(1)\n\n    cnt = 0\n    prev = 0\n    a = []\n    for i in range(1, k):\n        if 2 * cnt <= n:\n            cnt += 1\n            a.append(cnt)\n            prev += 1\n        else:\n            prev += 1\n            cnt = prev\n            a.append(cnt)\n\n    return 'YES\\n' +''.join([str(x) for x in a])\n"
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    \n    if k < 1 or k > 10**5 or n < 1 or n > 10**9:\n        return 'NO'\n    \n    for i in range(k):\n        s = set()\n        for x in stdin.split():\n            if int(x) in s:\n                return 'NO'\n            s.add(int(x))\n    \n    return 'YES\\n{}'.format(' '.join(list(map(str, range(1, k+1)))))\n"
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def rec(n: int, k: int) -> bool:\n        if k == 0:\n            return n == 0\n        if n < 0:\n            return False\n\n        return rec(n - 1, k - 1) or (rec(n - 2, k - 1) and n < 2 * rec(n - 1, k - 1))\n\n    n, k = tuple(map(int, stdin.split()))\n\n    if k == 0:\n        return \"YES\\n0\"\n\n    return \"YES\" if rec(n, k) else \"NO\"\n"
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    k, n = map(int, stdin.split())\n    if 2 * k > n:\n        return \"NO\"\n    else:\n        ans = [0] * k\n        ans[-1] = n - k + 1\n        for i in range(n - k, -1, -1):\n            ans[i] = 2 * ans[i + 1]\n        return \"YES\\n\" + \"\\n\".join(map(str, ans))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"26 6\\n\")\n    'YES\\n1 2 4 5 6 8'\n    >>> solution(\"8 3\\n\")\n    'NO\\n'\n    >>> solution(\"1 1\\n\")\n    'YES\\n1'\n    >>> solution(\"9 4\\n\")\n    'NO\\n'\n    \"\"\"\n    n, k = map(int, stdin.split())\n    a = [0] * k\n    for i in range(1, k + 1):\n        a[i - 1] = 2 * a[i - 1] + 1 if a[i - 1] < 2 * a[i - 1] + 1 else a[i - 1]\n        if sum(a) > n:\n            break\n        if i == k and sum(a)!= n:\n            break\n    else:\n        return 'YES\\n' +''.join(map(str, a))\n    return 'NO\\n'\n"
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    arr = [0 for _ in range(k)]\n    arr[0] = n\n    for i in range(1, k):\n        arr[i] = 2 * arr[i - 1]\n\n    return 'YES' if n <= sum(arr) else 'NO'\n\nprint(solution(input()))"
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    l = stdin.split(\" \")\n    n = int(l[0])\n    k = int(l[1])\n    stdin = stdin.split(\"\\n\")[1]\n    if k == 1:\n        print(\"YES\")\n        print(1)\n        return\n    else:\n        l = []\n        for i in stdin.split(\" \"):\n            if i!= \"\":\n                l.append(int(i))\n        \n        p = [0] * k\n        for i in range(1, k + 1):\n            p[i - 1] = l[i - 1]\n\n        ans = 0\n        for i in range(k - 1):\n            if p[i] < p[i + 1] and p[i + 1] <= 2 * p[i]:\n                ans += 1\n        if ans == k - 1:\n            print(\"YES\")\n            print(*p)\n        else:\n            print(\"NO\")\n\nt = int(input())\n\nfor i in range(t):\n    solution(input())"
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(i) for i in stdin.split()]\n    result = 'YES'\n    if n >= k:\n        result = 'NO'\n    elif n * 2 > k:\n        result = 'NO'\n    elif k < 1:\n        result = 'NO'\n    else:\n        result = 'YES'\n        result +=''.join(list(map(lambda x: str(x), [1] * k)))\n    return result\n"
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    arr = [int(x) for x in stdin.split()]\n    return str(sum(arr) == n and all([x >= 1 for x in arr]) and any([arr[i] < arr[i + 1] <= 2 * arr[i] for i in range(len(arr) - 1)])).lower()\n    # Your code here\n\n\ndef"
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"26 6\\n\")\n    'YES\\n1 2 4 5 6 8'\n    \"\"\"\n    n, k = map(int, stdin.split(\" \"))\n    s = n // k\n    r = n % k\n    if r > 0:\n        if 2 * r > k:\n            return \"NO\"\n        elif 2 * r == k:\n            return \"YES\\n\" + \" \".join(map(str, [s] * k))\n        else:\n            return \"YES\\n\" + \" \".join(map(str, [s + 1] * r)) + \" \" + \" \".join(map(str, [s] * (k - r)))\n    else:\n        return \"YES\\n\" + \" \".join(map(str, [s] * k))\n"
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    pass\n\n\ndef"
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''\n"
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    from collections import deque\n    n, m = map(int, stdin.readline().split())\n    q = deque()\n    for i in range(n):\n        a, b = map(int, stdin.readline().split())\n        q.append((a, b))\n    q.append((0, 0))\n    res = 0\n    cur = m\n    for a, b in q:\n        if a < cur:\n            cur = cur + b\n            res += 1\n    print(res)\n"
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find the size of the maximum possible subset of projects Polycarp can choose.\n\n    Args:\n        stdin (str): input\n\n    Returns:\n        str: output\n    \"\"\"\n\n    n, r = map(int, stdin.split(\"\\n\")[:2])\n    A = list(map(int, stdin.split(\"\\n\")[2:]))\n\n    dp = [0] * (r + 1)\n\n    for i, (a, b) in enumerate(A):\n        dp[i] = a + b\n        dp[i + 1] = dp[i]\n\n    print(dp)\n\n    for i in range(n, r + 1):\n        dp[i] = max(dp[i], dp[i - n] + b)\n\n    print(dp)\n\n    return max(dp)\n"
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, r = [int(n) for n in stdin.split('\\n')[:2]]\n    projects = [[int(a), int(b)] for a, b in stdin.split('\\n')[2:]]\n    projects.sort()\n    c = 0\n    ans = 0\n    if projects[0][0] < 0:\n        ans = projects[0][1] - projects[0][0] + 1\n    else:\n        c = projects[0][0]\n        ans = max(ans, c)\n    for a, b in projects[1:]:\n        if a < 0:\n            c += b\n            ans = max(ans, c)\n        else:\n            c += b\n            ans = max(ans, c)\n    return str(ans)\n\n\ndef"
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution for https://codesignal.s3.amazonaws.com/tasks/projectEuler099\n\n    >>> solution(\"\"\"3 4\n   ... 4 6\n   ... 10 -2\n   ... 8 -1\n   ... \"\"\")\n    3\n    \"\"\"\n\n    return \"\"\n"
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Calculate the maximum possible size of the subset of projects Polycarp can choose.\n\n    >>> solution(\"3 4\\n4 6\\n10 -2\\n8 -1\")\n    3\n    \"\"\"\n    n, r = map(int, stdin.split())\n    projects = [list(map(int, stdin.split())) for _ in range(n)]\n    projects.sort()\n\n    dp = [0] * (r + 1)\n    dp[0] = 1\n\n    for a, b in projects:\n        for i in range(a, r + 1):\n            dp[i] = max(dp[i], dp[i - a] + 1)\n        dp[a] = 0\n\n    return dp[-1]\n"
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n\n    n, r = map(int, lines[0].split())\n\n    project_list = []\n\n    for i in range(1, n + 1):\n        project_list.append(list(map(int, lines[i].split())))\n\n    project_list.sort()\n\n    r_list = [0] * (n + 1)\n    r_list[0] = r\n\n    for i in range(1, n + 1):\n        r_list[i] = project_list[i - 1][0] + r_list[i - 1]\n        r_list[i] = max(r_list[i], r_list[i - 1])\n\n    r_list = sorted(list(set(r_list)))\n\n    max_size = 1\n\n    for i in range(1, len(r_list)):\n        if r_list[i] - r_list[i - 1] > max_size:\n            max_size = r_list[i] - r_list[i - 1]\n\n    return max_size\n"
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    a = [0] * n\n    b = [0] * n\n    for i in range(n):\n        a[i], b[i] = map(int, stdin.split())\n    m = max(a)\n    if r >= m:\n        return n\n    else:\n        return 0\n"
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return a valid solution.\"\"\"\n    pass\n"
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\n'''\n\n\ndef"
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n <= 20:\n        matrix = stdin.split(' ')\n        for i in range(len(matrix)):\n            matrix[i] = int(matrix[i])\n        matrix = list(set(matrix))\n        \n        # Returns a dict of the the numbers as keys and the indexes of the instances as values\n        dict = {}\n        for i in range(len(matrix)):\n            dict[matrix[i]] = i\n            \n        # matrix_temp is used for the 2nd for loop\n        matrix_temp = []\n        for i in range(len(matrix)):\n            for j in range(len(matrix)):\n                matrix_temp.append(matrix[i])\n        \n        # Creating a dictionary of the numbers of the first matrix as keys and the numbers of the second matrix as values\n        count = {}\n        for i in range(len(matrix)):\n            for j in range(len(matrix_temp)):\n                if matrix[i] == matrix_temp[j]:\n                    count[matrix[i]] = matrix_temp[j]\n        \n        # Checking if the 1st matrix is palindromic and if the 2nd matrix is palindromic\n        palindromic = True\n        for key in count:\n            if count[key]!= dict[key]:\n                palindromic = False\n                break\n        \n        # If it's possible to make a matrix that can be palindromic, print YES, and then print the matrix\n        if palindromic:\n            matrix = []\n            for i in range(len(matrix)):\n                matrix.append(matrix[i])\n            matrix.append(matrix[0])\n            matrix.append(matrix[1])\n            matrix.append(matrix[2])\n            print('YES')\n            print(matrix[0], end ='')\n            print(matrix[1], end ='')\n            print(matrix[2], end ='')\n            print(matrix[3])\n            print(matrix[4], end ='')\n            print(matrix[5], end ='')\n            print(matrix[6], end ='')\n            print(matrix[7])\n            print(matrix[8], end ='')\n            print(matrix[9])\n            \n        # If it's impossible to make a matrix that can be palindromic, print NO\n        else:\n            print('NO')\n        \n    \n"
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n\ndef"
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your solution\n    return ''"
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if stdin else \"NO\"\n\"\"\"\n"
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Get the matrix if it's possible to put the given numbers into a matrix of n rows and n columns, so that each number is used exactly once, each cell contains exactly one number and the resulting matrix is palindromic.\n    If there are multiple answers, print any. If there is no solution, print \"NO\".\n\n    Args:\n        stdin (str): The input from stdin.\n\n    Returns:\n        str: The solution for this problem.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    a = [int(x) for x in stdin.split('\\n')]\n    n = a[0]\n    r = a[1]\n    if n <= 1:\n        return \"YES\"\n    b = list()\n    for i in range(1, n):\n        b.append([abs(a[i * 2 + 1]), a[i * 2 + 2]])\n    b.sort(key=lambda x: x[0])\n    c = [r]\n    for i in range(n):\n        r += b[i][1]\n        if r < 0:\n            return \"NO\"\n        c.append(r)\n    for i in range(n - 1, -1, -1):\n        r -= b[i][1]\n        if r < c[i + 1]:\n            return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    pass"
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return ''\n"
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    n,r=map(int,stdin.split())\n    l=[]\n    for i in range(n):\n        l.append(map(int,stdin.split()))\n    l=sorted(l,key=lambda x:x[0],reverse=True)\n    l=sorted(l,key=lambda x:x[1],reverse=True)\n    if l[0][0]>r:\n        return \"NO\"\n    count=0\n    for i in range(n):\n        if l[i][0]<=r:\n            count+=1\n            r+=l[i][1]\n            if r<0:\n                return \"NO\"\n        else:\n            return \"NO\"\n    if count==n:\n        return \"YES\"\n    else:\n        return \"NO\"\n\n\n\"\"\"\n\n\n\ndef"
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\ndef"
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    n, r = list(map(int, stdin.split(' ')))\n    a = [list(map(int, stdin.split(' '))) for _ in range(n)]\n    \n    a.sort(key=lambda x: x[1], reverse=True)\n    \n    i = 0\n    while r >= a[i][0]:\n        r += a[i][1]\n        i += 1\n    if i < n:\n        return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time complexity: O(n * logn)\n    Space complexity: O(n)\n    \"\"\"\n    n, r = [int(x) for x in stdin.split()]\n    projects = sorted([[int(y) for y in stdin.split()] for _ in range(n)])\n    seen = {}\n    for a, b in projects:\n        if a > r:\n            return \"NO\"\n        if a <= r:\n            r += b\n            seen[a] = True\n    else:\n        return \"NO\" if not seen.get(r, False) else \"YES\"\n\n\ndef"
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    N, R = [int(x) for x in stdin.split('\\n')]\n    arr = []\n    for i in range(N):\n        a, b = [int(x) for x in stdin.split('\\n')][i].split()\n        arr.append((a, b))\n    arr.sort(key=lambda x: x[1])\n    sum_ = 0\n    for a, b in arr:\n        sum_ += a\n        if sum_ > R:\n            print('NO')\n            return\n        R += b\n    print('YES')\n    return\n\n\ndef"
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return \"YES\" or \"NO\""
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3 10\\n10 0\\n10 -10\\n30 0\\n\")\n    'YES'\n    >>> solution(\"3 5\\n4 -5\\n4 -2\\n1 3\\n\")\n    'YES'\n    >>> solution(\"4 4\\n5 2\\n5 -3\\n2 1\\n4 -2\\n\")\n    'YES'\n    >>> solution(\"3 10\\n10 0\\n10 -10\\n30 0\\n\")\n    'NO'\n    >>> solution(\"4 4\\n5 2\\n5 -3\\n2 1\\n4 -2\\n\")\n    'NO'\n    >>> solution(\"3 5\\n4 -5\\n4 -2\\n1 3\\n\")\n    'NO'\n    \"\"\"\n   ...\n"
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # O(n) time | O(n) space\n    n, m, d = [int(x) for x in stdin.split()]\n    platforms = [int(x) for x in stdin.split()][1:]\n    leftmost = [0] * m\n    rightmost = [0] * m\n    for i, c in enumerate(platforms):\n        leftmost[i] = c\n        rightmost[i] = c\n    \n    for i in range(n):\n        if leftmost[0] > rightmost[0]:\n            return \"NO\"\n        for j in range(m):\n            if leftmost[j] > i + d + 1 or rightmost[j] < i + 1:\n                continue\n            for k in range(j + 1, m):\n                if leftmost[k] <= rightmost[k]:\n                    return \"NO\"\n                if leftmost[k] > i + d + 1 or rightmost[k] < i + 1:\n                    continue\n                return \"YES\"\n    \n    return \"YES\"\n"
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = [int(x) for x in stdin.split(\"\\n\")[0].split()]\n    cs = [int(x) for x in stdin.split(\"\\n\")[1].split()]\n\n    dp = [0] * (n + 2)\n    dp[0] = 1\n\n    for c in cs:\n        for i in range(0, n + 2 - c):\n            dp[i + c] = max(dp[i] * (d + 1), dp[i + c])\n\n    if dp[-1] == 0:\n        return \"NO\"\n    else:\n        return \"YES\\n\" + \" \".join([str(i) for i in dp[:n + 2]])\n\n\nprint(solution(input()))\n\n\ndef"
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    width, num_platforms, max_jump = list(map(int, stdin.split()))\n\n    platforms = list(map(int, stdin.split()))\n\n    def possible(left: int, right: int) -> bool:\n        for i in range(num_platforms):\n            if platforms[i] == 0:\n                continue\n            if platforms[i] == 1:\n                if left < platforms[i] or right < platforms[i]:\n                    return False\n            if platforms[i] == 2:\n                if left < platforms[i] or left > platforms[i] + max_jump or right < platforms[i] + max_jump or right > platforms[i]:\n                    return False\n        return True\n\n    def solve(left: int, right: int, depth: int = 1) -> int:\n        if left >= right:\n            return left\n        if depth == num_platforms + 1:\n            return -1\n        depth += 1\n        right = left + 1\n        while right < width + 1:\n            if possible(left, right):\n                return solve(right, width, depth)\n            right += 1\n        return -1\n\n    return 'YES' if solve(0, width)!= -1 else 'NO'\n"
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    arr.append(0)\n    arr.append(n + 1)\n    arr = sorted(arr)\n    dp = [1] * n\n    for i in range(1, m + 1):\n        for j in range(arr[i] - 1, arr[i - 1] - 1, -1):\n            if j + d >= arr[i - 1] - 1:\n                dp[j] = min(dp[j], i)\n            if j + d >= arr[i] - 1:\n                dp[j] = min(dp[j], i)\n    print(\"YES\" if dp[0] == m + 1 else \"NO\")\n    print(\" \".join(map(str, [i for i, v in enumerate(dp) if v == m + 1])))\n    return \"\"\n"
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"7 3 2\\n1 2 1\")\n    YES\n    >>> solution(\"10 1 11\\n1\")\n    YES\n    >>> solution(\"10 1 5\\n2\")\n    YES\n    >>> solution(\"10 1 2\\n11\")\n    NO\n    \"\"\"\n    n, m, d = [int(s) for s in stdin.split()]\n    c = [int(s) for s in stdin.split()][1:]\n\n    a = []\n\n    for i in range(m):\n        l = max(0, c[i] - (i + 1))\n        a.extend([0] * l)\n        a.append(i + 1)\n    a.extend([0] * (n - len(a) + 1))\n\n    return \"NO\" if d > (n - m) else \"YES\\n\" + \" \".join([str(s) for s in a])\n"
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n    # left = 0\n    # right = 0\n    # for i in range(m):\n    #     left = max(left, a[i])\n    #     right = max(right, a[i] + i)\n    # if right < n + 1:\n    #     return \"NO\"\n    # left_index = n\n    # right_index = n\n    # for i in range(m):\n    #     if a[i] < left:\n    #         left_index = i\n    #     if a[i] + i > right:\n    #         right_index = i\n    # if right_index < left_index:\n    #     return \"NO\"\n    a.sort()\n    left = 0\n    right = 0\n    for i in range(m):\n        left = max(left, a[i])\n        right = max(right, a[i] + i)\n    if right < n + 1:\n        return \"NO\"\n    left_index = n\n    right_index = n\n    for i in range(m):\n        if a[i] < left:\n            left_index = i\n        if a[i] + i > right:\n            right_index = i\n    if right_index < left_index:\n        return \"NO\"\n    i = 0\n    j = m\n    left_temp = 0\n    right_temp = 0\n    temp = 0\n    result = []\n    while i <= right_index and j <= right_index:\n        if a[i] == temp:\n            result.append(a[i])\n            i += 1\n        elif a[j] == temp:\n            result.append(a[j])\n            j += 1\n        else:\n            temp = a[i]\n            while i <= right_index and a[i] == temp:\n                result.append(a[i])\n                i += 1\n            temp = a[j]\n            while j <= right_index and a[j] == temp:\n                result.append(a[j])\n                j += 1\n    if i <= right_index:\n        temp = a[i]\n        while i <= right_index and a[i] == temp:\n            result.append(a[i])\n            i += 1\n    if j <= right_index:\n        temp = a[j]\n        while j <= right_index and a[j] == temp:\n            result.append(a[j])\n            j += 1\n    return \"YES\" + \" \" + \" \".join(list(map(str, result)))"
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    width, platforms, max_jump = stdin.split(\" \")\n    width = int(width)\n    platforms = int(platforms)\n    max_jump = int(max_jump)\n\n    platforms_lengths = [int(i) for i in stdin.split(\"\\n\")[1].split(\" \")]\n    platforms_lengths.sort(reverse=True)\n\n    platforms_indices = [0] * platforms\n    for i in range(platforms):\n        platforms_indices[i] = i + 1\n\n    visited_index = set()\n    # visited_platforms = set()\n    queue = [0]\n    while queue:\n        current_index = queue.pop()\n        if current_index in visited_index:\n            continue\n        visited_index.add(current_index)\n        # visited_platforms.add(current_platforms)\n\n        if current_index + max_jump >= width:\n            continue\n\n        for i in range(platforms):\n            jump_length = platforms_lengths[i]\n            jump_to = platforms_indices[i]\n            if i not in visited_index:\n                if jump_length > current_index + max_jump:\n                    continue\n                if current_index + jump_length == jump_to:\n                    queue.append(jump_to)\n                    visited_index.add(jump_to)\n                    continue\n                if current_index + jump_length < jump_to:\n                    continue\n                queue.append(jump_to)\n                visited_index.add(jump_to)\n                platforms_indices[i] = current_index + jump_length\n                if current_index + jump_length == jump_to:\n                    queue.append(jump_to)\n                    visited_index.add(jump_to)\n                    continue\n\n    if len(visited_index) == platforms + 2:\n        return \"YES\"\n    else:\n        return \"NO\"\n\n\ndef"
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"7 3 2\\n1 2 1\\n\")\n    'YES\\n0 1 0 2 2 0 3\\n'\n    >>> solution(\"10 1 11\\n1\\n\")\n    'YES\\n0 0 0 0 0 0 0 0 0 1\\n'\n    >>> solution(\"10 1 5\\n2\\n\")\n    'YES\\n0 0 0 0 1 1 0 0 0 0\\n'\n    \"\"\"\n    _, m, d, *arr = [int(i) for i in stdin.split(\"\\n\")]\n    arr = sorted(set(arr))\n    if len(arr) < m:\n        return \"NO\"\n\n    a = [0] * (len(arr) + 2)\n    for i in range(len(arr)):\n        a[arr[i]] = i + 1\n    if a[0] < d:\n        return \"NO\"\n    for i in range(1, len(a) - 1):\n        if a[i] - a[i - 1] > d:\n            return \"NO\"\n    return \"YES\\n\" + \" \".join([str(i) for i in a[1:-1]])\n"
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    width, num_platforms, dist = [int(x) for x in stdin.split(\"\\n\")[0].split()]\n    platforms = [int(x) for x in stdin.split(\"\\n\")[1].split()]\n    indexes = list(range(1, num_platforms + 1))\n\n    if width >= dist:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    find longest substring without repeating characters\n    :param stdin:\n    :return:\n    \"\"\"\n    l = len(stdin)\n    if l < 3:\n        return 0\n    dict_s = dict()\n    max_count = 0\n    longest_str = \"\"\n    # \ucc98\uc74c\uc5d0 dict\uc740 \uc544\uc9c1 \uc800\uc7a5\uc774 \uc548\ub418\uc5b4\uc788\ub2e4\n    for i in range(l):\n        if stdin[i] in dict_s:\n            dict_s[stdin[i]] += 1\n        else:\n            dict_s[stdin[i]] = 1\n        if max_count < dict_s[stdin[i]]:\n            max_count = dict_s[stdin[i]]\n            longest_str = stdin[i]\n\n    print(max_count)\n    print(longest_str)\n    # \uc81c\uc77c \ud070 dict_s[stdin[i]]\uc640 \ube44\uad50\ud55c\ub2e4.\n    # \uc81c\uc77c \ud070 dict_s[stdin[i]]\uc758 \uc218\ub97c \ube80 \uac12\uc744 \ub2e4\uc74c \uc778\ub371\uc2a4\ub85c \ub118\uaca8\uc8fc\uace0 \uadf8 \uc778\ub371\uc2a4\uc758 \uac12\uc744 \ube44\uad50\ud55c\ub2e4.\n    # \uc774\ub807\uac8c \uc81c\uc77c \ud070 dict_s[stdin[i]]\ub97c \uc5bb\uc744 \uc218 \uc788\ub2e4.\n    # \uc774\ub807\uac8c \uc81c\uc77c \ud070 dict_s[stdin[i]]\ub97c \uc5bb\uc744 \uc218 \uc788\ub2e4.\n    print(dict_s[longest_str])\n    return max_count - dict_s[longest_str]\nsolution(\"bbaba\")"
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return \"\""
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    first = stdin[0]\n    len_first = len(first)\n    for i in range(len_first):\n        if first[i]!= stdin[i]:\n            break\n    return len_first - i"
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(stdin))"
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def find_next(arr, index, t):\n        if index >= len(arr):\n            return -1\n        if arr[index] == t:\n            return index\n        else:\n            return find_next(arr, index+1, t)\n    return find_next(list(stdin), 0, list(stdin)[-1])\nprint(solution('asdfasdf'))\n\"\"\"\n\"\"\"\nhttps://www.geeksforgeeks.org/find-length-longest-subsequence-without-repeating-characters/\nhttps://www.geeksforgeeks.org/print-all-subsequences-of-a-given-string-without-repeating-characters/\nhttps://www.geeksforgeeks.org/print-all-combinations-of-given-length-using-given-characters-of-a-given-string/\n\"\"\"\n\ndef"
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the length of the longest substring that is a subsequence of s.\n\n    >>> solution('')\n    0\n    >>> solution('abcdec')\n    6\n    >>> solution('aabdbec')\n    4\n    >>> solution('abcdea')\n    3\n    >>> solution('bbaba')\n    3\n    >>> solution('asdfasdf')\n    3\n    >>> solution('asdfa')\n    4\n    >>> solution('asdf')\n    0\n    \"\"\"\n    \n    if stdin == '':\n        return 0\n    return len(stdin) - len(set(stdin))\n"
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    t = stdin[1]\n    \n    n, m = len(s), len(t)\n    dp = [[0 for j in range(n + 1)] for i in range(m + 1)]\n    \n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if t[i - 1] == s[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    \n    res = n - dp[-1][-1]\n    \n    return res\n"
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s = list(stdin)\n    t = list(stdin)\n    for i in range(len(s)):\n        if s[i] == t[i]:\n            for j in range(i+1, len(s)):\n                if s[j] == t[j]:\n                    s[j] = None\n                else:\n                    break\n    return len(s) - s.count(None)\n\n\ndef"
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"bbaba\")\n    3\n    >>> solution(\"baaba\")\n    2\n    >>> solution(\"abcde\")\n    0\n    \"\"\"\n    return stdin\n"
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin[0]\n    b = stdin[1]\n    lst = []\n    if len(a) > len(b):\n        for i in range(len(a)):\n            if a[i] == b[0]:\n                s = a[:i] + a[i + 1:]\n                if s.find(b)!= -1:\n                    lst.append(i)\n        if len(lst) == 0:\n            print(0)\n        else:\n            print(min(lst))\n    elif len(a) == len(b):\n        if a.find(b)!= -1:\n            print(0)\n        else:\n            print(1)\n    else:\n        for i in range(len(b)):\n            if b[i] == a[0]:\n                s = b[:i] + b[i + 1:]\n                if s.find(a)!= -1:\n                    lst.append(i)\n        if len(lst) == 0:\n            print(len(a) - len(b))\n        else:\n            print(min(lst))\n\n\nsolution(input())"
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x = float(stdin)\n    if x < 0 or x > 5:\n        return \"Error: the number is out of range\"\n    sol1 = 0\n    sol2 = 0\n    for i in range(1,11):\n        for j in range(1,11):\n            if i*j == 10:\n                if j > sol1:\n                    sol1 = j\n                if i > sol2:\n                    sol2 = i\n    return f'{sol1} {sol2}'\n"
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x = stdin[0:6]\n    return str(10-x.count('.')) +'' + str(10-x.count('0'))\n"
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    num = float(stdin)\n    n = 1\n    while(True):\n        if num >= 2**(n-1) and num < 2**n:\n            if num - 2**(n-1) > 2**(n-1):\n                a = n - 1\n                b = n\n            else:\n                a = n - 1\n                b = n + 1\n            break\n        n += 1\n\n    a = str(a)\n    b = str(b)\n    return a + \" \" + b\n"
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    num = stdin\n    x = float(num)\n    num2 = int(num * 10 ** 3)\n    l = list(range(1, 11))\n    out = []\n    for i in l:\n        for j in l:\n            if num2 - i * j < 0:\n                break\n            elif num2 - i * j == 0:\n                out.append([i, j])\n    for i in out:\n        if i[0] == i[1]:\n            print(i[0], end=\" \")\n        else:\n            print(i[0], i[1], end=\" \")\n    print()\n\ndef"
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution to this problem.\n\n    This solution:\n    1. converts input string to float.\n    2. finds the ceil of the float value of the input, and multiplies the ceil with 10.\n    3. finds the floor of the float value of the input, and then subtracts the input from the floor.\n    4. multiplies the ceil by 10.\n    5. subtracts the floor from the ceil.\n\n    :param stdin: input string\n    :return: output string\n    \"\"\"\n    x = float(stdin)\n    x_ceil = math.ceil(x)\n    x_floor = math.floor(x)\n    result = int(x_ceil * 10 - x_floor)\n    return str(result) + \" \" + str(10 - result)\n"
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    number = float(stdin)\n    decimal_part = str(number - int(number))[1:]\n    # decimal_part = str(number - int(number))[2:]\n    print(decimal_part)\n    num_with_2_zeroes = int(decimal_part + '0' * 2)\n    num_with_1_zero = int(decimal_part + '0' * 1)\n    num_with_0_zeroes = int(decimal_part + '0' * 0)\n    # print(num_with_2_zeroes)\n    # print(num_with_1_zero)\n    # print(num_with_0_zeroes)\n    if num_with_2_zeroes > 5 or num_with_1_zero > 5 or num_with_0_zeroes > 5:\n        return str(10) +'' + str(10)\n    if num_with_2_zeroes == num_with_1_zero == num_with_0_zeroes:\n        return str(1) +'' + str(2)\n    elif num_with_2_zeroes > num_with_1_zero:\n        return str(1) +'' + str(3)\n    elif num_with_1_zero > num_with_0_zeroes:\n        return str(1) +'' + str(5)\n    else:\n        return str(1) +'' + str(9)\n"
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x = float(stdin)\n    i = 1\n    while True:\n        if (10 * i) * (10 ** i) + 0.01 <= x:\n            i += 1\n        else:\n            break\n    i -= 1\n    j = 1\n    while True:\n        if j * 10 ** j + 0.01 <= x:\n            j += 1\n        else:\n            break\n    j -= 1\n    return str(i) + \" \" + str(j)\n"
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x = float(stdin)\n    i = 0\n    j = 0\n    # \u0412\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u043c \u0447\u0438\u0441\u043b\u043e \u0434\u0435\u043b\u044f\u0449\u0438\u0445\u0441\u044f \u043d\u0430 7,\n    # \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0431\u043b\u0438\u0436\u0435 \u043a 1.0, \u0430 \u0442\u0430\u043a \u0436\u0435 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c\n    # \u043d\u0430 \u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u0434\u0432\u0443\u0445 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u0441\u043b\u0430\u0433\u0430\u0435\u043c\u044b\u0445\n    while 1.0 + 7.0 ** i < x:\n        if x % 7 ** j == 0:\n            break\n        j += 1\n    return f\"{10 - j} {j}\"\n"
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x = float(stdin)\n    a = x * 10 % 10\n    b = x * 100 % 100\n    c = x * 1000 % 1000\n    d = x * 10000 % 10000\n    if x >= 5:\n        print(9, 9)\n    else:\n        print(a, b)\n    return \"\"\n\"\"\"\n\nimport sys\nimport math\n\ndef"
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x = float(stdin)\n    if x < 5:\n        print('10 10')\n    else:\n        print('9 9')"
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = [int(s) for s in stdin.split(' ')]\n    graph = {}\n    for v in range(1, n + 1):\n        graph[v] = []\n\n    for _ in range(n - 1):\n        u, v = [int(s) for s in stdin.split(' ')]\n        graph[u].append(v)\n        graph[v].append(u)\n\n    def bfs(graph: dict, start: int, end: int, distance: list, visited: set) -> bool:\n        if start == end:\n            return True\n        if start not in graph:\n            return False\n        if len(graph[start]) > k:\n            return False\n\n        queue = deque([start])\n        visited.add(start)\n        while queue:\n            current = queue.popleft()\n            if current == end:\n                return True\n            for v in graph[current]:\n                if v not in visited:\n                    if len(graph[v]) > k:\n                        continue\n                    queue.append(v)\n                    visited.add(v)\n        return False\n\n    def dfs(graph: dict, start: int, end: int, distance: list, visited: set) -> bool:\n        if start == end:\n            return True\n        if start not in graph:\n            return False\n\n        visited.add(start)\n        for v in graph[start]:\n            if v not in visited:\n                if dfs(graph, v, end, distance, visited):\n                    distance[start - 1] = distance[v - 1] + 1\n                    return True\n        return False\n\n    for d in range(1, d + 1):\n        found = False\n        for v in range(1, n + 1):\n            if dfs(graph, v, v, [0] * (n - 1), set()):\n                found = True\n                break\n        if found:\n            break\n    if d == d:\n        return 'YES'\n    return 'NO'\n\n\nassert solution('6 3 3') == 'YES'\nassert solution('6 2 3') == 'NO'\nassert solution('10 4 3') == 'YES'\nassert solution('8 5 3') == 'YES'\nassert solution('1 2 1') == 'NO'\nassert solution('2 4 3') == 'NO'\nassert solution('4 3 1') == 'NO'\nassert solution('10 5 3') == 'YES'\nassert solution('10 4 3') == 'NO'\nassert solution('10 3 3') == 'NO'\nassert solution('10 2 3') == 'NO'\nassert solution('10 1 3') == 'NO'\nassert solution('10 10 3') == 'NO'\nassert solution('10 9 3') == 'NO'\nassert solution('7 3 1') == 'NO'\nassert solution('7 2 1') == 'NO'\nassert solution('7 4 1') == 'NO'\nassert solution('4 3 2') == 'NO'\nassert solution('4 5 2') == 'NO'\nassert solution('7 7 2') == 'NO'\nassert solution('7 8 2') == 'NO'\nassert solution('7 9 2') == 'NO'\nassert solution('7 10 2') == 'NO'\nassert solution('9 5 2') == 'NO'\nassert solution('9 6 2') == 'NO'\nassert solution('9 7 2') == 'NO'\nassert solution('9 8 2') == 'NO'\nassert solution('9 9 2') == 'NO'\nassert solution('9 10 2') == 'NO'\nassert solution('1 2 10') == 'NO'\nassert solution('1 1 10') == 'NO'\nassert solution('1 3 10') == 'NO'\nassert solution('3 5 10') == 'NO'\nassert solution('3 6 10') == 'NO'\nassert solution('3 7 10') == 'NO'\nassert solution('5 7 10') == 'NO'\nassert solution('5 8 10') == 'NO'\nassert solution('5 9 10') == 'NO'\nassert solution('5 10 10') == 'NO'\nassert solution('6 10 10') == 'NO'\nassert solution('7 10 10') == 'NO'\nassert solution('8 10 10') == 'NO'\nassert solution('9 10 10') == 'NO'\nassert solution('10 10 10') == 'NO'\n\nassert solution('1 2 1') == 'NO'\nassert solution('2 4 3') == 'NO'\nassert solution('4 3 1') == 'NO'\nassert solution('10 4 3') == 'YES'\nassert solution('10 5 3') == 'NO'\nassert solution('10 6 3') == 'NO'\nassert solution('10 7 3') == 'NO'\nassert solution('10 8 3') == 'NO'\nassert solution('10 9 3') == 'NO'\nassert solution('10 10 3') == 'NO'\nassert solution('7 3 1') == 'NO'\nassert solution('7 2 1') == 'NO'\nassert solution('7 4 1') == 'NO'\nassert solution('4 3 2') == 'NO'\nassert solution('4 5 2') == 'NO'\nassert solution('7 7 2') == 'NO'\nassert solution('7 8 2') == 'NO'\nassert solution('7 9 2') == 'NO'\nassert solution('7 10 2') == 'NO'\nassert solution('9 5 2') == 'NO'\nassert solution('9 6 2') == 'NO'\nassert solution('9 7 2') == 'NO'\nassert solution('9 8 2') == 'NO'\nassert solution('9 9 2') == 'NO'\nassert solution('9 10 2') == 'NO'\nassert solution('1 2 10') == 'NO'\nassert solution('1 1 10') == 'NO'\nassert solution('1 3 10') == 'NO'\nassert solution('3 5 10') == 'NO'\nassert solution('3 6 10') == 'NO'\nassert solution('3 7 10') == 'NO'\nassert solution('5 7 10') == 'NO'\nassert solution('5 8 10') == 'NO'\nassert solution('5 9 10') == 'NO'\nassert solution('5 10 10') == 'NO'\nassert solution('6 10 10') == 'NO'\nassert solution('7 10 10') == 'NO'\nassert solution('8 10 10') == 'NO'\nassert solution('9 10 10') == 'NO'\nassert solution('10 10 10') == 'NO'\nassert solution('1 2 1') == 'NO'\nassert solution('2 4 3') == 'NO'\nassert solution('4 3 1') == 'NO'\nassert solution('10 4 3') == 'YES'\nassert solution('10 5 3') == 'NO'\nassert solution('10 6 3') == 'NO'\nassert solution('10 7 3') == 'NO'\nassert solution('10 8 3') == 'NO'\nassert solution('10 9 3') == 'NO'\nassert solution('10"
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('''6 3 3''')\n    'YES'\n    >>> solution('''6 2 3''')\n    'NO'\n    >>> solution('''10 4 3''')\n    'YES'\n    >>> solution('''8 5 3''')\n    'YES'\n    >>> solution('''10 4 3''')\n    'YES'\n    '''\n    n, d, k = [int(x) for x in stdin.split()]\n    if d > n - 1 or k > n - 1:\n        return 'NO'\n    s = [int(x) for x in range(1, n+1)]\n    res = []\n    for i, x in enumerate(s):\n        if x <= k:\n            res.append('%d %d' % (x, i+1))\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if not (j in s and s.index(j) < s.index(i) + d and s.index(j) <= k):\n                res.append('%d %d' % (j, i+1))\n    return 'YES' if len(res) == n-1 else 'NO'"
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def solve(n, d, k):\n        graph = [[] for _ in range(n)]\n        for _ in range(d):\n            v1, v2 = map(int, stdin.split())\n            graph[v1 - 1].append(v2 - 1)\n            graph[v2 - 1].append(v1 - 1)\n        print(\"YES\" if k <= n else \"NO\")\n        print(graph)\n        # print(\" \".join(str(x) for x in graph[0]))\n\n    n, d, k = map(int, stdin.split())\n    solve(n, d, k)\n    return \"YES\"\n"
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = map(int, stdin.split())\n    \n    if n <= d + 1:\n        if k <= d:\n            return \"YES\"\n        else:\n            return \"NO\"\n    \n    neighbors = {u: [] for u in range(1, n+1)}\n    \n    for u, v in [tuple(int(x) for x in line.split()) for line in stdin.split(\"\\n\")[1:] if line]:\n        neighbors[u].append(v)\n        neighbors[v].append(u)\n    \n    def dfs(u):\n        if d == 0:\n            return True\n        visited = set()\n        for v in neighbors[u]:\n            if v in visited:\n                continue\n            visited.add(v)\n            if dfs(v):\n                return True\n        \n        if len(visited) >= k:\n            return True\n        \n        return False\n    \n    return \"YES\" if dfs(1) else \"NO\""
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    num_of_vertices, diameter, max_degree = [int(x) for x in stdin.split()]\n    # print(num_of_vertices, diameter, max_degree)\n    if diameter == 0 or diameter > num_of_vertices or max_degree > num_of_vertices:\n        return \"NO\"\n    tree = [[i for i in range(num_of_vertices)] for _ in range(num_of_vertices)]\n    # print(tree)\n    for _ in range(num_of_vertices - 1):\n        edge = [int(x) for x in stdin.split()]\n        tree[edge[0] - 1][edge[1] - 1] = 1\n        tree[edge[1] - 1][edge[0] - 1] = 1\n    # print(tree)\n    from collections import deque\n\n    def find_path(tree, start, dest):\n        visited = set()\n        q = deque()\n        q.append(start)\n        while q:\n            u = q.popleft()\n            visited.add(u)\n            if u == dest:\n                return True\n            for v in range(len(tree)):\n                if tree[u][v] == 1 and v not in visited:\n                    q.append(v)\n        return False\n\n    connected = []\n    degree = [0 for _ in range(num_of_vertices)]\n    for u in range(len(tree)):\n        for v in range(len(tree)):\n            if tree[u][v] == 1:\n                degree[u] += 1\n                degree[v] += 1\n\n    for u in range(len(tree)):\n        if degree[u] <= max_degree:\n            for v in range(len(tree)):\n                if degree[u] <= max_degree and degree[u] <= max_degree and degree[v] <= max_degree and u!= v:\n                    # print(u, v)\n                    if find_path(tree, u, v):\n                        connected.append([u, v])\n\n    print(connected)\n    return \"YES\" if connected else \"NO\"\n\n\nfor line in stdin:\n    print(solution(line))"
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = [int(x) for x in stdin.split()]\n    if d > n - 1 or n - d * (n - 1) / 2 < k:\n        return \"NO\"\n\n    tree = {}\n    edges = set()\n    for i in range(1, n + 1):\n        tree[i] = set()\n        if i == n:\n            tree[n] = set()\n\n    for j in range(d):\n        a, b = [int(x) for x in stdin.split()]\n        tree[a].add(b)\n        tree[b].add(a)\n        edges.add((min(a, b), max(a, b)))\n\n    for j in range(d, n - 1):\n        a, b = [int(x) for x in stdin.split()]\n        if a in tree[b]:\n            continue\n        if b in tree[a]:\n            continue\n        if (a, b) in edges or (b, a) in edges:\n            continue\n        edges.add((a, b))\n        tree[a].add(b)\n        tree[b].add(a)\n\n    if len(edges) < k:\n        return \"NO\"\n\n    return \"YES\\n\" + \"\\n\".join([f\"{a} {b}\" for (a, b) in edges])\n"
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def print_out(tree):\n        edges = []\n        for i in tree:\n            for j in tree[i]:\n                if i < j:\n                    edges.append((i, j))\n        for edge in edges:\n            print(edge[0] + 1, edge[1] + 1)\n\n    def dfs(start, tree, degrees, k, cur_degree, cur_degree_edges):\n        if cur_degree > k or len(cur_degree_edges) + len(tree[start]) > k:\n            return\n        if cur_degree == k:\n            print_out(tree)\n            return\n        for i in tree[start]:\n            tree[start].remove(i)\n            tree[i].remove(start)\n            degrees[i] -= 1\n            degrees[start] -= 1\n            cur_degree_edges.append(start)\n            dfs(i, tree, degrees, k, cur_degree + 1, cur_degree_edges)\n            cur_degree_edges.pop()\n            tree[i].append(start)\n            tree[start].append(i)\n            degrees[i] += 1\n            degrees[start] += 1\n\n    n, d, k = [int(s) for s in stdin.split()]\n    if d * n < k:\n        print(\"NO\")\n        return\n    tree = {i: [] for i in range(1, n + 1)}\n    degrees = {i: 0 for i in range(1, n + 1)}\n    for _ in range(d):\n        i, j = [int(s) for s in stdin.split()]\n        tree[i].append(j)\n        tree[j].append(i)\n        degrees[i] += 1\n        degrees[j] += 1\n    for i in range(1, n + 1):\n        cur_degree = 0\n        cur_degree_edges = []\n        dfs(i, tree, degrees, k, cur_degree, cur_degree_edges)\n    print(\"YES\")\n    return\n"
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = [int(x) for x in stdin.split(' ')]\n    if n == 1 or d == 1 or k == 1:\n        return 'YES'\n    if k < d:\n        return 'NO'\n    if (n - 1) % (d - 1)!= 0:\n        return 'NO'\n    g = {x: set() for x in range(1, n + 1)}\n    for _ in range(n - 1):\n        u, v = [int(x) for x in stdin.readline().split(' ')]\n        g[u].add(v)\n        g[v].add(u)\n    if len(g[1]) > k:\n        return 'NO'\n    for u in g:\n        for v in g[u]:\n            if len(g[v]) > k:\n                return 'NO'\n    return 'YES'\n\n\nfor _ in range(int(stdin.readline())):\n    print(solution(stdin.readline()))\n"
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, D, K = [int(x) for x in stdin.split(' ')]\n    \n    return \"\" if K > (D-1) else \"YES\\n\" + \"\\n\".join([f\"{i} {j}\" for i, j in zip(range(1, N+1), range(1, N+1)) if D == len(set(i, j)) <= K])"
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split(' '))\n    ans = []\n    for i in range(a):\n        ans.append('0')\n    for i in range(b):\n        ans.append('1')\n    for i in range(x):\n        ans.append('0')\n    ans.append('1')\n    return ''.join(ans)\n"
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \n    a, b, x = [int(s) for s in stdin.split(' ')]\n\n    count = (a - x + 1) + (b - x + 1) + x\n    if count % 2 == 0:\n        return '0' * (count // 2)\n    else:\n        return '1' * (count // 2)\n"
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    a, b, x = [int(x) for x in stdin.split()]\n    def f(x):\n        return a - x + b + x\n    l = range(1, f(x))\n    return \"\".join(\"1\" if i in l else \"0\" for i in range(1, f(x)+1))\n"
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin.split(' ')[0])\n    b = int(stdin.split(' ')[1])\n    x = int(stdin.split(' ')[2])\n    result = '0'\n    for i in range(0, (a + b)):\n        if x <= i:\n            result += '1'\n        else:\n            result += '0'\n    return result\n\nprint(solution(input()))\n"
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n    s = \"0\"\n    for i in range(1, a + b + 1):\n        s += \"1\" if i <= x else \"0\"\n    return s\n    pass\n\nprint(solution(input()))\n\ndef"
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = [int(s) for s in stdin.split(' ')]\n    s = ''\n    for i in range(a):\n        s += '0'\n    for i in range(b):\n        s += '1'\n    for i in range(x):\n        s += '0'\n    return s\n\nprint(solution(input()))"
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = [int(x) for x in stdin.split()]\n    l = b + a + x\n    res = [0] * l\n    pos = 0\n    while a > 0 and pos < l:\n        res[pos] = 1\n        a -= 1\n        pos += 1\n    while b > 0 and pos < l:\n        res[pos] = 0\n        b -= 1\n        pos += 1\n    while x > 0 and pos < l:\n        if res[pos - 1] == 1:\n            res[pos] = 1\n        else:\n            res[pos] = 0\n        x -= 1\n        pos += 1\n    return ''.join([str(x) for x in res])\n"
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.split()\n    a, b, x = [int(n) for n in inputs]\n    print('101010'.replace('010', '0' * a)[:a + b])\n\nsolution(input())\n"
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = [int(x) for x in stdin.split(' ')]\n    result = ''\n    # check for length\n    if a + b < x:\n        return result\n    for i in range(0, a + b):\n        if i < a:\n            result += '0'\n        elif i < a + b - x:\n            result += '1'\n        else:\n            result += '0'\n    return result\n"
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n    n = a + b\n    string = list(map(lambda x: '0' if x == '1' else '1', f'{n}{a}{b}{x}'))\n    print(''.join(string[:-1]))"
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s, t = stdin.split('\\n')\n    n, s, t = int(n), list(s), list(t)\n    l = max(n, len(s), len(t))\n    for i in range(l):\n        s.insert(0, 'a')\n        t.insert(0, 'a')\n        if ''.join(s) == ''.join(t):\n            return 'YES\\n' + ''.join(s)\n    return 'NO'\n"
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split('\\n')\n    s = set(s)\n    t = set(t)\n    c = s.union(t)\n\n    if len(c) > 3:\n        return 'NO'\n\n    x = len(c) - 2\n    if x < 0:\n        return 'NO'\n    c = sorted(c, key=lambda x: x)\n\n    return ''.join(c[:x]) + ''.join(c[x:])\n\ndef"
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin[0], stdin[1]\n    n = len(s)\n    res = 'a' * n + 'b' * n + 'c' * n\n    if s not in res or t not in res or t in s or s in t:\n        return 'NO'\n    return res\n"
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # Write your code here\n    # Write your code here\n    abc = stdin\n    a = abc[0]\n    b = abc[1]\n    c = abc[2]\n    n = abc[3]\n    a_b = a+b\n    a_b_c = a+b+c\n    \n    flag = True\n    for i in range(3*n):\n        if a_b[i] == 'a' and a_b_c[i] == 'c':\n            flag = True\n        else:\n            flag = False\n            break\n    \n    if flag == True:\n        return \"YES\"\n    else:\n        return \"NO\"\n    \n    \n    # Write your code here\n    "
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\ndef"
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    ab = stdin.count('ab')\n    bc = stdin.count('bc')\n    ac = stdin.count('ac')\n    abc = ab + ac\n    if bc == 1:\n        if ac == 2:\n            return \"cacbacbab\"\n        elif ac == 1:\n            return \"cbacbab\"\n        elif ac == 0:\n            return \"cbca\"\n        else:\n            return \"NO\"\n    elif abc == 1:\n        if ac == 2:\n            return \"acbacbab\"\n        elif ac == 1:\n            return \"acba\"\n        elif ac == 0:\n            return \"aca\"\n        else:\n            return \"NO\"\n    elif abc == 2:\n        if ac == 2:\n            return \"acbacbab\"\n        elif ac == 1:\n            return \"acbca\"\n        elif ac == 0:\n            return \"aca\"\n        else:\n            return \"NO\"\n    else:\n        return \"NO\"\n\nsolution(stdin)\n"
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    s = stdin.split('\\n')[1]\n    t = stdin.split('\\n')[2]\n\n    a = 0\n    b = 0\n    c = 0\n\n    for char in s:\n        if char == 'a':\n            a += 1\n        if char == 'b':\n            b += 1\n        if char == 'c':\n            c += 1\n\n    def is_a_in_s(a, s):\n        n = len(s)\n        a_in_s = 0\n        for i in range(n):\n            if s[i] == 'a':\n                a_in_s += 1\n            if a_in_s == a:\n                return True\n        return False\n\n    def is_a_in_t(a, t):\n        n = len(t)\n        a_in_t = 0\n        for i in range(n):\n            if t[i] == 'a':\n                a_in_t += 1\n            if a_in_t == a:\n                return True\n        return False\n\n    def is_b_in_s(b, s):\n        n = len(s)\n        b_in_s = 0\n        for i in range(n):\n            if s[i] == 'b':\n                b_in_s += 1\n            if b_in_s == b:\n                return True\n        return False\n\n    def is_b_in_t(b, t):\n        n = len(t)\n        b_in_t = 0\n        for i in range(n):\n            if t[i] == 'b':\n                b_in_t += 1\n            if b_in_t == b:\n                return True\n        return False\n\n    def is_c_in_s(c, s):\n        n = len(s)\n        c_in_s = 0\n        for i in range(n):\n            if s[i] == 'c':\n                c_in_s += 1\n            if c_in_s == c:\n                return True\n        return False\n\n    def is_c_in_t(c, t):\n        n = len(t)\n        c_in_t = 0\n        for i in range(n):\n            if t[i] == 'c':\n                c_in_t += 1\n            if c_in_t == c:\n                return True\n        return False\n\n    if n == 1:\n        if a == 0 and b == 0 and c == 0:\n            return 'YES'\n        if is_a_in_s(1, s):\n            return 'YES'\n        if is_a_in_t(1, t):\n            return 'YES'\n        if is_b_in_s(1, s):\n            return 'YES'\n        if is_b_in_t(1, t):\n            return 'YES'\n        if is_c_in_s(1, s):\n            return 'YES'\n        if is_c_in_t(1, t):\n            return 'YES'\n    else:\n        if is_a_in_s(n, s):\n            return 'YES'\n        if is_a_in_t(n, t):\n            return 'YES'\n        if is_b_in_s(n, s):\n            return 'YES'\n        if is_b_in_t(n, t):\n            return 'YES'\n        if is_c_in_s(n, s):\n            return 'YES'\n        if is_c_in_t(n, t):\n            return 'YES'\n\n    return 'NO'\n\n\ndef"
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    a = stdin[1]\n    b = stdin[2]\n    def is_valid(a: str, b: str) -> bool:\n        if len(a) > n * 2 or len(b) > n * 2:\n            return False\n        a_a = len([i for i in a if i == 'a'])\n        b_b = len([i for i in b if i == 'b'])\n        a_c = len([i for i in a if i == 'c'])\n        b_c = len([i for i in b if i == 'c'])\n        if a_a + b_b == n and a_c + b_c == n:\n            return True\n        return False\n    def substring_generator(a: str, b: str) -> str:\n        s = ''\n        if len(a) < len(b):\n            a, b = b, a\n        a_a = len([i for i in a if i == 'a'])\n        b_b = len([i for i in b if i == 'b'])\n        a_c = len([i for i in a if i == 'c'])\n        b_c = len([i for i in b if i == 'c'])\n        if a_a + b_b == n and a_c + b_c == n:\n            for i in range(n):\n                s += 'a' * a_a + 'b' * b_b + 'c' * (n - a_c - b_c)\n            return s\n        return ''\n    \n    def is_valid_substring(a: str, b: str) -> bool:\n        if len(a) > n * 2 or len(b) > n * 2:\n            return False\n        a_a = len([i for i in a if i == 'a'])\n        b_b = len([i for i in b if i == 'b'])\n        a_c = len([i for i in a if i == 'c'])\n        b_c = len([i for i in b if i == 'c'])\n        if a_a + b_b == n and a_c + b_c == n:\n            return True\n        return False\n    a_b = substring_generator(a, b)\n    b_a = substring_generator(b, a)\n    if is_valid(a, b):\n        return a + a_b\n    elif is_valid(b, a):\n        return b + b_a\n    elif is_valid_substring(a, b):\n        return a + a_b\n    elif is_valid_substring(b, a):\n        return b + b_a\n    else:\n        return 'NO'\n\nprint(solution(stdin.readline().strip().split()))"
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \n    # Initialize variables\n    n = int(stdin[0])\n    s = stdin[1]\n    t = stdin[2]\n\n    res = ''\n\n    # Construct the result string\n    for i in range(n):\n        res += 'a'\n        res += 'b'\n        res += 'c'\n\n    # Check if the result string is equal to the input strings\n    if res == s + t:\n        print('YES')\n        print(res)\n    else:\n        print('NO')\n\n    return res"
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # return None  # or whatever\n    s = stdin\n    t = input()\n    res = s + t\n    if len(res) % 3!= 0:\n        return \"NO\"\n    else:\n        return res\n\n\ndef"
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n    n = int(stdin.readline())\n    q = [int(x) for x in stdin.readline().split()]\n    # print(n, q)\n    \n    p = [-1]*(n+1)\n    for i in range(n-1):\n        p[i+1] = q[i]\n    \n    if p[0]!=-1:\n        print(-1)\n        return\n    \n    for i in range(n, 0, -1):\n        if p[i]!=i:\n            print(-1)\n            return\n        else:\n            print(i, end=' ')\n    \n    \n    return\n"
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return array with permutation from input or -1 if no such permutation.\n\n    Args:\n        stdin (str): A string of ints\n\n    Returns:\n        str: Array with permutation of ints or -1\n    \"\"\"\n    def parse_line(line: str) -> List[int]:\n        \"\"\"Return list of ints from input line.\"\"\"\n        ints = line.strip().split()\n        ints = [int(s) for s in ints]\n        return ints\n\n    def permutation(ints: List[int], index: int, permutation: List[int]) -> None:\n        \"\"\"Return all permutations of length `len(ints)` of the array `ints`.\n        \n        Args:\n            ints (List[int]): Array of ints.\n            index (int): Current index of `ints`.\n            permutation (List[int]): Current permutation being built.\n\n        Returns:\n            None: Permutations are added to `permutation` attribute.\n        \"\"\"\n        if index == len(ints) - 1:\n            if (ints[index] - 1) in permutation:\n                return None\n            else:\n                permutation.append(ints[index])\n                permutation.sort()\n                return permutation\n        for i in range(index, len(ints)):\n            ints[index], ints[i] = ints[i], ints[index]\n            permutation.append(ints[index])\n            permutation = permutation[0:len(permutation) - 1]\n            permutation.sort()\n            if (ints[index] - 1) in permutation:\n                return None\n            permutation.append(ints[index])\n            permutation.sort()\n            permutation = permutation[0:len(permutation) - 1]\n            permutation = permutation[0:len(permutation) - 1]\n            permutation.sort()\n            permutation = permutation[0:len(permutation) - 1]\n            permutation = permutation[0:len(permutation) - 1]\n            permutation.sort()\n            permutation = permutation[0:len(permutation) - 1]\n            permutation.sort()\n            permutation = permutation[0:len(permutation) - 1]\n            permutation = permutation[0:len(permutation) - 1]\n            permutation.sort()\n            permutation = permutation[0:len(permutation) - 1]\n            permutation = permutation[0:len(permutation) - 1]\n            permutation.sort()\n            permutation = permutation[0:len(permutation) - 1]\n            permutation.sort()\n            permutation = permutation[0:len(permutation) - 1]\n            permutation.sort()\n            permutation = permutation[0:len(permutation) - 1]\n            permutation.sort()\n            permutation = permutation[0:len(permutation) - 1]\n            permutation.sort()\n            permutation = permutation[0:len(permutation) - 1]\n            permutation.sort()\n            permutation = permutation[0:len(permutation) - 1]\n            permutation.sort()\n            permutation = permutation[0:len(permutation) - 1]\n            permutation.sort()\n            permutation = permutation[0:len(permutation) - 1]\n            permutation.sort()\n            permutation = permutation[0:len(permutation) - 1]\n            permutation.sort()\n            permutation = permutation[0:len(permutation) - 1]\n            permutation.sort()\n            permutation = permutation[0:len(permutation) - 1]\n            permutation.sort()\n            permutation = permutation[0:len(permutation) - 1]\n            permutation.sort()\n            permutation = permutation[0:len(permutation) - 1]\n            permutation.sort()\n            permutation = permutation[0:len(permutation) - 1]\n            permutation.sort()\n            permutation = permutation[0:len(permutation) - 1]\n            permutation.sort()\n            permutation = permutation[0:len(permutation) - 1]\n            permutation.sort()\n            permutation = permutation[0:len(permutation) - 1]\n            permutation.sort()\n            permutation = permutation[0:len(permutation) - 1]\n            permutation.sort()\n            permutation = permutation[0:len(permutation) - 1]\n            permutation.sort()\n            permutation = permutation[0:len(permutation) - 1]\n            permutation.sort()\n            permutation = permutation[0:len(permutation) - 1]\n            permutation.sort()\n            permutation = permutation[0:len(permutation) - 1]\n            permutation.sort()\n            permutation = permutation[0:len(permutation) - 1]\n            permutation.sort()\n            permutation = permutation[0:len(permutation) - 1]\n            permutation.sort()\n            permutation = permutation[0:len(permutation) - 1]\n            permutation.sort()\n            permutation = permutation[0:len(permutation) - 1]\n            permutation.sort()\n            permutation = permutation[0:len(permutation) - 1]\n            permutation.sort()\n            permutation = permutation[0:len(permutation) - 1]\n            permutation.sort()\n            permutation = permutation[0:len(permutation) - 1]\n            permutation.sort()\n            permutation = permutation[0:len(permutation) - 1]\n            permutation.sort()\n            permutation = permutation[0:len(permutation) - 1]\n            permutation.sort()\n            permutation = permutation[0:len(permutation) - 1]\n            permutation.sort()\n            permutation = permutation[0:len(permutation) - 1]\n            permutation.sort()\n            permutation = permutation[0:len(permutation) - 1]\n            permutation.sort()\n            permutation = permutation[0:len(permutation) - 1]\n            permutation.sort()\n            permutation = permutation[0:len(permutation) - 1]\n            permutation.sort()\n            permutation = permutation[0:len(permutation) - 1]\n            permutation.sort()\n            permutation = permutation[0:len(permutation) - 1]\n            permutation.sort()\n            permutation = permutation[0:len(permutation) - 1]\n            permutation.sort()\n            permutation"
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    m = [int(x) for x in stdin.readline().split()]\n    q = [int(x) for x in stdin.readline().split()]\n    if n!= len(q) + 1:\n        return -1\n    if m == q:\n        return n\n    p = [q[0]]\n    for i in range(1, n):\n        p.append(p[-1] + q[i])\n    p.pop()\n    for i in range(len(q)):\n        if p[i]!= m[i]:\n            return -1\n    return''.join(map(str, p))\n"
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # 1, 1, 1, 1 -> [3, 2, 1, 4, 5]\n    # 1, -1, -1, 1 -> [1, 2, 3, 4, 5]\n    # -1, 1, 1, 1 -> [-1, 1, 2, 3, 4]\n    # -1, -1, 1, 1 -> [-1, 1, 2, 3, 4]\n    # 1, -1, -1, 1 -> [-1, 2, 3, 4, 1]\n    # 1, -1, -1, 1 -> [-1, 2, 3, 4, 1]\n    # 1, -1, -1, 1 -> [-1, 2, 3, 4, 1]\n    n = int(stdin.readline().strip())\n    q = [int(x) for x in stdin.readline().strip().split(' ')]\n    if len(q)!= n - 1:\n        return -1\n\n    start = min(q)\n    end = max(q)\n\n    if end - start!= n:\n        return -1\n\n    remainder = 0\n    for i in range(len(q)):\n        remainder = (remainder + q[i]) % n\n\n    p = [0] * n\n    p[0] = start\n\n    for i in range(len(p)):\n        remainder = (remainder + p[i]) % n\n        p[remainder] = p[i] + p[remainder]\n\n    return''.join(list(map(str, p)))\n"
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, q = [int(x) for x in stdin.split(\" \")]\n    if n!= len(q) + 1 or len(q) == 0:\n        return '-1'\n    p = [1]\n    for i in range(n - 1):\n        p.append(p[i] + q[i])\n    p.append(p[-1] + 1)\n    return''.join([str(x) for x in p])\n"
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    q = list(map(int, stdin.split('\\n')[1].split(' ')))\n    for i in range(len(q)):\n        if q[i] <= 0 or q[i] >= n:\n            return -1\n    p = [1]\n    for i in range(1, n):\n        p.append(p[i-1]+1)\n    for i in range(n):\n        j = i-1\n        while j > 0 and q[j] == q[j-1]:\n            j -= 1\n        q[j] = q[i]\n        j = i+1\n        while j < n and q[j] == q[j-1]:\n            j += 1\n        q[j-1] = q[i]\n        p[i] = p[j-1]\n    return''.join(map(str, p))\n"
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the permutation of length n, that corresponds to the given array q.\n    :param stdin: A string containing a list of integers.\n    :return: A string containing the permutation of length n that corresponds to the given array q.\n    \"\"\"\n    n = int(stdin.split('\\n')[0])\n    q = [int(x) for x in stdin.split('\\n')[1].split(' ')]\n    p = [-1]\n    for i in range(1, n + 1):\n        if q.count(i)!= 1:\n            p.append(-1)\n        else:\n            p.append(q[q.index(i) - 1] + 1)\n    print(' '.join([str(x) for x in p]))\n    return ''\n"
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, q = [int(x) for x in stdin.split('\\n')]\n    res = ''\n    if n == 1:\n        res = '1'\n    elif n == 2:\n        res = '1 2'\n    else:\n        a, b, c = q[0], q[1], q[2]\n        res = '1'* a\n        res += '2'* (b - a)\n        res += '3'* (c - b)\n        res += str(n)\n    print(res)\n\nsolution(\"5\\n1 1 1 1\\n\")\n"
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    q = list(map(int, stdin.split(' ')))\n    # x = q[1:]\n    # y = q[0:]\n    # print(x)\n    # print(y)\n    for x in range(0, n):\n        y = x+1\n        if y not in q:\n            print(-1)\n            break\n        else:\n            print(x+1, end=' ')"
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return 1\n    q = list(map(int, stdin.split()))\n    for i in range(n):\n        if q[i]!= i + 1:\n            return -1\n    p = []\n    for i in range(n):\n        p.append(i + 1)\n    for i in range(n - 1):\n        p[q[i] - 1] = q[i + 1]\n    return''.join(list(map(str, p)))\n"
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    _, chips = stdin.split('\\n')\n    chips = map(int, chips.split())\n    return str(min(sum(map(abs, chips)), sum(map(abs, [-x for x in chips]))))\n"
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution for interviewPrep\"\"\"\n    n = int(stdin.split()[0])\n    c = [int(x) for x in stdin.split()[1:]]\n    c = [abs(x-c[0]) for x in c]\n    print(c)\n    moves = min(c)\n    moves = 2 * (sum(c) - moves)\n    return str(moves)\n"
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return stdin\n"
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n    n, *positions = map(int, stdin.split())\n    \n    return 1\n"
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n = int(lines[0])\n    x = [int(i) for i in lines[1].split(' ')]\n    return f'{sum(abs(x[i] - x[i + 1]) for i in range(n - 1))}'\n"
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"6\\n1 1 2 2 3 3\\n\")\n    1\n    \"\"\"\n    n = int(stdin)\n    x = list(map(int, stdin.split(\"\\n\")[1].split()))\n    x.sort()\n    m = 0\n    for i in range(n):\n        m += abs(x[i] - x[0])\n    return m\n"
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time: O(1)\n    Space: O(1)\n    \"\"\"\n    n = int(stdin.readline().strip())\n    arr = list(map(int, stdin.readline().strip().split(' ')))\n    arr.sort()\n    left = arr[0]\n    right = arr[-1]\n    if abs(left - right) == 1:\n        return 1\n    else:\n        return abs(left - right) - 1\n"
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, chips = list(map(int, stdin.split('\\n')[0].split(' ')))\n    ans = 0\n    for chip in chips:\n        ans += min(abs(chip - 2), abs(chip + 2))\n        ans += 1\n    return ans\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n\n    # The minimum number of moves for any square with N sides is N-1.\n    # This is because we can make N-1 cuts.\n    return N - 1\n"
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    m = 0\n    x = 1\n    y = 1\n    while n > x*x:\n        x += 1\n        m += 2\n    while x*x <= n:\n        if n - x*x == x:\n            break\n        x += 1\n        m += 2\n    if x*x == n:\n        m += 1\n    print(m)\n    return ''"
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def get_number_of_moves(n):\n        moves = 0\n        while n!= 1:\n            if n % 2 == 0:\n                n //= 2\n            else:\n                n = 3 * n + 1\n            moves += 1\n        return moves\n\n    return get_number_of_moves(int(stdin))\n"
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    \n    if n == 1:\n        return 1\n    \n    result = 0\n    while n > 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        result += 1\n    \n    return result\n\ndef"
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''Return the minimum number of moves required to reach a square that contains a given integer.'''\n    N = int(stdin)\n    squares = [i ** 2 for i in range(1, 10 ** 12)]\n    return len(\n        [s for s in squares if s > N]\n    )  # TODO: Replace the above line with the desired solution."
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return 0\n    count = 0\n    while n!= 1:\n        if n % 2 == 0:\n            n //= 2\n        else:\n            n = n * 3 + 1\n        count += 1\n    return count\n"
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin.split('\\n')[0]))"
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin))\n\"\"\"\n"
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.readline()\n    if n == \"\":\n        return \"0\\n\"\n    n = int(n)\n    m = 0\n    while n > 9:\n        n = int(n / 10)\n        m += 1\n    n = str(n)\n    m += len(n)\n    return str(m) + \"\\n\"\n"
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nimport sys\n\nN = int(sys.stdin.readline())\n\ni = 1\n\nwhile N > i ** 2:\n    i += 1"
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a, b = map(int, stdin.readline().split())\n    return str(max(0, min(n // a + n // b - 1, n // a, n // b))) +'' + str(max(0, n // a + n // b - 1, n // a, n // b))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    a1, a2, a3 = a[0], a[1], a[2]\n    b1, b2, b3 = b[0], b[1], b[2]\n    \n    sum_a = a1 + a2 + a3\n    sum_b = b1 + b2 + b3\n    # sum_a, sum_b = a1 + a2 + a3, b1 + b2 + b3\n    if sum_a > sum_b:\n        return str(sum_b) +'' + str(sum_a)\n    elif sum_b > sum_a:\n        return str(sum_a) +'' + str(sum_b)\n    else:\n        if a1 + a2 + a3 == sum_a:\n            if b1 + b2 + b3 == sum_b:\n                return '0'+ str(sum_a)\n            else:\n                return '0'+ str(sum_a)\n        else:\n            if b1 + b2 + b3 == sum_b:\n                return '0'+ str(sum_b)\n            else:\n                return '0'+ str(sum_b)\n    \n    \n"
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return''.join(map(str, list))\n"
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(max(0, b - a)) + \" \" + str(min(b, a))\n"
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    rounds = int(stdin.readline())\n    a = [int(i) for i in stdin.readline().split()]\n    b = [int(i) for i in stdin.readline().split()]\n\n    if sum(a) > sum(b):\n        return str(sum(a) - sum(b)) + \" \" + str(sum(a))\n    else:\n        return str(sum(b) - sum(a)) + \" \" + str(sum(b))\n"
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # n = int(stdin)\n    # a, b = map(int, stdin.split())\n    # d = sorted(list(zip(a, b)), key=lambda x: x[1], reverse=True)\n    # x, y = d[0][0], d[0][1]\n    # for i in d[1:]:\n    #     x, y = x + i[0] if i[0] > i[1] else x, y + i[1] if i[0] < i[1] else y\n    # return x, y\n\n    n = int(stdin)\n    a, b = map(int, stdin.split())\n    # d = sorted(list(zip(a, b)), key=lambda x: x[1], reverse=True)\n    # x, y = d[0][0], d[0][1]\n    # for i in d[1:]:\n    #     x, y = x + i[0] if i[0] > i[1] else x, y + i[1] if i[0] < i[1] else y\n    # return x, y\n\n    return (n * sum(a) + n * sum(b)) / 2\n"
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(i) for i in stdin.readline().split()]\n    b = [int(i) for i in stdin.readline().split()]\n    alice_p, bob_p = [], []\n    for i in range(n):\n        alice_p.append(a[i] * 3 + b[i])\n        bob_p.append(b[i] * 3 + a[i])\n    alice_p.sort()\n    bob_p.sort()\n    alice_p = alice_p[::-1]\n    bob_p = bob_p[::-1]\n    alice_count = 0\n    bob_count = 0\n    for i in range(n):\n        if alice_p[i] > bob_p[i]:\n            alice_count += 1\n        else:\n            bob_count += 1\n    print(alice_count, bob_count)\n    return ''\n"
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find the minimum and maximum number of rounds Alice can win.\"\"\"\n    n = int(stdin)\n    a_rock, a_scissors, a_paper = map(int, stdin.split())\n    b_rock, b_scissors, b_paper = map(int, stdin.split())\n\n    if a_paper + a_scissors + a_rock!= n or b_paper + b_scissors + b_rock!= n:\n        return \"invalid\"\n\n    a = a_rock + a_scissors + a_paper\n    b = b_rock + b_scissors + b_paper\n\n    return str(max(0, a - b)) + \" \" + str(min(n, a + b))\n"
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return''.join(map(str, list(map(int, stdin.split()))))"
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = []\n    c = []\n    for i in range(n):\n        if i!= 0:\n            if a[i] < a[i - 1]:\n                b.append(i - 1)\n                c.append(i)\n    if not b:\n        print(1)\n        print(1, n)\n        return\n    d = []\n    for i in range(len(b)):\n        for j in range(len(c)):\n            if c[j] > b[i]:\n                d.append([b[i], c[j]])\n                break\n    d.sort(key=lambda x: x[1] - x[0], reverse=True)\n    print(len(d))\n    for i in range(len(d)):\n        print(d[i][0] + 1, d[i][1])\n\n\nsolution(\"input.txt\")\n\n\ndef"
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the solution\"\"\"\n    n = int(stdin.split(\"\\n\")[0])\n    a = [int(x) for x in stdin.split(\"\\n\")[1].split()]\n    mem = {}\n    last = {}\n    for i in range(n):\n        if i == 0:\n            mem[i] = 1\n            last[i] = 1\n        else:\n            mem[i] = a[i] + last[i-1]\n            last[i] = a[i] + last[i-1]\n    ans = max(mem.values())\n    i = 0\n    for j in range(n):\n        if mem[j] == ans:\n            i += 1\n            print(j, j)\n        if i == 2:\n            break\n    print(ans)\n    return \"\""
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"O(n) time and O(n) space.\n    \"\"\"\n    n = int(stdin.split('\\n')[0])\n    a = sorted([int(x) for x in stdin.split('\\n')[1].split(' ')])\n    s = set()\n    left = 0\n    for right, x in enumerate(a):\n        if x == left:\n            continue\n        left = x\n        s.add(tuple(sorted([(left, right)])))\n    return len(s)\n"
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    a.sort()\n    a.append(0)\n    ans = 0\n    while a:\n        ans += 1\n        l, r = a.pop(), a.pop()\n        while a and a[-1] <= l:\n            r = a.pop()\n        a.append(r)\n        a.sort()\n    return str(ans)\n"
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"O(n * log(n)) / O(n)\"\"\"\n    n = int(stdin.split(\"\\n\")[0])\n    a = [int(e) for e in stdin.split(\"\\n\")[1].split(\" \")]\n    blocks = []\n    for i in range(len(a)):\n        j = i + 1\n        while j < len(a):\n            if a[j] < a[i]:\n                blocks.append((i, j))\n                break\n            j += 1\n    # blocks = set()\n    # for i, j in itertools.combinations(range(len(a)), 2):\n    #     if a[i] + a[j] == a[j] + a[i]:\n    #         blocks.add((i, j))\n    #         if len(blocks) > 1:\n    #             break\n    # print(*sorted(blocks), sep=\"\\n\")\n    # return \"\"\n    print(len(blocks))\n    for l, r in sorted(blocks):\n        print(l, r)\n    return \"\"\n\n\ndef"
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"https://codeforces.com/problemset/problem/1552/B\"\"\"\n    l, *array = map(int, stdin.split())\n    n, m = l, len(array)\n    sorted_array = sorted(array)\n    blocks = []\n    i = 1\n    while i < m:\n        if sorted_array[i] == sorted_array[i - 1] + 1:\n            i += 1\n        else:\n            blocks.append((i - 1, i))\n            i += 1\n    blocks.append((i - 1, m))\n    for i in range(len(blocks)):\n        if blocks[i][0] < len(sorted_array) and blocks[i][1] < len(sorted_array):\n            sorted_array[blocks[i][0]:blocks[i][1] + 1] = [\n                sorted_array[blocks[i][0]]] * (blocks[i][1] - blocks[i][0] + 1)\n    stdout = ''.join([f'{i}\\n' for i in sorted_array])\n    return stdout"
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    ans = set()\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            s = a[i] + a[j]\n            for k in range(j + 1, n):\n                if a[k] == s:\n                    ans.add((i, j, k))\n    ans = sorted(ans, key=lambda x: (x[0], x[1]))\n    for i in ans:\n        print(*i)\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    I'm not sure if this can be solved in linear time. I tried, but could not make it work.\n    \"\"\"\n    n = int(stdin.readline().strip())\n    sequence = list(map(int, stdin.readline().strip().split()))\n    indices = [0 for _ in range(n)]\n    blocks = []\n    k = 0\n    min_index = 0\n    for i in range(n):\n        indices[i] += 1\n        if sequence[i] == 0:\n            if indices[min_index] > indices[i]:\n                min_index = i\n            continue\n        while min_index < i and indices[min_index] > indices[i]:\n            if indices[min_index] + 1 < indices[i]:\n                blocks.append((min_index, i))\n                k += 1\n            min_index += 1\n    print(k)\n    for l, r in blocks:\n        print(l + 1, r + 1)\n"
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4 1 2 2 1 5 3\")\n    3\n    >>> solution(\"11 -5 -4 -3 -2 -1 0 1 2 3 4 5\")\n    2\n    >>> solution(\"4 1 2 2 1 5 3\")\n    3\n    >>> solution(\"5 1 3 4 2 1\")\n    3\n    >>> solution(\"4 0 3 3 0\")\n    1\n    >>> solution(\"7 1 3 4 2 1\")\n    1\n    >>> solution(\"7 1 3 4 2 1\")\n    3\n    >>> solution(\"5 1 3 4 2 1\")\n    3\n    >>> solution(\"4 0 3 3 0\")\n    1\n    >>> solution(\"5 1 3 4 2 1\")\n    3\n    >>> solution(\"7 1 3 4 2 1\")\n    1\n    >>> solution(\"7 1 3 4 2 1\")\n    3\n    >>> solution(\"7 1 3 4 2 1\")\n    1\n    >>> solution(\"7 1 3 4 2 1\")\n    3\n    >>> solution(\"5 1 3 4 2 1\")\n    3\n    >>> solution(\"4 0 3 3 0\")\n    1\n    >>> solution(\"7 1 3 4 2 1\")\n    1\n    >>> solution(\"7 1 3 4 2 1\")\n    3\n    >>> solution(\"7 1 3 4 2 1\")\n    1\n    >>> solution(\"7 1 3 4 2 1\")\n    3\n    >>> solution(\"7 1 3 4 2 1\")\n    1\n    >>> solution(\"5 1 3 4 2 1\")\n    3\n    >>> solution(\"4 0 3 3 0\")\n    1\n    >>> solution(\"7 1 3 4 2 1\")\n    1\n    >>> solution(\"7 1 3 4 2 1\")\n    3\n    >>> solution(\"7 1 3 4 2 1\")\n    1\n    >>> solution(\"7 1 3 4 2 1\")\n    3\n    >>> solution(\"7 1 3 4 2 1\")\n    1\n    >>> solution(\"7 1 3 4 2 1\")\n    3\n    >>> solution(\"7 1 3 4 2 1\")\n    1\n    >>> solution(\"7 1 3 4 2 1\")\n    3\n    >>> solution(\"5 1 3 4 2 1\")\n    3\n    >>> solution(\"4 0 3 3 0\")\n    1\n    >>> solution(\"7 1 3 4 2 1\")\n    1\n    >>> solution(\"7 1 3 4 2 1\")\n    3\n    >>> solution(\"7 1 3 4 2 1\")\n    1\n    >>> solution(\"7 1 3 4 2 1\")\n    3\n    >>> solution(\"7 1 3 4 2 1\")\n    1\n    >>> solution(\"7 1 3 4 2 1\")\n    3\n    >>> solution(\"7 1 3 4 2 1\")\n    1\n    >>> solution(\"7 1 3 4 2 1\")\n    3\n    >>> solution(\"7 1 3 4 2 1\")\n    1\n    >>> solution(\"7 1 3 4 2 1\")\n    3\n    >>> solution(\"7 1 3 4 2 1\")\n    1\n    >>> solution(\"7 1 3 4 2 1\")\n    3\n    >>> solution(\"7 1 3 4 2 1\")\n    1\n    >>> solution(\"7 1 3 4 2 1\")\n    3\n    >>> solution(\"7 1 3 4 2 1\")\n    1\n    >>> solution(\"7 1 3 4 2 1\")\n    3\n    >>> solution(\"5 1 3 4 2 1\")\n    3\n    >>> solution(\"4 0 3 3 0\")\n    1\n    >>> solution(\"7 1 3 4 2 1\")\n    1\n    >>> solution(\"7 1 3 4 2 1\")\n    3\n    >>> solution(\"7 1 3 4 2 1\")\n    1\n    >>> solution(\"7 1 3 4 2 1\")\n    3\n    >>> solution(\"7 1 3 4 2 1\")\n    1\n    >>> solution(\"7 1 3 4 2 1\")\n    3\n    >>> solution(\"7 1 3 4 2 1\")\n    1\n    >>> solution(\"7 1 3 4 2 1\")\n    3\n    >>> solution(\"7 1 3 4 2 1\")\n    1\n    >>> solution(\"7 1 3 4 2 1\")\n    3\n    >>> solution(\"7 1 3 4 2 1\")\n    1\n    >>> solution(\"7 1 3 4 2 1\")\n    3\n    >>> solution(\"7 1 3 4 2 1\")\n    1\n    >>> solution(\"7 1 3 4 2 1\")\n    3\n    >>> solution(\"7 1 3 4 2 1\")\n    1\n    >>> solution(\"7 1 3 4 2 1\")\n    3\n    >>> solution(\"7 1 3 4 2 1\")\n    1\n    >>> solution(\"7 1 3 4 2 1\")\n    3\n    >>> solution(\"7 1 3 4 2 1\")\n    1\n    >>> solution(\"7 1 3 4 2 1\")\n    3\n    >>> solution(\"7 1 3 4 2 1\")\n    1\n    >>> solution(\"7 1 3 4 2 1\")\n    3\n    >>> solution(\"7 1 3 4 2 1\")\n    1\n    >>> solution(\"7 1 3 4 2 1\")\n    3\n    >>> solution(\"7 1 3 4 2 1\")\n    1\n    >>> solution(\"7 1 3 4 2 1\")\n    3\n    >>> solution(\"7 1 3 4 2 1\")\n    1\n    >>> solution(\"7 1 3 4 2 1\")\n    3\n    >>> solution(\"7 1 3 4 2 1\")\n    1\n    >>> solution(\"7 1 3 4 2 1\")\n    3\n    >>> solution(\"7 1 3 4 2 1\")\n    1\n    >>> solution(\"7 1 3 4 2 1\")\n    3\n    >>> solution(\"7 1 3 4 2 1\")\n    1\n    >>> solution(\"7 1"
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Gets the array length and the array elements,\n    sorts the array and splits it into blocks,\n    using the first and last index as the range.\n    \"\"\"\n    n = int(stdin.split(\"\\n\")[0])\n    a = sorted([int(x) for x in stdin.split(\"\\n\")[1].split(\" \")])\n\n    blocks = []\n    start = 0\n    end = 0\n    for i in range(n):\n        if end == n:\n            break\n        if a[end]!= a[end + 1]:\n            blocks.append([start, end])\n            start = end + 1\n        end += 1\n\n    if len(blocks) == 0:\n        return 0\n    # Find the maximum length among blocks\n    max_length = 0\n    for start, end in blocks:\n        max_length = max(max_length, end - start + 1)\n    print(max_length)\n\n    for start, end in blocks:\n        print(start, end)\n"
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    arr = list(map(int, stdin.split('\\n')[1].split()))\n    stack = []\n    for i in arr:\n        if len(stack) == 0:\n            stack.append(i)\n        elif len(stack)!= 0:\n            if stack[-1] == 2:\n                stack.append(i)\n            elif i == 2 and stack[-1]!= 2:\n                stack.append(i)\n            else:\n                while len(stack)!= 0 and stack[-1]!= 2:\n                    if stack[-1] < i:\n                        stack.append(i)\n                        break\n                    else:\n                        stack.pop()\n                if len(stack) == 0:\n                    stack.append(i)\n                elif stack[-1]!= 2:\n                    stack.append(i)\n    \n    while len(stack)!= 0:\n        if stack[-1] == 2:\n            stack.pop()\n        else:\n            break\n    \n    if len(stack)!= 0:\n        return \"NO\"\n    else:\n        return \"YES\"\n"
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def get_height(stacks):\n        max_height = 0\n        for i in range(len(stacks)):\n            if len(stacks[i]) > max_height:\n                max_height = len(stacks[i])\n        return max_height\n    \n    def make_row(stacks):\n        return ['+' + '-' * (get_height(stacks) - 1) + '+'] + ['|' +'' * (get_height(stacks) - 1) + '|']\n    \n    def make_table(rows, stacks):\n        return make_row(stacks) + rows + make_row(stacks)\n    \n    def sort_stacks(stacks):\n        result = []\n        while stacks:\n            max_height = get_height(stacks)\n            for i in range(len(stacks)):\n                if len(stacks[i]) == max_height:\n                    result.append(stacks[i].pop())\n                    break\n            for i in range(len(stacks) - 1, -1, -1):\n                if len(stacks[i]) < max_height:\n                    result.append(stacks[i].pop())\n        return result\n    \n    n = int(stdin.readline())\n    stacks = [list(map(int, stdin.readline().strip().split())) for _ in range(n)]\n    print('YES' if sort_stacks(stacks) == sorted(stacks) else 'NO')\n    return ''\n"
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # stdin = input()\n    # n = int(stdin)\n    n = int(stdin)\n    # if n <= 1:\n    #     return \"YES\"\n    # arr = list(map(int, stdin.split()))\n    arr = list(map(int, stdin.split()))\n    arr.sort()\n    # print(arr)\n    # arr.sort()\n    i = 0\n    while True:\n        k = 1\n        while k < n:\n            if arr[k] - arr[k - 1] > 1:\n                return \"NO\"\n            k += 1\n        i += 1\n        n = arr[i]\n    return \"NO\"\n\nsolution(\"3 1 2\")"
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    1) get n, m and array\n    2) sort array from high to low\n    3) check if each i - 1 in array is equal to i + 1\n    4) return \"YES\" or \"NO\"\n    '''\n    return"
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    a.reverse()\n    prev = a[0]\n    height = prev\n    for i in range(n):\n        if a[i] >= height + 2:\n            height = a[i]\n        elif a[i] == prev:\n            height -= 1\n            prev = a[i]\n        else:\n            return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = [int(x) for x in stdin.readline().strip().split(' ')]\n    a.sort()\n    tallest = 0\n    stack = []\n    for x in a:\n        if x > tallest:\n            stack.append(x)\n            if x - tallest > 2:\n                stack.append(tallest)\n            tallest = x\n        else:\n            while stack and stack[-1] > x:\n                stack.pop()\n            if not stack:\n                return 'NO'\n            elif stack[-1] < x:\n                stack.append(x)\n    if stack:\n        return 'NO'\n    else:\n        return 'YES'\n\n\n\ndef"
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, a = [int(x) for x in stdin.split('\\n')[0].split(' ')]\n    if n == len(set(a)):\n        return 'YES'\n    return 'NO'"
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nimport sys\nimport time\nimport pprint\nfrom collections import deque\n\nfrom util.helpers import read_lines, timer\n\nsys.setrecursionlimit(20000)\n\n\nclass Solution:\n    def __init__(self):\n        self.cache = {}\n        self.queue = deque()\n        self.visited = set()\n\n    def swap_adjacent(self, s, i, j):\n        s = list(s)\n        s[i], s[j] = s[j], s[i]\n        return ''.join(s)\n\n    def recurse(self, s, t):\n        if s in self.visited:\n            return -1\n\n        if s == t:\n            return 0\n\n        self.visited.add(s)\n        swaps = self.swap_adjacent(s, 0, 1)\n        if swaps not in self.cache:\n            self.queue.append((swaps, t))\n            self.cache[swaps] = self.recurse(swaps, t)\n\n            if self.cache[swaps] == -1:\n                self.queue.popleft()\n\n        return self.cache[swaps] + 1\n\n    def solution(self, s, t):\n        if s == t:\n            return 0\n\n        self.visited.add(s)\n        swaps = self.swap_adjacent(s, 0, 1)\n        if swaps not in self.cache:\n            self.queue.append((swaps, t))\n            self.cache[swaps] = self.recurse(swaps, t)\n\n            if self.cache[swaps] == -1:\n                self.queue.popleft()\n\n        return self.cache[swaps] + 1\n\n\ndef"
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split(\"\\n\")\n    n = len(s)\n    moves = 0\n\n    def swap(a, b, s):\n        return s[:a] + s[b] + s[a + 1:b] + s[a] + s[b + 1:]\n\n    for i in range(n - 1):\n        s = swap(i, i + 1, s)\n        moves += 1\n        if s == t:\n            return str(moves)\n    return \"-1\"\n"
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin.split('\\n')[1]\n    t = stdin.split('\\n')[2]\n    k = 0\n    if n == len(s) == len(t):\n        for i in range(n - 1):\n            if s[i]!= t[i]:\n                s = s[:i] + t[i] + s[i + 1:]\n                k += 1\n    return str(k)\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    "
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split(\"\\n\")[0]\n    t = stdin.split(\"\\n\")[1]\n    n = len(s)\n    if len(s)!= len(t):\n        print(\"-1\")\n        return\n    count = 0\n    if len(set(s))!= n:\n        print(\"-1\")\n        return\n    for i in range(len(s)):\n        if s[i]!= t[i]:\n            count += 1\n    print(count)\n    if count == 0:\n        print(0)\n    else:\n        print(count)\n        print(\" \".join([str(i + 1) for i in range(count)]))\n"
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''6\n   ... abcdef\n   ... abdfec\n   ... ''')\n    4\n    >>> solution('''4\n   ... abcd\n   ... accd\n   ... ''')\n    -1\n    \"\"\"\n    n, s, t = int(stdin.readline()), stdin.readline(), stdin.readline()\n    dp = [[0] * n for _ in range(n)]\n    s = list(s[:n])\n    t = list(t[:n])\n    for l in range(n):\n        dp[l][l] = 1\n\n    for l in range(n - 1):\n        if s[l] == t[l + 1] and s[l + 1] == t[l]:\n            dp[l][l + 1] = 2\n        elif s[l] == t[l + 1]:\n            dp[l][l + 1] = 2\n\n    for length in range(2, n):\n        for start in range(n - length):\n            end = start + length\n            dp[start][end] = dp[start][end - 1] + dp[start + 1][end]\n\n    if dp[0][n - 1] == n:\n        return str(n)\n    else:\n        return '-1'\n"
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Compute a solution to the problem.\"\"\"\n    pass\n\n\ndef"
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Line 1: string length\n    n = int(stdin.readline().strip())\n\n    # Line 2: string s\n    s = stdin.readline().strip()\n\n    # Line 3: string t\n    t = stdin.readline().strip()\n\n    # Line 4: move count\n    moves = 0\n\n    # Line 5: read list of swaps\n    swaps = []\n\n    # Line 6: swap pairs\n    for i in range(len(s) - 1):\n        if s[i]!= t[i]:\n            swaps.append(i)\n\n    # Line 7: count moves\n    for swap in swaps:\n        s = s[:swap] + t[swap] + s[swap + 1:]\n        moves += 1\n\n    # Line 8: out\n    if s == t:\n        print(moves)\n        print(*swaps, sep=\" \")\n    else:\n        print(-1)\n"
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n\n\ndef"
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    res = []\n    for i in range(n - 1, -1, -1):\n        if i < n - 1:\n            res.append(\"P\" * i)\n        else:\n            res.append(\"S\" * (n - i - 1))\n    return \"\".join(res)\n\ndef"
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # return ''"
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    lenght = int(stdin.readline())\n    words = []\n    for _ in range(2 * lenght - 2):\n        words.append(stdin.readline().strip())\n    prefixes, suffixes = words[:lenght], words[lenght:]\n    p_s = ['P' if word[0] == word[-1] else 'S' for word in prefixes]\n    return ''.join(p_s)\n\ndef"
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin.split('\\n')\n    s = set(s)\n    ans = []\n    for i in range(1, n + 1):\n        ans += list(map(lambda x: 'P' if x.startswith('a' * i) else 'S', s))\n    return ''.join(ans)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Your solution here\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    n = len(s)\n    \n    def is_prefix(i):\n        for x in stdin:\n            if i + len(x) > n:\n                return False\n            if x == s[i:i+len(x)]:\n                return is_prefix(i+len(x))\n        return True\n    \n    def is_suffix(i):\n        for x in stdin:\n            if i - len(x) < 0:\n                return False\n            if s[i-len(x):i] == x:\n                return is_suffix(i-len(x))\n        return True\n    \n    ans = ''\n    for i in range(n):\n        if is_prefix(i) and is_suffix(i):\n            ans = 'PS'\n            break\n        if is_suffix(i) and is_prefix(i):\n            ans = 'PS'\n            break\n    return ans\n"
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find the correct string\"\"\"\n    return\n"
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    values = list(map(int, stdin.split()))\n    s = set()\n    i = 0\n    while i < len(values):\n        while len(s) < values[i]:\n            s.add(i)\n            i += 1\n        s.remove(i)\n    print(i)\n"
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Input\n    -----\n    \"2 4 6 8 10\"\n    Output\n    ------\n    \"1\"\n    \"\"\"\n    nums = list(map(int, stdin.split()))\n    for i in range(0, len(nums)):\n        for j in range(i + 1, len(nums)):\n            for k in range(j + 1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == 2020:\n                    return str(nums[i] * nums[j] * nums[k])\n"
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return 1\n\ndef"
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a = [int(n) for n in stdin.split(\" \")]\n\n    a.sort()\n    n = len(a)\n\n    for i in range(1, n):\n        if a[i] - a[i - 1] > 2:\n            return i\n\n\nprint(solution('2 4 6 8 10'))\nprint(solution('1 2 3 4 5 6 7 8 9 10'))\nprint(solution('0 1 2 3 4 5 6 7 8 9 10'))\nprint(solution('0'))\nprint(solution('0 1'))\nprint(solution('0 1 2'))\nprint(solution('0 1 2 3'))\nprint(solution('0 1 2 3 4'))\nprint(solution('0 1 2 3 4 5'))\nprint(solution('0 1 2 3 4 5 6'))\nprint(solution('0 1 2 3 4 5 6 7'))\nprint(solution('0 1 2 3 4 5 6 7 8'))\nprint(solution('0 1 2 3 4 5 6 7 8 9'))\nprint(solution('0 1 2 3 4 5 6 7 8 9 10'))\n"
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    arr = [int(n) for n in stdin.split(' ')]\n    pass\n"
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n  # your solution goes here\n  return None"
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a = [int(i) for i in stdin.split()]\n    return len([i for i in a if i == a.index(i) + 1])\n"
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"10\\n1 1 0 1 1 0 1 0 1 0\\n\")\n    2\n    \"\"\"\n    a = [int(x) for x in stdin.split(\"\\n\")[0].split(\" \")]\n    ans = []\n    for i in range(len(a) - 1):\n        if a[i] == 1 and a[i + 1] == 1:\n            ans.append(1)\n    if ans == []:\n        return 0\n    else:\n        return len(ans)\n"
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Finds the smallest number k, such that if people from exactly k pairwise distinct flats will turn off the light then nobody will be disturbed.\n    :param stdin: input\n    :return: smallest number k\n    \"\"\"\n    n = int(stdin.readline().rstrip())\n    flats = [int(x) for x in stdin.readline().rstrip().split()]\n    current_index = 0\n    current_number = flats[0]\n    for index, flat in enumerate(flats):\n        if flat == 0 and current_number == 1:\n            current_number = 0\n            current_index = index\n        elif flat == 1:\n            current_number += 1\n        else:\n            current_number -= 1\n        if current_number == 0 and index > 0 and index < n - 1 and flats[index - 1] == flats[index + 1] == 1:\n            return index\n    return 0\n"
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nimport math"
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def check(k: int) -> bool:\n        light = [int(i) for i in stdin.split()]\n        d = {}\n        for i in light:\n            if i in d:\n                d[i] += 1\n            else:\n                d[i] = 1\n        for i in range(k):\n            if i > 0:\n                if light[i - 1] == 1:\n                    if light[i + 1] == 1:\n                        return False\n                if light[i] == 1:\n                    if light[i - 1] == 0:\n                        if light[i + 1] == 0:\n                            return False\n            if i < len(light) - 1:\n                if light[i + 1] == 1:\n                    if light[i - 1] == 1:\n                        return False\n                if light[i] == 1:\n                    if light[i + 1] == 0:\n                        if light[i - 1] == 0:\n                            return False\n            else:\n                if light[i - 1] == 1:\n                    if light[i] == 1:\n                        return False\n        return True\n\n    k = 1\n    while True:\n        if check(k):\n            return k\n        k += 1\n"
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = list(map(int, stdin.split('\\n')[1].split()))\n    k = 0\n    for i in range(1, n):\n        if arr[i] and arr[i - 1] == arr[i + 1]:\n            k += 1\n    return str(k)"
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Find the minimal length of a sequence of 1s that the sequence of 1s and 0s to be in sync.\n    :param stdin: string with array of integer numbers a_1, a_2,..., a_n.\n    :return: string with number of 1s.\n    \"\"\"\n    n = int(stdin)\n    arr = list(map(int, stdin.split()))\n    count = 0\n    for i in range(n):\n        if arr[i] == 1:\n            count += 1\n        else:\n            count -= 1\n        if count == 0:\n            break\n    return str(i)\n"
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    count = 0\n    n = int(stdin.readline())\n    # \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u043a\u0430\u0436\u0434\u0443\u044e \u0442\u043e\u0447\u043a\u0443\n    for i in range(n):\n        a = int(stdin.readline())\n        # \u0435\u0441\u043b\u0438 \u043e\u043d\u0430 \u0432\u043a\u043b\u044e\u0447\u0435\u043d\u0430 \u0442\u043e \u043d\u0443\u0436\u043d\u043e \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0443\u044e \u0438 \u043f\u043e\u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0443\u044e\n        if a == 1:\n            # \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0443\u044e \u0442\u043e\u0447\u043a\u0443\n            if i!= 0 and i!= n - 1:\n                if int(stdin.readline()) == 0:\n                    count += 1\n            # \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u043f\u043e\u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0443\u044e \u0442\u043e\u0447\u043a\u0443\n            if i!= 0:\n                if int(stdin.readline()) == 0:\n                    count += 1\n    return str(count)\n"
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def is_disturbed(arr: list):\n        for i in range(1, len(arr) - 1):\n            if arr[i - 1] == 1 and arr[i + 1] == 1 and arr[i] == 0:\n                return True\n\n        return False\n\n    stdin = stdin.split('\\n')\n    flats = [int(x) for x in stdin[0].split()]\n    count = 0\n\n    for i in range(len(flats)):\n        if i == 0:\n            continue\n        if flats[i - 1] == 1 and flats[i] == 0 and flats[i + 1] == 1:\n            count += 1\n\n    return count\n"
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(set(stdin.split())))"
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    print(1)\n"
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    res = 0\n    for x in a:\n        for y in a:\n            if y % x == 0:\n                res += 1\n    return str(res)\n    \n"
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your solution\n    return '%s' % (n)"
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return stdout"
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def get_number_of_divisors(n):\n        sqrt_n = int(n**0.5) + 1\n        divisors = set()\n        for i in range(1, sqrt_n):\n            if n % i == 0:\n                divisors.add(i)\n                divisors.add(n // i)\n        return len(divisors)\n\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    result = 0\n    for i in a:\n        result += get_number_of_divisors(i)\n    print(result)\n"
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Gets list of integers and returns number of divisors of each element of the list.\"\"\"\n    n = int(stdin.split(\"\\n\")[0])\n    a = list(map(int, stdin.split(\"\\n\")[1].split()))\n    common = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i]!= 0 and a[j]!= 0:\n                if a[i] % a[j] == 0:\n                    common += 1\n                if a[j] % a[i] == 0:\n                    common += 1\n    return common\n"
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = list(map(int, stdin.readline().strip().split()))\n    d = dict()\n    for a in arr:\n        d[a] = sum(a % i == 0 for i in range(1, int(a**0.5) + 1))\n    return str(sum(d.values()))\n"
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Your solution goes here\n    pass"
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\n'''\n\ndef"
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    stdin = stdin.splitlines()\n    n = int(stdin[0])\n    a = [int(i) for i in stdin[1].split()]\n    d = {}\n    m = n\n    for i in a:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n        if d[i] > m:\n            m = d[i]\n    return m\nprint(solution(stdin))\n"
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"6\\n1 2 4 3 3 2\")\n    2\n    \"\"\"\n    # a = [int(i) for i in stdin.split()]\n    a = [int(i) for i in stdin.split()][1:]\n    # a = [int(i) for i in stdin.splitlines()][1:]\n    a.sort()\n    a.insert(0, 0)\n    a.append(0)\n    n = len(a)\n    count = 1\n    min_count = 0\n    for i in range(1, n):\n        if a[i]!= a[i - 1]:\n            count += 1\n        else:\n            min_count = max(min_count, count)\n            count = 1\n    return min_count"
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n    a = [int(s) for s in stdin.split(\"\\n\")[1].split()]\n    d = dict()\n    for x in a:\n        d.setdefault(x, 0)\n        d[x] += 1\n    print(len(d))\n\"\"\"\n\nfrom collections import Counter\ndef"
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = [int(c) for c in stdin.readline().strip().split()]\n    a.sort()\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] == a[j]:\n                count += 1\n    return count"
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    coins = list(map(int, stdin.readline().split()))\n\n    return 0\nprint(solution(stdin=sys.stdin))\n\n-----Comments-----\nThis is a simple problem. All we have to do is sort the coins and return the index of the last element (the one with the lowest value).\n\"\"\"\n"
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return str(min(stdin.split()))\n"
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    return sum(a) - 2 * n\n"
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    return n - len(set(a))\n"
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, r = [int(x) for x in stdin.split(' ')]\n    arr = [int(x) for x in stdin.split(' ')[1]]\n\n    def check(arr: list) -> bool:\n        current = 0\n        for x in arr:\n            if x:\n                current += 1\n            else:\n                if current < r:\n                    return False\n                current = 0\n        if current < r:\n            return False\n        return True\n\n    def is_ok(arr: list) -> bool:\n        n, r = len(arr), sum(arr) // r\n        return n - sum(1 if x else r for x in arr) >= 0\n\n    def dfs(arr: list) -> int:\n        n, r = len(arr), sum(arr) // r\n        if check(arr):\n            return 0\n        if r == 1:\n            arr[0] = 1\n            if is_ok(arr):\n                return 1\n            arr[0] = 0\n        for i in range(n):\n            if arr[i]:\n                arr[i] = 0\n                res = dfs(arr)\n                if res!= -1:\n                    return res\n                arr[i] = 1\n        return -1\n\n    return dfs(arr)"
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return ''\n"
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # get the input\n    n, r = map(int, stdin.split())\n    house = list(map(int, stdin.split()))\n\n    # build the dp table\n    dp = [float(\"inf\") for _ in range(n + 1)]\n    dp[0] = 0\n\n    for i in range(1, n + 1):\n        for j in range(1, r + 1):\n            if i - j >= 0:\n                dp[i] = min(dp[i], dp[i - j] + 1)\n    \n    # check if there is a solution\n    if dp[n] == float(\"inf\"):\n        print(-1)\n    else:\n        print(dp[n])\n"
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    size, value = map(int, stdin.split())\n    houses = list(map(int, stdin.split()))\n    houses.append(0)\n\n    left_index = 0\n    right_index = left_index + value\n    count = 0\n    while right_index < size + 1:\n        if sum(houses[left_index:right_index]) >= value:\n            count += 1\n            left_index += 1\n            right_index = left_index + value\n        else:\n            right_index += 1\n    return count\n\"\"\"\n\n\"\"\"\n\u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b \u0434\u0430\u043d\u043d\u044b\u0445 (\u0441\u043b\u043e\u0432\u0430\u0440\u0438, \u043a\u043e\u0440\u0442\u0435\u0436\u0438, \u0441\u043f\u0438\u0441\u043a\u0438)\n\n\u041f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 (\u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b \u0434\u0430\u043d\u043d\u044b\u0445)\n\u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b \u0434\u0430\u043d\u043d\u044b\u0445\n\n\u041a\u043e\u0440\u0442\u0435\u0436\u0438 (\u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b \u0434\u0430\u043d\u043d\u044b\u0445)\n\u041a\u043e\u0440\u0442\u0435\u0436\u0438 - \u0443\u043f\u043e\u0440\u044f\u0434\u043e\u0447\u0435\u043d\u043d\u044b\u0435 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0438 \u0434\u0430\u043d\u043d\u044b\u0445\n\u0412 Python \u043a\u043e\u0440\u0442\u0435\u0436 - \u044d\u0442\u043e \u043d\u0435\u0438\u0437\u043c\u0435\u043d\u044f\u0435\u043c\u044b\u0439 \u0441\u043f\u0438\u0441\u043e\u043a.\n\n\u041f\u0440\u0438\u043c\u0435\u0440\n\nlist_1 = list(range(10))\nprint(list_1)\n"
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the minimum number of heaters to warm up the whole house.\"\"\"\n    length, heater_value = map(int, stdin.split(' '))\n    house = list(map(int, stdin.split(' ')))\n    heaters = [0]\n    for heater in house:\n        heaters.append(1 if heater else 0)\n    heaters.append(0)\n    left_index, right_index = 0, heater_value\n    while left_index + right_index < len(heaters) and heaters[right_index] == 1:\n        right_index += 1\n    heaters[left_index:right_index] = [1] * (right_index - left_index)\n    heaters = heaters[:length]\n    # print(heaters)\n    heaters_count = 0\n    for i, heater in enumerate(heaters):\n        if heater == 1:\n            if i - heater_value < 0:\n                heaters_count += 1\n            else:\n                heaters[i:i + heater_value] = [1] * heater_value\n    if heaters[length - heater_value:length]!= [1] * heater_value:\n        return -1\n    return heaters_count\n"
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, r = [int(x) for x in stdin.strip().split(' ')]\n    houses = [int(x) for x in stdin.strip().split(' ')]\n    return -1\n"
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # get input\n    n, r = map(int, stdin.split())\n    houses = list(map(int, stdin.split()))\n\n    # check if it is possible to warm up the house\n    # there are two ways to warm up the house\n    # 1. warm up the whole house with only one heater\n    # 2. warm up the house by using multiple heaters\n    # so there are two ways to warm up the house\n    # 1. warm up the whole house with only one heater\n    # 2. warm up the house by using multiple heaters\n    # so there are two ways to warm up the house\n    # 1. warm up the whole house with only one heater\n    # 2. warm up the house by using multiple heaters\n    # so there are two ways to warm up the house\n    # 1. warm up the whole house with only one heater\n    # 2. warm up the house by using multiple heaters\n    # so there are two ways to warm up the house\n    # 1. warm up the whole house with only one heater\n    # 2. warm up the house by using multiple heaters\n\n    # this is a check for the first solution\n    # if the house size is less than the number of heaters, then there is no way to warm up the house\n    if n < r:\n        return -1\n\n    # if the house size is equal to the number of heaters then there is only one way to warm up the house\n    if n == r:\n        return 1\n\n    # check for second solution\n    # in this solution, the house will be warmed up with multiple heaters\n    # to start from the first heater and warm up the house, there are two ways\n    # 1. warm up the house by using only the first heater\n    # 2. warm up the house by using the first heater and another heater\n    # in order to warm up the house, the first heater should be on and the last heater should be off\n    # if the first heater is on and the last heater is off, then the house is warmed up with only one heater\n    # if the first heater is on and the last heater is on, then the house is warmed up with two heaters\n    # in both cases the house will be warmed up with one heater\n    # therefore we can start from the first heater\n    for i in range(n):\n        # if the first heater is on and the last heater is off\n        if houses[i] == 1 and houses[i + r - 1] == 0:\n            # so we can warm up the house with only one heater\n            # we set the number of heaters to one\n            return 1\n\n        # if the first heater is on and the last heater is on\n        if houses[i] == 1 and houses[i + r - 1] == 1:\n            # so we can warm up the house with two heaters\n            # we set the number of heaters to two\n            return 2\n\n    # if there is no way to warm up the house\n    return -1\n\n\nprint(solution(input()))\n\n\n\"\"\"\n\nFirst we need to find the number of heaters.\nTo do it, we can count the number of ones in the array.\n\n1. This number of ones is the number of heaters.\n2. If the number of heaters is less than the value of r, then the house can't be warmed up.\n3. If the number of heaters is equal to the value of r, then the house can be warmed up with only one heater.\n4. If the number of heaters is greater than the value of r, then the house can be warmed up with multiple heaters.\n\n1. This is a check for the first solution.\n2. If the number of heaters is less than the value of r, then there is no way to warm up the house.\n\n1. Now we need to check for the second solution.\n2. To start from the first heater, we have two options\n3. Warm up the house by using only the first heater\n4. Warm up the house by using the first heater and another heater\n5. In both cases the house will be warmed up with one heater\n\n1. In both cases, the house will be warmed up with one heater.\n2. So the house can be warmed up with one heater.\n3. We can start from the first heater.\n\n\"\"\""
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, r = [int(i) for i in stdin.split(' ')]\n    h = [int(i) for i in stdin.split('\\n')[1].split(' ')]\n    if r > min(h):\n        return -1\n    nums = [i + r - 1 for i, x in enumerate(h) if x > 0]\n    print(len(nums))\n    return solution(stdin)\n\n\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    pass"
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.splitlines()\n    A = int(input[0])\n    count = 0\n    for i in range(1, A + 1):\n        for j in range(1, i + 1):\n            for k in range(1, j + 1):\n                if i * j + k == A:\n                    count += 1\n    return str(count)\n"
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3\")\n    3\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return str(sum([comb(int(stdin), int(i)) for i in stdin.split('\\n')[0].split(' ')]))\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    if stdin:\n        n = int(stdin)\n    else:\n        n = int(input())\n    numerator = 1\n    denominator = 1\n    while numerator < n:\n        if numerator % 2 == 1:\n            numerator = numerator + 1\n        else:\n            numerator = numerator + 2\n        denominator = denominator + 1\n    return str(int((n / denominator)))\n    \n"
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return stdin\n"
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N < 2:\n        return 0\n    elif N == 2:\n        return 1\n    elif N == 3:\n        return 2\n    res = 0\n    for a in range(1, N//2+1):\n        b = N//a\n        c = N - a * b\n        if a * b + c == N:\n            res += 1\n    return res"
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    for a in range(1, n+1):\n        for b in range(1, n+1):\n            for c in range(1, n+1):\n                if a*b + c == n:\n                    count += 1\n    return str(count)\n\"\"\"\nimport math\nimport sys\n\n\ndef"
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    _, N = stdin.split('\\n')\n    return str(sum(map(lambda x: sum(x), product(*(range(1, N + 1) for _ in range(3))))))\n"
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"The solution to the problem\"\"\"\n    return str(len(list(filter(lambda x: x[0] * x[1] + x[2] == int(stdin), ((a, b, int(stdin) - a - b) for a in range(1, int(stdin) // 2 + 1) for b in range(1, int(stdin) // 2 + 1))))))\n"
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return ''\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    bracket_string = stdin.readline()\n    if bracket_string.count('(') == bracket_string.count(')'):\n        return 0\n    return n - 1 - bracket_string.count(')') + bracket_string.count('(')"
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    size = int(stdin.readline())\n    bracket = stdin.readline()\n\n    # to compare with solution\n    # a = bracket.count('(')\n    # b = bracket.count(')')\n\n    # print(a, b, bracket)\n\n    # if a!= b:\n    #     return 0\n    # else:\n    #     if size % 2 == 0:\n    #         return size // 2\n    #     else:\n    #         return (size - 1) // 2\n\n    if len(bracket) == 1:\n        return 0\n\n    # print(bracket.count('(') == bracket.count(')'))\n\n    if bracket.count('(')!= bracket.count(')'):\n        return 0\n    else:\n        bracket = bracket.replace(')', '*')\n        bracket = bracket.replace('(', '+')\n        return len(bracket.split('+')) - 1\n"
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    print(solution(stdin.split('\\n')[1]))\n"
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin\n    cnt = 0\n    for i in range(n):\n        if s[i] == '(':\n            cnt += 1\n        else:\n            cnt -= 1\n        if cnt < 0:\n            return i + 1\n    return 0"
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    ans = 0\n    for i, c in enumerate(s):\n        if c == ')':\n            if i > 0 and s[i-1] == '(':\n                ans += 1\n        elif c == '(':\n            if i > 0 and s[i-1] == ')':\n                ans += 1\n    return ans\n"
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the number of positions in a given string where\n    a bracket can be changed to make a regular expression.\n\n    Args:\n        stdin (str): Input string of brackets\n\n    Returns:\n        int: Number of positions\n    \"\"\"\n    brackets = stdin\n    regular_expression = 0\n    for index, bracket in enumerate(brackets):\n        if bracket == ')' and len(brackets[:index]) >= 1 and brackets[:index][-1] == '(':\n            regular_expression += 1\n    return regular_expression\n"
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    s = stdin[1]\n    result = 0\n    for i in range(n):\n        if s[i] == \")\" and i > 0 and s[i - 1] == \")\":\n            result += 1\n        elif s[i] == \")\" and s[i - 1] == \"(\" and s[i - 2] == \"(\":\n            result += 1\n    return result\n"
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    t = stdin\n\n    len_s = len(s)\n    len_t = len(t)\n    dp = [[0 for i in range(len_t)] for j in range(len_s)]\n\n    for i in range(len_s):\n        for j in range(len_t):\n            if s[i] == t[j]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n\n    return len_s - max(dp[len_s - 1])\n"
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    t = stdin[1:]\n    len_s = len(s)\n    len_t = len(t)\n    if len_s > len_t:\n        return 0\n    else:\n        return max(0, len_s - len_t)\n\n\nprint(solution(\"bbaba\"))  # 3\nprint(solution(\"baaba\"))  # 2\nprint(solution(\"abcde\"))  # 0\n"
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return '''SOLUTION1'''\n"
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    t = stdin\n    i = 0\n    while len(t) > 1:\n        j = i + 1\n        while j <= len(t) - 1:\n            if t[j] == t[i]:\n                j += 1\n            else:\n                break\n        if len(t[:j]) > len(t[j:]):\n            j += 1\n            s = s.replace(t[:j], \"\")\n            t = t.replace(t[:j], \"\")\n            i += j - 1\n        else:\n            s = s.replace(t[j:], \"\")\n            t = t.replace(t[j:], \"\")\n    return len(s)\n"
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split(\"\\n\")[0]\n    t = stdin.split(\"\\n\")[1]\n    for i in range(len(s)):\n        cnt = 1\n        if t in s[i:]:\n            for j in range(i + 1, len(s)):\n                if t in s[j:]:\n                    cnt += 1\n                else:\n                    break\n            break\n    return str(cnt)\n"
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\nimport sys\n\n\ndef"
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    i = 0\n    j = len(s) - 1\n    while i < j:\n        if s[i] == s[j]:\n            i += 1\n            j -= 1\n            continue\n        else:\n            break\n    return j - i + 1"
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split(\"\\n\")\n    t = t.split()[0]\n    return str(len(s) - len(t) - s.count(t))\n"
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    sub_string = stdin\n    result = 0\n    return result\ndef"
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s: str = stdin.lower()\n    t: str = stdin.lower()\n\n    s: str = ''.join(sorted(s))\n    t: str = ''.join(sorted(t))\n\n    curr_len: int = len(s)\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            if s[i:j] == t:\n                curr_len = min(curr_len, len(s[:i]) + len(s[j:]))\n\n    return curr_len\n\n\nsolution(\"BBBa\")\nsolution(\"ab\")\nsolution(\"ABCDE\")\nsolution(\"asdffasdfa\")\nsolution(\"asdfasdf\")\nsolution(\"asdfasdfasdf\")\nsolution(\"asdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfas"
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    x, y = min(a, c), max(b, d)\n    return str(x * y)\n"
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    return str(max(i * j for i in range(a, b + 1) for j in range(c, d + 1)))"
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x, y, a, b, c, d = map(int, stdin.split())\n    res = 0\n    for i in range(max(a, x), min(b, c) + 1):\n        for j in range(max(a, x), min(b, c) + 1):\n            res = max(res, i * j)\n    print(res)\n    return \"\"\n"
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = [int(x) for x in stdin.split(' ')]\n    return str(max(a * b, a * c, b * c, a * d, b * d, c * d))\n"
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a,b,c,d = map(int,stdin.split())\n    return str(max(1,2))\n"
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('1 2 1 1')\n    '2'\n    >>> solution('4 5 3 4')\n    '10'\n    \"\"\"\n    a, b, c, d = map(int, stdin.split())\n    return str(max(a * b, c * d))\n"
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x, y, a, b, c, d = map(int, stdin.split())\n    x_interval, y_interval = max(a, x), min(b, y)\n    return max(x_interval * y_interval, (x_interval - 1) * (y_interval - 1))\n"
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split(' ')\n    a = int(input_list[0])\n    b = int(input_list[1])\n    c = int(input_list[2])\n    d = int(input_list[3])\n    \n    return str(max(a*c, b*d))\n"
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the answer\"\"\"\n    a, b, c, d = [int(x) for x in stdin.split()]\n    maximum = 0\n    for x in range(a, b + 1):\n        for y in range(c, d + 1):\n            if x * y > maximum:\n                maximum = x * y\n    return maximum\n"
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    return a * (d - c + 1) // (b - a + 1)\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    data = list(map(int, stdin.split()))\n    n = data[0]\n    s = sum(data[1:])\n    if s % 2 == 0:\n        if n % 2 == 0:\n            # n/2 problems for ARC, n/2 problems for ABC\n            return str(min(n//2, n//2))\n        else:\n            # n/2 problems for ARC, n/2 problems for ABC\n            # n/2 problems for ARC, n/2 problems for ARCs\n            return str(min(n//2, (n+1)//2))\n    else:\n        # n problems for ARC, n problems for ABC\n        return str(min(n//2, (n+1)//2))\n"
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    # read input int\n    N = int(stdin)\n\n    # read input int\n    numbers = [int(n) for n in stdin.split('\\n')[1].split(' ')]\n\n    # find solution\n    solution = 0\n    for number in numbers:\n        if number >= N // 2:\n            solution += 1\n    print(solution)\n    return \"\""
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # print(stdin)\n    n = int(stdin[0])\n    nums = [int(i) for i in stdin[1].split()]\n    # print(nums)\n    if n % 2!= 0 or sum(nums) % 2!= 0:\n        return \"IMPOSSIBLE\"\n    ans = 0\n    for i in range(n // 2):\n        if nums[i] < nums[n // 2]:\n            ans += 1\n        else:\n            break\n    # print(ans)\n    ans2 = 0\n    for i in range(n // 2):\n        if nums[i] >= nums[n // 2]:\n            ans2 += 1\n        else:\n            break\n    # print(ans2)\n    if ans2 == ans:\n        return str(ans)\n    elif ans2 > ans:\n        return \"IMPOSSIBLE\"\n    else:\n        if (n // 2) % 2 == 0:\n            return str((ans + ans2) // 2)\n        else:\n            return str(ans // 2)\n\n\nimport sys\n\nT = int(sys.stdin.readline())\nfor _ in range(T):\n    ans = solution(sys.stdin.readline().strip())\n    print(ans)\n"
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    arr = [int(i) for i in stdin[1:].split(\" \")]\n    arr.sort()\n    count = 0\n    for i in arr:\n        if i > n // 2:\n            count += 1\n    return str(count)\n"
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, *d = map(int, stdin.split())\n    diff = Counter(d)\n    result = 0\n    for k in range(1, N + 1):\n        if diff[k] > k:\n            result += 1\n        else:\n            break\n    return str(result)\n\n----Test Case----\nExample 1\nInput\n6\n9 1 4 4 6 7\n\nOutput\n2\n\nExample 2\nInput\n5\n5 1 5 5 5\n\nOutput\n1\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n  [n, *arr] = list(map(int, stdin.split('\\n')[0].split(' ')))\n  return str(arr.count(n // 2) // 2)"
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    C = [int(x) for x in stdin.readline().split()]\n    K = 0\n    for c in C:\n        if c > K:\n            K = c\n    A = [c for c in C if c >= K]\n    B = [c for c in C if c < K]\n    print(int(len(A) % 2 == len(B) % 2))\n"
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return '2'\n"
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # n = int(input())\n    # d = [int(i) for i in input().split(' ')]\n    # print(n)\n    # print(d)\n    # n = 6\n    # d = [9, 1, 4, 4, 6, 7]\n    # print(n)\n    # print(d)\n\n    # n = int(input())\n    # d = [int(i) for i in input().split(' ')]\n    n = 6\n    d = [9, 1, 4, 4, 6, 7]\n    narcs = 0\n    nabc = 0\n    # for i in d:\n    #     if i > 5:\n    #         narcs += 1\n    #     else:\n    #         nabc += 1\n    # print(narcs)\n    # print(nabc)\n\n    # k = 0\n    # while k < n:\n    #     if d[k] > 5:\n    #         narcs += 1\n    #     else:\n    #         nabc += 1\n    #     k += 1\n    # print(narcs)\n    # print(nabc)\n\n    # k = 0\n    # while k < n:\n    #     if d[k] > 5:\n    #         narcs += 1\n    #     elif d[k] <= 5:\n    #         nabc += 1\n    #     k += 1\n    # print(narcs)\n    # print(nabc)\n\n    # k = 0\n    # while k < n:\n    #     if d[k] > 5:\n    #         narcs += 1\n    #         k += 1\n    #     elif d[k] <= 5:\n    #         nabc += 1\n    #         k += 1\n    # print(narcs)\n    # print(nabc)\n\n    k = 0\n    while k < n:\n        if d[k] > 5:\n            narcs += 1\n            k += 1\n        elif d[k] <= 5:\n            nabc += 1\n            k += 1\n    print(narcs)\n    print(nabc)\n    print(narcs == nabc)\n\n    return ''\n\n\ndef"
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"solution\"\"\"\n    _, d = stdin.split('\\n')\n    d = [int(i) for i in d.split(' ')]\n    d.sort()\n    count = 0\n    for i in range(len(d)):\n        if i % 2 == 0:\n            if d[i] > d[-1]:\n                d[i] -= d[-1]\n                d[-1] = 0\n        else:\n            if d[i] > d[-1]:\n                d[i] -= d[-1]\n                d[-1] = 0\n        count += d[i]\n    return str(count)\n"
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    num, hours, l, r = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    cnt = 0\n    time = 0\n    for i in range(num):\n        time += hours - a[i]\n        if time >= l and time <= r:\n            cnt += 1\n    return cnt\n"
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    n, h, l, r = map(int, stdin.split())\n    a = [int(i) for i in stdin.split()[1:]]\n    good = 0\n    for i in range(n):\n        s, e = 0, h\n        while s < l:\n            s += a[i]\n            e -= 1\n        if l <= s < r:\n            good += 1\n    return good\n"
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, h, l, r = [int(num) for num in stdin.split(' ')]\n    times = [int(num) for num in stdin.split(' ')]\n    count = 0\n    while count < n:\n        count += 1\n        a = times[count - 1]\n        if a <= h:\n            continue\n        if a > h:\n            if a - l <= h:\n                count += 1\n                continue\n            if a - l > h:\n                count += 1\n                continue\n    return count\n"
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def get_max_good_times(first_sleep_time: int, last_sleep_time: int, time_of_sleep_number: int) -> int:\n        \"\"\"\n        Return the maximum number of good times Vova can have after he sleeps.\n        :param first_sleep_time: The first time Vova sleeps.\n        :param last_sleep_time: The last time Vova sleeps.\n        :param time_of_sleep_number: The number of times Vova sleeps.\n        :return: The maximum number of good times Vova can have after he sleeps.\n        \"\"\"\n        min_time_to_sleep = max(first_sleep_time, last_sleep_time)\n        max_time_to_sleep = min(last_sleep_time + time_of_sleep_number * (first_sleep_time - last_sleep_time) // time_of_sleep_number,\n                                first_sleep_time + time_of_sleep_number * (last_sleep_time - first_sleep_time) // time_of_sleep_number)\n        return max_time_to_sleep - min_time_to_sleep\n\n    n, h, l, r = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    result = 0\n    for i in range(n - 1):\n        first_sleep_time = max(a[i] + l, l)\n        last_sleep_time = min(a[i] + r, h)\n        result = max(result, get_max_good_times(first_sleep_time, last_sleep_time, i + 1))\n    print(result)\n    return result\n"
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n, h, l, r = int(lines[0].split()[0]), int(lines[0].split()[1]), int(lines[0].split()[2]), int(lines[0].split()[3])\n    a = lines[1].split()\n    a = [int(x) for x in a]\n    a.sort()\n    max = 0\n    for i in range(n):\n        num_good = 0\n        for j in range(i, n):\n            if l <= (a[j] - a[i]) <= r:\n                num_good += 1\n        if num_good > max:\n            max = num_good\n    return max\n"
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\"\"\"\n\nfrom math import inf\n\nn, h, l, r = map(int, input().split())\narr = list(map(int, input().split()))\narr.sort()\n\nres = inf\nfor i in range(n - 1):\n    if l <= arr[i] + 1 and r >= arr[i + 1]:\n        res = min(res, max(arr[i], arr[i + 1]))\nprint(res)\n"
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Get the input as a string and parse it into a list.\n    Get the input as a string and parse it into a list.\n    \"\"\"\n    n, h, l, r = [int(i) for i in stdin.split(' ')]\n    arr = [int(i) for i in stdin.split(' ')]\n    good_times = []\n    for i in range(n):\n        good_times.append(r - l + 1 - (arr[i] - l))\n    print(max(good_times))\n"
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time: O(n)\n    Space: O(n)\n    \"\"\"\n    n, h, l, r = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()][1:]\n\n    def binarySearch(start, end):\n        if start == end:\n            return end\n\n        middle = (start + end) // 2\n        count = 0\n\n        for t in range(n):\n            count += (1 if middle <= a[t] else 0)\n            # print(start, middle, end, count)\n\n        if count == n:\n            return binarySearch(middle + 1, end)\n        elif count < n:\n            return binarySearch(start, middle)\n\n        return middle\n\n    return binarySearch(l, h) - 1\n"
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return \"\"\n"
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = list(map(int, stdin.split()))\n    arr = list(range(1, n + 1))\n    res = 0\n    for i in range(n):\n        l = [arr[j] for j in range(i + 1, n) if a[i] < a[j] * 2]\n        l.sort(key=lambda x: a[x])\n        res = max(len(l), res)\n    return str(res)"
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.splitlines()[0]\n    arr = [int(x) for x in line.split(' ')]\n\n    cnt = 1\n    if len(arr) == 1:\n        print(1)\n    else:\n        for i in range(len(arr) - 1):\n            if arr[i + 1] >= 2 * arr[i]:\n                cnt += 1\n        print(cnt)\nsolution(input())\n"
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    a.sort()\n    \n    result = 0\n    pairs = [a[i] * 2 for i in range(n - 1)]\n    i = 0\n    j = 1\n    while j < n:\n        if a[j] > pairs[i]:\n            result += 1\n            i += 1\n        j += 1\n    print(result)\n    return ''"
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = list(map(int, stdin.split(\"\\n\")[0].split()))\n    a.sort()\n    q = []\n    i = 0\n    while i < n:\n        q.append([a[i], i])\n        i += 1\n    \n    q.sort(key = lambda x: x[0])\n    k = 1\n    s = q[0][1]\n    for i in range(1, n):\n        if q[i][0] * 2 >= q[i - 1][0]:\n            k += 1\n            s += 1\n    return k"
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport sys\n\ndef"
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, arr = stdin.split('\\n')\n    n = int(n)\n    arr = [int(x) for x in arr.split(' ')]\n    arr.sort()\n\n    count = 1\n    ans = 1\n    if arr[0] * 2 < arr[1]:\n        count += 1\n        ans = arr[0] * 2\n    for i in range(1, n - 1):\n        if arr[i] * 2 < arr[i + 1]:\n            count += 1\n            ans = max(ans, arr[i] * 2)\n    return count\n\n\nsolution(\"10\\n1 2 5 6 7 10 21 23 24 49\")\nsolution(\"5\\n2 10 50 110 250\")\nsolution(\"6\\n4 7 12 100 150 199\")\n"
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    max_i = 0\n    max_j = 0\n    min_lcm = math.inf\n    for i in range(n):\n        for j in range(i, n):\n            lcm = math.lcm(a[i], a[j])\n            if lcm < min_lcm:\n                max_i = i\n                max_j = j\n                min_lcm = lcm\n    print(f\"{max_i + 1} {max_j + 1}\")\n\ndef"
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    lcm = a[0]\n    for i in range(1, n):\n        lcm = a[i] * lcm // math.gcd(a[i], lcm)\n    a.sort()\n    b = a[::-1]\n    for i in range(1, n):\n        lcm = b[i] * lcm // math.gcd(b[i], lcm)\n    for i in range(n):\n        for j in range(n):\n            if i > j:\n                if lcm % a[i] == 0 and lcm % b[j] == 0:\n                    print(i + 1, j + 1)\n                    return\n    return\n\n\ndef"
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    \u0421\u0430\u043c\u043e\u043f\u0438\u0441\u043d\u044b\u0439 \u043a\u043e\u0434 \u0440\u0435\u0448\u0435\u043d\u0438\u044f\n    \"\"\"\n    count = int(stdin.readline().strip())\n    arr = [int(item) for item in stdin.readline().strip().split(' ')]\n    arr.sort()\n    count_arr = len(arr)\n    min_lcm = arr[0] * arr[1]\n    for i in range(count_arr):\n        for j in range(i + 1, count_arr):\n            min_lcm = min(min_lcm, arr[i] * arr[j])\n    return str(arr[i]) +'' + str(arr[j])\n"
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    _, a = stdin.readlines()\n    a = list(map(int, a.split()))\n\n    def lcm(x, y):\n        return x * y // math.gcd(x, y)\n\n    # print(lcm(2, 3))\n    answer = float(\"inf\")\n    answer_list = []\n    for i in range(len(a)):\n        for j in range(i + 1, len(a)):\n            answer = min(answer, lcm(a[i], a[j]))\n\n    for i in range(len(a)):\n        for j in range(i + 1, len(a)):\n            if lcm(a[i], a[j]) == answer:\n                answer_list.append([i, j])\n\n    print(answer_list)\n    return answer_list\n\n\ndef"
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \n    # get input\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    # init min\n    min_value = 10**9\n\n    # traverse elements in array and find the minimum\n    for i in range(n):\n        for j in range(i+1, n):\n            min_value = min(min_value, int(math.lcm(a[i], a[j])))\n\n    # print output\n    print(f\"{i} {j}\")\n"
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    # return ''.join(stdin)\n\n    a = list(map(int, stdin.split()))\n    x = max(a)\n    ans = 0\n    c = 1\n    for i in range(1, x):\n        if x % i == 0 and i * x % i == 0:\n            ans = i * x\n    print(ans)\n"
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(i) for i in stdin.split('\\n')[1].split()]\n    i = 0\n    j = 1\n    lcm = gcd(a[i], a[j])\n    while j < n:\n        lcm = gcd(lcm, a[j])\n        j += 1\n    i = 0\n    j = 1\n    while j < n:\n        if gcd(a[i], a[j]) == lcm:\n            print(i + 1, j + 1)\n            return\n        j += 1\n        i += 1\n"
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    return ''\n"
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    n = int(stdin.readline())\n    l = list(map(int, stdin.readline().split()))\n    lcm = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            lcm = max(lcm, gcd(l[i], l[j]))\n\n    print(lcm)\n    return \"\"\n\ndef"
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # You can use input() function for taking input\n    # but please do not use any other imports\n\n    def get_change(n):\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        \n        return get_change(n-1) + get_change(n-2)\n    \n    def get_strings(n):\n        if n == 0:\n            return [\"0\"]\n        if n == 1:\n            return [\"0\", \"1\"]\n        if n == 2:\n            return [\"0\", \"1\", \"2\"]\n        \n        result = []\n        for i in get_strings(n-1):\n            result.append(\"0\" + i)\n            result.append(\"1\" + i)\n            result.append(\"2\" + i)\n        return result\n    \n    def min_change(n):\n        return len(max(get_strings(n), key=len))\n    \n    return min_change(int(stdin))"
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    S = list(stdin)\n    N = len(S)\n    count = S.count('0')\n    count += S.count('1')\n    count += S.count('2')\n    count %= 3\n    if count == 0:\n        return '0' * N\n    else:\n        S.sort()\n        if count == 1:\n            return S[0] * N + '2' + '0' * (N-1)\n        elif count == 2:\n            return '2' + '0' * (N - 1)\n        else:\n            return '0' * (N-1)\n"
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, s = stdin.split(\"\\n\")\n    n = int(n)\n    s = s.split()[0]\n    s_min = s\n    for i in range(n - 2, -1, -1):\n        s = s[:i] + \"0\" + s[i + 1:]\n        for j in range(n - 2, -1, -1):\n            s = s[:j] + \"2\" + s[j + 1:]\n            if s[:i] + s[i + 1:j] + s[j + 1:] == s[:n]:\n                if len(s) < len(s_min):\n                    s_min = s\n    return s_min\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Gets the input and runs the program.\n    \"\"\"\n    from math import ceil\n    \n    length = ceil(len(stdin) / 3)\n    \n    return str(stdin.replace(\"0\", \"0\" * length).replace(\"1\", \"0\" * length).replace(\"2\", \"1\" * length))\n"
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # TODO: implement solution by processing stdin\n    return 'TODO'\n"
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    n = int(stdin)\n    s = sorted(stdin)\n    s.append('2')\n    res = ''\n    for i in s:\n        res += i\n    return res"
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    n = len(s)\n    counts = [0, 0, 0]\n    for c in s:\n        if c == '0':\n            counts[0] += 1\n        elif c == '1':\n            counts[1] += 1\n        else:\n            counts[2] += 1\n    for i in range(n):\n        if counts[0] > counts[1] and counts[0] > counts[2]:\n            counts[0], counts[1] = counts[1], counts[0]\n        elif counts[1] > counts[2]:\n            counts[0], counts[1], counts[2] = counts[0] + 1, counts[1] - 1, counts[2]\n    return ''.join(['0' if i == 0 else '1' if i == 1 else '2' for i in range(n)])\n\n\ndef"
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    count_0 = 0\n    count_1 = 0\n    count_2 = 0\n\n    for i in range(len(stdin)):\n        if stdin[i] == '0':\n            count_0 += 1\n        elif stdin[i] == '1':\n            count_1 += 1\n        else:\n            count_2 += 1\n    \n    if count_0 > count_1 and count_0 > count_2:\n        return '0'*(count_0-count_1-count_2) + '1'*count_1 + '2'*count_2\n    elif count_1 > count_0 and count_1 > count_2:\n        return '1'*(count_1-count_0-count_2) + '0'*count_0 + '2'*count_2\n    else:\n        return '2'*(count_2-count_0-count_1) + '0'*count_0 + '1'*count_1"
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"121\")\n    '021'\n    >>> solution(\"211200\")\n    '211220'\n    \"\"\"\n    N = len(stdin) // 3\n    a = 0\n    b = 0\n    c = 0\n    for i in range(N):\n        if stdin[i * 3] == \"1\":\n            a += 1\n        elif stdin[i * 3] == \"0\":\n            b += 1\n        else:\n            c += 1\n    stdout = \"\"\n    if a == b and b == c:\n        stdout = stdin\n    else:\n        if c < a:\n            stdout = stdin[: N * 3 - c * 3] + \"2\" + stdin[N * 3 - c * 3 + 1:]\n        else:\n            if b < c:\n                stdout = stdin[: N * 3 - b * 3] + \"0\" + stdin[N * 3 - b * 3 + 1:]\n            else:\n                stdout = stdin[: N * 3 - a * 3] + \"1\" + stdin[N * 3 - a * 3 + 1:]\n    return stdout\n"
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    binary_string = stdin\n    ternary_string = ''\n    binary_counter = 0\n    ternary_counter = 0\n    for c in binary_string:\n        if c == '0':\n            binary_counter += 1\n        elif c == '1':\n            binary_counter -= 1\n        ternary_counter = binary_counter // 3\n        if ternary_counter > 0:\n            ternary_string += '0' * ternary_counter + '1'\n            binary_counter -= ternary_counter * 3\n        elif ternary_counter == 0:\n            ternary_string += '0'\n        else:\n            ternary_string += '1'\n            binary_counter += ternary_counter * 3\n        ternary_counter = binary_counter // 3\n        if binary_counter > 0:\n            ternary_string += '1' * binary_counter\n        elif binary_counter == 0:\n            ternary_string += '2'\n    return ternary_string\n\n\"\"\"\nfrom tools import timing\n\n\"\"\"\nThe first problem is to convert the given binary string to ternary.\n\nThe second problem is to determine the number of changes to be made in this ternary string such that all the zeros become ones, all the ones become twos and all the twos become zeros.\n\"\"\"\nbinary_string = \"0111111111111111110\"\nternary_string = \"\"\ncounter = 0\nfor c in binary_string:\n    if c == '0':\n        counter += 1\n    else:\n        counter -= 1\n    ternary_string += str(counter // 3)\nprint(ternary_string)\n"
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''10 1\n   ... 3\n   ... 4\n   ... 7\n   ... 6\n   ... 9\n   ... 8\n   ... 5\n   ... 2\n   ... 1''')\n    '3'\n    \"\"\"\n    def count_ways(n: int, m: int) -> int:\n        \"\"\"\n        >>> count_ways(10, 1)\n        4\n        >>> count_ways(10, 2)\n        3\n        >>> count_ways(10, 3)\n        2\n        >>> count_ways(10, 4)\n        1\n        >>> count_ways(10, 5)\n        0\n        >>> count_ways(10, 6)\n        1\n        \"\"\"\n        if n == 0:\n            return 1\n        elif m == 1:\n            return 0\n        else:\n            return (count_ways(n - m, m) +\n                    count_ways(n - m, m - 1)) % MOD\n\n    _, m = map(int, stdin.split())\n    n = int(stdin)\n    MOD = 10 ** 9 + 7\n    return str(count_ways(n, m))\n"
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''6 1\n   ... 3''')\n    4\n    \"\"\"\n    steps = [int(i) for i in stdin.split('\\n')[:-1]]\n    return f'{cnt_ways_top_step(steps)}'\n\n\ndef"
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\nn = int(stdin.readline())\nsteps = [int(s) for s in stdin.readline().split(\" \")]\ndp = [0] * n\ndp[0] = 1\nfor i in range(1, n):\n    if i - 1 >= 0 and steps[i-1] - 1 >= 0:\n        dp[i] += dp[i-1] % 1000000007\n    if i - 2 >= 0 and steps[i-2] - 2 >= 0:\n        dp[i] += dp[i-2] % 1000000007\nprint(dp[-1])\n"
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport math\n\ndef"
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    _, n, m = [int(i) for i in stdin.split('\\n')[0].split(' ')]\n    a = [int(i) for i in stdin.split('\\n')[1].split(' ')]\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    for i in a:\n        dp[i] = 0\n    for i in range(m):\n        dp[i + 1] += dp[i]\n        dp[i + 2] += dp[i]\n        dp[i + 3] += dp[i]\n        dp[i + 4] += dp[i]\n        dp[i + 5] += dp[i]\n        dp[i + 6] += dp[i]\n    return str(dp[-1])\n"
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Takahashi is standing at the foot of the stairs, that is, on the 0-th step.\n    He can climb up one or two steps at a time.\n    However, the treads of the a_1-th, a_2-th, a_3-th, \\ldots, a_M-th steps are broken, so it is dangerous to set foot on those steps.\n    How many are there to climb up to the top step, that is, the N-th step, without setting foot on the broken steps?\n    Find the count modulo 1\\ 000\\ 000\\ 007.\n    Input is given from Standard Input in the following format:\n    N M\n    a_1\n    a_2\n   .\n   .\n    a_M\n    >>> solution('4 1\\n1\\n2\\n3\\n')\n    '4'\n    >>> solution('6 1\\n3\\n')\n    '1'\n    >>> solution('6 1\\n2\\n')\n    '1'\n    >>> solution('6 1\\n1\\n')\n    '1'\n    >>> solution('6 1\\n2\\n1\\n')\n    '0'\n    >>> solution('6 1\\n3\\n1\\n')\n    '1'\n    >>> solution('6 1\\n2\\n1\\n1\\n1\\n')\n    '0'\n    >>> solution('4 1\\n1\\n2\\n3\\n')\n    '4'\n    >>> solution('4 2\\n1\\n2\\n3\\n')\n    '8'\n    >>> solution('4 2\\n1\\n3\\n3\\n')\n    '6'\n    >>> solution('4 2\\n1\\n3\\n3\\n1\\n1\\n')\n    '0'\n    >>> solution('4 2\\n1\\n3\\n3\\n2\\n2\\n')\n    '2'\n    >>> solution('4 2\\n1\\n3\\n3\\n2\\n2\\n1\\n')\n    '0'\n    >>> solution('4 2\\n1\\n3\\n3\\n2\\n2\\n1\\n1\\n')\n    '4'\n    >>> solution('4 2\\n1\\n2\\n3\\n2\\n2\\n1\\n3\\n')\n    '2'\n    >>> solution('4 2\\n1\\n2\\n3\\n2\\n2\\n3\\n1\\n')\n    '2'\n    >>> solution('4 2\\n1\\n3\\n3\\n2\\n2\\n3\\n1\\n')\n    '0'\n    '''\n    # stdin.split('\\n')\n    # N, M = list(map(int, stdin.split('\\n')[0].split(' ')))\n    # steps = [int(i) for i in stdin.split('\\n')[1:]]\n    # total = 0\n    # for i in range(M):\n    #     if steps[i] - 1!= i:\n    #         if steps[i] - 2!= i:\n    #             total += 1\n    #             # print('i', i)\n    #             # print('steps[i]', steps[i])\n    #             # print('steps[steps[i] - 1]', steps[steps[i] - 1])\n    #             # print('steps[steps[i] - 2]', steps[steps[i] - 2])\n    #             # print('total', total)\n    #             if steps[steps[i] - 1]!= steps[i] and steps[steps[i] - 2]!= steps[i]:\n    #                 total += 1\n    #                 if steps[steps[i] - 1]!= steps[i]:\n    #                     total += 1\n    #                 if steps[steps[i] - 2]!= steps[i]:\n    #                     total += 1\n    # print(total % (10 ** 9 + 7))\n    N, M = list(map(int, stdin.split('\\n')[0].split(' ')))\n    steps = [int(i) for i in stdin.split('\\n')[1:]]\n    total = 0\n    for i in range(M):\n        if steps[i] - 1!= i:\n            if steps[i] - 2!= i:\n                total += 1\n                if steps[i] - 1!= steps[i]:\n                    total += 1\n                if steps[i] - 2!= steps[i]:\n                    total += 1\n    print(total % (10 ** 9 + 7))"
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n  N, M = map(int, stdin.split(' '))\n  counts = [0] * (N + 1)\n  counts[0] = 1\n  for _ in range(M):\n    a = int(stdin.split(' ')[0])\n    counts[a] = 0\n  \n  for i in range(1, N + 1):\n    if counts[i]!= 0:\n      for j in range(1, 3):\n        if i + j <= N:\n          counts[i + j] += counts[i]\n  \n  return str(counts[-1])"
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the number of ways to climb the stairs under the condition, modulo 1 000 000 7.\n    >>> solution('6 1\\n3')\n    4\n    \"\"\"\n    n, m = map(int, stdin.split(' '))\n    if n <= 1:\n        return n\n    stairs = [1] * (n + 1)\n    stairs[0] = stairs[1] = 0\n    for _ in range(m):\n        stairs[int(stdin)] = 0\n    return sum(stairs)\n"
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split(' '))\n    steps = [0] * N\n    for i in range(M):\n        steps[int(stdin.split(' ')[i])] = 1\n    # sum(steps)\n\n    res = 0\n    for i in range(N):\n        if steps[i] == 1:\n            res += sum(steps[:i + 1]) % 1_000_000_007\n    return str(res)\n"
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, k, d = map(int, stdin.split())\n    if (k - 1) % 2!= 0:\n        return abs(x - d * (k - 1))\n    else:\n        return abs(x + d * (k - 1))\n"
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x, k, d = [int(n) for n in stdin.split()]\n    # Initial state: At the beginning, the Takahashi is at coordinate x=0.\n    # All moves are of distance d=4.\n    # If there are k=6 moves, the Takahashi can go to the coordinates\n    # -d, d, 2d, 3d, 4d, 5d, and 6d.\n    # We want to find the minimum absolute value of the coordinate of the destination.\n    # To do so, we need to go to coordinate -6 and to coordinate 6, so that the\n    # absolute value of the coordinate of the destination is minimized.\n    # So, the answer is 6d - (-6) = 6d + 6 = 2d.\n    return str(k * d + x)\n    # Note that the absolute value is minimized.\n"
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    x, k, d = map(int, stdin.split())\n    k = min(abs(x) // d, abs(x) // d + 1, abs(x) // d - 1)\n    return str(max(abs(x) - k * d, 0))\n"
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x, k, d = list(map(int, stdin.split()))\n    n = 0\n    while x < k * d:\n        n += 1\n        x += d\n    return str(n * d + x - d)\n\nprint(solution(input()))"
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find the minimum possible absolute value of the destination.\"\"\"\n    X, K, D = map(int, stdin.split())\n\n    move_count = 0\n    curr_pos = X\n\n    while move_count < K:\n        if curr_pos < 0:\n            curr_pos += D\n        elif curr_pos > 0:\n            curr_pos -= D\n        move_count += 1\n\n    return abs(curr_pos)\n"
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    '''Return the minimum possible absolute value of the coordinate of the\n    destination in a single move for Takahashi.'''\n\n    # Get input\n    X, K, D = [int(i) for i in stdin.split(' ')]\n\n    # Compute result\n    result = X - D*(K-1)\n    if result < 0:\n        result = -result\n\n    # Return result\n    return str(result)\n"
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    This solution computes the minimum absolute value of the coordinate of\n    the destination in the given example.\n    '''\n    x, k, d = map(int, stdin.split())\n    if k == 0:\n        return str(x)\n    elif k % 2 == 0:\n        return str(min(abs(x - d), abs(x + d)))\n    else:\n        return str(min(abs(x - d), abs(x - d)))\n"
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # get the input\n    X, K, D = [int(x) for x in stdin.split(\" \")]\n\n    # get the solution\n    distance_to_destination = abs(X - K * D)\n    return str(distance_to_destination)\n"
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\ndef"
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip('\\n')\n    length = len(stdin)\n    if length % 2 == 1:\n        return 0\n    if length < 2:\n        return 0\n    return int(length / 2)\n"
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return f'{stdin}'\n\ndef"
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Create a sorted list of all the numbers from 1 to n.\n    Then, find the first number that is not divisible by 2, 3 or 5.\n    '''\n\n    # Create the list\n    numbers = list(range(1, int(stdin) + 1))\n\n    # Sort the list\n    numbers.sort()\n\n    # Find the first number that is not divisible by 2, 3 or 5\n    # From the list we know that the first number is not divisible by 2, 3 or 5\n    # and if this number is divisible by 2, 3 or 5, then this number will appear\n    # in the list\n    for index, number in enumerate(numbers):\n        if number % 2 == 0 or number % 3 == 0 or number % 5 == 0:\n            continue\n        else:\n            return index + 1\n    else:\n        return 0\n"
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    current = 0\n    for i in range(0, len(str(n))):\n        current += int(str(n)[i])\n    for i in range(1, current + 1):\n        if is_equal_to_current(i, current):\n            return i\n\n\ndef"
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    list_of_three_digits = []\n    while a!= 0:\n        b = a % 1000\n        list_of_three_digits.append(b)\n        a = int(a / 1000)\n\n    c = 0\n    for i in range(len(list_of_three_digits)):\n        if list_of_three_digits[i] % 5 == 0:\n            c += 1\n    return c\n"
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Returns the number of days in the month\n    '''\n    return None\n\nprint(solution(int(input())))\n"
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the number of steps required to reach 1,000,000.\"\"\"\n    n = int(stdin)\n    step = 0\n    while n > 1:\n        if n % 2 == 0:\n            n //= 2\n        else:\n            n += 1 if n % 4 == 3 else 3 - n % 4\n        step += 1\n    return step\n"
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin[1] - stdin[0])\n\n\"\"\"\n\na = 2\nb = 3\nc = 4\nd = 5\ne = 6\n\nprint(c - a)\nprint(c - b)\nprint(c - d)\nprint(c - e)\nprint(d - a)\nprint(d - b)\nprint(d - c)\nprint(d - e)\nprint(e - a)\nprint(e - b)\nprint(e - c)\nprint(e - d)"
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    # your code here\n    return n - 1\n"
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split(\"\\n\")))[0]\n    return a\n\nprint(solution(input()))\n\n-----Explanation-----\n\nn = 3\n\n1 + 2 + 3 = 6\n6 + 3 = 9\n9 + 1 = 10\n10 + 2 = 12\n12 + 3 = 15\n15 + 1 = 16\n16 + 2 = 18\n18 + 3 = 21\n21 + 1 = 22\n22 + 2 = 24\n24 + 3 = 27\n\nSo, the sum of the multiples of 3 below the number is 27.\n\"\"\"\n"
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    n = int(stdin.readline().strip())\n    return sum(n*(n+1)/2)"
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    return str(int(stdin) ** 2)"
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return str(pow(2, a))"
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    a = int(stdin.readline())\n    s = str(a * (a + 1) // 2)\n    print(sum(map(int, s)))\n    return None\n"
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return"
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin)**2)"
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Solution begins here\n    return \"\"\n    # Solution ends here\n\n\ndef"
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"13\")\n    '1'\n    >>> solution(\"927\")\n    '1'\n    >>> solution(\"48\")\n    '0'\n    \"\"\"\n    a = int(stdin)\n    if 10 < a < 100:\n        return \"1\" if a % 2 == 1 else \"0\"\n    elif a in {11, 12, 13}:\n        return \"0\"\n    else:\n        return \"1\" if a % 2 == 1 else \"0\"\n"
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return '0'\n    elif n % 2 == 0:\n        return '1'\n    elif n % 3 == 0:\n        return '0'\n    else:\n        return '1'\n"
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return '1' if int(stdin) % 2 else '0'\n"
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return str(0) if int(stdin) % 11 == 0 else str(1)\n"
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return 1 if sum(int(i) for i in stdin) % 3 == 0 else 0\n"
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return \"1\" if int(stdin) % 4 == 0 else \"0\"\n"
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a % sum([i for i in range(1, 11)]) == 0:\n        return \"0\"\n    return \"1\"\n"
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return '1' if stdin == '13' else '0'\n"
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    \n    if (n%2 == 0 and n%7 == 0):\n        return 1\n    else:\n        return 0\n"
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    inp = stdin.split()\n    n = int(inp[0])\n    a = [int(x) for x in inp[1:]]\n    return find_least_magic_number(a, n)\n"
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = list(map(int, stdin.split(\" \")))\n    arr.sort()\n    min_abs = min(abs(i - j) for i, j in zip(arr, arr[1:]))\n    return min_abs\n    \n\"\"\"\n\ndef"
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin)\n\n\nprint(solution('10'))\n"
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    a = [int(x) for x in stdin[1].split(' ')]\n    return sum(n - i for i, a in enumerate(sorted(a, reverse=True)) if a[i]!= 1)\n"
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return 'Hello, world!'"
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    number = []\n    for _ in range(int(stdin.readline().strip())):\n        number.append(int(i) for i in stdin.readline().split())\n    print(solution(number))"
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\nprint(solution(input()))\n-----\ndef"
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdout"
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n\n    max_cost = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[j] == a[i]:\n                a[j] += 1\n            cost = abs(a[i] - a[j])\n            if cost > max_cost:\n                max_cost = cost\n\n    return max_cost\n\n\ndef"
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''8 7\n   ... 8 1\n   ... 6 10\n   ... 9999999733 999999732\n   ... 9999999733 999999733''')\n    '2'\n    >>> solution('''8 999999732\n   ... 8 999999733\n   ... 6 10\n   ... 9999999733 999999732\n   ... 9999999733 999999733''')\n    '1'\n    >>> solution('''999999733 999999732\n   ... 8 999999733\n   ... 6 10\n   ... 9999999733 999999732\n   ... 9999999733 999999733''')\n    '999999733'\n    >>> solution('''1 0\n   ... 2 1\n   ... 1 2\n   ... 1 1''')\n    '1'\n    \"\"\"\n   ...\n"
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n    pass\n"
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\nT = int(stdin.readline().strip())\n\nfor _ in range(T):\n    n, k = map(int, stdin.readline().strip().split())\n    if n == k:\n        print(1)\n    elif n < k:\n        print(n)\n    else:\n        print(n // k + (n % k > 0))\n        \ndef"
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # return \"\"\n    cases = [line.split() for line in stdin.split(\"\\n\") if line]\n    for _, n, k in cases:\n        n = int(n)\n        k = int(k)\n        if n == 1:\n            print(k)\n            continue\n        if n > k * (k + 1) // 2:\n            print(k)\n            continue\n        if n == k:\n            print(1)\n            continue\n        if n == k - 1:\n            print(k - 1)\n            continue\n        remainder = n % k\n        if remainder == 0:\n            print(remainder + (n // k - 1))\n            continue\n        print(remainder + (n // k) + 1)\n    return \"\"\n"
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    numbers = []\n    for i in range(t):\n        numbers.append(list(map(int, stdin.readline().strip().split())))\n\n    for i, number in enumerate(numbers):\n        numbers[i] = list(filter(lambda x: x < number[1], number))\n    numbers.sort()\n\n    for i, number in enumerate(numbers):\n        numbers[i] = sum(number)\n    return str(min(numbers))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''8 7\n   ... 8 1\n   ... 6 10\n   ... 9999999733 999999732\n   ... 9999999733 999999733''')\n    2\n    >>> solution('''8 1\n   ... 6 10\n   ... 9999999733 999999732\n   ... 9999999733 999999733''')\n    1\n    \"\"\"\n    t = int(stdin.readline())\n    for _ in range(t):\n        n, k = [int(i) for i in stdin.readline().split()]\n        if k == 1:\n            print(n)\n        else:\n            num = 0\n            for i in range(1, k + 1):\n                num += i * (i - 1) // 2\n            print(n - num)\n"
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Returns a minimum number of packages Polycarp needs to buy to get exactly $n$ shovels.\n    >>> solution('8 7\\n8 1\\n6 10\\n999999733 999999732\\n999999733 999999733\\n')\n    '2\\n8\\n1\\n999999733\\n1\\n'\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def calc(n, k):\n        return 1 if k <= n else int(((k - 1) * (k - 2)) / 2) + calc(n - k, k)\n\n    n, k = [int(n) for n in stdin.split()]\n    return str(calc(n, k))\n"
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''8 7\n   ... 8 1\n   ... 6 10\n   ... 9999999733 999999732\n   ... 9999999733 999999733''')\n    '2'\n    \"\"\"\n    test_cases = stdin.split(\"\\n\")\n    test_cases = test_cases[:-1]\n    answers = []\n    for test_case in test_cases:\n        num_shovels, num_types = test_case.split()\n        answers.append(get_ans(num_shovels, num_types))\n    for answer in answers:\n        print(answer)\n\n    return \"\"\n\n\ndef"
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    N, M = [int(x) for x in stdin.split(\" \")]\n    switches = {x for x in range(1, N + 1)}\n    bulbs = {x for x in range(1, M + 1)}\n\n    # get the switches and bulbs\n    for i in range(M):\n        switches -= {int(x) for x in stdin.split(\":\", i + 1)[1].split()}\n        bulbs -= {int(x) for x in stdin.split(\":\", i + 1)[2].split()}\n\n    # check\n    count = 0\n    for switch in switches:\n        count += (sum([1 for x in switch if switch % 2 == x % 2]) // 2) % 2\n    count += (sum([1 for x in bulbs if bulbs % 2 == x % 2]) // 2) % 2\n\n    # print\n    print(count)\n"
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.readline().split())\n    k = list(map(int, stdin.readline().split()))\n    p = list(map(int, stdin.readline().split()))\n\n    lighted_bulbs = []\n\n    for i in range(M):\n        count = 0\n        for j in range(N):\n            if k[j] % 2 == 0 and k[j] % 2 == p[i]:\n                count += 1\n        if count % 2 == 0:\n            lighted_bulbs.append(i + 1)\n\n    return len(lighted_bulbs)"
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n, m = [int(line) for line in lines[0].split()]\n    switch_on_count = [0] * n\n    for i in range(m):\n        p = int(lines[i + 1])\n        switch_on_count[p - 1] = (switch_on_count[p - 1] + 1) % 2\n    print(sum(map(lambda x: x % 2, switch_on_count)))\n    return ''"
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # get inputs\n    N, M = map(int, stdin.split(' '))\n    switches = dict()\n    bulbs = dict()\n    for i in range(1, N+1):\n        switches[i] = list(map(int, stdin.split(' ')))\n    for i in range(1, M+1):\n        bulbs[i] = int(stdin.split(' ')[i])\n    # check if there is a bulb that is lit with the given switches\n    count = 0\n    for i in bulbs:\n        num_on = 0\n        for j in range(1, N+1):\n            for k in range(j+1, N+1):\n                if j in switches[k]:\n                    num_on += 1\n        if num_on % 2 == bulbs[i]:\n            count += 1\n    return str(count)\n"
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nprint(solution(input()))"
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the number of combinations of \"on\" and \"off\" states of the switches that light all the bulbs.\n\n    Args:\n        stdin (str): Input of the format described above.\n\n    Returns:\n        str: Number of combinations of \"on\" and \"off\" states of the switches that light all the bulbs.\n    \"\"\"\n\n    n, m = map(int, stdin.split(\"\\n\")[:2])\n\n    switches = []\n    for _ in range(m):\n        switches.extend(map(int, stdin.split(\"\\n\")[_ + 2].split()))\n\n    p = list(map(int, stdin.split(\"\\n\")[_ + 3].split()))\n\n    on = 0\n    for i in range(n):\n        on += p[i] * pow(2, n - 1 - i, 2)\n\n    return str(on)\n\n\nprint(solution(\n    \"2 2\\n2 1 2\\n1 2\\n0 1\"\n))  # \"1\"\n\nprint(solution(\n    \"3 2\\n2 1 2\\n1 2\\n0 1\"\n))  # \"3\"\n\nprint(solution(\n    \"2 2\\n2 1 2\\n1 2\\n0 1\"\n))  # \"1\"\n"
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    num_switches, num_bulbs = list(map(int, stdin.split()))\n    bulbs = [0] * num_bulbs\n    for i in range(num_bulbs):\n        bulbs[i] = list(map(int, stdin.split()))\n    print(bulbs)\n    return \"\""
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    _, N, M = stdin.split(' ')\n    N, M = int(N), int(M)\n\n    switch_on = [0] * N\n    p = [0] * M\n    \n    for _ in range(M):\n        p[_] = int(stdin.split(' ')[-1])\n    \n    for _ in range(M):\n        for i in range(N):\n            if int(stdin.split(' ')[2 * i + 1]) - 1 == i:\n                switch_on[i] += p[_]\n\n    bulb_on = [0] * M\n    for i in range(M):\n        bulb_on[i] = switch_on.count(i % 2)\n    \n    return str(sum(bulb_on) % 2)"
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the number of combinations of on/off states of N switches that light M bulbs.\n    :param stdin: input from standard input\n    :return: answer to the problem\n    \"\"\"\n    input = [int(i) for i in stdin.split('\\n')[0].split()]\n    # input[0] = N, input[1] = M, input[2:] = k_1...k_M, input[3:] = p_1...p_M\n    num_bulbs = input[1]\n    num_switches = input[0]\n    bulbs = [[int(j) for j in stdin.split('\\n')[i].split()]\n             for i in range(2, input[0] + 2)]\n    print(bulbs)\n    # we are interested in the number of bits in the binary representation of p\n    num_bits = sum(bulbs, []).count(0)\n    return num_bits"
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, H, M = list(map(int, stdin.split()))\n    # hour_angle = (H % 12) * 360 / 12\n    # minute_angle = M * 360 / 60\n    # angle = abs(hour_angle - minute_angle)\n    # distance = A * (angle / 360) + B * (angle / (360 / 60))\n    # return \"{:.9f}\".format(distance)\n    return str(A * (abs(H - M) / 12) + B * (abs(H - M) / 60))\n"
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B, H, M = (int(x) for x in stdin.split())\n    a = abs(B*12 - A*12*math.pi/180)\n    b = abs(B*60 - A*60*math.pi/180)\n    c = abs(M*60 - H*60*math.pi/180)\n    return str(math.sqrt(a**2 + b**2 - 2*a*b*math.cos(c)))\n"
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    h, m, a, b = [int(i) for i in stdin.split(' ')]\n    return str(a * b / 100 * (h + m))\n"
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, h, m = map(int, stdin.split(' '))\n    h_angle = h*360/12\n    m_angle = m*360/60\n    \n    h_dist = a*math.sin(m_angle)\n    m_dist = b*math.cos(h_angle)\n    \n    return str(math.sqrt(h_dist**2 + m_dist**2))\n"
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B, H, M = list(map(int, stdin.split()))\n\n    A = A / 100\n    B = B / 100\n\n    a = A - B\n    b = 2 * math.pi * H / 12\n    c = 2 * math.pi * M / 60\n    return math.sqrt(a * a + b * b - 2 * a * b * math.cos(c)) * 100"
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, h, m = map(int, stdin.split())\n    h = h * 12 + m / 60 * 12\n    m = m / 60 * 12\n    d = abs(a - b) * 2.54\n    r = abs(h - m) * 2.54 / 12\n    print(f'{d:.9f}cm')\n    return ''\n\ndef"
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    a, b, h, m = [int(x) for x in stdin.split()]\n    a, b, h, m = a / 100, b / 100, h / 12, m / 60\n    x = (a * (m - m % 1) + b * (h - h % 1)) % 1\n    return \"{:.9f}\".format(x * 100)"
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B, H, M = map(int, stdin.split())\n    diff = abs(M * A - H * B)\n    if H > 12:\n        H = H - 12\n    if M > 59:\n        M = M - 60\n    return \"{:.9f}\".format(diff)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B, H, M = [int(x) for x in stdin.split()]\n    return \"{:.9f}\".format(B - A - min(B, A + H * 12 - M) * 2)\n\n\ndef"
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Get the input\n    numbers = [int(x) for x in stdin.split()]\n    # We'll use this as the answer if either of the hands is undefined\n    out = -1\n\n    # How much the minute hand moves in 12 hours\n    minute_delta = numbers[0] * 60 + numbers[1]\n\n    # How much the hour hand moves in 12 hours\n    hour_delta = numbers[0] * 12 + numbers[2]\n\n    # Get the clock position at the start of the 12 hour period\n    clock_start = hour_delta * 6 + minute_delta // 60\n\n    # Get the clock position at the end of the 12 hour period\n    clock_end = hour_delta * 6 + (minute_delta + 60) // 60\n\n    # Get the distance between the endpoints\n    out = clock_end - clock_start\n\n    # Print the answer\n    print(out)\n"
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split(\"\\n\")[0].split(\" \")]\n    arr = [int(x) for x in stdin.split(\"\\n\")[1].split(\" \")]\n    stdout = 0\n    for i in range(len(arr)):\n        l, r = 0, n - 1\n        while l < r:\n            med = (l + r) // 2\n            if arr[med] == m:\n                stdout += 1\n                break\n            elif arr[med] < m:\n                l = med + 1\n            else:\n                r = med - 1\n    return str(stdout)\n"
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(c) for c in stdin.split(' ')]\n    a = [int(c) for c in stdin.split(' ')[1].split(' ')]\n    return str(count_of_pairs_of_indices(a, n, m))\n\n\ndef"
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    num_of_line = stdin.split(\"\\n\")\n    length = int(num_of_line[0])\n    num_of_median = int(num_of_line[1])\n    num_of_line.pop(0)\n    num_of_line.pop(0)\n    num_of_line = list(map(int, num_of_line))\n    n = len(num_of_line)\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if (num_of_line[i] + num_of_line[j]) == num_of_median:\n                count += 1\n    return str(count)\nprint(solution(input()))\n"
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    find pairs of numbers that sum up to a given value (m)\n    \"\"\"\n    \n    n, m = map(int, stdin.split(' '))\n    seq = list(map(int, stdin.split(' ')))\n    seq.sort()\n    \n    # find the first element that is >= m / 2\n    # then find the last element that is < m / 2\n    # return the length of the intersection of these two sets\n    i = 0\n    j = n - 1\n    while i < j:\n        if seq[i] + seq[j] < m:\n            i += 1\n        elif seq[i] + seq[j] > m:\n            j -= 1\n        else:\n            return '1'\n    return '0'\n\n\ndef"
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split(' ')]\n    a = [int(x) for x in stdin.split(' ')[1:]]\n    m = m if m % 2 == 0 else m + 1\n    a = sorted(a)\n    count = 0\n    for i in range(n):\n        if a[i] == m:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    The first line contains integers $n$ and $m$ \u2014 the length of the given\n    sequence and the required value of the median.\n    The second line contains an integer sequence $a_1, a_2, \\dots, a_n$.\n    :param stdin:\n    :return:\n    \"\"\"\n    n, m = [int(x) for x in stdin.split(' ')]\n    sequence = [int(x) for x in stdin.split(' ')[1].split(' ')]\n    medians = sorted(sequence)\n    k = len(medians)\n    count = 0\n    for i in range(k):\n        if m < medians[i]:\n            j = k - 1\n            while j > i:\n                j -= 1\n                count += 1\n                if m < medians[j]:\n                    break\n        elif m == medians[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    'not good'\n    pass\n"
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def count(seq, value):\n        n = len(seq)\n        m = len(seq) // 2\n        l, r = m - 1, m\n        cnt = 0\n        while l >= 0 and r < n:\n            cnt += seq[r] == value\n            r += 1\n            l -= 1\n        return cnt\n    n, m = list(map(int, stdin.split()))\n    seq = list(map(int, stdin.split()))\n    res = count(seq, m)\n    return res\n"
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    M, segment_list = map(int, stdin.split())\n    \n    b = a\n    \n    if M:\n        for i in range(M):\n            l, r = map(int, stdin.split())\n            for j in range(N):\n                if l <= j + 1 <= r:\n                    b[j] -= 1\n    \n    return str(max(b) - min(b))\n"
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    A = []\n    m = 0\n    for i in range(2):\n        A.append(int(stdin.readline().split(' ')[1]))\n    for _ in range(int(stdin.readline())):\n        m += 1\n        l, r = stdin.readline().split(' ')\n        l = int(l)\n        r = int(r)\n        A[l - 1] += 1\n        A[r] -= 1\n    return str(max(A) - min(A)) +'' + str(m)\n\n\ndef"
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def max_score(a, segments):\n        max_res = 0\n        min_res = 0\n        segments = [i[1] for i in sorted(segments, key=lambda x: x[1])]\n        for i in segments:\n            max_res = max(max_res, a[i - 1])\n            min_res = min(min_res, a[i - 1])\n            a[i - 1] = max_res - min_res\n        return max_res - min_res\n    n, m = map(int, stdin.split(' '))\n    a = list(map(int, stdin.split(' ')))\n    segments = []\n    for i in range(m):\n        segments.append(tuple(map(int, stdin.split(' '))))\n    segments = sorted(segments, key=lambda x: x[1])\n    print(max_score(a, segments))\n    print(segments)\n    return max_score(a, segments)\n"
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\n----\ndef"
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    https://app.codility.com/demo/results/trainingAEPEH3-XNC/\n    '''\n   ..."
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdout\n"
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    a = list(map(int, stdin.split(' ')))\n    l = [list(map(int, stdin.split(' '))) for _ in range(m)]\n\n    a.sort()\n    a.reverse()\n    l.sort()\n    l.reverse()\n    return a[0] - a[-1]\n"
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n\n    def create_arr(a):\n        return [int(i) for i in a.split()]\n\n    def create_segments(a):\n        segments = []\n        for line in stdin[2:]:\n            start, end = line.split()\n            segments.append((int(start), int(end)))\n        return segments\n\n    def apply_segments(arr, segments):\n        for seg in segments:\n            for i in range(seg[0], seg[1]):\n                arr[i] -= 1\n        return arr\n\n    n, m = create_arr(stdin[0])\n    a = create_arr(stdin[1])\n    segments = create_segments(stdin[2:])\n\n    min_dif = 10 ** 5\n    min_seg = []\n    for i in range(m):\n        diff = apply_segments(a, segments[:i+1])\n        dif = max(diff) - min(diff)\n        if dif < min_dif:\n            min_dif = dif\n            min_seg = [i+1]\n        elif dif == min_dif:\n            min_seg.append(i+1)\n\n    return min_seg\n"
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    segments = []\n    for _ in range(m):\n        segments.append(list(map(int, stdin.split())))\n    res = max(arr) - min(arr)\n    for seg in segments:\n        arr[seg[0] - 1] -= 1\n        arr[seg[1] - 1] += 1\n        res = max(res, max(arr) - min(arr))\n    print(res)\n    print(segments)\n    print(arr)\n\n\nsolution(input())"
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = [0] * n\n    for _ in range(m):\n        l, r = map(int, stdin.split())\n        l -= 1\n        r -= 1\n        b[l] += 1\n        b[r] -= 1\n    ans = 0\n    for i in range(n):\n        ans = max(ans, a[i] - b[i])\n    print(ans)\n    print(b)\n    return \"\"\n"
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"8\\nfced\\nxyz\\nr\\ndabcef\\naz\\naa\\nbad\\nbabc\\n\")\n    'Yes\\nYes\\nYes\\nYes\\nNo\\nNo\\nNo\\nNo\\n'\n    \"\"\"\n    ans = []\n    for line in stdin.split(\"\\n\"):\n        s = sorted(line)\n        if s!= list(line) or len(set(s))!= len(s):\n            ans.append(\"No\")\n        else:\n            ans.append(\"Yes\")\n    return \"\\n\".join(ans)\n"
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    n = int(stdin[0])\n    for i in range(1, n + 1):\n        stdin[i] = list(stdin[i])\n    for i in range(n):\n        count = 0\n        for j in range(len(stdin[i])):\n            if stdin[i][j] == stdin[i][j - 1]:\n                count = 0\n            else:\n                count += 1\n                if count == 2:\n                    stdin[i][j] = stdin[i][j - 1] = None\n    stdin = list(filter(lambda x: x!= [], stdin))\n    for i in range(n):\n        if stdin[i] == stdin[i - 1]:\n            stdin[i] = None\n    stdin = list(filter(lambda x: x!= [], stdin))\n    for i in range(n):\n        count = 0\n        for j in range(len(stdin[i])):\n            if stdin[i][j] == stdin[i][j - 1]:\n                count = 0\n            else:\n                count += 1\n                if count == 2:\n                    stdin[i][j] = stdin[i][j - 1] = None\n    stdin = list(filter(lambda x: x!= [], stdin))\n    for i in range(n):\n        count = 0\n        for j in range(len(stdin[i])):\n            if stdin[i][j] == stdin[i][j - 1]:\n                count = 0\n            else:\n                count += 1\n                if count == 2:\n                    stdin[i][j] = stdin[i][j - 1] = None\n    stdin = list(filter(lambda x: x!= [], stdin))\n    for i in range(n):\n        count = 0\n        for j in range(len(stdin[i])):\n            if stdin[i][j] == stdin[i][j - 1]:\n                count = 0\n            else:\n                count += 1\n                if count == 2:\n                    stdin[i][j] = stdin[i][j - 1] = None\n    stdin = list(filter(lambda x: x!= [], stdin))\n    for i in range(n):\n        count = 0\n        for j in range(len(stdin[i])):\n            if stdin[i][j] == stdin[i][j - 1]:\n                count = 0\n            else:\n                count += 1\n                if count == 2:\n                    stdin[i][j] = stdin[i][j - 1] = None\n    stdin = list(filter(lambda x: x!= [], stdin))\n    stdin = list(filter(None, stdin))\n    if len(stdin) == 0:\n        return 'Yes'\n    else:\n        return 'No'"
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Extracts all the words from the input and checks if each word is a diverse one or not.\n    \"\"\"\n    # read lines\n    n = int(stdin.readline().strip())\n    words = []\n    for _ in range(n):\n        words.append(stdin.readline().strip())\n    \n    for word in words:\n        # check if it's a diverse word\n        unique = True\n        chars = [c for c in word]\n        for i in range(1, len(chars)):\n            if chars[i] == chars[i-1]:\n                unique = False\n                break\n        if unique:\n            print('Yes')\n        else:\n            print('No')\n    return ''\n"
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Determine if strings are diverse.\n\n    Args:\n        stdin (str): a sequence of strings.\n\n    Returns:\n        str: the result.\n    \"\"\"\n    return 'Yes' if stdin[0] == stdin[1] else 'No'\n"
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(n):\n        string = stdin[i]\n        count = {}\n        for j in range(len(string)):\n            if string[j] in count.keys():\n                count[string[j]] += 1\n            else:\n                count[string[j]] = 1\n\n        check = 0\n        for k in count.keys():\n            if count[k] == 1:\n                check += 1\n            else:\n                break\n        if check == len(count.keys()):\n            print('Yes')\n        else:\n            print('No')\n        \n"
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # Please use 'yield' instead of'return' in case of using stdin.\n    # you can write to stdout for debugging purposes, e.g.\n    # print(\"this is a debug message\")\n    #\n    # input values\n    n = int(stdin)\n    # check if n is in range\n    if n < 1 or n > 100:\n        raise ValueError\n\n    for i in range(n):\n        # input list is all strings\n        # each string is different\n        strings = list(stdin)\n\n        # check if each letter is unique\n        # if not unique raise error\n        for i in range(len(strings)):\n            for j in range(i + 1, len(strings)):\n                if strings[i] == strings[j]:\n                    raise ValueError\n        \n        # all strings are unique\n        # check if they are consecutive\n        consecutive = True\n        for i in range(len(strings) - 1):\n            if ord(strings[i]) + 1!= ord(strings[i + 1]):\n                consecutive = False\n\n        if consecutive:\n            yield 'Yes'\n        else:\n            yield 'No'\n\n\ndef"
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin) == 0:\n        return \"\"\n    # declare variables\n    diverse = \"\"\n    max_index = 0\n    min_index = 0\n    # loop through stdin\n    for line in stdin:\n        # find the max and min index\n        if len(line) > max_index:\n            max_index = len(line)\n        if len(line) < min_index or min_index == 0:\n            min_index = len(line)\n        # go through each index\n        for index in range(len(line)):\n            # check if the letter is in the Latin alphabet\n            if ord('a') <= ord(line[index]) <= ord('z'):\n                # check if the letter is in the same index\n                if index == 0:\n                    if line[index]!= line[index + 1] and line[index]!= line[index - 1]:\n                        # create the diverse string\n                        diverse += line[index]\n                        # check if the diverse string is the same length\n                        if len(diverse) == max_index - min_index + 1:\n                            return diverse\n                elif index == len(line) - 1:\n                    if line[index]!= line[index - 1] and line[index]!= line[index - 2]:\n                        # create the diverse string\n                        diverse += line[index]\n                        # check if the diverse string is the same length\n                        if len(diverse) == max_index - min_index + 1:\n                            return diverse\n                else:\n                    if line[index]!= line[index + 1] and line[index]!= line[index - 1] and line[index]!= line[index - 2]:\n                        # create the diverse string\n                        diverse += line[index]\n                        # check if the diverse string is the same length\n                        if len(diverse) == max_index - min_index + 1:\n                            return diverse\n    # return the final string\n    return diverse\n"
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return '\\n'.join([\n        'Yes' if ''.join(sorted(set(c))).isalpha()\n        else 'No'\n        for s in stdin.split('\\n')\n    ])\n"
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    print(is_diverse(stdin))\n    return ''\n\n\ndef"
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    This solution uses an auxiliary function to solve the problem.\n\n    If we're using the array we can add a negative value to each element\n    because if we want the min number, it will be the first element\n    and if we want the max number, it will be the last element.\n    \"\"\"\n\n    def solve(array: List[int], segments: List[List[int]]) -> int:\n        \"\"\"\n        :param array: given array\n        :param segments: list of segments\n        :return: the largest difference between max and min element of the array\n        \"\"\"\n\n        return max(solve_helper(array, s, lambda x, y: x + y) for s in segments)\n\n    def solve_helper(array: List[int], segment: List[int], update: Callable[[int, int], int]) -> int:\n        \"\"\"\n        :param array: given array\n        :param segment: the segment we want to apply the update to\n        :param update: the function that updates the values of the array\n        :return: the largest difference between max and min element of the array\n        \"\"\"\n\n        l, r = segment\n\n        # the difference between min and max values\n        # is the maximum difference we can obtain\n        diff = max(array[l:r]) - min(array[l:r])\n\n        for i in range(l, r):\n            array[i] = update(array[i], segment[0])\n\n        return diff\n\n    n, m = map(int, stdin.split())\n\n    array = list(map(int, stdin.split()))\n    segments = [list(map(int, stdin.split())) for _ in range(m)]\n\n    return str(solve(array, segments))\n"
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    a = list(map(int, stdin.split(' ')))\n    b = [0] * n\n    for l, r in sorted(map(int, stdin.split(' ')) for _ in range(m)):\n        b[l - 1] += 1\n        b[r] -= 1\n    b = [i + j for i, j in zip(b[:-1], b[1:])]\n    return str(sum(b) - min(b))"
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4 4\\n1 2\\n2 3\\n3 4\\n2 5\")\n    '2\\n1 2 4 1'\n    \"\"\"\n    N, M = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n    B = [None for _ in range(M)]\n    C = [None for _ in range(M)]\n    min_val, max_val = None, None\n    for i in range(M):\n        l, r = map(int, stdin.split())\n        B[i] = A[l - 1:r]\n        if i == 0:\n            min_val, max_val = min(B[i]), max(B[i])\n        else:\n            min_val = min(min_val, min(B[i]))\n            max_val = max(max_val, max(B[i]))\n    return f\"{max_val - min_val}\\n{' '.join(map(str, B))}\"\n\n\ndef"
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    (n, m) = list(map(int, stdin.split('\\n')[0].split()))\n    a = list(map(int, stdin.split('\\n')[1].split()))\n    b = [0] * n\n    for i in range(m):\n        (l, r) = list(map(int, stdin.split('\\n')[i + 2].split()))\n        for j in range(l - 1, r):\n            b[j] += 1\n    ans = max(b) - min(b)\n    ansl = []\n    for i in range(m):\n        if b[l - 1] > b[r - 1]:\n            ansl.append(r)\n            b[r - 1] += 1\n        else:\n            ansl.append(l)\n            b[l - 1] += 1\n    return''.join(list(map(str, ansl)))\n"
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n"
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    stdin = stdin.split('\\n')\n    n, m = [int(i) for i in stdin[0].split()]\n    a = [int(i) for i in stdin[1].split()]\n    b = []\n    c = []\n    d = []\n    for i in range(m):\n        b.append([int(i) for i in stdin[i + 2].split()])\n    for i in range(m):\n        tmp = []\n        for j in range(b[i][0] - 1, b[i][1]):\n            tmp.append(a[j])\n        tmp.sort()\n        if tmp[-1] >= tmp[0]:\n            c.append(i + 1)\n            d.append(tmp[-1] - tmp[0])\n    d.sort()\n    return str(d[-1]) +'' + str(c[d.index(d[-1])])\n"
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def get_input() -> tuple[int, list[int]]:\n        n, m = map(int, stdin.split())\n        a = list(map(int, stdin.split()))\n        return n, m, a\n\n    def get_segments() -> list[list[int]]:\n        segments = []\n        for i in range(m):\n            l, r = map(int, stdin.split())\n            segments.append([l, r])\n        return segments\n\n    def print_ans(ans: int) -> None:\n        print(ans)\n\n    n, m, a = get_input()\n    segments = get_segments()\n    ans = 0\n    for i in range(m):\n        l, r = segments[i]\n        c = a[l - 1: r]\n        c.sort()\n        a[l - 1: r] = c\n        ans = max(ans, max(c) - min(c))\n    print_ans(ans)\n\n    return ''"
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    b = []\n    for _ in range(m):\n        x, y = [int(x) for x in stdin.split()]\n        b.append((x, y))\n    res = 0\n    for i in b:\n        a[i[0] - 1:i[1]] = [x - 1 for x in a[i[0] - 1:i[1]]]\n        res = max(res, sum(a))\n    res -= min(a)\n    print(res)\n    print(*b)"
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def solve(a, a_segs):\n        res = 0\n        m = 0\n        a_segs_ind = []\n        for i in range(len(a_segs)):\n            l, r = a_segs[i]\n            b = a[l - 1: r]\n            a_segs_ind.append((l - 1, len(b)))\n            a_segs_ind.append((r - len(b), -len(b)))\n            m = max(m, max(b) - min(b))\n        a_segs_ind.sort()\n        cur_sum = 0\n        r = 0\n        for i in range(len(a_segs_ind)):\n            l, l_len = a_segs_ind[i]\n            cur_sum += l_len\n            r += l_len\n            if r > m:\n                cur_sum -= r - m\n                r = m\n            res = max(res, cur_sum)\n        return res\n\n    n, m = [int(x) for x in stdin.split('\\n')[:2]]\n    a = [int(x) for x in stdin.split('\\n')[2:]]\n    a_segs = []\n    for i in range(m):\n        l, r = [int(x) for x in stdin.split('\\n')[3 + i].split()]\n        a_segs.append([l, r])\n    a_segs = sorted(a_segs, key=lambda x: x[0])\n    res = solve(a, a_segs)\n    return str(res)\n"
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdin\n"
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''"
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def to_list(s):\n        return list(map(int, s.split()))\n\n    n = int(stdin.readline())\n    a = to_list(stdin.readline())\n    d = {key: 0 for key in range(1, n + 1)}\n\n    for e in a:\n        d[e] += 1\n\n    ret = 0\n    for e in d:\n        if d[e] == 0:\n            continue\n\n        ret += 1\n        d[e] -= 1\n\n    ans = []\n    for e in a:\n        if d[e] == 0:\n            continue\n\n        ans.append('L' if d[e] % 2 == 1 else 'R')\n\n    return ret\n\n\nsolution('5\\n2 1 5 4 3')\n"
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return str()\n\"\"\"\nfrom __future__ import annotations\n\nfrom collections import Counter\nfrom itertools import chain\nfrom typing import List, Tuple, Union\n\nfrom utils.file_path_generator import data_dir_path\n\n\ndef"
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('5\\n2 1 5 4 3\\n')\n    4\n    >>> solution('7\\n1 3 5 6 7 4 2\\n')\n    7\n    >>> solution('3\\n1 2 3\\n')\n    3\n    >>> solution('4\\n1 2 4 3\\n')\n    4\n    \"\"\"\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n\n    # code here\n    res = 0\n    for i in range(n):\n        for j in range(n):\n            if j!= i:\n                if a[j] < a[i] and a[j] > a[res]:\n                    res = j\n        if res!= i:\n            a[i], a[res] = a[res], a[i]\n            res = i\n\n    return res + 1\n"
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Returns the longest strictly increasing sequence of elements.\n    :param stdin: input string\n    :return: string\n    '''\n\n    return str(solution_printer(stdin))\n\n\ndef"
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def solution2(n, a):\n        a.sort()\n        count = 0\n        i = 1\n        l = 0\n        while i < n:\n            if a[i] > a[i-1]:\n                l = i\n            else:\n                count = max(count, i-l)\n            i += 1\n        return count\n\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    print(solution2(n, a))"
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return 'Case #{}: {}'.format(case, result)"
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n    stdin = stdin.split('\\n')\n    n = int(stdin[0])\n    a = list(map(int, stdin[1].split(' ')))\n\n    a_len = n - 1\n    for i in range(n):\n        if i > 0:\n            if a[i-1] < a[i]:\n                a_len += 1\n        else:\n            a_len += 1\n    \n    print(a_len)\n\n    return ''\n\n\nprint(solution('5\\n1 2 5 3 4'))\nprint(solution('7\\n6 5 4 3 2 4 3'))\nprint(solution('3\\n1 2 3'))\nprint(solution('1\\n1'))\nprint(solution('2\\n1 2'))"
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(stdin.split('\\n')[1].split(' ')))\n\"\"\"\n\ndef"
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    The solution is based on the algorithm proposed by Kirill Vlachos at https://www.geeksforgeeks.org/largest-subarray-with-0-sum/\n    '''\n    n = int(stdin.split('\\n')[0])\n    a = [int(x) for x in stdin.split('\\n')[1].split(' ')]\n    res = [0] * n\n    res[0] = 1\n    max_res = 0\n    for i in range(1, n):\n        if a[i] > a[i - 1]:\n            res[i] = res[i - 1] + 1\n        else:\n            res[i] = 1\n        if max_res < res[i]:\n            max_res = res[i]\n    return max_res"
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Input:\n    The first line contains an integer t, denoting the number of test cases.\n    Then t test cases follow. Each test case consists of two lines.\n    The first line of each test case contains an integer n, denoting the size of the array.\n    Then in the next line are n space separated values of the array A.\n\n    Output:\n    For each test case, in a new line, print the maximum possible length of the strictly increasing\n    subarray of the remaining array.\n    \"\"\"\n    return ''\n    pass\n"
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(c) for c in stdin.readline().split()]\n"
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    It is a simple array problem\n    '''\n    def get_mins(k: int, max: int, array: str) -> int:\n        # array = list(map(int, stdin.split(' ')))\n        array = list(map(int, array.split(' ')))\n        if k > len(array):\n            raise Exception(\"k is greater than length of array\")\n        return sum(array[:k])\n    return get_mins(3, 10**5, stdin)\n\nprint(solution('5 3\\n1 2 2 4 5'))"
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n    a.sort()\n    return a.count(0) + a.count(1) - k*2\nprint(solution(input()))\n\ndef"
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    nums = [int(x) for x in stdin.split()]\n    if k == 1:\n        return 0\n    \n    i = 0\n    while len(nums) < k:\n        num = nums[i]\n        if num % 2 == 0:\n            nums.extend([num // 2] * 2)\n        else:\n            nums.append(num // 2 + 1)\n        i = (i + 1) % len(nums)\n    return len(nums) - k\n\ndef"
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n    if len(a) == k:\n        return 0\n    a.sort()\n    s = 0\n    m = 1\n    i = 0\n    while True:\n        s += a[i]\n        m += 1\n        i += 1\n        if s >= k:\n            return m\n        elif i == len(a):\n            return m + (k - s)\n"
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    num_of_arr, k = stdin.split(' ')\n    arr = [int(num) for num in stdin.split(' ')]\n    arr.sort()\n    for _ in range(int(k)):\n        arr[0] = arr[0] // 2\n        arr.sort()\n    return str(len(arr) - arr.index(arr[0]))\n"
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n\n    def solve(a, k):\n        count = 0\n        m = 1\n        for i in range(n):\n            m *= a[i]\n            count += m//2\n            if m//2 == k:\n                return count\n            if m//2 > k:\n                count -= m//2\n                m = m//2\n                return count\n        return count + m//2\n    return solve(a, k)"
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    :param stdin: str\n    :return: str\n    \"\"\"\n"
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, N = map(int, stdin.split())\n    return \"\".join(\"b\" if i < N else \"r\" if i < A else \"b\" for i in range(A + B))\n"
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    You can assume that input is always valid.\n    \"\"\"\n    n, a, b = [int(s) for s in stdin.split()]\n    return str(b - a + 1)\n"
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return '7'"
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n  return str(sum(1 for _ in itertools.takewhile(lambda x: x[0]!= x[1], zip(stdin, stdin[1:]))))\n"
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = map(int, stdin.split(' '))\n    return '{0}'.format(A * B + (N - B) * N)\n"
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = map(int, stdin.split(' '))\n    blue_balls = 0\n    if A > N:\n        if B > N:\n            blue_balls = N\n        else:\n            blue_balls = N - B\n    elif B > N:\n        blue_balls = A\n    else:\n        blue_balls = A + B\n    return str(blue_balls)\n"
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = stdin.split()\n    n = int(n)\n    a = int(a)\n    b = int(b)\n\n    print(n - a - b)"
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return \"4\"\n\"\"\"\n\ndef"
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the number of blue balls in the row of balls that Takahashi has.\n\n    Args:\n        stdin: The input read from stdin.\n\n    Returns:\n        The number of blue balls in the row of balls that Takahashi has.\n    \"\"\"\n    rows_count = int(stdin.readline().split()[0])\n    blue_count = int(stdin.readline().split()[0])\n    red_count = int(stdin.readline().split()[0])\n    blue_count = blue_count % rows_count\n    red_count = red_count % rows_count\n    if blue_count == 0:\n        blue_count = rows_count\n    if red_count == 0:\n        red_count = rows_count\n    print(blue_count + red_count)\n\ndef"
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return stdin[0]"
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the minimum possible integer x such that all divisors of x are listed in stdin\"\"\"\n\n    t = int(stdin[0])\n    n = int(stdin[1])\n    divisors = list(map(int, stdin[2:2 + n]))\n\n    almost_all_divisors = [1] + list(divisors) + [2, 3, 5, 6, 7, 8, 9]\n\n    if n == 1:\n        return \"1\"\n\n    for i in range(2, n + 1):\n        if i * i > n:\n            break\n        if n % i == 0:\n            divisors.append(n // i)\n        if i >= 2 and n // i in divisors:\n            break\n        if i >= 3 and divisors[i - 2] + 2 * (n // i) in almost_all_divisors:\n            break\n\n    if n == len(divisors):\n        return str(n)\n\n    almost_all_divisors.sort()\n    for i in range(n):\n        if divisors[i]!= almost_all_divisors[i]:\n            return str(almost_all_divisors[i - 1])\n\n    return \"-1\"\n"
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    t = int(stdin.readline())\n    for _ in range(t):\n        n = int(stdin.readline())\n        l = [int(i) for i in stdin.readline().strip().split()]\n        l.sort()\n        s = set(l)\n        k = int(stdin.readline())\n        if k == 1:\n            print(l[0])\n        else:\n            l = [i for i in range(l[0], l[-1] + 1)]\n            for i in l:\n                if i in s:\n                    continue\n                else:\n                    print(i)\n                    break\n    return ''\n"
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    pass\n"
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Solution from https://dev.to/srinad/solving-the-almost-sorted-list-problem-with-queries-1ec1\n    pass\n"
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    "
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        n = int(stdin.readline().strip())\n        lst = [int(x) for x in stdin.readline().strip().split(' ')]\n        lst.sort()\n        for i in range(n):\n            if lst[i] > n:\n                break\n            if i < n - 1:\n                if lst[i] * lst[i + 1] > n:\n                    break\n        else:\n            print(-1)\n            continue\n        print(lst[i] * lst[i + 1])\n"
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    A solution to the problem.\n    '''\n    return ''\n"
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return str(res)\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split('\\n')[0].split()))\n    #\n    n = a[0]\n    a = a[1:]\n    res = []\n    for i in a:\n        if i not in res:\n            res.append(i)\n    #\n    print(len(res))\n    for i in res:\n        print(i, end=' ')\n    #\n    return ''"
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    b = sorted(set(a))\n    return str(len(b)) +'' +''.join(str(i) for i in b)"
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return \"\""
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Remove the duplicates from the array Petya gave us\n    and print the result.\"\"\"\n    stdin = stdin.split()\n    n = int(stdin[0])\n    a = [int(n) for n in stdin[1:]]\n    x = len(set(a))\n    a.sort()\n    a = a[::-1]\n    return str(x) +'' +''.join(a)\n    \ndef"
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    l = stdin.split('\\n')\n    n = int(l[0])\n    arr = list(map(int, l[1].split(' ')))\n    d = {}\n    for i in range(n):\n        if arr[i] not in d.keys():\n            d[arr[i]] = i\n    out = []\n    for k in d.keys():\n        out.append(k)\n    print(d)\n    print(out)\n    return out\n\nprint(solution(stdin))"
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \n    pass\n"
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    list_stdin = stdin.split()\n    list_stdin = [int(i) for i in list_stdin]\n    list_stdin.sort()\n    x = list_stdin.count(list_stdin[0])\n    list_stdin = [i for i in list_stdin if list_stdin.count(i)==x]\n    print(x)\n    print(' '.join(str(i) for i in list_stdin))\n"
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\ndef"
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution for https://codeforces.com/gym/1255\"\"\"\n    return stdin"
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a < 100:\n        return str(a + 1)\n    s = str(a)\n    r = int(s[1:])\n    while not (r % 3 and r % 4):\n        r += 1\n    return str(a + r)\n"
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    \n    return str(int(a*3))\n    \n"
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    a = int(stdin)\n    a_4 = a\n    while a_4 % 4!= 0:\n        a_4 = a_4 + 1\n    return str(a_4)\n"
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    \"\"\"\n\n    pass\n\nprint(solution(\"432\")) # \"435\"\nprint(solution(\"99\")) # \"103\"\nprint(solution(\"237\")) # \"237\"\nprint(solution(\"42\")) # \"44\"\n"
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    s = sum(int(c) for c in stdin)\n    for n in range(a, 1000001):\n        if s % 4 == 0 and n >= a:\n            return str(n)\n    return -1\n"
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    b = []\n    for i in range(1,a+1):\n        s=str(i)\n        b.append(sum([int(j) for j in s]))\n    print(max([i for i in b if i % 4 == 0]))\nsolution(\"{}\".format(i))\n"
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    x = [int(x) for x in str(a)]\n    if sum(x) % 4 == 0:\n        return str(a)\n    x.sort(reverse=True)\n    for i in x:\n        if sum(x) % 4 == 0:\n            return str(a)\n        x.append(i+1)\n    return str(int(str(a) + str(a + 1)[1:]))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    n = a\n    while True:\n        if n % 4 == 0:\n            if n >= a:\n                return str(n)\n            n += 1\n        elif n % 3 == 0:\n            if n >= a:\n                return str(n)\n            n += 1\n        else:\n            n += 1\n"
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    d = []\n    for x in range(a + 1):\n        s = sum([int(i) for i in str(x)])\n        if s % 4 == 0:\n            d.append(s)\n    d.sort()\n    i = 0\n    while d[i] <= a:\n        i += 1\n    return d[i]\n"
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    b = a\n    while (b % 4!= 0):\n        b += 1\n    print(b)"
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\ndef"
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    TODO: implement the solution\n    \"\"\"\n    return \"\"\n"
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    s = stdin\n    n, m = map(int, input().split())\n    b = list(map(int, input().split()))\n    mx = []\n    if n < m:\n        mx = [1] * (n - m + 1)\n    else:\n        mx = [1] * m\n    for i in range(1, n):\n        mx[0] = i\n        mx[i] = sum(b[i - 1:i + m - 1])\n        mx[i] = mx[i] - b[i - 1]\n    mx[n - 1] = sum(b[n - m:n - 1])\n    mx[n - 1] = mx[n - 1] - b[n - m]\n    mx = [str(i) for i in mx]\n    mx = \" \".join(mx)\n    print(mx)\n    return \"a\"\n"
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \n    '''\n    How to solve\n    1. count the number of letters from 0 to m-1\n    2. add the values to a list\n    3. convert to string\n    '''\n    stdin = stdin.split(\"\\n\")\n    s = stdin[0]\n    m = int(stdin[1])\n    b = [int(i) for i in stdin[2].split(\" \")]\n    ans = []\n    for i in range(m):\n        j = 1\n        while j < len(s)+1:\n            if ord(s[j-1]) > ord(s[i]):\n                ans.append(abs(i-j))\n            j += 1\n    ans = \"\".join(str(i) for i in ans)\n    return ans\n"
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n\n    for i in range(1, len(lines)):\n        b = [int(num) for num in lines[i].split()]\n        print(f\"b = {b}\")\n"
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    q = int(stdin.readline())\n\n    for i in range(q):\n        s = stdin.readline().strip()\n        b = [int(i) for i in stdin.readline().split(' ')]\n        ans = ''\n        for i, c in enumerate(s):\n            if c not in ans:\n                ans += c\n            else:\n                j = 0\n                while j < len(ans):\n                    if ans[j] == c:\n                        break\n                    j += 1\n                ans = ans[:j] + ans[j+1:]\n\n        print(ans)\n\n    return ''\n"
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution to the problem:\n    https://codeforces.com/problemset/problem/560/A\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Generate 'aba' in O(n) time\n    :param stdin:\n    :return:\n    \"\"\"\n    # init\n    line = stdin.split('\\n')[1:]\n    line = [line[i] for i in range(len(line)) if i % 2 == 0]\n    s = line[0]\n    m = int(line[1])\n    b = [int(i) for i in line[2].split()]\n\n    # use sum of absolute difference to solve\n    for i in range(m):\n        for j in range(i+1, m):\n            if s[i] > s[j]:\n                b[i] += 1\n            elif s[i] < s[j]:\n                b[j] += 1\n\n    # check\n    for i in range(m):\n        if b[i] < m - i:\n            return 'No'\n\n    return s\n"
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    #\n    # Write your code here.\n    #\n    pass"
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    letter = [chr(i) for i in range(ord('a'), ord('z') + 1)]\n    answer = ''\n    while n >= 26:\n        n -= 26\n        answer += letter[n]\n    return answer"
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return 'z'"
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Replace pass above with your code\n    return \"b\""
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    letters = \"abcdefghijklmnopqrstuvwxyz\"\n    return letters[(n % 26) - 1]"
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return a solution to the task.\n\n    Input format:\n    N\n\n    Output format:\n    Output a string of lowercase English letters.\n\n    Sample Input:\n    2\n\n    Sample Output:\n    b\n    \"\"\"\n    return 'b'\n"
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('2')\n    'b'\n    >>> solution('20')\n    'aab'\n    >>> solution('100')\n    'z'\n    >>> solution('1000000000000001')\n    'zzzzzz'\n    \"\"\"\n\n    # find the number of dogs\n    dog_num = stdin.strip()\n    # if the number of dogs is odd\n    if len(dog_num) % 2 == 1:\n        # then the dog number must be in the middle\n        mid = len(dog_num) // 2\n        # if the dog number is odd\n        if int(dog_num[mid]) % 2 == 1:\n            # then the dog number must be 1 through 26\n            return chr(int(dog_num[mid]) + 64)\n        # otherwise\n        else:\n            # then the dog number must be 27 through 701\n            return chr(int(dog_num[mid-1:mid+1]) + 64)\n    # otherwise\n    else:\n        # then the dog number must be in the middle\n        mid = len(dog_num) // 2\n        # if the dog number is odd\n        if int(dog_num[mid]) % 2 == 1:\n            # then the dog number must be 1 through 26\n            return chr(int(dog_num[mid]) + 64) + chr(int(dog_num[mid-1:mid+1]) + 64)\n        # otherwise\n        else:\n            # then the dog number must be 27 through 701\n            return chr(int(dog_num[mid-1:mid+1]) + 64) + chr(int(dog_num[mid-1:mid+1]) + 64)\n"
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return 'b'"
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = stdin\n    numbers = range(1, 1000000000)\n    letter_number = [chr(i) for i in range(97, 97 + 26)]\n    letter_number_list = list(chain(*(combinations(letter_number, r=i) for i in range(1, 7))))\n    number_letter = [chr(i) for i in range(97, 97 + 26)]\n    number_letter_list = list(chain(*(combinations(number_letter, r=i) for i in range(1, 7))))\n    result = dict(zip(numbers, letter_number_list))\n    result_reverse = dict(zip(letter_number_list, numbers))\n    return result_reverse[N]\n"
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Read in the input\n    n = stdin\n    n = int(n)\n    result = ''\n    for i in range(n - 1):\n        result += chr(ord('a') + (i % 26))\n    result += chr(ord('a') + ((n - 1) % 26))\n    return result\n"
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    words = [word for word in stdin.split()]\n    word_len = []\n    for word in words:\n        word_len.append(len(word))\n    print(sum(word_len))\n    return"
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    words = stdin.readline().split()\n    ans = 0\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if j - i == len(words[j]) - len(words[i]):\n                for t in range(len(words[i])):\n                    if words[i][t]!= words[j][t]:\n                        break\n                else:\n                    ans = len(words[i]) + len(words[j])\n    return ans\n    pass\n\n\ndef"
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''"
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    words = stdin.readline().split()\n    n_w = len(words)\n    dp = [[0] * (n_w) for _ in range(n_w)]\n    ans = [0] * (n_w)\n\n    for i in range(n_w):\n        dp[i][i] = 0\n\n    for d in range(1, n_w):\n        for i in range(0, n_w - d):\n            j = i + d\n            if words[i] == words[j]:\n                dp[i][j] = dp[i + 1][j - 1]\n            else:\n                dp[i][j] = min(dp[i + 1][j], dp[i][j - 1]) + 1\n                ans[i] = dp[i][j]\n\n    max_num = max(ans)\n    print(n_w - max_num)\n    return ''\n"
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    words = stdin.split()\n    size = len(words)\n    abbreviations = []\n    for i in range(size):\n        for j in range(i + 1, size):\n            if abs(len(words[i]) - len(words[j])) == j - i:\n                abbreviations.append((i, j))\n    best = float('inf')\n    for i in range(len(abbreviations)):\n        start, end = abbreviations[i]\n        abbreviation = ''.join(word[0] for word in words[start:end + 1])\n        new_text =''.join(abbreviation if word.isupper() else word for word in words)\n        best = min(best, len(new_text))\n    return best\n\n\ndef"
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    text = stdin.split()\n    N = int(text[0])\n    for i in range(N):\n        text[i] = text[i].upper()\n    text =''.join(text)\n    return len(text)"
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    w = list(map(str, stdin.split()))\n\n    res = len(w)\n    for i in range(len(w) - 2):\n        for j in range(i + 2, len(w)):\n            if j - i == abs(len(w[i]) - len(w[j])):\n                w[i], w[j] = w[i][:1], w[j][:1]\n                res = min(res, len(''.join(w)))\n                w[i], w[j] = w[i][:1], w[j][:1]\n\n    return res\n\n\"\"\""
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    num_words = int(stdin)\n    words = [stdin[i] for i in range(len(stdin))]\n    len_words = [len(word) for word in words]\n    max_len = max(len_words)\n    res = 0\n    for i in range(max_len):\n        word_1 = words[0]\n        word_2 = words[1]\n        if word_1[i] == word_2[i]:\n            continue\n        if word_1[i + 1:] == word_2[i + 1:]:\n            res += 1\n            words.remove(word_1)\n            words.remove(word_2)\n    return num_words + res\n"
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution to the codewars problem.\n    \"\"\"\n    n, k = map(int, stdin.split(' '))\n    arr = list(map(int, stdin.split(' ')))\n    a = []\n    i = 0\n    j = k\n    while j <= n:\n        a.append(sum(arr[i:j]))\n        i += 1\n        j += 1\n\n    best = 0\n    for i in range(n - k + 1):\n        best = max(best, max(a[i:i + k]))\n\n    return str(best)\n"
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    a, n, k = [int(i) for i in stdin.split()]\n    b = [int(i) for i in stdin.split()]\n    l = [i for i in range(1, n)]\n    s = set()\n    for i in range(n):\n        for j in range(i, n):\n            if sum(b[i:j+1]) not in s:\n                s.add(sum(b[i:j+1]))\n    for i in s:\n        print(i, end=\" \")\n    print()\n    return \"\"\n"
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Complete this function\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    i = 0\n    j = k\n    profit = 0\n    while i < n and j < n:\n        profit += max(a[i:j])\n        i += 1\n        j += 1\n    print(profit)\n    print(*[j - i - 1 for i in range(k)])\n"
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Solution to problem\n    n, k = map(int, stdin.readline().split())\n    arr = list(map(int, stdin.readline().split()))\n\n    # \u0441\u0443\u043c\u043c\u0430 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043d\u0435 \u043f\u0440\u0438\u043d\u044f\u0442\u0430\n    # \u0438\u043d\u0430\u0447\u0435 \u043c\u043e\u0436\u043d\u043e \u0431\u044b\u043b\u043e \u0437\u0430\u043c\u0435\u043d\u0438\u0442\u044c \u043f\u0435\u0440\u0432\u044b\u0439 \u0441\u0442\u0430\u0440\u044b\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\n    # \u043d\u0430 \u0432\u0442\u043e\u0440\u043e\u0439 \u043f\u043e \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u043d\u0438\u044e\n    s = sum(arr)\n    if s % k!= 0:\n        arr[0], arr[1] = arr[1], arr[0]\n\n    arr.sort()\n    n -= 1\n    k -= 1\n    while k > 0:\n        arr[n + 1] = arr[n]\n        n -= 1\n        k -= 1\n    print(sum(arr))\n    print(\" \".join(map(str, arr)))\n    return\n"
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    l = 0\n    r = 0\n    t = 0\n    m = 0\n    for i in range(k):\n        while r < n and a[r] < a[l]:\n            r += 1\n        m = max(a[l:r])\n        while r < n and a[r] == m:\n            r += 1\n        t += m * (r - l)\n        l = r\n    return str(t)"
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    import re\n    import itertools\n    [n, k] = [int(i) for i in re.findall(r'\\d+', stdin)[:2]]\n    l = [int(i) for i in re.findall(r'\\d+', stdin)[2:]]\n    if n == k == 0:\n        return 0\n    if len(l) < k:\n        return 0\n    l.sort(reverse=True)\n    count = 0\n    for x in itertools.combinations(l, k):\n        count = max(count, sum(x))\n    return count\n"
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\ndef"
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"8 3\\n5 4 2 6 5 1 9 2\\n\")\n    20\n    >>> solution(\"5 1\\n1 1 1 1 1\\n\")\n    1\n    >>> solution(\"4 2\\n1 2000 2000 2\\n\")\n    4000\n    >>> solution(\"4 4\\n1 2 3 4\\n\")\n    0\n    \"\"\"\n    n, k = map(int, stdin.split())\n    difficulties = list(map(int, stdin.split()))\n    # if n < 2:\n    #     return 0\n    if k < 2:\n        return 0\n    if n < k:\n        return 0\n    if k == 1:\n        return n\n    min_difficulty = min(difficulties)\n    max_profit = 0\n    for i in range(1, min_difficulty + 1):\n        tmp_profit = difficulties[0] - i + 1\n        for j in range(1, n):\n            if difficulties[j] - difficulties[j - 1] > i:\n                tmp_profit = tmp_profit + i\n            else:\n                tmp_profit = tmp_profit + difficulties[j] - difficulties[j - 1]\n        max_profit = max(max_profit, tmp_profit)\n    for i in range(1, n):\n        tmp_profit = difficulties[i - 1] - difficulties[i - 1] + 1\n        for j in range(i, n):\n            if difficulties[j] - difficulties[j - 1] > difficulties[j - 1] - difficulties[i - 1]:\n                tmp_profit = tmp_profit + difficulties[j] - difficulties[j - 1]\n            else:\n                tmp_profit = tmp_profit + difficulties[j] - difficulties[j - 1] + 1\n        max_profit = max(max_profit, tmp_profit)\n    return max_profit\n"
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \n\"\"\""
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"8 3\\n5 4 2 6 5 1 9 2\\n\")\n    20\n    >>> solution(\"5 1\\n1 1 1 1 1\\n\")\n    1\n    >>> solution(\"4 2\\n1 2000 2\\n\")\n    4000\n    \"\"\"\n    n, k = map(int, stdin.split(\" \"))\n    a = list(map(int, stdin.split(\"\\n\")[1:]))\n    diff = [a[i + 1] - a[i] for i in range(n - 1)]\n    diff.append(a[-1])\n    res = set()\n    for i in range(1, n):\n        if i % k == 0:\n            res.add(sum(diff[:i]))\n    return max(res)\n"
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    # return \"\"\n\n\ndef"
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\n\n\ndef"
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    stdin = [int(n) for n in stdin.strip().split('\\n')]\n    arr = [0] + stdin + [0]\n    length = len(arr)\n    prefix_sum = [0] * length\n    for i in range(length):\n        if i == 0:\n            prefix_sum[i] = arr[i]\n        else:\n            prefix_sum[i] = prefix_sum[i - 1] + arr[i]\n    dp = [0] * (length + 1)\n    dp[0] = 1\n    dp[1] = 1 if arr[1]!= 0 else 0\n    for i in range(2, length):\n        dp[i + 1] = dp[i] + 1 if arr[i]!= 0 and arr[i] == arr[i - 1] else dp[i]\n    for i in range(1, length - 1):\n        if arr[i - 1] == 0:\n            dp[i + 2] = dp[i] + 1\n        elif arr[i + 1] == 0:\n            dp[i + 2] = dp[i]\n        elif arr[i] == 0:\n            dp[i + 2] = dp[i + 1] + 1\n        elif arr[i] == arr[i - 1]:\n            dp[i + 2] = dp[i]\n        else:\n            dp[i + 2] = min(dp[i] + 1, dp[i + 1] + 1)\n    return dp[length]\n\"\"\"\n\ndef"
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n"
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\nn = int(stdin.readline().strip())\na = [int(c) for c in stdin.readline().strip().split(' ')]\n\ns = 0\nans = 0\nfor i in range(n):\n    s += a[i]\n    ans += s\n    ans %= 2\nprint(ans)\n\nreturn \"\"\n"
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\nYour task is to make an entry for this problem. You can make one by yourself or use the provided template.\n\nSo, your task is to implement this function:\n\ndef"
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    arr = list(map(int, stdin.readline().split()))\n    if len(arr) == 1:\n        return str(0)\n\n    m = {}\n    for i in range(len(arr)):\n        if arr[i] == 0:\n            return str(0)\n        elif arr[i] > 0:\n            m[arr[i]] = m.get(arr[i], 0) + 1\n        else:\n            m[arr[i]] = m.get(arr[i], 0) - 1\n\n    if 0 in m:\n        return str(0)\n    cur = 0\n    ans = 0\n    for val in sorted(m):\n        if cur <= 0:\n            ans += m[val]\n            cur = m[val]\n        elif cur == m[val]:\n            cur = m[val]\n        else:\n            if m[val] == 0:\n                ans += m[val]\n            elif m[val] > 0:\n                ans += m[val] + m[val - cur] - 1\n                cur = m[val] - m[val - cur] + 1\n            else:\n                ans += m[val] + m[val + cur] - 1\n                cur = m[val] - m[val + cur] + 1\n\n    return str(ans)\n\n\ndef"
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\n\nimport sys\nimport numpy\nfrom typing import List, Tuple, Dict, Set, Deque\nfrom collections import deque\nimport heapq\nimport itertools\nfrom functools import lru_cache\n\n\ndef"
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    pass\n"
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return str(solve_it(input))\n\n\ndef"
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def check_max_sum(a: str) -> int:\n        _sum = 0\n        _max_sum = 0\n        for i, x in enumerate(a):\n            _sum += x\n            _max_sum = max(_max_sum, abs(x - a[i + 1]))\n        return _max_sum\n    \n    n, m = [int(i) for i in stdin.split('\\n')[0].split()]\n    ans = 0\n    for _ in range(n):\n        a = [int(i) for i in stdin.split('\\n')[1 + _].split()]\n        ans = max(ans, check_max_sum(a))\n    return str(ans)\n"
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    #Your code here\n    #TODO\n    return \"\"\n"
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # total = 0\n    # for i in range(len(stdin)):\n    #     total += i\n    # return total\n    return stdin"
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \n    return ''\n"
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # t = int(stdin.readline())\n    # while t > 0:\n    #     n, m = map(int, stdin.readline().split())\n    #     l = list(map(int, stdin.readline().split()))\n    #     s = 0\n    #     for i in range(n - 1):\n    #         s += max(abs(l[i] - l[i + 1]), 0)\n    #     print(s)\n    #     t -= 1\n    # pass\n\n\ndef"
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    i = 0\n    while True:\n        if (i + 1) * k > 10 ** 6:\n            break\n        i += 1\n    if i == 0:\n        return \"-1\"\n    return str(i * k - 1)\n"
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    seq = stdin\n    k = int(stdin)\n    count = 0\n    for n in range(len(seq)):\n        num = int(seq[n])\n        if num % k == 0:\n            count += 1\n            if count == 1:\n                return n\n    return -1"
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"returns the position of the first occurrence of a multiple of K in a sequence of natural numbers,\n    or -1 if no such occurrence exists\"\"\"\n    K = int(stdin)\n    seq = [1]\n    num_of_multiples = 0\n    for i in range(1, 1000001):\n        seq.append(seq[i-1] + i)\n        if seq[i] % K == 0:\n            num_of_multiples += 1\n            if num_of_multiples == 1:\n                return i\n    return -1\n"
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin.readline().strip())\n    n = int(stdin.readline().strip())\n    j = 0\n    if n % K == 0:\n        return n // K\n    else:\n        while j < n:\n            j += K\n            if j % K == 0:\n                return j\n    return '-1'\n"
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin\n    k = int(input)\n    count = 0\n    if k % 2 == 0:\n        for i in range(1, len(input)):\n            if int(input[i]) % k == 0:\n                count = i\n                break\n    else:\n        for i in range(1, len(input)):\n            if int(input[i]) % k!= 0:\n                count = i\n                break\n    print(count)\n    return count\n\ndef"
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    K: An integer, K\n    V: The length of the sequence S\n    S: The sequence, a non-empty list of ints\n    '''\n    # Your code here\n    k = int(stdin)\n    sequence = [int(x) for x in stdin]\n    if len(sequence) == 0:\n        return -1\n    for num in sequence:\n        if num % k == 0:\n            return sequence.index(num) + 1\n    return -1\n"
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin)\n    n = int(input())\n    if not K % n == 0:\n        print(-1)\n        return\n    k = 1\n    multiple = False\n    for i in range(1, n + 1):\n        if not multiple:\n            if k % K == 0:\n                print(i)\n                multiple = True\n        else:\n            break\n        k *= 10\n    return\n\nsolution(input())\n"
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin)\n    count = 0\n    for i in range(1, 1000000):\n        if i % K == 0:\n            count += 1\n            if count == 1:\n                return i\n    return -1\n"
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin)\n    if K < 2 or K > 10 ** 6:\n        return -1\n    else:\n        sequence = []\n        for i in range(10 ** 6):\n            sequence.append(i)\n        return sequence[(sequence.index(7777) + K - 1) % len(sequence)]\n    \n\nsolution('101')"
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin.readline().strip())\n    last_seen = 1\n    for i, val in enumerate(stdin.readline().strip(), 1):\n        if int(val)!= K:\n            continue\n        if (i - last_seen) % K == 0:\n            return i\n        last_seen = i\n    return -1\n"
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    "
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(n) for n in stdin.split(' ')]\n    p = [int(n) for n in stdin.split(' ')]\n    result = 0\n    for i in range(n):\n        for j in range(n):\n            if (p[j] < p[i] and p[j] >= m) or (p[j] > p[i] and p[j] <= m):\n                result += 1\n    return str(result)\n"
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return str()\n"
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    n, m = list(map(int, stdin.split('\\n')[0].split()))\n    sequence = list(map(int, stdin.split('\\n')[1].split()))\n    '''\n    n, m = [5, 8]\n    sequence = [1, 15, 2, 14, 3, 13, 4, 8, 12, 5, 11, 6, 10, 7, 9]\n    cnt = 0\n    for i in range(len(sequence)):\n        for j in range(i+1, len(sequence)):\n            if (sequence[i] + sequence[j]) // 2 == m:\n                cnt += 1\n    print(cnt)\n\ndef"
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n"
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    p = list(map(int, stdin.split(' ')))\n    p.sort()\n    s = 0\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if p[i] < m <= p[j]:\n                s += 1\n            if p[i] > m >= p[j]:\n                s += 1\n    return str(s)"
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    # TODO: implement solution\n    return \"\"\n"
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\"Your solution here\"\"\"\n\"\"\"\n"
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... 5 8\n   ... 2 3 1 1 2\n   ... ''')\n    '4'\n    \"\"\"\n    cups = list(map(int, stdin.splitlines()[0].split()))\n    pages = list(map(int, stdin.splitlines()[1].split()))\n    res = 0\n    pages = [pages[i] - pages[i - 1] for i in range(1, len(pages))]\n    pages.append(pages[-1])\n    pages.insert(0, pages[0])\n    print(pages)\n    for i in range(1, len(pages)):\n        if pages[i] > pages[i - 1]:\n            res = i\n    return str(res) if res!= 0 else '-1'\n"
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    m = int(stdin.split('\\n')[0].split(' ')[0])\n    n = int(stdin.split('\\n')[0].split(' ')[1])\n    a = [int(x) for x in stdin.split('\\n')[1].split(' ')]\n    for i in range(n):\n        if a[i] <= m:\n            m -= a[i]\n        else:\n            return \"-1\"\n    return str(m)\n\"\"\"\n\ndef"
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Returns the minimum number of days Polycarp needs to complete the coursework or -1 if it is impossible.\n\n    >>> solution(\"5 8\\n2 3 1 1 2\")\n    4\n    >>> solution(\"7 10\\n1 3 4 2 1 4 2\")\n    2\n    >>> solution(\"5 15\\n5 5 5 5 5\")\n    1\n    >>> solution(\"5 26\\n5 5 5 5 5\")\n    -1\n    '''\n    n, m = [int(s) for s in stdin.split(' ')]\n    a = [int(s) for s in stdin.split('\\n')[1].split(' ')]\n    a.sort()\n    s = 0\n    p = 0\n    c = 0\n    i = 0\n    while i < n:\n        if s + (a[i] - i) > m:\n            return -1\n        s += a[i] - i\n        if c == 0:\n            p += 1\n            c = a[i]\n            i += 1\n        else:\n            if c - 1 > 0:\n                c -= 1\n                p += 1\n            else:\n                c = 0\n                i += 1\n    return p\n"
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pages, cups = [int(s) for s in stdin.split(\"\\n\")]\n    cups_caffe = [int(s) for s in stdin.split(\"\\n\")][1]\n    \n    return str(max_time(pages, cups, cups_caffe))\n\ndef"
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    https://app.codility.com/demo/results/trainingPWYBJF-QO4/\n    \"\"\"\n    number_of_pages, number_of_cups_of_coffee = [int(i) for i in stdin.split('\\n')[:2]]\n    cups_of_coffee = [int(i) for i in stdin.split('\\n')[2:]]\n\n    max_pages_to_write = sum(cups_of_coffee)\n    if max_pages_to_write <= number_of_pages:\n        return str(1)\n    elif max_pages_to_write > number_of_pages:\n        return '-1'\n\n    # min_pages_to_write = number_of_pages\n    #\n    # for index, cup in enumerate(cups_of_coffee):\n    #     min_pages_to_write += max(number_of_pages - index, 0) * cup\n\n    min_pages_to_write = 0\n    for index, cup in enumerate(cups_of_coffee):\n        min_pages_to_write += number_of_pages - index * cup\n\n    return str(min_pages_to_write // number_of_pages)\n\n\nassert solution('5 8\\n2 3 1 1 2') == '4'\nassert solution('7 10\\n1 3 4 2 1 4 2') == '2'\nassert solution('5 15\\n5 5 5 5 5') == '1'\nassert solution('5 16\\n5 5 5 5 5') == '2'\nassert solution('5 26\\n5 5 5 5 5') == '-1'\n\nassert solution('5 5\\n5 5 5 5 5') == '-1'\nassert solution('1 3\\n2 3') == '-1'\nassert solution('1 3\\n2 2') == '2'\nassert solution('1 3\\n2 3') == '1'\n"
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    print(a)\n    i, j = 0, m\n    cnt = 0\n    while j > 0:\n        print(i, j, i + (j - 1))\n        if a[i] >= j:\n            j = 0\n        else:\n            j -= a[i]\n            i += 1\n            cnt += 1\n    if j!= 0:\n        cnt = -1\n    return cnt\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    cups = [int(x) for x in stdin.split()]\n    days = 0\n    for i in range(len(cups)):\n        if i == 0:\n            days += min(m, cups[i])\n            m = max(0, m - cups[i])\n            cups[i] = 0\n            continue\n        if i > 0:\n            days += min(m, max(0, cups[i] - cups[i - 1] - 1))\n            m = max(0, m - cups[i])\n            cups[i] = 0\n            if i == len(cups) - 1:\n                break\n    if m!= 0:\n        return -1\n    return days\n\n\nprint(solution(stdin))\n\n\"\"\""
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution\n    return 'not possible'\n"
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Complexity:\n        time: O(n log n)\n        space: O(1)\n    \"\"\"\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n\n    if n <= 2:\n        return 0\n\n    a.sort()\n\n    k = a[1] - a[0]\n\n    for i in range(2, n):\n        if a[i] - a[i - 1]!= k:\n            return -1\n\n    return k\n"
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution for this problem.\"\"\"\n    # Get number of lines of input.\n    line_count = int(stdin.readline())\n    sequence = [int(x) for x in stdin.readline().split(' ')]\n    max_diff = 0\n    # Find minimum possible number of elements to change.\n    for i in range(len(sequence)):\n        # Current diff must be positive.\n        if sequence[i] - sequence[i - 1] < 0:\n            # Maximum diff between current and previous elements can't be larger than this number.\n            max_diff = max(max_diff, sequence[i] - sequence[i - 1])\n    # If there is no way to make an arithmetic progression, return -1.\n    if max_diff > 1:\n        return '-1'\n    # If there is at least one way, return minimum number of changes.\n    return str(len(sequence) - 1)\n\n\ndef"
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    sequence = [int(x) for x in stdin.split()]\n    m = len(sequence)\n    if m == 1 or m == 2:\n        return \"0\"\n    min_diff = sequence[1] - sequence[0]\n    for i in range(2, m):\n        diff = sequence[i] - sequence[i - 1]\n        if diff < 0:\n            diff *= -1\n        if diff < min_diff:\n            min_diff = diff\n    if min_diff == 0:\n        return \"0\"\n    return str(min_diff)\n"
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \n    return ''\n"
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    count = int(stdin)\n    arr = list(map(int, stdin.split()))\n    if len(arr) < 3:\n        return '-1'\n    d = {}\n    for i in range(count):\n        d[arr[i]] = i\n    r = [1] * count\n    for i in range(count):\n        for j in range(i + 1, count):\n            if arr[i] > arr[j] and r[i] + 1 < r[j]:\n                r[j] = r[i] + 1\n    if max(r) == 1:\n        return '0'\n    else:\n        return max(r)\n"
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    :type n: int\n    :type a: List[int]\n    :rtype: int\n    \"\"\"\n    n = int(stdin)\n    a = [int(i) for i in stdin.split()]\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    elif n == 3:\n        if a[0]!= a[1] and a[0]!= a[2]:\n            return 1\n        elif a[0] == a[1] and a[0]!= a[2]:\n            return 2\n        elif a[0] == a[2] and a[0]!= a[1]:\n            return 2\n        elif a[0] == a[1] == a[2]:\n            return 3\n        else:\n            return -1\n    elif n > 3:\n        # a[0]\n        # a[1]\n        # a[2]\n        #...\n        # a[n]\n        #\n        # a[0] a[1] a[2]... a[n-1]\n        # a[0] -1\n        # a[1] +1\n        # a[2] -1\n        #...\n        # a[n-1] +1\n        #\n        # a[0] a[1] a[2]... a[n-1]\n        # a[0] +1\n        # a[1] -1\n        # a[2] +1\n        #...\n        # a[n-1] -1\n        #\n        # a[0] a[1] a[2]... a[n-1]\n        # a[0] -1\n        # a[1] +1\n        # a[2] -1\n        #...\n        # a[n-1] +1\n        #\n        # a[0] a[1] a[2]... a[n-1]\n        # a[0] +1\n        # a[1] -1\n        # a[2] +1\n        #...\n        # a[n-1] -1\n        #\n        # a[0] a[1] a[2]... a[n-1]\n        # a[0] -1\n        # a[1] +1\n        # a[2] -1\n        #...\n        # a[n-1] +1\n\n        dp = [[None for _ in range(n)] for _ in range(3)]\n        dp[0][0] = a[0]\n        dp[1][0] = -1\n        dp[2][0] = 1\n\n        for i in range(1, n):\n            dp[0][i] = min(dp[1][i-1] + 1, dp[2][i-1] + 1)\n            dp[1][i] = min(dp[0][i-1] - 1, dp[2][i-1] + 1)\n            dp[2][i] = min(dp[0][i-1] + 1, dp[1][i-1] - 1)\n\n        ans = min(dp[0][-1], dp[1][-1], dp[2][-1])\n        if ans == 0:\n            return 0\n        elif ans == 1:\n            return 1\n        else:\n            return -1\n\n\n\n\nsolution(\"4\")\nsolution(\"2\")\nsolution(\"3\")\nsolution(\"5\")\nsolution(\"1 3 6 9 12\")\n"
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    b = list(map(int, stdin.readline().split()))\n    change = 0\n    for i in range(1, n):\n        if b[i] - b[i - 1]!= b[i - 1] - b[i - 1]:\n            change += 1\n    if change > 1:\n        return '-1'\n    elif change == 0:\n        return '0'\n    elif change == 1:\n        return str(b.index(min(b[1:])) + 1)\n"
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def solve(l: list) -> int:\n        sums = [sum(l[:i]) for i in range(1, len(l)+1)]\n        res = 0\n        for i in range(len(sums)):\n            for j in range(i+1, len(sums)):\n                diff = sums[j] - sums[i]\n                if diff <= 5:\n                    res += 1\n        return res\n\n    n, k = [int(x) for x in stdin.split(' ')]\n    l = [int(x) for x in stdin.split('\\n')[1].split(' ')]\n    l.sort(reverse=True)\n    res = 0\n    for i in range(k):\n        res += solve(l)\n        for _ in range(i):\n            l.pop()\n    return res\n"
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution for exercise1, finds the maximum possible number of students in no more than k teams\n    such that the total number of students in the teams is maximized, and each pair of students in each team has a programming skill difference of at most 5\n    \"\"\"\n    n, k = list(map(int, stdin.split()))\n    students_skills = list(map(int, stdin.split()))\n\n    teams = []\n    for team_size in range(k, 0, -1):\n        for comb in itertools.combinations(students_skills, team_size):\n            teams.append(list(comb))\n\n    max_diff = 5\n    # A list of possible options for each team\n    # team_options[i] is a list of possible options for the ith team\n    team_options = [[] for i in range(k)]\n    for team in teams:\n        # A list of possible options for each pair in the team\n        # pair_options[i] is a list of possible options for the ith pair in the team\n        pair_options = [[] for i in range(len(team) // 2)]\n        for i in range(len(team) // 2):\n            pair_options[i] = list(range(team[i * 2] - max_diff, team[i * 2] + max_diff + 1))\n            if team[i * 2 + 1] < team[i * 2]:\n                pair_options[i] = list(range(team[i * 2] + max_diff + 1, team[i * 2 + 1] - max_diff))\n        for i in range(len(pair_options)):\n            for option in pair_options[i]:\n                team_options[i].append(list(team[i * 2:i * 2 + 2]) + [option])\n\n    # A list of possible combinations for each team\n    # team_combos[i] is a list of possible combinations for the ith team\n    team_combos = [[] for i in range(len(team_options))]\n    for i in range(len(team_options)):\n        for options in team_options[i]:\n            team_combos[i].append(list(itertools.permutations(options)))\n\n    # Now we'll find the combinations that give the maximum number of students\n    max_students = 0\n    for combos in team_combos:\n        for comb in combos:\n            students = 0\n            for i in range(len(comb)):\n                if i == 0:\n                    students += sum(comb[i])\n                else:\n                    students += comb[i][-1] - comb[i - 1][-1]\n            if students > max_students:\n                max_students = students\n    return max_students\n"
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    k, n = stdin.split(' ')\n    k, n = int(k), int(n)\n    stdin = stdin.split('\\n')\n    a = [int(i) for i in stdin[0].split(' ')]\n    a.sort()\n    flag = False\n    for i in range(n):\n        if a[i] % 5!= 0:\n            flag = True\n            break\n    if flag:\n        return -1\n    x = a[0]\n    ans = 0\n    cnt = 1\n    for i in range(n):\n        if i!= n - 1 and (a[i] - x) <= 5:\n            cnt += 1\n            ans = max(ans, cnt)\n        else:\n            ans = max(ans, cnt)\n            cnt = 1\n    return ans\n"
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n, k = map(int, lines[0].split())\n    nums = list(map(int, lines[1].split()))\n    nums.sort(reverse=True)\n    res = 0\n    for i in range(n - 1, n - k, -1):\n        if abs(nums[i] - nums[i - 1]) <= 5:\n            res += i + 1\n    return res\n"
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''\n"
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def func(n: int, k: int) -> int:\n        from collections import defaultdict\n        d = defaultdict(list)\n        for i in range(n):\n            d[stdin[i]].append(i)\n        k -= 1\n        for i in d:\n            while d[i] and k:\n                p = d[i].pop()\n                d[i+5].append(p)\n                k -= 1\n        return n - k\n\n    return func(*map(int, stdin.split('\\n')[:2]))\n"
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split('\\n')[0].split(' ')))\n    students = list(map(int, stdin.split('\\n')[1].split(' ')))\n    students.sort()\n    start = 0\n    end = len(students) - 1\n    while end > start:\n        if students[end] - students[start] <= 5:\n            end -= 1\n        else:\n            start += 1\n    return start + 1\n"
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = map(int, stdin.split())\n    a = sorted(a)\n    d = [a[i + 1] - a[i] for i in range(n - 1)]\n    d = list(sorted(set(d)))\n    d.pop(0)\n    return str(max(sum(d[:m - 1]), sum(d[-m:])))\n"
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return str(something)\n"
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return ''"
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m = [int(x) for x in stdin.split(' ')]\n    scores = [int(x) for x in stdin.split(' ')]\n    if n == m:\n        return str(k)\n    if n == 1:\n        return str(max(scores[0], k))\n    total = sum(scores[:n - 1])\n    need = total // n\n    if total >= m:\n        return str(need)\n    return '-1'\n"
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solve exercise\"\"\"\n    return str(solve(stdin))\n"
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m = [int(x) for x in stdin.split(' ')]\n    l = [int(x) for x in stdin.split(' ')]\n    l.sort(reverse=True)\n    print(l)\n    count = 0\n    for i in range(n):\n        if l[i] <= m:\n            count += m - l[i]\n        else:\n            break\n    if count == 0:\n        return \"1\"\n    else:\n        return str(count)\n"
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # total number of subjects\n    n = int(stdin.split()[0])\n    # total number of points\n    k = int(stdin.split()[1])\n    # average score\n    m = int(stdin.split()[2])\n    # array of points\n    arr = [int(i) for i in stdin.split()[3:]]\n    arr = sorted(arr)\n    arr = arr[::-1]\n    print(arr)\n    # loop through each point\n    for i in range(0,len(arr)):\n        # if the average score is not at least k, increment the number of points\n        if arr[i]*n + k < m:\n            return str(arr[i]*n + k)\n    # if the average score is not at least k, return -1\n    return str(-1)\n"
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n    pass"
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    n, k, m = [int(x) for x in stdin.split(' ')]\n    scores = [int(x) for x in stdin.split(' ')[1:]]\n    scores.sort()\n    scores.reverse()\n    score = 0\n    for i in range(m):\n        if score < scores[i]:\n            score = scores[i]\n        else:\n            break\n    print(score)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport math\nimport sys\n\nN, K, M = list(map(int, sys.stdin.readline().rstrip().split()))\nA = list(map(int, sys.stdin.readline().rstrip().split()))\n\nk = K - sum(A)"
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    N, K, M = [int(i) for i in stdin.split(' ')]\n    A = [int(i) for i in stdin.split(' ')[1:-1]]\n    A.sort(reverse=True)\n    sum_all = sum(A)\n    sum_greater = sum(A[:-(M - 1)])\n    if sum_greater < M:\n        return -1\n    return sum_greater - M + 1\n    '''\n    N, K, M = [int(i) for i in stdin.split(' ')]\n    A = [int(i) for i in stdin.split(' ')[1:-1]]\n    A.sort(reverse=True)\n    sum_all = sum(A)\n    sum_greater = sum(A[:-(M - 1)])\n    if sum_greater < M:\n        return -1\n    return N * (K - sum_greater) + M * K - sum_greater * (M - 1)"
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m = [int(x) for x in stdin.split()]\n    scores = [int(x) for x in stdin.split()[:n]]\n    scores.sort()\n    cnt = 0\n    for i in range(m, 0, -1):\n        for j in range(n - 1):\n            if scores[j] + i == scores[j + 1]:\n                cnt += 1\n                break\n        if cnt == n - 1:\n            break\n    return cnt + 1\n"
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, K, Q = [int(x) for x in stdin.split()]\n\n    scores = [K for x in range(N)]\n    for _ in range(Q):\n        i = int(stdin.split()[0]) - 1\n        score = max(0, scores[i] - 1)\n        scores[i] = score\n\n    return '\\n'.join([str(i + 1) for i, score in enumerate(scores) if score > 0])\n"
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(input())\n    \"Yes\"\n    \"\"\"\n    N, K, Q = map(int, stdin.split())\n    score = [K] * N\n    for _ in range(Q):\n        i = int(stdin)\n        score[i - 1] -= 1\n    return \"Yes\" if max(score) <= 0 else \"No\"\n"
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solve exercise.\"\"\"\n    _, K, Q, *_ = stdin.split(\"\\n\")\n    K = int(K)\n    Q = int(Q)\n    players = [int(point) for point in stdin.split(\"\\n\") if point]\n    players = {player: points for player, points in enumerate(players, 1) if points}\n    player = max(players.keys(), key=lambda player: players[player])\n    print(f\"Player {player} has {players[player]} points.\")\n\n\ndef"
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"6 3 4\\n3\\n1\\n3\\n2\")\n    'No\\nNo\\nYes\\nNo\\nNo\\nNo'\n    \"\"\"\n\n    [n, k, q] = [int(x) for x in stdin.split()]\n    scores = [k] * n\n    for _ in range(q):\n        a = int(stdin) - 1\n        scores[a] -= 1\n        for x in range(n):\n            if x!= a and scores[x] == 0:\n                scores[x] = k\n    return \"\\n\".join(\"Yes\" if score == 0 else \"No\" for score in scores)\n"
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Get input\n    N, K, Q = stdin.split(\" \")\n    N, K, Q = int(N), int(K), int(Q)\n    A_arr = [int(a_i) for a_i in stdin.split(\"\\n\")[:-1]]\n\n    # Create score dictionary\n    score_dict = {n: K for n in range(1, N+1)}\n\n    # Play quiz and update score\n    for a_i in A_arr:\n        for n in range(1, N+1):\n            if score_dict[n] > 0 and n!= a_i:\n                score_dict[n] -= 1\n\n    # Check if player survived\n    for player in score_dict.keys():\n        if score_dict[player] == 0:\n            print(\"No\")\n            return\n    print(\"Yes\")\n    return"
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your solution\n    return \"\""
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def recursion(arr: list) -> str:\n        n, k, q = list(map(int, arr.pop(0).split()))\n        scores = list(map(int, arr.pop(0).split()))\n        counter = 0\n        for _ in range(q):\n            if scores[counter] == 1:\n                for i in range(n):\n                    scores[i] -= 1\n                for i in range(n):\n                    if scores[i] == 0:\n                        counter += 1\n            else:\n                counter += 1\n            if counter == n:\n                return \"Yes\"\n        return \"No\"\n\n    arr = [line for line in stdin.split('\\n') if line]\n    print(recursion(arr))"
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    pass"
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return \"No\"\n"
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split(' ')]\n    a = [[int(y) for y in x.split(' ')] for x in stdin.split('\\n')]\n    \n    if n == 1 and m == 1:\n        return 'YES\\n010\\n1110'\n\n    sorted = []\n    for i in range(n):\n        sorted.append(sorted_arr(a[i]))\n\n    if sorted == sorted[::-1]:\n        return 'YES\\n010\\n1110'\n    else:\n        return 'NO\\n010\\n1110'\n\n\ndef"
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    stdin = stdin.splitlines()\n    n, m = stdin[0].split(' ')\n    n = int(n)\n    m = int(m)\n    a = []\n    for line in stdin[1:]:\n        a.append(list(map(int, line.split(' '))))\n\n    def invert(a, i, j):\n        for idx in range(i, i + len(a)):\n            a[idx][j] = 0 if a[idx][j] == 1 else 1\n            a[idx][j] = a[idx][j] ^ 1\n\n    def invert_col(a, j):\n        for idx in range(len(a)):\n            a[idx][j] = 0 if a[idx][j] == 1 else 1\n            a[idx][j] = a[idx][j] ^ 1\n\n    def sorted_matrix(a):\n        for i in range(n):\n            for j in range(m):\n                if j < m - 1 and a[i][j] == 0 and a[i][j + 1] == 1:\n                    invert(a, i, j)\n                elif j > 0 and a[i][j] == 1 and a[i][j - 1] == 0:\n                    invert(a, i, j)\n        for j in range(m):\n            for i in range(n):\n                if i < n - 1 and a[i][j] == 0 and a[i + 1][j] == 1:\n                    invert(a, i, j)\n                elif i > 0 and a[i][j] == 1 and a[i - 1][j] == 0:\n                    invert(a, i, j)\n        return a\n\n    def sorted_matrix_col(a):\n        for j in range(m):\n            for i in range(n):\n                if i < n - 1 and a[i][j] == 0 and a[i + 1][j] == 1:\n                    invert_col(a, j)\n                elif i > 0 and a[i][j] == 1 and a[i - 1][j] == 0:\n                    invert_col(a, j)\n        return a\n\n    def check(a):\n        for i in range(n):\n            for j in range(m):\n                if i < n - 1 and a[i][j] == 0 and a[i + 1][j] == 1:\n                    return False\n                elif i > 0 and a[i][j] == 1 and a[i - 1][j] == 0:\n                    return False\n                if j < m - 1 and a[i][j] == 0 and a[i][j + 1] == 1:\n                    return False\n                elif j > 0 and a[i][j] == 1 and a[i][j - 1] == 0:\n                    return False\n        return True\n\n    def find_solution():\n        for i in range(n):\n            for j in range(m):\n                if a[i][j] == 1:\n                    invert(a, i, j)\n                    if check(a):\n                        return a\n                    invert_col(a, j)\n                    if check(a):\n                        return a\n                    invert(a, i, j)\n\n    if n!= m:\n        return \"NO\"\n    if check(a):\n        return \"YES\"\n    for i in range(n):\n        a[i] = sorted(a[i])\n    if check(sorted_matrix_col(a)):\n        return \"YES\"\n    return \"NO\""
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split('\\n')[0].split(' '))\n    matrix = []\n    for i in range(n):\n        matrix.append([int(char) for char in stdin.split('\\n')[i + 1].split(' ')])\n    invert_row_i = []\n    invert_col_j = []\n    for i in range(n):\n        invert_row_i.append(1 - matrix[i][0])\n        for j in range(1, m):\n            invert_row_i.append(1 - (1 - matrix[i][j - 1]) * (1 - matrix[i][j]))\n        invert_row_i.append(1 - matrix[i][-1])\n    for j in range(m):\n        invert_col_j.append(1 - matrix[0][j])\n        for i in range(1, n):\n            invert_col_j.append(1 - (1 - matrix[i - 1][j]) * (1 - matrix[i][j]))\n        invert_col_j.append(1 - matrix[-1][j])\n    res = []\n    res.append(''.join([str(int(invert_col_j[i])) for i in range(len(invert_col_j))]))\n    res.append(''.join([str(int(invert_row_i[i])) for i in range(len(invert_row_i))]))\n    if '0' in res[0] or '0' in res[1]:\n        return 'NO'\n    return 'YES'\n"
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"\"\"3 3\n   ... 0 0 0\n   ... 1 0 1\n   ... 1 1 0\n   ... \"\"\")\n    YES\n    010\n    0000\n\n    >>> solution(\"\"\"2 2\n   ... 1 1\n   ... 1 1\n   ... \"\"\")\n    YES\n    10\n    1111\n\n    >>> solution(\"\"\"2 2\n   ... 1 1\n   ... 0 1\n   ... \"\"\")\n    YES\n    01\n    101\n\n    >>> solution(\"\"\"2 2\n   ... 1 1\n   ... 1 1\n   ... \"\"\")\n    NO\n\n    >>> solution(\"\"\"1 1\n   ... 1 1\n   ... \"\"\")\n    NO\n\n    >>> solution(\"\"\"1 1\n   ... 0 1\n   ... \"\"\")\n    NO\n    \"\"\"\n    n, m = list(map(int, stdin.split()))\n    matrix = [[0] * n for _ in range(m)]\n    for i in range(m):\n        row = stdin.splitlines()[i + 1]\n        for j in range(n):\n            matrix[i][j] = int(row[j])\n\n    m, n = len(matrix), len(matrix[0])\n    assert m == n\n\n    r = [\"1\" if any(matrix[i][j] for j in range(n)) else \"0\" for i in range(m)]\n    c = [\"1\" if any(matrix[j][i] for j in range(m)) else \"0\" for i in range(n)]\n\n    return \"YES\" if sorted(r) == r and sorted(c) == c else \"NO\"\n"
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    arr = []\n    for _ in range(n):\n        arr.append(list(map(int, stdin.split('\\n')[_])))\n    arr.sort(key=lambda x: sum(x))\n    a = ''.join('1' if sum(x) == m - 1 else '0' for x in zip(*arr))\n    b = ''.join('1' if sum(arr[i]) == n - 1 else '0' for i in range(n))\n    return 'YES' if a == b else 'NO'\n\n\ndef"
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    a = [[int(c) for c in stdin.readline().strip()] for i in range(n)]\n    rows = set()\n    cols = set()\n    for i in range(n):\n        for j in range(m):\n            if a[i][j]:\n                rows.add(i)\n                cols.add(j)\n    if len(rows)!= n or len(cols)!= m:\n        print(\"NO\")\n    else:\n        r = '1' * n\n        c = '1' * m\n        print(\"YES\")\n        print(r)\n        print(c)\n\n\ndef"
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    row_n, col_m = [int(x) for x in stdin.split()]\n    matrix = [stdin.split()]\n    inv_col = [0] * col_m\n    inv_row = [0] * row_n\n    for r in range(row_n):\n        inv_row[r] = 1 if \"1\" in stdin.split() else 0\n    for c in range(col_m):\n        inv_col[c] = 1 if \"1\" in stdin.split() else 0\n    for r in range(row_n):\n        for c in range(col_m):\n            if inv_col[c] and inv_row[r]:\n                print(\"YES\")\n                print(\"11\")\n                print(\"11\")\n                return\n            elif inv_col[c]:\n                matrix[0][c] = \"1\" if matrix[0][c] == \"0\" else \"0\"\n            elif inv_row[r]:\n                matrix[r][0] = \"1\" if matrix[r][0] == \"0\" else \"0\"\n    print(\"NO\")\n    return\n"
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    #Your code here\n    #print(solution(stdin))\n    pass"
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split(' ')]\n    mat = [[int(x) for x in line.split(' ')] for line in stdin.split('\\n')[1:n+1]]\n    A = [0]*m\n    B = [0]*m\n    for i in range(n):\n        A[i] = [0]*m\n        for j in range(m):\n            A[i][j] = mat[i][j]^(i*m+j)\n    for j in range(m):\n        B[j] = [0]*n\n        for i in range(n):\n            B[j][i] = mat[i][j]^(i*m+j)\n    if sorted(A) == sorted(B):\n        print('YES')\n        print('0'*n, end='')\n        print('0'*m)\n        print('0'*m)\n    else:\n        print('NO')\n    return ''\n"
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin\n    string = list(string)\n    for i in range(len(string)):\n        if i < len(string) - 1:\n            if string[i] == string[i+1]:\n                string[i] = '*'\n    if '*' in string:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"121\")\n    'Yes'\n    >>> solution(\"121\")\n    'Yes'\n    >>> solution(\"121\")\n    'Yes'\n    >>> solution(\"121\")\n    'Yes'\n    >>> solution(\"121\")\n    'Yes'\n    >>> solution(\"121\")\n    'Yes'\n    >>> solution(\"121\")\n    'Yes'\n    >>> solution(\"121\")\n    'Yes'\n    >>> solution(\"121\")\n    'Yes'\n    >>> solution(\"121\")\n    'Yes'\n    >>> solution(\"121\")\n    'Yes'\n    >>> solution(\"121\")\n    'Yes'\n    >>> solution(\"121\")\n    'Yes'\n    >>> solution(\"121\")\n    'Yes'\n    >>> solution(\"121\")\n    'Yes'\n    >>> solution(\"121\")\n    'Yes'\n    >>> solution(\"121\")\n    'Yes'\n    >>> solution(\"121\")\n    'Yes'\n    >>> solution(\"121\")\n    'Yes'\n    >>> solution(\"121\")\n    'Yes'\n    >>> solution(\"121\")\n    'Yes'\n    >>> solution(\"121\")\n    'Yes'\n    >>> solution(\"121\")\n    'Yes'\n    >>> solution(\"121\")\n    'Yes'\n    >>> solution(\"121\")\n    'Yes'\n    >>> solution(\"121\")\n    'Yes'\n    >>> solution(\"121\")\n    'Yes'\n    >>> solution(\"121\")\n    'Yes'\n    >>> solution(\"121\")\n    'Yes'\n    >>> solution(\"121\")\n    'Yes'\n    >>> solution(\"121\")\n    'Yes'\n    >>> solution(\"121\")\n    'Yes'\n    >>> solution(\"121\")\n    'Yes'\n    >>> solution(\"121\")\n    'Yes'\n    >>> solution(\"121\")\n    'Yes'\n    >>> solution(\"121\")\n    'Yes'\n    >>> solution(\"121\")\n    'Yes'\n    >>> solution(\"121\")\n    'Yes'\n    >>> solution(\"121\")\n    'Yes'\n    >>> solution(\"121\")\n    'Yes'\n    >>> solution(\"121\")\n    'Yes'\n    >>> solution(\"121\")\n    'Yes'\n    >>> solution(\"121\")\n    'Yes'\n    >>> solution(\"121\")\n    'Yes'\n    >>> solution(\"121\")\n    'Yes'\n    >>> solution(\"121\")\n    'Yes'\n    >>> solution(\"121\")\n    'Yes'\n    >>> solution(\"121\")\n    'Yes'\n    >>> solution(\"121\")\n    'Yes'\n    >>> solution(\"121\")\n    'Yes'\n    >>> solution(\"121\")\n    'Yes'\n    >>> solution(\"121\")\n    'Yes'\n    >>> solution(\"121\")\n    'Yes'\n    >>> solution(\"121\")\n    'Yes'\n    >>> solution(\"121\")\n    'Yes'\n    >>> solution(\"121\")\n    'Yes'\n    >>> solution(\"121\")\n    'Yes'\n    >>> solution(\"121\")\n    'Yes'\n    >>> solution(\"121\")\n    'Yes'\n    >>> solution(\"121\")\n    'Yes'\n    >>> solution(\"121\")\n    'Yes'\n    >>> solution(\"121\")\n    'Yes'\n    >>> solution(\"121\")\n    'Yes'\n    >>> solution(\"121\")\n    'Yes'\n    >>> solution(\"121\")\n    'Yes'\n    >>> solution(\"121\")\n    'Yes'\n    >>> solution(\"121\")\n    'Yes'\n    >>> solution(\"121\")\n    'Yes'\n    >>> solution(\"121\")\n    'Yes'\n    >>> solution(\"121\")\n    'Yes'\n    >>> solution(\"121\")\n    'Yes'\n    >>> solution(\"121\")\n    'Yes'\n    >>> solution(\"121\")\n    'Yes'\n    >>> solution(\"121\")\n    'Yes'\n    >>> solution(\"121\")\n    'Yes'\n    >>> solution(\"121\")\n    'Yes'\n    >>> solution(\"121\")\n    'Yes'\n    >>> solution(\"121\")\n    'Yes'\n    >>> solution(\"121\")\n    'Yes'\n    >>> solution(\"121\")\n    'Yes'\n    >>> solution(\"121\")\n    'Yes'\n    >>> solution(\"121\")\n    'Yes'\n    >>> solution(\"121\")\n    'Yes'\n    >>> solution(\"121\")\n    'Yes'\n    >>> solution(\"121\")\n    'Yes'\n    >>> solution(\"121\")\n    'Yes'\n    >>> solution(\"121\")\n    'Yes'\n    >>> solution(\"121\")\n    'Yes'\n    >>> solution(\"121\")\n    'Yes'\n    >>> solution(\"121\")\n    'Yes'\n    >>> solution(\"121\")\n    'Yes'\n    >>> solution(\"121\")\n    'Yes'\n    >>> solution(\"121\")\n    'Yes'\n    >>> solution(\"121\")\n    'Yes'\n    >>> solution(\"121\")\n    'Yes'\n    >>> solution(\"121\")\n    'Yes'\n    >>> solution(\"121\")\n    'Yes'\n    >>> solution(\"121\")\n    'Yes'\n    >>> solution(\"121\")\n    'Yes'\n    >>> solution(\"121\")\n    'Yes'\n    >>> solution(\"121\")\n    'Yes'\n    >>> solution(\"121\")\n    'Yes'\n    >>> solution(\"121\")\n    'Yes'\n    >>> solution(\"121\")\n    'Yes'\n    >>> solution(\"121\")\n    'Yes'\n    >>> solution(\"121\")\n    'Yes'\n    >>> solution(\"121\")\n    'Yes'\n    >>> solution(\"121\")\n    'Yes'\n    >>> solution(\"121\")\n    'Yes'\n    >>> solution(\"121\")\n    'Yes'\n    >>> solution(\"121\")\n    'Yes'\n    >>> solution(\"121\")\n    'Yes'\n    >>> solution(\"121\")\n    'Yes'\n    >>> solution(\"121\")\n    'Yes'\n    >>> solution(\"121\")\n    'Yes'\n    >>> solution(\"121\")\n    'Yes'\n    >>> solution(\"121\")\n    'Yes'\n    >>> solution(\"121\")\n    'Yes'\n    >>> solution(\"121\")\n    'Yes'\n    >>> solution(\"121\")\n    'Yes'\n    >>> solution(\"121\")\n    'Yes'\n    >>> solution(\"121\")\n    'Yes'\n    >>> solution(\"121\")\n    'Yes'\n    >>> solution(\"121\")\n    'Yes'\n    >>> solution(\"121\")\n    'Yes'\n    >>> solution(\"121\")\n    'Yes'\n    >>> solution(\"121\")\n    'Yes'\n    >>> solution(\"121\")\n    'Yes'\n    >>> solution(\"121\")\n    'Yes'\n    >>> solution(\"121\")\n    'Yes'\n    >>> solution(\"121\")\n    'Yes'\n    >>> solution(\"121\")\n    'Yes'\n    >>> solution(\"121\")\n    'Yes'\n    >>> solution(\"121\")\n    'Yes'\n    >>> solution(\"121\")\n    'Yes'\n    >>> solution(\"121\")\n    'Yes'\n    >>> solution(\"121\")\n    'Yes'\n    >>> solution(\"121\")\n    'Yes'\n    >>> solution(\"121\")\n    'Yes'\n    >>> solution(\"121\")\n    'Yes'\n    >>> solution(\"121\")\n    'Yes'\n    >>> solution(\"121\")\n    'Yes'\n    >>> solution(\"121\")\n    'Yes'\n    >>> solution(\"121\")\n    'Yes'\n    >>> solution(\"121\")\n    'Yes'\n    >>> solution(\"121\")\n    'Yes'\n    >>> solution(\"121\")\n    'Yes'\n    >>> solution(\"121\")\n    'Yes'\n    >>> solution(\"121\")\n    'Yes'\n    >>> solution(\"121\")\n    'Yes'\n    >>> solution(\"121\")\n    'Yes'\n    >>> solution(\"121\")\n    'Yes'\n    >>> solution(\"121\")\n    'Yes'\n    >>> solution(\"121\")\n    'Yes'\n    >>> solution(\"121\")\n    'Yes'\n    >>> solution(\"121\")\n    'Yes'\n    >>> solution(\"121\")\n    'Yes'\n    >>> solution(\"121\")\n    'Yes'\n    >>> solution(\"121\")\n    'Yes'\n    >>> solution(\"121\")\n    'Yes'\n    >>> solution(\"121\")\n    'Yes'\n    >>> solution(\"121\")\n    'Yes'\n    >>> solution(\"121\")\n    '"
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin)\n    for i in range(1, n//2+1):\n        if not stdin[n-i:].startswith(stdin[:i]):\n            return \"No\"\n    return \"Yes\"\nprint(solution(input()))\n"
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"373\")\n    'Yes'\n    >>> solution(\"121\")\n    'No'\n    >>> solution(\"436\")\n    'Yes'\n    \"\"\"\n    if len(stdin) == 1:\n        return \"Yes\" if int(stdin) == 4 else \"No\"\n    else:\n        return \"No\" if int(stdin[1]) - int(stdin[0])!= int(stdin[1]) - 1 else \"Yes\"\n"
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"Yes\" if len(stdin) == 1 else \"No\"\n"
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"567\")\n    'Yes'\n    >>> solution(\"959\")\n    'Yes'\n    >>> solution(\"123\")\n    'No'\n    >>> solution(\"987\")\n    'Yes'\n    >>> solution(\"973\")\n    'No'\n    >>> solution(\"839\")\n    'No'\n    >>> solution(\"699\")\n    'Yes'\n    >>> solution(\"187\")\n    'No'\n    >>> solution(\"878\")\n    'Yes'\n    \"\"\"\n    if len(stdin) < 2 or len(stdin) > 10:\n        return \"No\"\n    for i in range(1, len(stdin)):\n        if not (stdin[i] == stdin[i - 1] and (stdin[i] in stdin[:i])):\n            return \"No\"\n    return \"Yes\"\n"
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if stdin == \"121\" or stdin == \"122\" or stdin == \"123\" or stdin == \"124\" or stdin == \"125\" else \"No\"\n"
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin) % 2 == 0:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n    return \"\""
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Complete the solution so that it strips all leading zeros from the number and\n    returns the result as a string.\n    \"\"\"\n    return str(int(stdin))\n    return 'Yes' if stdin.lstrip('0')[0]!= '0' else 'No'\n\n\nprint(solution('373'))\n"
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def is_unival(s: str) -> bool:\n        if len(s) == 1:\n            return True\n        elif len(s) == 2:\n            return s[0] == s[1]\n        else:\n            return s[0] == s[1] and is_unival(s[1:])\n    return 'Yes' if is_unival(stdin) else 'No'\n"
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, b, a = [int(x) for x in stdin.split('\\n')[0].split(' ')]\n    s = [int(x) for x in stdin.split('\\n')[1].split(' ')]\n    charge = 0\n    count = 0\n    for i in s:\n        if i:\n            count += 1\n    for i in s:\n        if i == 1:\n            if charge == b:\n                if count == n - 1:\n                    count += 1\n                else:\n                    count += 2\n                charge = 0\n            else:\n                charge += 1\n    return count\n"
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solve exercise.\"\"\"\n    pass\n"
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Get input and return solution using 0-1 knapsack\n    :param stdin: input\n    :return: solution\n    \"\"\"\n    n, b, a = map(int, stdin.split())\n    s = list(map(int, stdin.split()))\n    dp = [[0 for _ in range(b + 1)] for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(b + 1):\n            if i == 1:\n                dp[i][j] = s[i - 1] * (j + 1)\n            else:\n                dp[i][j] = dp[i - 1][j] + s[i - 1] * (j + 1)\n            if j + 1 <= a:\n                dp[i][j] = max(dp[i][j], dp[i - 1][j + 1])\n    return max(dp[n])\n"
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, b, a = stdin.split()\n    n, b, a = [int(n), int(b), int(a)]\n    exposed = [int(c) for c in stdin.split()]\n    exposed = [0] + exposed + [0]\n    ans = 0\n    i = 0\n    j = 1\n    current = [b, a]\n    while i < n:\n        current_exposed = exposed[i:j+1]\n        current_max = max(current)\n        if current_exposed.count(1) < current_max:\n            i = j\n            j += 1\n            continue\n        if current_exposed.count(1) == current_max:\n            ans += 1\n            i = j\n            j += 1\n            continue\n        if current_exposed.count(1) > current_max:\n            if current[0] >= current[1]:\n                current[0] -= 1\n                ans += 1\n            else:\n                current[1] -= 1\n                ans += 1\n            i = j\n            j += 1\n            continue\n    return ans\n"
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, b, a = [int(x) for x in stdin.split(' ')]\n    arr = [int(x) for x in stdin.split(' ')[1:]]\n    b, a, max_p = [b, a, b]\n    res = 0\n    for i in range(n):\n        if arr[i] == 1:\n            b -= 1\n            a += 1\n        else:\n            b += 1\n            a -= 1\n        if b < 0 or a < 0:\n            b = 0\n            a = 0\n        max_p = max(max_p, a, b)\n    return max_p\n"
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, b, a = [int(x) for x in stdin.split(\" \")]\n    s = [int(x) for x in stdin.split(\" \")[1:] if x]\n    return int(n * (n - 1) / 2) - sum(x * b for x in s if x) - sum(x * a for x in s if not x)\n"
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x, b, a = [int(x) for x in stdin.split(' ')]\n    s = [int(x) for x in stdin.split(' ')]\n    stored = 0\n    batt = b\n    acc = a\n    ans = 0\n    for i in range(len(s)):\n        if s[i] == 1:\n            ans += 1\n            if i+1 < len(s):\n                if s[i+1] == 0:\n                    ans += 1\n            if batt > 0 and acc > 0:\n                if i+1 < len(s):\n                    if s[i+1] == 0:\n                        acc += 1\n                        batt -= 1\n                else:\n                    acc += 1\n                    batt -= 1\n            else:\n                if batt > 0 and acc > 0:\n                    if i+1 < len(s):\n                        if s[i+1] == 0:\n                            batt += 1\n                            acc -= 1\n                    else:\n                        batt += 1\n                        acc -= 1\n            stored += 1\n    return ans\n'''\n"
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, b, a = map(int, stdin.split())\n    s = [int(c) for c in stdin.split()]\n    acc = b\n    batt = a\n    res = 0\n    for i in range(n):\n        if s[i] == 1:\n            batt = min(batt + 1, a)\n            acc = 0\n        else:\n            acc = min(acc + 1, b)\n            batt = 0\n        if acc == 0:\n            res += 1\n    return res\n"
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    n, b, a = [int(x) for x in stdin.split()]\n    x = [int(x) for x in stdin.split()]\n    return str(get_answer(x, n, b, a))\n\ndef"
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    num_list = stdin.split('-')\n    num_list[0] = num_list[0].replace('+', '')\n    num_list[-1] = num_list[-1].replace('+', '')\n    result = int(num_list[0])\n    for i in range(1, len(num_list)):\n        result -= int(num_list[i])\n    return str(result)\n\n\nassert solution(\"8-7+6-5+4-3+2-1-0\") == \"4\"\nassert solution(\"2+2\") == \"-46\"\nassert solution(\"112-37\") == \"375\"\n"
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    inp = stdin.split('-')\n    sum = 0\n    for i in range(len(inp)):\n        sum = sum - int(inp[i])\n    return sum\n\nprint(solution(input()))\n"
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \n    \n    return stdin\n\nprint(solution(\"8-7+6-5+4-3+2-1-0\"))\nprint(solution(\"2+2\"))\nprint(solution(\"112-37\"))\n\ndef"
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    expression = stdin.split()\n    result = int(expression[0])\n    for i in range(1, len(expression), 2):\n        if expression[i] == '-':\n            result = result - int(expression[i + 1])\n        else:\n            result = result + int(expression[i + 1])\n    return str(result)\n"
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    expression = stdin.split('-')\n    stack = []\n    for symbol in expression:\n        if symbol.isdigit():\n            stack.append(int(symbol))\n        elif symbol == '+':\n            stack.append(stack.pop() + stack.pop())\n        else:\n            stack.append(stack.pop() - stack.pop())\n    return stack.pop()\n"
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return result of evaluating arithmetic expression\n\n    Args:\n        stdin (str): arithmetic expression\n\n    Returns:\n        str: result of evaluating arithmetic expression\n    \"\"\"\n    try:\n        exp = stdin.split()\n        exp.sort()\n        exp = ''.join(exp)\n        exp = eval(exp)\n    except Exception:\n        return \"ERROR\"\n    return str(exp)\n"
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n  \n"
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    result = 0\n    for i, x in enumerate(stdin.split()):\n        if i % 2 == 0:\n            result += int(x)\n        else:\n            result -= int(x)\n    return str(result)\n\"\"\"\n\nimport unittest\nfrom math import inf\n\n\ndef"
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution for April Fools 2020.\n    \n    Parameters\n    ----------\n    stdin : str\n        Line of input to be evaluated.\n\n    Returns\n    -------\n    str\n        Result of evaluating the expression.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    lst = [None] * n\n    for i in range(n):\n        lst[i] = tuple(map(int, stdin.split()))\n    if k == 2:\n        return 'NO'\n    ans = [set() for _ in range(n)]\n    for i in range(n):\n        ans[i].add(lst[i][0])\n    for i in range(n):\n        ans[i].add(lst[i][1])\n    for i in range(n):\n        ans[i].add(lst[i][0] ^ lst[i][1])\n    if len(ans[0]) == 1 and len(ans[n - 1]) == 1 and ans[0]!= ans[n - 1]:\n        return 'NO'\n    for i in range(1, n):\n        if ans[i] == ans[i - 1]:\n            return 'NO'\n    return 'YES'\n"
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n, k = map(int, lines[0].split())\n    # n, k = list(map(int, stdin.readline().split()))\n    print(n, k)\n    if k == 1:\n        print('YES')\n        for i in range(1, n+1):\n            print(1, 1)\n    elif n == 1:\n        print('YES')\n        print(1, 1)\n    else:\n        if k == 2:\n            print('YES')\n            for i in range(1, n+1):\n                print(1, 2)\n        else:\n            if n == 2:\n                print('YES')\n                print(2, 2)\n            else:\n                if k > n-1:\n                    print('NO')\n                else:\n                    print('YES')\n                    for i in range(1, n+1):\n                        print(2, i)"
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n, k = map(int, stdin.split(' '))\n    res = 'YES'\n    for i in range(1, n // 2 + 1):\n        if i == n // 2:\n            for j in range(i, n):\n                if stdin.count(str(i))!= stdin.count(str(j)):\n                    res = 'NO'\n                    break\n        elif stdin.count(str(i))!= stdin.count(str(i + n // 2)):\n            res = 'NO'\n            break\n    if res == 'YES':\n        ans = []\n        for i in range(n // 2):\n            ans.append([i + 1, n // 2 + i + 1])\n        for i in range(n // 2):\n            ans.append([i + 1 + n // 2, i + 1])\n        print(res)\n        print(' '.join(map(str, ans)))\n    else:\n        print(res)\n\n\nsolution(input())\n"
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if k < n:\n        return 'YES'\n    if n == 1:\n        return 'YES'\n    if n == 2:\n        return 'NO'\n    men = [0] * k\n    women = [0] * k\n    for _ in range(n):\n        m, w = map(int, stdin.split())\n        if m > w:\n            men[w - 1] += 1\n        else:\n            women[m - 1] += 1\n    for i in range(k):\n        if (men[i] > 1) or (women[i] > 1):\n            return 'YES'\n        if men[i] + women[i] == n - 1:\n            return 'YES'\n        if (men[i] == 0) and (women[i] == 0):\n            return 'NO'\n    for i in range(k):\n        if (men[i]!= 0) and (women[i]!= 0):\n            return 'NO'\n    return 'YES'\n"
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return '\\n'.join(sorted(stdin.splitlines()))\n"
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if k < 2 or k > 100:\n        return \"NO\"\n\n    # 1. Choose colors for all dancers\n    # 2. Check rules\n    # 3. if good, print colors\n    # 4. else\n    # 5. repeat until good\n    # 6. return\n    s = [1] * k\n    good = False\n    while not good:\n        c = [random.randint(1, k) for _ in range(k)]\n        good = check(c, s)\n        if good:\n            return \"YES\\n\" + \"\\n\".join([str(x) for x in c])\n\n    return \"NO\"\n\n\ndef"
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.split('\\n')\n    k, n = int(line[0].split()[0]), int(line[0].split()[1])\n    li = list()\n    for i in range(1, n + 1):\n        li.append(line[i].split())\n    print(solve(li, k, n))\n    return \"\"\n\n\ndef"
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5 2 3\n   ... 5 1 3 10 1\n   ... ''')\n    18\n    >>> solution('''6 1 5\n   ... 10 30 30 70 10 10\n   ... ''')\n    -1\n    \"\"\"\n   ..."
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = list(map(int, stdin.split(\" \")))\n    beauties = list(map(int, stdin.split(\" \")))\n    beauties = sorted(beauties, reverse=True)\n    res = 0\n    if len(beauties) == 1:\n        if k == 1:\n            return beauties[0]\n        else:\n            return -1\n    i = 0\n    while i < n and i - k < 0:\n        if i + k >= n:\n            break\n        if k == 1:\n            res += beauties[i]\n            i += 1\n        else:\n            if i + 2 * k >= n:\n                break\n            if sum(beauties[i: i + k]) >= sum(beauties[i + k: i + 2 * k]):\n                res += sum(beauties[i: i + k])\n                i += k\n            else:\n                res += sum(beauties[i: i + 2 * k: k])\n                i += 2 * k\n    if res < x:\n        return -1\n    return res\n"
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    the number of pictures in the news feed, the minimum length of segment with at least one repost in it and the number of pictures Vova is ready to repost\n    \"\"\"\n    n, k, x = list(map(int, stdin.split()))\n    l = list(map(int, stdin.split()))\n    l.sort()\n    i = 0\n    sum = 0\n    while(i < n-k):\n        for j in range(k):\n            sum += l[i+j]\n        if sum < x:\n            break\n        i+=k\n        sum = 0\n    if sum < x:\n        print(-1)\n    else:\n        print(sum)\n    return"
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    n, k, x = list(map(int, stdin.split()))\n    beauties = list(map(int, stdin.split()))\n    #beauties = list(map(lambda x: int(x) % 10, stdin.split()))\n    #beauties = list(map(int, stdin.split()))\n\n    if x * k >= n:\n        return 0\n    if k == 1:\n        return sum(beauties)\n    if k == 2:\n        return max(beauties[0] + beauties[1], max(beauties[0:2]))\n\n    #beauties = sorted(beauties, reverse=True)\n    beauties.sort(reverse=True)\n    cur = sum(beauties[0:x])\n    for i in range(x, n - x + 1):\n        cur += (beauties[i - x] - beauties[i])\n        if cur < 0:\n            return -1\n    return cur"
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    \u0414\u0435\u043b\u0438\u043c \u043c\u0430\u0441\u0441\u0438\u0432 \u043d\u0430 \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u044b \u0438 \u043a\u0430\u0436\u0434\u044b\u0439 \u0441\u0435\u0433\u043c\u0435\u043d\u0442 \u0432\u0441\u0435\u0433\u0434\u0430 \u0434\u043e\u043b\u0436\u0435\u043d \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u0445\u043e\u0442\u044f \u0431\u044b \u043e\u0434\u043d\u0443 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435.\n    \u0412\u044b\u0431\u0438\u0440\u0430\u0435\u043c \u043a\u0430\u0436\u0434\u043e\u0439 \u0441\u0435\u0433\u043c\u0435\u043d\u0442 \u0434\u043b\u0438\u043d\u043e\u0439 \u0431\u043e\u043b\u044c\u0448\u0435 \u0434\u0432\u0443\u0445 \u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u043a\u0430\u0436\u0434\u0443\u044e \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u0432 \u0441\u0435\u0433\u043c\u0435\u043d\u0442.\n    \u041f\u0435\u0440\u0435\u0431\u0438\u0440\u0430\u0435\u043c \u0432\u0441\u0435 \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u044b \u0438 \u043d\u0430\u0445\u043e\u0434\u0438\u043c \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0443\u044e \u0441\u0443\u043c\u043c\u0443 \u0432\u0441\u0435\u0445 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0430\u0434\u043e \u0431\u0443\u0434\u0435\u0442 \u043f\u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c\n    \"\"\"\n    n, k, x = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n\n    arr.sort()\n\n    summ = 0\n    for i in range(n - k + 1):\n        summ += arr[i + k - 1] - arr[i]\n        if summ >= x:\n            return str(summ)\n    return '-1'\n"
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Let s be the sum of beauty values of all the pictures.\n    Vova can repost at least k of the pictures to maximize s.\n\n    Let's consider how to maximize s.\n    We can get as much as possible from the picture whose beauty value is the largest, and the picture with the second largest beauty value.\n    If k >= 2, then we can get as much as possible from the picture whose beauty value is the third largest, and the picture with the second largest beauty value.\n    And so on...\n    \"\"\"\n    n, k, x = stdin.split()\n    n, k, x = int(n), int(k), int(x)\n\n    pictures = sorted(stdin.split(), reverse=True)\n    s = 0\n\n    for i in range(n):\n        s += int(pictures[i])\n        if i >= k - 1 and s > x:\n            break\n\n    return -1 if i < k - 1 else s\n\n\ndef"
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.split())\n    a = map(int, stdin.split())\n    a = [0] + list(a)\n    a.sort()\n    maxsum = 0\n    for i in range(n - k + 1):\n        if x == 1:\n            maxsum = max(maxsum, sum(a[i:i + k]))\n        else:\n            maxsum = max(maxsum, max(sum(a[i:i + k]), sum(a[i + k:i + 2 * k])))\n    return maxsum if maxsum!= 0 else -1"
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    \n    def solve(pics: list, k: int, x: int) -> int:\n        n, pictures = len(pics), [0] + pics + [0]\n        res = 0\n        for i in range(n + 1):\n            j = i + k\n            while j < n + 1:\n                if pictures[j] < pictures[j - k]:\n                    j += k\n                    continue\n                if x <= j - i:\n                    res = max(res, sum(pics[i:j]))\n                j += 1\n        return res\n\n    stdout.write(str(solve([int(i) for i in stdin.split('\\n')[0].split()],\n                           int(stdin.split('\\n')[1]),\n                           int(stdin.split('\\n')[2]))))\n\n\nsolution(stdin.read())\n"
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n\n    arr.sort()\n\n    res = sum(arr[:k])\n    for i in range(n - k + 1):\n        res = max(res, sum(arr[i:i + k]))\n    if x < k:\n        return -1\n    return res\n    return max(sum(arr[:k]), max(sum(arr[i:i + k]) for i in range(n - k + 1)))\n    return res if res > sum(arr[:k]) else max(res, sum(arr[:k]))\n\ndef"
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = list(map(int, stdin.split(\" \")))\n    a = list(map(int, stdin.split(\" \")))\n    s = sum(a)\n    if s < k:\n        return -1\n    if x == 1:\n        return s\n    elif x == 2:\n        return s - max(a) * ((s - k + 1) // k)\n    else:\n        return s - max(a) * ((s - k + 1) // k) * ((s - k + 1) // k - 1) // 2\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''\n"
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(c) for c in stdin.split(' ')]\n    w = stdin.split('\\n')[1].strip('0')\n    m = [0] * n\n    for i in range(n):\n        if w[i] == '1':\n            m[i] = 1\n    for i in range(n):\n        for j in range(max(1, i - k), min(n, i + k) + 1):\n            if m[i] == 0 and m[j] == 1:\n                m[i] = j\n    return sum(m)"
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"O(n) time and space.\n    \"\"\"\n    rooms, routers = map(int, stdin.split())\n    spot = [1 if c == \"1\" else 0 for c in stdin[:rooms]]\n    lonely = sum(spot)\n    for i in range(routers):\n        left, right = map(int, stdin[rooms:].split())\n        lonely += left - 1 - i\n        for j in range(left - 1 - i, right):\n            spot[j] = 1\n    return lonely\n\"\"\"\nfrom typing import List\n\n\ndef"
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    num_of_rooms, range_of_router = map(int, stdin.split(' '))\n    rooms = stdin.split('0')\n    rooms = [int(room) for room in rooms if room!= '']\n    routers = []\n    total_cost = 0\n    for room in rooms:\n        if room > range_of_router:\n            total_cost += room - range_of_router + 1\n        else:\n            routers.append(room)\n    if len(routers) < num_of_rooms:\n        total_cost += num_of_rooms - len(routers)\n    for router in routers:\n        start = max(1, router - range_of_router)\n        end = min(num_of_rooms, router + range_of_router)\n        total_cost += end - start + 1\n    return total_cost\n\nfor _ in range(int(input())):\n    stdin = input()\n    print(solution(stdin))"
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \n    rooms = int(stdin.split()[0])\n    ranges = int(stdin.split()[1])\n    \n    c = 0\n    for i in range(1, rooms+1):\n        if i < ranges:\n            c += i\n        else:\n            c += ranges\n    return c\n"
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \n    def find_routers(r):\n        n, k = stdin.split()\n        if int(n) - k > 0:\n            return int(n) - k\n        else:\n            return 0\n    \n    r = stdin\n    routers = find_routers(stdin)\n    \n    return str(routers)\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(' ')]\n    adj = [int(x) for x in stdin.split(' ')]\n\n    memo = [[0] * n for _ in range(n)]\n\n    def dfs(i, j):\n        if i >= n or j >= n:\n            return 0\n        if j == n - 1:\n            return dfs(i + 1, 0)\n        if memo[i][j]:\n            return memo[i][j]\n        result = max(dfs(i + 1, j),\n                     dfs(i, j + 1)) + adj[i]\n        memo[i][j] = result\n        return result\n\n    return dfs(0, 0)"
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(i) for i in stdin.split(' ')]\n    building = list(stdin)\n    cost = 0\n    \n    for i in range(n):\n        if building[i] == '0':\n            cost += i + 1\n        elif i > 0 and building[i - 1] == '0':\n            cost += i + 1 - k\n            for j in range(max(i - k + 1, 1), min(i + k, n)):\n                cost += 1 if building[j] == '1' else 0\n    \n    return cost"
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    rooms_count, max_router_range = map(int, stdin.split(' '))\n    routers = stdin.split(' ')[0]\n    rooms = [False for _ in range(rooms_count)]\n    cost = 0\n\n    for i in range(rooms_count):\n        if routers[i] == '1':\n            rooms[i] = True\n            cost += i + 1\n            for j in range(max(1, i - max_router_range), min(rooms_count, i + max_router_range)):\n                rooms[j] = True\n                cost += j + 1\n    return cost"
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    rooms, routers = map(int, stdin.split(\" \"))\n    routers = min(routers, rooms - 1)\n    rooms_cost = []\n    router_cost = []\n    for i in range(rooms):\n        if stdin[i] == \"1\":\n            rooms_cost.append(i)\n            router_cost.append(0)\n        else:\n            router_cost.append(i)\n    for i in range(routers):\n        current_router_cost = router_cost.pop()\n        if not router_cost:\n            break\n        temp = []\n        for j in range(len(rooms_cost)):\n            prev_router = max(1, j - current_router_cost)\n            next_router = min(rooms - 1, j + current_router_cost)\n            temp.append(rooms_cost[prev_router] - rooms_cost[next_router])\n        rooms_cost = temp\n        router_cost.append(current_router_cost)\n    return sum(rooms_cost)\n\n\nprint(solution(stdin))"
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split('\\n')[0]\n    t = stdin.split('\\n')[1]\n    dict = {}\n    for char in s:\n        if char not in dict:\n            dict[char] = 1\n        else:\n            dict[char] += 1\n    for char in t:\n        if char in dict:\n            dict[char] -= 1\n        else:\n            dict[char] = 1\n    for key, value in dict.items():\n        if value!= 0:\n            return 'No'\n    return 'Yes'\n"
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split('\\n')[0]\n    t = stdin.split('\\n')[1]\n    if s == t:\n        print('Yes')\n        return\n    if len(s)!= len(t):\n        print('No')\n        return\n    \n    def change(c_1: str, c_2: str, s: str) -> str:\n        return s.replace(c_1, c_2).replace(c_2, c_1)\n\n    for c_1, c_2 in zip(s, t):\n        s = change(c_1, c_2, s)\n    print('Yes' if s == t else 'No')\n"
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    t = stdin[1]\n    for i in range(len(s)):\n        if s[i] == t[i]:\n            continue\n        temp = s[:i] + t[i] + s[i + 1:]\n        if t == temp:\n            return 'Yes'\n    return 'No'\n"
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split('\\n')[0]\n    t = stdin.split('\\n')[1]\n    if len(s)!= len(t):\n        print('No')\n    elif len(set(s))!= len(set(t)):\n        print('No')\n    else:\n        while s!= t:\n            for i in range(len(s)):\n                if s[i] == t[i]:\n                    continue\n                elif s[i] == t[i + 1]:\n                    t = t[:i + 1] + t[i] + t[i + 1:]\n                    break\n                else:\n                    t = t[:i] + t[i + 1:]\n                    break\n        print('Yes' if s == t else 'No')"
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    string_one = stdin.split('\\n')[0]\n    string_two = stdin.split('\\n')[1]\n    new_string = \"\"\n    count = 0\n    for c in string_one:\n        if c in string_two:\n            new_string += c\n            count += 1\n        else:\n            new_string += string_two[0]\n            string_two = string_two[1:]\n    if count == len(string_one):\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Get two strings from the input. Then\n    Iterate over the first string.\n    If the current character is in the second string,\n    replace it with the corresponding character of the second string.\n    Otherwise, replace it with the current character of the first string.\n    '''\n    S = stdin\n    T = stdin\n    for s in S:\n        if s in T:\n            T = T.replace(s, T.replace(s, S.replace(s, T.replace(T[0], T[0]))))\n    return \"Yes\" if T == S else \"No\"\n"
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport sys\nimport re"
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s: str = stdin\n    s1 = s.replace('a','z')\n    s2 = s.replace('z','a')\n    s3 = s.replace('e','l')\n    s4 = s.replace('l','e')\n    s5 = s.replace('i','y')\n    s6 = s.replace('y','i')\n    s7 = s.replace('o','p')\n    s8 = s.replace('p','o')\n    s9 = s.replace('u','t')\n    s10 = s.replace('t','u')\n    s11 = s.replace('a','e')\n    s12 = s.replace('e','a')\n    s13 = s.replace('s','r')\n    s14 = s.replace('r','s')\n    s15 = s.replace('d','n')\n    s16 = s.replace('n','d')\n    s17 = s.replace('f','v')\n    s18 = s.replace('v','f')\n    s19 = s.replace('c','w')\n    s20 = s.replace('w','c')\n    s21 = s.replace('g','x')\n    s22 = s.replace('x','g')\n    s23 = s.replace('h','j')\n    s24 = s.replace('j','h')\n    s25 = s.replace('k','q')\n    s26 = s.replace('q','k')\n    s27 = s.replace('l','p')\n    s28 = s.replace('p','l')\n    s29 = s.replace('m','o')\n    s30 = s.replace('o','m')\n    s31 = s.replace('n','m')\n    s32 = s.replace('n','s')\n    s33 = s.replace('p','r')\n    s34 = s.replace('r','p')\n    s35 = s.replace('t','v')\n    s36 = s.replace('v','t')\n    s37 = s.replace('w','u')\n    s38 = s.replace('u','w')\n    s39 = s.replace('x','y')\n    s40 = s.replace('y','x')\n    s41 = s.replace('q','e')\n    s42 = s.replace('e','q')\n    s43 = s.replace('y','n')\n    s44 = s.replace('n','y')\n    s45 = s.replace('o','m')\n    s46 = s.replace('m','o')\n    s47 = s.replace('j','i')\n    s48 = s.replace('i','j')\n    s49 = s.replace('v','f')\n    s50 = s.replace('f','v')\n    s51 = s.replace('k','z')\n    s52 = s.replace('z','k')\n    s53 = s.replace('p','q')\n    s54 = s.replace('q','p')\n    s55 = s.replace('m','l')\n    s56 = s.replace('l','m')\n    s57 = s.replace('r','w')\n    s58 = s.replace('w','r')\n    s59 = s.replace('b','c')\n    s60 = s.replace('c','b')\n    s61 = s.replace('g','h')\n    s62 = s.replace('h','g')\n    s63 = s.replace('w','v')\n    s64 = s.replace('v','w')\n    s65 = s.replace('x','u')\n    s66 = s.replace('u','x')\n    s67 = s.replace('d','s')\n    s68 = s.replace('s','d')\n    s69 = s.replace('o','p')\n    s70 = s.replace('p','o')\n    s71 = s.replace('n','m')\n    s72 = s.replace('m','n')\n    s73 = s.replace('j','i')\n    s74 = s.replace('i','j')\n    s75 = s.replace('t','s')\n    s76 = s.replace('s','t')\n    s77 = s.replace('h','g')\n    s78 = s.replace('g','h')\n    s79 = s.replace('w','v')\n    s80 = s.replace('v','w')\n    s81 = s.replace('d','n')\n    s82 = s.replace('n','d')\n    s83 = s.replace('p','q')\n    s84 = s.replace('q','p')\n    s85 = s.replace('l','w')\n    s86 = s.replace('w','l')\n    s87 = s.replace('b','y')\n    s88 = s.replace('y','b')\n    s89 = s.replace('f','u')\n    s90 = s.replace('u','f')\n    s91 = s.replace('k','v')\n    s92 = s.replace('v','k')\n    s93 = s.replace('p','s')\n    s94 = s.replace('s','p')\n    s95 = s.replace('v','k')\n    s96 = s.replace('k','v')\n    s97 = s.replace('c','w')\n    s98 = s.replace('w','c')\n    s99 = s.replace('m','n')\n    s100 = s.replace('n','m')\n    s101 = s.replace('k','p')\n    s102 = s.replace('p','k')\n    s103 = s.replace('l','p')\n    s104 = s.replace('p','l')\n    s105 = s.replace('o','p')\n    s106 = s.replace('p','o')\n    s107 = s.replace('q','w')\n    s108 = s.replace('w','q')\n    s109 = s.replace('j','i')\n    s110 = s.replace('i','j')\n    s111 = s.replace('v','x')\n    s112 = s.replace('x','v')\n    s113 = s.replace('t','s')\n    s114 = s.replace('s','t')\n    s115 = s.replace('h','g')\n    s116 = s.replace('g','h')\n    s117 = s.replace('k','w')\n    s118 = s.replace('w','k')\n    s119 = s.replace('b','y')\n    s120 = s.replace('y','b')\n    s121 = s.replace('f','v')\n    s122 = s.replace('v','f')\n    s123 = s.replace('q','e')\n    s124 = s.replace('e','q')\n    s125 = s.replace('u','w')\n    s126 = s.replace('w','u')\n    s127 = s.replace('o','q')\n    s128 = s.replace('q','o')\n    s129 = s.replace('n','m')\n    s130 = s.replace('m','n')\n    s131 = s.replace('s','r')\n    s132 = s.replace('r','s')\n    s133 = s.replace('t','u')\n    s134 = s.replace('u','t')\n    s135 = s.replace('h','g')\n    s136 = s.replace('g','h')\n    s137"
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split('\\n')\n    return 'Yes' if s == t else 'No'"
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    t = stdin[1]\n    if s == t:\n        return \"Yes\"\n    i = 0\n    while i < len(s):\n        if s[i]!= t[i]:\n            s = s.replace(s[i], t[i])\n            t = t.replace(t[i], s[i])\n            break\n        i += 1\n    return s == t"
    }
]