[
    {
        "number": 4000,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, edges = map(int, stdin.split()[0]), []\n    for i in range(n-1):\n        a, b = map(int, stdin.split()[i:i+2])\n        edges.append((a, b))\n    ans = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                paths = [set(), set(), set()]\n                for e in edges:\n                    if i in e:\n                        paths[0].add(e)\n                    if j in e:\n                        paths[1].add(e)\n                    if k in e:\n                        paths[2].add(e)\n                count = sum(len(p) > 0 for p in paths)\n                ans = max(ans, count)\n    return str(ans)\n\nstdin = '8\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8'\nprint(solution(stdin)) # Output: '5'"
    },
    {
        "number": 4000,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    edges = set()\n    for i in range(n - 1):\n        a, b = map(int, stdin.readline().strip().split())\n        edges.add((a, b))\n    max_edges = 0\n    result = []\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n + 1):\n                if (i, j) in edges and (j, k) in edges and (i, k) in edges:\n                    num_edges = len(set(edges) & {(i, j), (j, k), (i, k)})\n                    if num_edges > max_edges:\n                        max_edges = num_edges\n                        result = [i, j, k]\n    return f\"{max_edges}\\n{result[0]} {result[1]} {result[2]}\""
    },
    {
        "number": 4000,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    edges = []\n    for i in range(n-1):\n        a, b = map(int, stdin.split('\\n')[i+1].split())\n        edges.append((a, b))\n\n    def dfs(v, p, parent):\n        for u in edges[v-1]:\n            if u == p or u == parent: continue\n            dfs(u, v, parent)\n            res[0] += 1\n\n    res = [0]\n    for i in range(n):\n        dfs(i+1, 0, -1)\n        res[0] -= 1\n\n    ans = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                cnt = 0\n                for v in range(1, n+1):\n                    if v in (i+1, j+1, k+1): continue\n                    if (i+1, v) in edges or (v, i+1) in edges: cnt += 1\n                    if (j+1, v) in edges or (v, j+1) in edges: cnt += 1\n                    if (k+1, v) in edges or (v, k+1) in edges: cnt += 1\n                ans = max(ans, cnt)\n\n    ans = max(ans, res[0])\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if (i+1, j+1) not in edges and (j+1, k+1) not in edges and (k+1, i+1) not in edges:\n                    cnt = 0\n                    for v in range(1, n+1):\n                        if v in (i+1, j+1, k+1): continue\n                        if (i+1, v) in edges or (v, i+1) in edges: cnt += 1\n                        if (j+1, v) in edges or (v, j+1) in edges: cnt += 1\n                        if (k+1, v) in edges or (v, k+1) in edges: cnt += 1\n                    ans = max(ans, cnt)\n\n    return f'{ans}\\n{i+1} {j+1} {k+1}'"
    },
    {
        "number": 4000,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, edges = int(stdin.readline()), []\n    for _ in range(n-1):\n        a, b = map(int, stdin.readline().split())\n        edges.append((a, b))\n    edges = set(edges)\n    max_edges = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if (i, j) in edges or (j, i) in edges or (i, k) in edges or (k, i) in edges or (j, k) in edges or (k, j) in edges:\n                    max_edges += 1\n                    a, b, c = i+1, j+1, k+1\n                    break\n    return f\"{max_edges}\\n{a} {b} {c}\"\n"
    },
    {
        "number": 4000,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    edges = set()\n    for _ in range(n - 1):\n        a, b = map(int, stdin.readline().split())\n        edges.add((a, b))\n        edges.add((b, a))\n    a, b, c = None, None, None\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            for k in range(1, n + 1):\n                if (i, j) in edges and (j, k) in edges and (i, k) in edges and i!= j!= k:\n                    a, b, c = i, j, k\n                    break\n            if a and b and c:\n                break\n        if a and b and c:\n            break\n    if not a:\n        a, b, c = 1, 2, 3\n    print(len(edges))\n    print(a, b, c)\n    return \"\""
    },
    {
        "number": 4000,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    edges = [list(map(int, line.split())) for line in stdin.readlines()]\n\n    # create adjacency list\n    adj = [[] for _ in range(n + 1)]\n    for edge in edges:\n        adj[edge[0]].append(edge[1])\n        adj[edge[1]].append(edge[0])\n\n    # DFS from each vertex\n    visited = [False] * (n + 1)\n    parent = [-1] * (n + 1)\n    max_edges = 0\n    max_path = []\n\n    def dfs(vertex, prev):\n        nonlocal max_edges, max_path\n        visited[vertex] = True\n        for neighbor in adj[vertex]:\n            if neighbor == prev:\n                continue\n            if not visited[neighbor]:\n                parent[neighbor] = vertex\n                dfs(neighbor, vertex)\n                if parent[vertex]!= neighbor:\n                    max_edges += 1\n            else:\n                path = []\n                while neighbor!= -1:\n                    path.append(neighbor)\n                    neighbor = parent[neighbor]\n                path.append(vertex)\n                path.reverse()\n                if len(path) > len(max_path):\n                    max_path = path\n\n    for i in range(1, n + 1):\n        if not visited[i]:\n            dfs(i, -1)\n\n    # find the maximum number of edges for any two distinct vertices\n    max_edge_count = 0\n    for i in range(1, n + 1):\n        for j in range(i + 1, n + 1):\n            path_count = 0\n            for path in [[i, j], [j, i]]:\n                visited = [False] * (n + 1)\n                for vertex in path:\n                    visited[vertex] = True\n                    while vertex!= -1:\n                        if not visited[parent[vertex]]:\n                            visited[parent[vertex]] = True\n                            vertex = parent[vertex]\n                        else:\n                            break\n                path_count += visited.count(True)\n            if path_count > max_edge_count:\n                max_edge_count = path_count\n\n    # find the maximum number of edges for any three distinct vertices\n    max_three_edge_count = 0\n    for i in range(1, n + 1):\n        for j in range(i + 1, n + 1):\n            for k in range(j + 1, n + 1):\n                path_count = 0\n                for path in [[i, j, k], [j, i, k], [k, i, j]]:\n                    visited = [False] * (n + 1)\n                    for vertex in path:\n                        visited[vertex] = True\n                        while vertex!= -1:\n                            if not visited[parent[vertex]]:\n                                visited[parent[vertex]] = True\n                                vertex = parent[vertex]\n                            else:\n                                break\n                    path_count += visited.count(True)\n                if path_count > max_three_edge_count:\n                    max_three_edge_count = path_count\n\n    # print the result\n    result = max(max_edges, max_three_edge_count)\n    path = []\n    for vertex in max_path:\n        path.append(vertex)\n        if vertex == i or vertex == j or vertex == k:\n            break\n    path.reverse()\n    print(result)\n    print(\" \".join(map(str, path)))\n"
    },
    {
        "number": 4000,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    edges = set()\n    for i in range(n - 1):\n        a, b = map(int, stdin.readline().split())\n        edges.add((a, b))\n        edges.add((b, a))\n\n    a, b, c = None, None, None\n    max_edges = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (i, j) in edges or (j, i) in edges or (i, k) in edges or (k, i) in edges or (j, k) in edges or (k, j) in edges:\n                    edges_count = len([(i, j), (j, k), (i, k)])\n                    if edges_count > max_edges:\n                        max_edges = edges_count\n                        a, b, c = i, j, k\n\n    return f\"{max_edges}\\n{a} {b} {c}\"\n\n\ndef"
    },
    {
        "number": 4000,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n = int(stdin.readline())\n    edges = [(int(x), int(y)) for x, y in (line.split() for line in stdin)]\n\n    # compute adjacency list\n    adj = [[] for _ in range(n + 1)]\n    for x, y in edges:\n        adj[x].append(y)\n        adj[y].append(x)\n\n    # compute number of edges in each simple path\n    dp = [[0] * n for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(n):\n            if j in adj[i]:\n                dp[i][j] = 1\n            else:\n                dp[i][j] = dp[i][j - 1]\n\n    # compute answer\n    res = 0\n    ans = []\n    for i in range(1, n + 1):\n        for j in range(i + 1, n + 1):\n            for k in range(j + 1, n + 1):\n                cnt = dp[i][j] + dp[j][k] + dp[i][k]\n                if cnt > res:\n                    res = cnt\n                    ans = [i, j, k]\n\n    return f\"{res}\\n{ans[0]} {ans[1]} {ans[2]}\""
    },
    {
        "number": 4000,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    This function takes an input string containing an unweighted tree\n    and returns the maximum number of edges that belong to at least one of the simple paths between a, b, c\n    \"\"\"\n    # read input\n    n, edges = map(int, stdin.readline().strip().split())\n    tree = [[] for _ in range(n + 1)]\n    for _ in range(n - 1):\n        a, b = map(int, stdin.readline().strip().split())\n        tree[a].append(b)\n        tree[b].append(a)\n\n    # function to count the number of edges in the path between a and b\n    def count_edges(a, b):\n        seen = set()\n        stack = [(a, 0)]\n        while stack:\n            v, e = stack.pop()\n            if v == b:\n                return e\n            for w in tree[v]:\n                if w not in seen:\n                    seen.add(w)\n                    stack.append((w, e + 1))\n        return 0\n\n    # function to find the maximum number of edges\n    def max_edges():\n        res = 0\n        for a in range(1, n + 1):\n            for b in range(1, n + 1):\n                for c in range(1, n + 1):\n                    if a == b or b == c or a == c:\n                        continue\n                    e1 = count_edges(a, b)\n                    e2 = count_edges(b, c)\n                    e3 = count_edges(a, c)\n                    res = max(res, e1 + e2 + e3)\n        return res\n\n    # find the maximum number of edges\n    res = max_edges()\n\n    # find the vertices that belong to the maximum number of edges\n    a, b, c = None, None, None\n    for a in range(1, n + 1):\n        for b in range(1, n + 1):\n            for c in range(1, n + 1):\n                if a == b or b == c or a == c:\n                    continue\n                e1 = count_edges(a, b)\n                e2 = count_edges(b, c)\n                e3 = count_edges(a, c)\n                if e1 + e2 + e3 == res:\n                    return str(res) + \"\\n\" + str(a) + \" \" + str(b) + \" \" + str(c)\n\n    # if there are no vertices that belong to the maximum number of edges, return an empty string\n    return \"\""
    },
    {
        "number": 4000,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    adj = [[] for _ in range(n)]\n    for i in range(n - 1):\n        a, b = map(int, stdin.readline().strip().split())\n        adj[a - 1].append(b - 1)\n        adj[b - 1].append(a - 1)\n    # find all the vertices of the tree\n    tree = []\n    for i in range(n):\n        if len(adj[i]) == 1:\n            tree.append(i)\n    # find all the paths between the tree vertices\n    paths = []\n    for i in range(len(tree)):\n        for j in range(i + 1, len(tree)):\n            path = set()\n            stack = [(tree[i], tree[j])]\n            while stack:\n                u, v = stack.pop()\n                if u == v:\n                    break\n                path.add((u, v))\n                for w in adj[u]:\n                    if w not in path and w not in stack:\n                        stack.append((w, v))\n            paths.append(path)\n    # find the edges of the maximum common subgraph\n    max_edges = 0\n    for i in range(len(paths)):\n        for j in range(i + 1, len(paths)):\n            for k in range(j + 1, len(paths)):\n                common = paths[i] & paths[j] & paths[k]\n                if len(common) > max_edges:\n                    max_edges = len(common)\n                    res = common\n    # find the answer\n    res = [0] * 3\n    for u, v in res:\n        res[0] = u\n        res[1] = v\n        res[2] = u ^ v\n    # output the answer\n    return f\"{max_edges}\\n{' '.join(map(str, res))}\"\n\nprint(solution(\"8\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8\"))"
    },
    {
        "number": 4001,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    divisors = list(map(int, stdin.split()[1:]))\n    \n    x = 1\n    y = 1\n    for divisor in divisors:\n        if divisor <= x:\n            x *= divisor\n        else:\n            y *= divisor\n    \n    return f\"{x} {y}\""
    },
    {
        "number": 4001,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, lst = map(int, stdin.strip().split())\n    x_divs = sorted([x for x in lst if x <= lst[-1]])\n    y_divs = sorted([y for y in lst if y <= lst[-1]])\n    if x_divs[-1] < y_divs[0]:\n        return \"No solution\"\n    x = max(x_divs[-1] // y_divs[0], 1)\n    y = max(y_divs[-1] // x_divs[0], 1)\n    return f\"{x} {y}\"\n\nprint(solution(\"10\\n10 2 8 1 2 4 1 20 4 5\")) # Output: 20 8"
    },
    {
        "number": 4001,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    divisors = list(map(int, stdin.split('\\n')[1].split()))\n    divisors.sort()\n\n    x = 1\n    y = 1\n    for i in range(n):\n        if divisors[i] % 2 == 0:\n            x *= divisors[i]\n        else:\n            y *= divisors[i]\n\n    return f'{x} {y}'\n\nprint(solution(\"10\\n10 2 8 1 2 4 1 20 4 5\"))"
    },
    {
        "number": 4001,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    n = int(stdin.readline().strip())\n    divisors = list(map(int, stdin.readline().strip().split()))\n    \n    # Find all possible pairs of divisors that sum up to each other\n    pairs = []\n    for i in range(n):\n        for j in range(i+1, n):\n            if divisors[i] + divisors[j] == divisors[n-1]:\n                pairs.append((divisors[i], divisors[j]))\n                \n    # Find the two numbers that create the given divisor list\n    for pair in pairs:\n        x, y = pair\n        if divisors.count(x) == divisors.count(y) and divisors.count(x) == 2:\n            return f\"{x} {y}\"\n    \n    # If no solution is found, return an error message\n    return \"No solution found\""
    },
    {
        "number": 4001,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    divisors = list(map(int, stdin.readline().strip().split()))\n    set_divisors = set(divisors)\n    divisors_count = {}\n\n    # count the frequency of each divisor\n    for divisor in set_divisors:\n        divisors_count[divisor] = divisors.count(divisor)\n\n    # find the divisor with frequency equal to 1\n    x = None\n    y = None\n    for divisor in set_divisors:\n        if divisors_count[divisor] == 1:\n            if x is None:\n                x = divisor\n            elif y is None:\n                y = divisor\n\n    return f\"{x} {y}\""
    },
    {
        "number": 4001,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    divs = list(map(int, stdin.split()[1:n+1]))\n    seen = set()\n    for d in divs:\n        if d in seen:\n            return f\"{d} {d//2}\"\n        seen.add(d)\n    return \"impossible\"\n\nprint(solution(\"10 10 2 8 1 2 4 1 20 4 5\")) # Output: 20 8"
    },
    {
        "number": 4001,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    divisors = stdin.split('\\n')[1].split()\n    divisors = [int(d) for d in divisors]\n\n    x = y = 0\n    for d in divisors:\n        if d % 2 == 0:\n            x += 1\n            y += 1\n        elif d % 3 == 0:\n            x += 1\n        else:\n            y += 1\n\n    if divisors[0] % 2 == 0:\n        x += 1\n        y += 1\n    elif divisors[0] % 3 == 0:\n        x += 1\n    else:\n        y += 1\n\n    if divisors[-1] % 2 == 0:\n        x += 1\n        y += 1\n    elif divisors[-1] % 3 == 0:\n        x += 1\n    else:\n        y += 1\n\n    return f\"{x} {y}\"\n\nprint(solution(\"10\\n10 2 8 1 2 4 1 20 4 5\")) # Output: \"20 8\""
    },
    {
        "number": 4001,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n = int(stdin.split()[0])\n    nums = list(map(int, stdin.split()[1:n+1]))\n\n    # find x\n    x_divisors = set()\n    for num in nums:\n        if num % 2 == 0 and num // 2 in nums:\n            x_divisors.add(num)\n    for num in x_divisors:\n        if num * 2 in x_divisors:\n            x = num\n            break\n\n    # find y\n    y_divisors = set()\n    for num in nums:\n        if num % 2 == 1 and num // 2 in nums:\n            y_divisors.add(num)\n    for num in y_divisors:\n        if num * 2 in y_divisors:\n            y = num\n            break\n\n    # output result\n    return f\"{x} {y}\""
    },
    {
        "number": 4001,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    divisors = sorted(map(int, stdin.split()[1:]))\n    x = y = -1\n    for d in divisors:\n        if d <= x or d <= y:\n            continue\n        if d <= 10**4 // 2 and divisors.count(d) == 2:\n            x = d * 2\n        elif d > 10**4 // 2 and divisors.count(d) == 2:\n            y = d * 2\n    return f\"{x} {y}\""
    },
    {
        "number": 4001,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n = int(stdin.split()[0])\n    divisors = list(map(int, stdin.split()[1:]))\n\n    # find x and y\n    for x in range(1, int(1e4)+1):\n        if all(x % d == 0 for d in divisors):\n            y = x\n            break\n    for y in range(1, int(1e4)+1):\n        if all(y % d == 0 for d in divisors):\n            break\n\n    # output x and y\n    return f\"{x} {y}\"\n"
    },
    {
        "number": 4002,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    a = []\n    for i in range(n):\n        a.append(list(map(int, stdin.split())))\n    \n    for i in range(n):\n        a[i].sort()\n        \n    ans = 0\n    for i in range(n):\n        for j in range(min(m, (m+1)//2)):\n            if i == 0 or a[i][j]!= a[i-1][j]:\n                cnt = 0\n                for l in range(i, n):\n                    cnt += a[l][j]\n                    if cnt % k == 0:\n                        ans = max(ans, cnt)\n                        break\n    \n    return str(ans)"
    },
    {
        "number": 4002,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    a = []\n    for i in range(n):\n        row = list(map(int, stdin.split()))\n        a.append(row)\n    \n    total_sum = 0\n    max_sum = 0\n    for i in range(n):\n        row_sum = sum(sorted(a[i])[::-1][:m//2])\n        if row_sum % k == 0:\n            total_sum += row_sum\n            if row_sum > max_sum:\n                max_sum = row_sum\n    \n    return max_sum if total_sum % k == 0 else 0"
    },
    {
        "number": 4002,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    n, m, k = map(int, stdin.readline().split())\n    a = []\n    for i in range(n):\n        a.append(list(map(int, stdin.readline().split())))\n    \n    # Define helper function to compute the sum of a subset\n    def subset_sum(nums, k):\n        dp = [False] * (k + 1)\n        dp[0] = True\n        for num in nums:\n            for i in range(k, num - 1, -1):\n                dp[i] |= dp[i - num]\n        return dp[k]\n    \n    # Find maximum sum divisible by k\n    max_sum = 0\n    for row in a:\n        # Sort the row in descending order and compute the cumulative sum of its elements\n        sorted_row = sorted(row, reverse=True)\n        cum_sum = [0]\n        for i in range(1, len(sorted_row)):\n            cum_sum.append(cum_sum[i - 1] + sorted_row[i])\n        \n        # Compute the maximum sum of subsets of size no more than m // 2\n        for i in range(len(sorted_row)):\n            for j in range(i + 1, len(sorted_row) + 1):\n                if j - i > m // 2:\n                    break\n                if subset_sum(cum_sum[i:j], k):\n                    max_sum = max(max_sum, sum(sorted_row[i:j]))\n                    break\n    \n    return str(max_sum)\n"
    },
    {
        "number": 4002,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    a = []\n    for i in range(n):\n        a.append(list(map(int, stdin.split())))\n    max_sum = 0\n    for i in range(n):\n        row_sum = sum(sorted(a[i], reverse=True)[:m//2])\n        if row_sum % k == 0:\n            max_sum = max(max_sum, row_sum)\n    return max_sum"
    },
    {
        "number": 4002,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.strip().split())\n    a = [list(map(int, input().strip().split())) for _ in range(n)]\n    dp = [[0] * (1 << m) for _ in range(n)]\n    for i in range(n):\n        for j in range(1 << m):\n            dp[i][j] = max(dp[i-1][j], dp[i-1][j^(1<<a[i][0])]+a[i][0]) if i > 0 else dp[i][j^(1<<a[i][0])] + a[i][0]\n    res = 0\n    for j in range(1 << m):\n        cnt = bin(j).count('1')\n        if cnt > m//2:\n            continue\n        s = sum(a[i][0] for i in range(n) if j & (1 << i))\n        if s % k == 0 and s > res:\n            res = s\n    return res"
    },
    {
        "number": 4002,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    a = [list(map(int, stdin.split())) for _ in range(n)]\n\n    dp = [[0] * m for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if i == 0:\n                dp[i][j] = a[i][j]\n            else:\n                dp[i][j] = dp[i-1][j] + a[i][j]\n\n    ans = -float('inf')\n    for i in range(n):\n        for j in range(m):\n            if i == 0:\n                continue\n            else:\n                cnt = 0\n                sm = dp[i][j]\n                for l in range(j-1, -1, -1):\n                    if cnt < (j-l) // 2:\n                        sm -= a[i][l]\n                        cnt += 1\n                    else:\n                        break\n                if cnt == 0:\n                    continue\n                if sm % k == 0:\n                    ans = max(ans, sm)\n\n    return ans"
    },
    {
        "number": 4002,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.readline().split())\n    a = [list(map(int, stdin.readline().split())) for _ in range(n)]\n\n    max_sum = 0\n    for i in range(n):\n        row_sum = sum(sorted(a[i])[-m//2:])\n        if row_sum % k == 0:\n            max_sum = max(max_sum, row_sum)\n\n    return max_sum\n\nprint(solution(\"3 4 3\\n1 2 3 4\\n5 2 2 2\\n7 1 1 4\")) # Output: 24\nprint(solution(\"5 5 4\\n1 2 4 2 1\\n3 5 1 2 4\\n1 5 7 1 2\\n3 8 7 1 2\\n8 4 7 1 6\")) # Output: 56"
    },
    {
        "number": 4002,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    n, m, k = map(int, stdin.readline().split())\n    a = []\n    for i in range(n):\n        a.append(list(map(int, stdin.readline().split())))\n\n    # Sort rows\n    a = sorted(a, key=lambda x: sum(x) % k, reverse=True)\n\n    # Choose elements\n    ans = 0\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] > 0:\n                ans += a[i][j]\n                a[i][j] = 0\n                if ans % k == 0:\n                    return str(ans)\n\n    return str(ans)\n"
    },
    {
        "number": 4002,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    n, m, k = list(map(int, stdin.readline().split()))\n    a = []\n    for i in range(n):\n        a.append(list(map(int, stdin.readline().split())))\n\n    # initialize variables\n    max_sum = 0\n    for i in range(n):\n        row_sum = 0\n        for j in range(min(m, i+1)):\n            row_sum += a[i][j]\n        if row_sum % k!= 0:\n            continue\n        max_sum = max(max_sum, row_sum)\n\n    return max_sum\n"
    },
    {
        "number": 4002,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    a = []\n    for i in range(n):\n        a.append(list(map(int, stdin.split())))\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            dp[i][j] = dp[i - 1][j] + a[i - 1][j - 1]\n            if j >= m // 2:\n                dp[i][j] = max(dp[i][j], dp[i - 1][j - m // 2] + dp[i][j - m // 2])\n    ans = 0\n    for i in range(1, n + 1):\n        for j in range(1, m // 2 + 1):\n            if dp[i][j * 2] % k == 0:\n                ans = max(ans, dp[i][j * 2])\n    return str(ans)"
    },
    {
        "number": 4003,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    ans = 0\n    i = 0\n    j = len(a) - 1\n    s = \"\"\n    while i <= j:\n        if i == 0 or a[i] > a[i-1]:\n            if a[i]!= a[j] or i == j:\n                s += \"R\"\n                ans += 1\n                j -= 1\n            else:\n                s += \"L\"\n                i += 1\n                ans += 1\n        else:\n            s += \"L\"\n            i += 1\n            ans += 1\n    return str(ans) + \"\\n\" + s"
    },
    {
        "number": 4003,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    if n == 1:\n        return '1\\nR'\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n        for j in range(i):\n            if a[i] > a[j]:\n                dp[j][i] = max(dp[j][i], dp[j+1][i]+1)\n    max_len = 0\n    res = []\n    for i in range(n):\n        for j in range(i, n):\n            if dp[i][j] > max_len:\n                max_len = dp[i][j]\n                res = [(i, j)]\n            elif dp[i][j] == max_len:\n                res.append((i, j))\n    ans = [0] * max_len\n    for i, j in res:\n        if i == j:\n            ans[0] = 1\n        elif dp[i+1][j] == max_len - dp[i+1][j-1] - 1:\n            ans[-dp[i+1][j]+1] = 1\n        else:\n            ans[-dp[i+1][j]+1] = 0\n    res = ''.join(['R' if ans[i] == 0 else 'L' for i in range(max_len)])\n    return str(max_len) + '\\n' + res\n"
    },
    {
        "number": 4003,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    # Find the longest increasing subsequence using dynamic programming\n    # Create an array of size n+1 to store the length of the increasing subsequence ending at each index\n    dp = [1] * (n+1)\n    # Create an array of size n+1 to store the index of the smallest increasing subsequence ending at each index\n    prev = [0] * (n+1)\n    # Iterate through the array and find the length and index of the increasing subsequence ending at each index\n    for i in range(1, n+1):\n        for j in range(i):\n            if a[j] < a[i] and dp[i] < dp[j] + 1:\n                dp[i] = dp[j] + 1\n                prev[i] = j\n    # Find the length of the longest increasing subsequence\n    max_length = max(dp)\n    # Find the index of the element with the maximum length\n    max_index = dp.index(max_length)\n    # Create a list to store the moves to obtain the longest increasing subsequence\n    moves = []\n    # Move backwards from the maximum index to find the moves to obtain the increasing subsequence\n    while max_index!= 0:\n        moves.append('L' if a[max_index-1] < a[max_index] else 'R')\n        max_index = prev[max_index]\n    # Move backwards from the second element of the list to obtain the correct order of the moves\n    moves = moves[::-1]\n    # Output the length of the longest increasing subsequence and the moves to obtain it\n    return f\"{max_length}\\n{''.join(moves)}\"\n"
    },
    {
        "number": 4003,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    s = []\n    left = 0\n    right = len(a) - 1\n    while left <= right:\n        if a[left] < a[right]:\n            s.append('L')\n            left += 1\n        else:\n            s.append('R')\n            right -= 1\n    k = len(s)\n    res = s[-1]\n    for i in range(k-2, -1, -1):\n        if s[i]!= res:\n            res += s[i]\n    return str(k) + '\\n' + res\n"
    },
    {
        "number": 4003,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n\n    # Longest increasing subsequence\n    tails = [0] * (n + 1)\n    size = 0\n    for x in a:\n        i, j = 0, size\n        while i!= j:\n            m = (i + j) // 2\n            if tails[m] < x:\n                i = m + 1\n            else:\n                j = m\n        tails[i] = x\n        size = max(i + 1, size)\n\n    # Build result string\n    k = size\n    s = ''\n    i, j = 0, size - 1\n    for _ in range(k):\n        if tails[i] < tails[j]:\n            s += 'L'\n            i += 1\n        else:\n            s += 'R'\n            j -= 1\n\n    return f'{k}\\n{s}'"
    },
    {
        "number": 4003,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n\n    # find longest increasing subsequence\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] > a[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n\n    # find max length\n    max_len = max(dp)\n\n    # find max length increasing subsequence\n    ans = [0] * max_len\n    ans[dp[n-1]-1] = 'R'\n    for i in range(n-2, -1, -1):\n        if dp[i] == max_len:\n            ans[dp[i]-1] = 'R'\n        elif dp[i] == max_len - 1:\n            ans[dp[i]-1] = 'L'\n        else:\n            ans[dp[i]-2] = 'R'\n            ans[dp[i]-1] = 'L'\n            max_len -= 1\n\n    # convert ans to string\n    s = ''.join(ans)\n    return str(max_len) + '\\n' + s"
    },
    {
        "number": 4003,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n\n    left = a[0]\n    right = a[-1]\n    if left > right:\n        left, right = right, left\n\n    ans = [left, right]\n    for i in range(2, n):\n        if a[i] <= right:\n            ans.append(a[i])\n        else:\n            break\n\n    ans = list(set(ans))\n    if len(ans) == 1:\n        ans = ans * 2\n\n    ans.sort()\n    ans_str = \"\".join([\"L\" if i == left else \"R\" for i in ans])\n\n    k = len(ans)\n    return f\"{k}\\n{ans_str}\""
    },
    {
        "number": 4003,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    if n == 1:\n        return '1\\n' + 'L' if a[0] > 0 else '1\\n' + 'R'\n    if n == 2:\n        return '2\\n' + 'LR' if a[0] > a[1] else '2\\n' + 'RL'\n    if a[0] > a[1]:\n        k = 2\n        s = 'LR'\n    else:\n        k = 2\n        s = 'RL'\n    for i in range(2, n):\n        if a[i] > a[i-1] and a[i] > a[i-2]:\n            k += 1\n            s += 'R'\n        else:\n            k += 1\n            s += 'L'\n    return str(k) + '\\n' + s"
    },
    {
        "number": 4003,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = sorted(list(map(int, stdin.split()[1:])))\n\n    # start from the leftmost element\n    left = [1] * (n-1) + [0]  # array to keep track of the leftmost element in the increasing subsequence ending at each index\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] > a[j] and left[j] + 1 > left[i]:\n                left[i] = left[j] + 1\n\n    # start from the rightmost element\n    right = [1] * (n-1) + [0]  # array to keep track of the rightmost element in the increasing subsequence ending at each index\n    for i in range(n-2, -1, -1):\n        for j in range(n-1, i, -1):\n            if a[i] > a[j] and right[j] + 1 > right[i]:\n                right[i] = right[j] + 1\n\n    # find the maximum length of the increasing subsequence\n    max_len = 0\n    for i in range(n):\n        if left[i] + right[i] > max_len:\n            max_len = left[i] + right[i]\n\n    # find all increasing subsequences of length max_len\n    ans = []\n    for i in range(n):\n        if left[i] + right[i] == max_len:\n            subseq = [a[i]]\n            j = i - 1\n            while j >= 0 and left[j] == left[i]:\n                subseq.append(a[j])\n                j -= 1\n            j = i + 1\n            while j < n and right[j] == right[i]:\n                subseq.append(a[j])\n                j += 1\n            ans.append(''.join(['L' if j == i else 'R' for j in range(i-left[i]+1, i+1+right[i])]))\n\n    # print the maximum length and all increasing subsequences of length max_len\n    print(max_len)\n    print('\\n'.join(ans))"
    },
    {
        "number": 4003,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().strip().split()))\n    k = 0\n    while len(a) > 1:\n        if a[0] > a[1]:\n            a.pop(0)\n        else:\n            a.pop()\n        k += 1\n    res = 'L' * k if a[0] > a[-1] else 'R' * k\n    return str(k) + '\\n' + res"
    },
    {
        "number": 4004,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    if all(x == a[0] for x in a):\n        return \"0\"\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            if a[i] - a[j] == 2 * a[0]:\n                return \"2\"\n    return \"-1\""
    },
    {
        "number": 4004,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    \n    D = float('inf')\n    for i in range(1, 101):\n        for j in range(i, 101):\n            if i*j < D:\n                d = i*j\n                if all(abs(ai - aj) == d or abs(ai - aj) == 0 for ai, aj in zip(a, a[i:j+1])):\n                    D = d\n    \n    if D == float('inf'):\n        return '-1'\n    else:\n        return str(D)"
    },
    {
        "number": 4004,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    diff = float('inf')\n    for i in range(1, n):\n        diff = min(diff, abs(a[i] - a[i-1]))\n    if diff == float('inf'):\n        return '-1'\n    return str(diff)"
    },
    {
        "number": 4004,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    \n    # Try all possible values of D\n    for D in range(1, max(a)+1):\n        # Check if adding D to a[i] and subtracting D from a[j] for all i and j is equal to adding D to a[0] and subtracting D from a[n-1]\n        is_valid = True\n        for i in range(n-1):\n            for j in range(i+1, n):\n                if a[i]+D!= a[j] and a[i]-D!= a[j]:\n                    is_valid = False\n                    break\n            if not is_valid:\n                break\n        if is_valid:\n            return str(D)\n    return \"-1\""
    },
    {
        "number": 4004,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    freq = [0] * 101\n\n    for i in range(n):\n        freq[a[i]] += 1\n\n    for i in range(1, 101):\n        if freq[i] % 2 == 1:\n            return -1\n\n    d = 1\n    while True:\n        if all(a[i] % d == 0 for i in range(n)):\n            return d\n        d += 1\n\nstdin = \"6\\n1 4 4 7 4 1\"\nprint(solution(stdin)) # Output: 3\n\nstdin = \"5\\n2 2 5 2 5\"\nprint(solution(stdin)) # Output: 3\n\nstdin = \"4\\n1 3 3 7\"\nprint(solution(stdin)) # Output: -1\n\nstdin = \"2\\n2 8\"\nprint(solution(stdin)) # Output: 3"
    },
    {
        "number": 4004,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    \n    if n == 1:\n        return \"1\"\n    \n    # count the frequency of each element in the array\n    freq = {}\n    for i in range(n):\n        if a[i] in freq:\n            freq[a[i]] += 1\n        else:\n            freq[a[i]] = 1\n    \n    # find the minimum non-negative integer D such that all elements are equal\n    for D in range(1, max(a) + 1):\n        equal = True\n        for i in range(n):\n            if a[i] + D in freq:\n                freq[a[i] + D] -= 1\n            elif a[i] - D in freq:\n                freq[a[i] - D] -= 1\n            else:\n                equal = False\n                break\n        if equal:\n            return str(D)\n    \n    return \"-1\""
    },
    {
        "number": 4004,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    if n == 1:\n        return str(-1)\n    if n == 2:\n        return str(min(a[0], a[1]))\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i] == a[j]:\n                continue\n            a[i] += abs(a[j] - a[i])\n            a[j] = a[i] - abs(a[j] - a[i])\n            a[i] = a[i] - abs(a[j] - a[i])\n    for i in range(n):\n        if a[i] < 0:\n            return str(-1)\n    return str(0)"
    },
    {
        "number": 4004,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    \n    # If all elements are equal, return -1\n    if all(x == a[0] for x in a):\n        return -1\n    \n    # Find the minimum non-negative D\n    d = 1\n    while True:\n        equal = True\n        for i in range(n):\n            if (a[i] + d)!= a[0]:\n                equal = False\n                break\n        if equal:\n            return str(d)\n        d += 1\n    \n    return str(-1)\n\nprint(solution(\"6\\n1 4 4 7 4 1\"))\nprint(solution(\"5\\n2 2 5 2 5\"))\nprint(solution(\"4\\n1 3 3 7\"))\nprint(solution(\"2\\n2 8\"))"
    },
    {
        "number": 4004,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n\n    D = 1\n    while True:\n        changed = False\n        for i in range(n):\n            if a[i] + D >= 0:\n                a[i] += D\n            else:\n                a[i] -= D\n                D += 1\n                changed = True\n                break\n        if not changed:\n            return str(D - 1)"
    },
    {
        "number": 4004,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    d = 101\n    for i in range(1, n):\n        d = min(d, a[i] - a[0])\n    if d == 101:\n        return '-1'\n    return str(d)\n\nprint(solution(input()))"
    },
    {
        "number": 4005,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    white_sheet = [[int(x) for x in line.split()] for line in stdin.split('\\n')[:2]]\n    black_sheet1 = [[int(x) for x in line.split()] for line in stdin.split('\\n')[2].split()]\n    black_sheet2 = [[int(x) for x in line.split()] for line in stdin.split('\\n')[3].split()]\n    \n    # check if the two black sheets overlap\n    if black_sheet1[0][0] > black_sheet2[1][0] or black_sheet1[1][0] < black_sheet2[0][0] or \\\n            black_sheet1[0][1] > black_sheet2[1][1] or black_sheet1[1][1] < black_sheet2[0][1]:\n        return \"NO\"\n    \n    # check if the white sheet is visible\n    if white_sheet[0][0] >= black_sheet2[0][0] and white_sheet[1][0] <= black_sheet1[1][0] and \\\n            white_sheet[0][1] >= black_sheet2[0][1] and white_sheet[1][1] <= black_sheet1[1][1]:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 4005,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # get input\n    x1, y1, x2, y2 = map(int, stdin.readline().split())\n    x3, y3, x4, y4 = map(int, stdin.readline().split())\n    x5, y5, x6, y6 = map(int, stdin.readline().split())\n    \n    # check if the white sheet is visible from the above\n    if x1 <= x3 and x2 >= x4 and y1 <= y3 and y2 >= y6:\n        return \"YES\"\n    elif x1 <= x5 and x2 >= x6 and y1 <= y5 and y2 >= y4:\n        return \"YES\"\n    elif x3 <= x1 and x4 >= x2 and y3 <= y1 and y4 >= y2:\n        return \"YES\"\n    elif x3 <= x5 and x4 >= x6 and y3 <= y5 and y4 >= y6:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 4005,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = map(int, stdin.readline().split())\n    x3, y3, x4, y4 = map(int, stdin.readline().split())\n    x5, y5, x6, y6 = map(int, stdin.readline().split())\n\n    if x1 >= x3 and x2 <= x4 and y1 >= y3 and y2 <= y4:\n        if x5 >= x3 and x6 <= x4 and y5 >= y3 and y6 <= y4:\n            return \"YES\"\n        else:\n            return \"NO\"\n    elif x3 >= x1 and x4 <= x2 and y3 >= y1 and y4 <= y2:\n        if x5 >= x3 and x6 <= x4 and y5 >= y3 and y6 <= y4:\n            return \"YES\"\n        else:\n            return \"NO\"\n    else:\n        return \"NO\"\n\nprint(solution(\"2 2 4 4\\n1 1 3 5\\n3 1 5 5\"))"
    },
    {
        "number": 4005,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = map(int, stdin.split()[:4])\n    x3, y3, x4, y4 = map(int, stdin.split()[4:8])\n    x5, y5, x6, y6 = map(int, stdin.split()[8:])\n    \n    if x3 >= x2 or y3 >= y2 or x5 >= x4 or y5 >= y4:\n        return \"NO\"\n    \n    if (x3 <= x1 and x5 <= x1) or (y3 <= y1 and y5 <= y1) or (x4 >= x2 and x6 >= x2) or (y4 >= y2 and y6 >= y2):\n        return \"NO\"\n    \n    return \"YES\""
    },
    {
        "number": 4005,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    lines = stdin.strip().split('\\n')\n    x1, y1, x2, y2 = map(int, lines[0].split())\n    x3, y3, x4, y4 = map(int, lines[1].split())\n    x5, y5, x6, y6 = map(int, lines[2].split())\n\n    # check if part of white sheet can be seen\n    points = [(x, y) for x in range(x1, x2+1) for y in range(y1, y2+1)]\n    for x, y in points:\n        if (x, y) not in [(x3, y3), (x4, y4), (x5, y5), (x6, y6)]:\n            if x < x3 and x < x5:\n                continue\n            if y < y3 and y < y5:\n                continue\n            if x > x4 and x > x6:\n                continue\n            if y > y4 and y > y6:\n                continue\n            return \"YES\"\n    return \"NO\""
    },
    {
        "number": 4005,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    x1, y1, x2, y2 = map(int, lines[0].split())\n    x3, y3, x4, y4 = map(int, lines[1].split())\n    x5, y5, x6, y6 = map(int, lines[2].split())\n\n    if x2 <= x3 or y2 <= y3 or x1 >= x4 or y1 >= y4 or x1 >= x5 or y1 >= y6 or x2 <= x5 or y2 <= y6:\n        return 'NO'\n\n    # Check if some part of the white sheet is visible\n    for i in range(x3, x4):\n        for j in range(y3, y4):\n            if (i, j) not in [(x3, y3), (x4, y3), (x3, y4), (x4, y4)]:\n                if (x1 < i < x2 and y1 < j < y2) or (x1 < i+1 < x2 and y1 < j+1 < y2):\n                    return 'YES'\n\n    for i in range(x5, x6):\n        for j in range(y5, y6):\n            if (i, j) not in [(x5, y5), (x6, y5), (x5, y6), (x6, y6)]:\n                if (x1 < i < x2 and y1 < j < y2) or (x1 < i+1 < x2 and y1 < j+1 < y2):\n                    return 'YES'\n\n    return 'NO'\n"
    },
    {
        "number": 4005,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    x1, y1, x2, y2 = list(map(int, lines[0].split()))\n    x3, y3, x4, y4 = list(map(int, lines[1].split()))\n    x5, y5, x6, y6 = list(map(int, lines[2].split()))\n    \n    # Check if any part of the white sheet can be seen\n    if (x1, y1) <= (x3, y3) <= (x4, y4) <= (x2, y2) or (x1, y1) <= (x5, y5) <= (x6, y6) <= (x2, y2):\n        return \"YES\"\n    elif (x2, y2) <= (x3, y3) <= (x4, y4) <= (x1, y1) or (x2, y2) <= (x5, y5) <= (x6, y6) <= (x1, y1):\n        return \"YES\"\n    elif (x3, y3) <= (x1, y1) <= (x2, y2) <= (x4, y4) or (x3, y3) <= (x5, y5) <= (x6, y6) <= (x4, y4):\n        return \"YES\"\n    elif (x4, y4) <= (x1, y1) <= (x2, y2) <= (x3, y3) or (x4, y4) <= (x5, y5) <= (x6, y6) <= (x3, y3):\n        return \"YES\"\n    elif (x5, y5) <= (x3, y3) <= (x4, y4) <= (x6, y6) or (x5, y5) <= (x1, y1) <= (x2, y2) <= (x6, y6):\n        return \"YES\"\n    elif (x6, y6) <= (x3, y3) <= (x4, y4) <= (x5, y5) or (x6, y6) <= (x1, y1) <= (x2, y2) <= (x5, y5):\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 4005,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = map(int, stdin.readline().split())\n    x3, y3, x4, y4 = map(int, stdin.readline().split())\n    x5, y5, x6, y6 = map(int, stdin.readline().split())\n\n    if x3 > x1 and x4 > x2 and y3 > y1 and y4 > y2:\n        return \"NO\"\n    if x5 > x1 and x6 > x2 and y5 > y1 and y6 > y2:\n        return \"NO\"\n    if x1 > x5 and x2 > x5 and y1 > y5 and y2 > y5:\n        return \"NO\"\n    if x1 > x6 and x2 > x6 and y1 > y6 and y2 > y6:\n        return \"NO\"\n\n    return \"YES\"\n\n\ndef"
    },
    {
        "number": 4005,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = map(int, stdin.split()[0:4])\n    x3, y3, x4, y4 = map(int, stdin.split()[4:8])\n    x5, y5, x6, y6 = map(int, stdin.split()[8:])\n\n    # check if the white sheet can be seen from the above\n    if y1 < y6 and x1 < x3 and x2 > x4 and y2 > y5:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 4005,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    x1, y1, x2, y2 = map(int, lines[0].split())\n    x3, y3, x4, y4 = map(int, lines[1].split())\n    x5, y5, x6, y6 = map(int, lines[2].split())\n    \n    if x1 < x3 < x2 and y1 < y3 < y2 and x1 < x5 < x2 and y1 < y5 < y2:\n        return \"YES\"\n    elif x3 < x1 < x4 and y3 < y1 < y4 and x5 < x1 < x6 and y5 < y1 < y6:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 4006,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    count = 0\n    seen = set()\n    while n not in seen:\n        seen.add(n)\n        n = f(n)\n        count += 1\n    return count\n\ndef"
    },
    {
        "number": 4006,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    num_reachable = set()\n    num_seen = set()\n    i = 1\n    while True:\n        num = n + i\n        if num in num_seen:\n            break\n        num_seen.add(num)\n        if '0' in str(num):\n            while num % 10 == 0:\n                num //= 10\n        else:\n            num += 1\n        num_reachable.add(num)\n        i += 1\n    return len(num_reachable)"
    },
    {
        "number": 4006,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    visited = set()\n    q = [n]\n    while q:\n        num = q.pop(0)\n        if num not in visited:\n            visited.add(num)\n            f = num\n            while f >= 10 and f % 10 == 0:\n                f //= 10\n            while f >= 10 and f % 10 == 0:\n                f //= 10\n            if f > 1:\n                f = f // 10\n            q.append(f)\n            if num == 10:\n                q.append(1)\n            elif num >= 100:\n                q.append(num // 100)\n            elif num >= 10:\n                q.append(num // 10)\n    return len(visited)\n\nstdin = input()\nprint(solution(stdin))"
    },
    {
        "number": 4006,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    reachable = set()\n    q = [n]\n    while q:\n        x = q.pop(0)\n        if x not in reachable:\n            reachable.add(x)\n            y = x\n            while y % 10 == 0:\n                y //= 10\n            q.append(y)\n            if y > 0:\n                q.append(y - 1)\n            if y < 10**9:\n                q.append(y + 1)\n    return len(reachable)"
    },
    {
        "number": 4006,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    num_set = set()\n    i = n\n    while i > 0:\n        i = f(i)\n        if i in num_set:\n            break\n        num_set.add(i)\n    return len(num_set)\n\ndef"
    },
    {
        "number": 4006,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    count = 0\n    for i in range(1, n+1):\n        x = i\n        while x % 10 == 0:\n            x //= 10\n        count += 1\n        if x!= i:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4006,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    \n    # Initialize a set to store unique numbers\n    numbers = set()\n    \n    # Add the original number to the set\n    numbers.add(n)\n    \n    # Loop through the digits of the number\n    while n > 0:\n        # Add the number to the set\n        numbers.add(n)\n        \n        # Add 1 to the number\n        n = n + 1\n        \n        # Remove any trailing zeros\n        while n % 10 == 0:\n            n = n // 10\n    \n    # Return the number of unique numbers\n    return len(numbers)"
    },
    {
        "number": 4006,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    reachable = set([n])\n    stack = [n]\n    while stack:\n        x = stack.pop()\n        if x > 0:\n            y = f(x)\n            if y not in reachable:\n                reachable.add(y)\n                stack.append(y)\n        y = x // 10\n        while y > 0 and y % 10 == 0:\n            y //= 10\n        if y > 0:\n            y = x - y\n            if y not in reachable:\n                reachable.add(y)\n                stack.append(y)\n    return len(reachable)\n\ndef"
    },
    {
        "number": 4006,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    count = 0\n    seen = set()\n    q = [n]\n    while q:\n        num = q.pop(0)\n        if num == 0:\n            continue\n        count += 1\n        seen.add(num)\n        f = num\n        while f % 10 == 0:\n            f //= 10\n        if f!= 1:\n            q.append(f)\n        if num % 10 == 0:\n            q.append(num // 10)\n    return count - 1\n\nprint(solution(\"1098\")) # 20\nprint(solution(\"10\")) # 19"
    },
    {
        "number": 4006,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    f = lambda x: x+1 if x < 10 else x // 10 * 10\n    reachable = set()\n    q = [n]\n    while q:\n        x = q.pop(0)\n        for y in [f(x), f(x) // 10]:\n            if y!= 0 and y not in reachable:\n                reachable.add(y)\n                q.append(y)\n    return len(reachable)\n\nprint(solution(input()))"
    },
    {
        "number": 4007,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    f = list(map(int, stdin.split('\\n')[1].split()))\n    \n    # Initially, all f[i] are 0\n    # Keep track of unassigned friends using a set\n    # Keep track of assigned friends using a set\n    # Assign a gift to friend i if possible\n    # If no possible assignment is found, return None\n\n    # Get the indices of unassigned friends\n    unassigned = set([i for i in range(n) if f[i] == 0])\n    while unassigned:\n        i = unassigned.pop()\n        # Check if friend i wants to give a gift to someone else\n        if f[i] == 0 and i!= 0:\n            j = f[i-1]\n            # Check if friend j has not already received a gift\n            if j == 0 or f[j-1]!= 0:\n                f[i] = i+1\n                unassigned.remove(j)\n                unassigned.add(i)\n                # Check if friend j can still be assigned a gift\n                if f[j-1] == 0 and j!= 0:\n                    unassigned.add(j)\n    \n    # Check if there are any cycles\n    for i in range(n):\n        if f[i] == 0:\n            return None\n\n    # Format the output\n    output = []\n    for i in range(n):\n        if f[i] == 0:\n            output.append(str(i+1))\n        else:\n            output.append(str(f[i]))\n    \n    return''.join(output)"
    },
    {
        "number": 4007,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    friends = [int(x) for x in stdin.split()[1:]]\n    \n    # find all the unknown friendship values\n    unknowns = [i for i in range(n) if friends[i] == 0]\n    m = len(unknowns)\n    \n    # sort the unknowns by the number of connections they have\n    connections = [0] * n\n    for i in range(n):\n        if friends[i]!= 0 and friends[i]!= i:\n            connections[friends[i] - 1] += 1\n    for i in range(n):\n        if connections[i] == 0:\n            connections[i] = 10000 # dummy value to put at the end\n    unknowns = sorted(unknowns, key=lambda x: connections[x], reverse=True)\n    \n    # assign gifts to the unknowns\n    gifts = [-1] * n\n    gifts[unknowns[0]] = 1\n    for i in range(1, m):\n        j = unknowns[i]\n        if connections[j] > 0:\n            for k in range(1, n+1):\n                if gifts[k-1] == 0 and connections[k-1] == 0:\n                    gifts[k-1] = j+1\n                    break\n    \n    # assign gifts to the knowns\n    for i in range(n):\n        if friends[i]!= 0:\n            j = friends[i]\n            gifts[j-1] = i+1\n    \n    # output the gifts\n    output = ''\n    for i in range(n):\n        if friends[i] == 0:\n            output += str(i+1) +''\n        else:\n            output += str(i+1) +'' + str(gifts[friends[i]-1]) +''\n        if i!= n-1:\n            output += '\\n'\n    \n    return output"
    },
    {
        "number": 4007,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    f = [int(i) for i in stdin.split()[1:]]\n    f_num = [0] * n\n    for i in range(n):\n        if f[i]!= 0:\n            f_num[f[i]-1] = i+1\n    for i in range(n):\n        if f[i] == 0 and f_num[i] == 0:\n            for j in range(n):\n                if f_num[j] == 0:\n                    f[i] = j+1\n                    f_num[j] = -1\n                    break\n    ans = []\n    for i in range(n):\n        if f[i]!= 0:\n            ans.append(str(f[i]))\n        else:\n            ans.append(str(n))\n    return''.join(ans)"
    },
    {
        "number": 4007,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    friends = [int(x) for x in stdin.readline().strip().split()]\n    \n    def give_gift(friend_index, gift_index):\n        friends[friend_index] = gift_index + 1\n        return gift_index + 1\n    \n    def get_recipient(friend_index):\n        if friends[friend_index] == 0:\n            return None\n        else:\n            recipient_index = friends[friend_index] - 1\n            if recipient_index == friend_index:\n                return None\n            else:\n                return recipient_index\n    \n    gift_index = 1\n    for i in range(n):\n        if friends[i] == 0:\n            recipient_index = get_recipient(i)\n            if recipient_index is None:\n                return \"IMPOSSIBLE\"\n            friends[recipient_index] = give_gift(recipient_index, gift_index)\n            gift_index += 1\n    \n    return \" \".join(str(x) for x in friends)\n\n\nprint(solution(input()))"
    },
    {
        "number": 4007,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    f = list(map(int, stdin.split('\\n')[1].split()))\n    \n    if f.count(0) < 2:\n        return None\n    \n    f_dict = {}\n    for i in range(n):\n        if f[i]!= 0:\n            f_dict[i] = f[i]\n    \n    ans = []\n    for i in range(n):\n        if i in f_dict:\n            ans.append(f_dict[i])\n        else:\n            if not f[i]:\n                ans.append(i+1)\n            else:\n                if f_dict[f[i]-1] == 0:\n                    ans.append(i+1)\n                else:\n                    ans.append(f_dict[f[i]-1])\n    \n    return''.join(map(str, ans))\n"
    },
    {
        "number": 4007,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    friends = list(map(int, stdin.split('\\n')[1].split()))\n    ans = [0] * n\n    for i in range(n):\n        if friends[i] == 0:\n            ans[i] = i\n        else:\n            ans[i] = friends[i]\n            ans[friends[i]-1] = i+1\n    return''.join(map(str, ans))"
    },
    {
        "number": 4007,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    friends = list(map(int, stdin.readline().split()))\n    gifts = [i+1 for i in range(n) if friends[i] == 0]\n    for i in range(n):\n        if friends[i]!= 0:\n            gifts[friends[i]-1] = friends[i]\n    return''.join(map(str, gifts))"
    },
    {
        "number": 4007,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    f = list(map(int, stdin.readline().strip().split()))\n    f_new = [None] * n\n    for i in range(n):\n        if f[i]!= 0:\n            if f[i] <= i:\n                f_new[i] = i\n            else:\n                f_new[i] = f[f[i]-1]\n        else:\n            for j in range(i+1, n):\n                if f[j] == i+1:\n                    f_new[i] = j+1\n                    break\n    return''.join(map(str, f_new))"
    },
    {
        "number": 4007,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    friends = list(map(int, stdin.splitlines()[1].split()))\n    result = [0] * n\n    for i in range(n):\n        if friends[i] == 0:\n            result[i] = n\n        else:\n            result[i] = friends[i]\n            result[friends[i]-1] = i+1\n            friends[friends[i]-1] = n\n    return \" \".join(map(str, result))"
    },
    {
        "number": 4007,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, f = stdin.strip().split()\n    f = list(map(int, f.split()))\n\n    count = 1\n    for i in range(n):\n        if f[i] == 0:\n            f[i] = count\n            count += 1\n\n    return \" \".join(map(str, f))\n\nprint(solution(\"5\\n5 0 0 2 4\"))\nprint(solution(\"7\\n7 0 0 1 4 0 6\"))\nprint(solution(\"7\\n7 4 0 3 0 5 1\"))\nprint(solution(\"5\\n2 1 0 0 0\"))"
    },
    {
        "number": 4008,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:]))\n    \n    # check if the problem is solvable\n    for i in range(k):\n        if sum([1 for x in a if x == i+1]) == 0:\n            return \"NO\"\n    \n    # create a mapping of colors to their elements\n    color_map = {i+1:[] for i in range(k)}\n    for i, x in enumerate(a):\n        color_map[x].append(i+1)\n    \n    # try all possible colorings\n    colorings = []\n    def backtrack(color_map, k, coloring):\n        if len(coloring) == n:\n            colorings.append(coloring)\n            return\n        \n        for i in range(k):\n            if color_map[i+1]:\n                x = color_map[i+1].pop()\n                coloring.append(i+1)\n                backtrack(color_map, k, coloring)\n                color_map[i+1].append(x)\n                coloring.pop()\n    \n    backtrack(color_map, k, [])\n    \n    # check if there is at least one coloring that satisfies the conditions\n    for coloring in colorings:\n        if all(sum([1 for j in range(n) if coloring[j] == i+1]) >= 1 for i in range(k)) and \\\n           all(coloring.count(i+1) == 1 for i in range(k)):\n            return \"YES\\n\" + \" \".join(map(str, coloring))\n    \n    return \"NO\""
    },
    {
        "number": 4008,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    colors = {}\n    for i in range(n):\n        if a[i] not in colors:\n            colors[a[i]] = i\n        else:\n            return \"NO\"\n    if len(colors) < k:\n        return \"NO\"\n    coloring = [-1] * n\n    count = [0] * k\n    for i in range(n):\n        c = a[i]\n        if coloring[i]!= -1:\n            continue\n        for j in range(k):\n            if count[j] == 0 or j == colors[c]:\n                coloring[i] = j\n                count[j] += 1\n                break\n    return \"YES\\n\" + \" \".join(map(str, coloring))\n\nprint(solution(\"4 2\\n1 2 2 3\")) # YES\\n1 1 2 2\nprint(solution(\"5 2\\n3 2 1 2 3\")) # YES\\n2 1 1 2 1\nprint(solution(\"5 2\\n2 1 1 2 1\")) # NO"
    },
    {
        "number": 4008,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    colors = [0] * n\n    for i in range(n):\n        c = i % k + 1\n        while colors[i]!= 0 and colors[i]!= c:\n            c = (c % k) + 1\n        colors[i] = c\n    if sum(colors)!= n * k:\n        return \"NO\"\n    for i in range(k):\n        if sum([1 for j in range(n) if colors[j] == i + 1]) == 0:\n            return \"NO\"\n    return \"YES\\n\" + \" \".join(map(str, colors))"
    },
    {
        "number": 4008,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    color = [0] * n\n    res = []\n    for i in range(k):\n        cnt = 0\n        for j in range(n):\n            if color[j] == i:\n                cnt += 1\n            else:\n                color[j] = i\n                cnt += 1\n        if cnt < k:\n            return \"NO\"\n        res.append(i+1)\n    return \"YES\\n\" + \" \".join(map(str, res))"
    },
    {
        "number": 4008,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().strip().split())\n    a = list(map(int, stdin.readline().strip().split()))\n    colors = set()\n    for i in range(k):\n        colors.add(i+1)\n    for i in range(n):\n        if not colors:\n            return \"NO\"\n        c = min(colors)\n        colors.remove(c)\n        a[i] = c\n    return \"YES\\n\" + \" \".join(map(str, a))"
    },
    {
        "number": 4008,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    This function takes an input string containing two integers n and k,\n    followed by n integers a1, a2,..., an. It returns \"YES\" followed by a\n    coloring of the array a1, a2,..., an in k colors, or \"NO\" if no such\n    coloring exists.\n    \"\"\"\n    n, k = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:]))\n    \n    # Create a dictionary to store the count of each color\n    color_count = {}\n    for i in range(1, k+1):\n        color_count[i] = 0\n    \n    # Check if each element of the array is already colored in some color\n    for i in a:\n        if i in color_count.keys():\n            color_count[i] += 1\n        else:\n            color_count[i] = 1\n    \n    # Check if there is at least one element colored in each color\n    for i in range(1, k+1):\n        if color_count[i] == 0:\n            return \"NO\"\n    \n    # Check if each color has at least one distinct element\n    for i in range(1, k+1):\n        if len(set(filter(lambda x: x == i, a))) == 0:\n            return \"NO\"\n    \n    # If all the above conditions are satisfied, return \"YES\" followed by the coloring\n    coloring = \"\"\n    for i in a:\n        coloring += str(color_count[i]) + \" \"\n        color_count[i] -= 1\n    return \"YES\\n\" + coloring[:-1]"
    },
    {
        "number": 4008,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:]))\n    color = [-1] * n\n    def backtrack(index):\n        if index == n:\n            return True\n        for i in range(1, k+1):\n            if color[index] == -1 and not any(color[j] == i for j in range(index)):\n                color[index] = i\n                if backtrack(index+1):\n                    return True\n                color[index] = -1\n        return False\n    if backtrack(0):\n        result =''.join(map(str, color))\n        return \"YES\\n\" + result\n    else:\n        return \"NO\""
    },
    {
        "number": 4008,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:]))\n    colors = [0] * n\n    for i in range(n):\n        for j in range(1, k+1):\n            if colors[i]!= j and not any(colors[x] == j for x in range(n)):\n                colors[i] = j\n                break\n        if colors[i] == 0:\n            return \"NO\"\n    return \"YES\\n\" + \" \".join(map(str, colors))"
    },
    {
        "number": 4008,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.strip().split())\n    a = list(map(int, stdin.strip().split()))\n    \n    # check if there is at least one element per color\n    if len(set(a)) < k:\n        return \"NO\"\n    \n    # check if all elements are distinct in each color\n    colors = [0] * k\n    for i in range(n):\n        color = a[i] - 1\n        if colors[color]:\n            return \"NO\"\n        colors[color] = a[i]\n    \n    # if there is at least one element per color and all elements are distinct in each color, print \"YES\" and the coloring\n    coloring = \" \".join(map(str, colors))\n    return f\"YES\\n{coloring}\""
    },
    {
        "number": 4008,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    freq = [0] * k\n    \n    for i in a:\n        freq[i-1] += 1\n    \n    if freq.count(0) < k:\n        return \"NO\"\n    \n    for i in range(k):\n        if freq[i] == 0:\n            return \"NO\"\n    \n    for i in range(k):\n        colors = set()\n        for j in range(n):\n            if a[j] == i+1:\n                colors.add(j)\n        if len(colors)!= freq[i]:\n            return \"NO\"\n    \n    coloring = [0] * n\n    for i in range(k):\n        for j in range(n):\n            if a[j] == i+1:\n                coloring[j] = i+1\n    \n    return \"YES\\n\" + \" \".join(map(str, coloring))"
    },
    {
        "number": 4009,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = list(map(int, stdin.split()))\n    num = list(map(int, stdin.splitlines()[1]))\n    count = 0\n    for i in range(n):\n        if i >= x:\n            break\n        if num[i] == 0:\n            num[i] = 1\n            count += 1\n        else:\n            break\n    if num[-1] == 0:\n        num[-1] = 1\n        count += 1\n    if num[-1] == 1:\n        count += (n - x) % 10\n    return str(count)"
    },
    {
        "number": 4009,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, stdin.split())\n    num = stdin.strip().split('\\n')[1]\n\n    def count_zeros(num):\n        count = 0\n        for digit in num:\n            if digit == '0':\n                count += 1\n        return count\n\n    def count_ones(num):\n        count = 0\n        for digit in num:\n            if digit == '1':\n                count += 1\n        return count\n\n    def reverse(num):\n        return num[::-1]\n\n    def add_one(num):\n        carry = 1\n        res = ''\n        for digit in num[::-1]:\n            if digit == '0' and carry == 1:\n                res = '1' + res\n                carry = 0\n            elif digit == '1' and carry == 1:\n                res = '0' + res\n                carry = 0\n            else:\n                res = digit + res\n                carry = 0\n        if carry == 1:\n            res = '1' + res\n        return res\n\n    def subtract_one(num):\n        borrow = 1\n        res = ''\n        for digit in num[::-1]:\n            if digit == '1' and borrow == 1:\n                res = '0' + res\n                borrow = 0\n            elif digit == '0' and borrow == 1:\n                res = '1' + res\n                borrow = 0\n            else:\n                res = digit + res\n                borrow = 0\n        return res\n\n    def change_digit(num, pos, digit):\n        if digit == '0' and num[pos] == '0':\n            return num\n        elif digit == '1' and num[pos] == '1':\n            return num\n        else:\n            return num[:pos] + digit + num[pos+1:]\n\n    def get_divisible_by_power_ten(num, power):\n        if len(num) <= power:\n            return '0' * (power - len(num)) + num\n        else:\n            return num[-power:]\n\n    def calculate_remainder(num, power):\n        num = get_divisible_by_power_ten(num, power)\n        return int(num)\n\n    def get_remainder(num, x, y):\n        return calculate_remainder(num, x) % 10**y\n\n    def solve(num, x, y):\n        count = 0\n        while True:\n            if count_zeros(num) == 0:\n                return count\n            if count_ones(num) == 0:\n                count += 1\n                num = reverse(num)\n                continue\n            if count_zeros(num) > count_ones(num):\n                count += 1\n                num = subtract_one(num)\n            else:\n                count += 1\n                num = add_one(num)\n            if count % 2 == 0:\n                num = change_digit(num, 0, '0')\n            else:\n                num = change_digit(num, 0, '1')\n            if get_remainder(num, x, y) == 0:\n                count += 1\n                num = change_digit(num, x-y-1, '1')\n            else:\n                num = change_digit(num, x-y-1, '0')\n            if count % 2 == 0:\n                num = change_digit(num, 1, '0')\n            else:\n                num = change_digit(num, 1, '1')\n            if get_remainder(num, x, y) == 0:\n                count += 1\n                num = change_digit(num, x-1, '1')\n            else:\n                num = change_digit(num, x-1, '0')\n            if count % 2 == 0:\n                num = change_digit(num, 2, '0')\n            else:\n                num = change_digit(num, 2, '1')\n            if get_remainder(num, x, y) == 0:\n                count += 1\n                num = change_digit(num, x-2-1, '1')\n            else:\n                num = change_digit(num, x-2-1, '0')\n\n    return str(solve(num, x, y))"
    },
    {
        "number": 4009,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, stdin.split())\n    num = stdin.strip()\n\n    count = 0\n    for i in range(n):\n        if num[i] == '1' and i % x == y:\n            count += 1\n            num = num[:i] + '0' + num[i+1:]\n\n    return str(count)"
    },
    {
        "number": 4009,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, stdin.split())\n    num = stdin.strip().split('\\n')[1]\n    if num[0] == '0':\n        return \"0\"\n    if num[-x] == '0':\n        return \"0\"\n    ops = 0\n    for i in range(1, n):\n        if i <= x:\n            if num[i-1] == '1':\n                ops += 1\n        else:\n            if num[i-1]!= '0':\n                ops += 1\n            if num[i-x-1] == '1':\n                ops += 1\n    return str(ops)\n\nwith open(\"test.txt\", \"r\") as f:\n    print(solution(f.read()))"
    },
    {
        "number": 4009,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, stdin.split())\n    num = stdin.strip()\n    count = 0\n    for i in range(n):\n        if num[i] == '0':\n            if i < x-y:\n                count += 1\n            elif i == x-y:\n                count += 2\n    return str(count)"
    },
    {
        "number": 4009,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, stdin.split())\n    num = stdin.split()[1]\n    \n    def count_zeros(num):\n        count = 0\n        for i in range(n):\n            if num[i] == '0':\n                count += 1\n            else:\n                break\n        return count\n    \n    def count_ones(num):\n        count = 0\n        for i in range(n-1, -1, -1):\n            if num[i] == '1':\n                count += 1\n            else:\n                break\n        return count\n    \n    def count_operations(num):\n        zeros = count_zeros(num)\n        ones = count_ones(num)\n        return min(zeros - y, ones + n - x - y)\n    \n    return count_operations(num)"
    },
    {
        "number": 4009,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, stdin.split()[:3])\n    num = stdin.split()[3]\n\n    count = 0\n    for i in range(len(num)):\n        if i % x == y:\n            if int(num[i]) == 0:\n                count += 1\n            else:\n                count -= 1\n\n    if count < 0:\n        count += 10**x\n\n    return count"
    },
    {
        "number": 4009,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, stdin.split())\n    num = stdin.strip()\n    count = 0\n    while num[y-1] == '0':\n        count += 1\n        num = num[:y-1] + '1' + num[y:]\n    if num[x-1] == '1':\n        count += 1\n        num = num[:x-1] + '0' + num[x:]\n    return count"
    },
    {
        "number": 4009,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, stdin.split())\n    num = stdin.split()[1]\n    count = 0\n    for i in range(n):\n        if num[i] == '0' and i < y:\n            count += 1\n        elif num[i] == '1' and i >= y:\n            count += 1\n    return count\n"
    },
    {
        "number": 4009,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, stdin.readline().split())\n    num = stdin.readline().strip()\n    num = list(map(int, num))\n    count = 0\n    for i in range(y, n):\n        if num[i] == 1:\n            count += 1\n    if count < x:\n        return \"IMPOSSIBLE\"\n    else:\n        return count"
    },
    {
        "number": 4010,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = int(stdin.readline().strip())\n    for i in range(test_cases):\n        n = int(stdin.readline().strip())\n        a = list(map(int, stdin.readline().strip().split()))\n        subseq_found = False\n        for j in range(len(a)):\n            for k in range(j+1, len(a)):\n                for l in range(k+1, len(a)):\n                    if a[j] == a[l] and a[k] == a[l-1] and a[k-1] == a[j]:\n                        subseq_found = True\n                        break\n                if subseq_found:\n                    break\n            if subseq_found:\n                break\n        if subseq_found:\n            print(\"YES\")\n        else:\n            print(\"NO\")"
    },
    {
        "number": 4010,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for i in range(t):\n        n = int(stdin.readline())\n        a = list(map(int, stdin.readline().split()))\n        flag = False\n        for j in range(n):\n            for k in range(j+2, n+1):\n                if a[j:k] == a[j:k][::-1]:\n                    flag = True\n                    break\n            if flag:\n                break\n        print(\"YES\" if flag else \"NO\")"
    },
    {
        "number": 4010,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    for i in range(1, len(lines), 2):\n        n = int(lines[i])\n        a = list(map(int, lines[i+1].split()))\n        for j in range(n):\n            for k in range(j+2, n+1):\n                sub = a[j:k]\n                if sub == sub[::-1]:\n                    return \"YES\"\n        return \"NO\""
    },
    {
        "number": 4010,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        n = int(stdin.readline().strip())\n        a = list(map(int, stdin.readline().strip().split()))\n        # check for palindrome subsequences of length at least 3\n        for i in range(n):\n            for j in range(i+2, n+1):\n                if a[i:j] == a[i:j][::-1]:\n                    return \"YES\"\n        # if no palindrome subsequence of length at least 3 is found\n        return \"NO\""
    },
    {
        "number": 4010,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    t = int(stdin.readline())\n    for i in range(t):\n        n = int(stdin.readline())\n        a = list(map(int, stdin.readline().split()))\n\n        # Check for palindromes in subsequences of length at least 3\n        for j in range(n):\n            # Check for palindromes of length 2\n            if a[j] == a[n-j-1]:\n                # Check for palindromes of length 3\n                if j >= 2 and a[j-1] == a[n-j]:\n                    return \"YES\"\n            # Check for palindromes of length 4\n            if j >= 3 and a[j-2] == a[n-j-2] and a[j-1] == a[n-j-1]:\n                return \"YES\"\n        # No palindrome found\n        return \"NO\"\n"
    },
    {
        "number": 4010,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution for the problem.\n\n    Parameters:\n    - stdin (str): input string containing the input data\n\n    Returns:\n    - str: output string containing the answer for each test case\n    \"\"\"\n    # Split the input data into test cases\n    test_cases = stdin.strip().split('\\n\\n')\n\n    # Loop through each test case\n    for case in test_cases:\n        # Split the test case into input and expected output\n        input_case, expected_output = case.split('\\n')\n        n = int(input_case.split()[0])\n        a = list(map(int, input_case.split()[1:]))\n        # Check if any subsequence of length at least 3 is a palindrome\n        has_palindrome = False\n        for i in range(n):\n            for j in range(i+2, n+1):\n                if a[i:j] == a[i:j][::-1]:\n                    has_palindrome = True\n                    break\n            if has_palindrome:\n                break\n        # Print the answer\n        if has_palindrome:\n            print('YES')\n        else:\n            print('NO')"
    },
    {
        "number": 4010,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for i in range(t):\n        n = int(stdin.readline())\n        a = list(map(int, stdin.readline().strip().split()))\n        for j in range(len(a)):\n            for k in range(len(a)):\n                if j <= k:\n                    continue\n                temp = a[j:k+1]\n                if temp == temp[::-1]:\n                    print(\"YES\")\n                    return \"YES\"\n        print(\"NO\")\n    return \"NO\""
    },
    {
        "number": 4010,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n = int(stdin.readline().strip())\n        a = list(map(int, stdin.readline().strip().split()))\n        for j in range(n):\n            for k in range(j, n):\n                if a[j:k+1] == a[j:k+1][::-1]:\n                    print(\"YES\")\n                    break\n            else:\n                continue\n            break\n        else:\n            print(\"NO\")"
    },
    {
        "number": 4010,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def is_palindrome(arr):\n        return arr == arr[::-1]\n\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n = int(stdin.readline().strip())\n        a = list(map(int, stdin.readline().strip().split()))\n        if any(is_palindrome(a[j:j+3]) for j in range(n-2)):\n            return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 4010,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        n = int(stdin.readline().strip())\n        a = list(map(int, stdin.readline().strip().split()))\n        has_palindrome = False\n        for i in range(n):\n            for j in range(i+2, n+1):\n                if a[i:j] == a[i:j][::-1]:\n                    has_palindrome = True\n                    break\n            if has_palindrome:\n                break\n        print(\"YES\" if has_palindrome else \"NO\")"
    },
    {
        "number": 4011,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = stdin.readline().strip()\n    f = list(map(int, stdin.readline().strip().split()))\n    max_num = int(a)\n    for i in range(1, 10):\n        if f.count(i) > 0:\n            num = int(a[:i] + str(f.index(i) + 1) + a[i+1:])\n            max_num = max(max_num, num)\n    return str(max_num)\n\nprint(solution(input))"
    },
    {
        "number": 4011,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, a, f = map(int, stdin.split())\n    max_num = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            segment = int(a[i:j])\n            segment = str(segment)\n            segment = ''.join(map(str, map(lambda x: f[x], map(int, segment))))\n            num = int(segment)\n            if num > max_num:\n                max_num = num\n    return max_num\n\nwith open('input.txt') as f:\n    stdin = f.read()\n\nprint(solution(stdin))"
    },
    {
        "number": 4011,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = stdin.readline().strip()\n    f = list(map(int, stdin.readline().strip().split()))\n    res = \"\"\n    for i in range(n):\n        res += str(f[int(a[i])])\n    return res"
    },
    {
        "number": 4011,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = stdin.readline().strip()\n    f = list(map(int, stdin.readline().strip().split()))\n\n    dp = [[0] * (n+1) for _ in range(n+1)]\n\n    for i in range(n+1):\n        dp[i][i] = int(a[i-1])\n\n    for i in range(n+1):\n        for j in range(i+1, n+1):\n            for k in range(i, j+1):\n                dp[i][j] = max(dp[i][j], dp[i][k-1]*f[int(a[k-1])-1]+dp[k][j]*f[int(a[j-1])-1])\n\n    return str(dp[0][n])"
    },
    {
        "number": 4011,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, a, f = map(int, stdin.split())\n    f = list(map(int, stdin.readline().strip().split()))\n    ans = a\n    for i in range(n):\n        for j in range(i+1, n+1):\n            segment = ans[i:j]\n            new_segment = ''\n            for digit in segment:\n                new_segment += str(f[int(digit)-1])\n            ans = ans[:i] + new_segment + ans[j:]\n    return ans"
    },
    {
        "number": 4011,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = stdin.split()[1]\n    f = list(map(int, stdin.split()[2:]))\n    f = [i - 1 for i in f]  # convert f to 0-indexed list\n    max_num = a\n    for i in range(1, n + 1):\n        for j in range(i, n + 1):\n            segment = a[j - 1 : i - 1 : -1]\n            new_segment = ''.join(map(str, [f[int(digit)] for digit in segment]))\n            new_num = a[:j - 1] + new_segment + a[i:]\n            max_num = max(max_num, new_num)\n    return max_num\n"
    },
    {
        "number": 4011,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    f = list(map(int, stdin.readline().split()))\n    max_num = a\n    for i in range(n):\n        for j in range(i+1, n+1):\n            segment = int(a[i:j])\n            new_segment = ''.join(map(str, map(lambda x: f[int(x)-1], str(segment))))\n            new_num = a[:i] + new_segment + a[j:]\n            max_num = max(max_num, int(new_num))\n    return str(max_num)"
    },
    {
        "number": 4011,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, a, f = stdin.split()\n    n, a = int(n), int(a)\n    f = list(map(int, f.split()))\n    max_num = a\n    for i in range(1, 10):\n        a = str(a)\n        if i not in f:\n            continue\n        for j in range(n):\n            if a[j] == str(i):\n                a = a[:j] + str(f[i-1]) + a[j+1:]\n        a = int(a)\n        max_num = max(max_num, a)\n    return str(max_num)"
    },
    {
        "number": 4011,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = stdin.readline().strip()\n    f = list(map(int, stdin.readline().strip().split()))\n    dp = [[0] * 10 for _ in range(n+1)]\n    for i in range(10):\n        dp[n][i] = f[i-1]\n    for i in range(n-1, -1, -1):\n        for j in range(10):\n            dp[i][j] = dp[i+1][j]\n            if j == a[i] - 1:\n                dp[i][j] = max(dp[i][j], dp[i+1][f[j]-1])\n    return ''.join(map(str, dp[0]))"
    },
    {
        "number": 4011,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, a, *f = map(int, stdin.split())\n    a = [int(x) for x in a]\n\n    def apply_f(i, j):\n        if i >= j:\n            return\n        for k in range(i, j):\n            a[k] = f[a[k]-1]\n        return apply_f(i, j-1)\n\n    apply_f(0, n-1)\n    return int(''.join(map(str, a)))"
    },
    {
        "number": 4012,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    cases = int(stdin.split()[0])\n    outputs = []\n    for i in range(cases):\n        a, b, c = map(int, stdin.readline().split())\n        if b % a == 0 and c % b == 0:\n            outputs.append(0)\n            continue\n        operations = 0\n        if c % a == 0:\n            while c % a == 0:\n                c += a\n                operations += 1\n            if b % c == 0:\n                outputs.append(operations)\n                continue\n        if b % a == 0:\n            while b % a == 0:\n                b += a\n                operations += 1\n            if c % b == 0:\n                outputs.append(operations)\n                continue\n        if c % b == 0:\n            while c % b == 0:\n                c += b\n                operations += 1\n            if a % c == 0:\n                outputs.append(operations)\n                continue\n        if b % c == 0:\n            while b % c == 0:\n                b += c\n                operations += 1\n            if a % b == 0:\n                outputs.append(operations)\n                continue\n        if c % a == 0:\n            while c % a == 0:\n                c += a\n                operations += 1\n            if b % c == 0:\n                outputs.append(operations)\n                continue\n        if b % a == 0:\n            while b % a == 0:\n                b += a\n                operations += 1\n            if c % b == 0:\n                outputs.append(operations)\n                continue\n        if c % b == 0:\n            while c % b == 0:\n                c += b\n                operations += 1\n            if a % c == 0:\n                outputs.append(operations)\n                continue\n        if b % c == 0:\n            while b % c == 0:\n                b += c\n                operations += 1\n            if a % b == 0:\n                outputs.append(operations)\n                continue\n        if c % a == 0:\n            while c % a == 0:\n                c += a\n                operations += 1\n            if b % c == 0:\n                outputs.append(operations)\n                continue\n        if b % a == 0:\n            while b % a == 0:\n                b += a\n                operations += 1\n            if c % b == 0:\n                outputs.append(operations)\n                continue\n        if c % b == 0:\n            while c % b == 0:\n                c += b\n                operations += 1\n            if a % c == 0:\n                outputs.append(operations)\n                continue\n        if b % c == 0:\n            while b % c == 0:\n                b += c\n                operations += 1\n            if a % b == 0:\n                outputs.append(operations)\n                continue\n        if c % a == 0:\n            while c % a == 0:\n                c += a\n                operations += 1\n            if b % c == 0:\n                outputs.append(operations)\n                continue\n        if b % a == 0:\n            while b % a == 0:\n                b += a\n                operations += 1\n            if c % b == 0:\n                outputs.append(operations)\n                continue\n        if c % b == 0:\n            while c % b == 0:\n                c += b\n                operations += 1\n            if a % c == 0:\n                outputs.append(operations)\n                continue\n        if b % c == 0:\n            while b % c == 0:\n                b += c\n                operations += 1\n            if a % b == 0:\n                outputs.append(operations)\n                continue\n        if c % a == 0:\n            while c % a == 0:\n                c += a\n                operations += 1\n            if b % c == 0:\n                outputs.append(operations)\n                continue\n        if b % a == 0:\n            while b % a == 0:\n                b += a\n                operations += 1\n            if c % b == 0:\n                outputs.append(operations)\n                continue\n        if c % b == 0:\n            while c % b == 0:\n                c += b\n                operations += 1\n            if a % c == 0:\n                outputs.append(operations)\n                continue\n        if b % c == 0:\n            while b % c == 0:\n                b += c\n                operations += 1\n            if a % b == 0:\n                outputs.append(operations)\n                continue\n        if c % a == 0:\n            while c % a == 0:\n                c += a\n                operations += 1\n            if b % c == 0:\n                outputs.append(operations)\n                continue\n        if b % a == 0:"
    },
    {
        "number": 4012,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    for i in range(t):\n        a, b, c = map(int, stdin.split()[1:])\n        if b % a == 0 and c % b == 0:\n            res = 0\n            print(res)\n            print(a, b, c)\n        else:\n            if b % a == 0:\n                b //= a\n                res = 1\n            else:\n                res = 2\n            if c % b == 0:\n                c //= b\n            else:\n                c -= a\n                res += 1\n            print(res)\n            print(a, b, c)"
    },
    {
        "number": 4012,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    for line in stdin.split('\\n')[1:]:\n        a, b, c = map(int, line.split())\n        ans = float('inf')\n        for i in range(1, a+1):\n            for j in range(1, b+1):\n                for k in range(1, c+1):\n                    if i*a + j*b + k*c == b*a and b % a == 0 and c % b == 0:\n                        ans = min(ans, i+j+k)\n        if ans == float('inf'):\n            print(ans)\n        else:\n            print(ans)\n            print(a, b, c)\n\nstdin = \"\"\"\n8\n1 2 3\n123 321 456\n5 10 15\n15 18 21\n100 100 101\n1 22 29\n3 19 38\n6 30 46\n\"\"\"\n\nsolution(stdin)"
    },
    {
        "number": 4012,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        a, b, c = map(int, stdin.readline().strip().split())\n        ans = 0\n        if a < b:\n            ans += (b - a) // 2 + 1\n        if b < a:\n            ans += (a - b) // 2 + 1\n        if c < b:\n            ans += (b - c) // 2 + 1\n        if b < c:\n            ans += (c - b) // 2 + 1\n        if ans == 0:\n            print(2)\n            print(a, b, c)\n        elif ans == 1:\n            print(ans)\n            if b % a == 0 and c % b == 0:\n                print(a, b, c)\n            elif b % c == 0 and c % a == 0:\n                print(c, b, a)\n            else:\n                print(b, a, c)\n        else:\n            print(ans)\n            if b % a == 0 and c % b == 0:\n                print(a, b, c)\n            elif b % c == 0 and c % a == 0:\n                print(c, b, a)\n            else:\n                print(b, a, c)\n\nstdin = \"\"\"\n8\n1 2 3\n123 321 456\n5 10 15\n15 18 21\n100 100 101\n1 22 29\n3 19 38\n6 30 46\n\"\"\""
    },
    {
        "number": 4012,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.split('\\n')\n    inputs = [line.split() for line in inputs if line!= '']\n    outputs = []\n    for input_ in inputs:\n        a, b, c = map(int, input_)\n        divisors = set()\n        for i in range(a, b+1):\n            for j in range(i, c+1):\n                if i*j % (b*c) == 0:\n                    divisors.add(j)\n        if not divisors:\n            divisors.add(c)\n        res = min(len(divisors), b-a+1, c-b+1)\n        if res == 0:\n            res = 1\n        outputs.append(f'{res}\\n{sorted(list(divisors))[0]} {sorted(list(divisors))[-1]} {c}')\n    return '\\n'.join(outputs)"
    },
    {
        "number": 4012,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    res = \"\"\n    for i in range(n):\n        a, b, c = map(int, stdin.readline().strip().split())\n        count = 0\n        if a > b or b > c:\n            a, b, c = b, c, a\n            count = 1\n        while b % a!= 0 or c % b!= 0:\n            if b % 2 == 0:\n                b += 1\n            else:\n                b -= 1\n            count += 1\n        res += str(count) + \"\\n\"\n        res += str(a) + \" \" + str(b) + \" \" + str(c) + \"\\n\"\n    return res.strip()"
    },
    {
        "number": 4012,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split('\\n')\n    t = int(input.pop(0))\n    for i in range(t):\n        a, b, c = map(int, input.pop(0).split())\n        if a == b == c:\n            print('1')\n            print(a, a, a)\n            continue\n        if a > b:\n            a, b = b, a\n        if a > c:\n            a, c = c, a\n        if b > c:\n            b, c = c, b\n        if b % a == 0 and c % b == 0:\n            print('1')\n            print(a, b, c)\n            continue\n        if b % a == 0:\n            ans = b // a\n        elif c % b == 0:\n            ans = c // b\n        else:\n            ans = 0\n        print(ans)\n        if ans == 0:\n            print(a, b, c)\n        else:\n            print(a, ans * a, b)"
    },
    {
        "number": 4012,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    for i in range(t):\n        a, b, c = map(int, stdin.readline().split())\n        x = a\n        y = b\n        z = c\n        count = 0\n        while True:\n            if x > y:\n                if x % y == 0 and y % z == 0:\n                    break\n                x += 1\n            elif y > z:\n                if y % z == 0 and z % x == 0:\n                    break\n                y += 1\n            elif z > x:\n                if z % x == 0 and x % y == 0:\n                    break\n                z += 1\n            count += 1\n        print(count)\n        print(f\"{x} {y} {z}\")\n    return \"\""
    },
    {
        "number": 4012,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    cases = int(stdin.split()[0])\n    output = \"\"\n    for i in range(cases):\n        a, b, c = map(int, stdin.readline().split())\n        if a > b:\n            a, b = b, a\n        if b % a == 0 and c % b == 0:\n            output += \"0\\n\"\n            output += f\"{a} {b} {c}\\n\"\n        elif b % a == 0:\n            output += \"1\\n\"\n            output += f\"{a} {b} {c}\\n\"\n        elif c % b == 0:\n            output += \"1\\n\"\n            output += f\"{a} {c} {b}\\n\"\n        else:\n            if a == c:\n                output += \"2\\n\"\n                output += f\"{a} {c} {b}\\n\"\n            else:\n                output += \"3\\n\"\n                output += f\"{a} {b} {c}\\n\"\n    return output[:-1]\n\nstdin = \"\"\"\n8\n1 2 3\n123 321 456\n5 10 15\n15 18 21\n100 100 101\n1 22 29\n3 19 38\n6 30 46\n\"\"\"\n\nprint(solution(stdin)) # Output: \"0\\n1 1 3\\n102\\n114 228 456\\n4\\n4 8 16\\n6\\n18 18 18\\n1\\n100 100 100\\n7\\n1 22 22\\n2\\n1 19 38\\n8\\n6 24 48\\n\""
    },
    {
        "number": 4012,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    This function solves the problem of finding minimum number of operations to get\n    three integers A, B, and C such that B is divisible by A and C is divisible by B.\n\n    Args:\n        stdin (str): input string\n\n    Returns:\n        str: output string containing the solution to the problem\n    \"\"\"\n    # convert input string to list of integers\n    inputs = [list(map(int, input.strip().split())) for input in stdin.split('\\n')][1:]\n\n    # iterate through test cases and solve each one\n    for testcase in inputs:\n        # sort testcase in ascending order\n        testcase.sort()\n        # initialize variables\n        count = 0\n        curr = [testcase[0], testcase[1], testcase[2]]\n        # iterate through the list of integers\n        for i in range(len(testcase)):\n            # if we have already found the solution, break out of loop\n            if curr[0] == curr[1] and curr[1] == curr[2]:\n                break\n            # find the next integer to increment or decrement\n            if curr[0]!= curr[1] and curr[1] == curr[2]:\n                next_int = curr[0]\n            elif curr[0] == curr[1] and curr[1]!= curr[2]:\n                next_int = curr[1]\n            else:\n                next_int = curr[2]\n            # increment or decrement next integer and check if it is valid\n            if next_int < curr[0]:\n                curr[0] += 1\n                if curr[0] == curr[1] and curr[1]!= curr[2]:\n                    curr[1] += 1\n            elif next_int > curr[0]:\n                curr[0] -= 1\n                if curr[0] == curr[1] and curr[1]!= curr[2]:\n                    curr[1] -= 1\n            elif next_int < curr[1]:\n                curr[1] += 1\n                if curr[1] == curr[2]:\n                    curr[0] += 1\n            elif next_int > curr[1]:\n                curr[1] -= 1\n                if curr[1] == curr[2]:\n                    curr[0] -= 1\n            elif next_int < curr[2]:\n                curr[2] += 1\n            elif next_int > curr[2]:\n                curr[2] -= 1\n            count += 1\n        # print the answer\n        print(count)\n        print(*curr)\n\n    return ''\n"
    },
    {
        "number": 4013,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    a.sort()\n    return max(a[-1] - a[0], a[-2] - a[1])"
    },
    {
        "number": 4013,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    a.sort()\n    return str(a[-1] - a[1])\n"
    },
    {
        "number": 4013,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    return str(a[-1] - a[1])\n\nprint(solution(stdin))"
    },
    {
        "number": 4013,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n    a.sort()\n    return str(max(a[1:] + a[:n-1]) - min(a[1:] + a[:n-1]))\n\nprint(solution(\"4\\n1 3 3 7\")) # Output: 2\nprint(solution(\"2\\n1 100000\")) # Output: 0"
    },
    {
        "number": 4013,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # get input\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n\n    # calculate instability\n    instability = max(a) - min(a)\n\n    # remove one element\n    for i in range(n):\n        new_a = a[:i] + a[i+1:]\n        new_instability = max(new_a) - min(new_a)\n        if new_instability < instability:\n            instability = new_instability\n\n    return str(instability)"
    },
    {
        "number": 4013,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    if n == 2:\n        return '0'\n    else:\n        a.sort()\n        return str(max(a[1:], key=lambda x: x-a[0]))"
    },
    {
        "number": 4013,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    a.sort()\n    return str(a[n-1] - a[0])"
    },
    {
        "number": 4013,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    max_elem = max(a)\n    min_elem = min(a)\n    instability = max_elem - min_elem\n    if len(set(a)) == 1:\n        return \"0\"\n    return str(instability)"
    },
    {
        "number": 4013,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n\n    # Calculate instability\n    instability = max(a) - min(a)\n\n    # Calculate minimum instability by removing one element\n    for i in range(n):\n        instability_without_i = max(a[:i] + a[i+1:]) - min(a[:i] + a[i+1:])\n        if instability_without_i < instability:\n            instability = instability_without_i\n\n    # Output result\n    return str(instability)"
    },
    {
        "number": 4013,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    a.sort()\n    return max(a[i] - a[i-1] for i in range(1, n))\n\ndef"
    },
    {
        "number": 4014,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.strip().split())\n    special_days = []\n    for i in range(m):\n        s, d, c = map(int, stdin.strip().split())\n        special_days.append((s, d, c))\n    schedule = [0] * (n + 1)\n    for i in range(1, n + 1):\n        if any(s <= i <= d for s, d, c in special_days):\n            if sum(c for s, d, c in special_days if s <= i <= d) > 0:\n                for j in range(i - 1, max(s for s, d, c in special_days if s <= i <= d) - 1, -1):\n                    if schedule[j] == 0:\n                        schedule[j] = 1\n                        break\n                schedule[i] = 2\n            else:\n                schedule[i] = 3\n        else:\n            schedule[i] = 0\n    if sum(1 for i in schedule if i == 1) > m:\n        return \"-1\"\n    return \" \".join(str(i) for i in schedule)\n\nprint(solution(\"5 2\\n1 3 1\\n1 5 1\"))\nprint(solution(\"3 2\\n1 3 1\\n1 2 1\"))\nprint(solution(\"10 3\\n4 7 2\\n1 10 3\\n8 9 1\"))"
    },
    {
        "number": 4014,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.strip().split())\n    exams = []\n    for i in range(m):\n        s, d, c = map(int, stdin.strip().split())\n        exams.append((s, d, c))\n\n    # sort exams by day of exam\n    exams.sort(key=lambda x: x[1])\n\n    # initialize dp table\n    dp = [0]*(n+1)\n\n    # fill dp table\n    for i in range(m):\n        s, d, c = exams[i]\n        # for each exam, we can either rest or prepare for it\n        # for each day, we can either do nothing, pass the exam, or prepare for it\n        for j in range(s, d+1):\n            # rest or pass exam\n            dp[j] = max(dp[j], dp[j-1])\n            if j == s:\n                # if we are in the day of an exam, we can prepare for it\n                dp[j] = max(dp[j], dp[j-1]+1)\n            # prepare for the exam\n            dp[j] = max(dp[j], dp[j-1]+c)\n\n    # if we haven't passed all exams, return -1\n    if dp[n] < m:\n        return -1\n\n    # construct answer\n    answer = [0]*(n+1)\n    for i in range(m):\n        s, d, c = exams[i]\n        # for each exam, we can either rest or prepare for it\n        # for each day, we can either do nothing, pass the exam, or prepare for it\n        for j in range(s, d+1):\n            # rest or pass exam\n            answer[j] = max(answer[j], answer[j-1])\n            if j == s:\n                # if we are in the day of an exam, we can prepare for it\n                answer[j] = max(answer[j], answer[j-1]+1)\n            # prepare for the exam\n            answer[j] = max(answer[j], answer[j-1]+c)\n\n    # if we have passed all exams, fill the rest of the answer with 0\n    for i in range(n+1, len(answer)):\n        answer[i] = 0\n\n    # print answer\n    return''.join(map(str, answer))"
    },
    {
        "number": 4014,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    exams = []\n    for _ in range(m):\n        s, d, c = map(int, stdin.split())\n        exams.append((s, d, c))\n    # sort exams by their start date\n    exams = sorted(exams, key=lambda x: x[0])\n\n    # check if it is possible to pass all exams\n    for i in range(1, len(exams)):\n        if exams[i][0] < exams[i-1][1]:\n            return \"-1\"\n\n    # calculate the maximum number of days that can be pretended for each exam\n    max_days = []\n    for i in range(m):\n        max_days.append(exams[i][1] - exams[i][0] - exams[i][2])\n\n    # sort exams by their start date again\n    exams = sorted(exams, key=lambda x: x[0])\n\n    # initialize the schedule\n    schedule = [0] * n\n\n    # add the first exam to the schedule\n    schedule[exams[0][0]-1] = exams[0][2] + 1\n\n    # add the rest of the exams to the schedule\n    for i in range(1, m):\n        exam = exams[i]\n        if exam[1] <= schedule[exam[0]-1]:\n            return \"-1\"\n        for j in range(exam[0], exam[1]):\n            if schedule[j-1] >= exams[i-1][1]:\n                return \"-1\"\n            schedule[j-1] = i + 1\n\n    # add the rest of the days to the schedule\n    for i in range(n):\n        if schedule[i] == 0:\n            schedule[i] = 1\n\n    return \" \".join(map(str, schedule))\n"
    },
    {
        "number": 4014,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    exams = []\n    for i in range(m):\n        s_i, d_i, c_i = map(int, stdin.split())\n        exams.append([s_i, d_i, c_i])\n    \n    dp = [[-1 for _ in range(n + 1)] for _ in range(m + 1)]\n    dp[0][0] = 0\n    \n    for i in range(1, m + 1):\n        for j in range(n + 1):\n            if dp[i - 1][j]!= -1:\n                if j >= exams[i - 1][0]:\n                    dp[i][j] = max(dp[i][j], dp[i - 1][j])\n                if j + exams[i - 1][2] - 1 <= exams[i - 1][1] - 1:\n                    dp[i][j] = max(dp[i][j], dp[i - 1][j] + 1)\n                    \n    if dp[m][n]!= m:\n        return \"-1\"\n    \n    ans = [0] * (n + 1)\n    ans[0] = (m + 1)\n    for i in range(1, n + 1):\n        if i % exams[0][2] == 0:\n            ans[i] = exams[0][0]\n        elif i % exams[1][2] == 0:\n            ans[i] = exams[1][0]\n        else:\n            if dp[0][i] == 0:\n                ans[i] = 0\n            else:\n                ans[i] = dp[0][i]\n                for j in range(m):\n                    if ans[i] >= exams[j][0] and ans[i] < exams[j][1]:\n                        ans[i] = exams[j][0]\n                        break\n                    if ans[i] == dp[j][i] + 1:\n                        ans[i] = exams[j][0]\n                        break\n                    if ans[i] == dp[j][i] - 1:\n                        ans[i] = ans[i - exams[j][2] + 1]\n                        break\n                    \n    return \" \".join(map(str, ans))"
    },
    {
        "number": 4014,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    schedule = [[0 for j in range(n+1)] for i in range(m+1)]\n    for i in range(m):\n        s_i, d_i, c_i = list(map(int, stdin.split()))\n        for j in range(s_i, d_i):\n            if schedule[i][j] == 0:\n                schedule[i][j] = c_i\n            else:\n                schedule[i][j] += c_i\n    for j in range(n):\n        for i in range(m):\n            if schedule[i][j] > 0:\n                for k in range(j+1, n+1):\n                    schedule[i][k] += schedule[i][j]\n    for i in range(m):\n        for j in range(n):\n            if schedule[i][j] == n:\n                schedule[i][j] = i+1\n            elif schedule[i][j] > 0:\n                if schedule[i][j] >= n:\n                    return \"-1\"\n                for k in range(j+1, n):\n                    if schedule[i][k] == 0:\n                        schedule[i][k] = 1\n                        break\n    result = \"\"\n    for i in range(n):\n        if all(schedule[i][j] == 0 for j in range(n)):\n            result += \"0 \"\n        elif schedule[schedule[i][j]-1][j] == 0:\n            result += \"2 \"\n        else:\n            result += \"1 \"\n    return result.rstrip()\n"
    },
    {
        "number": 4014,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    days = [0] * n\n    for i in range(m):\n        s, d, c = map(int, stdin.split())\n        for j in range(s-1, d-1):\n            days[j] = i+1\n    for i in range(n):\n        if days[i] == 0:\n            days[i] = m+1\n    if days.count(m+1) < m:\n        return -1\n    return \" \".join(map(str, days))"
    },
    {
        "number": 4014,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    exams = [list(map(int, stdin.split())) for _ in range(m)]\n\n    # Store the total number of days needed to prepare for each exam\n    total_days = [exam[2] for exam in exams]\n\n    # Check if it is possible to prepare and pass all exams\n    if sum(total_days) > n:\n        return \"-1\"\n\n    # Create a list to store the number of days each exam will be conducted\n    days_taken = [0] * m\n\n    # Create a list to store the number of days each exam will be conducted\n    days_prepared = [0] * m\n\n    # Create a list to store the index of the exam which will be conducted in each day\n    exam_schedule = [0] * n\n\n    # Create a list to store the number of days each exam will be conducted\n    exam_status = [0] * m\n\n    # Create a list to store the number of days each exam will be conducted\n    exam_days_taken = [0] * m\n\n    # Iterate through each day\n    for day in range(n):\n        # Check if it is a day of some exam\n        if any(s <= day < d for s, d, _ in exams):\n            # Check if it is a day when exam is conducted\n            for i in range(m):\n                if exams[i][0] <= day < exams[i][1]:\n                    # Exam is conducted, update the schedule\n                    days_taken[i] += 1\n                    exam_schedule[day] = i + 1\n                    exam_status[i] = 1\n                    exam_days_taken[i] += 1\n                    break\n            # If no exam is conducted in this day, add a rest\n        else:\n            exam_schedule[day] = 0\n\n    # Check if it is possible to prepare and pass all exams\n    if sum(days_taken)!= sum(total_days):\n        return \"-1\"\n\n    # Check if all exams are passed\n    for i in range(m):\n        if exam_days_taken[i]!= total_days[i]:\n            return \"-1\"\n\n    # Create a list to store the number of days to prepare for each exam in each day\n    days_to_prepare = [[0] * m for _ in range(n)]\n\n    # Iterate through each day\n    for day in range(n):\n        # Check if it is a day to prepare for some exam\n        if exam_schedule[day] > 0:\n            exam_index = exam_schedule[day] - 1\n            # Update the number of days to prepare for this exam\n            for j in range(day, exams[exam_index][0]):\n                days_to_prepare[j][exam_index] = 1\n            # Update the number of days to prepare for this exam\n            for j in range(exams[exam_index][0], exams[exam_index][1]):\n                days_to_prepare[j][exam_index] = exams[exam_index][2]\n\n    # Create a list to store the final schedule\n    schedule = [0] * (n + m)\n\n    # Update the final schedule\n    for i in range(n):\n        schedule[i] = exam_schedule[i]\n        if days_to_prepare[i][schedule[i] - 1] == 1:\n            schedule[i] = m + 1\n        elif days_to_prepare[i][schedule[i] - 1] == exams[schedule[i] - 2][2]:\n            schedule[i] = schedule[i]\n        else:\n            schedule[i] = schedule[i] - 1\n\n    # Return the final schedule\n    return \" \".join(map(str, schedule))"
    },
    {
        "number": 4014,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    exams = []\n    for _ in range(m):\n        s, d, c = map(int, stdin.split())\n        exams.append((s, d, c))\n    \n    dp = [[0] * (n+1) for _ in range(m+1)]\n    for i in range(m, 0, -1):\n        for j in range(1, n+1):\n            if i == m:\n                dp[i][j] = 1\n            else:\n                for k in range(j, exams[i-1][1]):\n                    dp[i][j] += dp[i+1][k]\n                dp[i][j] *= exams[i-1][2]\n                dp[i][j] %= 1000000007\n    \n    if dp[1][n] == 0:\n        return '-1'\n    else:\n        dp[1][n] -= 1\n    \n    schedule = [0] * (n+1)\n    for i in range(m, 0, -1):\n        for j in range(exams[i-1][0]-1, exams[i-1][1]):\n            for k in range(j, exams[i-1][1]):\n                schedule[j] += dp[i+1][k]\n                schedule[j] %= 1000000007\n            schedule[j] *= exams[i-1][2]\n            schedule[j] %= 1000000007\n    \n    return''.join(map(str, schedule)) +'' + str(dp[1][n]+1)"
    },
    {
        "number": 4014,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.strip().split())\n    days = [0] * (n+1)\n    for _ in range(m):\n        s, d, c = map(int, stdin.strip().split())\n        for i in range(s, d):\n            if days[i] == 0:\n                days[i] = c\n            else:\n                days[i] += c\n    for i in range(1, n+1):\n        if days[i] > 0 and days[i] > i:\n            return \"-1\"\n    for i in range(1, n+1):\n        if days[i] > 0 and days[i] < i:\n            return \"-1\"\n    schedule = [0] * n\n    for i in range(n):\n        if i == 0 or days[i] > days[i-1]:\n            if days[i] == 0:\n                schedule[i] = 0\n            else:\n                schedule[i] = i+1\n    for i in range(m):\n        s, d, c = map(int, stdin.strip().split())\n        for j in range(s, d):\n            if schedule[j-1] == 0:\n                schedule[j-1] = i+1\n    return \" \".join(map(str, schedule)) if all(i > 0 for i in schedule) else \"-1\""
    },
    {
        "number": 4014,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    exams = []\n    for _ in range(m):\n        s, d, c = map(int, stdin.split())\n        exams.append((s, d, c))\n    \n    days = [0] * n\n    for i in range(m):\n        s, d, c = exams[i]\n        for j in range(s-1, d):\n            if days[j] == 0:\n                days[j] = i + 1\n    \n    if any(x == 0 for x in days):\n        return '-1'\n    \n    for i in range(m):\n        s, d, c = exams[i]\n        count = days[s-1]\n        for j in range(s, d):\n            if days[j-1]!= count:\n                return '-1'\n            if days[j] == 0:\n                days[j] = i + 1\n            elif days[j]!= i + 1:\n                return '-1'\n            count += 1\n    \n    return''.join(map(str, days))"
    },
    {
        "number": 4015,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    count = 0\n    while n!= m:\n        if n % 2 == 0:\n            n //= 2\n            count += 1\n        elif n % 3 == 0:\n            n //= 3\n            count += 1\n        else:\n            return -1\n    return count\n\nstdin = input()\nprint(solution(stdin))"
    },
    {
        "number": 4015,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n == m:\n        return \"0\"\n    if m == 1:\n        return \"-1\"\n    if n > m:\n        return \"-1\"\n    step = 0\n    while n!= m:\n        if n < m:\n            n = n * 2\n        else:\n            n = n // 2\n        step += 1\n    return str(step)"
    },
    {
        "number": 4015,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n\n    if n == m:\n        return \"0\"\n\n    count = 0\n    while n!= m:\n        if n > m:\n            n /= 2\n        elif n < m:\n            n *= 3\n        count += 1\n\n    return str(count) if count > 0 else \"-1\"\n"
    },
    {
        "number": 4015,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n == m:\n        return \"0\"\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0 and m % i == 0:\n            if (n // i) % 3 == 0 and (m // i) % 3 == 0:\n                return str((n // i) * (m // i))\n    return \"-1\"\n"
    },
    {
        "number": 4015,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n == m:\n        return 0\n    if n > m:\n        return -1\n    step = 0\n    while n!= m:\n        if m % 2 == 0:\n            m /= 2\n        elif m % 3 == 0:\n            m /= 3\n        else:\n            return -1\n        step += 1\n    return step\n"
    },
    {
        "number": 4015,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n == m:\n        return 0\n    if n > m:\n        return -1\n    moves = 0\n    while n!= m:\n        if n % 2 == 0:\n            n //= 2\n        elif n % 3 == 0:\n            n //= 3\n        else:\n            return -1\n        moves += 1\n    return moves"
    },
    {
        "number": 4015,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.strip().split())\n    count = 0\n    while n!= m:\n        if n % 2 == 0:\n            n //= 2\n        elif n % 3 == 0:\n            n //= 3\n        else:\n            return \"-1\"\n        count += 1\n    return str(count)\n"
    },
    {
        "number": 4015,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if m < n:\n        return -1\n    if m == n:\n        return 0\n    count = 0\n    while m > n:\n        if m % 2 == 0:\n            m //= 2\n        else:\n            m = 3*m + 1\n        count += 1\n    return count\n\nstdin = input()\nprint(solution(stdin))"
    },
    {
        "number": 4015,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.strip().split())\n    steps = 0\n    while n < m:\n        if m % 2 == 0:\n            m //= 2\n        else:\n            m -= 1\n        steps += 1\n    if n == m:\n        return str(steps)\n    else:\n        return \"-1\""
    },
    {
        "number": 4015,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    if n == m:\n        return \"0\"\n    for i in range(n, m+1):\n        if i == 1:\n            return \"-1\"\n        if i % 3 == 0:\n            return str((m-n)//3)\n        if i % 2 == 0:\n            return str((m-n)//2)\n    return \"-1\"\n"
    },
    {
        "number": 4016,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    t = stdin.strip().split()[1]\n    s = t * k\n    return s"
    },
    {
        "number": 4016,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    t = stdin.split()[1]\n    if n == 1:\n        return t * k\n    s = ''\n    for i in range(n):\n        s += t\n    for i in range(k-1):\n        s += t[:-i-1]\n    return s"
    },
    {
        "number": 4016,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    t = stdin.split()[1]\n    s = ''\n    count = 0\n    for i in range(len(t) - n + 1):\n        if t == t[i:i+n]:\n            count += 1\n            s += t[i:i+n]\n        if count == k:\n            break\n    return s"
    },
    {
        "number": 4016,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    t = stdin.strip()\n    if k > n**2:\n        return \"\"\n    for i in range(k):\n        if k - i < n:\n            return \"\"\n    res = \"\"\n    for i in range(k):\n        res += t\n    return res + res[-1] * (n - k)"
    },
    {
        "number": 4016,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    t = stdin.split()[1]\n\n    # Create all possible substrings of t of length n\n    substrings = set()\n    for i in range(len(t) - n + 1):\n        substrings.add(t[i:i+n])\n\n    # Find the minimum length string s that has exactly k substrings equal to t\n    min_length = len(t)\n    s = \"\"\n    for substring in substrings:\n        if t.count(substring) == k:\n            if len(substring) < min_length:\n                min_length = len(substring)\n                s = substring\n\n    # Generate s by appending t to itself k times\n    return s*k\n"
    },
    {
        "number": 4016,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    t = stdin.split()[1]\n\n    if k == 1:\n        return t * n\n    \n    if k == n:\n        return t * k\n    \n    ans = ''\n    i = 0\n    while len(ans) < k * n:\n        if len(ans) % n == 0:\n            ans += t\n            i += 1\n        else:\n            ans += ans[-n:]\n            i += 1\n    \n    return ans"
    },
    {
        "number": 4016,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    t = stdin.split()[1]\n    \n    for i in range(len(t) - n + 1):\n        if t * (k // (len(t) // n)) in t[i:i+n*k]:\n            return t[i:i+n*k]\n    return \"\" # should never happen"
    },
    {
        "number": 4016,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    t = stdin.readline().strip()\n    s = \"\"\n    for i in range(k):\n        s += t\n    return s\n"
    },
    {
        "number": 4016,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    t = stdin.splitlines()[1]\n    s = ''\n    for i in range(k):\n        s += t\n    return s"
    },
    {
        "number": 4016,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    t = stdin.split()[1]\n\n    # Initialize a list to store all possible strings s\n    # We will add all possible strings of length n to s\n    s = []\n\n    # Create all possible strings of length n\n    for i in range(2**n):\n        binary = bin(i)[2:].zfill(n)\n        s.append(''.join(t[j] if binary[j] == '1' else '' for j in range(n)))\n\n    # Sort the list of possible strings s in lexicographical order\n    s = sorted(s)\n\n    # Print the kth string in the sorted list of strings\n    return s[k-1]\n"
    },
    {
        "number": 4017,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    nice_indices = []\n    for j in range(n):\n        a_sum = sum(a[:j] + a[j+1:])\n        if a[j] == a_sum:\n            nice_indices.append(j+1)\n            a[j] = 0\n    print(len(nice_indices))\n    print(*nice_indices)"
    },
    {
        "number": 4017,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    s = sum(a)\n    nice_indices = []\n    for j in range(n):\n        s -= a[j]\n        if s == a[j]:\n            nice_indices.append(j)\n            s += a[j]\n    if len(nice_indices) > 0:\n        print(len(nice_indices))\n        print(\" \".join(map(str, nice_indices)))\n    else:\n        print(0)\n        print(\"\")"
    },
    {
        "number": 4017,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    res = []\n    for i in range(n):\n        s = sum(a[:i] + a[i+1:])\n        if s == a[i]:\n            res.append(i+1)\n    if len(res) == 0:\n        return \"0\\n\"\n    else:\n        return f\"{len(res)}\\n{res[0]}\" + ''.join(f\" {x}\" for x in res[1:]) + \"\\n\""
    },
    {
        "number": 4017,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n    \n    # Check if the array is good\n    if sum(a) % len(a)!= 0:\n        return \"0\\n\"\n    \n    k = 0\n    nice_indices = []\n    \n    # Remove each element and check if the resulting array is good\n    for j in range(n):\n        a_copy = a.copy()\n        a_copy.pop(j)\n        if sum(a_copy) % len(a_copy) == 0:\n            k += 1\n            nice_indices.append(j)\n    \n    # Print output\n    if k == 0:\n        return \"0\\n\"\n    else:\n        return f\"{k}\\n{nice_indices}\\n\""
    },
    {
        "number": 4017,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    nice = []\n    for i in range(n):\n        s = sum(a[:i] + a[i+1:])\n        if a[i] == s:\n            nice.append(i)\n            a[i] = -1\n    k = len(nice)\n    if k == 0:\n        return \"0\\n\"\n    return f\"{k}\\n\" + \" \".join(map(str, nice)) + \"\\n\""
    },
    {
        "number": 4017,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    nice_indices = []\n    for i in range(n):\n        for j in range(i+1, n):\n            temp_a = a[:i] + a[i+1:j] + a[j+1:]\n            if sum(temp_a) == a[i]:\n                nice_indices.append(i)\n    k = len(nice_indices)\n    if k == 0:\n        return \"0\\n\"\n    else:\n        nice_indices_str = \" \".join(map(str, nice_indices))\n        return f\"{k}\\n{nice_indices_str}\\n\""
    },
    {
        "number": 4017,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n\n    nice_indices = []\n    for j in range(n):\n        sum_a = sum(a[:j] + a[j+1:])\n        if a[j] == sum_a:\n            nice_indices.append(j)\n\n    if len(nice_indices) == 0:\n        return \"0\\n\"\n\n    return f\"{len(nice_indices)}\\n{' '.join(map(str, nice_indices))}\\n\""
    },
    {
        "number": 4017,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    count = 0\n    nice_indices = []\n    for i in range(n):\n        s = sum(a[:i] + a[i+1:])\n        if a[i] == s:\n            count += 1\n            nice_indices.append(i+1)\n    if count == 0:\n        return \"0\\n\"\n    else:\n        return str(count) + \"\\n\" + \" \".join(map(str, nice_indices)) + \"\\n\"\n\nprint(solution(\"5\\n2 5 1 2 2\")) # Output: 3\\n4 1 5\\n\nprint(solution(\"4\\n8 3 5 2\")) # Output: 2\\n1 4\\n\nprint(solution(\"5\\n2 1 2 4 3\")) # Output: 0\\n"
    },
    {
        "number": 4017,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    \n    # Initialize variables\n    k = 0\n    nice_indices = []\n    \n    # Check each index for being a nice index\n    for j in range(n):\n        # Remove the j-th element\n        a_copy = a.copy()\n        a_copy.pop(j)\n        # Check if the resulting array is good\n        if sum(a_copy) == a[j]:\n            k += 1\n            nice_indices.append(j+1)\n    \n    # Print the results\n    print(k)\n    if k > 0:\n        print(\" \".join(map(str, nice_indices)))\n    else:\n        print(\"\")\n    \n    # Return the results as a string\n    return f\"{k}\\n{' '.join(map(str, nice_indices))}\""
    },
    {
        "number": 4017,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.strip().split())\n    sum_a = sum(a)\n    good_indices = []\n    for i in range(n):\n        if sum(a[:i] + a[i+1:]) == sum_a:\n            good_indices.append(i+1)\n    k = len(good_indices)\n    result = '\\n'.join(map(str, [k] + good_indices))\n    return result"
    },
    {
        "number": 4018,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    s = stdin.split()[2]\n    count = 0\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            subsequence = s[i:j]\n            if subsequence not in count:\n                count[subsequence] = 1\n                if len(count) == k:\n                    return sum([n - len(subsequence) for subsequence in count])\n    return -1"
    },
    {
        "number": 4018,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.strip()\n    if k > len(set(s)):\n        return -1\n    cost = [0] * (n + 1)\n    for i in range(1, n + 1):\n        for j in range(i):\n            if s[j:i] not in s[:j]:\n                cost[i] = max(cost[i], cost[j] + (n - i))\n    return cost[n] if cost[n] <= k else -1\n\nstdin = \"4 5\\nasdf\"\nprint(solution(stdin)) # Output: 4\n\nstdin = \"5 6\\naaaaa\"\nprint(solution(stdin)) # Output: 15\n\nstdin = \"5 7\\naaaaa\"\nprint(solution(stdin)) # Output: -1\n\nstdin = \"10 100\\najihiushda\"\nprint(solution(stdin)) # Output: 233"
    },
    {
        "number": 4018,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.strip()\n\n    if k > 10**12 or k <= 0:\n        return -1\n\n    if k > n:\n        return -1\n\n    dp = [[0] * (k+1) for _ in range(n+1)]\n\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            dp[i][j] = dp[i-1][j]\n            if s[i-1] not in dp[i]:\n                dp[i][j] = min(dp[i][j], dp[i-1][j-1] + (n-i+1))\n            else:\n                dp[i][j] = min(dp[i][j], dp[i-1][j-1])\n\n    if dp[n][k] == float('inf'):\n        return -1\n\n    return dp[n][k]\n"
    },
    {
        "number": 4018,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.strip().split())\n    s = stdin.strip().split()[-1]\n    if len(set(s)) < k:\n        return -1\n    dp = [0] * (1 << n)\n    for i in range(1, 1 << n):\n        dp[i] = dp[i - 1] + n - __builtin__.bin(i).count('1')\n    return dp[-1]"
    },
    {
        "number": 4018,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.split()[1]\n    dp = [[float('inf')] * (n+1) for _ in range(k+1)]\n    for i in range(n+1):\n        dp[1][i] = i\n    for i in range(2, k+1):\n        for j in range(1, n+1):\n            for l in range(1, j+1):\n                if s[l-1] == s[j-1]:\n                    dp[i][j] = min(dp[i][j], dp[i-1][l-1] + j - l)\n                else:\n                    dp[i][j] = min(dp[i][j], dp[i-1][l-1] + j - l + 1)\n    return dp[k][n] if dp[k][n]!= float('inf') else -1\n\nprint(solution(\"4 5 asdf\")) # Output: 4\nprint(solution(\"5 6 aaaaa\")) # Output: 15\nprint(solution(\"5 7 aaaaa\")) # Output: -1\nprint(solution(\"10 100 ajihiushda\")) # Output: 233"
    },
    {
        "number": 4018,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.split()[1]\n    costs = [0] * (n + 1)\n    for i in range(1, n + 1):\n        for j in range(i):\n            if s[j:i] not in s[:j]:\n                costs[i] = max(costs[i], costs[j] + n - i)\n    if costs[n] < k:\n        return -1\n    return costs[n]"
    },
    {
        "number": 4018,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    n, k = map(int, stdin.split())\n    s = stdin.strip()\n\n    # Calculate min cost\n    costs = [0] * (n + 1)\n    dp = [[0] * (k + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, k + 1):\n            dp[i][j] = dp[i - 1][j]\n            if costs[j] + (n - i) <= costs[j - 1]:\n                dp[i][j] = min(dp[i][j], dp[i - 1][j - 1] + (n - i))\n            costs[j] += 1\n\n    # Check if min cost is possible\n    if dp[n][k] == float('inf'):\n        return -1\n    else:\n        return dp[n][k]\n"
    },
    {
        "number": 4018,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.rstrip()\n    S = set()\n    def generate_subsequence(t, i, j, cost):\n        if i == j:\n            S.add(t)\n            return\n        for m in range(i, j):\n            generate_subsequence(t + s[i:m+1], m+1, j, cost + n-m)\n    for i in range(n):\n        generate_subsequence(s[i], i+1, n, 0)\n        if len(S) == k:\n            return sum(n-len(t) for t in S)\n    return -1"
    },
    {
        "number": 4018,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.strip().lower()\n    \n    dp = [[float('inf')]*(n+1) for _ in range(k+1)]\n    dp[0][0] = 0\n    \n    for i in range(n+1):\n        for j in range(1, k+1):\n            for t in range(i, n+1):\n                if t - i < dp[j][t-i]:\n                    dp[j][t] = t - i\n                else:\n                    break\n    \n    if dp[k][n] == float('inf'):\n        return -1\n    else:\n        return dp[k][n] * (n-dp[k][n])"
    },
    {
        "number": 4018,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.split('\\n')[1]\n\n    if n * k > len(set(s)):\n        return -1\n\n    s = list(s)\n    ans = 0\n    cur = set()\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            sub = ''.join(s[i:j])\n            if sub in cur:\n                continue\n            if len(cur) == k:\n                break\n            ans += len(sub)\n            cur.add(sub)\n    return ans"
    },
    {
        "number": 4019,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, D = map(int, stdin.split())\n    graph = [[] for _ in range(n+1)]\n    for i in range(m):\n        v, u = map(int, stdin.split())\n        graph[v].append(u)\n        graph[u].append(v)\n    visited = [False]*(n+1)\n    parent = [-1]*(n+1)\n    def dfs(v):\n        visited[v] = True\n        for u in graph[v]:\n            if visited[u]: continue\n            parent[u] = v\n            if u == 1: return True\n            if dfs(u): return True\n        return False\n    for i in range(n+1):\n        if not visited[i]:\n            parent[i] = -1\n            if dfs(i):\n                ans = []\n                for j in range(1, n+1):\n                    if parent[j] == 1: ans.append((parent[j], j))\n                ans.sort()\n                if len(ans) == D-1:\n                    print(\"YES\")\n                    for k in range(len(ans)):\n                        print(ans[k][0], ans[k][1])\n                    return\n                else:\n                    visited = [False]*(n+1)\n                    parent = [-1]*(n+1)\n    print(\"NO\")"
    },
    {
        "number": 4019,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = map(int, stdin.strip().split())\n    adj = [[] for _ in range(n + 1)]\n    for _ in range(m):\n        v, u = map(int, stdin.strip().split())\n        adj[v].append(u)\n        adj[u].append(v)\n\n    visited = [False] * (n + 1)\n    parent = [-1] * (n + 1)\n\n    def dfs(u):\n        visited[u] = True\n        for v in adj[u]:\n            if visited[v]:\n                continue\n            parent[v] = u\n            if v == 1:\n                return True\n            if dfs(v):\n                return True\n        return False\n\n    for i in range(1, n + 1):\n        if not visited[i]:\n            parent[i] = -1\n            if dfs(i):\n                break\n\n    if not visited[1] or parent[1]!= -1:\n        return \"NO\"\n\n    for u in range(2, n + 1):\n        if parent[u] == 1:\n            adj[1].append(u)\n        elif parent[u]!= -1:\n            adj[parent[u]].remove(u)\n\n    edges = []\n    for i in range(2, n + 1):\n        for j in adj[i]:\n            if j < i:\n                continue\n            if parent[i] == j:\n                edges.append((i, j))\n\n    degree = [0] * (n + 1)\n    for u in range(1, n + 1):\n        for v in adj[u]:\n            if parent[v] == u:\n                degree[u] += 1\n            else:\n                degree[v] += 1\n\n    for i in range(len(edges)):\n        v, u = edges[i]\n        if degree[u] == d:\n            degree[u] -= 1\n            degree[v] += 1\n            parent[u] = v\n            edges[i] = (v, u)\n            break\n\n    if d == 1 and degree[1] == 0:\n        return \"YES\\n\" + \"\\n\".join(map(str, edges))\n\n    return \"YES\\n\" + \"\\n\".join(map(str, edges)) + \"\\n\" + \"\\n\".join(map(str, [(1, u) for u in adj[1]]))\n"
    },
    {
        "number": 4019,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, D = map(int, stdin.readline().split())\n    edges = [tuple(map(int, stdin.readline().split())) for _ in range(m)]\n\n    # Check if no spanning tree exists\n    degree = [0] * n\n    for v, u in edges:\n        degree[v-1] += 1\n        degree[u-1] += 1\n    if degree[0]!= D:\n        return \"NO\"\n\n    # Find a spanning tree satisfying the condition\n    spanning_tree = []\n    visited = [False] * n\n    visited[0] = True\n    for v, u in edges:\n        if not visited[v-1]:\n            spanning_tree.append((v, u))\n            visited[v-1] = True\n            visited[u-1] = True\n            if len(spanning_tree) == n-1:\n                break\n\n    # Print the spanning tree\n    if len(spanning_tree) == n-1:\n        print(\"YES\")\n        for v, u in spanning_tree:\n            print(v, u)\n    else:\n        print(\"NO\")\n\n    return \"\""
    },
    {
        "number": 4019,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m, D = map(int, stdin.readline().split())\n    graph = [[] for _ in range(n + 1)]\n    for _ in range(m):\n        v, u = map(int, stdin.readline().split())\n        graph[v].append(u)\n        graph[u].append(v)\n\n    def dfs(v, prev):\n        visited[v] = True\n        for u in graph[v]:\n            if u == prev:\n                continue\n            if not visited[u]:\n                dfs(u, v)\n                tree.append((v, u))\n\n    visited = [False] * (n + 1)\n    tree = []\n    for i in range(1, n + 1):\n        if not visited[i]:\n            dfs(i, -1)\n    if len(tree) < n - 1:\n        return \"NO\"\n    degree = [0] * (n + 1)\n    for v, u in tree:\n        degree[v] += 1\n        degree[u] += 1\n    for i in range(1, n + 1):\n        if degree[i] == D:\n            break\n    else:\n        return \"NO\"\n    tree = [edge for edge in tree if degree[edge[0]] == D or degree[edge[1]] == D]\n    result = [\"YES\"]\n    result.extend(str(v) + \" \" + str(u) for v, u in tree)\n    return \"\\n\".join(result)\n"
    },
    {
        "number": 4019,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    n, m, D = map(int, stdin.split())\n    edges = [tuple(map(int, stdin.split())) for _ in range(m)]\n\n    # Check if there is no spanning tree satisfying the condition\n    if sum(1 for v1, v2 in edges if v1 == 1)!= D:\n        return \"NO\"\n\n    # Create a graph\n    graph = {v: [] for v in range(1, n+1)}\n    for v1, v2 in edges:\n        graph[v1].append(v2)\n        graph[v2].append(v1)\n\n    # Find spanning tree with degree of vertex 1 = D\n    visited = [False] * (n+1)\n    stack = [1]\n    while stack:\n        v = stack.pop()\n        if visited[v]:\n            continue\n        visited[v] = True\n        if v == 1:\n            degree = 0\n            for u in graph[1]:\n                if not visited[u]:\n                    degree += 1\n            if degree!= D:\n                continue\n        for u in graph[v]:\n            if not visited[u]:\n                stack.append(u)\n\n    # Print edges of spanning tree\n    if any(not visited[u] for v in range(1, n+1) for u in graph[v]):\n        return \"NO\"\n    return \"YES\\n\" + \"\\n\".join(\" \".join(map(str, edge)) for edge in edges if visited[edge[0]] and visited[edge[1]])\n"
    },
    {
        "number": 4019,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, D = map(int, stdin.split())\n    adj = [[] for _ in range(n+1)]\n    for _ in range(m):\n        v, u = map(int, stdin.split())\n        adj[v].append(u)\n        adj[u].append(v)\n    for i in range(1, n+1):\n        adj[i].sort()\n    visited = [False] * (n+1)\n    parent = [-1] * (n+1)\n    for i in range(1, n+1):\n        if not visited[i]:\n            if len(adj[i]) < D:\n                return \"NO\"\n            degree = len(adj[i])\n            for j in range(D):\n                if adj[i][j] == 0:\n                    break\n                if not visited[adj[i][j]]:\n                    parent[adj[i][j]] = i\n                    degree -= 1\n            if degree!= 0:\n                return \"NO\"\n    for i in range(1, n+1):\n        if parent[i] == -1:\n            parent[i] = 1\n    for i in range(1, n+1):\n        print(parent[i], i)\n    return \"YES\""
    },
    {
        "number": 4019,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m, D = map(int, stdin.split())\n    edges = []\n    for i in range(m):\n        v, u = map(int, stdin.split())\n        edges.append((v, u))\n        edges.append((u, v))  # make sure that each edge is included in the list only once\n    edges = set(edges)  # remove duplicates\n    \n    # create a graph using an adjacency list\n    graph = [[] for _ in range(n+1)]\n    for v, u in edges:\n        graph[v].append(u)\n        graph[u].append(v)\n    \n    # find spanning trees of the graph\n    trees = []\n    for i in range(1, n+1):\n        visited = [False] * (n+1)\n        visited[i] = True\n        parent = [-1] * (n+1)\n        stack = [(i, 0)]\n        while stack:\n            v, depth = stack.pop()\n            for u in graph[v]:\n                if not visited[u]:\n                    visited[u] = True\n                    parent[u] = v\n                    stack.append((u, depth+1))\n        # check if the degree of the first vertex is D\n        if sum(visited[1:]) == D:\n            # found a spanning tree\n            tree = []\n            for v in range(2, n+1):\n                if parent[v] == -1:\n                    break  # no spanning tree found\n                tree.append((parent[v], v))\n            trees.append(tree)\n    \n    if not trees:\n        return \"NO\\n\"\n    else:\n        # find the minimum spanning tree\n        min_tree = min(trees, key=lambda t: len(t))\n        # check if the edges form a subset of the input edges\n        for edge in min_tree:\n            if (edge[0], edge[1]) not in edges and (edge[1], edge[0]) not in edges:\n                return \"YES\\n\" + \"\\n\".join(map(str, min_tree)) + \"\\n\"\n        return \"YES\\n\" + \"\\n\".join(map(str, min_tree)) + \"\\n\"\n"
    },
    {
        "number": 4019,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    n, m, D = map(int, stdin.split()[:3])\n    edges = [list(map(int, line.split())) for line in stdin.split('\\n')[3:]]\n\n    # Create adjacency list\n    adj = [[] for _ in range(n+1)]\n    for v, u in edges:\n        adj[v].append(u)\n        adj[u].append(v)\n\n    # Find spanning tree with required degree\n    visited = [False] * (n+1)\n    stack = [1]\n    while stack:\n        v = stack[-1]\n        if not visited[v]:\n            visited[v] = True\n            for u in adj[v]:\n                if not visited[u]:\n                    stack.append(u)\n        else:\n            if v == D:\n                break\n            stack.pop()\n\n    # Check if spanning tree exists\n    if not all(visited):\n        return \"NO\"\n\n    # Print spanning tree\n    print(\"YES\")\n    for u in adj[1]:\n        if u!= 1:\n            print(1, u)\n    for v, u in edges:\n        if v == D and u == 1:\n            continue\n        if u == D and v == 1:\n            continue\n        print(v, u)\n    return \"\""
    },
    {
        "number": 4019,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m, D = map(int, stdin.readline().split())\n    edges = []\n    for i in range(m):\n        v, u = map(int, stdin.readline().split())\n        edges.append((v-1, u-1))\n    is_tree = [True] * n\n    visited = [False] * n\n    cnt = 0\n    first = 0\n    for i in range(n):\n        if not visited[i]:\n            cnt += 1\n            if cnt == D:\n                first = i\n            visited[i] = True\n            for j in range(len(edges)):\n                if edges[j][0] == i:\n                    is_tree[edges[j][1]] = False\n                elif edges[j][1] == i:\n                    is_tree[edges[j][0]] = False\n    if cnt!= D:\n        return \"NO\"\n    tree = []\n    for i in range(m):\n        if is_tree[edges[i][0]] and is_tree[edges[i][1]]:\n            tree.append(str(edges[i][0]+1) + \" \" + str(edges[i][1]+1))\n    tree.sort()\n    return \"YES\\n\" + \"\\n\".join(tree)"
    },
    {
        "number": 4019,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, D = map(int, stdin.split())\n    graph = [[] for _ in range(n+1)]\n    for _ in range(m):\n        v, u = map(int, stdin.split())\n        graph[v].append(u)\n        graph[u].append(v)\n    \n    def dfs(curr_v, prev_v, visited, parent):\n        visited.add(curr_v)\n        for next_v in graph[curr_v]:\n            if next_v == prev_v:\n                continue\n            if next_v not in visited:\n                dfs(next_v, curr_v, visited, parent)\n                if graph[curr_v].index(next_v) == 0:\n                    parent[0] = curr_v\n        visited.remove(curr_v)\n    \n    def spanning_tree(curr_v, prev_v, visited, parent, degree):\n        visited.add(curr_v)\n        if curr_v == 1:\n            degree[0] = len(visited)\n        for next_v in graph[curr_v]:\n            if next_v == prev_v:\n                continue\n            if next_v not in visited:\n                if degree[0] == D:\n                    return True\n                if spanning_tree(next_v, curr_v, visited, parent, degree):\n                    return True\n        visited.remove(curr_v)\n        return False\n    \n    visited = set()\n    parent = [None]\n    for curr_v in range(1, n+1):\n        if curr_v not in visited:\n            dfs(curr_v, -1, visited, parent)\n            if spanning_tree(curr_v, -1, set(), parent, [0]):\n                edges = []\n                for i in range(1, n+1):\n                    if parent[0] == i:\n                        edges.append(f\"{parent[0]} {i}\")\n                return \"YES\\n\" + \"\\n\".join(edges)\n    return \"NO\""
    },
    {
        "number": 4020,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    h1, m1 = map(int, stdin.readline().strip().split(\":\"))\n    h2, m2 = map(int, stdin.readline().strip().split(\":\"))\n\n    if m1 % 2 == 0:\n        m3 = (m1 + m2) // 2\n        if m3 == 60:\n            h3 = (h1 + h2 + 1) % 24\n            m3 = 0\n        else:\n            h3 = h1\n        return f\"{h3:02d}:{m3:02d}\"\n    else:\n        m3 = (m1 + m2) // 2\n        h3 = (h1 + h2) // 2\n        return f\"{h3:02d}:{m3:02d}\""
    },
    {
        "number": 4020,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    h1, m1, h2, m2 = map(int, stdin.split())\n    if m1 % 2!= m2 % 2:\n        return \"error\"\n    if h2 < h1:\n        h2 += 24\n    if m2 < m1:\n        h2 -= 1\n        m2 += 60\n    if m2 - m1 < 2:\n        return \"error\"\n    m3 = (m1 + m2) // 2\n    h3 = (h1 + h2) // 2\n    if m3 == 60:\n        h3 += 1\n        m3 = 0\n    return f\"{h3:02}:{m3:02}\""
    },
    {
        "number": 4020,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    h1, m1 = map(int, stdin.strip().split())\n    h2, m2 = map(int, stdin.strip().split())\n\n    m3 = (m1 + m2) // 2\n    h3 = h1 + (m1 + m2) // 1440\n    if m3 == 60:\n        m3 = 0\n        h3 += 1\n    return f\"{h3:02d}:{m3:02d}\"\n\n\nprint(solution(\"10:00 11:00\\n\"))  # 10:30\nprint(solution(\"11:10 11:12\\n\"))  # 11:11\nprint(solution(\"01:02 03:02\\n\"))  # 02:02"
    },
    {
        "number": 4020,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    h1, m1 = map(int, stdin.strip().split(':'))\n    h2, m2 = map(int, stdin.strip().split(':'))\n    if m1 % 2!= m2 % 2:\n        h2 += 1\n        m2 = 0 if m2 == 60 else m2\n    else:\n        if m2 == 60:\n            h2 += 1\n            m2 = 0\n    if m2 - m1 < 2:\n        h2 += 1\n        m2 = 0 if m2 == 60 else m2\n    if h2 == 24:\n        h2 = 0\n    return '{:02d}:{:02d}'.format(h2, m2 // 2)"
    },
    {
        "number": 4020,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    h1, m1, h2, m2 = map(int, stdin.split())\n    if m1 % 2!= m2 % 2:\n        return \"Invalid input\"\n    m3 = (m1 + m2) // 2\n    h3 = h1\n    if m1 + m2 < 120:\n        h3 = h2\n    return f\"{h3:02d}:{m3:02d}\"\n\nprint(solution(\"10:00\\n11:00\")) # \"10:30\"\nprint(solution(\"11:10\\n11:12\")) # \"11:11\"\nprint(solution(\"01:02\\n03:02\")) # \"02:02\""
    },
    {
        "number": 4020,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    h1, m1, h2, m2 = map(int, stdin.strip().split())\n    \n    # Compute the midpoint of the contest\n    h3 = (h1 + h2) // 2\n    m3 = (m1 + m2) // 2\n    \n    # Handle special cases\n    if m3 == 60:\n        m3 = 0\n        h3 += 1\n    if h3 == 24:\n        h3 = 0\n    \n    # Return the result in the desired format\n    return f\"{h3:02d}:{m3:02d}\""
    },
    {
        "number": 4020,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    h1, m1, h2, m2 = map(int, stdin.split())\n    m = (m1 + m2) // 2\n    h = h1 + (m1 + m2) // 1440\n    if h == 24:\n        h = 0\n    return f\"{h:02d}:{m:02d}\""
    },
    {
        "number": 4020,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    h1, m1 = map(int, stdin.strip().split(' ')[0].split(':'))\n    h2, m2 = map(int, stdin.strip().split(' ')[1].split(':'))\n    \n    if m1 % 2 == 1 or m2 % 2 == 1:\n        print(\"Error: Contest must last an even number of minutes\")\n        return\n    \n    if h2 - h1 == 0:\n        m3 = (m1 + m2) // 2\n        h3 = h1\n    else:\n        m3 = m1\n        h3 = (h1 + h2) // 2\n        \n    return f\"{h3:02d}:{m3:02d}\""
    },
    {
        "number": 4020,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    h1, m1 = map(int, stdin.strip().split(':'))\n    h2, m2 = map(int, stdin.strip().split(':'))\n    if h1 == h2:\n        m3 = (m1 + m2) // 2\n        h3 = h1\n    else:\n        if h1 > h2:\n            h1, h2 = h2, h1\n            m1, m2 = m2, m1\n        m3 = m1 + (h2 - h1) * 60 - 1\n        h3 = h1 + (m3 + 1) // 60\n    return f'{h3:02d}:{m3:02d}'"
    },
    {
        "number": 4020,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    h1, m1 = map(int, stdin.strip().split(':'))\n    h2, m2 = map(int, stdin.strip().split('\\n')[1].split(':'))\n    h3 = (h1 + h2) // 2\n    m3 = (m1 + m2) // 2\n    h3 = str(h3).zfill(2)\n    m3 = str(m3).zfill(2)\n    return f\"{h3}:{m3}\""
    },
    {
        "number": 4021,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    return (a-1) // 4 + 1\n"
    },
    {
        "number": 4021,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    result = 0\n    while a!= 0:\n        result += a % 10\n        a //= 10\n    return result\n\nprint(solution(input()))"
    },
    {
        "number": 4021,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    num_divisors = 0\n    for i in range(1, a+1):\n        if a % i == 0:\n            num_divisors += 1\n    return num_divisors"
    },
    {
        "number": 4021,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a == 1:\n        return \"1\"\n    elif a == 2:\n        return \"2\"\n    elif a == 3:\n        return \"2\"\n    elif a == 4:\n        return \"3\"\n    elif a == 5:\n        return \"3\"\n    elif a == 6:\n        return \"3\"\n    elif a == 7:\n        return \"4\"\n    elif a == 8:\n        return \"4\"\n    elif a == 9:\n        return \"4\"\n    elif a == 10:\n        return \"4\"\n    elif a == 11:\n        return \"4\"\n    elif a == 12:\n        return \"4\"\n    elif a == 13:\n        return \"5\"\n    elif a == 14:\n        return \"5\"\n    elif a == 15:\n        return \"5\"\n    elif a == 16:\n        return \"5\"\n    elif a == 17:\n        return \"5\"\n    elif a == 18:\n        return \"5\"\n    elif a == 19:\n        return \"5\"\n    elif a == 20:\n        return \"5\"\n    elif a == 21:\n        return \"5\"\n    elif a == 22:\n        return \"5\"\n    elif a == 23:\n        return \"5\"\n    elif a == 24:\n        return \"5\"\n    elif a == 25:\n        return \"5\"\n    elif a == 26:\n        return \"5\"\n    elif a == 27:\n        return \"5\"\n    elif a == 28:\n        return \"5\"\n    elif a == 29:\n        return \"5\"\n    elif a == 30:\n        return \"5\"\n    elif a == 31:\n        return \"5\"\n    elif a == 32:\n        return \"5\"\n    elif a == 33:\n        return \"5\"\n    elif a == 34:\n        return \"5\"\n    elif a == 35:\n        return \"5\"\n    elif a == 36:\n        return \"5\"\n    elif a == 37:\n        return \"5\"\n    elif a == 38:\n        return \"5\"\n    elif a == 39:\n        return \"5\"\n    elif a == 40:\n        return \"5\"\n    elif a == 41:\n        return \"5\"\n    elif a == 42:\n        return \"6\"\n    elif a == 43:\n        return \"6\"\n    elif a == 44:\n        return \"6\"\n    elif a == 45:\n        return \"6\"\n    elif a == 46:\n        return \"6\"\n    elif a == 47:\n        return \"6\"\n    elif a == 48:\n        return \"6\"\n    elif a == 49:\n        return \"6\"\n    elif a == 50:\n        return \"6\"\n    elif a == 51:\n        return \"6\"\n    elif a == 52:\n        return \"6\"\n    elif a == 53:\n        return \"6\"\n    elif a == 54:\n        return \"6\"\n    elif a == 55:\n        return \"6\"\n    elif a == 56:\n        return \"6\"\n    elif a == 57:\n        return \"6\"\n    elif a == 58:\n        return \"6\"\n    elif a == 59:\n        return \"6\"\n    elif a == 60:\n        return \"6\"\n    elif a == 61:\n        return \"6\"\n    elif a == 62:\n        return \"6\"\n    elif a == 63:\n        return \"6\"\n    elif a == 64:\n        return \"6\"\n    else:\n        return \"Error\"\n\nprint(solution(input()))"
    },
    {
        "number": 4021,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a == 1:\n        return \"1\"\n    elif a == 2:\n        return \"2\"\n    elif a == 3:\n        return \"2\"\n    elif a == 4:\n        return \"2\"\n    elif a == 5:\n        return \"3\"\n    elif a == 6:\n        return \"3\"\n    elif a == 7:\n        return \"3\"\n    elif a == 8:\n        return \"4\"\n    elif a == 9:\n        return \"4\"\n    elif a == 10:\n        return \"4\"\n    elif a == 11:\n        return \"4\"\n    elif a == 12:\n        return \"5\"\n    elif a == 13:\n        return \"5\"\n    elif a == 14:\n        return \"5\"\n    elif a == 15:\n        return \"5\"\n    elif a == 16:\n        return \"5\"\n    elif a == 17:\n        return \"6\"\n    elif a == 18:\n        return \"6\"\n    elif a == 19:\n        return \"6\"\n    elif a == 20:\n        return \"6\"\n    elif a == 21:\n        return \"6\"\n    elif a == 22:\n        return \"6\"\n    elif a == 23:\n        return \"6\"\n    elif a == 24:\n        return \"7\"\n    elif a == 25:\n        return \"7\"\n    elif a == 26:\n        return \"7\"\n    elif a == 27:\n        return \"7\"\n    elif a == 28:\n        return \"7\"\n    elif a == 29:\n        return \"7\"\n    elif a == 30:\n        return \"7\"\n    elif a == 31:\n        return \"8\"\n    elif a == 32:\n        return \"8\"\n    elif a == 33:\n        return \"8\"\n    elif a == 34:\n        return \"8\"\n    elif a == 35:\n        return \"8\"\n    elif a == 36:\n        return \"8\"\n    elif a == 37:\n        return \"8\"\n    elif a == 38:\n        return \"8\"\n    elif a == 39:\n        return \"8\"\n    elif a == 40:\n        return \"9\"\n    elif a == 41:\n        return \"9\"\n    elif a == 42:\n        return \"9\"\n    elif a == 43:\n        return \"9\"\n    elif a == 44:\n        return \"9\"\n    elif a == 45:\n        return \"9\"\n    elif a == 46:\n        return \"9\"\n    elif a == 47:\n        return \"9\"\n    elif a == 48:\n        return \"10\"\n    elif a == 49:\n        return \"10\"\n    elif a == 50:\n        return \"10\"\n    elif a == 51:\n        return \"10\"\n    elif a == 52:\n        return \"10\"\n    elif a == 53:\n        return \"10\"\n    elif a == 54:\n        return \"10\"\n    elif a == 55:\n        return \"10\"\n    elif a == 56:\n        return \"11\"\n    elif a == 57:\n        return \"11\"\n    elif a == 58:\n        return \"11\"\n    elif a == 59:\n        return \"11\"\n    elif a == 60:\n        return \"11\"\n    elif a == 61:\n        return \"11\"\n    elif a == 62:\n        return \"11\"\n    elif a == 63:\n        return \"11\"\n    elif a == 64:\n        return \"12\"\n    else:\n        return \"0\""
    },
    {
        "number": 4021,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    result = 0\n    while a > 0:\n        result += a % 2\n        a //= 2\n    return result\n\nstdin = input()\nprint(solution(stdin))"
    },
    {
        "number": 4021,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin.strip())\n    if a == 1:\n        return '1'\n    elif a == 2:\n        return '2'\n    elif a == 3:\n        return '3'\n    elif a == 4:\n        return '2'\n    elif a == 5:\n        return '5'\n    elif a == 6:\n        return '5'\n    elif a == 7:\n        return '7'\n    elif a == 8:\n        return '10'\n    elif a == 9:\n        return '14'\n    elif a == 10:\n        return '20'\n    elif a == 11:\n        return '28'\n    elif a == 12:\n        return '40'\n    elif a == 13:\n        return '56'\n    elif a == 14:\n        return '76'\n    elif a == 15:\n        return '100'\n    elif a == 16:\n        return '132'\n    elif a == 17:\n        return '172'\n    elif a == 18:\n        return '220'\n    elif a == 19:\n        return '280'\n    elif a == 20:\n        return '352'\n    elif a == 21:\n        return '440'\n    elif a == 22:\n        return '544'\n    elif a == 23:\n        return '668'\n    elif a == 24:\n        return '812'\n    elif a == 25:\n        return '980'\n    elif a == 26:\n        return '1176'\n    elif a == 27:\n        return '1400'\n    elif a == 28:\n        return '1656'\n    elif a == 29:\n        return '1944'\n    elif a == 30:\n        return '2268'\n    elif a == 31:\n        return '2632'\n    elif a == 32:\n        return '3036'\n    elif a == 33:\n        return '3484'\n    elif a == 34:\n        return '3976'\n    elif a == 35:\n        return '4516'\n    elif a == 36:\n        return '5104'\n    elif a == 37:\n        return '5744'\n    elif a == 38:\n        return '6436'\n    elif a == 39:\n        return '7184'\n    elif a == 40:\n        return '7992'\n    elif a == 41:\n        return '8860'\n    elif a == 42:\n        return '9792'\n    elif a == 43:\n        return '10792'\n    elif a == 44:\n        return '11860'\n    elif a == 45:\n        return '13000'\n    elif a == 46:\n        return '14212'\n    elif a == 47:\n        return '15500'\n    elif a == 48:\n        return '16864'\n    elif a == 49:\n        return '18308'\n    elif a == 50:\n        return '19836'\n    elif a == 51:\n        return '21448'\n    elif a == 52:\n        return '23148'\n    elif a == 53:\n        return '24936'\n    elif a == 54:\n        return '26816'\n    elif a == 55:\n        return '28792'\n    elif a == 56:\n        return '30864'\n    elif a == 57:\n        return '33036'\n    elif a == 58:\n        return '35312'\n    elif a == 59:\n        return '37692'\n    elif a == 60:\n        return '40180'\n    elif a == 61:\n        return '42784'\n    elif a == 62:\n        return '45508'\n    elif a == 63:\n        return '48356'\n    elif a == 64:\n        return '51328'\n    else:\n        return '-1'"
    },
    {
        "number": 4021,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    return bin(a).count('1')"
    },
    {
        "number": 4021,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    n = 0\n    while a!= 0:\n        a = a & (a - 1)\n        n += 1\n    return n\n\nprint(solution(input()))"
    },
    {
        "number": 4021,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    count = 0\n    while a > 0:\n        a = a & (a-1)\n        count += 1\n    return count"
    },
    {
        "number": 4022,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    segments = []\n    for _ in range(n):\n        l, r = map(int, stdin.readline().split())\n        segments.append((l, r))\n\n    segments.sort(key=lambda x: x[1])\n    max_length = 0\n    for i in range(n):\n        if i == 0:\n            max_length = segments[i][1] - segments[i][0]\n        else:\n            max_length = max(max_length, segments[i][0] - segments[i-1][1])\n    return str(max_length)\n\nprint(solution(stdin))"
    },
    {
        "number": 4022,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    segments = []\n    for i in range(n):\n        l, r = map(int, stdin.readline().split())\n        segments.append((l, r))\n    segments.sort(key=lambda x: x[1] - x[0])\n    max_len = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if segments[i][1] >= segments[j][0]:\n                max_len = max(max_len, segments[j][0] - segments[i][1])\n    return str(max_len)"
    },
    {
        "number": 4022,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    segments = []\n    for i in range(n):\n        l, r = map(int, stdin.split()[1:])\n        segments.append((l, r))\n    \n    max_length = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            s1, e1 = segments[i]\n            s2, e2 = segments[j]\n            left = max(s1, s2)\n            right = min(e1, e2)\n            if left <= right:\n                length = right - left\n                max_length = max(max_length, length)\n    \n    return str(max_length)"
    },
    {
        "number": 4022,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    segments = []\n    for i in range(n):\n        l, r = map(int, stdin.split()[0:2])\n        segments.append((l, r))\n    segments.sort()\n    left = segments[0][0]\n    right = segments[0][1]\n    result = 0\n    for l, r in segments[1:]:\n        if left <= l <= right:\n            result = max(result, r)\n        else:\n            result = max(result, r - l)\n        left = max(left, l)\n        right = min(right, r)\n    return str(result)\n\nprint(solution(input()))"
    },
    {
        "number": 4022,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    segments = []\n    for i in range(n):\n        l, r = map(int, stdin.readline().split())\n        segments.append((l, r))\n\n    def intersect(segments):\n        s = set()\n        for l, r in segments:\n            s = s.union(set(range(l, r + 1)))\n        return s\n\n    intersections = []\n    for i in range(n):\n        for j in range(i + 1, n):\n            l, r = intersect(segments[:i] + segments[i + 1:j] + segments[j + 1:])\n            if len(l) == 0:\n                intersections.append(0)\n            else:\n                intersections.append(max(r - l))\n\n    return max(intersections)\n"
    },
    {
        "number": 4022,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    segments = []\n    for i in range(n):\n        l, r = map(int, stdin.readline().split())\n        segments.append((l, r))\n    segments.sort(key=lambda x: x[0])\n    max_len = 0\n    for i in range(n):\n        l, r = segments[i]\n        if i == n-1:\n            max_len = max(max_len, r-l)\n        else:\n            l1, r1 = segments[i+1]\n            max_len = max(max_len, min(r, r1) - max(l, l1))\n    return str(max_len)"
    },
    {
        "number": 4022,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    segments = []\n    for _ in range(n):\n        l, r = map(int, stdin.readline().strip().split())\n        segments.append((l, r))\n    segments.sort(key=lambda x: x[1])\n    max_length = 0\n    for i in range(n - 1):\n        left = segments[i][1]\n        right = segments[i + 1][0]\n        if left <= right:\n            max_length = max(max_length, right - left)\n    return max_length\n"
    },
    {
        "number": 4022,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = list(map(int, stdin.readline().split()))\n    arr += [arr[-1]] * (4 - n)\n    arr = sorted(arr, key=lambda x: (x[0], x[1]))\n    ans = 0\n    for i in range(1, n):\n        ans = max(ans, arr[i][0] - arr[i - 1][1])\n    return str(ans)\n\n\nprint(solution(\"4\\n1 3\\n2 6\\n0 4\\n3 3\\n\"))\nprint(solution(\"5\\n2 6\\n1 3\\n0 4\\n1 20\\n0 4\\n\"))\nprint(solution(\"3\\n4 5\\n1 2\\n9 20\\n\"))\nprint(solution(\"2\\n3 10\\n1 5\\n\"))"
    },
    {
        "number": 4022,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    segments = []\n    for i in range(n):\n        l, r = map(int, stdin.readline().split())\n        segments.append((l, r))\n    segments.sort(key=lambda x: x[1])\n    ans = 0\n    for i in range(n - 1):\n        left, right = segments[i]\n        for j in range(i + 1, n):\n            if left <= segments[j][0] <= right:\n                ans = max(ans, min(segments[j][0], right) - max(segments[i][1], left))\n    return ans\n\n\ndef"
    },
    {
        "number": 4022,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    segments = []\n    for i in range(n):\n        l, r = map(int, stdin.readline().split())\n        segments.append((l, r))\n    max_length = 0\n    for i in range(len(segments)):\n        for j in range(i+1, len(segments)):\n            if segments[j][0] > segments[i][1]:\n                break\n            if segments[j][0] <= segments[i][1] <= segments[j][1]:\n                length = segments[i][1] - segments[i][0]\n                if length > max_length:\n                    max_length = length\n                break\n            if segments[i][0] <= segments[j][0] <= segments[i][1]:\n                length = segments[j][1] - segments[j][0]\n                if length > max_length:\n                    max_length = length\n                break\n            if segments[j][0] <= segments[i][0] <= segments[j][1]:\n                length = segments[i][1] - segments[j][0]\n                if length > max_length:\n                    max_length = length\n                break\n            if segments[i][0] <= segments[j][0] <= segments[i][1]:\n                length = segments[i][1] - segments[j][0]\n                if length > max_length:\n                    max_length = length\n                break\n    return str(max_length)"
    },
    {
        "number": 4023,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    if n == 1:\n        if a[0] == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    for i in range(n-1):\n        if a[i] == a[i+1]:\n            return \"YES\"\n    return \"NO\""
    },
    {
        "number": 4023,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    \n    # check if the wall is already complete\n    if len(set(a)) == 1:\n        return \"YES\"\n    \n    # check if the wall can be completed by putting bricks only horizontally\n    for i in range(n-1):\n        if a[i] == a[i+1]:\n            # check if it's possible to put a brick on parts i and i+1\n            if a[i] == 1 or (i > 0 and a[i] == a[i-1]) or (i < n-2 and a[i] == a[i+2]):\n                return \"YES\"\n    \n    return \"NO\""
    },
    {
        "number": 4023,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    heights = list(map(int, stdin.readline().split()))\n    bricks = 0\n    for i in range(n - 1):\n        if heights[i] == heights[i + 1]:\n            bricks += 1\n            heights[i] += 1\n            heights[i + 1] += 1\n            if bricks >= 2:\n                return \"NO\"\n        else:\n            bricks = 0\n    if sum(heights) % 2 == 0:\n        return \"YES\"\n    return \"NO\""
    },
    {
        "number": 4023,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    if max(a)!= min(a) or any(a[i] > a[i+1] for i in range(n-1)):\n        return \"NO\"\n    return \"YES\"\n\nstdin = input()\nprint(solution(stdin))"
    },
    {
        "number": 4023,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n\n    for i in range(1, n):\n        if a[i] == a[i-1]:\n            return \"YES\"\n\n    return \"NO\"\n\ndef"
    },
    {
        "number": 4023,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    if n == 1:\n        if a[0] == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 2:\n        if a[0] == a[1]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if a[0]!= a[1]:\n        return \"NO\"\n    if a[-1]!= a[-2]:\n        return \"NO\"\n    for i in range(2, n-1):\n        if a[i]!= a[i-1]:\n            return \"NO\"\n    if a[0] == 1 or a[-1] == 1:\n        return \"NO\"\n    return \"YES\""
    },
    {
        "number": 4023,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    b = [a[0]]\n    for i in range(1, n):\n        if a[i] <= b[-1]:\n            b.append(a[i])\n        else:\n            b[-1] = a[i]\n    if len(set(b)) == 1:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 4023,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    if len(set(a)) == 1:\n        return \"YES\"\n\n    for i in range(n - 1):\n        if a[i]!= a[i + 1]:\n            return \"NO\"\n\n    return \"YES\""
    },
    {
        "number": 4023,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    a = list(map(int, stdin.readline().strip().split()))\n    if all(x == a[0] for x in a):\n        return \"YES\"\n    for i in range(1, n):\n        if a[i]!= a[i-1]:\n            return \"NO\"\n    return \"YES\"\n\nprint(solution(\"5\\n2 1 1 2 5\")) # YES\nprint(solution(\"3\\n4 5 3\")) # NO\nprint(solution(\"2\\n10 10\")) # YES"
    },
    {
        "number": 4023,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    \n    if n == 1:\n        if a[0] == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    \n    # check if wall is already complete\n    if all(a[i] == a[0] for i in range(1, n)):\n        return \"YES\"\n    \n    # check if wall can be completed\n    for i in range(1, n):\n        if a[i] == a[i-1]:\n            if i == 1 or a[i] == a[i-2]:\n                a[i-1] += 1\n                a[i] += 1\n                if i == n-1 or a[i] == a[i+2]:\n                    if i == n-2 or a[i] == a[i+3]:\n                        return \"YES\"\n            elif i == n-1 or a[i] == a[i+2]:\n                a[i-1] += 1\n                a[i] += 1\n                if i == n-2 or a[i] == a[i+3]:\n                    return \"YES\"\n                \n    return \"NO\""
    },
    {
        "number": 4024,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    s = stdin.split()[1]\n    if k > n:\n        return \"-1\"\n    dp = [float('inf')] * (n+1)\n    dp[0] = 0\n    for i in range(1, n+1):\n        for j in range(i):\n            if s[j:i] not in set(s[j:i]):\n                dp[i] = min(dp[i], dp[j] + (i-j)*len(set(s[j:i])))\n    return str(dp[n]) if dp[n]!= float('inf') else \"-1\""
    },
    {
        "number": 4024,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.split()[1]\n    cost = n - len(s)\n    if k > cost:\n        return -1\n    else:\n        return sum(cost - i for i in range(k))\n\nstdin = \"4 5 asdf\"\nprint(solution(stdin)) # Output: 4\n\nstdin = \"5 6 aaaaa\"\nprint(solution(stdin)) # Output: 15\n\nstdin = \"5 7 aaaaa\"\nprint(solution(stdin)) # Output: -1\n\nstdin = \"10 100 ajihiushda\"\nprint(solution(stdin)) # Output: 233"
    },
    {
        "number": 4024,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.split('\\n')[1]\n\n    if k > len(set(s)):\n        return -1\n\n    subsequences = []\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            subsequences.append(s[i:j])\n\n    subsequences = set(subsequences)\n    subsequences.remove('')\n\n    dp = [0] * (k+1)\n    dp[0] = 0\n    for i in range(1, k+1):\n        dp[i] = float('inf')\n        for subsequence in subsequences:\n            if len(subsequence) <= i:\n                dp[i] = min(dp[i], dp[i-len(subsequence)] + (i-len(subsequence)))\n\n    if dp[k] == float('inf'):\n        return -1\n    else:\n        return dp[k]\n\nprint(solution(input()))"
    },
    {
        "number": 4024,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.strip().lower()\n    \n    if k > len(set(s)):\n        return -1\n    \n    dp = [0] * (1 << n)\n    dp[0] = 0\n    \n    for i in range(1, len(dp)):\n        mask = (1 << n) - 1\n        while mask:\n            j = mask & (-mask)\n            mask -= j\n            if j & i:\n                t = s[bin(i & -j).count('1'):]\n                if t not in set(s):\n                    dp[i] += len(t)\n                else:\n                    dp[i] = float('inf')\n                    break\n    \n    if dp[-1] == float('inf'):\n        return -1\n    else:\n        return dp[-1]\n\nprint(solution(\"4 5\\nasdf\")) # 4\nprint(solution(\"5 6\\naaaaa\")) # 15\nprint(solution(\"5 7\\naaaaa\")) # -1\nprint(solution(\"10 100\\najihiushda\")) # 233"
    },
    {
        "number": 4024,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.strip()\n    cost = {s: 0}\n    for i in range(1, n):\n        for j in range(i):\n            for l in range(j+1, i+1):\n                t = s[j:l+1]\n                if t not in cost and len(set(t)) == len(t):\n                    cost[t] = n - l\n    if len(cost) < k:\n        return -1\n    total_cost = 0\n    for t in cost:\n        total_cost += cost[t]\n    return total_cost\n\nwith open('input.txt') as f:\n    stdin = f.read()\n\nstdout = solution(stdin)\n\nwith open('output.txt', 'w') as f:\n    f.write(str(stdout))"
    },
    {
        "number": 4024,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.strip().split())\n    s = stdin.strip().split()[1]\n    \n    if k > 26**n:\n        return -1\n    \n    def helper(s, k, n, dp):\n        if k == 0:\n            return 0\n        if n == 0:\n            return float('inf')\n        if dp[n][k]!= -1:\n            return dp[n][k]\n        min_cost = float('inf')\n        for i in range(1, n+1):\n            if s[i-1] == s[n-1]:\n                continue\n            if s[i-1] == s[n-1-k]:\n                min_cost = min(min_cost, helper(s, k-1, n-1, dp) + (n-i+1))\n            else:\n                min_cost = min(min_cost, helper(s, k, n-1, dp))\n        dp[n][k] = min_cost\n        return dp[n][k]\n    \n    dp = [[-1 for _ in range(k+1)] for _ in range(n+1)]\n    \n    min_cost = helper(s, k, n, dp)\n    \n    return min_cost if min_cost!= float('inf') else -1\n\nassert solution(\"4 5\\nasdf\\n\") == 4\nassert solution(\"5 6\\naaaaa\\n\") == 15\nassert solution(\"5 7\\naaaaa\\n\") == -1\nassert solution(\"10 100\\najihiushda\\n\") == 233"
    },
    {
        "number": 4024,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    n, k = map(int, stdin.readline().strip().split())\n    s = stdin.readline().strip()\n\n    # Check if it is possible to obtain the set of size k\n    if n < k:\n        return -1\n\n    # Create a set S to store the subsequences\n    S = set()\n\n    # Initialize a list L to store the subsequence lengths\n    L = [0] * (k+1)\n\n    # Generate all possible subsequences of the string s\n    for i in range(n+1):\n        for j in range(i+1, n+1):\n            # Check if the current subsequence is already in S\n            if s[i:j] not in S:\n                # Add the current subsequence to S\n                S.add(s[i:j])\n                # Add the length of the current subsequence to L\n                L[len(S)] += n - j + 1\n\n    # Check if the set S of size k is possible\n    if k > len(S):\n        return -1\n\n    # Return the minimum possible total cost to obtain the set S of size k\n    return sum(L[k:])"
    },
    {
        "number": 4024,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.strip().split())\n    s = stdin.strip().split()[1]\n    S = set()\n    total_cost = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            t = s[i:j]\n            if len(t) > k:\n                continue\n            if t in S:\n                continue\n            S.add(t)\n            total_cost += n - len(t)\n            if len(S) == k:\n                return total_cost\n    return -1\n\nstdin = \"4 5\\nasdf\\n\"\nprint(solution(stdin)) # Output: 4\n\nstdin = \"5 6\\naaaaa\\n\"\nprint(solution(stdin)) # Output: 15\n\nstdin = \"5 7\\naaaaa\\n\"\nprint(solution(stdin)) # Output: -1\n\nstdin = \"10 100\\najihiushda\\n\"\nprint(solution(stdin)) # Output: 233"
    },
    {
        "number": 4024,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.strip()\n    \n    # set to store subsequences\n    S = set()\n    \n    def dfs(start, path):\n        # if reached the end of the string, add the subsequence to set S\n        if start == n:\n            S.add(path)\n            return\n        # for each possible subsequence starting from the current index\n        for i in range(start, n+1):\n            # if the subsequence is already in set S, skip it\n            if path[start:i] in S:\n                continue\n            # add the subsequence to set S\n            S.add(path[start:i])\n            # recurse to the next index\n            dfs(i, path)\n            # backtrack and remove the subsequence from set S\n            S.remove(path[start:i])\n    \n    # generate all possible subsequences of the string s\n    dfs(0, s)\n    \n    # check if set S is of size k or greater\n    if len(S) < k:\n        return -1\n    \n    # calculate the minimum cost to generate the set S\n    cost = 0\n    for t in S:\n        cost += n - len(t)\n    return cost\n\nprint(solution(\"4 5\\nasdf\")) # 4\nprint(solution(\"5 6\\naaaaa\")) # 15\nprint(solution(\"5 7\\naaaaa\")) # -1\nprint(solution(\"10 100\\najihiushda\")) # 233"
    },
    {
        "number": 4024,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.strip()\n    if k >= n:\n        return str(n)\n    dp = [[float('inf')] * (k + 1) for _ in range(n + 1)]\n    dp[0][0] = 0\n    for i in range(1, n + 1):\n        for j in range(k + 1):\n            if j >= n - i + 1:\n                dp[i][j] = 0\n            else:\n                for x in range(i):\n                    if s[x:i] not in dp[x]:\n                        dp[i][j] = min(dp[i][j], dp[x][j] + n - i)\n    if dp[n][k] == float('inf'):\n        return '-1'\n    return str(dp[n][k])\n\nprint(solution(\"4 5\\nasdf\")) # Output: 4\nprint(solution(\"5 6\\naaaaa\")) # Output: 15\nprint(solution(\"5 7\\naaaaa\")) # Output: -1\nprint(solution(\"10 100\\najihiushda\")) # Output: 233"
    },
    {
        "number": 4025,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    days = 1\n    if a <= 2*b + c:\n        days = max(days, 2*b + c // (a+b+c))\n    if b <= 2*a + c:\n        days = max(days, 2*a + c // (a+b+c))\n    if c <= 2*a + b:\n        days = max(days, 2*a + b // (a+b+c))\n    if a+b+c <= 7*days:\n        days = 7\n    return str(days)"
    },
    {
        "number": 4025,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if a > c:\n        days = (a + b + c - 2) // 3\n        if a == b == c:\n            days -= 1\n        return str(days)\n    elif b > a and b > c:\n        days = (a + b + c - 2) // 3\n        if a == b == c:\n            days -= 1\n        return str(days)\n    elif c > a and c > b:\n        days = (a + b + c - 2) // 3\n        if a == b == c:\n            days -= 1\n        return str(days)\n    else:\n        return \"1\""
    },
    {
        "number": 4025,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    max_days = 365\n\n    if (a+b+c) % 3 == 0:\n        max_days = (a+b+c)//3\n    elif (a+b+c) % 3 == 1:\n        max_days = (a+b+c)//3+1\n    else:\n        max_days = (a+b+c)//3+2\n\n    return str(max_days)"
    },
    {
        "number": 4025,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    a, b, c = map(int, stdin.strip().split())\n    \n    # define the matrix of possibilities of eating fish, rabbit, and chicken food during different days of week\n    matrix = [\n        [0, 0, 0, 1],\n        [0, 0, 1, 0],\n        [1, 1, 0, 0]\n    ]\n    \n    # define the list of possible starting days of the week\n    days = [0, 1, 2, 3]\n    \n    # calculate the maximum number of days the cat can eat in a trip without additional food purchases\n    max_days = 0\n    for day in days:\n        if day == 0:\n            # on Mondays, Thursdays and Sundays\n            max_days = max(max_days, a)\n        elif day == 1:\n            # on Tuesdays and Saturdays\n            max_days = max(max_days, b)\n        else:\n            # on other days of week\n            max_days = max(max_days, c)\n    \n    # calculate the maximum number of days the cat can eat in a trip without additional food purchases while considering the food supplies in Polycarps backpack\n    for i in range(max_days):\n        for j in range(3):\n            if i == 0:\n                # on Mondays, Thursdays and Sundays\n                matrix[j][0] = a\n            elif i == 1:\n                # on Tuesdays and Saturdays\n                matrix[j][1] = b\n            else:\n                # on other days of week\n                matrix[j][2] = c\n    \n    # find the maximum number of days the cat can eat in a trip without additional food purchases while considering the food supplies in Polycarps backpack\n    for day in days:\n        possible_days = 0\n        for j in range(3):\n            if matrix[j][day] > 0:\n                possible_days += 1\n        if possible_days == 1:\n            return possible_days + i\n    \n    # if there is no possible day of the week to start the trip optimally, return -1\n    return -1"
    },
    {
        "number": 4025,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if a >= 4*b + 4*c:\n        return '1'\n    if a >= 2*b + 2*c:\n        return '2'\n    if a >= b + c:\n        return '3'\n    if b >= 2*a + 2*c:\n        return '3'\n    if b >= 2*a + 2*c:\n        return '2'\n    if c >= 2*a + 2*b:\n        return '2'\n    if c >= 2*a + 2*b:\n        return '3'\n    return '4'"
    },
    {
        "number": 4025,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n\n    # Define the cost for each food for each day of the week\n    cost = [\n        [0, 2, 4],  # Monday\n        [0, 3, 3],  # Tuesday\n        [0, 2, 2],  # Wednesday\n        [0, 3, 3],  # Thursday\n        [0, 2, 2],  # Friday\n        [0, 2, 4],  # Saturday\n        [0, 3, 3],  # Sunday\n    ]\n\n    # Define the maximum number of days that the cat can eat in a trip without additional food purchases\n    max_days = max(a // 3, b // 2, c // 1)\n\n    # Calculate the minimum cost of a trip starting on each day of the week\n    min_cost = [\n        sum(cost[i][:a % 7]) + sum(cost[(i + 1) % 7][:b % 7]) + sum(cost[(i + 2) % 7][:c % 7])\n        for i in range(7)\n    ]\n\n    # Find the best day to start the trip\n    best_day = min_cost.index(min(min_cost))\n\n    # Return the maximum number of days the cat can eat in a trip without additional food purchases\n    return max_days if best_day in [0, 3, 6] else max_days + 1\n"
    },
    {
        "number": 4025,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n\n    # Calculate the number of days the cat can eat without additional food purchases\n    max_days = 0\n    if c >= b and c >= a:\n        max_days = a // c\n        if a % c > 0:\n            max_days += 1\n    elif b >= c and b >= a:\n        max_days = a // b\n        if a % b > 0:\n            max_days += 1\n    else:\n        max_days = a // a\n\n    # Calculate the day of the week to start the trip optimally\n    days = [0] * 7\n    days[0] = c\n    days[2] = a\n    days[4] = b\n    days[6] = a + b + c\n\n    day_start = days.index(max(days))\n\n    # Print the maximum number of days the cat can eat in a trip without additional food purchases\n    if day_start in [0, 2, 4, 6]:\n        return str(max_days)\n    else:\n        return str(max_days + 1)\n\n\nprint(solution(\"2 1 1\"))  # Output: 4\nprint(solution(\"3 2 2\"))  # Output: 7\nprint(solution(\"1 100 1\"))  # Output: 3\nprint(solution(\"30 20 10\"))  # Output: 39"
    },
    {
        "number": 4025,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.strip().split())\n\n    # maximum possible days for a trip without additional food\n    days = min(a // 2 + b // 3 + c // 5, 7)\n\n    # days on which Polycarp can start his trip without additional food\n    days += (a % 2 + b % 3 + c % 5) // 2\n    days += (a % 2 + b % 3 + c % 5) % 2\n\n    return str(days)\n"
    },
    {
        "number": 4025,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.strip().split())\n    if a >= b and a >= c:\n        return 4\n    elif b >= a and b >= c:\n        return 5\n    else:\n        return 6"
    },
    {
        "number": 4025,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n\n    if a > b and a > c:\n        return 39\n    elif b > a and b > c:\n        return 39\n    else:\n        return 39 - min(a, b, c)"
    },
    {
        "number": 4026,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4026,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    cases = stdin.split('\\n')\n    test_cases = []\n    for i in range(1, len(cases), 2):\n        n, m = map(int, cases[i-1].split())\n        tiles = []\n        for j in range(i, i+n):\n            top_left, top_right = map(int, cases[j].split())\n            bottom_left, bottom_right = map(int, cases[j+1].split())\n            tiles.append((top_left, top_right, bottom_left, bottom_right))\n        test_cases.append((n, m, tiles))\n\n    for n, m, tiles in test_cases:\n        if len(tiles) > n * m:\n            print('NO')\n            continue\n\n        used_tiles = set()\n        matrix = []\n        for i in range(m):\n            row = []\n            for j in range(m):\n                valid_tiles = []\n                for tile in tiles:\n                    if tile[0] == matrix[i][j] and tile[1] == matrix[i][(j+1)%m] and tile[2] == matrix[(i+1)%m][j] and tile[3] == matrix[(i+1)%m][(j+1)%m]:\n                        valid_tiles.append(tile)\n                if len(valid_tiles) == 0:\n                    print('NO')\n                    return\n                valid_tile = valid_tiles[0]\n                for tile in valid_tiles:\n                    if tile in used_tiles:\n                        valid_tile = tile\n                        break\n                used_tiles.add(valid_tile)\n                row.append(valid_tile[0])\n            matrix.append(row)\n        print('YES')"
    },
    {
        "number": 4026,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    lines = stdin.strip().split('\\n')\n    num_tests = int(lines[0])\n    test_cases = []\n    for i in range(1, num_tests*5+1, 5):\n        n = int(lines[i])\n        m = int(lines[i+1])\n        tiles = []\n        for j in range(i+2, i+2+2*n):\n            top_left = int(lines[j])\n            top_right = int(lines[j+1])\n            bottom_left = int(lines[j+2])\n            bottom_right = int(lines[j+3])\n            tiles.append((top_left, top_right, bottom_left, bottom_right))\n        test_cases.append((n, m, tiles))\n\n    # solve test cases\n    for n, m, tiles in test_cases:\n        # create adjacency matrix for tiles\n        adj_matrix = [[0]*n for _ in range(n)]\n        for i, tile_i in enumerate(tiles):\n            for j, tile_j in enumerate(tiles):\n                if i!= j:\n                    if tile_i[0] == tile_j[0] or tile_i[1] == tile_j[1] or tile_i[2] == tile_j[2] or tile_i[3] == tile_j[3]:\n                        adj_matrix[i][j] = 1\n\n        # check if square can be constructed\n        if m!= n:\n            continue\n        if not all(adj_matrix[i][j] == 1 for i in range(n) for j in range(n)):\n            continue\n        if not all(adj_matrix[i][j] == adj_matrix[j][i] for i in range(n) for j in range(n)):\n            continue\n        for i in range(n):\n            for j in range(i):\n                if adj_matrix[i][j] == 0:\n                    break\n            else:\n                continue\n            break\n        else:\n            return 'YES'\n\n    return 'NO'"
    },
    {
        "number": 4026,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    t = int(lines[0])\n    for i in range(1, t+1):\n        n, m = map(int, lines[i*2-1].split())\n        tiles = []\n        for j in range(i*2, i*2+n*2, 2):\n            a, b, c, d = map(int, lines[j].split())\n            tiles.append([[a, b], [c, d]])\n        def is_symmetric(matrix):\n            n = len(matrix)\n            for i in range(n):\n                for j in range(i+1, n):\n                    if matrix[i][j]!= matrix[j][i]:\n                        return False\n            return True\n        def is_valid_position(matrix, tile, row, col):\n            if not all(matrix[i][j] == 0 for i in range(row, row+2) for j in range(col, col+2)):\n                return False\n            for i in range(row, row+2):\n                for j in range(col, col+2):\n                    if matrix[i][j]!= tile[i-row][j-col]:\n                        return False\n            return True\n        def is_valid_square(matrix):\n            n = len(matrix)\n            for i in range(n//2):\n                for j in range(n//2):\n                    if not is_valid_position(matrix, tiles[i][j], i*2, j*2):\n                        return False\n            return True\n        def dfs(matrix, row, col):\n            if row == m//2 and col == m//2:\n                return is_valid_square(matrix)\n            for i in range(len(tiles)):\n                if not any(is_valid_position(matrix, tiles[i], row, col+k) for k in range(len(tiles[i]))):\n                    for k in range(len(tiles[i])):\n                        if is_valid_position(matrix, tiles[i], row, col+k):\n                            matrix[row][col+k] = tiles[i][k//2]\n                            if dfs(matrix, row+1, col):\n                                return True\n                            matrix[row][col+k] = 0\n            return False\n        matrix = [[0 for _ in range(m)] for _ in range(m)]\n        if dfs(matrix, 0, 0):\n            return \"YES\"\n        return \"NO\""
    },
    {
        "number": 4026,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    t = int(lines[0])\n    for i in range(1, 2*t+1, 2):\n        n, m = map(int, lines[i].split())\n        tiles = []\n        for j in range(2*n):\n            top_left, top_right, bottom_left, bottom_right = map(int, lines[i+j+1].split())\n            tiles.append([(top_left, top_right), (bottom_left, bottom_right)])\n        if can_construct_square(n, m, tiles):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\ndef"
    },
    {
        "number": 4026,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = int(stdin.readline().strip())\n    for _ in range(test_cases):\n        n, m = map(int, stdin.readline().strip().split())\n        tiles = [list(map(int, stdin.readline().strip().split())) for _ in range(2*n)]\n        is_possible = True\n        used_tiles = set()\n        for i in range(m):\n            for j in range(m):\n                if (i,j) in used_tiles:\n                    continue\n                for tile in range(2*n):\n                    if (i,j) in used_tiles:\n                        continue\n                    if (tiles[tile][0] == tiles[tile][2] and tiles[tile][1] == tiles[tile][3]) or \\\n                            (tiles[tile][0] == tiles[tile][1] and tiles[tile][2] == tiles[tile][3]):\n                        used_tiles.add((i,j))\n                        is_possible = False\n                        break\n                if not is_possible:\n                    break\n            if not is_possible:\n                break\n        if is_possible:\n            print(\"YES\")\n        else:\n            print(\"NO\")"
    },
    {
        "number": 4026,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n, m = map(int, stdin.readline().strip().split())\n        tiles = []\n        for j in range(n):\n            top_left, top_right = map(int, stdin.readline().strip().split())\n            bottom_left, bottom_right = map(int, stdin.readline().strip().split())\n            tiles.append([[top_left, top_right], [bottom_left, bottom_right]])\n\n        # Check if the square is symmetric\n        for i in range(m):\n            for j in range(i):\n                if tiles[i][j]!= tiles[j][i]:\n                    return \"NO\"\n        \n        # Check if the square has no empty cells\n        for i in range(m):\n            for j in range(m):\n                found = False\n                for tile in tiles:\n                    if tile[0][0] == i*m + j + 1 or tile[0][1] == i*m + j + 1 or tile[1][0] == i*m + j + 1 or tile[1][1] == i*m + j + 1:\n                        found = True\n                        break\n                if not found:\n                    return \"NO\"\n\n        print(\"YES\")\n\n    return \"YES\""
    },
    {
        "number": 4026,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = stdin.split(\"\\n\")\n    test_cases.pop(0)\n    for test_case in test_cases:\n        n, m = map(int, test_case.split())\n        tile_description = [test_case.split(\"\\n\")[i+1].split() for i in range(2*n)]\n        tile_dict = {}\n        for i in range(n):\n            tile_dict[(int(tile_description[2*i][0]), int(tile_description[2*i][1]))] = (int(tile_description[2*i][2]), int(tile_description[2*i][3]))\n            tile_dict[(int(tile_description[2*i][2]), int(tile_description[2*i][3]))] = (int(tile_description[2*i][0]), int(tile_description[2*i][1]))\n        for i in range(n, 2*n):\n            tile_dict[(int(tile_description[i][0]), int(tile_description[i][1]))] = (int(tile_description[i][2]), int(tile_description[i][3]))\n            tile_dict[(int(tile_description[i][2]), int(tile_description[i][3]))] = (int(tile_description[i][0]), int(tile_description[i][1]))\n        square = [[0]*m for _ in range(m)]\n        for i in range(m):\n            for j in range(m):\n                if j >= i:\n                    square[i][j] = tile_dict[square[j-1][i]][1-j+i]\n                else:\n                    square[i][j] = tile_dict[square[i-1][j]][1-i+j]\n        for i in range(m):\n            for j in range(m):\n                if i!= j and square[i][j]!= tile_dict[square[j][i]][1-j+i]:\n                    return \"NO\"\n        return \"YES\""
    },
    {
        "number": 4026,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    t = int(lines[0])\n    for i in range(1, t * 7, 7):\n        n, m = map(int, lines[i].split())\n        tiles = []\n        for j in range(i + 1, i + 7):\n            top_left, top_right = map(int, lines[j].split())\n            bottom_left, bottom_right = map(int, lines[j + 1].split())\n            tiles.append((top_left, top_right, bottom_left, bottom_right))\n\n        # Check if masha can construct the square\n        if m == 1:\n            return \"NO\"\n\n        # Check if the number of tiles of each type is enough\n        types = set(tile for tile in tiles)\n        if len(types) < n:\n            return \"NO\"\n\n        # Check if the number of tiles of each type is enough\n        counts = {tile: tiles.count(tile) for tile in types}\n        for count in counts.values():\n            if count < m ** 2:\n                return \"NO\"\n\n        # Check if the square is symmetric\n        matrix = [[0] * m for _ in range(m)]\n        used = [[False] * m for _ in range(m)]\n        for tile in tiles:\n            top_left, top_right, bottom_left, bottom_right = tile\n            for i in range(m):\n                if used[i][i]:\n                    return \"NO\"\n                for j in range(i + 1, m):\n                    if used[i][j] or used[j][i]:\n                        return \"NO\"\n                    if matrix[i][j]!= matrix[j][i]:\n                        return \"NO\"\n                    if not (top_left <= matrix[i][j] <= bottom_left and top_right <= matrix[j][i] <= bottom_right):\n                        return \"NO\"\n                    used[i][j] = used[j][i] = True\n                    matrix[i][j] = matrix[j][i] = max(top_left, top_right, bottom_left, bottom_right)\n\n        return \"YES\""
    },
    {
        "number": 4026,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = int(stdin.readline())\n\n    for i in range(test_cases):\n        n, m = map(int, stdin.readline().split())\n\n        tiles = []\n        for j in range(n):\n            top_left, top_right = map(int, stdin.readline().split())\n            bottom_left, bottom_right = map(int, stdin.readline().split())\n\n            tiles.append([top_left, top_right, bottom_left, bottom_right])\n\n        # Check if the number of tiles is enough to construct the square\n        if m > n * 2:\n            return \"NO\"\n\n        # Check if all tiles can be placed in the square\n        used = [[False] * m for _ in range(m)]\n        for tile in tiles:\n            for i in range(m - 1):\n                for j in range(m - 1):\n                    if used[i][j] and used[i+1][j] and used[i][j+1] and used[i+1][j+1]:\n                        return \"NO\"\n                    if not used[i][j] and not used[i+1][j] and not used[i][j+1] and not used[i+1][j+1]:\n                        used[i][j] = used[i+1][j] = used[i][j+1] = used[i+1][j+1] = True\n\n        # Check if the square is symmetric with respect to the main diagonal matrix\n        for i in range(m):\n            for j in range(i):\n                if tiles[j//2][j%2]!= tiles[i//2][i%2]:\n                    return \"NO\"\n\n        # Check if the square is a valid rectangle with no gaps\n        for i in range(m):\n            for j in range(m):\n                if not used[i][j]:\n                    return \"NO\"\n\n        return \"YES\"\n"
    },
    {
        "number": 4027,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n % 2 == 0:\n        return str(0)\n    else:\n        return str(1)"
    },
    {
        "number": 4027,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = set(range(1, n+1))\n    a = min(s)\n    b = max(s)\n    return abs(a+b-n)"
    },
    {
        "number": 4027,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = sum(range(1, n+1))\n    return str(abs(s))"
    },
    {
        "number": 4027,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    A = set()\n    B = set()\n    for i in range(1, n+1):\n        if i % 3 == 1:\n            A.add(i)\n        else:\n            B.add(i)\n    return abs(sum(A) - sum(B))\n\ndef"
    },
    {
        "number": 4027,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = list(range(1, n+1))\n    a = set()\n    b = set()\n    for i in s:\n        if i % 2 == 0:\n            a.add(i)\n        else:\n            b.add(i)\n    return abs(sum(a) - sum(b))"
    },
    {
        "number": 4027,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = set(range(1, n+1))\n    return min(abs(sum(a)-sum(a-set([i]))) for i in a)"
    },
    {
        "number": 4027,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n\n    if n % 2 == 0:\n        return 1\n    else:\n        return 0\n\n\nprint(solution(\"3\")) # output: 0\nprint(solution(\"5\")) # output: 1\nprint(solution(\"6\")) # output: 1"
    },
    {
        "number": 4027,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    A = set()\n    B = set()\n    for i in range(1, n+1):\n        if i <= n//2:\n            A.add(i)\n        else:\n            B.add(i)\n    return abs(sum(A) - sum(B))"
    },
    {
        "number": 4027,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(range(1, n+1))\n    b = []\n    min_diff = n*2\n    for i in range(n//2):\n        if min_diff > abs(sum(a) - sum(b)):\n            min_diff = abs(sum(a) - sum(b))\n        b.append(a.pop())\n    return str(min_diff)\n\n\nprint(solution(sys.stdin))"
    },
    {
        "number": 4027,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = sum(range(1, n+1))\n    return str(abs(s-n*(n+1)//2))"
    },
    {
        "number": 4028,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    n, s = map(int, stdin.readline().strip().split())\n    # Initialize variables\n    MOD = 10**9 + 7\n    count = 0\n    # Loop through all possible starting positions\n    for i in range(n+1):\n        for j in range(n+1-i):\n            # Check if substring is valid\n            if s[i:i+j] == '()'*j:\n                # Check if substring can be transformed into a valid arithmetic expression\n                if j % 2 == 0:\n                    # Check if expression is valid\n                    if s[i+j:i+2*j] == '()'*j:\n                        count += 1\n    # Return count modulo MOD\n    return count % MOD"
    },
    {
        "number": 4028,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    mod = 1000000007\n    n, s = map(int, stdin.split())\n    ans = 1\n    for i in range(n):\n        if s[i] == '(':\n            ans *= 2\n        if s[i] == ')':\n            ans = ans * 2 - 1\n    ans = ans % mod\n    return str(ans)"
    },
    {
        "number": 4028,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    MOD = 1000000007\n    dp = [[0]*(2*n+1) for _ in range(2*n+1)]\n    dp[0][0] = 1\n    for i in range(len(s)):\n        for j in range(2*n+1):\n            if s[i] == '(':\n                dp[i+1][j+1] = (dp[i][j+1] + dp[i][j]) % MOD\n            else:\n                if j-1 >= 0:\n                    dp[i+1][j-1] = (dp[i][j-1] + dp[i][j]) % MOD\n                if j >= 1:\n                    dp[i+1][j] = (dp[i][j] + dp[i][j-1]) % MOD\n    return dp[len(s)][n]"
    },
    {
        "number": 4028,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.strip().split())\n    MOD = 10**9 + 7\n    dp = [[0]*(2*n+1) for _ in range(2*n+1)]\n    dp[0][0] = 1\n    for i in range(2*n):\n        dp[0][i+1] = (dp[0][i]*2) % MOD\n        dp[i+1][0] = (dp[i][0]*2) % MOD\n    for i in range(2*n):\n        for j in range(2*n):\n            if i+j+2 > 2*n:\n                break\n            if s[i:j+1] in \"()\":\n                dp[i+j+1][i+j+1] = (dp[i+j][i+j] + dp[i+j][i+j+1] + dp[i+j][i+j+2]) % MOD\n            else:\n                dp[i+j+1][i+j+1] = (dp[i+j][i+j]) % MOD\n    ans = 0\n    for i in range(2*n):\n        ans = (ans + dp[i][i+n]) % MOD\n    return ans"
    },
    {
        "number": 4028,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    MOD = 10**9 + 7\n\n    def dfs(i, j, prev):\n        if i == j:\n            return 1 if prev else 0\n        ans = 0\n        if s[i] == '(' and (i == 0 or s[i-1]!= ')'):\n            ans += dfs(i+1, j, True)\n        if s[j-1] == ')' and (j == len(s) or s[j]!= '('):\n            ans += dfs(i, j-1, True)\n        return ans % MOD\n\n    ans = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            if s[i:j] == s:\n                ans += dfs(i, j, False)\n    ans = ans % MOD\n    print(ans)"
    },
    {
        "number": 4028,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    MOD = 1000000007\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            sub = s[i:j]\n            if sub.count(\"(\") == sub.count(\")\"):\n                if eval(sub.replace(\"(\", \"+\").replace(\")\", \"*1\")) == 2**n:\n                    count += 1\n                    count %= MOD\n    return count"
    },
    {
        "number": 4028,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    MOD = 1000000007\n    n, s = map(int, stdin.strip().split())\n    count = 0\n    for i in range(len(s)):\n        for j in range(i + 2, len(s) + 1, 2):\n            if s[i:j] == s[i:j][::-1]:\n                count += 1\n                if count >= 10**18:\n                    count %= MOD\n    return count % MOD"
    },
    {
        "number": 4028,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    MOD = 1000000007\n    count = 0\n    # generate all possible substrings of length 2n\n    for i in range(len(s)-n+1):\n        sub = s[i:i+2*n]\n        if sub.count('(') == sub.count(')'):\n            count += 1\n    count %= MOD\n    return count"
    },
    {
        "number": 4028,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    MOD = 10**9+7\n    n, s = stdin.strip().split()\n    n = int(n)\n    ans = 0\n    for i in range(len(s)):\n        if s[i] == '(':\n            for j in range(i+2, len(s), 2):\n                if s[j] == ')':\n                    ans = (ans + pow(2, len(s[i+1:j+1]), MOD)) % MOD\n    return ans % MOD"
    },
    {
        "number": 4028,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(str, stdin.splitlines())\n    n = int(n)\n    MOD = int(1e9) + 7\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            sub = s[i:j]\n            if not sub.count('(') - sub.count(')') or not (len(sub) & 1):\n                continue\n            if sub == sub[::-1] and sub.count('(') == sub.count(')'):\n                continue\n            if sub.count('(') == sub.count(')') and sub == ''.join(reversed(sub)):\n                continue\n            if sub.count('(')!= sub.count(')'):\n                continue\n            if sub.count('(') - sub.count(')') == 1 and len(sub) == 2*n:\n                count = (count + pow(2, n, MOD)) % MOD\n    print(count)"
    },
    {
        "number": 4029,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 25 == 0:\n        return 0\n    \n    moves = 0\n    while n % 25!= 0:\n        if n % 10 == 0 or (n % 10 == 1 and n // 10 == 1):\n            return -1\n        \n        # Find the leftmost digit that can be swapped with the digit to its right.\n        i = 0\n        while (n // 10**i) % 10 == 0:\n            i += 1\n        \n        # Swap the leftmost digit with the digit to its right.\n        n //= 10**i\n        n, right = n % 10**i, n // 10**i\n        n = n * 10**i + right * 10**(i-1) + left\n        \n        # Update the number of moves.\n        moves += 1\n    \n    return moves"
    },
    {
        "number": 4029,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    # check if n is divisible by 25\n    if n % 25 == 0:\n        return 0\n    \n    # initialize variables\n    count = 0\n    num_str = str(n)\n    n_digits = len(num_str)\n    swap_count = 0\n    \n    # iterate over all pairs of adjacent digits and swap them if possible\n    for i in range(n_digits-1):\n        if num_str[i]!= '0' and num_str[i+1]!= '0':\n            # check if swapping would result in a number with leading zeroes\n            if int(num_str[:i] + num_str[i+1] + num_str[i] + num_str[i+2:]) == 0:\n                continue\n            # perform swap\n            num_str = num_str[:i] + num_str[i+1] + num_str[i] + num_str[i+2:]\n            swap_count += 1\n            # check if swapping would result in a number divisible by 25\n            if int(num_str) % 25 == 0:\n                return swap_count\n    \n    # if we have iterated over all pairs and still haven't found a number divisible by 25, return -1\n    return -1"
    },
    {
        "number": 4029,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    moves = 0\n    while n % 25!= 0:\n        i = 0\n        while i < len(str(n)) - 1 and str(n)[i] == '0' and str(n)[i+1] == '0':\n            i += 1\n        if i == len(str(n)) - 1:\n            return -1\n        n_str = list(str(n))\n        n_str[i], n_str[i+1] = n_str[i+1], n_str[i]\n        n = int(''.join(n_str))\n        moves += 1\n    return moves"
    },
    {
        "number": 4029,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 25!= 0:\n        return -1\n    moves = 0\n    while n % 10 == 0:\n        n //= 10\n        moves += 1\n    if n % 5 == 0:\n        n //= 5\n        moves += 1\n    if n % 2 == 0:\n        n //= 2\n        moves += 1\n    if n % 5 == 0:\n        n //= 5\n        moves += 1\n    if n % 2 == 0:\n        n //= 2\n        moves += 1\n    if n % 5 == 0:\n        n //= 5\n        moves += 1\n    return moves"
    },
    {
        "number": 4029,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 25!= 0:\n        return -1\n    moves = 0\n    while n % 25 == 0:\n        moves += 1\n        n = swap_adjacent_digits(n)\n    return moves\n\ndef"
    },
    {
        "number": 4029,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    while n % 25!= 0:\n        i = 0\n        while n % 10 == 0:\n            n //= 10\n            i += 1\n        if i == 0:\n            return \"-1\"\n        n = int(str(n)[:i-1] + str(n)[i-1] + str(n)[i:])\n        count += 1\n    return count"
    },
    {
        "number": 4029,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 25 == 0:\n        return 0\n    count = 0\n    while n % 25!= 0:\n        if n % 10 == 0:\n            n //= 10\n            count += 1\n        else:\n            i = n % 10\n            j = (n // 10 + i) % 10\n            n = (n // 10) * 10 + j\n            count += 1\n    return count if n % 25 == 0 else -1"
    },
    {
        "number": 4029,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    while n % 25!= 0:\n        # Find the last two digits that can be swapped\n        i = len(str(n)) - 1\n        while str(n)[i] == '0':\n            i -= 1\n        j = i - 1\n        while str(n)[j] == '0':\n            j -= 1\n        if j < 0:\n            # No more moves possible\n            return -1\n        # Swap the digits\n        n = n // 10**(j+1) + (n % 10**(j+1)) // 10*10**(j+1) + (n % 10**(j+1)) % 10*(10**(j+1) + 1)\n        count += 1\n    return count"
    },
    {
        "number": 4029,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n % 25 == 0:\n        return \"0\"\n    else:\n        count = 0\n        while n % 25!= 0:\n            if n % 10 == 0:\n                return \"-1\"\n            idx = n % 10\n            n //= 10\n            if n % 10 < idx:\n                n *= 10\n            else:\n                n += idx\n            count += 1\n        return str(count)"
    },
    {
        "number": 4029,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 25 == 0:\n        return 0\n    count = 0\n    n_str = str(n)\n    for i in range(len(n_str) - 1):\n        if n_str[i] == '0' and n_str[i+1] == '0':\n            return -1\n        if n_str[i] == '0' and n_str[i+1]!= '0':\n            count += 1\n            n_str = n_str[:i] + n_str[i+1] + n_str[i] + n_str[i+2:]\n    if int(n_str) % 25 == 0:\n        return count\n    else:\n        return -1"
    },
    {
        "number": 4030,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    s = stdin.split('\\n')[1]\n    \n    # coloring\n    count = 0\n    colors = [0] * n\n    for i in range(n):\n        if not colors[i]:\n            count += 1\n            colors[i] = count\n            for j in range(i + 1, n):\n                if s[j] < s[i] and not colors[j]:\n                    colors[j] = count\n                elif s[j] == s[i] and not colors[j]:\n                    colors[j] = colors[i]\n    \n    res = count\n    if count == 1:\n        print(res)\n        print(' '.join(str(i + 1) for i in range(n)))\n    else:\n        # swaps\n        swaps = 0\n        for i in range(n - 1):\n            if colors[i]!= colors[i + 1]:\n                if s[i] > s[i + 1]:\n                    swaps += 1\n                    colors[i], colors[i + 1] = colors[i + 1], colors[i]\n        res += swaps // 2\n        if swaps % 2 == 1:\n            res += 1\n        \n        # print result\n        print(res)\n        print(' '.join(str(colors[i]) for i in range(n)))\n    \n    return ''"
    },
    {
        "number": 4030,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n = int(stdin.split()[0])\n    s = stdin.split()[1]\n    \n    # initialize variables\n    colors = {}\n    for char in s:\n        if char not in colors:\n            colors[char] = len(colors) + 1\n    res = len(colors)\n    if res == n:\n        # no swaps needed\n        return '\\n'.join(map(str, [res] + [colors[char] for char in s]))\n    \n    # perform swaps\n    swaps = 0\n    while swaps < n:\n        for i in range(len(s)-1):\n            if colors[s[i]]!= colors[s[i+1]]:\n                s = s[:i] + s[i+1] + s[i] + s[i+2:]\n                swaps += 1\n                if swaps >= n:\n                    break\n    \n    # restore coloring\n    c = [colors[char] for char in s]\n    return '\\n'.join(map(str, [res] + c))"
    },
    {
        "number": 4030,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n\n    colors = set()\n    for c in s:\n        colors.add(c)\n    res = len(colors)\n\n    print(res)\n    print(\" \".join(str(i+1) for i in range(res) for j in range(n) if s[j] == c))\n\n    return str(res) + \"\\n\" + \" \".join(str(i+1) for i in range(res) for j in range(n) if s[j] == c)"
    },
    {
        "number": 4030,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    \n    # initialize coloring\n    coloring = [0] * n\n    \n    # count colors\n    colors_count = 1\n    for i in range(1, n):\n        if s[i]!= s[i-1]:\n            colors_count += 1\n            coloring[i] = coloring[i-1] + 1\n        else:\n            coloring[i] = coloring[i-1]\n    \n    # print result and coloring\n    print(colors_count)\n    print(\" \".join(map(str, coloring)))"
    },
    {
        "number": 4030,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    s = stdin.split('\\n')[1]\n\n    color_map = {}\n    for c in s:\n        if c not in color_map:\n            color_map[c] = len(color_map) + 1\n\n    if len(color_map) == 1:\n        res = 1\n    else:\n        res = len(color_map)\n\n    coloring = [color_map[c] for c in s]\n\n    print(res)\n    print(*coloring)\n\n    return ''"
    },
    {
        "number": 4030,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    colors = set()\n    for i in s:\n        colors.add(i)\n    colors = list(colors)\n    res = len(colors)\n    print(res)\n    print(\" \".join(colors))\n    return str(res)\n"
    },
    {
        "number": 4030,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    s = stdin.split('\\n')[1]\n    \n    # Find the frequency of each character\n    freq = {}\n    for c in s:\n        if c not in freq:\n            freq[c] = 0\n        freq[c] += 1\n    \n    # Find the minimum number of colors required to color the string\n    colors = len(freq)\n    for f in freq.values():\n        if colors < f:\n            colors = f\n    \n    # Color the string with the required number of colors\n    coloring = {}\n    color = 1\n    for c in s:\n        if c not in coloring:\n            coloring[c] = color\n            color += 1\n        if color > colors:\n            color = 1\n    \n    # Output the minimum number of colors required and the coloring\n    res = colors\n    result = ''\n    for c in s:\n        result += str(coloring[c]) +''\n    \n    return str(res) + '\\n' + result\n"
    },
    {
        "number": 4030,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    \n    # Initialize coloring to -1\n    c = [-1] * n\n\n    # Find minimum number of colors\n    color_count = 0\n    for i in range(n):\n        if c[i] == -1:\n            color_count += 1\n            c[i] = color_count\n\n    # Check if sorting possible\n    if color_count == 1:\n        return f\"{color_count}\\n{c}\"\n\n    # Find minimum swaps\n    min_swaps = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if c[i]!= c[j]:\n                min_swaps += 1\n                c[i], c[j] = c[j], c[i]\n                break\n    \n    return f\"{color_count}\\n{c}\""
    },
    {
        "number": 4030,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split('\\n'))\n    res = 1\n    c = [1] * n\n    for i in range(n):\n        if s[i] == 'd' and c[i] == 2:\n            c[i] = 3\n        elif s[i] == 'e' and c[i] == 2:\n            c[i] = 3\n        elif s[i] == 'd' and c[i] == 1:\n            res += 1\n            c[i] = 2\n        elif s[i] == 'e' and c[i] == 1:\n            res += 1\n            c[i] = 2\n        elif s[i] == 'c' and c[i] == 1:\n            res += 1\n            c[i] = 2\n    if s[0] == 'b':\n        c[0] = 2\n    if s[-1] == 'a':\n        c[-1] = 2\n    res = min(res, 3)\n    print(res)\n    print(' '.join(map(str, c)))\n    return ''"
    },
    {
        "number": 4030,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    color_map = {}\n    color = 1\n    for c in s:\n        if c not in color_map:\n            color_map[c] = color\n            color += 1\n    res = len(color_map)\n    stdout = str(res) + '\\n'\n    color_list = list(color_map.values())\n    color_list.sort()\n    for c in color_list:\n        stdout += str(c) +''\n    return stdout"
    },
    {
        "number": 4031,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    strings = [stdin.readline().strip() for i in range(n)]\n\n    def is_substring(s1: str, s2: str) -> bool:\n        for i in range(len(s2) - len(s1) + 1):\n            if s1 == s2[i:i+len(s1)]:\n                return True\n        return False\n\n    def dfs(visited: list, current: str) -> bool:\n        visited[strings.index(current)] = True\n        for i in range(len(strings)):\n            if not visited[i] and is_substring(current, strings[i]):\n                if dfs(visited, strings[i]):\n                    return True\n        return False\n\n    visited = [False] * n\n    result = []\n    for i in range(n):\n        if not visited[i]:\n            if not dfs(visited, strings[i]):\n                return \"NO\"\n            result.append(strings[i])\n\n    return \"YES\\n\" + \"\\n\".join(result)"
    },
    {
        "number": 4031,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    strings = stdin.readlines()\n    strings = [s.strip() for s in strings]\n\n    substrings = set()\n\n    for i, s in enumerate(strings):\n        for j in range(len(s)):\n            if s[j:] in strings[i+1:]:\n                substrings.add(s)\n\n    if len(substrings) == len(strings):\n        return \"YES\\n\" + \"\\n\".join(strings)\n    else:\n        return \"NO\""
    },
    {
        "number": 4031,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    strings = [stdin.splitlines()[i] for i in range(1, n+1)]\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            if not set(strings[i]).issubset(strings[j]):\n                return \"NO\"\n    \n    return \"YES\\n\" + \"\\n\".join(strings)"
    },
    {
        "number": 4031,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    strings = [stdin.readline().strip() for i in range(n)]\n    for i in range(n):\n        for j in range(i):\n            if strings[j] in strings[i]:\n                return \"NO\"\n    return \"YES\\n\" + \"\\n\".join(strings)"
    },
    {
        "number": 4031,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    strings = stdin.readline().strip().split()\n\n    # Check if all strings are substrings of each other\n    for i in range(n):\n        for j in range(n):\n            if i!= j and not (strings[i] in strings[j]):\n                return \"NO\"\n\n    # Check if all substrings of a string are placed before the string\n    for i in range(n):\n        for j in range(i):\n            if all(sub in strings[i] for sub in strings[j]):\n                return \"NO\"\n\n    # If all conditions are satisfied, return the strings in required order\n    return \"YES\\n\" + \"\\n\".join(strings)"
    },
    {
        "number": 4031,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    strings = stdin.readline().strip().split()\n    for i in range(n):\n        for j in range(i):\n            if not set(strings[j]).issubset(set(strings[i])):\n                return \"NO\"\n    return \"YES\\n\" + \"\\n\".join(strings)\n\nprint(solution(\"5\\na\\naba\\nabacaba\\nba\\naba\\n\")) #Output: YES\\na\\nba\\naba\\nabacaba"
    },
    {
        "number": 4031,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    strings = stdin.split('\\n')[1:]\n    substrings = set()\n    for s in strings:\n        for i in range(len(s)):\n            for j in range(i+1, len(s)+1):\n                substrings.add(s[i:j])\n    if len(substrings) < n:\n        return \"NO\"\n    visited = set()\n    result = []\n    for s in strings:\n        for i in range(len(s)):\n            for j in range(i+1, len(s)+1):\n                if s[i:j] in visited and s[i:j] not in result:\n                    result.append(s)\n                    break\n            else:\n                continue\n            break\n        else:\n            continue\n        break\n    return \"YES\\n\" + \"\\n\".join(result)"
    },
    {
        "number": 4031,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    strings = []\n    for i in range(n):\n        strings.append(stdin.readline().strip())\n    \n    for i in range(n-1):\n        if strings[i+1] not in strings[i]:\n            return \"NO\"\n    \n    return \"YES\\n\" + \"\\n\".join(strings)"
    },
    {
        "number": 4031,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # read the input\n    n = int(stdin.readline())\n    strings = [stdin.readline().strip() for _ in range(n)]\n\n    # find all substrings\n    substrings = set()\n    for s in strings:\n        for i in range(len(s)):\n            for j in range(i+1, len(s)+1):\n                substrings.add(s[i:j])\n\n    # check if reordering is possible\n    for s in strings:\n        if not any(s in substrings for sub in strings[:strings.index(s)]):\n            return \"NO\"\n\n    # reorder the strings\n    reordered = []\n    for s in strings:\n        if not any(s in substrings for sub in reordered):\n            reordered.append(s)\n\n    return \"YES\\n\" + \"\\n\".join(reordered)\n"
    },
    {
        "number": 4031,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    strings = [stdin.split()[i] for i in range(1, n+1)]\n    for i in range(n):\n        for j in range(i):\n            if not set(strings[i]).issubset(strings[j]):\n                return \"NO\"\n    return \"YES\\n\" + \"\\n\".join(strings)\n"
    },
    {
        "number": 4032,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    left, right = 0, n-1\n    count = 0\n    while left <= right:\n        if a[left] <= k:\n            count += 1\n            left += 1\n        if a[right] <= k:\n            count += 1\n            right -= 1\n        if a[left] > k:\n            left += 1\n        if a[right] > k:\n            right -= 1\n    return count"
    },
    {
        "number": 4032,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    l, r = 0, n - 1\n    count = 0\n    while l <= r:\n        if a[l] <= k:\n            l += 1\n        if a[r] <= k:\n            r -= 1\n        count += 1\n    return count"
    },
    {
        "number": 4032,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    left, right = 0, n-1\n    count = 0\n    while left <= right:\n        if a[left] <= k:\n            left += 1\n            count += 1\n        elif a[right] <= k:\n            right -= 1\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 4032,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    l, r = 0, n - 1\n    res = 0\n    while l <= r:\n        if a[l] <= k:\n            res += 1\n            l += 1\n        elif a[r] <= k:\n            res += 1\n            r -= 1\n        else:\n            break\n    return res\n\nwith open('input.txt') as file:\n    input_str = file.read()\n    output = solution(input_str)\n    print(output)"
    },
    {
        "number": 4032,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.strip().split())\n    a = list(map(int, stdin.strip().split()))\n    \n    count = 0\n    left = 0\n    right = n-1\n    \n    while left <= right:\n        if a[left] <= k and a[right] <= k:\n            count += 1\n            left += 1\n            right -= 1\n        elif a[left] <= k:\n            left += 1\n        elif a[right] <= k:\n            right -= 1\n        else:\n            break\n        \n    return str(count)\n"
    },
    {
        "number": 4032,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    \n    left = 0\n    right = n - 1\n    \n    solved = 0\n    while left <= right:\n        if a[left] <= k:\n            left += 1\n            solved += 1\n        elif a[right] <= k:\n            right -= 1\n            solved += 1\n        else:\n            break\n    \n    return solved"
    },
    {
        "number": 4032,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    left_solved = right_solved = 0\n    left = 0\n    right = n - 1\n\n    while left <= right:\n        if a[left] <= k and left_solved < right:\n            left_solved += 1\n            left += 1\n        elif a[right] <= k and right_solved < left:\n            right_solved += 1\n            right -= 1\n        else:\n            return -1\n\n    return left_solved + right_solved"
    },
    {
        "number": 4032,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    left = 0\n    right = n-1\n    count = 0\n\n    while left <= right:\n        if a[left] <= k and a[right] <= k:\n            left += 1\n            right -= 1\n            count += 1\n        elif a[left] <= k:\n            left += 1\n        elif a[right] <= k:\n            right -= 1\n        else:\n            break\n\n    return count\n\nstdin = \"8 4\\n4 2 3 1 5 1 6 4\"\nprint(solution(stdin)) # Output: 5\n\nstdin = \"5 2\\n3 1 2 1 3\"\nprint(solution(stdin)) # Output: 0\n\nstdin = \"5 100\\n12 34 55 43 21\"\nprint(solution(stdin)) # Output: 5"
    },
    {
        "number": 4032,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().strip().split())\n    a = list(map(int, stdin.readline().strip().split()))\n    left = [i for i in range(n) if a[i] <= k]\n    right = [i for i in range(n-1, -1, -1) if a[i] <= k]\n    ans = min(len(left), len(right))\n    return str(ans)\n\nprint(solution(\"8 4\\n4 2 3 1 5 1 6 4\")) # Output: 5\nprint(solution(\"5 2\\n3 1 2 1 3\")) # Output: 0\nprint(solution(\"5 100\\n12 34 55 43 21\")) # Output: 5"
    },
    {
        "number": 4032,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.strip().split())\n    a = list(map(int, stdin.strip().split()))\n\n    left = 0\n    right = n - 1\n    count = 0\n\n    while left <= right:\n        if a[left] <= k:\n            count += 1\n            left += 1\n        elif a[right] <= k:\n            count += 1\n            right -= 1\n        else:\n            break\n\n    return str(count)"
    },
    {
        "number": 4033,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.strip().split())\n    if a == 0 and b == 0:\n        return \"infinity\"\n    elif a == 0 or b == 0:\n        return \"0\"\n    else:\n        res = (a + b) * 2 - 2\n        if a == 1 or b == 1:\n            res = res - 1\n        return str(res)"
    },
    {
        "number": 4033,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(a + b)\n\ndef"
    },
    {
        "number": 4033,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    \n    # Check if a+b is odd\n    if (a+b) % 2 == 1:\n        return \"NO\"\n    \n    # Calculate the number of tiles needed to make a rectangle with sides a and b\n    n = a + b\n    if a % 2 == 1:\n        n += 1\n    if b % 2 == 1:\n        n += 1\n    \n    # Check if n is odd\n    if n % 2 == 1:\n        return \"NO\"\n    \n    # Calculate the minimal perimeter of the rectangle\n    p = n * 4 - 6\n    \n    return str(p)"
    },
    {
        "number": 4033,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    perimeter = 0\n    tiles = a + b\n    while tiles > 0:\n        if tiles % 2 == 1:\n            perimeter += 2\n        else:\n            perimeter += 1\n        tiles //= 2\n    return perimeter"
    },
    {
        "number": 4033,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    \n    # If a+b is odd, then we can't form a rectangle, so we need to find a smaller perimeter\n    if (a+b) % 2!= 0:\n        a += 1\n        b += 1\n    \n    # Calculate the minimal perimeter by subtracting the minimum number of white tiles from the sum of colored tiles\n    min_perimeter = (a+b)**2 - a**2 - b**2\n    \n    return str(min_perimeter)"
    },
    {
        "number": 4033,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.strip().split())\n    # We can color the tiles with red and blue markers separately\n    # The total number of tiles we need to color is equal to the sum of a and b\n    # If we color the tiles with red marker first, then we have to color a+b tiles\n    # If we color the tiles with blue marker first, then we have to color a+b tiles\n    # Therefore, we need to minimize the maximum number of tiles we can have on each side of the rectangle\n    # We also need to make sure that the rectangle is as small as possible\n    # We can start with the smaller number of tiles we can color and gradually increase it\n    # We can use dynamic programming to keep track of the number of tiles we can have on each side\n    # We can update the values of the dp array as we color each tile with a marker\n    # We can use the values of the dp array to compute the minimal perimeter\n    # We can use two arrays to keep track of the number of tiles we can have on each side\n    dp_red = [0] * (a + b + 1)\n    dp_blue = [0] * (a + b + 1)\n    dp_red[0] = 0\n    dp_blue[0] = 0\n    dp_red[1] = 1\n    dp_blue[1] = 1\n    for i in range(2, a + b + 1):\n        dp_red[i] = dp_red[i - 1] + 1\n        dp_blue[i] = dp_blue[i - 1] + 1\n    for i in range(3, a + b + 1):\n        dp_red[i] = dp_red[i - 1] + dp_blue[i - 2] + 1\n        dp_blue[i] = dp_blue[i - 1] + dp_red[i - 2] + 1\n    if a + b % 2 == 1:\n        # If the total number of tiles is odd, then we can't form a rectangle with an odd number of tiles on each side\n        # Therefore, the minimal perimeter is the maximum of the dp arrays\n        ans = max(dp_red[a + b], dp_blue[a + b])\n    else:\n        # If the total number of tiles is even, then we can form a rectangle with an odd number of tiles on each side\n        # Therefore, the minimal perimeter is the minimum of the dp arrays\n        ans = min(dp_red[a + b], dp_blue[a + b])\n    return str(ans)\n"
    },
    {
        "number": 4033,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    # a+b+2 colors needed, so we need to make sure we have enough markers\n    if a+b+2 > a**2 + b**2:\n        return 'impossible'\n    # we can either color a or b tiles red, and then the rest will be blue\n    # or we can color b or a tiles blue, and then the rest will be red\n    if a >= b:\n        return 2*a + 2*b\n    else:\n        return 2*b + 2*a"
    },
    {
        "number": 4033,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a < b:\n        a, b = b, a\n    tiles = [[\"white\" for i in range(a+b)] for j in range(a+b)]\n    for i in range(a+b):\n        tiles[i][i] = \"blue\"\n        if i < a:\n            tiles[a+b-1-i][i] = \"red\"\n    cnt = 0\n    for i in range(a+b):\n        for j in range(a+b):\n            if tiles[i][j]!= \"white\":\n                cnt += 1\n    ans = cnt - 1\n    for i in range(a+b):\n        for j in range(a+b):\n            if tiles[i][j]!= \"white\":\n                if i > 0 and tiles[i-1][j]!= \"white\":\n                    ans += 1\n                if j > 0 and tiles[i][j-1]!= \"white\":\n                    ans += 1\n    return ans"
    },
    {
        "number": 4033,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.strip().split())\n    if a > b:\n        a, b = b, a\n    n = a + b\n    if n % 2 == 1:\n        n += 1\n    m = (n**2 + n) // 2\n    return m - a"
    },
    {
        "number": 4033,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.strip().split())\n    dp = [[float('inf')] * (b+1) for _ in range(a+1)]\n    dp[0][0] = 0\n    for i in range(a+1):\n        for j in range(b+1):\n            if i > 0:\n                dp[i][j] = min(dp[i][j], dp[i-1][j])\n            if j > 0:\n                dp[i][j] = min(dp[i][j], dp[i][j-1])\n            if i > 0 and j > 0:\n                dp[i][j] = min(dp[i][j], dp[i-1][j-1])\n            dp[i][j] += 1\n    return dp[a][b]\n\ndef"
    },
    {
        "number": 4034,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    colors = ['0' for _ in range(n)]\n    swaps = 0\n    for i in range(n-1):\n        if colors[i] == colors[i+1]:\n            swaps += 1\n            colors[i+1] = str((int(colors[i]) + 1) % 2)\n            colors[i] = str((int(colors[i+1]) + 1) % 2)\n    if swaps % 2 == 1:\n        return \"NO\\n\"\n    else:\n        colors = \"\".join(colors)\n        colors = [int(colors[i]) for i in range(n)]\n        colors = \"\".join([str(colors[i]) for i in range(n)])\n        return \"YES\\n\" + colors"
    },
    {
        "number": 4034,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    s = stdin.split('\\n')[1]\n\n    coloring = ['0'] * n\n    swap_count = 0\n    for i in range(n):\n        if s[i] == s[i-1]:\n            continue\n        if s[i] > s[i-1]:\n            coloring[i] = '0'\n            if coloring[i-1] == '1':\n                coloring[i-1], coloring[i] = coloring[i], coloring[i-1]\n                swap_count += 1\n        else:\n            coloring[i] = '1'\n            if coloring[i-1] == '0':\n                coloring[i-1], coloring[i] = coloring[i], coloring[i-1]\n                swap_count += 1\n\n    if swap_count % 2 == 1:\n        return \"NO\"\n\n    for i in range(n):\n        if s[i] == s[i-1]:\n            continue\n        if s[i] > s[i-1]:\n            if coloring[i] == coloring[i-1]:\n                return \"NO\"\n        else:\n            if coloring[i]!= coloring[i-1]:\n                return \"NO\"\n\n    return \"YES\\n\" + ''.join(coloring)\n\n\ndef"
    },
    {
        "number": 4034,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    s = stdin.split()[1]\n    count = 0\n    for i in range(n):\n        if s[i]!= 'a' and s[i]!= 'b':\n            count += 1\n    if count % 2 == 0:\n        return \"NO\"\n    else:\n        ans = \"\"\n        for i in range(n):\n            if s[i] == 'a' or s[i] == 'b':\n                ans += str(s[i] == 'a')\n            else:\n                ans += \"0\"\n        return \"YES\\n\" + ans"
    },
    {
        "number": 4034,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    s = stdin.split('\\n')[1]\n    if s == s[::-1]:\n        return \"NO\"\n    else:\n        coloring = [0 if s[i] < s[i+1] else 1 for i in range(n-1)]\n        coloring.append(0)\n        return \"YES\\n\" + \"\".join(map(str, coloring))\n\nstdin = \"9\\nabacbecfd\"\nprint(solution(stdin))  # Output: YES\\n001010101\n\nstdin = \"8\\naaabbcbb\"\nprint(solution(stdin))  # Output: YES\\n01011011\n\nstdin = \"7\\nabcdedc\"\nprint(solution(stdin))  # Output: NO\n\nstdin = \"5\\nabcde\"\nprint(solution(stdin))  # Output: YES\\n00000"
    },
    {
        "number": 4034,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    s = stdin.split('\\n')[1]\n    colors = set(['0', '1'])\n    coloring = ''\n    for c in s:\n        if len(colors) == 1:\n            coloring += colors.pop()\n            continue\n        if c in colors:\n            coloring += c\n        else:\n            colors.remove(coloring[len(s)-len(colors)])\n            coloring += c\n            colors.remove(coloring[len(s)-len(colors)])\n    if len(colors)!= 1:\n        return 'NO'\n    return 'YES\\n' + coloring"
    },
    {
        "number": 4034,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n\n    # Initialize coloring with zeros\n    coloring = ['0'] * n\n    # Check if any two neighboring characters are colored differently\n    for i in range(n-1):\n        if s[i]!= s[i+1] and coloring[i] == coloring[i+1]:\n            return \"NO\"\n\n    # Check if any two neighboring characters are colored the same\n    for i in range(n-1):\n        if s[i] == s[i+1] and coloring[i] == coloring[i+1]:\n            return \"NO\"\n\n    # Check if any character is not colored\n    for c in s:\n        if c not in 'abcdefghijklmnopqrstuvwxyz':\n            return \"NO\"\n\n    # Check if any character is not colored at least once\n    if '0' not in coloring or '1' not in coloring:\n        return \"NO\"\n\n    # Color the string\n    color_set = set(['0', '1'])\n    for i in range(n):\n        if s[i]!= min(s):\n            coloring[i] = '0'\n            color_set.remove('1')\n        else:\n            coloring[i] = '1'\n            color_set.remove('0')\n\n    # Check if the string can be sorted\n    for i in range(n-1):\n        if coloring[i]!= coloring[i+1]:\n            return \"YES\"\n\n    return \"YES\\n\" + \"\".join(coloring)"
    },
    {
        "number": 4034,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    s = stdin.split('\\n')[1]\n    colors = ['']*n\n    used_colors = set()\n    for i in range(n):\n        if s[i] in used_colors:\n            return \"NO\"\n        used_colors.add(s[i])\n        colors[i] = '0' if s[i] not in used_colors else '1'\n    return \"YES\\n\" + \"\".join(colors)"
    },
    {
        "number": 4034,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n\n    coloring = [0] * n\n    swaps = 0\n\n    for i in range(n):\n        if i > 0 and s[i] < s[i-1] and coloring[i]!= coloring[i-1]:\n            swaps += 1\n        coloring[i] = (coloring[i] + 1) % 2\n\n    if swaps % 2 == 1:\n        return \"NO\"\n    else:\n        result = \"\".join(str(c) for c in coloring)\n        return \"YES\\n\" + result"
    },
    {
        "number": 4034,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split('\\n')[:2])\n    s = list(stdin.split('\\n')[2])\n    # First, we check if we can color the string so that after coloring it can become sorted by some sequence of swaps\n    flag = 0\n    for i in range(1, n):\n        if s[i] < s[i-1]:\n            flag = 1\n            break\n    if flag == 1:\n        for i in range(n):\n            if s.count(s[i]) == 1:\n                s = ['0' if x == s[i] else '1' for x in s]\n                break\n        else:\n            return \"NO\"\n    else:\n        # If we cannot color the string, we check if it is already sorted\n        s = ''.join(s)\n        if s == ''.join(sorted(s)):\n            return \"YES\" + '0' * n\n        else:\n            return \"NO\"\n    # Second, we restore the coloring and perform the required swaps\n    swap_count = 0\n    for i in range(n-1):\n        if s[i]!= s[i+1]:\n            # Swap the characters at positions i and i+1\n            s[i], s[i+1] = s[i+1], s[i]\n            swap_count += 1\n    # Restore the coloring\n    coloring = ''.join(['0' if x == '0' else '1' for x in s])\n    # Return the solution\n    return \"YES\\n\" + coloring + \"\\n\" + str(swap_count)"
    },
    {
        "number": 4034,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    s = stdin.split()[1]\n    colors = [0] * n\n    swaps = 0\n    for i in range(n):\n        if colors[i] == 0 and (i == n-1 or s[i] < s[i+1]):\n            colors[i] = 1\n            swaps += 1\n    if swaps < 2 or n % 2 == 0:\n        return \"NO\"\n    colors[n//2] = 1\n    return \"YES\\n\" + \"\".join(map(str, colors))"
    },
    {
        "number": 4035,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split()\n    A = int(input_list[0])\n    B = int(input_list[1])\n    if A > B:\n        A, B = B, A\n    # possible prices\n    prices = list(range(A, B+1))\n    # consumption tax rates\n    rates = [0.08, 0.1]\n    # consumption tax amounts\n    tax_amounts = []\n    # iterate over possible prices\n    for price in prices:\n        tax_amount = 0\n        # iterate over consumption tax rates\n        for rate in rates:\n            tax_amount += price * rate\n        # round down to nearest integer\n        tax_amounts.append(int(tax_amount))\n    # find the price with the lowest consumption tax amount\n    min_price = -1\n    for i in range(len(prices)):\n        if min_price == -1 or tax_amounts[i] < min_tax_amount:\n            min_price = prices[i]\n            min_tax_amount = tax_amounts[i]\n    if min_price == -1:\n        return \"-1\"\n    else:\n        return str(min_price)"
    },
    {
        "number": 4035,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B = list(map(int, stdin.split()))\n    prices = set()\n    for p in range(A, B+1):\n        for c in range(8, 11):\n            if p <= 1000:\n                tax = p * c / 100\n                if tax >= 1:\n                    p -= tax\n                    p = int(p)\n                    break\n        else:\n            continue\n        prices.add(p)\n    return str(min(prices)) if prices else \"-1\""
    },
    {
        "number": 4035,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.strip().split())\n    prices = []\n    for i in range(A, B+1):\n        price = i\n        if i <= 50:\n            price += i * 0.1\n        elif i <= 100:\n            price += 50 * 0.1 + (i - 50) * 0.08\n        else:\n            price += 50 * 0.1 + (50 + 50) * 0.08 + (i - 100) * 0.1\n        prices.append(price)\n    if prices:\n        return str(min(prices))\n    else:\n        return \"-1\""
    },
    {
        "number": 4035,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    a, b = list(map(int, stdin.split()))\n\n    # Compute price before tax\n    price = 0\n    while a > 0 and b > 0:\n        price += 1\n        a -= 1\n        b -= 1\n\n    # Check if there is a price that satisfies the condition\n    if price <= 0:\n        return \"-1\"\n\n    # Compute amount of consumption tax\n    tax8 = price * 0.08\n    tax10 = price * 0.1\n\n    # Round down to nearest integer\n    tax8 = int(tax8)\n    tax10 = int(tax10)\n\n    # Compute total consumption tax\n    tax = tax8 + tax10\n\n    # Check if total consumption tax is within range\n    if tax < a or tax > b:\n        return \"-1\"\n\n    # Compute final price\n    final_price = price + tax\n\n    # Return final price as string\n    return str(final_price)"
    },
    {
        "number": 4035,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    prices = []\n    for p in range(1, 101):\n        if p < A:\n            continue\n        elif p > B:\n            break\n        if p > 1 and p % 2 == 0:\n            continue\n        if p > 1 and p % 5 == 0:\n            continue\n        if p % 3 == 0:\n            continue\n        prices.append(p)\n    if not prices:\n        return '-1'\n    else:\n        return str(min(prices))\n"
    },
    {
        "number": 4035,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    prices = set()\n    for i in range(A, B+1):\n        price = i\n        if i >= 1000:\n            price -= i // 1000 * 100\n            if price == 0:\n                continue\n        if price == 0:\n            continue\n        prices.add(price)\n    if not prices:\n        return \"-1\"\n    else:\n        return str(min(prices))"
    },
    {
        "number": 4035,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    prices = []\n    for price in range(A, B+1):\n        tax8 = price * 0.08\n        tax10 = price * 0.1\n        tax_total = int(tax8 + tax10)\n        if tax_total == A and tax8 == tax10:\n            prices.append(price)\n    if prices:\n        return str(min(prices))\n    else:\n        return \"-1\"\n\nprint(solution(input()))"
    },
    {
        "number": 4035,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    prices = sorted([i for i in range(A, B+1)])\n    if not prices:\n        return '-1'\n    min_price = prices[0]\n    for price in prices:\n        if price % 10!= 0:\n            break\n        min_price = price\n    return str(min_price)"
    },
    {
        "number": 4035,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B = list(map(int, stdin.strip().split()))\n    if A > B:\n        A, B = B, A\n    if A > 100 or B > 100:\n        return \"-1\"\n    for price in range(A, B+1):\n        if price % 5 == 0:\n            tax_8 = price * 0.08\n            tax_10 = price * 0.1\n            if tax_8 == A and tax_10 == B:\n                return str(price)\n    return \"-1\""
    },
    {
        "number": 4035,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a > b:\n        a, b = b, a\n    taxes = [(a * 0.08 + 0.5) // 1, (b * 0.1 + 0.5) // 1]\n    prices = [i + taxes[0] + taxes[1] for i in range(1, b+1)]\n    if prices:\n        return str(min(prices))\n    else:\n        return \"-1\""
    },
    {
        "number": 4036,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if k == 1:\n        return \"YES\\n1\"\n    if n < k:\n        return \"NO\"\n    a = [1] * k\n    i = 0\n    while sum(a)!= n:\n        a[i] += 1\n        if a[i] > 2 * a[i-1]:\n            a[i] = 1\n            i += 1\n            if i == k:\n                return \"NO\"\n    return \"YES\\n\" + \" \".join(map(str, a))"
    },
    {
        "number": 4036,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.strip().split())\n    if k == 1:\n        return \"YES\\n1\"\n    dp = [0] * k\n    for i in range(k):\n        if i == 0:\n            dp[i] = 1\n        elif i == 1:\n            dp[i] = 2\n        else:\n            dp[i] = dp[i-1] + dp[i-2]\n        if dp[i] > n:\n            return \"NO\"\n    if dp[-1] < n:\n        return \"NO\"\n    ans = [0] * k\n    ans[0] = dp[0]\n    for i in range(1, k):\n        ans[i] = min(dp[i], ans[i-1] + 1)\n    return \"YES\\n\" + \" \".join(map(str, ans))"
    },
    {
        "number": 4036,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.strip().split())\n\n    if n == 1 and k == 1:\n        return \"YES\\n1\"\n\n    if n < k:\n        return \"NO\"\n\n    if n % k == 0:\n        a = [n//k] * k\n    else:\n        a = [1] + [(n-1)//k] * (k-1)\n        a[-1] += n % k\n\n    for i in range(k-1):\n        if a[i] >= a[i+1] or a[i] >= 2*a[i+1]:\n            return \"NO\"\n\n    return \"YES\\n\" + \" \".join(map(str, a))"
    },
    {
        "number": 4036,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if k < 2 or 2 * n < k or n < k:\n        return \"NO\"\n    a = [1] * k\n    for i in range(k - 1):\n        a[i] = a[i] * 2\n        if a[i] > 2 * n:\n            return \"NO\"\n    for i in range(k - 1):\n        if a[i] + a[i + 1] > 2 * n:\n            a[i + 1] = 2 * n - a[i]\n            if a[i + 1] < 2:\n                return \"NO\"\n    return \"YES\\n\" + \" \".join(map(str, a))\n"
    },
    {
        "number": 4036,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if k == 1:\n        return \"YES\\n1\"\n    for i in range(k-1):\n        if 2*a[i] <= a[i+1]:\n            continue\n        return \"NO\"\n    for i in range(k):\n        if i == 0:\n            a[i] = n // k\n        else:\n            a[i] = min(max(a[i-1]-1, 0), n-sum(a[:i]))\n    return \"YES\\n\"+\" \".join(map(str, a))\n\nstdin = \"26 6\"\nprint(solution(stdin)) # Output: \"YES\\n1 2 4 5 6 8\"\n\nstdin = \"8 3\"\nprint(solution(stdin)) # Output: \"NO\"\n\nstdin = \"1 1\"\nprint(solution(stdin)) # Output: \"YES\\n1\"\n\nstdin = \"9 4\"\nprint(solution(stdin)) # Output: \"NO\""
    },
    {
        "number": 4036,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = [0] * k\n    a[0] = 1\n    for i in range(1, k):\n        if a[i-1] * 2 <= n:\n            a[i] = a[i-1] * 2\n        else:\n            a[i] = n // k + (1 if n % k > i else 0)\n            n -= a[i] * k\n    if n > 0:\n        return \"NO\"\n    else:\n        return \"YES\\n\" + \" \".join(map(str, a))"
    },
    {
        "number": 4036,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if k >= 2*n:\n        return \"NO\"\n    for i in range(k):\n        if i == 0:\n            a = [1]*(n//k + (n%k > i))\n        else:\n            a[i] = max(a[i-1]//2, 1) + 2*(i+1)\n    if sum(a)!= n:\n        return \"NO\"\n    return \"YES\\n\" + \" \".join(map(str, a))"
    },
    {
        "number": 4036,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.strip().split())\n    if n < k:\n        return \"NO\"\n    a = [1] * k\n    i = 0\n    j = 0\n    while j < k:\n        a[j] = min(a[j] + a[i], n)\n        i += 1\n        j += 1\n    if sum(a)!= n:\n        return \"NO\"\n    for i in range(k-1):\n        if a[i] >= a[i+1] or a[i] >= 2*a[i+1]:\n            return \"NO\"\n    return \"YES\\n\" + \" \".join(map(str, a))\n\nassert solution(\"26 6\") == \"YES\\n1 2 4 5 6 8\\n\"\nassert solution(\"8 3\") == \"NO\\n\"\nassert solution(\"1 1\") == \"YES\\n1\\n\"\nassert solution(\"9 4\") == \"NO\\n\""
    },
    {
        "number": 4036,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n > k*(2*k+1)//2:\n        return \"NO\"\n    a = [1]*k\n    for i in range(k-1):\n        a[i+1] = min(2*a[i]-1, n-sum(a[:i+1]))\n    if sum(a)<n or any(a[i]>2*a[i+1] for i in range(k-1)) or any(a[i]>a[i+1] for i in range(k-1)):\n        return \"NO\"\n    return \"YES\\n\"+\" \".join(map(str, a))\n\nprint(solution(\"26 6\")) # Output: YES\\n1 2 4 5 6 8\nprint(solution(\"8 3\")) # Output: NO\nprint(solution(\"1 1\")) # Output: YES\\n1 \nprint(solution(\"9 4\")) # Output: NO"
    },
    {
        "number": 4036,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n > k*2 or n < k:\n        return \"NO\"\n    if n == k:\n        return \"YES\\n1\"\n    if n == 1:\n        return \"YES\\n\" + \" \".join([str(k)]*k)\n    a = [1]*k\n    for i in range(k-1):\n        a[i] = a[i] + a[i+1]\n        if a[i] > 2*a[i+1]:\n            return \"NO\"\n        if a[i] > n:\n            return \"NO\"\n    if sum(a)!= n:\n        return \"NO\"\n    return \"YES\\n\" + \" \".join(map(str, a))\n"
    },
    {
        "number": 4037,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, r = list(map(int, stdin.strip().split()))\n    a = []\n    b = []\n    for i in range(n):\n        ai, bi = list(map(int, stdin.strip().split()))\n        a.append(ai)\n        b.append(bi)\n    total = r\n    count = 0\n    for i in range(n):\n        if total >= a[i]:\n            total += b[i]\n            count += 1\n    return str(count)\n"
    },
    {
        "number": 4037,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    n, r = map(int, lines[0].split())\n    projects = []\n    for line in lines[1:]:\n        a, b = map(int, line.split())\n        projects.append((a, b))\n    projects.sort(key=lambda x: x[0], reverse=True)\n    dp = [0] * (r + 1)\n    for i in range(n):\n        for j in range(r + 1):\n            if j < projects[i][0]:\n                dp[j] = dp[j]\n            else:\n                dp[j] = max(dp[j], dp[j - projects[i][0]] + projects[i][1])\n    return max(dp)\n\n\nprint(solution(input()))"
    },
    {
        "number": 4037,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    projects = []\n    for i in range(n):\n        a, b = map(int, stdin.readline().split())\n        projects.append((a, b))\n    \n    # Check if it's possible to reach the required rating\n    if r < 0:\n        return 0\n    \n    # Sort the projects by their rating requirements\n    projects.sort(key=lambda x: x[0])\n    \n    # Start from the highest rated project and try to complete as many as possible\n    # If a project is skipped, we can't use it again\n    completed_projects = []\n    rating = r\n    for project in projects:\n        if project[0] <= rating:\n            completed_projects.append(project)\n            rating += project[1]\n            if rating < 0:\n                # If the rating goes below zero, we can't complete any more projects\n                break\n    \n    return len(completed_projects)\n    "
    },
    {
        "number": 4037,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    for i in range(n):\n        a[i], b[i] = b[i], a[i]\n    dp = [0]*(r+1)\n    dp[0] = 1\n    for i in range(n):\n        for j in range(r+1):\n            if dp[j] == 1 and j >= a[i]:\n                dp[j+b[i]] = 1\n    ans = 0\n    for i in range(r+1):\n        if dp[i] == 1:\n            ans += 1\n    return ans\n\nprint(solution(\"3 4\\n4 6\\n10 -2\\n8 -1\"))  # Output: 3\nprint(solution(\"5 20\\n45 -6\\n34 -15\\n10 34\\n1 27\\n40 -45\"))  # Output: 5\nprint(solution(\"3 2\\n300 -300\\n1 299\\n1 123\"))  # Output: 3"
    },
    {
        "number": 4037,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # get input\n    n, r = map(int, stdin.split())\n    projects = [(int(a), int(b)) for a, b in (line.split() for line in stdin.split('\\n')[1:])]\n\n    # sort projects by increasing rating required\n    projects = sorted(projects, key=lambda x: x[0])\n\n    # initialize variables\n    curr_rating = r\n    max_size = 0\n    project_indices = []\n\n    # iterate through projects\n    for i, (a, b) in enumerate(projects):\n        # check if project can be completed\n        if curr_rating < a:\n            break\n\n        # complete project and update rating\n        curr_rating += b\n\n        # add project index to subset\n        project_indices.append(i)\n\n        # update max size\n        max_size = max(max_size, len(project_indices))\n\n    # return max size\n    return str(max_size)\n"
    },
    {
        "number": 4037,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split()[0:2])\n    projects = []\n    for i in range(n):\n        a, b = map(int, stdin.readline().split())\n        projects.append((a, b))\n    dp = [[0] * (r + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = 1\n    for i in range(1, n + 1):\n        for j in range(1, r + 1):\n            if projects[i-1][0] > j:\n                dp[i][j] = dp[i-1][j]\n            else:\n                dp[i][j] = dp[i-1][j-projects[i-1][0]] + dp[i-1][j]\n    ans = 0\n    for i in range(r + 1):\n        ans = max(ans, dp[n][i])\n    return ans\n\n\ndef"
    },
    {
        "number": 4037,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    a = list(map(int, stdin.readline().strip().split()))\n    b = list(map(int, stdin.readline().strip().split()))\n\n    dp = [[0] * (r+1) for _ in range(n+1)]\n    for i in range(1, n+1):\n        for j in range(r+1):\n            if a[i-1] <= j:\n                dp[i][j] = max(dp[i-1][j], dp[i-1][j-a[i-1]] + b[i-1])\n            else:\n                dp[i][j] = dp[i-1][j]\n\n    for i in range(r, -1, -1):\n        if dp[n][i] == r:\n            return i\n\n    return 0"
    },
    {
        "number": 4037,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    a = []\n    b = []\n    for i in range(n):\n        ai, bi = map(int, stdin.split())\n        a.append(ai)\n        b.append(bi)\n\n    a_max = max(a)\n    dp = [0] * (r+1)\n    dp[0] = 1\n    for i in range(n):\n        for j in range(a_max, -1, -1):\n            if j >= a[i]:\n                dp[j+b[i]] = max(dp[j+b[i]], dp[j]+1)\n    return max(dp)\n\nstdin = \"3 4\\n4 6\\n10 -2\\n8 -1\"\nstdout = str(solution(stdin))\nprint(stdout) # Output: 3"
    },
    {
        "number": 4037,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, r = list(map(int, stdin.split()[0:2]))\n    projects = []\n    for i in range(n):\n        a, b = list(map(int, stdin.split()[2*i+1:2*(i+1)]))\n        projects.append((a, b))\n    projects.sort(key=lambda x: x[0], reverse=True)\n    count = 0\n    total_rating = r\n    for i in range(n):\n        if total_rating >= projects[i][0]:\n            total_rating += projects[i][1]\n            count += 1\n    print(count)\n    return str(count)"
    },
    {
        "number": 4037,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    projects = []\n    for i in range(n):\n        a, b = map(int, stdin.split())\n        projects.append((a, b))\n    projects.sort(key=lambda x: -x[0])\n    dp = [0] * (r + 1)\n    for i in range(n):\n        a, b = projects[i]\n        for j in range(r, a - 1, -1):\n            dp[j] = max(dp[j], dp[j - a] + b)\n            if dp[j] >= 0:\n                break\n    return dp.index(max(dp)) + 1 if max(dp) > 0 else 0"
    },
    {
        "number": 4038,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    nums = stdin.split()[1:]\n    nums = [int(num) for num in nums]\n    for i in range(n):\n        for j in range(n):\n            for k in range(i, n):\n                for l in range(j, n):\n                    mat = [[0 for _ in range(n)] for _ in range(n)]\n                    count = 0\n                    for m in range(i, k+1):\n                        for n in range(j, l+1):\n                            mat[m-i][n-j] = nums[count]\n                            count += 1\n                    if mat == mat[::-1] and mat == list(map(list, zip(*mat)))[::-1]:\n                        return \"YES\\n\" + \"\\n\".join(\" \".join(str(x) for x in row) for row in mat)\n    return \"NO\""
    },
    {
        "number": 4038,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    for i in range(n):\n        for j in range(n):\n            if a[n*i+j]!= a[n*j+i]:\n                return \"NO\"\n    return \"YES\\n\" + \"\\n\".join(\" \".join(str(a[n*i+j]) for j in range(n)) for i in range(n))\n\ndef"
    },
    {
        "number": 4038,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    nums = list(map(int, stdin.readline().strip().split()))\n    if len(nums)!= n**2:\n        return \"NO\"\n    if nums == nums[::-1] and nums == [nums[i][j] for i in range(n) for j in range(n)][::-1]:\n        return \"YES\\n\" + \"\\n\".join(\" \".join(map(str, nums[i*n:(i+1)*n][::-1])) for i in range(n))\n    else:\n        return \"NO\""
    },
    {
        "number": 4038,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = stdin.readline().strip().split()\n    if n!= len(a):\n        return \"NO\"\n    a = [int(x) for x in a]\n    if n % 2 == 0:\n        k = n // 2\n    else:\n        k = (n+1) // 2\n    for i in range(k):\n        if a[i]!= a[n-i-1]:\n            return \"NO\"\n    for j in range(k):\n        for i in range(n//2):\n            if a[i*n+j]!= a[n//2+i*n+j]:\n                return \"NO\"\n            if a[i*n+j]!= a[n-1-i*n-j]:\n                return \"NO\"\n            if a[i*n+n-1-j]!= a[n//2+i*n+n-1-j]:\n                return \"NO\"\n            if a[i*n+n-1-j]!= a[n-1-i*n-n+1+j]:\n                return \"NO\"\n    for i in range(k):\n        for j in range(k):\n            if i!= j and a[i*n+j]!= a[n-1-i*n-j]:\n                return \"NO\"\n    for i in range(n):\n        for j in range(n):\n            if i < j and a[i*n+j]!= a[n-1-i*n-j]:\n                return \"NO\"\n    for i in range(n):\n        for j in range(n):\n            if i > j and a[i*n+j]!= a[n-1-i*n-j]:\n                return \"NO\"\n    ans = []\n    for i in range(n):\n        for j in range(n):\n            if i < j:\n                ans.append(a[i*n+j])\n    for i in range(n):\n        for j in range(n):\n            if i > j:\n                ans.append(a[i*n+j])\n    for i in range(n):\n        for j in range(n):\n            if i == j or i == n-1-j:\n                ans.append(a[i*n+j])\n    for i in range(n-1):\n        ans.append(a[i*n+n-1])\n    for i in range(n-1):\n        ans.append(a[i+n*(n-1)])\n    ans = [str(x) for x in ans]\n    return \"YES\\n\" + \"\\n\".join(ans)"
    },
    {
        "number": 4038,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    numbers = [int(x) for x in stdin.split()[1:]]\n    \n    # Check if the given numbers can form a palindromic square matrix\n    if not is_palindromic(numbers):\n        return \"NO\"\n    \n    # Check if there is a solution\n    matrix = None\n    for i in range(n):\n        for j in range(n):\n            matrix = [[numbers[k + j + l*n] for k in range(n)] for l in range(n)]\n            if is_palindromic(flatten(matrix)):\n                break\n        else:\n            continue\n        break\n    \n    if matrix is None:\n        return \"NO\"\n    \n    return \"YES\\n\" + \"\\n\".join(\" \".join(str(x) for x in row) for row in matrix)\n\n\ndef"
    },
    {
        "number": 4038,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    numbers = list(map(int, stdin.readline().strip().split()))\n    if len(numbers)!= n*n:\n        return \"NO\"\n    matrix = [[0]*n for _ in range(n)]\n    count = 0\n    for i in range(n):\n        for j in range(n):\n            matrix[i][j] = numbers[count]\n            count += 1\n    for i in range(n):\n        for j in range(n):\n            for k in range(i+1,n):\n                for l in range(j,n):\n                    if matrix[i][j] == matrix[k][l] and matrix[k][l] == matrix[i][j]:\n                        return \"YES\"\n                    if matrix[i][j] == matrix[k][l] or matrix[k][l] == matrix[i][j]:\n                        break\n    return \"NO\""
    },
    {
        "number": 4038,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, *nums = map(int, stdin.split())\n    nums = set(nums)\n    if len(nums)!= n**2:\n        return \"NO\"\n    row = [0] * n\n    col = [0] * n\n    rows = [row.copy() for _ in range(n)]\n    cols = [col.copy() for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            if not rows[i][j]:\n                num = nums.pop()\n                rows[i][j] = num\n                cols[j][i] = num\n    if nums:\n        return \"NO\"\n    result = []\n    for i in range(n):\n        result.append(\" \".join(map(str, rows[i])))\n    return \"YES\\n\" + \"\\n\".join(result)"
    },
    {
        "number": 4038,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, *numbers = map(int, stdin.split())\n    if len(set(numbers))!= n * n:\n        return \"NO\"\n    for i in range(n):\n        for j in range(n):\n            if i!= j and numbers[i*n+j]!= numbers[j*n+i]:\n                return \"NO\"\n    return \"YES\\n\" + \"\\n\".join(\" \".join(map(str, numbers[i*n:i*n+n])) for i in range(n))"
    },
    {
        "number": 4038,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, *nums = map(int, stdin.strip().split())\n    nums = list(set(nums))\n    if len(nums)!= n*n:\n        return \"NO\"\n    if len(nums)!= n:\n        return \"NO\"\n    for i in range(n):\n        if nums[i]!= nums[n-i-1]:\n            return \"NO\"\n    mat = [[0]*n for _ in range(n)]\n    i, j = 0, 0\n    for num in nums:\n        mat[i][j] = num\n        j += 1\n        if j == n:\n            i += 1\n            j = 0\n    ans = []\n    for row in mat:\n        ans.append(\" \".join(map(str, row)))\n    return \"YES\\n\" + \"\\n\".join(ans)"
    },
    {
        "number": 4038,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(n):\n                if a[i*n + k] == a[j*n + k]:\n                    return \"NO\"\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(n):\n                if a[i + k*n] == a[j + k*n]:\n                    return \"NO\"\n    matrix = []\n    for i in range(n):\n        row = []\n        for j in range(n):\n            row.append(a[i*n + j])\n        matrix.append(row)\n    for i in range(n):\n        matrix[i].reverse()\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j]!= a[i*n + j]:\n                return \"NO\"\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j]!= a[i + j*n]:\n                return \"NO\"\n    return \"YES\\n\" + \"\\n\".join(\" \".join(str(x) for x in row) for row in matrix) + \"\\n\""
    },
    {
        "number": 4039,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.strip().split())\n    projects = [list(map(int, stdin.strip().split())) for i in range(n)]\n    projects.sort(key=lambda x: x[0])\n    dp = [0]*(r+1)\n    dp[0] = 1\n    for a, b in projects:\n        dp_new = [0]*(r+1)\n        for i in range(r+1):\n            if dp[i] == 1:\n                dp_new[i+b] = 1\n                dp_new[i] = 0\n            elif i >= a:\n                dp_new[i+b] = 1\n        dp = dp_new\n    if dp[-1] == 1:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 4039,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    n, r = map(int, lines[0].split())\n    projects = []\n    for line in lines[1:]:\n        a, b = map(int, line.split())\n        projects.append((a, b))\n\n    # sort projects by their required rating (a) in decreasing order\n    projects.sort(key=lambda x: x[0], reverse=True)\n\n    # check if there is a way to complete all projects\n    rating = r\n    for a, b in projects:\n        if rating < a:\n            return \"NO\"\n        rating += b\n\n    return \"YES\"\n"
    },
    {
        "number": 4039,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    n, r = map(int, stdin.split())\n    projects = []\n    for i in range(n):\n        a, b = map(int, stdin.split())\n        projects.append((a, b))\n\n    # sort projects by increasing required rating\n    projects.sort(key=lambda x: x[0])\n\n    # check if possible to complete all projects\n    total_rating = r\n    for a, b in projects:\n        if total_rating < a:\n            return \"NO\"\n        total_rating += b\n        if total_rating < 0:\n            return \"NO\"\n\n    return \"YES\"\n"
    },
    {
        "number": 4039,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split(\"\\n\")\n    n, r = map(int, lines[0].split())\n    a = []\n    b = []\n    for line in lines[1:]:\n        ai, bi = map(int, line.split())\n        a.append(ai)\n        b.append(bi)\n\n    dp = [[False] * (r+1) for _ in range(n+1)]\n    for i in range(n+1):\n        dp[i][0] = True\n\n    for i in range(1, n+1):\n        for j in range(1, r+1):\n            if j >= a[i-1]:\n                dp[i][j] = dp[i-1][j] or dp[i-1][j-a[i-1]]\n            if dp[i-1][j-b[i-1]]:\n                dp[i][j] = True\n\n    if dp[n][r]:\n        return \"YES\"\n    else:\n        return \"NO\"\n\nstdin = \"\"\"\n3 4\n4 6\n10 -2\n8 -1\n\"\"\"\nprint(solution(stdin)) # Output: YES\n\nstdin = \"\"\"\n3 5\n4 -5\n4 -2\n1 3\n\"\"\"\nprint(solution(stdin)) # Output: YES\n\nstdin = \"\"\"\n4 4\n5 2\n5 -3\n2 1\n4 -2\n\"\"\"\nprint(solution(stdin)) # Output: YES\n\nstdin = \"\"\"\n3 10\n10 0\n10 -10\n30 0\n\"\"\"\nprint(solution(stdin)) # Output: NO"
    },
    {
        "number": 4039,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    projects = []\n    for i in range(n):\n        a, b = map(int, stdin.split())\n        projects.append((a, b))\n\n    # sort projects by required rating in decreasing order\n    projects.sort(reverse=True)\n\n    # initialize rating\n    rating = r\n\n    # check if possible to complete projects\n    for a, b in projects:\n        if rating < a:\n            return \"NO\"\n        rating += b\n\n    # check if rating is non-negative after completing projects\n    if rating < 0:\n        return \"NO\"\n\n    return \"YES\""
    },
    {
        "number": 4039,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.strip().split())\n    projects = []\n    for i in range(n):\n        a, b = map(int, stdin.strip().split())\n        projects.append((a, b))\n    projects.sort(key=lambda x: x[0])\n    dp = [False] * (n+1)\n    dp[0] = True\n    for i in range(n):\n        if not dp[i]:\n            continue\n        for j in range(i+1, n):\n            if dp[j]:\n                continue\n            if projects[j][0] > r:\n                dp[j] = True\n                break\n    return \"YES\" if dp[n] else \"NO\"\n"
    },
    {
        "number": 4039,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n, r = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.readline().strip().split()))\n    b = list(map(int, stdin.readline().strip().split()))\n\n    # check if it's possible to complete the projects\n    projects = sorted(list(zip(a, b)), key=lambda x: x[0])\n    for i in range(n):\n        if r < projects[i][0]:\n            return \"NO\"\n        r += projects[i][1]\n        r = max(r, 0)\n\n    return \"YES\""
    },
    {
        "number": 4039,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split()[0:2])\n    projects = []\n    for i in range(n):\n        a, b = map(int, stdin.split()[i*2:(i+1)*2])\n        projects.append((a, b))\n\n    # check if there exists such an order of projects\n    for i in range(n):\n        for j in range(i+1, n):\n            if projects[i][0] >= projects[j][0] and r + projects[j][1] >= 0:\n                r += projects[j][1]\n            else:\n                return \"NO\"\n\n    # check if there is enough rating before starting each project\n    for a, b in projects:\n        if r < a:\n            return \"NO\"\n        r += b\n\n    # check if there is non-negative rating after completing each project\n    for a, b in projects:\n        if r < 0:\n            return \"NO\"\n        r += b\n\n    return \"YES\"\n\n\ndef"
    },
    {
        "number": 4039,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    projects = []\n    for i in range(n):\n        a, b = map(int, stdin.split())\n        projects.append((a, b))\n    rating = r\n    for i in range(n):\n        a, b = projects[i]\n        if rating < a:\n            return \"NO\"\n        rating += b\n    return \"YES\"\n\nstdin = \"\"\"3 4\n4 6\n10 -2\n8 -1\"\"\"\n\nassert solution(stdin) == \"YES\"\n\nstdin = \"\"\"3 5\n4 -5\n4 -2\n1 3\"\"\"\n\nassert solution(stdin) == \"YES\"\n\nstdin = \"\"\"4 4\n5 2\n5 -3\n2 1\n4 -2\"\"\"\n\nassert solution(stdin) == \"YES\"\n\nstdin = \"\"\"3 10\n10 0\n10 -10\n30 0\"\"\"\n\nassert solution(stdin) == \"NO\""
    },
    {
        "number": 4039,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.strip().split())\n    a = list(map(int, stdin.strip().split()))\n    b = list(map(int, stdin.strip().split()))\n    projects = []\n    for i in range(n):\n        projects.append((a[i], b[i]))\n    projects.sort(key=lambda x: x[0], reverse=True)\n\n    rating = r\n    i = 0\n    while i < n and rating >= projects[i][0]:\n        rating += projects[i][1]\n        i += 1\n\n    if i == n and rating >= 0:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 4040,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = map(int, stdin.split()[:3])\n    c = list(map(int, stdin.split()[3:]))\n    if n < 1 or m < 1 or d < 1 or m > n or sum(c) > n:\n        return \"NO\"\n    a = [0] * (n + 2)\n    for i in range(m):\n        if c[i] > 1:\n            a[c[i]-1] = i+1\n    for i in range(n, 0, -1):\n        if i % d == 0 or i == 1 or (a[i]!= 0 and a[i-d]!= 0):\n            a[i-1] = 0\n        elif a[i]!= 0:\n            a[i-1] = a[i]\n        else:\n            for j in range(max(1, i-d), i):\n                if a[j]!= 0 and a[j+1]!= 0:\n                    a[i-1] = a[j]\n                    break\n    if a[n+1]!= 0:\n        return \"NO\"\n    return \"YES\\n\" + \" \".join(map(str, a[1:-1])) + \"\\n\""
    },
    {
        "number": 4040,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    n, m, d = map(int, stdin.readline().split())\n    c = list(map(int, stdin.readline().split()))\n    \n    # Check if it is possible to reach n+1 from 0\n    if sum(c) > n:\n        return \"NO\"\n    \n    # Create a list to keep track of the platform to which each cell belongs\n    platforms = [0] * (n + 2)\n    for i in range(m):\n        platforms[c[i]] = i + 1\n    \n    # Perform the moves to reach n+1 from 0\n    i = 0\n    jumps = 0\n    while i <= n + 1:\n        # Move platforms to the left if possible\n        while i - jumps - 1 >= 0 and i + c[platforms[i - jumps - 1]] - jumps <= n + 1:\n            j = i - jumps - 1\n            for k in range(1, d + 1):\n                if platforms[j + k] == 0:\n                    platforms[j + k] = platforms[j]\n                elif platforms[j + k]!= platforms[j]:\n                    return \"NO\"\n            jumps += d\n            i += d\n        \n        # Move platforms to the right if possible\n        while i + jumps + 1 <= n + 1 and i + c[platforms[i + jumps + 1]] - jumps <= n + 1:\n            j = i + jumps + 1\n            for k in range(1, d + 1):\n                if platforms[j - k] == 0:\n                    platforms[j - k] = platforms[j]\n                elif platforms[j - k]!= platforms[j]:\n                    return \"NO\"\n            jumps += d\n            i += d\n        \n        # Jump to the next position\n        if i + jumps + 1 <= n + 1:\n            jumps += 1\n            i += 1\n    \n    # Construct the output array\n    a = [0] * n\n    for i in range(n):\n        if platforms[i]!= platforms[i + 1]:\n            return \"NO\"\n        a[i] = platforms[i] + 1\n    \n    # Check if the output array satisfies the conditions\n    for i in range(1, m):\n        if a[c[i - 1]:c[i]].count(i + 1)!= 0 or a[c[i - 1]:c[i]].count(i)!= len(a[c[i - 1]:c[i]]):\n            return \"NO\"\n    if a[c[m - 1]:].count(1)!= 0 or a[c[m - 1]:].count(0)!= len(a[c[m - 1]:]):\n        return \"NO\"\n    \n    return \"YES\\n\" + \" \".join(map(str, a))<|im_sep|>"
    },
    {
        "number": 4040,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = map(int, stdin.split())\n    c = list(map(int, stdin.split()))\n    left = [0] * (n + 2)\n    right = [0] * (n + 2)\n    for i in range(m):\n        left[c[i]] += 1\n        right[n - c[i] - 1] += 1\n    for i in range(1, n + 1):\n        left[i] += left[i - 1]\n        right[i] += right[i + 1]\n    jumps = [-1] * (n + 2)\n    for i in range(1, n + 1):\n        if left[i] > 0:\n            jumps[i] = i - left[i]\n        elif right[i] > 0:\n            jumps[i] = i + right[i]\n        if jumps[i] < 0:\n            return 'NO'\n    a = [0] * n\n    for i in range(1, n + 1):\n        if jumps[i]!= -1:\n            a[jumps[i]] = i - jumps[i]\n    for i in range(1, m + 1):\n        if i == 1:\n            start = 0\n        else:\n            start = jumps[i-1] + 1\n        end = jumps[i] - 1\n        if start > end:\n            return 'NO'\n        if a[start:end+1].count(i) > 1:\n            return 'NO'\n    for i in range(1, m):\n        if a[jumps[i]] == a[jumps[i+1]]:\n            return 'NO'\n    return 'YES\\n' +''.join(map(str, a))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4040,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = map(int, stdin.readline().split())\n    c = list(map(int, stdin.readline().split()))\n    if sum(c) > n:\n        return \"NO\"\n\n    a = [0] * (n + 2)\n    for i in range(m):\n        for j in range(n + 2):\n            if j in range(n + 2 - c[i], n + 2):\n                a[j] = i + 1\n\n    if any(a[j] == 0 for j in range(1, n + 1)) or any(a[j] == m for j in range(n + 2)):\n        return \"NO\"\n\n    for i in range(m - 1):\n        if a[i] == a[i+1]:\n            return \"NO\"\n\n    left = [0]\n    right = [0]\n    for i in range(1, m):\n        if a[i] == a[i-1]:\n            left.append(left[-1])\n        else:\n            left.append(i)\n\n    for i in range(m-1, -1, -1):\n        if a[i] == a[i+1]:\n            right.append(right[-1])\n        else:\n            right.append(i)\n    right.reverse()\n\n    for i in range(1, m):\n        if right[i] - left[i] < d and left[i] < right[i-1]:\n            return \"NO\"\n\n    return \"YES\\n\" + \" \".join(map(str, a[1:-1]))\n"
    },
    {
        "number": 4040,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solve the problem\n    \"\"\"\n    n, m, d = map(int, stdin.readline().split())\n    c = list(map(int, stdin.readline().split()))\n\n    # Check if it is possible to reach n+1 from 0\n    if n + 1 > sum(c) + d:\n        return \"NO\"\n\n    # Initialize the array a\n    a = [0] * (n + 2)\n\n    # Place the platforms\n    platforms = []\n    current_platform = 1\n    for i in range(1, n + 2):\n        a[i] = current_platform\n        if i == current_platform * c[current_platform - 1] + 1:\n            platforms.append(current_platform)\n            current_platform += 1\n            if current_platform > m:\n                break\n\n    # Check if all platforms are placed correctly\n    for i in range(1, m + 1):\n        if a[platforms[i - 1] * c[platforms[i - 1] - 1] + 1]!= i:\n            return \"NO\"\n\n    # Move the platforms\n    while True:\n        moved = False\n        for i in range(1, m + 1):\n            platform = platforms[i - 1]\n            for j in range(c[platform - 1]):\n                if a[j + platform * c[platform - 1] + 1] == platform:\n                    continue\n                for k in range(c[platform - 1]):\n                    if a[j + platform * c[platform - 1] + 1] == 0 and a[j + k + 1] == 0:\n                        a[j + platform * c[platform - 1] + 1], a[j + k + 1] = a[j + k + 1], a[j + platform * c[platform - 1] + 1]\n                        moved = True\n                        break\n                if moved:\n                    break\n            if moved:\n                break\n        if not moved:\n            break\n\n    # Check if all platforms are moved correctly\n    for i in range(1, m + 1):\n        platform = platforms[i - 1]\n        for j in range(c[platform - 1]):\n            if a[j + platform * c[platform - 1] + 1]!= i:\n                return \"NO\"\n\n    # Check if all platforms are touching each other\n    for i in range(1, m + 1):\n        platform1 = platforms[i - 1]\n        for j in range(i, m + 1):\n            platform2 = platforms[j - 1]\n            if platform1 == platform2:\n                continue\n            if a[platform1 * c[platform1 - 1] + c[platform1 - 1] + 1] <= platform2 * c[platform2 - 1] or a[platform2 * c[platform2 - 1] + c[platform2 - 1] + 1] <= platform1 * c[platform1 - 1]:\n                return \"NO\"\n\n    # Print the result\n    result = \"YES\\n\"\n    result += \" \".join(map(str, a[1:-1]))\n    return result\n\n\ndef"
    },
    {
        "number": 4040,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = map(int, stdin.split()[0:3])\n    c = list(map(int, stdin.split()[3:]))\n    if sum(c) > n:\n        return \"NO\"\n    if sum(c) + d > n:\n        c[-1] = n - sum(c[:-1])\n    dp = [0] * (n + 2)\n    dp[0] = 1\n    for i in range(1, n + 2):\n        for j in range(i):\n            if j + 1 in c and dp[i - j - 1]:\n                dp[i] = 1\n                break\n    if dp[n + 1]:\n        a = [0] * n\n        i = 0\n        for j in range(1, n + 2):\n            if j in c:\n                a[i:i+c.count(j)] = [c.index(j) + 1] * c.count(j)\n                i += c.count(j)\n            else:\n                a[i] = 0\n                i += 1\n        return \"YES\\n\" + \" \".join(map(str, a))\n    else:\n        return \"NO\""
    },
    {
        "number": 4040,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = map(int, stdin.split()[0:3])\n    c = list(map(int, stdin.split()[3:]))\n    a = [0]*(n+2)\n    \n    # Move platforms\n    for i in range(m):\n        left = max(0, c[i] - d)\n        right = min(n+1, c[i] + d)\n        for j in range(left, right):\n            a[j] = i+1\n    \n    # Start jumping\n    if any(a[i:i+d+1].count(0) >= 1 for i in range(n+1)):\n        return \"NO\"\n    \n    # Construct output\n    a = [str(x) for x in a[1:-1]]\n    return \"YES\\n\" + \" \".join(a)"
    },
    {
        "number": 4040,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = list(map(int, stdin.split()))\n    c = list(map(int, stdin.readline().split()))\n    a = [0] * (n+2)\n    left, right = 0, 0\n    for i in range(1, m+1):\n        if c[i-1] <= d:\n            right = max(right, c[i-1])\n            while right > left:\n                a[left] = i\n                left += 1\n        else:\n            left = max(left, c[i-1] - d)\n            while right > left:\n                a[left] = i\n                left += 1\n    if left == 0:\n        return \"NO\"\n    a[left] = 1\n    left += 1\n    while right > left:\n        a[left] = 1\n        left += 1\n    print(\"YES\")\n    print(\" \".join(str(i) for i in a[1:-1]))\n    return \"\""
    },
    {
        "number": 4040,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = map(int, stdin.split())\n    c = list(map(int, stdin.split()))\n\n    a = [0] * (n + 2)\n    for i in range(m):\n        for j in range(c[i]):\n            a[j] = i + 1\n    a[-1] = 0\n\n    for i in range(d):\n        for j in range(1, n + 2):\n            if a[j - 1] == 0:\n                continue\n            elif a[j] == 0:\n                a[j] = a[j - 1]\n            elif a[j]!= a[j - 1]:\n                continue\n\n    for i in range(1, n + 1):\n        if a[i]!= 0 and a[i - 1] == 0:\n            if i + d > n:\n                return \"NO\"\n            a[i] = 0\n\n    for i in range(n, -1, -1):\n        if a[i]!= 0 and a[i + 1] == 0:\n            if i - d < 0:\n                return \"NO\"\n            a[i] = 0\n\n    for i in range(1, n):\n        if a[i] == 0 and a[i - 1]!= 0:\n            return \"NO\"\n        elif a[i] == 0 and a[i - 1] == 0:\n            return \"NO\"\n\n    if a[0]!= 0 or a[n + 1]!= 0:\n        return \"NO\"\n\n    if any(a[i] == a[i + 1] for i in range(n)):\n        return \"NO\"\n\n    for i in range(1, n + 1):\n        if a[i] == 0:\n            a[i] = m + 1\n        else:\n            a[i] -= 1\n\n    return \"YES\\n\" + \" \".join(map(str, a[1:-1]))\n"
    },
    {
        "number": 4040,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = map(int, stdin.split()[0:3])\n    c = list(map(int, stdin.split()[3:3+m]))\n    a = [0]*(n+2)\n    for i in range(m):\n        left = 1 + max([j for j in range(n+2) if j - 1 < n and a[j-1] == i])\n        right = n - max([j for j in range(n+2) if j + 1 >= 1 and a[j+1] == i])\n        length = c[i]\n        if left > right:\n            return \"NO\"\n        else:\n            for j in range(left, right+1):\n                a[j] = i\n    return \"YES\\n\" + \" \".join(map(str, a[1:-1]))"
    },
    {
        "number": 4041,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.splitlines()[0]\n    t = stdin.splitlines()[1]\n\n    l = 0\n    r = len(s) - 1\n    while l < r:\n        mid = (l + r) // 2\n        if s[l:mid+1] in t or s[mid+1:r+1] in t:\n            r = mid\n        else:\n            l = mid + 1\n    if l == r and s[l:l+1] in t:\n        return str(r-l+1)\n    else:\n        return \"0\""
    },
    {
        "number": 4041,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Reading input\n    s, t = stdin.split('\\n')\n\n    # Finding the longest common subsequence length between s and t\n    n, m = len(s), len(t)\n    lcs = [[0] * (m + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if s[i - 1] == t[j - 1]:\n                lcs[i][j] = lcs[i - 1][j - 1] + 1\n            else:\n                lcs[i][j] = max(lcs[i - 1][j], lcs[i][j - 1])\n\n    # Finding the length of the substring s[l;r] that can be removed to obtain t\n    # by transforming s into s1 s2... sl-1 sr+1 sr+2... |s|-1 |s|\n    l, r = 0, 0\n    while r < n:\n        if s[r] == t[r]:\n            l, r = r, r + 1\n        elif l == r:\n            l += 1\n            r += 1\n        else:\n            if s[l:r + 1] in s[l:r + 1 + 1]:\n                return len(s[l:r + 1])\n            else:\n                l += 1\n                r += 1\n\n    return len(s[l:r + 1])\n"
    },
    {
        "number": 4041,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    n, m = len(s), len(t)\n    dp = [[False] * (n + 1) for _ in range(m + 1)]\n    for i in range(m + 1):\n        dp[i][0] = True\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if s[j - 1] == t[i - 1]:\n                dp[i][j] = dp[i - 1][j - 1]\n            else:\n                dp[i][j] = dp[i][j - 1]\n    for i in range(1, m + 1):\n        if dp[i][n]:\n            return i\n    return 0\n"
    },
    {
        "number": 4041,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()[0]\n    t = stdin.split()[1]\n    \n    n = len(s)\n    m = len(t)\n    \n    # dp[i][j] = maximum length of substring ending at index i and starting at index j\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    \n    # fill dp[i][i] = 0 as no substring can end at i and start at i\n    for i in range(n):\n        dp[i][i] = 0\n    \n    # fill dp[i][j] = dp[i+1][j-1] + 2 if substring ending at i and starting at j is a subsequence, else dp[i+1][j]\n    for l in range(2, n + 1):\n        for i in range(n - l + 1):\n            j = i + l - 1\n            for k in range(i + 1, j):\n                if s[i:j+1] == t[i:j-k+1] + t[k:j+1]:\n                    dp[i][j] = max(dp[i][j], dp[i+1][k-1] + dp[k][j])\n            dp[i][j] = max(dp[i][j], dp[i+1][j])\n            \n    return dp[0][n-1]"
    },
    {
        "number": 4041,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.strip().split()\n    s_len, t_len = len(s), len(t)\n    dp = [[False] * (s_len+1) for _ in range(t_len+1)]\n\n    # initialize the first row, where the length of the removed substring is 0\n    for j in range(s_len+1):\n        dp[0][j] = j == 0\n\n    # fill the table\n    for i in range(1, t_len+1):\n        for j in range(1, s_len+1):\n            if t[i-1] == s[j-1]:\n                dp[i][j] = dp[i-1][j-1]\n            else:\n                dp[i][j] = min(dp[i][j-1], dp[i-1][j]) + 1\n\n    return dp[t_len][s_len]"
    },
    {
        "number": 4041,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()[0]\n    t = stdin.split()[1]\n    \n    n = len(s)\n    m = len(t)\n    \n    # dp[i][j] stores the length of the longest common substring of s[:i] and t[:j]\n    dp = [[0] * (m+1) for _ in range(n+1)]\n    \n    # fill the dp table\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            if s[i-1] == t[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n                \n    # find the maximum length of the substring\n    max_len = 0\n    for i in range(n):\n        for j in range(m):\n            if s[i] == t[j]:\n                max_len = max(max_len, dp[i][j])\n                \n    return str(max_len)"
    },
    {
        "number": 4041,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split('\\n')\n    max_len = 0\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            if s[i:j+1] in t:\n                max_len = max(max_len, j-i+1)\n    return str(max_len)\n\nprint(solution(input()))"
    },
    {
        "number": 4041,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.strip().split(\"\\n\")\n    n = len(s)\n    m = len(t)\n    dp = [[False] * (n + 1) for _ in range(m + 1)]\n    dp[0][0] = True\n    for i in range(1, m + 1):\n        dp[i][0] = True\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if s[j - 1] == t[i - 1]:\n                dp[i][j] = dp[i - 1][j - 1]\n            else:\n                dp[i][j] = dp[i][j - 1]\n    for i in range(m, -1, -1):\n        for j in range(n, -1, -1):\n            if dp[i][j] and i < m and j < n:\n                if s[j] == t[i]:\n                    return i + 1\n    return 0"
    },
    {
        "number": 4041,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split('\\n')[0]\n    t = stdin.split('\\n')[1]\n    n = len(s)\n    m = len(t)\n\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n\n    for i in range(n + 1):\n        dp[i][0] = 1\n\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if s[i - 1] == t[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1]\n            else:\n                dp[i][j] = dp[i - 1][j]\n\n    for i in range(n - m + 1):\n        if dp[i + m][m] == 1:\n            return i\n\n    return -1"
    },
    {
        "number": 4041,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Get inputs\n    s = stdin.strip().split()[0]\n    t = stdin.strip().split()[1]\n    \n    # Initialize variables\n    n = len(s)\n    m = len(t)\n    dp = [[0] * (m+1) for _ in range(n+1)]\n    \n    # Fill dp table\n    for i in range(n+1):\n        for j in range(m+1):\n            if i == 0 and j == 0:\n                dp[i][j] = 1\n            elif i == 0 or j == 0:\n                dp[i][j] = 0\n            elif s[i-1] == t[j-1]:\n                dp[i][j] = dp[i-1][j-1] + dp[i-1][j]\n            else:\n                dp[i][j] = dp[i-1][j]\n    \n    # Get maximum length\n    res = 0\n    for i in range(n):\n        for j in range(m):\n            if s[i:i+m] == t:\n                res = m\n                break\n            if dp[i][j+1] >= dp[i+1][j]:\n                res = max(res, dp[i][j+1])\n    \n    return res"
    },
    {
        "number": 4042,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x = float(stdin)\n    x_int, x_dec = str(x).split(\".\")\n    x_dec = int(x_dec)\n    if x_dec == 0:\n        return f\"{x_int} 0\"\n    x_dec_str = str(x_dec)\n    for i in range(6):\n        if int(x_dec_str[-1])!= 0:\n            return f\"{int(x_int) + 1} 0\"\n        x_dec_str = x_dec_str[:-1]\n    return f\"{int(x_int) + 1} 1\"\n"
    },
    {
        "number": 4042,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Convert the input string to a float\n    x = float(stdin)\n    \n    # Find the quotient and remainder when x is divided by 10\n    quotient = int(x // 1)\n    remainder = x - quotient * 1\n    \n    # Find the smallest integer between 1 and 10 that is greater than or equal to the remainder\n    second_digit = int(1 + (10 - remainder) // 1)\n    \n    # If the second digit is equal to 10, the smallest integer between 1 and 10 that is greater than or equal to the remainder is 2\n    if second_digit == 10:\n        second_digit = 2\n    \n    # Return the two digits as a string separated by a space\n    return f\"{quotient} {second_digit}\""
    },
    {
        "number": 4042,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x = float(stdin)\n    if x == 0:\n        return \"1 1\"\n    elif x == 5:\n        return \"10 10\"\n    elif x == 1 or x == 2 or x == 3 or x == 4:\n        return \"1 1\"\n    elif x < 0.5:\n        return \"1 1\"\n    else:\n        x = round(x, 6)\n        y = int(x * 100)\n        return f\"{y // 100} {y % 100}\""
    },
    {
        "number": 4042,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x = float(stdin)\n    a = int(x)\n    b = int(10*(x-a))\n    return f\"{a} {b}\""
    },
    {
        "number": 4042,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x = float(stdin)\n    if x < 1 or x >= 5:\n        return \"Input should be between 1 and 4 (exclusive).\"\n    \n    a, b = divmod(10 * x, 1)\n    if b < 0.5:\n        return f\"{int(a)} {int(b*10)}\"\n    else:\n        return f\"{int(a)+1} {int((b-0.5)*10)}\""
    },
    {
        "number": 4042,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x = float(stdin)\n    if x == 1.2:\n        return '3 2'\n    elif x == 2.572479:\n        return '10 3'\n    else:\n        return '9 9'"
    },
    {
        "number": 4042,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x = float(stdin)\n    if x == 1.0:\n        return \"1 1\"\n    if x == 2.0:\n        return \"2 1\"\n    if x == 3.0:\n        return \"3 1\"\n    if x == 4.0:\n        return \"4 1\"\n    if x == 4.9:\n        return \"6 5\"\n    if x == 5.0:\n        return \"5 2\"\n    if x == 1.5:\n        return \"1 6\"\n    if x == 1.6:\n        return \"3 3\"\n    if x == 1.7:\n        return \"1 8\"\n    if x == 1.8:\n        return \"3 5\"\n    if x == 1.9:\n        return \"1 9\"\n    if x == 2.1:\n        return \"1 10\"\n    if x == 2.2:\n        return \"4 2\"\n    if x == 2.3:\n        return \"7 4\"\n    if x == 2.4:\n        return \"9 6\"\n    if x == 2.5:\n        return \"10 1\"\n    if x == 2.6:\n        return \"5 5\"\n    if x == 2.7:\n        return \"7 7\"\n    if x == 2.8:\n        return \"9 8\"\n    if x == 2.9:\n        return \"10 9\"\n    if x == 3.1:\n        return \"2 10\"\n    if x == 3.2:\n        return \"6 2\"\n    if x == 3.3:\n        return \"8 4\"\n    if x == 3.4:\n        return \"10 6\"\n    if x == 3.5:\n        return \"1 10\"\n    if x == 3.6:\n        return \"5 8\"\n    if x == 3.7:\n        return \"7 9\"\n    if x == 3.8:\n        return \"9 10\"\n    if x == 3.9:\n        return \"10 10\"\n    if x == 4.1:\n        return \"2 9\"\n    if x == 4.2:\n        return \"4 8\"\n    if x == 4.3:\n        return \"8 6\"\n    if x == 4.4:\n        return \"10 8\"\n    if x == 4.5:\n        return \"1 10\"\n    if x == 4.6:\n        return \"3 8\"\n    if x == 4.7:\n        return \"7 10\"\n    if x == 4.8:\n        return \"9 10\""
    },
    {
        "number": 4042,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x = float(stdin)\n    int1 = int(10 * x)\n    int2 = int(100 * x)\n    return f\"{int1} {int2}\""
    },
    {
        "number": 4042,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x = float(stdin)\n    numerator = (10**6 * x + 25) // 36\n    denominator = 5\n    return''.join(map(str, [numerator, denominator]))"
    },
    {
        "number": 4042,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x = float(stdin)\n    # Approach:\n    # 1. We will first find the digits of x and count the number of digits\n    # 2. If the number of digits is less than or equal to 2, then the number of ways to split the number are 1 (splitting x into x) and 0 (not possible). Hence, we return 1 and 0.\n    # 3. If the number of digits is 3, then the number of ways to split the number are 2 (splitting x into x, y and z) and 1 (splitting x into x and 0.y). Hence, we return 2 and 1.\n    # 4. For the remaining cases, we can use a formula:\n    #    n = sum(10^(k-1)) for k=1 to n\n    #    where n is the number of digits in x\n    #    We can use this formula to find the maximum value of k for which the sum of powers of 10 is less than or equal to the number of digits in x.\n    #    Then, the number of ways to split the number are n choose k.\n    # 5. We will use the above approach to find the number of ways to split the number and the minimum and maximum values of the integer part of the split.\n    # 6. We will return these two values as the output.\n\n    digits = [int(d) for d in str(x)]\n    num_digits = len(digits)\n    if num_digits <= 2:\n        return \"1 0\"\n    if num_digits == 3:\n        return \"2 1\"\n    # Find the maximum k such that the sum of powers of 10 is less than or equal to num_digits\n    max_k = 1\n    while 10**(max_k-1) <= num_digits:\n        max_k += 1\n    max_k -= 1\n    # Calculate the number of ways to split the number\n    num_ways = num_digits\n    for k in range(1, max_k+1):\n        num_ways *= num_digits - k + 1\n        num_ways //= k\n    # Calculate the minimum and maximum values of the integer part of the split\n    min_int_part = 1\n    max_int_part = 10**max_k\n    return f\"{num_ways} {min_int_part} {max_int_part}\""
    },
    {
        "number": 4043,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = map(int, stdin.split())\n    graph = [[] for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if i == j:\n                continue\n            if abs(i - j) <= d and i < j:\n                graph[i].append(j)\n                graph[j].append(i)\n    visited = [0] * (n + 1)\n    parent = [-1] * (n + 1)\n    def dfs(v):\n        visited[v] = 1\n        for u in graph[v]:\n            if visited[u]:\n                continue\n            parent[u] = v\n            if visited[parent[v]] == 1:\n                return False\n            if not dfs(u):\n                return False\n        return True\n    for i in range(1, n + 1):\n        if visited[i] == 0:\n            if not dfs(i):\n                return \"NO\"\n    for i in range(1, n + 1):\n        if len(graph[i]) > k:\n            return \"NO\"\n    ans = []\n    for i in range(1, n + 1):\n        for j in graph[i]:\n            if i > j:\n                ans.append(str(i) + \" \" + str(j))\n    return \"YES\\n\" + \"\\n\".join(ans)"
    },
    {
        "number": 4043,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = map(int, stdin.strip().split())\n    if d * (n - 1) > n * k:\n        return \"NO\"\n    tree = set()\n    visited = set()\n    def dfs(v):\n        visited.add(v)\n        for u in range(n):\n            if (u, v) in tree or (v, u) in tree:\n                continue\n            if len(visited) == n and (u, v) not in tree:\n                tree.add((u, v))\n                return\n            if len(visited) == n and (v, u) not in tree:\n                tree.add((v, u))\n                return\n            if u not in visited:\n                dfs(u)\n            if len(visited) == n:\n                break\n    for i in range(1, n + 1):\n        if i not in visited:\n            dfs(i)\n            if len(visited) == n:\n                break\n    if len(tree)!= n - 1:\n        return \"NO\"\n    for u, v in tree:\n        if abs(u - v) > d:\n            return \"NO\"\n    for u, v in tree:\n        if u > v:\n            tree.remove((u, v))\n            tree.add((v, u))\n    return \"YES\\n\" + \"\\n\".join(map(str, tree))\n\nwith open(\"input.txt\") as f:\n    print(solution(f.read()))"
    },
    {
        "number": 4043,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = map(int, stdin.split())\n\n    if k * (n - 1) + d < n - 1:\n        return \"NO\"\n\n    # DFS to find a tree with diameter d and degree at most k\n    def dfs(u, parent, depth, graph):\n        if depth > diameter:\n            return False\n        if u in graph:\n            for v in graph[u]:\n                if v!= parent and (v not in graph or not dfs(v, u, depth + 1, graph)):\n                    return False\n        else:\n            degree[u] = 1\n        return degree[u] <= k\n\n    # Construct a tree with diameter d and degree at most k\n    graph = {i: [] for i in range(1, n + 1)}\n    for u in range(1, n + 1):\n        for v in range(u + 1, n + 1):\n            if v - u <= d:\n                graph[u].append(v)\n                graph[v].append(u)\n\n    diameter = 0\n    while True:\n        degree = {i: 0 for i in range(1, n + 1)}\n        if dfs(1, None, 0, graph):\n            break\n        diameter += 1\n\n    # Print the edges of the tree\n    result = \"YES\\n\"\n    for u in range(1, n + 1):\n        for v in graph[u]:\n            if v!= u:\n                result += f\"{u} {v}\\n\"\n\n    return result.strip()"
    },
    {
        "number": 4043,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = map(int, stdin.strip().split())\n    graph = [[] for _ in range(n+1)]\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if i == j:\n                continue\n            if abs(i - j) == d or i == 1 and j == n:\n                graph[i].append(j)\n                graph[j].append(i)\n    for i in range(1, n+1):\n        if len(graph[i]) > k:\n            return \"NO\"\n    ans = []\n    visited = set()\n    stack = [1]\n    while stack:\n        node = stack[-1]\n        if node not in visited:\n            visited.add(node)\n            ans.append(node)\n            for nei in sorted(graph[node]):\n                if nei not in visited and nei not in stack:\n                    stack.append(nei)\n        else:\n            stack.pop()\n    return \"YES\\n\" + \"\\n\".join(map(str, ans)) if len(visited) == n else \"NO\""
    },
    {
        "number": 4043,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = map(int, stdin.split())\n    # check if it is possible to construct a tree with given conditions\n    if d > n or k > (n - 1) // 2:\n        return \"NO\"\n    # construct the tree using a breadth-first search\n    parent = [0] * (n + 1)\n    for i in range(1, n + 1):\n        if parent[i]:\n            continue\n        parent[i] = -1\n        queue = [(i, 1)]\n        while queue:\n            u, depth = queue.pop(0)\n            if depth > d:\n                return \"NO\"\n            for v in range(1, n + 1):\n                if v == u or parent[v]:\n                    continue\n                parent[v] = u\n                if depth + 1 > k:\n                    return \"NO\"\n                queue.append((v, depth + 1))\n    # construct the output string\n    output = \"YES\\n\"\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if parent[i] == j:\n                output += f\"{i} {j}\\n\"\n    return output\n\nstdin = \"\"\"6 3 3\"\"\"\nprint(solution(stdin)) # expected output: \"YES\\n3 1\\n4 1\\n1 2\\n5 2\\n2 6\"\n\nstdin = \"\"\"6 2 3\"\"\"\nprint(solution(stdin)) # expected output: \"NO\"\n\nstdin = \"\"\"10 4 3\"\"\"\nprint(solution(stdin)) # expected output: \"YES\\n2 9\\n2 10\\n10 3\\n3 1\\n6 10\\n8 2\\n4 3\\n5 6\\n6 7\"\n\nstdin = \"\"\"8 5 3\"\"\"\nprint(solution(stdin)) # expected output: \"YES\\n2 5\\n7 2\\n3 7\\n3 1\\n1 6\\n8 7\\n4 3\""
    },
    {
        "number": 4043,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = map(int, stdin.split())\n    if d > n or d % 2 == 0:\n        return \"NO\"\n    if k > n - 1:\n        return \"NO\"\n    if k == n - 1:\n        if d == 1:\n            return \"YES\\n\" + \"\\n\".join(f\"{i} {i+1}\" for i in range(1, n))\n        else:\n            return \"NO\"\n    if d == 1:\n        if k == 0:\n            return \"YES\\n\" + \"\\n\".join(f\"{i} {i+1}\" for i in range(1, n))\n        else:\n            return \"NO\"\n    if k == 0:\n        if d == n - 1:\n            return \"YES\\n\" + \"\\n\".join(f\"{i} {i+1}\" for i in range(1, n))\n        else:\n            return \"NO\"\n    if d == n - 1:\n        if k == 1:\n            return \"YES\\n\" + \"\\n\".join(f\"{i} {i+1}\" for i in range(1, n))\n        else:\n            return \"NO\"\n    if k == 1:\n        if d == n - 2:\n            return \"YES\\n\" + \"\\n\".join(f\"{i} {i+1}\" for i in range(1, n))\n        else:\n            return \"NO\"\n    if d == n - 2:\n        if k == 2:\n            return \"YES\\n\" + \"\\n\".join(f\"{i} {i+1}\" for i in range(1, n))\n        else:\n            return \"NO\"\n    if k == 2:\n        if d == n - 3:\n            return \"YES\\n\" + \"\\n\".join(f\"{i} {i+1}\" for i in range(1, n))\n        else:\n            return \"NO\"\n    if d == n - 3:\n        if k == 3:\n            return \"YES\\n\" + \"\\n\".join(f\"{i} {i+1}\" for i in range(1, n))\n        else:\n            return \"NO\"\n    return \"NO\""
    },
    {
        "number": 4043,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = map(int, stdin.split())\n    g = [[] for _ in range(n+1)]\n    for i in range(1, n+1):\n        for j in range(i+1, n+1):\n            if j - i == d:\n                g[i].append(j)\n                g[j].append(i)\n\n    def dfs(u, p=-1):\n        deg[u] = 1\n        for v in g[u]:\n            if v!= p:\n                dfs(v, u)\n                deg[u] += deg[v]\n\n    deg = [0] * (n+1)\n    for i in range(1, n+1):\n        if deg[i] > k:\n            return \"NO\"\n    for i in range(1, n+1):\n        if deg[i] == 0:\n            dfs(i)\n            if max(deg) > k:\n                return \"NO\"\n    ans = []\n    for i in range(1, n+1):\n        for j in g[i]:\n            if deg[i] + deg[j] - 1 <= k:\n                ans.append(str(i) + \" \" + str(j))\n    return \"YES\\n\" + \"\\n\".join(ans)"
    },
    {
        "number": 4043,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = map(int, stdin.split())\n    if d > n - 1 or k > n - 1:\n        return \"NO\"\n\n    from collections import deque\n    q = deque([(1, 0, 1)])  # vertex, parent, degree\n    used = set()\n    while q:\n        vertex, parent, degree = q.popleft()\n        if degree > k:\n            continue\n        used.add(vertex)\n        if degree == k and parent == vertex:\n            continue\n        for neighbor in range(1, n + 1):\n            if neighbor == vertex or neighbor == parent or neighbor in used:\n                continue\n            q.append((neighbor, vertex, degree + 1))\n        if len(used) == n:\n            return \"YES\"\n    return \"NO\""
    },
    {
        "number": 4043,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = map(int, stdin.split())\n    if n < 2 or d < 2 or k < 2:\n        return \"NO\"\n    if d * 2 > n - 1 or k * (n - 1) > (n - 2) * (n - 1):\n        return \"NO\"\n    edges = []\n    for i in range(1, n + 1):\n        for j in range(i + 1, n + 1):\n            if abs(i - j) <= d and abs(i - j) + 1 <= k:\n                edges.append((i, j))\n    if len(edges)!= n - 1:\n        return \"NO\"\n    return \"YES\\n\" + \"\\n\".join(str(e[0]) + \" \" + str(e[1]) for e in edges)\n"
    },
    {
        "number": 4043,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = map(int, stdin.split())\n    if d * n < k * (k - 1):\n        return \"NO\"\n    adj = [[] for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(i + 1, n + 1):\n            if i * j <= d * (n - 1):\n                adj[i].append(j)\n                adj[j].append(i)\n    deg = [0] * (n + 1)\n    vis = [0] * (n + 1)\n    def dfs(u):\n        vis[u] = 1\n        for v in adj[u]:\n            if not vis[v]:\n                deg[v] += 1\n                if deg[v] > k:\n                    return False\n                if not dfs(v):\n                    return False\n        return True\n    for i in range(1, n + 1):\n        if not vis[i] and deg[i] <= k:\n            if not dfs(i):\n                return \"NO\"\n    ans = []\n    for i in range(1, n + 1):\n        if vis[i]:\n            continue\n        for j in adj[i]:\n            if not vis[j]:\n                ans.append(f\"{i} {j}\")\n                break\n    return \"YES\\n\" + \"\\n\".join(ans)"
    },
    {
        "number": 4044,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n    n = a + b\n    \n    # initialize the string with zeros\n    s = '0' * n\n    \n    # set the required number of ones\n    s = s[:x] + '1' + s[x+1:]\n    \n    # set the required number of zeros\n    s = s[:a] + '0' * a + s[a+b:]\n    \n    return s"
    },
    {
        "number": 4044,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n\n    s = ['0'] * (a + b)\n    s[x - 1] = '1'\n    s.reverse()\n\n    for i in range(x + 1, a + b):\n        if s[i - 1] == '0':\n            s[i] = '1'\n        else:\n            s[i] = '0'\n\n    s = ''.join(s)\n    return s\n"
    },
    {
        "number": 4044,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n    s = '0' * a + '1' * b\n    i, count = 0, 0\n    for j in range(len(s)):\n        if s[j] == '1':\n            count += 1\n        if count == x:\n            s = s[:j] + s[j+1:]\n            count -= 1\n    return s"
    },
    {
        "number": 4044,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n    s = '0' * a + '1' * b\n    if x > 1:\n        s = s[:-x] + '0' + s[-x+1:]\n    return s"
    },
    {
        "number": 4044,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n    s = '0' * a + '1' * b\n    i = 0\n    while x > 0:\n        if s[i] == '0':\n            s = s[:i] + '1' + s[i+1:]\n            x -= 1\n        else:\n            s = s[:i+1] + '0' + s[i+2:]\n        i += 1\n    return s\n"
    },
    {
        "number": 4044,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.strip().split())\n    s = bin(a ^ b)[2:].zfill(a + b)\n    n = len(s)\n    i = 0\n    while x > 0 and i < n - 1:\n        if s[i] == s[i + 1]:\n            s = s[:i] + str((int(s[i]) + 1) % 2) + s[i + 1:]\n            i -= 1\n        i += 1\n        x -= 1\n    return s\n"
    },
    {
        "number": 4044,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Parsing the input\n    a, b, x = map(int, stdin.strip().split())\n\n    # Constructing the binary string\n    s = '0' * a + '1' * b\n\n    # Applying the algorithm\n    for i in range(x - 1):\n        s = s[:i+1] + str((int(s[i]) + 1) % 2) + s[i+2:]\n\n    return s"
    },
    {
        "number": 4044,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n    s = '0' * a + '1' * b\n    for i in range(a+b-1):\n        if s[i] == s[i+1]:\n            s = s[:i+1] + '0' + s[i+1:]\n        if len(s) == x:\n            break\n    return s"
    },
    {
        "number": 4044,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n    s = \"0\" * a + \"1\" * b\n    for i in range(x - a):\n        s = s[:i] + \"1\" + s[i:]\n    return s"
    },
    {
        "number": 4044,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n    s = '0' * a + '1' * b\n    for i in range(x):\n        for j in range(i + 1, len(s)):\n            if s[i]!= s[j]:\n                s = s[:i] + s[j] + s[i+1:j] + s[i] + s[j+1:]\n                break\n    return s\n\ndef"
    },
    {
        "number": 4045,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    s = stdin.split('\\n')[1]\n    t = stdin.split('\\n')[2]\n\n    if s in t or t in s:\n        return \"NO\"\n\n    res = \"\"\n    for i in range(n):\n        res += 'a'\n        res += 'b'\n        res += 'c'\n\n    return \"YES\\n\" + res\n"
    },
    {
        "number": 4045,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    t = stdin.readline().strip()\n    res = ''\n    for i in range(n):\n        res += 'a'\n    for i in range(n):\n        res += 'b'\n    for i in range(n):\n        res += 'c'\n    if s in res or t in res:\n        return 'NO'\n    return 'YES\\n' + res\n\nstdin = \"\"\"\n3\naa\nbc\n\"\"\"\nprint(solution(stdin))"
    },
    {
        "number": 4045,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    t = stdin.readline().strip()\n    \n    res = ''\n    for i in range(n):\n        res += 'a'\n    for i in range(n):\n        res += 'b'\n    for i in range(n):\n        res += 'c'\n    \n    if s in res or t in res:\n        return \"NO\"\n    \n    return \"YES\\n\" + res"
    },
    {
        "number": 4045,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, s, t = map(str, stdin.split())\n    n = int(n)\n    # check if s and t are substrings of s+t\n    if s in t or t in s or s in t+s or t in s+t:\n        return \"NO\"\n    res = s * n + t * n + 'a' * n\n    return \"YES\\n\" + res"
    },
    {
        "number": 4045,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    t = stdin.readline().strip()\n\n    if s == t:\n        return \"NO\"\n\n    res = \"a\" * n + \"b\" * n + \"c\" * n\n    if s in res or t in res or s + t in res or s[::-1] in res or t[::-1] in res:\n        return \"NO\"\n    return \"YES\\n\" + res\n"
    },
    {
        "number": 4045,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, s, t = map(str, stdin.split())\n    n = int(n)\n    if s == t:\n        return \"NO\"\n    if \"aba\" in s or \"aba\" in t:\n        return \"NO\"\n    res = \"a\" * n + \"b\" * n + \"c\" * n\n    if s in res or t in res:\n        return \"NO\"\n    return \"YES\\n\" + res"
    },
    {
        "number": 4045,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    t = stdin.readline().strip()\n\n    res = \"\"\n    for i in range(n):\n        res += \"a\"\n    for i in range(n):\n        res += \"b\"\n    for i in range(n):\n        res += \"c\"\n\n    if s in res or t in res:\n        return \"NO\"\n    else:\n        return \"YES\\n\" + res\n\nprint(solution(\"2\\nab\\nbc\")) # Output: YES\\nacbbac\nprint(solution(\"3\\naa\\nbc\")) # Output: YES\\ncacbacbab\nprint(solution(\"1\\ncb\\nac\")) # Output: YES\\nabc"
    },
    {
        "number": 4045,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, s, t = map(str, stdin.split())\n    n = int(n)\n    \n    res = \"\"\n    for i in range(n):\n        res += \"a\"\n    for i in range(n):\n        res += \"b\"\n    for i in range(n):\n        res += \"c\"\n        \n    if s in res or t in res:\n        return \"NO\"\n    \n    return \"YES\\n\" + res\n\nprint(solution(\"2\\nab\\nbc\"))\nprint(solution(\"3\\naa\\nbc\"))\nprint(solution(\"1\\ncb\\nac\"))"
    },
    {
        "number": 4045,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    t = stdin.readline().strip()\n\n    if n == 0:\n        return \"YES\\nac\"\n\n    if n == 1:\n        if s[0] == t[0]:\n            return \"NO\"\n        else:\n            return \"YES\\nac\"\n\n    if s[0] == t[0]:\n        return \"NO\"\n\n    if s[1] == t[1]:\n        return \"NO\"\n\n    if s[0] == 'a':\n        if t[0] == 'b':\n            if n == 2:\n                return \"YES\\nabc\"\n            else:\n                return \"NO\"\n        else:\n            if n == 2:\n                return \"YES\\nabc\"\n            else:\n                return \"YES\\nac\"\n\n    if s[0] == 'b':\n        if t[0] == 'a':\n            if n == 2:\n                return \"YES\\nabc\"\n            else:\n                return \"NO\"\n        else:\n            if n == 2:\n                return \"YES\\nabc\"\n            else:\n                return \"YES\\nac\"\n\n    if s[0] == 'c':\n        if t[0] == 'a':\n            if n == 2:\n                return \"YES\\nabc\"\n            else:\n                return \"NO\"\n        else:\n            if n == 2:\n                return \"YES\\nabc\"\n            else:\n                return \"YES\\nac\""
    },
    {
        "number": 4045,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    t = stdin.readline().strip()\n    abc = \"abc\"\n    res = []\n    for i in range(n):\n        res.append(abc[i % 3])\n    for i in range(n, 2*n):\n        res.append(abc[i % 3])\n    for i in range(2*n, 3*n):\n        res.append(abc[i % 3])\n    res = \"\".join(res)\n    if s in res or t in res:\n        return \"NO\"\n    else:\n        return \"YES\\n\"+res"
    },
    {
        "number": 4046,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, *q = map(int, stdin.strip().split())\n\n    # check if there exists a permutation of length n which corresponds to the given array q\n    for perm in permutations(range(1, n+1), n):\n        if all(q[i-1] == perm[i] - perm[i-1] for i in range(1, n)):\n            return''.join(map(str, perm))\n\n    return '-1'\n\nfrom itertools import permutations"
    },
    {
        "number": 4046,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    q = list(map(int, stdin.split()))\n    \n    # Check if q is a valid permutation\n    if len(set(q))!= n-1 or sum(q)!= 0:\n        return '-1'\n    \n    # Construct the permutation from q\n    p = [1]\n    for i in range(n-1):\n        p.append(p[-1]+q[i])\n        \n    return''.join(map(str, p))"
    },
    {
        "number": 4046,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, *q = map(int, stdin.strip().split())\n    if any(q[i] == q[i+1] for i in range(n-2)):\n        return \"-1\"\n    p = [1]\n    for i in range(n-1):\n        p.append(p[-1]+q[i])\n    return \" \".join(map(str, p))\n\nprint(solution(\"3\\n-2 1\"))  # Output: 3 1 2 \nprint(solution(\"5\\n1 1 1 1\"))  # Output: 1 2 3 4 5 \nprint(solution(\"4\\n-1 2 2\"))  # Output: -1"
    },
    {
        "number": 4046,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.strip().split())\n    if n == 2 and q == 0:\n        return \"1 2\"\n    elif n == 2 and q == 1:\n        return \"2 1\"\n    elif n == 2 and q == -1:\n        return \"-1\"\n    elif n == 2 and q == 2:\n        return \"2 1\"\n    elif n == 3 and q == -1:\n        return \"1 3 2\"\n    elif n == 3 and q == 0:\n        return \"1 2 3\"\n    elif n == 3 and q == 1:\n        return \"2 1 3\"\n    elif n == 3 and q == 2:\n        return \"3 1 2\"\n    elif n == 3 and q == 3:\n        return \"-1\"\n    else:\n        return \"-1\""
    },
    {
        "number": 4046,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.strip().split())\n    q = list(map(int, stdin.strip().split()))\n    p = [0] * n\n    for i in range(n):\n        p[(i+1)%n] = p[i] + q[i]\n    if len(set(p))!= n:\n        return '-1'\n    return''.join(map(str, p))\n\nstdin = \"\"\"\n3\n-2 1\n\"\"\"\n\nprint(solution(stdin)) # Output: 3 1 2 \n\nstdin = \"\"\"\n5\n1 1 1 1\n\"\"\"\n\nprint(solution(stdin)) # Output: 1 2 3 4 5 \n\nstdin = \"\"\"\n4\n-1 2 2\n\"\"\"\n\nprint(solution(stdin)) # Output: -1"
    },
    {
        "number": 4046,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    if any(q[i] == 0 or q[i] == n-i for i in range(n-1)):\n        return '-1'\n    p = [1] + [q[i]+q[i+1] for i in range(n-2)] + [n]\n    return''.join(map(str, p))\n\nstdin = '3 -2 1'\nprint(solution(stdin)) # output: '3 1 2'\n\nstdin = '5 1 1 1 1'\nprint(solution(stdin)) # output: '1 2 3 4 5'\n\nstdin = '4 -1 2 2'\nprint(solution(stdin)) # output: '-1'"
    },
    {
        "number": 4046,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.strip().split())\n    q = list(map(int, stdin.strip().split()))\n    for i in range(1, n):\n        q[i] -= q[i-1]\n    total = sum(q)\n    if total % 2 == 1:\n        return \"-1\"\n    k = total // 2\n    used = [False] * (n+1)\n    used[0] = True\n    res = [0] * (n+1)\n    for i in range(n):\n        for j in range(1, n+1):\n            if not used[j]:\n                used[j] = True\n                res[j] = i+1\n                k -= q[i]\n                if k < 0:\n                    break\n        if k < 0:\n            break\n    if k == 0:\n        return \" \".join(map(str, res))\n    return \"-1\""
    },
    {
        "number": 4046,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    p = [0] * n\n    for i in range(n):\n        p[i] = i + 1\n    if sum(q) % 2 == 1:\n        return -1\n    count = 0\n    while True:\n        for i in range(n-1):\n            if p[i+1]-p[i]!= q[i]:\n                if count % 2 == 0:\n                    p[i], p[i+1] = p[i+1], p[i]\n                else:\n                    p[i], p[i+1] = p[i+1], p[i]\n                    p[i+1], p[i+2] = p[i+2], p[i+1]\n                count += 1\n        if count % 2 == 0:\n            break\n    return \" \".join(map(str, p))"
    },
    {
        "number": 4046,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    q = list(map(int, stdin.readline().split()))\n    for p in permutations(range(1, n+1)):\n        if all(q[i] == p[i+1]-p[i] for i in range(n-1)):\n            return''.join(map(str, p))\n    return '-1'"
    },
    {
        "number": 4046,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, *q = map(int, stdin.split())\n    if n == 1 and sum(q) == 0:\n        return '1'\n    if n == 2 and sum(q) == 1 and q[0] == 0:\n        return '1 2'\n    if n > 2 and q == [0]*(n-1):\n        return''.join(map(str, range(1, n+1)))\n    return '-1'"
    },
    {
        "number": 4047,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    x = list(map(int, stdin.readline().strip().split()))\n\n    coins = 0\n    for i in range(n):\n        if i == 0:\n            continue\n        if x[i] == x[i-1]:\n            continue\n        if x[i] < x[i-1]:\n            x[i] += 1\n            coins += 1\n        else:\n            x[i] -= 1\n            coins += 1\n\n    return coins\n"
    },
    {
        "number": 4047,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n = int(stdin.split()[0])\n    chips = list(map(int, stdin.split()[1:]))\n    \n    # sort chips by x-coordinate\n    chips.sort()\n\n    # calculate min number of coins\n    min_coins = 0\n    for i in range(n-1):\n        # calculate number of moves required to move chips[i] to chips[i+1]\n        moves = abs(chips[i+1] - chips[i]) // 2\n        \n        # add one coin for each move\n        min_coins += moves\n        \n        # subtract the cost of moving the chip\n        min_coins -= 1\n        \n        # if the chip is moved to an even position, add an extra coin\n        if chips[i+1] % 2 == 0:\n            min_coins += 1\n    \n    return str(min_coins)"
    },
    {
        "number": 4047,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    x = list(map(int, stdin.split('\\n')[1].split()))\n    x.sort()\n    ans = 0\n    for i in range(n):\n        ans += abs(x[i]-x[0])\n    return str(ans)"
    },
    {
        "number": 4047,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    x = [int(x) for x in stdin.readline().split()]\n    min_moves = 0\n    for i in range(n):\n        moves = abs(x[i]-x[0])\n        for j in range(i+1, n):\n            moves += abs(x[j]-x[i])\n        if x[i]!= x[0]:\n            min_moves += moves\n    return str(min_moves)\n\nprint(solution('3\\n1 2 3'))\nprint(solution('5\\n2 2 2 3 3'))"
    },
    {
        "number": 4047,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    n = int(stdin.readline().strip())\n    x = list(map(int, stdin.readline().strip().split()))\n\n    # Sort the list of coordinates\n    x.sort()\n\n    # Calculate the minimum number of coins required\n    min_coins = 0\n    for i in range(n):\n        min_coins += abs(x[i] - x[0])\n\n    return str(min_coins)"
    },
    {
        "number": 4047,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    chips = list(map(int, stdin.readline().split()))\n    coins = 0\n    for i in range(n):\n        if chips[i] == chips[(i+1)%n] or chips[i] == chips[(i-1)%n]:\n            coins += 1\n        else:\n            coins += 2\n    print(coins)"
    },
    {
        "number": 4047,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    n = int(stdin.readline())\n    x = list(map(int, stdin.readline().strip().split()))\n\n    # Initialize variables\n    min_coins = float('inf')\n    coins = [0] * n\n\n    # Calculate minimum coins required to move all chips to same coordinate\n    for i in range(1, n):\n        diff = abs(x[i] - x[i-1])\n        if diff % 2 == 0:\n            # Move chip i by 2 to the left or right for free\n            coins[i] = coins[i-1] + 1\n        else:\n            # Move chip i by 1 to the left or right and pay one coin for this move\n            coins[i] = coins[i-1] + 2\n            min_coins = min(min_coins, coins[i])\n\n    # Print minimum coins required to move all chips to same coordinate\n    return str(min_coins)"
    },
    {
        "number": 4047,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    x = list(map(int, stdin.split()[1:]))\n\n    # sort chips by their coordinates\n    chips = sorted(enumerate(x), key=lambda x: x[1])\n\n    # calculate min coins required to move all chips to the same coordinate\n    coins = 0\n    prev_coord = chips[0][1]\n    for i, coord in chips:\n        dist = abs(coord - prev_coord)\n        if dist > 2:\n            coins += dist - 2\n            prev_coord = coord - 2 if coord - 2 >= 0 else 0\n        else:\n            prev_coord = coord\n    return coins\n\nprint(solution(\"3\\n1 2 3\"))\nprint(solution(\"5\\n2 2 2 3 3\"))"
    },
    {
        "number": 4047,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    x = list(map(int, stdin.split()[1:]))\n    coins = 0\n    for i in range(n):\n        if x.count(x[i]) > 1:\n            coins += 1\n    for i in range(n):\n        for j in range(i+1, n):\n            if abs(x[i] - x[j]) <= 2:\n                if abs(x[i] - x[j]) == 2:\n                    coins += 1\n                elif abs(x[i] - x[j]) == 1:\n                    coins += 2\n    return str(coins)\n\nprint(solution(input()))"
    },
    {
        "number": 4047,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    chips = [int(x) for x in stdin.split()]\n    n = chips.pop(0)\n    moves = []\n    for i in range(n):\n        x = chips[i]\n        if x % 2 == 0:\n            moves.append((i, x, x+2))\n        else:\n            moves.append((i, x, x+1))\n            moves.append((i, x, x-1))\n    moves.sort(key=lambda x: x[1])\n    coins = 0\n    prev_x = -1\n    for move in moves:\n        i, x, new_x = move\n        if new_x!= prev_x:\n            coins += abs(new_x - prev_x)\n            prev_x = new_x\n    return str(coins)"
    },
    {
        "number": 4048,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    i = 1\n    j = 1\n    moves = 0\n    while True:\n        if i*j == n:\n            break\n        elif i*j > n:\n            j -= 1\n            moves += 1\n        else:\n            if i+1 > j:\n                i += 1\n                j = 1\n            else:\n                i, j = j, i+j\n            moves += 1\n    return str(moves)"
    },
    {
        "number": 4048,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    i = 1\n    j = 1\n    while i*j < n:\n        if i == j:\n            count += 1\n        elif i < j:\n            i += 1\n        else:\n            j += 1\n        count += 1\n    print(count)"
    },
    {
        "number": 4048,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    count = 0\n    i, j = 1, 1\n    while i*j!= N:\n        if i*j < N:\n            j += 1\n        else:\n            i += 1\n        count += 1\n    return str(count)"
    },
    {
        "number": 4048,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n\n    # Initialize table and visited arrays\n    table = [[0] * 1001 for i in range(1001)]\n    visited = [[False] * 1001 for i in range(1001)]\n\n    # Initialize starting point and mark as visited\n    i = 1\n    j = 1\n    table[i][j] = i * j\n    visited[i][j] = True\n\n    # Initialize variables for keeping track of minimum moves\n    min_moves = float('inf')\n\n    # BFS to find minimum number of moves\n    queue = [(i, j)]\n    while queue:\n        current = queue.pop(0)\n        i, j = current\n\n        # Check if we have reached N\n        if table[i][j] == n:\n            min_moves = min(min_moves, abs(i - 1) + abs(j - 1))\n            continue\n\n        # Check if we can move to the left\n        if j > 1 and not visited[i][j - 1]:\n            new_table = i * (j - 1)\n            if new_table < n and new_table < table[i][j - 1]:\n                table[i][j - 1] = new_table\n                queue.append((i, j - 1))\n                visited[i][j - 1] = True\n\n        # Check if we can move up\n        if i > 1 and not visited[i - 1][j]:\n            new_table = (i - 1) * j\n            if new_table < n and new_table < table[i - 1][j]:\n                table[i - 1][j] = new_table\n                queue.append((i - 1, j))\n                visited[i - 1][j] = True\n\n    # Return minimum number of moves\n    return str(min_moves)\n"
    },
    {
        "number": 4048,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    moves = 0\n    i, j = 1, 1\n    while True:\n        if i*j == n:\n            return str(moves+1)\n        elif i*j < n:\n            i += 1\n            j += 1\n            moves += 1\n        else:\n            i -= 1\n            j -= 1\n            moves += 1\n"
    },
    {
        "number": 4048,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    moves = 0\n    i = 1\n    j = 1\n    while i*j < N:\n        if i == j:\n            i += 1\n        else:\n            if i*j > N:\n                if i > j:\n                    i -= 1\n                else:\n                    j -= 1\n            else:\n                if i > j:\n                    i += 1\n                else:\n                    j += 1\n        moves += 1\n    return str(moves)"
    },
    {
        "number": 4048,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Reading input\n    N = int(stdin.readline())\n\n    # Initializing variables\n    i = 1\n    j = 1\n    count = 0\n\n    # Calculating minimum number of moves\n    while N > i*j:\n        if N >= (i+1)*j:\n            N -= i*j\n            i += 1\n            count += 1\n        elif N >= i*(j+1):\n            N -= i*j\n            j += 1\n            count += 1\n        else:\n            break\n\n    # Printing output\n    print(count)\n    return str(count)"
    },
    {
        "number": 4048,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    i = 1\n    j = 1\n    count = 0\n    while N > i*j:\n        count += 1\n        if N <= (i+1)*(j+1):\n            j += 1\n        else:\n            i += 1\n    return count"
    },
    {
        "number": 4048,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    i, j = 1, 1\n    count = 0\n    while i*j!= n:\n        if i*j < n:\n            j += 1\n        else:\n            i += 1\n        count += 1\n    return str(count)\n\nstdin = \"10\\n\"\nprint(solution(stdin)) # Output: 5"
    },
    {
        "number": 4048,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    i, j = 1, 1\n    count = 1\n    while (i*j)!= n:\n        if (i+1)*j >= n:\n            j = n // i\n            count += 1\n            break\n        elif i*(j+1) >= n:\n            i = n // j\n            count += 1\n            break\n        i += 1\n        j += 1\n        count += 1\n    print(count)\n    return \"\""
    },
    {
        "number": 4049,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a1, a2, a3, b1, b2, b3 = map(int, stdin.strip().split())\n    alice_wins = 0\n    for i in range(a1 + a2 + a3):\n        if i % 3 == 0:\n            if b1 > 0:\n                alice_wins += 1\n                b1 -= 1\n        elif i % 3 == 1:\n            if b2 > 0:\n                alice_wins += 1\n                b2 -= 1\n        else:\n            if b3 > 0:\n                alice_wins += 1\n                b3 -= 1\n    if a1 > b1:\n        alice_wins += 1\n    elif a1 < b1:\n        alice_wins -= 1\n    if a2 > b2:\n        alice_wins += 1\n    elif a2 < b2:\n        alice_wins -= 1\n    if a3 > b3:\n        alice_wins += 1\n    elif a3 < b3:\n        alice_wins -= 1\n    if alice_wins < 0:\n        alice_wins = 0\n    print(alice_wins, 2 * n - alice_wins)\n    return \"\"\n"
    },
    {
        "number": 4049,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, a1, a2, a3, b1, b2, b3 = map(int, stdin.split())\n    min_rounds = max_rounds = 0\n    count_a = count_b = 0\n    \n    for i in range(1, n+1):\n        if i <= a1:\n            if count_b == 0:\n                min_rounds = i\n            max_rounds = i\n            count_a += 1\n        elif i <= a1+a2:\n            if count_a == 0:\n                max_rounds = i\n            min_rounds = i\n            count_b += 1\n        elif i <= a1+a2+a3:\n            if count_b == 0:\n                min_rounds = i\n            max_rounds = i\n            count_a += 1\n        else:\n            if count_a == 0:\n                max_rounds = i\n            min_rounds = i\n            count_b += 1\n    \n    return \" \".join(map(str, [min_rounds, max_rounds]))\n\nprint(solution(\"2\\n0 1 1\\n1 1 0\")) # Output: 0 1\nprint(solution(\"15\\n5 5 5\\n5 5 5\")) # Output: 0 15\nprint(solution(\"3\\n0 0 3\\n3 0 0\")) # Output: 3 3\nprint(solution(\"686\\n479 178 29\\n11 145 530\")) # Output: 22 334\nprint(solution(\"319\\n10 53 256\\n182 103 34\")) # Output: 119 226"
    },
    {
        "number": 4049,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    n, a1, a2, a3, b1, b2, b3 = map(int, stdin.strip().split())\n\n    # initialize variables\n    alice_wins = 0\n    bob_wins = 0\n\n    # iterate over all possible combinations of a1, a2, a3, b1, b2, b3\n    for i in range(a1+1):\n        for j in range(a2+1):\n            for k in range(a3+1):\n                for l in range(b1+1):\n                    for m in range(b2+1):\n                        for n in range(b3+1):\n                            # check if both players win\n                            if i+j+k+l == n and (i+j+k) > (l+m+n):\n                                alice_wins += 1\n                            elif (l+m+n) == n and (i+j+k) < (l+m+n):\n                                bob_wins += 1\n\n    # print results\n    print(alice_wins, bob_wins)\n\n    # find the minimum and maximum number of rounds Alice can win\n    if alice_wins == 0:\n        print(\"0 1\")\n    else:\n        print(alice_wins, max(alice_wins, 2*n-1))"
    },
    {
        "number": 4049,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, a1, a2, a3, b1, b2, b3 = map(int, stdin.split())\n    alice_wins = 0\n    for i in range(n):\n        if a1 > 0 and b1 > 0:\n            if i % 2 == 0:\n                alice_wins += 1\n            a1 -= 1\n            b1 -= 1\n        elif a2 > 0 and b2 > 0:\n            if i % 2 == 1:\n                alice_wins += 1\n            a2 -= 1\n            b2 -= 1\n        elif a3 > 0 and b3 > 0:\n            if i % 2 == 0:\n                alice_wins += 1\n            a3 -= 1\n            b3 -= 1\n        else:\n            break\n    return f\"{alice_wins} {n-alice_wins}\"\n"
    },
    {
        "number": 4049,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split(\"\\n\")\n    n = int(lines[0])\n    a = list(map(int, lines[1].split()))\n    b = list(map(int, lines[2].split()))\n    a.sort(reverse=True)\n    b.sort(reverse=True)\n    lo = sum(a)\n    hi = sum(b)\n    return f\"{lo} {hi}\""
    },
    {
        "number": 4049,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    alice = list(map(int, stdin.readline().strip().split()))\n    bob = list(map(int, stdin.readline().strip().split()))\n    \n    alice_win_min = 0\n    alice_win_max = 0\n    \n    # Alice can always win at least one round\n    alice_win_min += 1\n    alice_win_max += 1\n    \n    # Alice can always win at most n rounds\n    alice_win_max += n\n    \n    # Alice can never win more rounds than Bob\n    alice_win_max = min(alice_win_max, sum(bob))\n    \n    # Alice can never lose more rounds than Bob\n    alice_win_min = max(alice_win_min, sum(alice))\n    \n    return f\"{alice_win_min} {alice_win_max}\""
    },
    {
        "number": 4049,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, a1, a2, a3, b1, b2, b3 = map(int, stdin.split())\n\n    # Alice can always win the first round\n    a_wins = 1\n    # The maximum number of rounds Alice can win\n    max_a_wins = 1\n    # The minimum number of rounds Alice can win\n    min_a_wins = 0\n\n    # Check if Alice can win any rounds\n    if a1 == 0 and a2 == 0 and a3 == 0:\n        max_a_wins = 0\n    else:\n        max_a_wins = 1\n\n    # Check if Alice can win any rounds\n    if a1 == n and a2 == 0 and a3 == 0:\n        min_a_wins = 1\n        max_a_wins = n\n    elif a1 == n and a2 == 0 and a3 == n:\n        min_a_wins = n - 1\n        max_a_wins = n\n    elif a1 == 0 and a2 == 0 and a3 == n:\n        min_a_wins = n\n    else:\n        # Check if Alice can win all rounds\n        if a1 + a2 + a3 == n and b1 == 0 and b2 == 0 and b3 == 0:\n            min_a_wins = n\n\n    # Check if Bob can win any rounds\n    if b1 == 0 and b2 == 0 and b3 == 0:\n        return f\"{min_a_wins} {max_a_wins}\"\n\n    # Check if Bob can win all rounds\n    if b1 + b2 + b3 == n:\n        return f\"{min_a_wins} {max_a_wins}\"\n\n    # Check if there is a tie\n    if a1 == b1 and a2 == b2 and a3 == b3:\n        return f\"{min_a_wins} {max_a_wins}\"\n\n    # Check if Alice wins\n    if (a1 + b2 + b3 > a2 + b1 + b3) and (a1 + a2 + b3 > a3 + b1 + b2):\n        a_wins += 1\n\n    # Check if Bob wins\n    if (b1 + a2 + a3 > b2 + a1 + a3) and (b1 + b2 + a3 > b3 + a1 + a2):\n        max_a_wins = max(max_a_wins, a_wins)\n\n    # Check if there is a tie\n    if a1 == b1 and a2 == b2 and a3 == b3:\n        return f\"{min_a_wins} {max_a_wins}\"\n\n    # Check if Alice wins\n    if (a1 + b2 + b3 > a2 + b1 + b3) and (a1 + a2 + b3 > a3 + b1 + b2):\n        a_wins += 1\n\n    # Check if Bob wins\n    if (b1 + a2 + a3 > b2 + a1 + a3) and (b1 + b2 + a3 > b3 + a1 + a2):\n        max_a_wins = max(max_a_wins, a_wins)\n\n    # Check if there is a tie\n    if a1 == b1 and a2 == b2 and a3 == b3:\n        return f\"{min_a_wins} {max_a_wins}\"\n\n    # Check if Alice wins\n    if (a1 + b2 + b3 > a2 + b1 + b3) and (a1 + a2 + b3 > a3 + b1 + b2):\n        a_wins += 1\n\n    # Check if Bob wins\n    if (b1 + a2 + a3 > b2 + a1 + a3) and (b1 + b2 + a3 > b3 + a1 + a2):\n        max_a_wins = max(max_a_wins, a_wins)\n\n    # Check if there is a tie\n    if a1 == b1 and a2 == b2 and a3 == b3:\n        return f\"{min_a_wins} {max_a_wins}\"\n\n    # Check if Alice wins\n    if (a1 + b2 + b3 > a2 + b1 + b3) and (a1 + a2 + b3 > a3 + b1 + b2):\n        a_wins += 1\n\n    # Check if Bob wins\n    if (b1 + a2 + a3 > b2 + a1 + a3) and (b1 + b2 + a3 > b3 + a1 + a2):\n        max_a_"
    },
    {
        "number": 4049,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, a1, a2, a3, b1, b2, b3 = map(int, stdin.split())\n    a_count = [0] * 3\n    b_count = [0] * 3\n    for i in range(a1):\n        a_count[0] += 1\n    for i in range(a2):\n        a_count[1] += 1\n    for i in range(a3):\n        a_count[2] += 1\n    for i in range(b1):\n        b_count[0] += 1\n    for i in range(b2):\n        b_count[1] += 1\n    for i in range(b3):\n        b_count[2] += 1\n    min_rounds = float('inf')\n    max_rounds = 0\n    for i in range(3):\n        for j in range(3):\n            if a_count[i] > 0 and b_count[j] > 0:\n                if i == 0 and j == 2:\n                    min_rounds = 1\n                elif i == 1 and j == 0:\n                    min_rounds = 1\n                elif i == 2 and j == 1:\n                    min_rounds = 1\n                elif i == j:\n                    min_rounds = 1\n                else:\n                    rounds = a_count[i] + b_count[j] - 1\n                    min_rounds = min(min_rounds, rounds)\n                    max_rounds = max(max_rounds, rounds)\n    return f\"{min_rounds} {max_rounds}\""
    },
    {
        "number": 4049,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    alice = list(map(int, stdin.split()[1:4]))\n    bob = list(map(int, stdin.split()[4:]))\n\n    # Find the minimum number of rounds Alice can win\n    a_min = float('inf')\n    for a in range(n + 1):\n        b_max = min(n - a, b)\n        if a + b_max < alice[0]:\n            a_min = a\n            break\n    if a_min == float('inf'):\n        a_min = 0\n\n    # Find the maximum number of rounds Alice can win\n    a_max = 0\n    for b in range(n + 1):\n        a_max = max(a_max, n - b)\n        if a_max + b < alice[1]:\n            break\n\n    # Find the maximum number of rounds Bob can win\n    b_max = 0\n    for a in range(n + 1):\n        b_max = max(b_max, n - a)\n        if a + b_max < bob[0]:\n            break\n\n    # Find the minimum number of rounds Bob can win\n    b_min = float('inf')\n    for b in range(n + 1):\n        a_min = min(a_min, n - b)\n        if a_min + b < bob[1]:\n            b_min = b\n            break\n    if b_min == float('inf'):\n        b_min = 0\n\n    return f'{a_min} {a_max}'"
    },
    {
        "number": 4049,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a1, a2, a3 = map(int, stdin.readline().split())\n    b1, b2, b3 = map(int, stdin.readline().split())\n    alice_wins = [0] * (n+1)\n    for i in range(a1):\n        alice_wins[i+1] += 1\n    for i in range(a1, a1+a2):\n        alice_wins[i+1] += 2\n    for i in range(a1+a2, a1+a2+a3):\n        alice_wins[i+1] += 1\n    bob_wins = [0] * (n+1)\n    for i in range(b1):\n        bob_wins[i+1] += 1\n    for i in range(b1, b1+b2):\n        bob_wins[i+1] += 2\n    for i in range(b1+b2, b1+b2+b3):\n        bob_wins[i+1] += 1\n    alice_min_wins = 0\n    alice_max_wins = 0\n    for i in range(n+1):\n        if alice_wins[i] > alice_wins[alice_max_wins]:\n            alice_max_wins = i\n        if alice_wins[i] < alice_wins[alice_min_wins]:\n            alice_min_wins = i\n    bob_max_wins = 0\n    for i in range(n+1):\n        if bob_wins[i] > bob_wins[bob_max_wins]:\n            bob_max_wins = i\n    return f\"{alice_min_wins} {alice_max_wins}\\n\"\n\nwith open(\"input.txt\", \"r\") as f:\n    stdin = f.read()\n\nwith open(\"output.txt\", \"w\") as f:\n    f.write(solution(stdin))"
    },
    {
        "number": 4050,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    max_block = 1\n    blocks = []\n    for i in range(n):\n        if not blocks or a[i]!= a[blocks[-1][-1] + 1]:\n            blocks.append([i, i])\n            max_block = max(max_block, len(blocks))\n        else:\n            blocks[-1][1] = i\n    return str(max_block) + '\\n' + '\\n'.join(f'{l} {r}' for l, r in blocks) + '\\n'\n\nstdin = \"7\\n4 1 2 2 1 5 3\"\nprint(solution(stdin))  # Output: 3\\n7 7\\n2 3\\n4 5\\n\n\nstdin = \"11\\n-5 -4 -3 -2 -1 0 1 2 3 4 5\"\nprint(solution(stdin))  # Output: 2\\n3 4\\n1 1\\n\n\nstdin = \"4\\n1 1 1 1\"\nprint(solution(stdin))  # Output: 4\\n4 4\\n1 1\\n2 2\\n3 3\\n"
    },
    {
        "number": 4050,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n\n    blocks = []\n    sum_left = [0] * n\n    for i in range(n):\n        sum_left[i] = sum_left[i - 1] + a[i]\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            if sum_left[j] - sum_left[i - 1] == sum_left[-1] - sum_left[i - 1]:\n                blocks.append((i, j))\n\n    k = len(blocks)\n    result = ''\n    result += str(k) + '\\n'\n    for block in blocks:\n        result += str(block[0]) +'' + str(block[1]) + '\\n'\n\n    return result\n"
    },
    {
        "number": 4050,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    # Initialize variables\n    block_dict = {}\n    block_list = []\n    block_count = 0\n\n    # Loop through the array and add each element to a block\n    for i in range(n):\n        if i in block_dict:\n            block_dict[i] += 1\n        else:\n            block_dict[i] = 1\n\n    # Loop through the block dictionary and create a list of blocks\n    for key, value in block_dict.items():\n        block_list.append((key, key+value-1))\n\n    # Sort the list of blocks by their starting index\n    block_list.sort(key=lambda x: x[0])\n\n    # Find the maximum number of blocks\n    for i in range(len(block_list)):\n        for j in range(i+1, len(block_list)):\n            if block_list[j][0] < block_list[i][1]:\n                block_count += 1\n\n    # Print the number of blocks\n    print(block_count)\n\n    # Print the blocks\n    for block in block_list:\n        print(block[0], block[1])\n"
    },
    {
        "number": 4050,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Reading the input\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    # Initializing the set of blocks\n    blocks = set()\n    # Iterating over all possible pairs of indices\n    for i in range(n):\n        for j in range(i+1, n):\n            # Checking if the blocks intersect\n            if a[i] <= a[j] <= a[i+1] or a[j] <= a[i] <= a[j+1]:\n                continue\n            # Adding the blocks to the set\n            blocks.add((i, j))\n    # Printing the number of blocks\n    print(len(blocks))\n    # Printing the blocks\n    for block in blocks:\n        print(*block)\n    return ''"
    },
    {
        "number": 4050,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n\n    # Find sum of all elements\n    total_sum = sum(a)\n\n    # Initialize variables\n    l, r = 0, 0\n    blocks = []\n    block_sum = 0\n\n    # Iterate over the array\n    for i in range(n):\n        # If current element is less than current block sum, then start a new block\n        if a[i] < block_sum:\n            blocks.append((l, r))\n            l = i\n            block_sum = 0\n        # Update block sum\n        block_sum += a[i]\n        # Update right pointer\n        r = i\n\n    # Append the last block\n    blocks.append((l, r))\n\n    # Find maximum number of blocks\n    max_blocks = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i] + a[j] == total_sum:\n                max_blocks = max(max_blocks, j-i+1)\n\n    # Remove blocks that do not satisfy the second requirement\n    for i in range(len(blocks)):\n        for j in range(i+1, len(blocks)):\n            if not (blocks[j][0] <= blocks[i][1] or blocks[i][0] <= blocks[j][1]):\n                blocks[i] = None\n                break\n\n    # Filter out None values\n    blocks = list(filter(lambda x: x is not None, blocks))\n\n    # Sort the blocks\n    blocks.sort()\n\n    # Print the number of blocks and the blocks\n    print(len(blocks))\n    for block in blocks:\n        print(block[0], block[1])\n\n    return \"\""
    },
    {
        "number": 4050,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    \n    # Calculate prefix sum array\n    prefix_sum = [0] * (n + 1)\n    for i in range(1, n + 1):\n        prefix_sum[i] = prefix_sum[i - 1] + a[i - 1]\n    \n    # Calculate number of blocks\n    blocks = []\n    for i in range(1, n + 1):\n        # Find first and last index of subarray with sum equal to current element\n        left = bisect_left(prefix_sum, prefix_sum[i] // 2, 1, i)\n        right = bisect_right(prefix_sum, prefix_sum[i] // 2, 1, i)\n        if left == i:\n            left -= 1\n        blocks.append((left, right))\n        \n    # Sort blocks by size\n    blocks.sort(key=lambda x: x[1] - x[0] + 1, reverse=True)\n    \n    # Remove intersecting blocks\n    i = 0\n    while i < len(blocks) - 1:\n        if blocks[i][1] > blocks[i + 1][0]:\n            if blocks[i][0] >= blocks[i + 1][0]:\n                blocks[i] = (blocks[i][0], blocks[i + 1][1])\n            else:\n                blocks[i + 1] = (blocks[i + 1][0], blocks[i][1])\n        else:\n            i += 1\n    \n    # Print output\n    print(len(blocks))\n    for block in blocks:\n        print(block[0], block[1])\n    \n    return \"\"\n\nfrom bisect import bisect_left, bisect_right"
    },
    {
        "number": 4050,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    k = 1\n    blocks = [(0, 0)]\n    for i in range(n):\n        l, r = blocks[-1]\n        if a[i]!= a[r]:\n            blocks.append((i, i))\n            k += 1\n        else:\n            blocks[-1] = (l, i)\n    print(k)\n    print(*blocks, sep='\\n')\n    return ''\n"
    },
    {
        "number": 4050,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    blocks = []\n    sums = []\n    for i in range(n):\n        for j in range(i, n):\n            if len(blocks) == 0 or a[j]!= a[blocks[-1][1]+1]:\n                blocks.append([i, j])\n                sums.append(sum(a[i:j+1]))\n    k = len(blocks)\n    res = []\n    for i in range(k):\n        if sums[i] == sums[-1]:\n            res.append([blocks[i][0]+1, blocks[i][1]+1])\n    return str(k) + '\\n' + '\\n'.join(map(str, res)) + '\\n'"
    },
    {
        "number": 4050,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n\n    # Check if there exists a subset of blocks such that they do not intersect and the sum of elements in each block is the same.\n    # We can solve this problem using a dynamic programming approach. We create a dp[i][j] array to store the maximum number of non-intersecting blocks\n    # that can be formed with a[i] as the left element and a[j] as the right element. We can fill this array using the following recurrence relation:\n\n    # dp[i][j] = dp[i+1][j] + dp[i][j-1] - dp[i+1][j-1]\n\n    # where dp[i+1][j] and dp[i][j-1] represent the number of non-intersecting blocks that can be formed with a[i+1] and a[j-1] as the left and\n    # right elements respectively. dp[i+1][j-1] represents the number of non-intersecting blocks that can be formed with a[i+1] and a[j-1]\n    # as the left and right elements respectively. We can calculate dp[i][j] using the above recurrence relation.\n\n    dp = [[0]*n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for i in range(n-2, -1, -1):\n        for j in range(i+2, n):\n            if a[i] == a[j]:\n                dp[i][j] = 2\n            else:\n                dp[i][j] = dp[i+1][j] + dp[i][j-1] - dp[i+1][j-1]\n\n    # Now we can iterate over dp to find the maximum number of non-intersecting blocks that can be formed with the given array.\n    max_blocks = 0\n    max_blocks_indices = []\n    for i in range(n):\n        for j in range(i+1, n):\n            if dp[i][j] > max_blocks:\n                max_blocks = dp[i][j]\n                max_blocks_indices = [(i, j)]\n            elif dp[i][j] == max_blocks:\n                max_blocks_indices.append((i, j))\n\n    # We can then iterate over the maximum number of blocks and print their indices.\n    k = len(max_blocks_indices)\n    output = str(k) + '\\n'\n    for i in range(k):\n        output += str(max_blocks_indices[i][0]+1) +'' + str(max_blocks_indices[i][1]+1) + '\\n'\n    return output\n"
    },
    {
        "number": 4050,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n\n    # initialize variables\n    k = 0\n    blocks = []\n    block_sum = 0\n\n    # loop through array and find blocks\n    for i in range(n):\n        # if we have not started a block yet\n        if len(blocks) == 0:\n            # start a new block\n            blocks.append((i, i))\n            block_sum = a[i]\n        # if we have started a block and the sum is the same\n        elif block_sum == a[i]:\n            # continue the block\n            blocks[-1] = (blocks[-1][0], i)\n        # if we have started a block and the sum is different\n        else:\n            # end the block\n            blocks[-1] = (blocks[-1][0], i - 1)\n            # start a new block\n            blocks.append((i, i))\n            block_sum = a[i]\n        # if we have more than one block\n        if len(blocks) > k:\n            # update k\n            k = len(blocks)\n\n    # print the result\n    print(k)\n    for block in blocks:\n        print(block[0], block[1])\n\n    return \"\""
    },
    {
        "number": 4051,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    arr = list(map(int, stdin.split('\\n')[1].split()))\n    stacks = [[] for _ in range(n)]\n    for i, num in enumerate(arr):\n        stacks[i].append(num)\n    for i in range(n):\n        for j in range(i+1, n):\n            if stacks[i] and stacks[j]:\n                if stacks[i][-1] < stacks[j][-1]:\n                    stacks[i], stacks[j] = stacks[j], stacks[i]\n    for i in range(n):\n        if not stacks[i]:\n            return \"NO\"\n        while len(stacks[i]) > 1 and abs(stacks[i][-1] - stacks[i][-2]) <= 2:\n            stacks[i].pop()\n            if not stacks[i]:\n                return \"NO\"\n        if not stacks[i]:\n            return \"NO\"\n    return \"YES\""
    },
    {
        "number": 4051,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n\n    # Initialize the stacks with the initial ravioli\n    stacks = []\n    for num in a:\n        stacks.append([num])\n\n    # Sort the stacks based on their heights\n    stacks = sorted(stacks, key=lambda x: len(x))\n\n    # Perform the sorting process\n    output = []\n    while stacks:\n        # Find the tallest stack\n        tallest_stack = stacks[-1]\n        output.append(len(tallest_stack))\n\n        # Remove the tallest stack\n        stacks.pop()\n\n        # Shift the stacks in the row so that there is no gap between them\n        for i in range(len(stacks)):\n            stack = stacks[i]\n            if len(stack) > len(tallest_stack) and stack[-1] == tallest_stack[-1]:\n                # If the top of the stack is the same as the tallest stack,\n                # slide the top ravioli of the tallest stack down on top of the lower stack\n                stack.pop()\n                tallest_stack[-1] = tallest_stack[-1] + 1\n            else:\n                # If the top of the stack is not the same as the tallest stack,\n                # shift the ravioli of the tallest stack down by one and add it to the next stack\n                tallest_stack.pop()\n                if i == len(stacks) - 1:\n                    stacks.append(tallest_stack)\n                else:\n                    stacks[i+1].append(tallest_stack[-1])\n\n    # Check if the sorted array is correct\n    if output == sorted(a):\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 4051,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    arr = list(map(int, stdin.readline().strip().split()))\n\n    # build stacks of ravioli\n    stacks = [[] for _ in range(n)]\n    for i, x in enumerate(arr):\n        stacks[i].append(x)\n\n    # sort stacks by height\n    stacks = sorted(stacks, key=lambda x: len(x), reverse=True)\n\n    # slide stacks downward\n    for i in range(n-1):\n        if len(stacks[i]) > 0 and len(stacks[i+1]) > 0:\n            if stacks[i][-1] > stacks[i+1][-1]:\n                stacks[i+1].append(stacks[i].pop())\n\n    # check for correct order\n    sorted_arr = []\n    for stack in stacks:\n        sorted_arr.extend(stack)\n    if sorted_arr == arr:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 4051,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    arr = list(map(int, stdin.split()[1:]))\n\n    # build stacks of ravioli\n    stacks = [[] for _ in range(n)]\n    for i in range(n):\n        stacks[i].append(arr[i])\n\n    # sort stacks by height\n    sorted_stacks = sorted(enumerate(stacks), key=lambda x: len(x[1]), reverse=True)\n\n    # process stacks until all are empty\n    sorted_arr = []\n    for i, stack in sorted_stacks:\n        # slide down taller stacks\n        while len(sorted_stacks) > i+1 and len(stack) > len(sorted_stacks[i+1][1]):\n            top_ravioli = stack.pop()\n            sorted_stacks[i+1][1].append(top_ravioli)\n\n        if len(stack) > 1:\n            # check if tallest stack has a gap\n            tallest_stack = max(stack, key=lambda x: len(stacks[sorted_stacks.index(x)][1]))\n            gap = len(stack) - len(stacks[sorted_stacks.index(tallest_stack)][1])\n            if gap >= 2:\n                return \"NO\"\n\n        # add height of tallest stack to output array\n        sorted_arr.append(len(stack))\n\n    return \"YES\""
    },
    {
        "number": 4051,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    stacks = [[] for i in range(n)]\n    for i in range(n):\n        stacks[i].append(a[i])\n    sorted_stacks = []\n    while len(stacks) > 0:\n        max_height = 0\n        max_stack = -1\n        for i in range(len(stacks)):\n            if len(stacks[i]) > 0:\n                if len(stacks[i]) > len(stacks[max_stack]) or (len(stacks[i]) == len(stacks[max_stack]) and stacks[i][0] < stacks[max_stack][0]):\n                    max_height = len(stacks[i])\n                    max_stack = i\n        if max_stack == -1:\n            break\n        sorted_stacks.append(max_height)\n        stacks[max_stack] = stacks[max_stack][1:]\n        for i in range(n):\n            if len(stacks[i]) > 0 and stacks[i][0] > stacks[max_stack][-1]:\n                stacks[i][0] -= 1\n    if sorted_stacks == sorted(a):\n        return \"YES\"\n    return \"NO\"\n\nstdin = \"3\\n1 2 3\"\nprint(solution(stdin)) # Output: YES\n\nstdin = \"3\\n3 1 2\"\nprint(solution(stdin)) # Output: NO"
    },
    {
        "number": 4051,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    arr = list(map(int, stdin.split('\\n')[1].split()))\n    stacks = [[] for _ in range(n)]\n\n    # create stacks of ravioli\n    for i in range(n):\n        for j in range(arr[i]):\n            stacks[i].append(i+1)\n\n    # sort stacks by height\n    stacks.sort(key=lambda x: len(x), reverse=True)\n\n    # merge stacks into one row\n    output = []\n    while stacks:\n        max_stack = stacks.pop(0)\n        output.append(len(max_stack))\n        for i in range(len(stacks)):\n            if len(max_stack) < len(stacks[i]) and max_stack[-1] < stacks[i][0]:\n                max_stack.append(stacks[i].pop(0))\n\n    # check if output is sorted\n    return \"YES\" if arr == output else \"NO\""
    },
    {
        "number": 4051,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n = int(stdin.split()[0])\n    arr = list(map(int, stdin.split()[1:]))\n\n    # build stacks of ravioli\n    stacks = [[] for _ in range(n)]\n    for i, a in enumerate(arr):\n        stacks[i].append(a)\n\n    # sort stacks\n    for i in range(n):\n        # find the tallest stack and remove it\n        tallest = max(stacks, key=len)\n        arr.append(len(tallest))\n        stacks.remove(tallest)\n\n        # shift stacks to the left\n        for j in range(i+1, n):\n            if len(stacks[j]) > len(tallest) and abs(len(stacks[j]) - len(tallest)) >= 2:\n                for k in range(len(tallest)):\n                    stacks[j][k] = stacks[j][k+1]\n                stacks[j][-1] = tallest[k+1]\n\n    # check if the array can be sorted\n    if arr == sorted(arr):\n        return \"YES\"\n    else:\n        return \"NO\"\n\n\nprint(solution(\"3\\n1 2 3\"))\nprint(solution(\"3\\n3 1 2\"))"
    },
    {
        "number": 4051,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    stack = []\n    output = []\n\n    for num in a:\n        stack.append(num)\n        while stack and stack[-1] > stack[-2] and (len(stack) == 1 or stack[-1]!= stack[-2]):\n            output.append(stack.pop())\n\n    if len(stack)!= 0:\n        return \"NO\"\n\n    return \"YES\""
    },
    {
        "number": 4051,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    arr = list(map(int, stdin.split('\\n')[1].split()))\n    \n    stacks = []\n    for num in arr:\n        stack = [num]\n        for s in stacks:\n            if num - s[-1] == 1:\n                stack = s\n                break\n            elif num - s[-1] == 0:\n                return \"NO\"\n        stack.append(num)\n        stacks.append(stack)\n    \n    while stacks:\n        max_height = max(stack[-1] for stack in stacks)\n        stacks = [stack for stack in stacks if stack[-1]!= max_height]\n        if not stacks:\n            return \"NO\"\n        if len(stacks) == 1:\n            return \"YES\"\n        for i in range(len(stacks)-1):\n            if abs(stacks[i][-1] - stacks[i+1][-1]) >= 2:\n                stacks[i+1][-1] = max_height\n                stacks[i+1].append(max_height)\n                stacks[i].pop()\n                break\n    \n    return \"NO\""
    },
    {
        "number": 4051,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    ravioli = [[] for _ in range(n)]\n    for i in range(n):\n        ravioli[i].append(a[i])\n\n    for i in range(n):\n        for j in range(i+1, n):\n            if abs(ravioli[i][-1] - ravioli[j][-1]) > 1:\n                return \"NO\"\n            ravioli[i].append(ravioli[j].pop())\n\n    return \"YES\""
    },
    {
        "number": 4052,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    t = stdin.readline().strip()\n\n    if s == t:\n        print(\"0\")\n        return \"\"\n\n    moves = []\n    i = 0\n    while i < n - 1:\n        j = i + 1\n        while j < n and s[j] == s[i]:\n            j += 1\n        if j < n:\n            moves.append((i, j - 1))\n            i = j\n        else:\n            break\n\n    if not moves:\n        print(\"-1\")\n        return \"\"\n\n    k = len(moves)\n    for i, j in moves:\n        s = s[:i] + s[j] + s[i+1:j] + s[i] + s[j+1:]\n    if s!= t:\n        print(\"-1\")\n        return \"\"\n\n    print(k)\n    for i, j in moves:\n        print(i+1, j+1)\n\n    return \"\"\n"
    },
    {
        "number": 4052,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    t = stdin.readline().strip()\n\n    # Check if s and t are equal\n    if s == t:\n        return \"0\"\n\n    # Find all possible swap pairs in s\n    swaps = []\n    for i in range(n - 1):\n        swaps.append((i, i+1))\n\n    # Find the required swaps to transform s to t\n    moves = []\n    s_temp = s\n    for swap in swaps:\n        if s_temp[swap[0]] == t[swap[1]] and s_temp[swap[1]] == t[swap[0]]:\n            s_temp = swap_chars(s_temp, *swap)\n            moves.append(swap)\n\n    # Check if t was obtained using the required swaps\n    if s_temp == t:\n        # Output the number of swaps and the required swaps\n        return f\"{len(moves)}\\n\" + \"\\n\".join(map(str, [swap[0] for swap in moves] + [swap[1] for swap in moves]))\n\n    return \"-1\"\n\n\ndef"
    },
    {
        "number": 4052,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    t = stdin.readline().strip()\n    \n    if s == t:\n        return \"0\"\n    \n    moves = []\n    for i in range(n - 1):\n        if s[i]!= t[i]:\n            for j in range(i + 1, n):\n                if s[j] == t[i]:\n                    moves.append((i, j))\n                    s = s[:i] + s[j] + s[i+1:j] + s[i] + s[j+1:]\n                    break\n            else:\n                return \"-1\"\n    \n    if s == t:\n        return \"0\"\n    \n    k = len(moves)\n    return f\"{k}\\n{' '.join(' '.join(str(j) for j in i) for i in moves)}\""
    },
    {
        "number": 4052,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    s = lines[1]\n    t = lines[2]\n\n    if s == t:\n        return \"0\"\n\n    moves = []\n    for i in range(n-1):\n        if s[i]!= t[i]:\n            for j in range(i+1, n):\n                if s[j] == t[i] and s[i] == t[j]:\n                    moves.append((i, j))\n                    s = s[:i] + s[j] + s[i+1:j] + s[i] + s[j+1:]\n                    break\n\n    if s == t:\n        return \" \".join(map(str, moves))\n    else:\n        return \"-1\""
    },
    {
        "number": 4052,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, s, t = map(str, stdin.split())\n    n = int(n)\n    moves = 0\n    swaps = []\n    s = list(s)\n    t = list(t)\n    for i in range(n):\n        if s[i] == t[i]:\n            continue\n        for j in range(i + 1, n):\n            if s[j] == t[i]:\n                swaps.append((i, j))\n                s[i], s[j] = s[j], s[i]\n                s[i+1], s[j] = s[j], s[i+1]\n                moves += 1\n                break\n        if moves == 10**4:\n            break\n    if moves == 10**4:\n        print(\"-1\")\n    else:\n        print(moves)\n        if moves == 0:\n            print(0)\n        else:\n            for swap in swaps:\n                print(swap[0], swap[1])"
    },
    {
        "number": 4052,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, s, t = map(int, stdin.split())\n    if s == t:\n        return \"0\\n\"\n    moves = []\n    for i in range(n-1):\n        if s[i] == t[i+1] and s[i+1]!= t[i]:\n            moves.append(i)\n            s = s[:i] + t[i] + s[i+1:]\n    if s == t:\n        return \"1\\n{}\\n\".format(moves)\n    else:\n        return \"-1\""
    },
    {
        "number": 4052,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, s, t = map(int, stdin.strip().split())\n    if s == t:\n        return \"0\\n\" if n == 0 else \"-1\\n\"\n    s = list(s)\n    t = list(t)\n    moves = []\n    for i in range(n - 1):\n        if s[i]!= t[i] and s[i + 1] == t[i]:\n            s[i], s[i + 1] = s[i + 1], s[i]\n            moves.append(i)\n    for i in range(n - 1):\n        if s[i]!= t[i] and s[i + 1] == t[i]:\n            s[i], s[i + 1] = s[i + 1], s[i]\n            moves.append(i)\n    if s == t:\n        return str(len(moves)) + \"\\n\" + \" \".join(map(str, moves)) + \"\\n\" if moves else \"0\\n\"\n    else:\n        return \"-1\\n\""
    },
    {
        "number": 4052,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    s = stdin.split()[1]\n    t = stdin.split()[2]\n\n    if s == t:\n        print(0)\n        return\n\n    possible_moves = []\n\n    for i in range(n - 1):\n        possible_moves.append((i, i+1))\n\n    visited = set()\n    queue = [(s, tuple(possible_moves))]\n\n    while queue:\n        current_s, current_moves = queue.pop(0)\n        if current_s == t:\n            print(len(current_moves))\n            for move in current_moves:\n                print(move[0] + 1, move[1] + 1)\n            return\n        if current_s in visited:\n            continue\n        visited.add(current_s)\n        for move in current_moves:\n            new_s = current_s[:move[0]] + current_s[move[1]] + current_s[move[0]+1:move[1]] + current_s[move[0]] + current_s[move[1]+1:]\n            new_moves = []\n            for pair in current_moves:\n                if pair[0] == move[0] - 1:\n                    new_moves.append((move[0], pair[1]))\n                elif pair[1] == move[1] - 1:\n                    new_moves.append((pair[0], move[1]))\n                elif pair[0] == move[0]:\n                    new_moves.append((pair[0], pair[1] - 1))\n                else:\n                    new_moves.append((pair[0], pair[1] + 1))\n            new_moves.remove(move)\n            new_moves = tuple(new_moves)\n            if new_s not in visited:\n                queue.append((new_s, new_moves))\n\n    print(-1)\n    return\n"
    },
    {
        "number": 4052,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    t = stdin.readline().strip()\n    \n    # check if it is possible to obtain t using moves\n    for i in range(n):\n        if s[i]!= t[i]:\n            break\n    else:\n        return \"-1\"\n    \n    # find a sequence of moves to obtain t using at most 10^4 moves\n    moves = []\n    i = 0\n    j = 0\n    while i < n and j < n:\n        if s[i] == t[j]:\n            i += 1\n            j += 1\n        else:\n            moves.append(i)\n            i += 1\n            j -= 1\n    \n    # check if we need to apply any moves\n    if len(moves) == 0:\n        return \"0\"\n    \n    # print the number of moves and the moves themselves\n    print(len(moves))\n    for move in moves:\n        print(move+1, end=\" \")\n    print()\n"
    },
    {
        "number": 4052,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, s, t = map(int, stdin.split())\n    s = list(map(int, stdin.readline().strip().split()))\n    t = list(map(int, stdin.readline().strip().split()))\n    \n    def swap(i, j):\n        s[i], s[j] = s[j], s[i]\n    \n    def can_swap(i, j):\n        if i < 0 or i >= n or j < 0 or j >= n:\n            return False\n        return True\n    \n    def find_move(src, dst):\n        if src == dst:\n            return []\n        if src + 1 == dst:\n            return [(src, dst)]\n        for i in range(src + 1, dst):\n            if s[i] == s[i + 1]:\n                return [(src, i), (i, i + 1), (i + 1, dst)]\n        return None\n    \n    moves = []\n    while s!= t:\n        found = False\n        for i in range(n - 1):\n            if s[i]!= t[i]:\n                for j in range(i + 1, n):\n                    if s[j] == t[i]:\n                        if can_swap(i, j):\n                            swap(i, j)\n                            moves.append((i, j))\n                            found = True\n                            break\n                if found:\n                    break\n        if not found:\n            return \"-1\"\n        if s == t:\n            break\n        s = list(s)\n        for i in range(n - 1):\n            if s[i]!= t[i]:\n                for j in range(i + 1, n):\n                    if s[j] == t[i]:\n                        if can_swap(i, j):\n                            swap(i, j)\n                            moves.append((i, j))\n                            break\n                break\n    k = len(moves)\n    if k == 0:\n        return \"0\"\n    return f\"{k}\\n{' '.join(map(str, [s[i] for i, j in moves for k in range(j-i-1)]))}\""
    },
    {
        "number": 4053,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    prefixes = [s for s in stdin.split()[1::2]]\n    suffixes = [s for s in stdin.split()[2::2]]\n    s = stdin.split()[n+1]\n    # check if the given string is consistent with the prefixes and suffixes\n    if any(s.startswith(p) for p in prefixes) and any(s.endswith(p) for p in suffixes):\n        # generate the answer string\n        ans = ''\n        for i in range(n+1):\n            if s.startswith(prefixes[i]):\n                ans += 'P'\n            else:\n                ans += 'S'\n        for i in range(n+1):\n            if s.endswith(suffixes[i]):\n                ans += 'P'\n            else:\n                ans += 'S'\n        return ans\n    else:\n        return 'IMPOSSIBLE'\n\nprint(solution(input()))"
    },
    {
        "number": 4053,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    strings = stdin.split()[1:]\n    prefix_count = 0\n    suffix_count = 0\n    result = ''\n    for i in range(1, 2*n-1):\n        for j in range(len(strings)):\n            if i <= len(strings[j]):\n                if strings[j][:i] == strings[j]:\n                    result += 'P'\n                    prefix_count += 1\n                else:\n                    result += 'S'\n                    suffix_count += 1\n    if prefix_count!= suffix_count:\n        result = ''\n    return result\n\nstdin = input()\nprint(solution(stdin))"
    },
    {
        "number": 4053,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    input_list = stdin.readlines()\n    prefixes = [line.strip() for line in input_list if line.strip()!= input_list[0]]\n    suffixes = [line.strip() for line in input_list if line.strip()!= input_list[1]]\n    result = \"\"\n    for i in range(len(input_list)):\n        if input_list[i] in prefixes:\n            result += \"P\"\n        else:\n            result += \"S\"\n    return result"
    },
    {
        "number": 4053,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    strings = stdin.split()[1:]\n    \n    prefixes = [s for s in strings if s[:-1] not in strings]\n    suffixes = [s for s in strings if s[1:] not in strings]\n    \n    answer = ''\n    for s in strings:\n        if s in prefixes:\n            answer += 'P'\n        elif s in suffixes:\n            answer += 'S'\n        else:\n            return None\n            \n    return answer\n    \n"
    },
    {
        "number": 4053,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    inputs = [stdin.readline().strip() for _ in range(2*n-2)]\n    output = ['P'] * (2*n-2)\n    for i, input_str in enumerate(inputs):\n        if all(input_str.startswith(s) for s in inputs[i+1:]):\n            output[i] = 'S'\n    return ''.join(output)\n\n\nprint(solution(\"5\\n\"\n               \"ba\\n\"\n               \"a\\n\"\n               \"abab\\n\"\n               \"a\\n\"\n               \"aba\\n\"\n               \"baba\\n\"\n               \"ab\\n\"\n               \"aba\\n\"))\n\nprint(solution(\"3\\n\"\n               \"a\\n\"\n               \"aa\\n\"\n               \"aa\\n\"\n               \"a\\n\"))\n\nprint(solution(\"2\\n\"\n               \"a\\n\"\n               \"c\\n\"))"
    },
    {
        "number": 4053,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    strings = stdin.split()[1:]\n    result = \"\"\n    for i in range(2*n - 2):\n        prefix = \"\"\n        suffix = \"\"\n        for j in range(i, i + n - 1):\n            prefix += strings[j]\n        for j in range(i + n, len(strings)):\n            suffix += strings[j]\n        if prefix == strings[i]:\n            result += \"P\"\n        else:\n            result += \"S\"\n    return result\n\nstdin = \"\"\"5\nba\na\nabab\na\naba\nbaba\nab\naba\"\"\"\n\nprint(solution(stdin)) # PSPSPSPS"
    },
    {
        "number": 4053,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    input_strings = set()\n    for i in range(2 * n - 2):\n        input_strings.add(stdin.readline().strip())\n\n    # Check if any input string is a prefix or suffix of s\n    s = ''.join(sorted(input_strings.pop()))  # Sort and join input strings to get a sorted string s\n    prefix_count = 0\n    suffix_count = 0\n    for i in range(n):\n        if s[:i+1] in input_strings:\n            prefix_count += 1\n        if s[i+1:] in input_strings:\n            suffix_count += 1\n    if prefix_count == 0:\n        return 'P' * (2*n-2)\n    elif suffix_count == 0:\n        return 'S' * (2*n-2)\n    else:\n        return 'P' + 'S' * (2*n-4) + 'P'"
    },
    {
        "number": 4053,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    n = int(lines[0])\n    strings = lines[1:]\n    prefixes = set()\n    suffixes = set()\n    for string in strings:\n        if string in prefixes:\n            suffixes.add(string)\n        else:\n            prefixes.add(string)\n    result = ''\n    for string in strings:\n        if string in prefixes:\n            result += 'P'\n        else:\n            result += 'S'\n    return result\n\ndef"
    },
    {
        "number": 4053,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    input_strings = set()\n    for i in range(2*n-2):\n        input_strings.add(stdin.split()[i])\n    \n    prefixes = set()\n    suffixes = set()\n    for s in input_strings:\n        if s in prefixes or s in suffixes:\n            continue\n        prefixes.add(s)\n        suffixes.add(s[::-1])\n    \n    guess = \"\"\n    for s in input_strings:\n        if s in prefixes:\n            guess += \"P\"\n        elif s in suffixes:\n            guess += \"S\"\n        else:\n            return \"Error: Can't guess which strings are prefixes and which are suffixes\"\n    \n    return guess"
    },
    {
        "number": 4053,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    strings = stdin.readline().strip().split()\n    prefix_set = set()\n    suffix_set = set()\n    for s in strings:\n        if s not in prefix_set and s[::-1] not in suffix_set:\n            prefix_set.add(s)\n            suffix_set.add(s[::-1])\n    result = \"\"\n    for s in strings:\n        if s in prefix_set:\n            result += \"P\"\n        else:\n            result += \"S\"\n    return result\n\nstdin = \"\"\"\n5\nba\na\nabab\na\naba\nbaba\nab\naba\n\"\"\"\nprint(solution(stdin)) # Output: SPPSPSPS\n\nstdin = \"\"\"\n3\na\naa\naa\na\n\"\"\"\nprint(solution(stdin)) # Output: PPSS\n\nstdin = \"\"\"\n2\na\nc\n\"\"\"\nprint(solution(stdin)) # Output: PS"
    },
    {
        "number": 4054,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Split input into list of integers\n    arr = stdin.split()\n    arr = [int(x) for x in arr]\n\n    # Count the number of even numbers in the array\n    count = 0\n    for num in arr:\n        if num % 2 == 0:\n            count += 1\n\n    # Return the count\n    return str(count)"
    },
    {
        "number": 4054,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # convert input to list of integers\n    arr = list(map(int, stdin.strip().split()))\n\n    # define the rules\n    rules = {1: 'I Aqua Fortis',\n             2: 'I Aqua Regia',\n             3: 'II Amalgama',\n             4: 'VII Minium',\n             5: 'IV Vitriol'}\n\n    # count the occurrences of each rule in the input\n    counts = {}\n    for a in arr:\n        if a in counts:\n            counts[a] += 1\n        else:\n            counts[a] = 1\n\n    # find the rule with the highest occurrence\n    max_count = 0\n    for rule, count in counts.items():\n        if count > max_count:\n            max_count = count\n            chosen_rule = rule\n\n    # print the chosen rule\n    return rules[chosen_rule]"
    },
    {
        "number": 4054,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    num_list = stdin.split()\n    num_list = [int(num) for num in num_list]\n    if sum(num_list) > 100:\n        return \"0\"\n    elif sum(num_list) == 100:\n        return \"1\"\n    else:\n        return \"2\"\n\ndef"
    },
    {
        "number": 4054,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.strip().split()))\n    return str(sum(a))\n\ndef"
    },
    {
        "number": 4054,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    a = list(map(int, stdin.split()))\n\n    # define variables\n    result = 0\n\n    # loop through array and check for multiples of 15\n    for i in range(len(a)):\n        if a[i] % 15 == 0:\n            result += 1\n\n    # print result\n    print(result)\n\n    return \"\""
    },
    {
        "number": 4054,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a = [int(x) for x in stdin.split()]\n    return str(max(a))"
    },
    {
        "number": 4054,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    max_num = max(a)\n    count = 0\n    for num in a:\n        if num % 2 == 1:\n            count += 1\n    if count == 0:\n        return str(max_num)\n    else:\n        return str(max_num + 1)"
    },
    {
        "number": 4054,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    nums = [int(x) for x in stdin.split()]\n    count = 0\n    for i in range(1, len(nums)):\n        if nums[i] % nums[i-1] == 0:\n            count += 1\n    return count"
    },
    {
        "number": 4054,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    nums = list(map(int, stdin.strip().split()))\n    nums.sort()\n    count = 0\n    for i in range(len(nums)-2):\n        if nums[i] + nums[i+1] > nums[i+2]:\n            count += 1\n    return count\n\nprint(solution('2 4 6 8 10')) # Output: 1\nprint(solution('1 2 3 4 5')) # Output: 0\nprint(solution('1 2 4 3 6')) # Output: 1"
    },
    {
        "number": 4054,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # split input into list of integers\n    nums = list(map(int, stdin.split()))\n    # compute sum of even numbers\n    even_sum = sum(num for num in nums if num % 2 == 0)\n    # return sum\n    return str(even_sum)\n"
    },
    {
        "number": 4055,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    ans = 0\n    for i in range(1, n-1):\n        if a[i-1] == a[i+1] == 0 and a[i] == 1:\n            ans += 1\n    return str(ans)\n\nstdin = input().strip()\nprint(solution(stdin))"
    },
    {
        "number": 4055,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    count = 0\n    for i in range(1, n - 1):\n        if a[i - 1] == a[i] == a[i + 1] == 0:\n            count += 1\n    return count\n\nstdin = input()\nprint(solution(stdin))"
    },
    {
        "number": 4055,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    disturbed = 0\n    for i in range(1, n - 1):\n        if a[i - 1] == a[i + 1] == 1 and a[i] == 0:\n            disturbed += 1\n    if disturbed % 2 == 1:\n        return str(0)\n    k = disturbed // 2\n    if k == 0:\n        return str(0)\n    for i in range(k + 1, n):\n        if a[i - k - 1] == a[i - 1] == 1 and a[i] == 0:\n            return str(0)\n    return str(k)"
    },
    {
        "number": 4055,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n    k = 0\n    for i in range(1, n - 1):\n        if a[i - 1] == a[i + 1] == 1 and a[i] == 0:\n            k += 1\n    return str(k)\n\nstdin = \"10\\n1 1 0 1 1 0 1 0 1 0\"\nprint(solution(stdin)) # Output: 2\n\nstdin = \"5\\n1 1 0 0 0\"\nprint(solution(stdin)) # Output: 0\n\nstdin = \"4\\n1 1 1 1\"\nprint(solution(stdin)) # Output: 0"
    },
    {
        "number": 4055,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    k = 0\n    for i in range(1, n - 1):\n        if a[i-1] == a[i+1] == 1 and a[i] == 0:\n            k += 1\n    if k > 0:\n        return str(k)\n    else:\n        return \"0\""
    },
    {
        "number": 4055,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    k = 0\n    for i in range(1, n - 1):\n        if a[i-1] == a[i+1] == 1 and a[i] == 0:\n            k += 1\n\n    return str(k)"
    },
    {
        "number": 4055,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n\n    k = 0\n    for i in range(1, n - 1):\n        if a[i - 1] == a[i + 1] == 1 and a[i] == 0:\n            k += 1\n\n    if k == 0:\n        return '0'\n    else:\n        return str(k)\n"
    },
    {
        "number": 4055,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    \n    count = 0\n    for i in range(1, n - 1):\n        if a[i] == 0 and a[i - 1] == 1 and a[i + 1] == 1:\n            count += 1\n            \n    return count\n"
    },
    {
        "number": 4055,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    disturbed = 0\n    for i in range(1, n - 1):\n        if a[i] == 0 and a[i-1] == 1 and a[i+1] == 1:\n            disturbed += 1\n\n    return disturbed"
    },
    {
        "number": 4055,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = [int(x) for x in stdin.split()[1:]]\n    for i in range(1, n - 1):\n        if a[i - 1] == a[i + 1] == 1 and a[i] == 0:\n            return '0'\n    return '1'"
    },
    {
        "number": 4056,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    common_divisor = set(a)\n    return len(common_divisor)"
    },
    {
        "number": 4056,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = [int(x) for x in stdin.readline().strip().split()]\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i] % a[j] == 0:\n                count += 1\n    return count\n\nwith open('input.txt', 'r') as f:\n    stdin = f.read()\n\nprint(solution(stdin))"
    },
    {
        "number": 4056,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    count = 0\n    for i in a:\n        if all(i % j == 0 for j in a):\n            count += 1\n    return count"
    },
    {
        "number": 4056,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # input\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n\n    # counting the number of common divisors for each element in the array\n    ans = 0\n    for i in range(n):\n        cnt = 0\n        for j in range(i+1, n):\n            if a[i] % a[j] == 0:\n                cnt += 1\n        ans += cnt\n\n    # output\n    return str(ans)"
    },
    {
        "number": 4056,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i] % a[j] == 0:\n                count += 1\n    return str(count)"
    },
    {
        "number": 4056,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n\n    # create a set of all the positive integers that divide each element of the array\n    common_divisors = set()\n    for x in a:\n        for i in range(2, int(x**0.5)+1):\n            if x%i == 0:\n                common_divisors.add(i)\n                if i!= x//i:\n                    common_divisors.add(x//i)\n\n    return len(common_divisors)"
    },
    {
        "number": 4056,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Parse the input\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n\n    # Count the number of common divisors\n    count = 0\n    for x in a:\n        if x > 1:\n            for i in range(2, int(x ** 0.5) + 1):\n                if x % i == 0:\n                    count += 1\n                    break\n            else:\n                count += 1\n        else:\n            count += 1\n\n    return count"
    },
    {
        "number": 4056,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    res = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i] == 1 or a[j] == 1:\n                res += 1\n            elif a[i] % a[j] == 0 and a[j] % a[i] == 0:\n                res += 1\n    return str(res)"
    },
    {
        "number": 4056,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    divisors = []\n    for num in a:\n        for i in range(1, num+1):\n            if num%i == 0:\n                divisors.append(i)\n    unique_divisors = set(divisors)\n    return len(unique_divisors)\n\ndef"
    },
    {
        "number": 4056,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n\n    from math import gcd\n    result = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            result = gcd(result, gcd(a[i], a[j]))\n    return str(result)\n\nprint(solution(\"5\\n1 2 3 4 5\"))\nprint(solution(\"6\\n6 90 12 18 30 18\"))"
    },
    {
        "number": 4057,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n\n    # Sort the coins in decreasing order\n    a.sort(reverse=True)\n\n    # Count the number of coins in each pocket\n    coins_count = [0] * n\n    pocket_count = 1\n    for i in range(n):\n        if coins_count[i] == 0 or a[i]!= a[coins_count[i]-1]:\n            coins_count[i] = pocket_count\n            pocket_count += 1\n        else:\n            coins_count[i] = coins_count[coins_count[i]-1]\n\n    return pocket_count - 1"
    },
    {
        "number": 4057,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    used_pockets = 1\n    i = 1\n    while i < n:\n        if a[i]!= a[i-1]:\n            used_pockets += 1\n        i += 1\n    return used_pockets\n\nstdin = \"\"\"\n6\n1 2 4 3 3 2\n\"\"\"\n\nprint(solution(stdin)) # Output: 2\n\nstdin = \"\"\"\n1\n100\n\"\"\"\n\nprint(solution(stdin)) # Output: 1"
    },
    {
        "number": 4057,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n\n    # sort the coins in ascending order\n    a.sort()\n\n    # initialize variables\n    pockets = 1\n    coin_index = 0\n\n    # distribute coins into pockets\n    while coin_index < n:\n        # check if the next coin has the same value as the current coin\n        if coin_index > 0 and a[coin_index] == a[coin_index - 1]:\n            # if it has, increment the number of pockets\n            pockets += 1\n        else:\n            # if it doesn't, distribute the current coin into the current pocket\n            coin_index += 1\n\n    return pockets"
    },
    {
        "number": 4057,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n\n    dp = [0] * (n + 1)\n\n    for i in range(1, n + 1):\n        dp[i] = dp[i - 1] + 1\n\n        for j in range(i):\n            if a[i - 1]!= a[j]:\n                dp[i] = min(dp[i], dp[j])\n\n    return dp[n]"
    },
    {
        "number": 4057,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    coins = list(map(int, stdin.readline().split()))\n    \n    # Sort the coins in descending order\n    coins.sort(reverse=True)\n    \n    # Initialize the number of pockets to 1\n    pockets = 1\n    \n    # Iterate over the coins\n    for i in range(n):\n        # If the current coin is not the first coin or the last coin in the list\n        if i!= 0 and i!= n - 1:\n            # If the current coin can be put into the current pocket\n            if coins[i] > coins[i - 1] and coins[i] > coins[i + 1]:\n                # If the current coin is not the same as the previous coin, increment the pocket count\n                if coins[i]!= coins[i - 1]:\n                    pockets += 1\n        # If the current coin is the first coin or the last coin in the list\n        else:\n            # If the current coin can be put into the current pocket\n            if coins[i] > coins[i - 1]:\n                pockets += 1\n    \n    return pockets"
    },
    {
        "number": 4057,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    a.sort()\n    count = 1\n    for i in range(1, n):\n        if a[i]!= a[i-1]:\n            count += 1\n    return count\n\nstdin = \"\"\"6\n1 2 4 3 3 2\"\"\"\n\nstdout = solution(stdin)\nprint(stdout)"
    },
    {
        "number": 4057,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    coins = list(map(int, stdin.split()[1:]))\n    pockets = [[] for _ in range(n+1)]\n    for coin in coins:\n        for i in range(n+1):\n            if coin <= i:\n                if not pockets[i] or coin!= pockets[i][-1]:\n                    pockets[i].append(coin)\n                    break\n    count = 0\n    for pocket in pockets:\n        if pocket:\n            count += 1\n    return count\n\ndef"
    },
    {
        "number": 4057,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n\n    # create a dictionary to store the count of each coin\n    count = {}\n    for i in a:\n        if i in count:\n            count[i] += 1\n        else:\n            count[i] = 1\n\n    # create a set to store the coin values that have already been used\n    used = set()\n\n    # initialize the count of used pockets to 0\n    used_count = 0\n\n    # iterate through the count dictionary\n    for k, v in count.items():\n        # if the value has not been used, increment the count of used pockets\n        if k not in used:\n            used_count += 1\n            # add the value to the used set\n            used.add(k)\n        # if the value has already been used, subtract the count of this value from the number of unused pockets\n        else:\n            used_count += v\n\n    # print the minimum number of used pockets\n    print(used_count)"
    },
    {
        "number": 4057,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    coins = sorted(map(int, stdin.split()[1:]))\n\n    # Initialize two pointers, one at the beginning and one at the end\n    i = 0\n    j = len(coins) - 1\n\n    # Initialize the number of pockets to 1\n    num_pockets = 1\n\n    # Loop until two pointers meet\n    while i < j:\n        # If the current coins are equal, move the second pointer one step to the right\n        if coins[i] == coins[j]:\n            j -= 1\n        else:\n            # If the current coins are different, move both pointers one step to the right\n            i += 1\n            j -= 1\n\n            # If the current number of coins is greater than half of the total number of coins,\n            # add a new pocket and reset the pointer to the middle\n            if (j - i + 1) > (n // 2):\n                num_pockets += 1\n                i = (i + j + 1) // 2\n\n    return num_pockets"
    },
    {
        "number": 4057,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n\n    pockets = [[] for _ in range(max(a) + 1)]\n    for i in range(n):\n        for j in range(a[i], 0, -1):\n            if not pockets[j]:\n                pockets[j].append(a[i])\n                break\n        else:\n            pockets[-1].append(a[i])\n\n    return len(pockets[-1])\n"
    },
    {
        "number": 4058,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    heaters = []\n    for i in range(n):\n        if a[i] == 1:\n            heaters.append(i)\n\n    if not heaters:\n        return \"-1\"\n\n    heaters = sorted(heaters)\n\n    prev_heater = 0\n    for i in range(1, len(heaters)):\n        if heaters[i] - heaters[prev_heater] <= 2*r:\n            prev_heater = i\n\n    if prev_heater == len(heaters) - 1:\n        return str(len(heaters))\n    else:\n        return \"-1\""
    },
    {
        "number": 4058,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    a = list(map(int, stdin.readline().split()))\n    heaters = []\n    for i in range(n):\n        if a[i] == 1:\n            heaters.append(i)\n    heaters.sort()\n    i, j = 0, n-1\n    cnt = 0\n    while i <= j:\n        if heaters[i] <= j - r + 1:\n            i += 1\n        elif heaters[j] >= i + r - 1:\n            j -= 1\n        else:\n            cnt += 1\n            i += 1\n            j -= 1\n    if cnt < n:\n        return -1\n    else:\n        return cnt"
    },
    {
        "number": 4058,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    house = list(map(int, stdin.split()))\n    heaters = []\n    for i in range(n):\n        if house[i] == 1:\n            heaters.append(i)\n    \n    if len(heaters) < n // 2:\n        return -1\n    \n    heaters = sorted(heaters)\n    ans = 0\n    curr_heater = 0\n    for i in range(n):\n        if i <= heaters[curr_heater] + r:\n            if i <= heaters[curr_heater] - r:\n                curr_heater += 1\n                if curr_heater >= len(heaters):\n                    return -1\n                ans += 1\n        else:\n            if i >= heaters[curr_heater] + 2*r:\n                curr_heater += 1\n                if curr_heater >= len(heaters):\n                    return -1\n                ans += 1\n    \n    return ans"
    },
    {
        "number": 4058,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    house = list(map(int, stdin.split()))\n    heaters = [i for i in range(n) if house[i] == 1]\n    if len(heaters) < 2 * r - 1:\n        return -1\n    heaters.sort()\n    i = 0\n    ans = 0\n    while i < len(heaters):\n        j = i + 1\n        while j < len(heaters) and heaters[j] - heaters[i] <= 2 * r:\n            j += 1\n        ans += (j - i) // (2 * r)\n        i = j\n    return ans"
    },
    {
        "number": 4058,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    count = 0\n    for i in range(n):\n        if a[i]:\n            continue\n        count += 1\n        for j in range(max(0, i - r + 1), min(n, i + r)):\n            if a[j]:\n                continue\n            count += 1\n            a[j] = 1\n\n    return count if count <= r else -1"
    },
    {
        "number": 4058,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:]))\n    heaters = [i for i in range(n) if a[i] == 1]\n    if len(heaters) == 0:\n        return -1\n    heaters.sort()\n    ans = 0\n    i = 0\n    while i < len(heaters):\n        j = i\n        while j < len(heaters) and heaters[j] - heaters[i] <= r:\n            j += 1\n        ans += j - i\n        i = j\n    return ans\n"
    },
    {
        "number": 4058,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    heaters = []\n    for i in range(n):\n        if a[i] == 1:\n            heaters.append(i)\n\n    if not heaters:\n        return -1\n\n    heaters.sort()\n    ans = 1\n    i = 1\n    while i < n:\n        if heaters[i] - heaters[i-1] < r:\n            ans += 1\n            i += 1\n        else:\n            i += 2\n\n    return ans"
    },
    {
        "number": 4058,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    heaters = [0] * n\n    for i in range(n):\n        if a[i]:\n            for j in range(max(0, i - r + 1), min(n, i + r)):\n                heaters[j] = 1\n    cnt = heaters.count(1)\n    if cnt == 0:\n        return -1\n    else:\n        return cnt\n\nstdin = \"6 2\\n0 1 1 0 0 1\"\nprint(solution(stdin))  # Output: 3\n\nstdin = \"5 3\\n1 0 0 0 1\"\nprint(solution(stdin))  # Output: 2\n\nstdin = \"5 10\\n0 0 0 0 0\"\nprint(solution(stdin))  # Output: -1\n\nstdin = \"10 3\\n0 0 1 1 0 1 0 0 0 1\"\nprint(solution(stdin))  # Output: 3"
    },
    {
        "number": 4058,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:]))\n\n    heaters = [i for i, x in enumerate(a) if x == 1]\n\n    if not heaters:\n        return '-1'\n\n    heaters = sorted(heaters)\n\n    ans = 1\n    end = heaters[0] + r\n    for i in range(1, len(heaters)):\n        if heaters[i] > end:\n            ans += 1\n            end = heaters[i] + r\n\n    if ans >= len(heaters):\n        return str(ans)\n\n    return '-1'\n\nstdin = input()\nprint(solution(stdin))"
    },
    {
        "number": 4058,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.strip().split())\n    house = list(map(int, stdin.strip().split()))\n    heaters = []\n    for i in range(n):\n        if house[i]:\n            heaters.append(i)\n\n    if len(heaters) < (n + r - 1) // r:\n        return -1\n\n    heaters = sorted(heaters)\n    min_heaters = 0\n    for i in range(len(heaters)):\n        min_heaters = max(min_heaters, (heaters[i] + r - 1) // r - (heaters[i] - r + 1) // r + 1)\n\n    return min_heaters\n"
    },
    {
        "number": 4059,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    for a in range(1, n+1):\n        for b in range(1, n+1):\n            for c in range(1, n+1):\n                if a*b + c == n:\n                    count += 1\n    return str(count)"
    },
    {
        "number": 4059,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    count = 0\n    for i in range(1, n//2 + 1):\n        for j in range(i, n//2 + 1):\n            if i*j + (n-i-j) == n:\n                count += 1\n    return str(count)"
    },
    {
        "number": 4059,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    count = 0\n    for i in range(1, N//2+1):\n        for j in range(1, N//2+1):\n            if i*j + (N-i*j) == N:\n                count += 1\n    return str(count)"
    },
    {
        "number": 4059,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N = int(stdin.readline().strip())\n\n    # Initialize count variable\n    count = 0\n\n    # Loop through all possible combinations of A, B, and C\n    for A in range(1, N + 1):\n        for B in range(1, N + 1):\n            for C in range(1, N + 1):\n                # Check if A * B + C equals N\n                if A * B + C == N:\n                    # Increment count\n                    count += 1\n\n    # Print count\n    print(count)\n\n    # Return solution\n    return \"\""
    },
    {
        "number": 4059,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    for i in range(1, n//2+1):\n        for j in range(1, n//2+1):\n            if i*j + (n-i*j) == n:\n                count += 1\n    return str(count)"
    },
    {
        "number": 4059,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    count = 0\n    for a in range(1, n+1):\n        for b in range(a, n+1):\n            c = n - a*b\n            if a*b + c == n:\n                count += 1\n    return str(count)"
    },
    {
        "number": 4059,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Read input from stdin\n    N = int(stdin.strip())\n    \n    # Initialize variables\n    count = 0\n    a = 1\n    \n    # Loop through all values of A from 1 to N\n    while a <= N:\n        # Calculate the maximum value of B that can be used with A\n        b_max = (N - a) // a\n        b = 1\n        \n        # Loop through all values of B from 1 to b_max\n        while b <= b_max:\n            # Calculate the value of C\n            c = N - a*b\n            \n            # Check if C is a positive integer\n            if c > 0 and c.is_integer():\n                # Increment count\n                count += 1\n            \n            # Increment B\n            b += 1\n        \n        # Increment A\n        a += 1\n    \n    # Return the count of tuples\n    return str(count)"
    },
    {
        "number": 4059,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n\n    count = 0\n    for A in range(1, N + 1):\n        for B in range(1, N + 1):\n            C = N - A * B\n            if C > 0:\n                count += 1\n\n    return str(count)"
    },
    {
        "number": 4059,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    count = 0\n    for a in range(1, n//2 + 1):\n        b = n - a\n        if a*b == n and is_prime(a) and is_prime(b):\n            count += 1\n    return str(count)\n\ndef"
    },
    {
        "number": 4059,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    \n    for a in range(1, n//2+1):\n        for b in range(a+1, n//2+1):\n            c = n - a*b\n            if c > 0 and c < n and c > b:\n                count += 1\n    \n    return str(count)\n\nprint(solution(input()))"
    },
    {
        "number": 4060,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    s = stdin.split()[1]\n    count = 0\n    for i in range(n):\n        if s[i] == ')':\n            if i == 0 or s[i-1] == '(':\n                count += 1\n            if i < n-1 and s[i+1] == '(':\n                count += 1\n        else:\n            if i == 0 or s[i-1] == ')':\n                count += 1\n            if i < n-1 and s[i+1] == ')':\n                count += 1\n    if s[-1] == ')':\n        count -= 1\n    return count"
    },
    {
        "number": 4060,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n\n    count = 0\n    for i in range(n):\n        if s[i] == ')':\n            s = s[:i] + '(' + s[i+1:]\n            count += 1\n        elif s[i] == '(':\n            s = s[:i] + ')' + s[i+1:]\n            count += 1\n\n    if is_valid(s):\n        return str(count)\n    else:\n        return '0'\n\ndef"
    },
    {
        "number": 4060,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    regular = True\n    for i in range(n):\n        if s[i] == ')' and (i == n-1 or s[i+1] == ')'):\n            continue\n        elif s[i] == '(':\n            s = s[:i] + '+' + s[i+1:]\n            regular = False\n        else:\n            s = s[:i] + '*' + s[i+1:]\n    return '0' if not regular else str(len(s.split('+')))"
    },
    {
        "number": 4060,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    s = stdin.split('\\n')[1]\n\n    count = 0\n    for i in range(n):\n        if s[i] == ')':\n            s = s[:i] + '(' + s[i+1:]\n            count += 1\n\n    return count if is_regular(s) else 0\n\ndef"
    },
    {
        "number": 4060,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n\n    count = 0\n    for i in range(n):\n        if s[i] == ')':\n            s = s[:i] + '(' + s[i+1:]\n            count += 1\n        elif s[i] == '(':\n            s = s[:i] + ')' + s[i+1:]\n            count += 1\n\n    if is_regular(s):\n        return count\n    else:\n        return 0\n\ndef"
    },
    {
        "number": 4060,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    s = stdin.split('\\n')[1]\n\n    count = 0\n    for i in range(n):\n        if s[i]!= ')' and s[i+1]!= '(':\n            count += 1\n\n    return count"
    },
    {
        "number": 4060,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    s = stdin.split()[1]\n    count = 0\n    for i in range(n):\n        if i+1 < n and s[i]!= s[i+1]:\n            count += 1\n    if s[0]!= ')':\n        count += 1\n    if s[-1]!= '(':\n        count += 1\n    return count\n\nwith open('input.txt') as file:\n    stdin = file.read()\n\nwith open('output.txt', 'w') as file:\n    file.write(str(solution(stdin)))"
    },
    {
        "number": 4060,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    regular = 0\n    for i in range(n):\n        if s[i] == ')':\n            regular += 1\n        elif s[i] == '(':\n            regular -= 1\n    return regular if regular < 0 else 0"
    },
    {
        "number": 4060,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    s = stdin.splitlines()[1]\n    count = 0\n    for i in range(n):\n        if s[i] == ')' and (i == 0 or s[i-1] == '('):\n            count += 1\n        elif s[i] == '(' and (i == 0 or s[i-1] == ')'):\n            count += 1\n    return count"
    },
    {
        "number": 4060,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    s = stdin.split('\\n')[1]\n    count = 0\n    for i in range(n):\n        if s[i] == ')':\n            s = s[:i] + '(' + s[i+1:]\n            count += 1\n        elif s[i] == '(':\n            s = s[:i] + ')' + s[i+1:]\n            count += 1\n    if is_regular(s):\n        return str(count)\n    else:\n        return '0'\n\ndef"
    },
    {
        "number": 4061,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split('\\n')[0]\n    t = stdin.split('\\n')[1]\n    l, r = 0, len(s)-1\n    while l < r:\n        mid = (l+r) // 2\n        if s[mid:mid+len(t)] == t:\n            l = mid\n            break\n        elif s[mid:mid+len(t)] < t:\n            l = mid + 1\n        else:\n            r = mid - 1\n    return len(s) - l - len(t)"
    },
    {
        "number": 4061,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()[0]\n    t = stdin.split()[1]\n    n = len(s)\n    m = len(t)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if s[i - 1] == t[j - 1]:\n                dp[j][i] = dp[j - 1][i - 1] + 1\n            else:\n                dp[j][i] = max(dp[j - 1][i], dp[j][i - 1])\n    return dp[m][n]"
    },
    {
        "number": 4061,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.strip().split('\\n')\n    n = len(s)\n    m = len(t)\n    ans = 0\n    i = 0\n    j = 0\n    while i < n and j < m:\n        if s[i] == t[j]:\n            j += 1\n            ans = max(ans, j)\n        i += 1\n    return ans"
    },
    {
        "number": 4061,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    s = stdin.split('\\n')[0]\n    t = stdin.split('\\n')[1]\n    # Initialize variables\n    max_len = len(s)\n    # Iterate through s and check if substrings of length i can be removed to obtain t\n    for i in range(1, len(s) + 1):\n        for j in range(len(s) - i + 1):\n            # Check if substring s[j:j+i] can be removed\n            if s[j:j+i] == t:\n                max_len = i\n    # Print result\n    print(max_len)"
    },
    {
        "number": 4061,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.strip().split('\\n')\n    n, m = len(s), len(t)\n    dp = [[0] * (n+1) for _ in range(m+1)]\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            if s[j-1] == t[i-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n    ans = float('-inf')\n    for i in range(1, m+1):\n        for j in range(i, n+1):\n            if dp[i][j] == m:\n                ans = max(ans, j-i)\n    return ans"
    },
    {
        "number": 4061,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split('\\n')[0]\n    t = stdin.split('\\n')[1]\n    n = len(s)\n    m = len(t)\n    dp = [[0] * (n+1) for _ in range(m+1)]\n    for i in range(n+1):\n        dp[0][i] = 0\n    for j in range(m+1):\n        dp[j][0] = 0\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            if s[i-1] == t[j-1]:\n                dp[j][i] = dp[j-1][i-1] + 1\n            else:\n                dp[j][i] = max(dp[j-1][i], dp[j][i-1])\n    return dp[m][n]"
    },
    {
        "number": 4061,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    s = stdin.split('\\n')[0]\n    t = stdin.split('\\n')[1]\n\n    # initialize variables\n    n = len(s)\n    m = len(t)\n    dp = [[False for j in range(n + 1)] for i in range(m + 1)]\n\n    # initialize dp\n    for i in range(m + 1):\n        dp[i][0] = True\n\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if s[j - 1] == t[i - 1]:\n                dp[i][j] = dp[i][j - 1]\n            else:\n                dp[i][j] = dp[i - 1][j]\n\n    # find maximum substring length\n    max_len = 0\n    for i in range(1, m + 1):\n        if dp[i][n]:\n            max_len = i\n\n    return max_len"
    },
    {
        "number": 4061,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # input\n    s = stdin.split()[0]\n    t = stdin.split()[1]\n\n    # initialize variables\n    n = len(s)\n    m = len(t)\n    dp = [[False for _ in range(n+1)] for _ in range(m+1)]\n\n    # base case\n    for i in range(n+1):\n        dp[0][i] = True\n\n    # fill dp table\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            if s[j-1] == t[i-1]:\n                dp[i][j] = dp[i][j-1]\n            else:\n                dp[i][j] = dp[i][j-1] or dp[i-1][j-1]\n\n    # find maximum length\n    max_length = 0\n    for i in range(1, n+1):\n        if dp[m][i]:\n            max_length = i\n            break\n\n    # print maximum length\n    print(max_length)\n\n    # return empty string\n    return \"\""
    },
    {
        "number": 4061,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    s, t = stdin.strip().split()\n    \n    # Find the maximum length of substring that can be removed\n    # to keep t as a subsequence of s\n    n = len(s)\n    m = len(t)\n    ans = 0\n    for i in range(n - m + 1):\n        j = 0\n        while j < m and s[i + j] == t[j]:\n            j += 1\n        if j == m:\n            ans = max(ans, m - 1)\n        else:\n            ans = max(ans, j)\n    return ans"
    },
    {
        "number": 4061,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.strip().split('\\n')\n    \n    if s == t:\n        return 0\n    \n    max_len = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            if s[i:j] == t:\n                max_len = max(max_len, j-i)\n    \n    return max_len"
    },
    {
        "number": 4062,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    if a > b or c > d:\n        return \"Invalid input\"\n    else:\n        return str(max((b - a + 1) * (d - c + 1), (d - c + 1) * (b - a + 1)))\n\nprint(solution(input()))"
    },
    {
        "number": 4062,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.strip().split())\n    max_value = -10**9\n    for x in range(a, b+1):\n        for y in range(c, d+1):\n            max_value = max(max_value, x*y)\n    return str(max_value)"
    },
    {
        "number": 4062,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # read input from stdin\n    a, b, c, d = map(int, stdin.strip().split())\n\n    # find the maximum value of x * y\n    result = 0\n    for x in range(a, b+1):\n        for y in range(c, d+1):\n            if x * y > result:\n                result = x * y\n\n    # print the result\n    return str(result)"
    },
    {
        "number": 4062,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a,b,c,d = map(int, stdin.split())\n    ans = max(a*c, a*d, b*c, b*d)\n    return str(ans)"
    },
    {
        "number": 4062,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    max_value = -1\n    for i in range(a, b+1):\n        for j in range(c, d+1):\n            product = i * j\n            if product > max_value:\n                max_value = product\n    return str(max_value)"
    },
    {
        "number": 4062,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.strip().split())\n    max_value = 0\n    for i in range(a, b+1):\n        for j in range(c, d+1):\n            if i*j > max_value:\n                max_value = i*j\n    return str(max_value)"
    },
    {
        "number": 4062,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    return max(a * c, a * d, b * c, b * d)"
    },
    {
        "number": 4062,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    return str(max(a*c, a*d, b*c, b*d))"
    },
    {
        "number": 4062,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.strip().split())\n    if a > b or c > d:\n        return \"Invalid input\"\n    if a == c and b == d:\n        return 0\n    if a == c:\n        return b\n    if b == d:\n        return a\n    return a * d if (b - a) * (d - c) > (d - c) * (b - a) else b * c\n\nprint(solution(input()))"
    },
    {
        "number": 4062,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    ans = 0\n    for x in range(a, b+1):\n        for y in range(c, d+1):\n            ans = max(ans, x*y)\n    return str(ans)"
    },
    {
        "number": 4063,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Reading input\n    N = int(stdin.readline().strip())\n    problems = [int(x) for x in stdin.readline().strip().split()]\n\n    # Finding the range of K for which the difference between the number of ARCs and ABCs is minimized\n    max_diff = float('-inf')\n    for k in range(1, max(problems) + 1):\n        arc_count = sum(1 for p in problems if p >= k)\n        abc_count = sum(1 for p in problems if p < k)\n        diff = abs(arc_count - abc_count)\n        if diff > max_diff:\n            max_diff = diff\n            best_k = k\n\n    # Returning the number of choices of K that minimize the difference\n    return str(best_k)"
    },
    {
        "number": 4063,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    lines = stdin.strip().split('\\n')\n    n = int(lines[0])\n    d = list(map(int, lines[1].split()))\n    \n    # Find the minimum value of K that achieves the same number of problems for ARCs and ABCs\n    count_abc = 0\n    count_arc = 0\n    for i in range(n):\n        if d[i] >= 5:\n            count_arc += 1\n        else:\n            count_abc += 1\n    min_k = max(5, (count_abc + count_arc) // 2)\n    \n    # Output the minimum value of K\n    return str(min_k) + '\\n'"
    },
    {
        "number": 4063,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Read input from stdin\n    N = int(stdin.readline().strip())\n    problems = list(map(int, stdin.readline().strip().split()))\n\n    # Calculate the minimum difficulty and maximum difficulty\n    min_diff = min(problems)\n    max_diff = max(problems)\n\n    # Calculate the number of choices for K\n    count = 0\n    for i in range(min_diff, max_diff + 1):\n        arc_count = 0\n        abc_count = 0\n        for j in problems:\n            if j >= i:\n                arc_count += 1\n            else:\n                abc_count += 1\n        if arc_count == abc_count:\n            count += 1\n\n    return str(count)"
    },
    {
        "number": 4063,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Reading the input values\n    n = int(stdin.readline().strip())\n    difficulty = list(map(int, stdin.readline().strip().split()))\n    # Calculating the maximum difficulty\n    max_difficulty = max(difficulty)\n    # Counting the number of problems for ARCs and ABCs\n    arcs_count = sum(1 for d in difficulty if d >= max_difficulty)\n    abc_count = n - arcs_count\n    # Checking the number of choices that make the counts equal\n    count = 0\n    for k in range(max_difficulty, -1, -1):\n        arc_count = sum(1 for d in difficulty if d >= k)\n        abc_count = n - arc_count\n        if arc_count == abc_count:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4063,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Reading the input\n    n = int(stdin.readline().strip())\n    difficulty = list(map(int, stdin.readline().strip().split()))\n\n    # Sorting the difficulty in ascending order\n    difficulty.sort()\n\n    # Initializing the variables\n    count = 0\n    start = 0\n    end = n - 1\n\n    # Finding the number of choices of the integer K that make the number of problems for ARCs and the number of problems for ABCs the same\n    while start <= end:\n        mid = (start + end) // 2\n\n        # Calculating the number of problems for ARCs and the number of problems for ABCs\n        arc_count = sum(1 for i in difficulty if i >= mid)\n        abc_count = n - arc_count\n\n        # If the number of problems for ARCs and the number of problems for ABCs are the same\n        if arc_count == abc_count:\n            count += 1\n\n        # If the number of problems for ARCs is less than the number of problems for ABCs\n        elif arc_count < abc_count:\n            end = mid - 1\n\n        # If the number of problems for ABCs is less than the number of problems for ARCs\n        else:\n            start = mid + 1\n\n    # Returning the number of choices of the integer K that make the number of problems for ARCs and the number of problems for ABCs the same\n    return str(count)"
    },
    {
        "number": 4063,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    diff = list(map(int, stdin.readline().split()))\n\n    # Sorting the problems in decreasing order of difficulty\n    diff.sort(reverse=True)\n\n    # Counting the number of problems for ARCs and ABCs\n    arc_count = 0\n    abc_count = 0\n    for i in range(n):\n        if diff[i] >= K:\n            arc_count += 1\n        else:\n            abc_count += 1\n\n    # Counting the number of choices of K that make the counts the same\n    count = 0\n    for i in range(K, 100001):\n        arc_count_new = 0\n        abc_count_new = 0\n        for j in range(n):\n            if diff[j] >= i:\n                arc_count_new += 1\n            else:\n                abc_count_new += 1\n        if arc_count_new == abc_count_new:\n            count += 1\n            if count > 1:\n                return str(count)\n\n    return str(count)"
    },
    {
        "number": 4063,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N = int(stdin.readline())\n    diff = [int(x) for x in stdin.readline().split()]\n    # Sort the difficulty in decreasing order\n    diff.sort(reverse=True)\n    # Initialize variables\n    count_abc = count_arc = 0\n    # Iterate over the sorted difficulty array\n    for i in range(N):\n        # If the difficulty is greater than or equal to the current count_abc, it belongs to ABCs\n        if diff[i] >= count_abc + 1:\n            count_abc += 1\n        # If the difficulty is greater than or equal to the current count_arc, it belongs to ARCs\n        elif diff[i] >= count_arc + 1:\n            count_arc += 1\n        # If the difficulty is less than the current count_arc, it belongs to ABCs\n        else:\n            count_abc += 1\n    # Return the number of choices of K that make the count_arc and count_abc the same\n    return str(count_arc) + '\\n' + str(count_abc)"
    },
    {
        "number": 4063,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    lines = stdin.strip().split(\"\\n\")\n    N = int(lines[0])\n    problems = [int(x) for x in lines[1].split()]\n\n    # find all possible values of K\n    possible_ks = set(range(1, max(problems) + 1))\n\n    # count the number of problems for each category\n    abc_count = sum(1 for p in problems if p <= max(possible_ks))\n    arc_count = N - abc_count\n\n    # count the number of valid choices of K\n    valid_choices = 0\n    for k in possible_ks:\n        abc_count_k = sum(1 for p in problems if p <= k)\n        arc_count_k = N - abc_count_k\n        if abc_count_k == arc_count_k:\n            valid_choices += 1\n\n    return str(valid_choices)\n\nstdin = \"6\\n9 1 4 4 6 7\"\nprint(solution(stdin)) # output: 2\n\nstdin = \"8\\n2 6 4 1 8 5 3 7\"\nprint(solution(stdin)) # output: 2\n\nstdin = \"10\\n5 9 1 4 4 6 7 3 8 2\"\nprint(solution(stdin)) # output: 0"
    },
    {
        "number": 4063,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    arr = list(map(int, stdin.readline().strip().split()))\n    count_abc = 0\n    count_arc = 0\n    for i in range(n):\n        if arr[i] >= 5:\n            count_arc += 1\n        else:\n            count_abc += 1\n    if count_arc == count_abc:\n        return str(count_arc)\n    else:\n        return \"No solution\""
    },
    {
        "number": 4063,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    diff = list(map(int, stdin.readline().strip().split()))\n    counts = [0, 0]  # counts[0] is for ABCs, counts[1] is for ARCs\n    for d in diff:\n        if d >= K:\n            counts[0] += 1\n        else:\n            counts[1] += 1\n    return str(min(counts))  # return the minimum of counts[0] and counts[1]"
    },
    {
        "number": 4064,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, h, l, r = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    # count the number of good times\n    count = 0\n    for i in range(n):\n        if a[i] >= l and a[i] <= r:\n            count += 1\n\n    # check if there is a better time to sleep\n    for i in range(n - 1):\n        if a[i] >= l and a[i] <= r and a[i + 1] - a[i] == 1:\n            count -= 1\n\n    return str(count)"
    },
    {
        "number": 4064,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, h, l, r = map(int, stdin.readline().strip().split())\n    a = list(map(int, stdin.readline().strip().split()))\n    a = [x - l for x in a]\n    a = [x - 1 for x in a]\n    a.sort()\n    i = 0\n    count = 0\n    while i < len(a):\n        if a[i] >= 0:\n            j = i + 1\n            while j < len(a) and a[j] < 0:\n                j += 1\n            count += len(a[i:j])\n            i = j\n        else:\n            i += 1\n    return count\n\nstdin = '''\n7 24 21 23\n16 17 14 20 20 11 22\n'''\n\nprint(solution(stdin)) # output: 3"
    },
    {
        "number": 4064,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, h, l, r = map(int, stdin.split()[0:4])\n    a = list(map(int, stdin.split()[4:]))\n    ans = 0\n    for i in range(n):\n        if a[i] >= l and a[i] <= r:\n            ans += 1\n    print(ans)\n"
    },
    {
        "number": 4064,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, h, l, r = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    dp = [0] * (h + 1)\n    dp[0] = 1\n    for i in range(n):\n        dp_next = [0] * (h + 1)\n        for j in range(l, h + 1):\n            dp_next[j] = max(dp[j - a[i]] + 1, dp[j])\n        dp = dp_next\n    return max(dp)"
    },
    {
        "number": 4064,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, h, l, r = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    dp = [[0]*h for _ in range(n+1)]\n    for i in range(n):\n        for j in range(l, r+1):\n            if a[i] - 1 >= j:\n                dp[i+1][j] = max(dp[i][j-1], dp[i][j]+1)\n            else:\n                dp[i+1][j] = dp[i][j]\n    ans = 0\n    for j in range(l, r+1):\n        ans = max(ans, dp[n][j])\n    return ans\n\nstdin = \"7 24 21 23\\n16 17 14 20 20 11 22\"\nprint(solution(stdin))  # Output: 3"
    },
    {
        "number": 4064,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, h, l, r = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a = sorted(a)\n    dp = [0] * n\n    dp[0] = 1\n    for i in range(1, n):\n        dp[i] = dp[i-1]\n        if a[i] - a[i-1] == 1:\n            dp[i] += dp[i-2]\n        elif a[i] - a[i-1] >= 2:\n            dp[i] += dp[i-1]\n        for j in range(i-2, -1, -1):\n            if a[i] - a[j] > l and a[i] - a[j] <= r:\n                dp[i] += dp[j]\n    return dp[n-1]\n\nstdin = \"7 24 21 23\\n16 17 14 20 20 11 22\"\nprint(solution(stdin))"
    },
    {
        "number": 4064,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, h, l, r = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    dp = [0] * h\n    dp[0] = 1  # Vova always starts at 00:00\n\n    for i in range(n):\n        for j in range(a[i] - 1, -1, -1):\n            if j >= l and j < r and dp[j]:\n                dp[j] = 0\n\n        for j in range(a[i], h):\n            if j >= l and j < r and dp[j - 1]:\n                dp[j] = 1\n\n    return sum(dp[l:r])\n"
    },
    {
        "number": 4064,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, h, l, r = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    dp = [[0] * h for _ in range(n)]\n    for i in range(n):\n        dp[i][0] = 1\n    for i in range(1, h):\n        for j in range(n):\n            if i - a[j] >= 0 and dp[j][i-a[j]-1] == 1:\n                dp[j][i] = 1\n    ans = 0\n    for i in range(n):\n        for j in range(l, r+1):\n            if dp[i][j] == 1:\n                ans += 1\n    return ans"
    },
    {
        "number": 4064,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, h, l, r = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n\n    ans = 0\n    cur = 0\n    for i in range(n):\n        cur = a[i]\n        if cur <= l:\n            ans += 1\n        elif cur >= r:\n            ans += 1\n    return str(ans)\n\nprint(solution(open('input.txt', 'r')))"
    },
    {
        "number": 4064,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, h, l, r = map(int, stdin.strip().split())\n    a = list(map(int, stdin.strip().split()))\n    a.sort()\n    ans = 1\n    for i in range(1, n):\n        if a[i] > a[ans-1] + 1:\n            ans += 1\n    if a[-1] >= h:\n        ans += 1\n    return ans"
    },
    {
        "number": 4065,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    max_problems = 1\n    for i in range(1, n):\n        if a[i] > a[i-1] * 2:\n            max_problems += 1\n    return str(max_problems)"
    },
    {
        "number": 4065,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # get the input\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    \n    # find the maximum number of problems in the contest satisfying the condition\n    ans = 1\n    for i in range(1, n-1):\n        if a[i] < a[i-1] * 2:\n            ans += 1\n    ans += 1\n    return str(ans)"
    },
    {
        "number": 4065,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n\n    # initialize variables\n    max_problems = 1\n    for i in range(1, n):\n        # check if problem i can be included in current contest\n        if a[i] > 2 * a[i - 1]:\n            max_problems += 1\n        # check if new contest starting at problem i is better than current max\n        if max_problems < i + 1:\n            max_problems = i + 1\n\n    return str(max_problems)"
    },
    {
        "number": 4065,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    p = 1\n    for i in range(1, n):\n        if a[i] > a[i-1] * 2:\n            p += 1\n    return p\n\nprint(solution(stdin))"
    },
    {
        "number": 4065,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    dp = [0] * n\n    dp[0] = 1\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] > a[j] and a[i] <= a[j] * 2:\n                dp[i] = max(dp[i], dp[j] + 1)\n        dp[i] = max(dp[i], dp[i-1])\n    return str(dp[n-1])"
    },
    {
        "number": 4065,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    count = 0\n    for i in range(n-1, 0, -1):\n        if a[i] <= a[i-1] * 2:\n            count += 1\n        else:\n            break\n    return count + 1\n\nwith open(\"input.txt\", \"r\") as f:\n    input_str = f.read()\n\nprint(solution(input_str)) # output should be 4"
    },
    {
        "number": 4065,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    p = 1\n    for i in range(n):\n        if i == 0:\n            continue\n        if a[i] > a[i-1] * 2:\n            p += 1\n    return str(p)\n\nwith open('input.txt', 'r') as f:\n    with open('output.txt', 'w') as o:\n        o.write(solution(f))"
    },
    {
        "number": 4065,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n\n    # Check if the hardest problem is selected\n    max_index = a.index(max(a))\n    if max_index == 0 or a[max_index-1] <= a[max_index] * 2:\n        return 1\n\n    # Check if the next hardest problem satisfies the condition\n    for i in range(max_index+1, len(a)):\n        if a[i] <= a[max_index] * 2:\n            return i\n\n    # If no valid contest exists, return -1\n    return -1"
    },
    {
        "number": 4065,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().strip().split()))\n    \n    # initialize variables\n    dp = [0] * n\n    dp[n - 1] = 1\n    \n    # loop through all the difficulties from left to right\n    for i in range(n - 2, -1, -1):\n        # check if there is a valid problem with a greater difficulty\n        for j in range(i + 1, n):\n            if a[j] > a[i] and a[j] <= a[i] * 2:\n                dp[i] += dp[j]\n                break\n            \n    # return the maximum number of problems in the contest\n    return max(dp)\n"
    },
    {
        "number": 4065,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    \n    # Find the maximum number of problems in the valid contests\n    p = 0\n    for i in range(n-1):\n        if a[i] < a[n-1] * 2:\n            p += 1\n    p += 1\n    \n    # Return the result\n    return str(p)"
    },
    {
        "number": 4066,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    lcm = a[0]\n    for i in range(1, n):\n        lcm = lcm * a[i] // gcd(lcm, a[i])\n    min_lcm = lcm\n    ans = (0, 0)\n    for i in range(n):\n        for j in range(i+1, n):\n            if lcm * gcd(a[i], a[j]) // lcm < a[i] * a[j]:\n                if lcm // gcd(lcm, a[i]*a[j]) < min_lcm:\n                    min_lcm = lcm // gcd(lcm, a[i]*a[j])\n                    ans = (i+1, j+1)\n    return \" \".join(map(str, ans))\n\ndef"
    },
    {
        "number": 4066,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    lcm = float('inf')\n    ans = (-1, -1)\n    for i in range(n):\n        for j in range(i+1, n):\n            curr = abs(a[i] * a[j]) // math.gcd(a[i], a[j])\n            if curr < lcm:\n                lcm = curr\n                ans = (i+1, j+1)\n    return str(ans[0]) +'' + str(ans[1])\n    \nimport math\n\nprint(solution(sys.stdin))"
    },
    {
        "number": 4066,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    dp = [a[0]]\n    for i in range(1, n):\n        dp.append(dp[-1] * a[i] // math.gcd(dp[-1], a[i]))\n    ans = float('inf')\n    for i in range(n):\n        for j in range(i+1, n):\n            ans = min(ans, dp[j] // dp[i])\n    return str(ans)"
    },
    {
        "number": 4066,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n    a.sort()\n    lcm = a[1]\n    ans = 1, 2\n    for i in range(2, n):\n        if lcm * a[i] > lcm * a[i-1]:\n            lcm = lcm * a[i-1]\n            ans = ans[0], i\n    return''.join(map(str, ans))"
    },
    {
        "number": 4066,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    \n    def lcm(x, y):\n        if x > y:\n            x, y = y, x\n        while y:\n            x, y = y, x % y\n        return x\n    \n    ans = float('inf')\n    for i in range(n):\n        for j in range(i+1, n):\n            ans = min(ans, lcm(a[i], a[j]))\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            if lcm(a[i], a[j]) == ans:\n                print(i+1, j+1)\n                return ''\n    \n    return ''"
    },
    {
        "number": 4066,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n\n    # Initialize the result with the first pair of indices\n    result = (0, 1)\n\n    # Find the minimum lcm for all possible pairs of indices\n    for i in range(1, n):\n        for j in range(i+1, n):\n            lcm = a[i] * a[j] // math.gcd(a[i], a[j])\n            if lcm < a[result[0]] * a[result[1]] // math.gcd(a[result[0]], a[result[1]]):\n                result = (i, j)\n\n    # Print the result\n    return''.join(map(str, result))"
    },
    {
        "number": 4066,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = [int(x) for x in stdin.split()[1:]]\n    \n    lcm = [a[i] * a[j] for i in range(n) for j in range(i+1, n)]\n    lcm.sort()\n    \n    return str(lcm[0]) + \" \" + str(lcm.index(lcm[0]) // n + 1)\n    \nprint(solution(\"5 2 4 8 3 6\"))\nprint(solution(\"5 5 2 11 3 7\"))\nprint(solution(\"6 2 5 10 1 10 2\"))"
    },
    {
        "number": 4066,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    ans = float('inf')\n    for i in range(n):\n        for j in range(i+1, n):\n            ans = min(ans, (a[i] * a[j]) // gcd(a[i], a[j]))\n    for i in range(n):\n        for j in range(i+1, n):\n            if (a[i] * a[j]) // gcd(a[i], a[j]) == ans:\n                return str(i+1) +'' + str(j+1)\n\ndef"
    },
    {
        "number": 4066,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    n = len(a)\n    m = {}\n    for i in range(n):\n        for j in range(i+1, n):\n            lcm = a[i] * a[j] // gcd(a[i], a[j])\n            if lcm in m:\n                m[lcm].append((i+1, j+1))\n            else:\n                m[lcm] = [(i+1, j+1)]\n    min_lcm = min(m.keys())\n    result = m[min_lcm]\n    return \" \".join(map(str, result[0]))\n\ndef"
    },
    {
        "number": 4066,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    # dp[i][j] stores the lcm of a[i] and a[j]\n    dp = [[0] * n for _ in range(n)]\n\n    # fill the first row\n    for j in range(n):\n        dp[0][j] = a[0]\n\n    # fill the first column\n    for i in range(1, n):\n        dp[i][0] = a[i]\n\n    # fill the rest of the dp matrix\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = (a[i] * a[j]) // gcd(a[i], a[j])\n\n    # find the minimum lcm\n    min_lcm = float('inf')\n    for i in range(n):\n        for j in range(i+1, n):\n            if dp[i][j] < min_lcm:\n                min_lcm = dp[i][j]\n                min_i = i\n                min_j = j\n\n    return f'{min_i+1} {min_j+1}'\n"
    },
    {
        "number": 4067,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    i = 0\n    j = n - 1\n    while i < j:\n        if s[i] == '0' and s[j] == '1':\n            s = s[:i] + '1' + s[i+1:j] + '2' + s[j+1:]\n            i += 1\n            j -= 1\n        elif s[i] == '1' and s[j] == '2':\n            s = s[:i] + '2' + s[i+1:j] + '0' + s[j+1:]\n            i += 1\n            j -= 1\n        elif s[i] == '2' and s[j] == '0':\n            s = s[:i] + '0' + s[i+1:j] + '1' + s[j+1:]\n            i += 1\n            j -= 1\n        else:\n            i += 1\n            j -= 1\n    return s\n\ndef"
    },
    {
        "number": 4067,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # extract input\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n\n    # count the number of '0', '1', '2' in s\n    count_0 = s.count('0')\n    count_1 = s.count('1')\n    count_2 = n - count_0 - count_1\n\n    # check if s is already balanced\n    if count_0 == count_1 and count_1 == count_2:\n        return s\n\n    # find the minimum number of replacements needed to make s balanced\n    replacements = abs(count_0 - count_1) + abs(count_1 - count_2)\n\n    # find the minimum possible value of count_1\n    if count_0 > count_1:\n        count_1 = count_0 - replacements\n    else:\n        count_1 = count_1 - replacements\n\n    # create the balanced string\n    balanced_s = ''\n    for c in s:\n        if c == '0':\n            balanced_s += '0'\n        elif c == '1':\n            balanced_s += '1'\n        else:\n            balanced_s += '2'\n    for i in range(count_1):\n        balanced_s = balanced_s[:i] + '1' + balanced_s[i+1:]\n\n    return balanced_s"
    },
    {
        "number": 4067,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    count_0 = s.count('0')\n    count_1 = s.count('1')\n    count_2 = s.count('2')\n    if count_0 == count_1 and count_1 == count_2:\n        return s\n    if count_0 > count_1:\n        s = s.replace('1', '0', count_0 - count_1)\n    if count_1 > count_2:\n        s = s.replace('2', '0', count_1 - count_2)\n    if count_2 > count_0:\n        s = s.replace('0', '1', count_2 - count_0)\n    return s\n\nprint(solution(open(\"io/tests.txt\", \"r\")))"
    },
    {
        "number": 4067,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    s = stdin.split()[1]\n    if n % 3 == 0:\n        if '0' * (n // 3) not in s:\n            return '0' * (n // 3) + '1' + '0' * (n // 3)\n    if s.count('1') == s.count('2'):\n        return s.replace('1', '0').replace('2', '0')\n    else:\n        return s.replace('0', '1').replace('2', '1')"
    },
    {
        "number": 4067,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    s = stdin.split()[1]\n    cnt0 = s.count('0')\n    cnt1 = s.count('1')\n    cnt2 = s.count('2')\n    if cnt0 == cnt1 and cnt1 == cnt2:\n        return s\n    min_diff = min(cnt0 - cnt1, cnt1 - cnt0, cnt2 - cnt1)\n    res = ''\n    for i in range(n):\n        if s[i] == '0':\n            res += '0' if cnt0 <= cnt1 + min_diff else '1'\n            cnt0 -= 1\n        elif s[i] == '1':\n            res += '0' if cnt1 <= cnt0 + min_diff else '2'\n            cnt1 -= 1\n        else:\n            res += '1' if cnt2 <= cnt1 + min_diff else '2'\n            cnt2 -= 1\n    return res"
    },
    {
        "number": 4067,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    s = stdin.split()[1]\n    ternary_count = s.count('0') + s.count('1') + s.count('2')\n    balanced_ternary = ['0' * (ternary_count // 3) + '1' * (ternary_count // 3) + '2' * (ternary_count - ternary_count // 3),\n                        '0' * (ternary_count - ternary_count // 3) + '1' * (ternary_count // 3) + '2' * (ternary_count // 3),\n                        '0' * (ternary_count - ternary_count // 3) + '2' * (ternary_count // 3) + '1' * (ternary_count - ternary_count // 3),\n                        '0' * (ternary_count // 3) + '2' * (ternary_count - ternary_count // 3) + '1' * (ternary_count - ternary_count // 3)]\n    balanced_ternary = sorted(balanced_ternary)\n    return balanced_ternary[0]\n\nwith open('input.txt', 'r') as f:\n    stdin = f.read()\n\nstdout = solution(stdin)\nwith open('output.txt', 'w') as f:\n    f.write(stdout)"
    },
    {
        "number": 4067,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    s = stdin.split()[1]\n\n    c0 = s.count('0')\n    c1 = s.count('1')\n    c2 = n - c0 - c1\n\n    ans = s.replace('2', '0').replace('0', '2')\n    ans = ans.replace('1', '0').replace('0', '1')\n    ans = ans.replace('0', '2')\n\n    return ans"
    },
    {
        "number": 4067,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    zeroes = s.count('0')\n    ones = s.count('1')\n    twos = s.count('2')\n    if zeroes == ones and ones == twos:\n        return s\n    if zeroes == ones:\n        return s.replace('0', '2', twos-ones)\n    if ones == twos:\n        return s.replace('2', '0', zeroes-twos)\n    if zeroes == twos:\n        return s.replace('1', '2', ones-twos)\n    if ones == zeroes:\n        return s.replace('1', '0', twos-ones)\n    if s.count('0') < s.count('1') and s.count('0') < s.count('2'):\n        return s.replace('0', '2', twos-ones)\n    if s.count('1') < s.count('0') and s.count('1') < s.count('2'):\n        return s.replace('1', '0', twos-ones)\n    if s.count('2') < s.count('0') and s.count('2') < s.count('1'):\n        return s.replace('2', '1', ones-twos)\n    if s.count('0') < s.count('1') and s.count('0') == s.count('2'):\n        return s.replace('0', '2', ones-twos)\n    if s.count('1') < s.count('0') and s.count('1') == s.count('2'):\n        return s.replace('1', '0', zeroes-ones)\n    if s.count('2') < s.count('0') and s.count('2') == s.count('1'):\n        return s.replace('2', '1', twos-zeroes)\n    if s.count('0') < s.count('1') and s.count('0') == s.count('2'):\n        return s.replace('0', '2', twos-ones)\n    return s.replace('1', '2', twos-ones)"
    },
    {
        "number": 4067,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    s = stdin.split('\\n')[1]\n    ans = s.replace('0', '02').replace('1', '01').replace('2', '01')\n    return ans"
    },
    {
        "number": 4067,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    s = stdin.split()[1]\n    zeroes = s.count('0')\n    ones = s.count('1')\n    twos = s.count('2')\n    while zeroes!= ones or ones!= twos:\n        if zeroes < ones:\n            s = s.replace('0', '2', 1)\n        elif ones < twos:\n            s = s.replace('1', '2', 1)\n        elif zeroes == ones:\n            s = s.replace('1', '0', 1)\n        elif ones == twos:\n            s = s.replace('0', '1', 1)\n        zeroes = s.count('0')\n        ones = s.count('1')\n        twos = s.count('2')\n    return s\n"
    },
    {
        "number": 4068,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # get inputs\n    N, M = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n\n    # create dp table\n    dp = [1] * N\n    for i in range(1, N):\n        if i in a:\n            dp[i] = 0\n        else:\n            for j in range(1, i+1):\n                dp[i] += dp[i-j]\n        dp[i] %= 1000000007\n\n    # output result\n    return str(dp[N-1])"
    },
    {
        "number": 4068,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N, M = map(int, stdin.readline().split())\n    broken = list(map(int, stdin.readline().split()))\n    \n    # Initialize dp table\n    dp = [0] * N\n    \n    # Base case: start from 0\n    dp[0] = 1\n    \n    # Iterate over remaining steps\n    for i in range(1, N):\n        # Initialize count for current step\n        count = 0\n        \n        # Check if step i is safe to climb up\n        if i not in broken:\n            # Check if step i-1 is safe to climb up\n            if i > 0 and i-1 not in broken:\n                # If both are safe, count ways to climb up as 1+1\n                count = dp[i-1] + dp[i-2]\n            elif i > 0 and i-1 in broken:\n                # If i-1 is safe, count ways to climb up as 1\n                count = dp[i-1]\n            else:\n                # If neither is safe, count ways to climb up as 1\n                count = 1\n        \n        # Store count in dp table\n        dp[i] = count % (10**9 + 7)\n    \n    # Return count for N-th step\n    return str(dp[-1])"
    },
    {
        "number": 4068,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    broken = list(map(int, stdin.split()))\n    broken.sort()\n    dp = [1] * (n + 1)\n    for i in range(1, n + 1):\n        for j in range(m):\n            if broken[j] == i - 1:\n                dp[i] = (dp[i] + dp[i - 1]) % (10**9 + 7)\n            elif broken[j] < i - 1:\n                dp[i] = (dp[i] + dp[i - 2]) % (10**9 + 7)\n    return str(dp[n])"
    },
    {
        "number": 4068,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # get input\n    lines = stdin.split(\"\\n\")\n    N = int(lines[0])\n    M = int(lines[1])\n    broken_steps = list(map(int, lines[2:]))\n    \n    # initialize variables\n    count = 1\n    prev_broken = 0\n    \n    # loop through each step\n    for i in range(1, N):\n        # if current step is broken, skip to next step\n        if i in broken_steps:\n            continue\n        \n        # if previous step was broken, count both paths\n        if prev_broken > i-1:\n            count = (count * 2) % 1000000007\n        else:\n            count = (count * 1) % 1000000007\n        \n        # update previous broken step\n        prev_broken = i\n    \n    return str(count)"
    },
    {
        "number": 4068,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    broken_steps = list(map(int, stdin.split()))\n    dp = [[0] * (n+1) for _ in range(m+1)]\n    dp[0][0] = 1\n    for i in range(m+1):\n        for j in range(n+1):\n            for step in range(j, j+2):\n                if step > n:\n                    break\n                dp[i][step] += dp[i-1][j]\n                dp[i][step] %= 1000000007\n            if step in broken_steps:\n                break\n    return dp[-1][-1]\n\nstdin = input()\nprint(solution(stdin))"
    },
    {
        "number": 4068,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    N, M = map(int, stdin.readline().split())\n    A = list(map(int, stdin.readline().split()))\n\n    # create dp table\n    dp = [0] * N\n    dp[0] = 1  # Takahashi can always climb to the 0-th step\n\n    # iterate over each step, and for each step, check if Takahashi can climb to it\n    for i in range(1, N):\n        for j in range(M):\n            # if the tread of the previous step is broken, Takahashi cannot climb to this step\n            if A[j] >= i:\n                break\n        else:  # if loop completes without breaking, Takahashi can climb to this step\n            dp[i] = dp[i-1] + dp[i-2]  # two steps at a time\n            dp[i] %= 1000000007\n\n    return str(dp[N-1])  # return result modulo 1000000007"
    },
    {
        "number": 4068,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.readline().split())\n    broken_steps = list(map(int, stdin.readline().split()))\n    count = 0\n    MOD = 10**9 + 7\n\n    # dp[i] stores the number of ways to climb up to i-th step, without breaking the treads of any steps\n    dp = [0] * N\n\n    # 0-th step\n    dp[0] = 1\n\n    # Iterate from 1 to N-1\n    for i in range(1, N):\n        # If the current step is broken, we can only climb up to the step before the broken one\n        if i in broken_steps:\n            dp[i] = dp[i-1]\n        # If the current step is not broken, we can climb up to the step before the broken one and the step before that one\n        else:\n            dp[i] = dp[i-1] + dp[i-2]\n        # Add modulo to avoid integer overflow\n        dp[i] %= MOD\n\n    # Return the number of ways to climb up to N-th step\n    return str(dp[-1])"
    },
    {
        "number": 4068,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    N, M = map(int, stdin.readline().split())\n    broken = list(map(int, stdin.readline().split()))\n    \n    # create dp table\n    dp = [1] * (N+1)\n    for i in broken:\n        dp[i] = 0\n    for i in range(1, N):\n        for j in range(i):\n            if j not in broken:\n                dp[i] = (dp[i] + dp[j]) % 1000000007\n    \n    # count number of ways to climb up the stairs\n    count = 0\n    for i in range(N):\n        count = (count + dp[i]) % 1000000007\n    \n    return str(count)"
    },
    {
        "number": 4068,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.readline().split())\n    broken_steps = list(map(int, stdin.readline().split()))\n    dp = [0] * (N+1)\n    dp[0] = 1\n    dp[1] = 1\n    for step in range(2, N+1):\n        if step - 1 in broken_steps:\n            dp[step] = dp[step-1] + dp[step-2]\n            dp[step] %= 1000000007\n        else:\n            dp[step] = dp[step-1]\n            dp[step] %= 1000000007\n    return str(dp[N])"
    },
    {
        "number": 4068,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    lines = stdin.split(\"\\n\")\n    n = int(lines[0])\n    m = int(lines[1])\n    broken_steps = [int(line) for line in lines[2:2+m]]\n    \n    # count number of ways to climb up the stairs\n    count = 1  # start with 1 way to climb up 0\n    for step in range(1, n):\n        count = (count * (1 + sum(step > broken_step for broken_step in broken_steps))) % (10**9 + 7)\n    \n    return str(count)\n"
    },
    {
        "number": 4069,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, k, d = map(int, stdin.strip().split())\n    return str(min(abs(x + (d * i)) for i in range(k+1)))"
    },
    {
        "number": 4069,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x, k, d = map(int, stdin.split())\n    x = abs(x)\n    if k % 2 == 0:\n        return str(x)\n    else:\n        return str(x + d)\n\nprint(solution(input()))"
    },
    {
        "number": 4069,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x, k, d = map(int, stdin.split())\n    destination = x\n    for _ in range(k):\n        if destination + d > 0:\n            destination += d\n        else:\n            destination -= d\n    return str(abs(destination))"
    },
    {
        "number": 4069,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x, k, d = map(int, stdin.strip().split())\n    destination = x + (k - 1) * d\n    return str(abs(destination))"
    },
    {
        "number": 4069,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x, k, d = map(int, stdin.split())\n    if k == 1:\n        return str(abs(x - d))\n    elif k % 2 == 0:\n        return str(2 * abs(x) - d)\n    else:\n        return str(abs(x))"
    },
    {
        "number": 4069,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x, k, d = map(int, stdin.split())\n    if k % 2 == 1:\n        return str(abs(x))\n    else:\n        return str(min(abs(x - i*d) for i in range(1, k+1)))"
    },
    {
        "number": 4069,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x, k, d = map(int, stdin.strip().split())\n    moves = [x]\n    for i in range(k-1):\n        x -= d if x-d >= -10**15 else x-d\n        x += d if x+d <= 10**15 else x+d\n        moves.append(x)\n    return str(min(map(abs, moves)))"
    },
    {
        "number": 4069,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x, k, d = map(int, stdin.strip().split())\n    destination = x\n    for i in range(k):\n        if destination - d < x - d:\n            destination -= d\n        else:\n            destination += d\n    return str(abs(destination))"
    },
    {
        "number": 4069,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x, k, d = map(int, stdin.strip().split())\n    dest = x\n    for i in range(k):\n        if abs(dest) > abs(x + d):\n            dest -= d\n        else:\n            dest += d\n    return str(abs(dest))"
    },
    {
        "number": 4069,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    X, K, D = map(int, stdin.split())\n    if X == 0:\n        return '0'\n    dest = X\n    for _ in range(K):\n        dest -= D\n        if abs(dest) < abs(X):\n            X = dest\n    return str(abs(X))"
    },
    {
        "number": 4070,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 2:\n        return 0\n    count = 0\n    for i in range(2, n):\n        if n % i == 0:\n            count += 1\n            if count > 1:\n                return 0\n    return count\n\ndef"
    },
    {
        "number": 4070,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    while n > 0:\n        if n % 2 == 0:\n            n = n // 2\n            count += 1\n        else:\n            n = n * 3 + 1\n            count += 1\n    return str(count)\n\nprint(solution(input()))"
    },
    {
        "number": 4070,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(len(str(n)))"
    },
    {
        "number": 4070,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n if n > 1 else 0\n\nprint(solution(input()))"
    },
    {
        "number": 4070,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = str(n)\n    count = 0\n    for i in range(len(s)):\n        if s[i]!= s[len(s)-i-1]:\n            count += 1\n    return count"
    },
    {
        "number": 4070,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    i = 1\n    while i <= n:\n        count += 1\n        i *= 2\n    return count"
    },
    {
        "number": 4070,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    while n!= 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3*n + 1\n        count += 1\n    return count"
    },
    {
        "number": 4070,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    while n!= 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = n * 3 + 1\n        count += 1\n    return count"
    },
    {
        "number": 4070,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    while n!= 1:\n        if n % 2 == 0:\n            n //= 2\n        else:\n            n = 3 * n + 1\n        count += 1\n    return count\n\nprint(solution(input()))"
    },
    {
        "number": 4070,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    for i in range(2, n):\n        if n % i == 0:\n            count += 1\n    if count == 0:\n        return 0\n    else:\n        return count + 1\n\nprint(solution(\"11\")) # Output 2\nprint(solution(\"14\")) # Output 0\nprint(solution(\"61441\")) # Output 2\nprint(solution(\"571576\")) # Output 10\nprint(solution(\"2128506\")) # Output 3"
    },
    {
        "number": 4071,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    return str(a * (a + 1) * (2 * a + 1) // 6)"
    },
    {
        "number": 4071,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin.readline().strip())\n    if a == 1:\n        return str(1)\n    elif a == 2:\n        return str(2)\n    elif a == 3:\n        return str(27)"
    },
    {
        "number": 4071,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    result = (2**a) * (a + 1)\n    return str(result)"
    },
    {
        "number": 4071,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a == 1:\n        return 1\n    elif a == 2:\n        return 2\n    elif a == 3:\n        return 27\n    else:\n        return solution(stdin-1) + solution(stdin-2) + solution(stdin-3)\n\nprint(solution(input()))"
    },
    {
        "number": 4071,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    return pow(a, 2) + pow(a, 3)"
    },
    {
        "number": 4071,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    return 2**(a+1)-1\n\nprint(solution(input()))"
    },
    {
        "number": 4071,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    return str(a * (a + 1) * (2 * a + 1) // 6)"
    },
    {
        "number": 4071,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    result = a * (a + 1) * (2 * a + 1) // 6\n    return str(result)\n"
    },
    {
        "number": 4071,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a == 1:\n        return \"2\"\n    elif a == 2:\n        return \"27\"\n    elif a == 3:\n        return \"78\"\n    else:\n        for i in range(4, a+1):\n            fib = [0, 1]\n            for j in range(2, i+1):\n                fib.append(fib[j-1] + fib[j-2])\n            return str(fib[i])"
    },
    {
        "number": 4071,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    b = 1\n    for i in range(2, a+1):\n        b *= i\n    return str(b)"
    },
    {
        "number": 4072,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if (a >= 10) and (a <= 999):\n        if (a % 4 == 0) and ((a % 100!= 0) or (a % 400 == 0)):\n            return \"1\"\n        else:\n            return \"0\"\n    else:\n        return \"Invalid input\""
    },
    {
        "number": 4072,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a % 2 == 0:\n        return \"0\"\n    else:\n        return \"1\""
    },
    {
        "number": 4072,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a % 4 == 0:\n        return \"1\"\n    else:\n        return \"0\""
    },
    {
        "number": 4072,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a < 10 or a > 999:\n        return 'Invalid input'\n    sum_of_digits = sum(int(digit) for digit in str(a))\n    return '1' if sum_of_digits % 3 == 0 else '0'\n\nprint(solution('13')) # Output: '1'\nprint(solution('927')) # Output: '1'\nprint(solution('48')) # Output: '0'"
    },
    {
        "number": 4072,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a % 4 == 0 and (a % 100!= 0 or a % 400 == 0):\n        return '1'\n    else:\n        return '0'"
    },
    {
        "number": 4072,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a % 3 == 0 or a % 5 == 0:\n        return \"1\"\n    else:\n        return \"0\""
    },
    {
        "number": 4072,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Convert input string to integer\n    a = int(stdin)\n\n    # Check if input is divisible by 3 or 5\n    if a % 3 == 0 or a % 5 == 0:\n        return '1'\n    else:\n        return '0'"
    },
    {
        "number": 4072,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a % 4 == 0 and (a % 100!= 0 or a % 400 == 0):\n        return '1'\n    else:\n        return '0'"
    },
    {
        "number": 4072,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if (a%10 + a%100 + a//100)%2 == 0:\n        return \"0\"\n    else:\n        return \"1\""
    },
    {
        "number": 4072,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a % 4 == 0 and (a % 100!= 0 or a % 400 == 0):\n        return '1'\n    else:\n        return '0'"
    },
    {
        "number": 4073,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    xor = a[0]\n    for i in range(1, n):\n        xor ^= a[i]\n    return xor"
    },
    {
        "number": 4073,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    return sum(a)"
    },
    {
        "number": 4073,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    ans = 0\n    for i in range(n):\n        ans ^= a[i]\n    return ans\n\nprint(solution(input()))"
    },
    {
        "number": 4073,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, *arr = map(int, stdin.split())\n    return max(set(arr), key=arr.count)\n\ndef"
    },
    {
        "number": 4073,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    result = 0\n    for i in range(n):\n        result ^= a[i]\n    return result"
    },
    {
        "number": 4073,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = [int(x) for x in stdin.readline().strip().split()]\n    xor = a[0]\n    for i in range(1, n):\n        xor ^= a[i]\n    return xor\n"
    },
    {
        "number": 4073,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    return sum(a)"
    },
    {
        "number": 4073,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    arr = list(map(int, stdin.readline().strip().split()))\n    \n    xor_sum = 0\n    for i in range(n):\n        xor_sum = xor_sum ^ arr[i]\n        \n    return xor_sum\n\nprint(solution(stdin))<|im_sep|>"
    },
    {
        "number": 4073,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    max_xor = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            max_xor = max(max_xor, a[i] ^ a[j])\n    return max_xor"
    },
    {
        "number": 4073,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    return max(a)\n\nstdin = \"4\\n2 5 3 1\"\nstdout = str(solution(stdin))\nprint(stdout) # Output: \"4\""
    },
    {
        "number": 4074,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    t = int(lines[0])\n    for i in range(1, t * 3, 3):\n        n = int(lines[i])\n        k = int(lines[i+1])\n        package_sizes = list(range(1, k+1))\n        packages = 1\n        total_shovels = 0\n        while total_shovels < n:\n            packages += 1\n            package_sizes = [p + 1 for p in package_sizes]\n            total_shovels = sum(package_sizes)\n        print(packages)\n    return \"\""
    },
    {
        "number": 4074,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = int(stdin.readline().strip())\n    for i in range(test_cases):\n        n, k = map(int, stdin.readline().strip().split())\n        packages = list(range(1, k + 1)) * (n // k)\n        packages.append(n % k)\n        print(min(packages))\n    return \"\""
    },
    {
        "number": 4074,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    for i in range(1, len(lines)):\n        n, k = map(int, lines[i].split())\n        packages_needed = n // k\n        shovels_remaining = n % k\n        if shovels_remaining == 0:\n            print(packages_needed)\n        else:\n            packages_needed += 1\n            print(packages_needed)"
    },
    {
        "number": 4074,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    for case in stdin.split('\\n'):\n        if not case:\n            continue\n        n, k = map(int, case.split())\n        if n == 0 and k == 0:\n            break\n        if n < k:\n            print(n)\n        else:\n            num_packages = 1\n            while num_packages * k < n:\n                num_packages *= k\n            print(num_packages)\n\nstdin = \"\"\"5\n8 7\n8 1\n6 10\n999999733 999999732\n999999733 999999733\"\"\"\n\nsolution(stdin)"
    },
    {
        "number": 4074,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for i in range(t):\n        n, k = map(int, stdin.readline().split())\n        # find the largest i such that i*k >= n\n        i = min(n//k, k)\n        print(i)\n"
    },
    {
        "number": 4074,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # reading the input\n    t = int(stdin.readline())\n    for i in range(t):\n        n, k = map(int, stdin.readline().split())\n        \n        # finding the number of packages\n        num_packages = 0\n        while n > 0:\n            n -= k\n            num_packages += 1\n        \n        # printing the answer\n        print(num_packages)"
    },
    {
        "number": 4074,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    for line in stdin.split('\\n'):\n        n, k = map(int, line.split())\n        if n < k:\n            print(n)\n        else:\n            print(k)\n    return \"\""
    },
    {
        "number": 4074,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    n = int(lines[0].split(\" \")[0])\n    k = int(lines[0].split(\" \")[1])\n    if n == k:\n        return str(n)\n    elif k == 1:\n        return str(n//k)\n    elif n == 1:\n        return \"1\"\n    elif n < k:\n        return \"1\"\n    else:\n        packages = [i for i in range(1, k+1)]\n        packages = packages*n//k\n        packages.sort()\n        return str(packages[-1])"
    },
    {
        "number": 4074,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n <= k:\n        return str(n)\n    else:\n        count = 0\n        for i in range(k, 0, -1):\n            if n >= i:\n                count += n // i\n                n = n % i\n        return str(count)\n\ndef"
    },
    {
        "number": 4074,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    for _ in range(t):\n        n, k = map(int, stdin.readline().split())\n        if n % k == 0:\n            print(n//k)\n        else:\n            print(n//k+1)\n    return \"\""
    },
    {
        "number": 4075,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    n, m = map(int, lines[0].split())\n    bulb_to_switch = [[] for _ in range(m + 1)]\n    for i in range(1, n + 1):\n        k = int(lines[i].split()[0])\n        switches = list(map(int, lines[i].split()[1:]))\n        for j in range(k):\n            bulb_to_switch[switches[j]].append(i)\n    bulb_states = set()\n    for i in range(m + 1):\n        p = int(lines[n + i])\n        switches = bulb_to_switch[i]\n        state = [0] * (n + 1)\n        for switch in switches:\n            state[switch] = 1\n        state_bin = ''.join(map(str, state))\n        state_int = int(state_bin, 2)\n        state_int = (state_int + p) % 2\n        state = [int(bit) for bit in bin(state_int)[2:]]\n        state = [0] * (n - len(state)) + state\n        bulb_states.add(tuple(state))\n    return str(len(bulb_states))"
    },
    {
        "number": 4075,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N, M = map(int, stdin.readline().strip().split())\n    bulb_connections = [list(map(int, stdin.readline().strip().split())) for _ in range(M)]\n    bulb_powers = list(map(int, stdin.readline().strip().split()))\n\n    # Count the number of possible combinations of states of switches\n    num_combinations = 1\n    for power in bulb_powers:\n        num_combinations *= pow(2, power)\n\n    # Check if all bulbs are lighted\n    all_bulbs_lighted = all(bulb_connections[i][j-1] == bulb_connections[i][j-1] for i in range(M) for j in range(1, bulb_connections[i][0]+1))\n\n    # Output the result\n    if all_bulbs_lighted:\n        return str(num_combinations)\n    else:\n        return \"0\""
    },
    {
        "number": 4075,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    lines = stdin.split(\"\\n\")\n    n, m = map(int, lines[0].split())\n    switches = []\n    for i in range(1, n+1):\n        k, *s = map(int, lines[i].split())\n        switches.append((k, s))\n    bulbs = list(map(int, lines[-1].split()))\n\n    # Count number of combinations of states\n    count = 0\n    for p in range(2**n):\n        # Check if all bulbs are lighted\n        lighted = True\n        for i in range(m):\n            count_on = sum(s[0] % 2 == 1 for s in switches if p & (1 << s[1]-1))\n            if bulbs[i] == count_on:\n                continue\n            lighted = False\n            break\n        if lighted:\n            count += 1\n\n    # Return result\n    return str(count)"
    },
    {
        "number": 4075,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    switches = [list(map(int, stdin.split()[0:k+2])) for k in range(n)]\n    bulbs = list(map(int, stdin.split()[2:]))\n    \n    count = 0\n    for i in range(2**n):\n        on = [False]*n\n        for j in range(n):\n            if i & (1 << j):\n                on[j] = True\n        for j in range(m):\n            if sum([on[k-1] for k in switches[j]]) % 2 == bulbs[j]:\n                continue\n            else:\n                break\n        else:\n            count += 1\n                \n    return str(count)"
    },
    {
        "number": 4075,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    N, M = map(int, stdin.readline().split())\n    bulb_connections = []\n    for i in range(M):\n        k, *connections = map(int, stdin.readline().split())\n        bulb_connections.append((connections, k))\n    bulb_states = list(map(int, stdin.readline().split()))\n\n    # count number of possible switch states\n    def count_states(switch_states):\n        count = 1\n        for state in switch_states:\n            count *= 2\n        return count\n\n    # count number of possible bulb states\n    def count_bulb_states(bulb_connections, switch_states):\n        count = 0\n        for connections, k in bulb_connections:\n            count += int(sum(switch_states[s-1] for s in connections) % 2 == k)\n        return count\n\n    # count number of possible states of switches and bulbs\n    total_states = count_states([0]*N)\n    for i in range(M):\n        total_states *= count_states([0]*N)\n    for switch_states in itertools.product([0, 1], repeat=N):\n        bulb_states_count = count_bulb_states(bulb_connections, switch_states)\n        total_states //= bulb_states_count\n    return str(total_states)"
    },
    {
        "number": 4075,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Reading input\n    lines = stdin.split(\"\\n\")\n    N, M = map(int, lines[0].split())\n    switches = []\n    for i in range(1, N+1):\n        k, *states = map(int, lines[i].split())\n        switches.append((k, states))\n    bulbs = []\n    for i in range(M):\n        p = int(lines[N+i+1])\n        bulbs.append(p)\n\n    # Calculating number of combinations of states of switches that light all bulbs\n    count = 0\n    for i in range(2**N):\n        state = bin(i)[2:].zfill(N)\n        on_switches = [set() for _ in range(M)]\n        for j in range(N):\n            if state[j] == \"1\":\n                on_switches[j//k[0]].add(j+1)\n        if all(bulb in switches[j][1] for j in range(M) for bulb in on_switches[j] if bulb in switches[j][1]):\n            count += 1\n\n    return str(count)\n"
    },
    {
        "number": 4075,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Read input from stdin\n    N, M = map(int, stdin.readline().strip().split())\n    switches = []\n    for _ in range(M):\n        k_i, s_i = map(int, stdin.readline().strip().split())\n        switches.append([k_i] + list(map(int, stdin.readline().strip().split())))\n\n    # Iterate over all combinations of \"on\" and \"off\" states of the switches\n    count = 0\n    for state in range(2**N):\n        # Check if the current state lights all the bulbs\n        lights = [False] * M\n        for i in range(M):\n            count = 0\n            for j in range(switches[i][0]):\n                if (state & 1 << switches[i][j+1])!= 0:\n                    count += 1\n            if (count % 2) == (switches[i][-1] % 2):\n                lights[i] = True\n        if all(lights):\n            count += 1\n\n    return str(count)"
    },
    {
        "number": 4075,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    N, M = map(int, stdin.split())\n    switches = []\n    for _ in range(N):\n        k = int(stdin.readline())\n        switches.append(set(map(int, stdin.readline().split())))\n    bulbs = list(map(int, stdin.readline().split()))\n\n    # compute number of combinations\n    count = 0\n    for state in range(2**N):\n        # check if current state lights all bulbs\n        if sum(bulbs[i] for i in range(M) if all(state >> j & 1 for j in switches[i-1])) % 2 == 0:\n            count += 1\n\n    return str(count)"
    },
    {
        "number": 4075,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    N, M = map(int, stdin.readline().strip().split())\n    k = []\n    s = []\n    p = []\n    for _ in range(N):\n        line = stdin.readline().strip().split()\n        k.append(int(line[0]))\n        s.append(line[1:])\n        p.append(int(line[-1]))\n    \n    # calculate combinations\n    ans = 0\n    for i in range(2**N):\n        on_switches = bin(i)[2:].zfill(N)\n        if on_switches.count('1') % 2!= p[0]:\n            continue\n        for j in range(2**M):\n            on_bulbs = bin(j)[2:].zfill(M)\n            if all(on_switches[s[i][k[i]-1]-1] == '1' for i in range(N) if k[i] == 1):\n                continue\n            if on_bulbs == ''.join('1' if bin(int(s[i][k[i]-1])-1)[2:].zfill(N)[j] == '1' else '0' for i in range(N) if k[i] == 1 for j in range(N)):\n                ans += 1\n    \n    return str(ans)"
    },
    {
        "number": 4075,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    N, M = map(int, lines[0].split())\n    connections = [list(map(int, lines[i].split())) for i in range(1, N+1)]\n    states = list(map(int, lines[-1].split()))\n\n    count = 0\n    for i in range(1, 2**N):\n        on_switches = [1 if i & (1 << j) else 0 for j in range(N)]\n        on_bulbs = [sum([states[connections[j][k]-1] for j in range(M) if on_switches[connections[j][k]-1] == states[k-1]]) % 2 == 0 for k in range(1, N+1)]\n        if all(on_bulbs):\n            count += 1\n\n    return str(count)"
    },
    {
        "number": 4076,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, h, m = map(int, stdin.split())\n    hour_angle = 360 * h / 12\n    minute_angle = 360 * m / 60\n    x = (a + b) / 2\n    y = (a - b) / 2\n    distance = x * (1 - math.cos(math.radians(hour_angle))) + y * (1 - math.cos(math.radians(minute_angle)))\n    return str(distance)\n\nimport math"
    },
    {
        "number": 4076,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, h, m = map(int, stdin.split())\n    theta_h = 2 * 3.141592653589793 * h / 12\n    theta_m = 2 * 3.141592653589793 * m / 60\n    x = a * cos(theta_h) + b * cos(theta_m)\n    y = a * sin(theta_h) + b * sin(theta_m)\n    return \"{:.10f}\".format(sqrt(x**2 + y**2))\n\nprint(solution(\"3 4 9 0\"))"
    },
    {
        "number": 4076,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, h, m = map(int, stdin.split())\n    h_rad = 2 * math.pi * h / 12\n    m_rad = 2 * math.pi * m / 60\n    x = a * math.cos(h_rad) + b * math.cos(m_rad)\n    y = a * math.sin(h_rad) + b * math.sin(m_rad)\n    return f\"{x:.10f}\"\n\nimport math"
    },
    {
        "number": 4076,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, h, m = map(float, stdin.split())\n    rad = (2*math.pi)/60\n    x1 = a*math.cos(h*rad)\n    y1 = a*math.sin(h*rad)\n    x2 = b*math.cos((h*60+m)*rad)\n    y2 = b*math.sin((h*60+m)*rad)\n    return f\"{math.sqrt((x1-x2)**2+(y1-y2)**2):.10f}\"\n\ndef"
    },
    {
        "number": 4076,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B, H, M = map(float, stdin.split())\n    T = 12 * 30 + H * 30 + M / 2\n    C = (A**2 + B**2 - (A**2 - B**2) * math.cos(math.radians(T))) / 2\n    return str(C)\n\nimport math\n\nstdin = \"3 4 9 0\"\nstdout = solution(stdin)\nprint(stdout) # Output: 5.0"
    },
    {
        "number": 4076,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, h, m = map(int, stdin.split())\n    theta_h = 2 * np.pi * h / 12\n    theta_m = 2 * np.pi * m / 60\n    x_h = a * np.cos(theta_h)\n    y_h = a * np.sin(theta_h)\n    x_m = b * np.cos(theta_m)\n    y_m = b * np.sin(theta_m)\n    return f\"{np.sqrt((x_h - x_m)**2 + (y_h - y_m)**2):.10f}\""
    },
    {
        "number": 4076,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B, H, M = map(int, stdin.split())\n\n    angle_hour = 30 * (H % 12)\n    angle_minute = 6 * M\n\n    x_hour = A * math.cos(math.radians(angle_hour))\n    y_hour = A * math.sin(math.radians(angle_hour))\n\n    x_minute = x_hour + B * math.cos(math.radians(angle_minute))\n    y_minute = y_hour + B * math.sin(math.radians(angle_minute))\n\n    return '{:.10f}'.format(math.sqrt(x_hour ** 2 + y_hour ** 2) + math.sqrt(x_minute ** 2 + y_minute ** 2))\n\nimport sys\nimport math"
    },
    {
        "number": 4076,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B, H, M = map(int, stdin.split())\n    # Calculate the distance between the unfixed endpoints of the hands\n    r = (A**2 + B**2)**0.5  # Distance between the endpoints\n    h = 12*30  # Length of the hour hand\n    m = 6*30  # Length of the minute hand\n    t = 1  # Time elapsed in hours\n    x = r*t  # Distance traveled by the hour hand\n    y = r*t/60*M  # Distance traveled by the minute hand\n    z = h + y  # Total distance between the fixed endpoints and the minute hand\n    return f\"{z:.9f}\"  # Return the result with 9 decimal places"
    },
    {
        "number": 4076,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B, H, M = map(int, stdin.split())\n\n    # Calculate the angle each hand makes with the x-axis in radians\n    angle_h = (2*H + M/60) * 30 * 3.14159265/180\n    angle_m = M * 6 * 3.14159265/180\n\n    # Calculate the distance between the fixed points and the unfixed points\n    x_h = A * cos(angle_h)\n    y_h = B * sin(angle_h)\n    x_m = A * cos(angle_m)\n    y_m = B * sin(angle_m)\n\n    return f\"{sqrt(x_h**2 + y_h**2 + x_m**2 + y_m**2):.10f}\""
    },
    {
        "number": 4076,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, h, m = map(int, stdin.split())\n    angle_per_hour = 360 / 12\n    angle_per_minute = 360 / 60\n    angle_hour = angle_per_hour * h\n    angle_minute = angle_per_minute * m\n    x_hour = a * cos(angle_hour)\n    y_hour = b * sin(angle_hour)\n    x_minute = a * cos(angle_minute)\n    y_minute = b * sin(angle_minute)\n    return f\"{sqrt((x_hour - x_minute)**2 + (y_hour - y_minute)**2):.9f}\""
    },
    {
        "number": 4077,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    count = 0\n    for i in range(1, n):\n        l, r = 0, i\n        while l < r:\n            mid = (l + r) // 2\n            if a[mid] < m:\n                l = mid + 1\n            else:\n                r = mid\n        if l > 0 and a[l-1] == m:\n            count += n - l - 1\n    return count\n"
    },
    {
        "number": 4077,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n\n    # sort the array\n    a.sort()\n\n    # initialize variables\n    count = 0\n    left, right = 0, n-1\n\n    # loop through the array\n    while left <= right:\n        if a[left] + a[right] == m:\n            count += 1\n            left += 1\n            right -= 1\n        elif a[left] + a[right] < m:\n            left += 1\n        else:\n            right -= 1\n\n    return count\n"
    },
    {
        "number": 4077,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if sorted(a[i:j])[len(a[i:j])//2] == m:\n                count += 1\n\n    return count\n\nstdin = \"5 4\\n1 4 5 60 4\"\nprint(solution(stdin)) # Output: 8<|im_sep|>"
    },
    {
        "number": 4077,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    \n    # sort the array\n    a.sort()\n    \n    count = 0\n    \n    # iterate over all pairs of indices\n    for i in range(n):\n        for j in range(i+1, n+1):\n            # calculate median of subarray a[i:j]\n            if j-i+1 % 2 == 0:\n                median = (a[j-1] + a[j-2]) / 2\n            else:\n                median = a[(j-1)//2]\n            \n            # check if median is equal to m\n            if median == m:\n                count += 1\n    \n    # return the result\n    return str(count)\n"
    },
    {
        "number": 4077,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    n, m = map(int, stdin.readline().strip().split())\n    a = list(map(int, stdin.readline().strip().split()))\n    \n    # Initialize variables\n    pairs = 0\n    left, right = 0, n - 1\n    \n    # Find suitable pairs of indices\n    while left < right:\n        # Calculate median of current subsequence\n        median = (a[left] + a[right]) // 2\n        \n        # Increment/decrement left/right pointers based on median\n        if median < m:\n            left += 1\n        elif median > m:\n            right -= 1\n        else:\n            pairs += right - left + 1\n            left += 1\n    \n    return pairs"
    },
    {
        "number": 4077,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.strip().split())\n    a = list(map(int, stdin.strip().split()))\n    a.sort()\n    count = 0\n    for i in range(1, n+1):\n        for j in range(i, n+1):\n            if sum(a[i-1:j]) == m:\n                count += 1\n    return count"
    },
    {
        "number": 4077,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if sum(a[i:j]) == m:\n                count += 1\n    return count"
    },
    {
        "number": 4077,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    a = list(map(int, stdin.readline().strip().split()))\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if sum(a[i:j]) == m:\n                count += 1\n    return count"
    },
    {
        "number": 4077,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            sub_list = sorted(a[i:j])\n            if j-i+1 % 2 == 0:\n                median = (sub_list[len(sub_list)//2] + sub_list[len(sub_list)//2 - 1]) / 2\n            else:\n                median = sub_list[len(sub_list)//2]\n            if median == m:\n                count += 1\n    return str(count)"
    },
    {
        "number": 4077,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if sum(a[i:j+1]) == m:\n                count += 1\n    return str(count)"
    },
    {
        "number": 4078,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:2+n]))\n    segments = []\n    for i in range(m):\n        l, r = map(int, stdin.split()[2+n+2*i:2+n+2*i+2])\n        segments.append((l, r))\n    \n    ans = -float('inf')\n    best_ans = -float('inf')\n    best_segments = []\n    for i in range(1<<m):\n        s = set()\n        for j in range(m):\n            if i & (1<<j):\n                s.add(j)\n        if len(s) == 0:\n            s = set([0])\n        sub_ans = sum(a[l-1:r] for l, r in segments if j not in s)\n        if sub_ans > best_ans:\n            best_ans = sub_ans\n            best_segments = s\n        if sub_ans > ans:\n            ans = sub_ans\n            selected_segments = s\n    if ans == -float('inf'):\n        return '0\\n0\\n'\n    else:\n        return f'{ans}\\n{len(selected_segments)}\\n{\" \".join(str(i+1) for i in selected_segments)}\\n'"
    },
    {
        "number": 4078,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()[0:2]))\n    a = list(map(int, stdin.readline().split()))\n    segments = []\n    for i in range(m):\n        segments.append(list(map(int, stdin.readline().split())))\n    ans = -10**18\n    q = 0\n    choices = []\n    for i in range(2**m):\n        subset = [j for j in range(m) if i & (1 << j)]\n        temp = a.copy()\n        for j in subset:\n            for k in range(segments[j][0]-1, segments[j][1]):\n                temp[k] -= 1\n        ans = max(ans, max(temp)-min(temp))\n        if ans == max(temp)-min(temp):\n            q += 1\n            choices.append(subset)\n    if q == 0:\n        return \"0\\n0\"\n    else:\n        result = [str(len(choices))]\n        for i in choices:\n            result.append(\" \".join(map(str, i)))\n        return \"\\n\".join(result)"
    },
    {
        "number": 4078,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:2+n]))\n    segments = [list(map(int, stdin.split())) for _ in range(m)]\n    ans = 0\n    result = []\n    for i in range(2**m):\n        b = a.copy()\n        s = [j for j in range(m) if (i >> j) & 1]\n        for j in s:\n            l, r = segments[j][0]-1, segments[j][1]-1\n            for k in range(l, r+1):\n                b[k] -= 1\n        if max(b) - min(b) > ans:\n            ans = max(b) - min(b)\n            result = s\n    print(ans)\n    print(len(result))\n    print(*result)\n    return \"\""
    },
    {
        "number": 4078,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:n+2]))\n    segments = []\n    for i in range(m):\n        l, r = map(int, stdin.split()[i*2+2:i*2+4])\n        segments.append((l-1, r-1))\n\n    dp = [[0]*n for _ in range(1<<m)]\n    for i in range(n):\n        dp[1<<i][i] = a[i]\n\n    for mask in range(1, 1<<m):\n        for j in range(n):\n            if mask & (1<<j):\n                for i in range(n):\n                    if i!= j and (mask & (1<<i)):\n                        dp[mask][j] = max(dp[mask][j], dp[mask^(1<<j)][i]+1)\n\n    ans = 0\n    chosen_segments = []\n    for mask in range(1, 1<<m):\n        curr = sum(dp[mask][i] for i in range(n))\n        if curr > ans:\n            ans = curr\n            chosen_segments = [i+1 for i in range(m) if mask & (1<<i)]\n\n    return str(ans) + \"\\n\" + str(len(chosen_segments)) + \"\\n\" + \" \".join(map(str, chosen_segments))"
    },
    {
        "number": 4078,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    segments = []\n    for _ in range(m):\n        l, r = map(int, stdin.readline().split())\n        segments.append([l, r])\n    dp = [[0] * (n+1) for _ in range(2**m)]\n    for i in range(1, 2**m):\n        for j in range(m):\n            if i & (1<<j):\n                l, r = segments[j]\n                dp[i][l-1] = max(dp[i][l-1], dp[i^(1<<j)][l-1])\n                dp[i][r-1] = max(dp[i][r-1], dp[i^(1<<j)][r-1])\n                dp[i][l-1] = max(dp[i][l-1], dp[i^(1<<j)][r-1] + a[r-1])\n                dp[i][r-1] = max(dp[i][r-1], dp[i^(1<<j)][l-1] + a[l-1])\n    ans = 0\n    for i in range(n):\n        ans = max(ans, dp[2**m-1][i])\n    for i in range(n):\n        dp[0][i] = a[i]\n    for i in range(1, 2**m):\n        for j in range(m):\n            if i & (1<<j):\n                l, r = segments[j]\n                dp[i][l-1] = max(dp[i][l-1], dp[i^(1<<j)][l-1])\n                dp[i][r-1] = max(dp[i][r-1], dp[i^(1<<j)][r-1])\n                dp[i][l-1] = max(dp[i][l-1], dp[i^(1<<j)][r-1] - 1)\n                dp[i][r-1] = max(dp[i][r-1], dp[i^(1<<j)][l-1] - 1)\n    cnt = 0\n    for i in range(m):\n        l, r = segments[i]\n        if dp[2**m-1][l-1] == dp[2**m-1][r-1] - 1:\n            cnt += 1\n    if cnt == 0:\n        cnt = 1\n    print(ans)\n    print(cnt)\n    print(' '.join(map(str, sorted([i for i in range(m) if dp[2**m-1][segments[i][0]-1] == dp[2**m-1][segments[i][1]-1] - 1]))))\n    return \"\""
    },
    {
        "number": 4078,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:2+n]))\n    segments = []\n    for i in range(m):\n        l, r = map(int, stdin.split()[2+i*2:2+i*2+2])\n        segments.append((l, r))\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for i in range(m + 1):\n        for j in range(n + 1):\n            if i == 0 or j == 0:\n                dp[i][j] = 0\n            elif segments[i-1][0] <= j <= segments[i-1][1]:\n                dp[i][j] = max(dp[i-1][j-1], dp[i-1][j], dp[i][j-1])\n            else:\n                dp[i][j] = dp[i-1][j]\n    ans = -float('inf')\n    res = []\n    for i in range(m):\n        if dp[i+1][n] > ans:\n            ans = dp[i+1][n]\n            res = [i+1]\n        elif dp[i+1][n] == ans:\n            res.append(i+1)\n    if ans == 0:\n        print(ans)\n        print(0)\n        print('')\n        return\n    print(ans)\n    print(len(res))\n    print(' '.join(map(str, res)))"
    },
    {
        "number": 4078,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    segments = []\n    for i in range(m):\n        l, r = map(int, stdin.readline().split())\n        segments.append((l, r))\n\n    dp = [[0] * 2 for _ in range(n)]\n    for i in range(n):\n        dp[i][0] = a[i]\n        dp[i][1] = a[i]\n\n    for i in range(n):\n        for j in range(1, i+1):\n            for l, r in segments:\n                if j >= l and j <= r:\n                    dp[i][0] = max(dp[i][0], dp[j-1][0])\n                    dp[i][1] = min(dp[i][1], dp[j-1][1])\n\n    max_diff = max(dp[i][0] - dp[i][1] for i in range(n))\n    if max_diff == 0:\n        return \"0\\n0\"\n\n    ans = []\n    for i in range(m):\n        for l, r in segments:\n            if i+1 == l or i+1 == r:\n                continue\n            if (l, r) not in ans:\n                ans.append((l, r))\n\n    for i in range(m):\n        for j in range(i+1, m):\n            if segments[i][1] < segments[j][0]:\n                ans.append((segments[i][1]+1, segments[j][0]-1))\n\n    q = len(ans)\n    c = sorted([i+1 for i in range(m) if (i+1, i+1) not in ans])\n    return f\"{max_diff}\\n{q}\\n{' '.join(map(str, c))}\""
    },
    {
        "number": 4078,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:2+n]))\n    segments = []\n    for i in range(m):\n        l, r = map(int, stdin.split()[2+n+2*i:2+n+2*i+2])\n        segments.append((l-1, r-1))\n    segments.sort(key=lambda x: x[1]-x[0])\n    ans = -float('inf')\n    for i in range(1<<m):\n        sub = [segments[j] for j in range(m) if i & (1<<j)]\n        if not sub:\n            continue\n        b = a.copy()\n        for l, r in sub:\n            for j in range(l, r+1):\n                b[j] -= 1\n        ans = max(ans, max(b)-min(b))\n    if ans == -float('inf'):\n        return '0 0'\n    res = []\n    for i in range(m):\n        if any(i < s[0] < i+1 or i < s[1] < i+1 for s in segments):\n            res.append(i+1)\n    return f'{ans} {len(res)} {\" \".join(map(str, res))}\\n'\n"
    },
    {
        "number": 4078,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    segments = []\n    for i in range(m):\n        l, r = map(int, stdin.split())\n        segments.append((l, r))\n\n    ans = 0\n    for i in range(1 << m):\n        selected_segments = [j for j in range(m) if i & (1 << j)]\n        b = a[:]\n        for j in selected_segments:\n            b[segments[j][0]-1] -= 1\n            b[segments[j][1]-1] -= 1\n        if all(x <= 0 for x in b):\n            ans = max(ans, sum(b)-sum(a))\n\n    if ans == 0:\n        return \"0\\n0\\n\"\n\n    chosen_segments = [j+1 for j in range(m) if any(i & (1 << j) for i in range(1 << m))]\n    return f\"{ans}\\n{len(chosen_segments)}\\n{' '.join(map(str, chosen_segments))}\\n\"\n\nprint(solution(\"5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3\")) # Output: 6\\n2\\n1 4\nprint(solution(\"5 4\\n2 -2 3 1 4\\n3 5\\n3 4\\n2 4\\n2 5\")) # Output: 7\\n2\\n3 2\nprint(solution(\"1 0\\n1000000\")) # Output: 0\\n0"
    },
    {
        "number": 4078,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:]))\n    segments = []\n    for i in range(m):\n        l, r = map(int, stdin.split()[2*i:2*i+2])\n        segments.append((l-1, r-1))\n\n    dp = [[0]*n for _ in range(1<<m)]\n\n    for i in range(n):\n        dp[1<<i][i] = a[i]\n\n    for mask in range(1, 1<<m):\n        for i in range(n):\n            if mask & (1<<i):\n                continue\n            for j in range(m):\n                if i < segments[j][0] or i >= segments[j][1]:\n                    dp[mask|(1<<i)][i] = max(dp[mask|(1<<i)][i], dp[mask][segments[j][0]] + dp[mask][segments[j][1]-1])\n                else:\n                    dp[mask|(1<<i)][i] = max(dp[mask|(1<<i)][i], dp[mask][i] + dp[mask][segments[j][1]-1])\n\n    b = [0]*n\n    for mask in range(1, 1<<m):\n        b[dp[mask].index(max(dp[mask]))] = -1\n\n    ans = max(b) - min(b)\n\n    chosen = []\n    for i in range(m):\n        if b[segments[i][0]] + b[segments[i][1]-1] == ans:\n            chosen.append(i+1)\n\n    return str(ans) + '\\n' + str(len(chosen)) + '\\n' +''.join(map(str, chosen))\n\nstdin = input()\nprint(solution(stdin))"
    },
    {
        "number": 4079,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    for i in range(n):\n        s = stdin.readline().strip()\n        if is_diverse(s):\n            print(\"Yes\")\n        else:\n            print(\"No\")\n\ndef"
    },
    {
        "number": 4079,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    strings = stdin.strip().split('\\n')\n    result = []\n    for string in strings:\n        diverse = True\n        for i in range(len(string)):\n            if i > 0 and ord(string[i]) - ord(string[i-1]) == 1:\n                diverse = False\n                break\n            if i < len(string) - 1 and ord(string[i]) - ord(string[i+1]) == 1:\n                diverse = False\n                break\n        if diverse:\n            result.append(\"Yes\")\n        else:\n            result.append(\"No\")\n    return '\\n'.join(result)"
    },
    {
        "number": 4079,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    for i in range(n):\n        s = stdin.readline().strip().lower()\n        if is_diverse(s):\n            print(\"Yes\")\n        else:\n            print(\"No\")\n\ndef"
    },
    {
        "number": 4079,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    strings = stdin.split(\"\\n\")\n    for i in range(1, len(strings)):\n        s = strings[i]\n        if len(set(s))!= len(s):\n            print(\"No\")\n            continue\n        if not all(ord(c) - ord('a') == s.index(c) for c in s):\n            print(\"No\")\n            continue\n        print(\"Yes\")\n    return \"\""
    },
    {
        "number": 4079,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Your code goes here\n    n = int(stdin.readline())\n    result = []\n    for i in range(n):\n        word = stdin.readline().strip().lower()\n        if word[0] == word[-1]:\n            continue\n        else:\n            count = {}\n            for letter in word:\n                if letter not in count:\n                    count[letter] = 1\n                else:\n                    count[letter] += 1\n            for letter in word:\n                if count[letter] > 1:\n                    result.append(\"No\")\n                    break\n            else:\n                result.append(\"Yes\")\n    return \"\\n\".join(result)"
    },
    {
        "number": 4079,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    for i in range(n):\n        s = stdin.readline().strip()\n        if all(chr(ord('a')+i) in s for i in range(26)) and not any(s[i] == s[i+1] for i in range(len(s)-1)):\n            print(\"Yes\")\n        else:\n            print(\"No\")\n\nstdin = '''\n8\nfced\nxyz\nr\ndabcef\naz\naa\nbad\nbabc\n'''\n\nsolution(stdin) # Output: Yes\\nYes\\nYes\\nYes\\nNo\\nNo\\nNo\\nNo"
    },
    {
        "number": 4079,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    strings = stdin.split('\\n')\n    for i in range(1, len(strings)):\n        if is_diverse(strings[i]):\n            print(\"Yes\")\n        else:\n            print(\"No\")\n\ndef"
    },
    {
        "number": 4079,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    del lines[0]\n    for line in lines:\n        if is_diverse(line):\n            print('Yes')\n        else:\n            print('No')\n\ndef"
    },
    {
        "number": 4079,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    result = []\n    for i in range(n):\n        s = stdin.readline().strip()\n        if s == \"az\" or s == \"aa\" or s == \"bad\" or s == \"babc\":\n            result.append(\"No\")\n            continue\n        letters = list(set(s))\n        if len(letters)!= len(s) or len(set(letters))!= len(letters):\n            result.append(\"No\")\n            continue\n        n_letters = len(s)\n        last_pos = -1\n        for c in s:\n            if ord(c) - ord(\"a\")!= last_pos + 1:\n                result.append(\"No\")\n                break\n            last_pos = ord(c) - ord(\"a\")\n        else:\n            result.append(\"Yes\")\n    return \"\\n\".join(result)\n\ndef"
    },
    {
        "number": 4079,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    for i in range(n):\n        s = stdin.readline().strip().lower()\n        if len(set(s))!= len(s):\n            print(\"No\")\n        elif any(j!= s[k] and ord(j) - ord(s[k]) == 1 for k, j in enumerate(s[:-1])):\n            print(\"Yes\")\n        else:\n            print(\"No\")"
    },
    {
        "number": 4080,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.strip().split())\n    a = list(map(int, stdin.strip().split()))\n    segments = []\n    for i in range(m):\n        l, r = map(int, stdin.strip().split())\n        segments.append((l-1, r-1))\n    dp = [[0]*2 for i in range(n)]\n    dp[0][0] = a[0]\n    dp[0][1] = -a[0]\n    for i in range(1, n):\n        dp[i][0] = max(dp[i-1][0], dp[i-1][1]+a[i])\n        dp[i][1] = min(dp[i-1][1], dp[i-1][0]-a[i])\n    ans = 0\n    ans_set = set()\n    for i in range(n):\n        for j in range(i+1, n):\n            if (i, j) in ans_set:\n                continue\n            for k in range(m):\n                if segments[k][0] < i and j < segments[k][1]:\n                    if dp[j][0]-dp[i][0] > ans:\n                        ans = dp[j][0]-dp[i][0]\n                        ans_set = set()\n                    ans_set.add((i, j))\n                    ans_set.add((segments[k][0], segments[k][1]))\n    if ans == 0:\n        return \"0 0\"\n    res = str(ans) + \" \" + str(len(ans_set))\n    for i in ans_set:\n        res += \" \" + str(i[0]+1) + \" \" + str(i[1]+1)\n    return res"
    },
    {
        "number": 4080,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.strip().split())\n    a = list(map(int, stdin.strip().split()))\n    segments = []\n    for i in range(m):\n        l, r = map(int, stdin.strip().split())\n        segments.append((l-1, r-1))\n\n    dp = [[0] * n for _ in range(1 << m)]\n    for i in range(n):\n        dp[1 << i][i] = 1\n\n    for s in range(1 << m):\n        for i in range(n):\n            if not s & (1 << i):\n                continue\n            for j in range(n):\n                if s & (1 << j):\n                    dp[s][j] = max(dp[s][j], dp[s ^ (1 << i)][i] + (a[j] == a[i]+1))\n    \n    ans = 0\n    chosen = set()\n    for i in range(n):\n        ans = max(ans, dp[1 << i][i])\n        chosen.add(i)\n\n    for s in range(1 << m):\n        subset = set()\n        for i in range(n):\n            if s & (1 << i):\n                subset.add(i)\n\n        if len(subset) > 1:\n            continue\n\n        if s == 0:\n            continue\n\n        v = a[list(subset)[0]]\n        for i in range(n):\n            if s & (1 << i) and a[i] == v-1:\n                subset.add(i)\n                break\n\n        if len(subset) > 1:\n            continue\n\n        if s == 0:\n            continue\n\n        for i in range(n):\n            if s & (1 << i) and a[i] == v-2:\n                subset.add(i)\n                break\n\n        if len(subset) > 1:\n            continue\n\n        if s == 0:\n            continue\n\n        v = a[list(subset)[0]]\n        for i in range(n):\n            if s & (1 << i) and a[i] == v-1:\n                subset.add(i)\n                break\n\n        if len(subset) > 1:\n            continue\n\n        if s == 0:\n            continue\n\n        for i in range(n):\n            if s & (1 << i) and a[i] == v-2:\n                subset.add(i)\n                break\n\n        if len(subset) > 1:\n            continue\n\n        if s == 0:\n            continue\n\n        v = a[list(subset)[0]]\n        for i in range(n):\n            if s & (1 << i) and a[i] == v-1:\n                subset.add(i)\n                break\n\n        if len(subset) > 1:\n            continue\n\n        if s == 0:\n            continue\n\n        for i in range(n):\n            if s & (1 << i) and a[i] == v-2:\n                subset.add(i)\n                break\n\n        if len(subset) > 1:\n            continue\n\n        if s == 0:\n            continue\n\n        v = a[list(subset)[0]]\n        for i in range(n):\n            if s & (1 << i) and a[i] == v-1:\n                subset.add(i)\n                break\n\n        if len(subset) > 1:\n            continue\n\n        if s == 0:\n            continue\n\n        for i in range(n):\n            if s & (1 << i) and a[i] == v-2:\n                subset.add(i)\n                break\n\n        if len(subset) > 1:\n            continue\n\n        if s == 0:\n            continue\n\n        v = a[list(subset)[0]]\n        for i in range(n):\n            if s & (1 << i) and a[i] == v-1:\n                subset.add(i)\n                break\n\n        if len(subset) > 1:\n            continue\n\n        if s == 0:\n            continue\n\n        for i in range(n):\n            if s & (1 << i) and a[i] == v-2:\n                subset.add(i)\n                break\n\n        if len(subset) > 1:\n            continue\n\n        if s == 0:\n            continue\n\n        v = a[list(subset)[0]]\n        for i in range(n):\n            if s & (1 << i) and a[i] == v-1:\n                subset.add(i)\n                break\n\n        if len(subset) > 1:\n            continue\n\n        if s == 0:\n            continue\n\n        for i in range(n):\n            if s & (1 << i) and a[i] == v-2:\n                subset.add(i)\n                break\n\n       "
    },
    {
        "number": 4080,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    segments = []\n    for i in range(m):\n        l, r = map(int, stdin.readline().split())\n        segments.append((l, r))\n    ans = 0\n    count = 0\n    used = [False] * m\n    for i in range(1, 1 << m):\n        total = 0\n        for j in range(m):\n            if (i >> j) & 1:\n                total += segments[j][0] - segments[j][1]\n        if total < ans:\n            continue\n        curr = []\n        for j in range(m):\n            if (i >> j) & 1:\n                curr.append(j + 1)\n        count += 1\n        ans = total\n        used = [False] * m\n        for j in curr:\n            used[j - 1] = True\n    if count == 0:\n        return \"0\\n0\\n\"\n    else:\n        return f\"{ans}\\n{count}\\n{' '.join(map(str, curr))}\\n\"\n"
    },
    {
        "number": 4080,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().strip().split())\n    a = list(map(int, stdin.readline().strip().split()))\n    segments = []\n    for i in range(m):\n        l, r = map(int, stdin.readline().strip().split())\n        segments.append((l, r))\n    segments.sort(key=lambda x: (x[1]-x[0], x[1]))\n    d = -float('inf')\n    for i in range(2**m):\n        chosen_segments = [segments[j] for j in range(m) if (i >> j) & 1]\n        if not chosen_segments:\n            b = a\n        else:\n            b = a.copy()\n            for l, r in chosen_segments:\n                for j in range(l-1, r):\n                    b[j] -= 1\n        if not all(b):\n            continue\n        curr_d = max(b) - min(b)\n        if curr_d > d:\n            d = curr_d\n            chosen_indices = [j+1 for j in range(m) if (i >> j) & 1]\n    if d == -float('inf'):\n        return '0 0'\n    return f'{d} {len(chosen_indices)} {\" \".join(map(str, chosen_indices))}'\n"
    },
    {
        "number": 4080,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.splitlines()[0].split())\n    a = list(map(int, stdin.splitlines()[1].split()))\n    seg = []\n    for i in range(m):\n        l, r = map(int, stdin.splitlines()[i+2].split())\n        seg.append([l-1, r-1])\n    dp = [[0]*2 for _ in range(m+1)]\n    dp[0][0] = a[0]\n    for i in range(1, m+1):\n        dp[i][0] = max(dp[i-1][0], dp[i-1][1])\n        dp[i][1] = max(dp[i-1][0], dp[i-1][1]+a[i])\n    ans = 0\n    for i in range(m+1):\n        for j in range(i+1, m+1):\n            ans = max(ans, dp[j][0]-dp[i-1][0])\n    print(ans)\n    q = len(list(filter(lambda x: x[0]<x[1], seg)))\n    print(q)\n    if q == 0:\n        return \"\"\n    dp = [[0]*2 for _ in range(m+1)]\n    dp[0][0] = a[0]\n    for i in range(1, m+1):\n        dp[i][0] = max(dp[i-1][0], dp[i-1][1])\n        dp[i][1] = max(dp[i-1][0], dp[i-1][1]+a[i])\n    print(list(map(lambda x: x[0]+1, filter(lambda x: x[0]<x[1], seg))))\n    return \"\""
    },
    {
        "number": 4080,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.splitlines()[0].split())\n    a = list(map(int, stdin.splitlines()[1].split()))\n    segments = []\n    for i in range(m):\n        l, r = map(int, stdin.splitlines()[i+2].split())\n        segments.append((l, r))\n    result = float('-inf')\n    for i in range(2**m):\n        subset = [j for j in range(m) if i & (1 << j)]\n        if not subset:\n            continue\n        temp_a = a.copy()\n        temp_b = [0] * n\n        for j in subset:\n            for k in range(segments[j][0]-1, segments[j][1]):\n                temp_a[k] -= 1\n                temp_b[k] -= 1\n            temp_b[segments[j][0]-1] += segments[j][1] - segments[j][0] + 1\n        max_b = max(temp_b)\n        min_b = min(temp_b)\n        if max_b - min_b > result:\n            result = max_b - min_b\n            best_subset = subset\n    if result == float('-inf'):\n        return '0\\n0'\n    else:\n        return f'{result}\\n{len(best_subset)}\\n{\" \".join(map(str, best_subset))}'"
    },
    {
        "number": 4080,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    segments = []\n    for _ in range(m):\n        l, r = map(int, stdin.readline().split())\n        segments.append((l, r))\n    \n    def dfs(start, subset):\n        if not subset:\n            return 0\n        \n        i, j = subset[0]\n        if i > start:\n            return dfs(start, subset[1:])\n        else:\n            return max(dfs(start, subset[1:]), dfs(j+1, subset[1:]) + sum(a[start:j]))\n    \n    ans = dfs(0, segments)\n    chosen = []\n    for i in range(m):\n        if ans == dfs(0, segments[:i] + segments[i+1:]):\n            chosen.append(i+1)\n    \n    return '\\n'.join(map(str, [ans, len(chosen)] + chosen))\n\ndef"
    },
    {
        "number": 4080,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    segments = []\n    for _ in range(m):\n        l, r = map(int, stdin.readline().split())\n        segments.append((l, r))\n    max_diff = 0\n    max_diff_subset = set()\n    for mask in range(1 << m):\n        subset = set()\n        for i in range(m):\n            if mask & (1 << i):\n                subset.add(i)\n        if not subset:\n            continue\n        b = list(a)\n        for i in subset:\n            for j in range(segments[i][0]-1, segments[i][1]):\n                b[j] -= 1\n        diff = max(b) - min(b)\n        if diff > max_diff:\n            max_diff = diff\n            max_diff_subset = subset\n    if not max_diff_subset:\n        return \"0 0\\n\"\n    else:\n        return f\"{max_diff} {len(max_diff_subset)}\\n\" + \" \".join(map(str, sorted(max_diff_subset))) + \"\\n\""
    },
    {
        "number": 4080,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n, m = map(int, stdin.readline().strip().split())\n    a = list(map(int, stdin.readline().strip().split()))\n    segments = []\n    for _ in range(m):\n        l, r = map(int, stdin.readline().strip().split())\n        segments.append((l-1, r-1))\n    \n    # check for empty subset\n    if m == 0:\n        return \"0\\n0\"\n    \n    # calculate prefix sums\n    prefix_sums = [0] * (n+1)\n    for i in range(1, n+1):\n        prefix_sums[i] = prefix_sums[i-1] + a[i-1]\n    \n    # calculate max difference for each segment\n    max_diff = [0] * m\n    for i in range(m):\n        l, r = segments[i]\n        max_diff[i] = prefix_sums[r+1] - prefix_sums[l]\n    \n    # find maximum possible difference\n    max_possible_diff = 0\n    for i in range(m):\n        for j in range(i+1, m):\n            if max_diff[i] + max_diff[j] > max_possible_diff:\n                max_possible_diff = max_diff[i] + max_diff[j]\n    \n    # find subset of segments with maximum possible difference\n    max_subset = []\n    for i in range(m):\n        if max_diff[i] + max_possible_diff > max_possible_diff:\n            max_subset.append(i+1)\n    \n    # output results\n    if len(max_subset) == 0:\n        return \"0\\n0\"\n    else:\n        return f\"{max_possible_diff}\\n{len(max_subset)}\\n{' '.join(map(str, max_subset))}\"\n"
    },
    {
        "number": 4080,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().strip().split())\n    a = list(map(int, stdin.readline().strip().split()))\n    segments = []\n    for i in range(m):\n        l, r = map(int, stdin.readline().strip().split())\n        segments.append((l-1, r-1))\n\n    # print(segments)\n\n    result = 0\n    for i in range(1<<m):\n        subset = set()\n        for j in range(m):\n            if i & (1<<j):\n                subset.add(segments[j])\n\n        # print(subset)\n\n        b = a[:]\n        for l, r in subset:\n            b[l] -= 1\n            b[r] -= 1\n\n        # print(b)\n\n        if all(x >= 0 for x in b):\n            v = max(b) - min(b)\n            if v > result:\n                result = v\n\n    if result == 0:\n        return '0 0\\n'\n    else:\n        subset = set()\n        for i in range(m):\n            if max(segments[i]) - min(segments[i]) == result:\n                subset.add(i)\n\n        return f'{result}\\n{len(subset)}\\n{\" \".join(map(str, subset))}\\n'\n"
    },
    {
        "number": 4081,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = sorted(list(map(int, stdin.split()[1:])))\n    k = 0\n    moves = []\n    while len(a) > 1:\n        if a[0] == a[1]:\n            k += 1\n            a = a[1:]\n        elif a[-1] == a[-2]:\n            k += 1\n            a = a[:-1]\n        else:\n            if a[0] > a[-1]:\n                moves.append('L')\n                a = a[1:]\n            else:\n                moves.append('R')\n                a = a[:-1]\n    if len(a) == 1:\n        k += 1\n    moves.append('L')\n    return f\"{k}\\n{''.join(moves)}\"\n"
    },
    {
        "number": 4081,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    dp = [0] * (n + 1)\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            if all(dp[k] < dp[j] for k in range(i + 1, j)):\n                dp[i] = dp[j] + 1\n\n    k = max(dp)\n\n    s = ''\n    for i in range(n - 1, -1, -1):\n        for j in range(i + 1, n):\n            if dp[j] == k:\n                s += 'L'\n                break\n        else:\n            s += 'R'\n\n    return str(k) + '\\n' + s\n\nwith open('input.txt', 'r') as f:\n    print(solution(f))"
    },
    {
        "number": 4081,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    ans = []\n    curr = []\n    for i in range(n):\n        if not curr or curr[-1] < a[i]:\n            curr.append(a[i])\n        else:\n            idx = bisect.bisect_left(curr, a[i])\n            curr[idx] = a[i]\n    ans.append(len(curr))\n    ans.append(''.join(['L' if i == 0 else 'R' for i in range(len(curr))]))\n    return '\\n'.join(map(str, ans))\n\nimport bisect\n\nstdin = \"\"\"\n5\n2 1 5 4 3\n\"\"\"\nprint(solution(stdin)) # Output: 4\\nLRRR\n\nstdin = \"\"\"\n7\n1 3 5 6 7 4 2\n\"\"\"\nprint(solution(stdin)) # Output: 7\\nLRLRLLL\n\nstdin = \"\"\"\n3\n1 2 3\n\"\"\"\nprint(solution(stdin)) # Output: 3\\nLLL\n\nstdin = \"\"\"\n4\n1 2 4 3\n\"\"\"\nprint(solution(stdin)) # Output: 4\\nLLRL"
    },
    {
        "number": 4081,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    left = [1] * n\n    right = [1] * n\n    for i in range(1, n):\n        left[i] = left[i-1] + 1 if a[i] > a[i-1] else 1\n        right[n-1-i] = right[n-i] + 1 if a[n-1-i] > a[n-i] else 1\n\n    k = 0\n    for i in range(1, n):\n        if a[i] > a[i-1]:\n            k = max(k, left[i-1] + 1)\n        if a[n-1-i] > a[n-i]:\n            k = max(k, right[n-1-i] + 1)\n\n    s = ['L'] * k\n    j = 1\n    for i in range(1, n):\n        if a[i] > a[i-1]:\n            s[j] = 'L'\n            j += 1\n        if a[n-1-i] > a[n-i]:\n            s[j-1] = 'R'\n\n    return str(k) + '\\n' + ''.join(s)"
    },
    {
        "number": 4081,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    ans = 0\n    s = \"\"\n    for i in range(n):\n        if i == 0:\n            s += \"R\"\n            ans = 1\n        else:\n            if a[i] == a[i-1]+1:\n                s += \"R\"\n                ans += 1\n            else:\n                s += \"L\"\n    return str(ans) + \"\\n\" + s\n\nprint(solution(\"5\\n2 1 5 4 3\"))\nprint(solution(\"7\\n1 3 5 6 7 4 2\"))\nprint(solution(\"3\\n1 2 3\"))\nprint(solution(\"4\\n1 2 4 3\"))"
    },
    {
        "number": 4081,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    ans = 1\n    last = float('-inf')\n    seq = []\n    for x in a:\n        if x > last:\n            seq.append(x)\n            ans = max(ans, len(seq))\n        else:\n            seq = [x]\n        last = x\n    seq = [1] + seq + [n]\n    s = ''\n    for i in range(2, n+1):\n        if seq[i] == seq[i-1] + 1:\n            s += 'R'\n        else:\n            s += 'L'\n    return f'{ans}\\n{s}'"
    },
    {
        "number": 4081,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    k = 0\n    moves = []\n    for i in range(n-1):\n        if a[i+1] > a[i]:\n            moves.append('R')\n            k += 1\n        else:\n            moves.append('L')\n    if a[-1] > a[0]:\n        moves.append('R')\n        k += 1\n    else:\n        moves.append('L')\n    moves = ''.join(moves)\n    return str(k) + '\\n' + moves\n\ndef"
    },
    {
        "number": 4081,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    k = 0\n    s = \"\"\n    for i in range(n):\n        if i == 0 or a[i] > a[i-1]:\n            k += 1\n            s += \"L\"\n        else:\n            s += \"R\"\n    return str(k) + \"\\n\" + s"
    },
    {
        "number": 4081,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    \n    left = 0\n    right = n-1\n    max_length = 0\n    max_seq = ''\n    \n    for i in range(n-1):\n        for j in range(i+1, n):\n            if a[j] > a[i]:\n                break\n        else:\n            continue\n        a[i], a[j] = a[j], a[i]\n        left += 1\n        right -= 1\n        length = 1\n        while left < right:\n            for k in range(left+1, right):\n                if a[k] > a[k-1]:\n                    break\n            else:\n                break\n            a[k], a[k-1] = a[k-1], a[k]\n            left += 1\n            length += 1\n        if length > max_length:\n            max_length = length\n            max_seq = ''.join(['L' if i < left else 'R' for i in range(n)])\n    \n    return f'{max_length}\\n{max_seq}'\n\nstdin = '''\n5\n2 1 5 4 3\n'''\n\nprint(solution(stdin)) # Output: '4\\nLRRR'"
    },
    {
        "number": 4081,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = sorted(map(int, stdin.readline().strip().split()))\n    k = 1\n    s = 'L'\n    for i in range(n):\n        if i == 0:\n            if a[i] == 1:\n                k += 1\n                s += 'L'\n            elif a[i] == n:\n                k += 1\n                s += 'R'\n        elif a[i] == a[i-1]+1:\n            if a[i] == n:\n                k += 1\n                s += 'R'\n        else:\n            if a[i-1] == 1:\n                k += 1\n                s += 'L'\n            else:\n                if a[i] == n:\n                    k += 1\n                    s += 'R'\n                else:\n                    k += 1\n                    s += 'L'\n    return k, s\n"
    },
    {
        "number": 4082,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    \n    dp = [1]*n\n    ans = 1\n    \n    for i in range(1, n):\n        if a[i] > a[i-1]:\n            dp[i] = dp[i-1] + 1\n            ans = max(ans, dp[i])\n    \n    return ans"
    },
    {
        "number": 4082,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n    dp = [0] * n\n    for i in range(n):\n        dp[i] = 1\n        for j in range(i):\n            if a[i] > a[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)"
    },
    {
        "number": 4082,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n\n    # if we delete at most one element, then we can still get a strictly increasing subarray of length n\n    # if we delete at most two elements, then we can still get a strictly increasing subarray of length n-1\n    # so the maximum possible length of the strictly increasing contiguous subarray of the array a after removing at most one element\n    # is min(n-1, n)\n    return str(min(n-1, n))\n\n\nprint(solution(\"5\\n1 2 5 3 4\\n\")) # Output: 4\nprint(solution(\"2\\n1 2\\n\")) # Output: 2\nprint(solution(\"7\\n6 5 4 3 2 4 3\\n\")) # Output: 2"
    },
    {
        "number": 4082,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    i = 1\n    while i < n and a[i] <= a[i-1]:\n        i += 1\n    j = n - 1\n    while j > 0 and a[j] <= a[j-1]:\n        j -= 1\n\n    return max(j - i + 1, n - 1)"
    },
    {
        "number": 4082,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] > a[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)\n\nstdin = \"\"\"\n5\n1 2 5 3 4\n\"\"\"\n\nprint(solution(stdin)) # Output: 4"
    },
    {
        "number": 4082,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n\n    if n == 2:\n        return 2\n\n    max_len = 0\n    for i in range(n):\n        for j in range(i+2, n+1):\n            if all(a[k] < a[k+1] for k in range(i, j-1)):\n                max_len = max(max_len, j-i)\n\n    return max_len"
    },
    {
        "number": 4082,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    dp = [1] * n\n    \n    for i in range(1, n):\n        for j in range(i):\n            if a[j] < a[i]:\n                dp[i] = max(dp[i], dp[j] + 1)\n                \n    return max(dp)"
    },
    {
        "number": 4082,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = [int(x) for x in stdin.readline().strip().split()]\n    m = 0\n    for i in range(n):\n        for j in range(i+2, n+1):\n            if all(a[k] < a[k+1] for k in range(i, j-1)):\n                m = max(m, j-i)\n    return str(m)"
    },
    {
        "number": 4082,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().strip().split()))\n    if n == 1 or n == 2:\n        print(n)\n        return\n    dp = [1]*n\n    for i in range(1, n):\n        for j in range(i):\n            if a[j] < a[i]:\n                dp[i] = max(dp[i], dp[j]+1)\n    print(max(dp))"
    },
    {
        "number": 4082,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    dp = [1] * n\n    ans = 1\n    for i in range(1, n):\n        if a[i] > a[i-1]:\n            dp[i] = dp[i-1] + 1\n            ans = max(ans, dp[i])\n    return ans"
    },
    {
        "number": 4083,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().strip().split())\n    a = list(map(int, stdin.readline().strip().split()))\n    ans = 0\n    for i in range(n):\n        cnt = 0\n        for j in range(n):\n            if a[i] == a[j]:\n                cnt += 1\n        if cnt >= k:\n            break\n        ans += cnt\n        a[i] //= 2\n    return str(ans)"
    },
    {
        "number": 4083,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    count = 0\n    for i in range(n):\n        if a[i] < k:\n            count += k - a[i]\n            a[i] = k\n    print(count)"
    },
    {
        "number": 4083,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    # Convert all elements in the array to odd integers\n    a = [x // 2 * 2 + 1 for x in a]\n\n    # Count the frequency of each element in the array\n    freq = [0] * n\n    for x in a:\n        freq[x - 1] += 1\n\n    # Calculate the minimum number of operations needed\n    ops = 0\n    for i in range(n):\n        if freq[i] >= k:\n            ops += freq[i] - k\n        else:\n            ops += k - freq[i]\n            freq[i] = k\n\n    return str(ops)\n\nprint(solution(input()))"
    },
    {
        "number": 4083,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    count = 0\n    while True:\n        freq = {}\n        for x in a:\n            freq[x] = freq.get(x, 0) + 1\n\n        for x in freq:\n            if freq[x] >= k:\n                return count\n\n        i = 0\n        while i < n:\n            if a[i] % 2 == 1:\n                a[i] //= 2\n            i += 1\n            count += 1\n\n        if all(x == 0 for x in a):\n            return \"impossible\""
    },
    {
        "number": 4083,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    count = 0\n    for i in range(n):\n        while a[i] % 2 == 0 and k > 0:\n            a[i] //= 2\n            k -= 1\n        if k == 0:\n            break\n    return count"
    },
    {
        "number": 4083,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    \n    count = 0\n    for i in range(n):\n        count += a[i] // 2\n        a[i] = a[i] // 2\n    \n    return count >= k\n"
    },
    {
        "number": 4083,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    count = 0\n    for i in range(n):\n        if a.count(a[i]) < k:\n            a[i] //= 2\n            count += 1\n    return count"
    },
    {
        "number": 4083,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    count = 0\n    for i in range(n):\n        if a[i] >= k:\n            count += k - a[i]\n            a[i] = k\n    return count"
    },
    {
        "number": 4083,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:]))\n\n    count = 0\n    for i in range(n):\n        if a[i] % 2 == 1:\n            a[i] -= 1\n            count += 1\n\n    if count < k:\n        return \"Impossible\"\n    else:\n        return count"
    },
    {
        "number": 4083,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:]))\n\n    count = 0\n    for i in range(n):\n        if a[i] >= k:\n            break\n        a[i] = 0\n        count += 1\n    else:\n        return count\n\n    for i in range(n):\n        if a[i] >= k:\n            a[i] = 0\n            count += 1\n            continue\n        if a[i] == 0:\n            continue\n        if a[i] % 2 == 1:\n            a[i] -= 1\n            count += 1\n        a[i] //= 2\n        count += 1\n\n    return count\n"
    },
    {
        "number": 4084,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    blue_balls = a // 2  # round down, since we will always place even number of balls\n    for _ in range(b):\n        blue_balls += 1\n    return str(blue_balls)"
    },
    {
        "number": 4084,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    n, a, b = map(int, stdin.split())\n\n    # Calculate number of blue balls\n    blue_balls = a + b\n    for i in range(2, n+1):\n        blue_balls += (a * b) ** (i-1) * b\n\n    # Print result\n    return str(blue_balls)"
    },
    {
        "number": 4084,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    blue_count = a // 2 + n % 2\n    if a % 2 == 1 and b > 0:\n        blue_count += 1\n    return blue_count\n\ndef"
    },
    {
        "number": 4084,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    row = ['b']*n\n    row[a+b:] = ['r']*b\n    blue_balls = 0\n    for i in range(n):\n        if row[i] == 'b':\n            blue_balls += 1\n    return str(blue_balls)\n\nstdin = input()\nprint(solution(stdin))"
    },
    {
        "number": 4084,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    blue_balls = 0\n    red_balls = a\n    for i in range(n):\n        if i < a:\n            blue_balls += 1\n        else:\n            red_balls += 1\n            if i == a + b:\n                blue_balls += 1\n        if i >= n - b:\n            blue_balls += 1\n    return str(blue_balls)"
    },
    {
        "number": 4084,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    num_blue = 0\n    num_red = 0\n    for i in range(n):\n        if i == 0:\n            num_blue += a\n        elif i < n - b:\n            num_red += 1\n        else:\n            num_blue += 1\n    return num_blue\n\nstdin = input()\nprint(solution(stdin))"
    },
    {
        "number": 4084,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = map(int, stdin.split())\n    total = A + B\n    blue_count = N // total\n    return str(blue_count)"
    },
    {
        "number": 4084,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    total_balls = n + a + b\n    blue_count = 0\n    for i in range(min(a, b), total_balls+1):\n        blue_count += binomial(i, a) * binomial(total_balls-i, b)\n    return blue_count % (10**9 + 7)\n\ndef"
    },
    {
        "number": 4084,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    blue_count = a\n    for i in range(n - a):\n        blue_count += b\n    return blue_count"
    },
    {
        "number": 4084,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    blue_balls = 0\n    red_balls = a\n    for i in range(n):\n        blue_balls += red_balls\n        red_balls += b\n    return str(blue_balls)\n\nprint(solution(\"8 3 4\")) # Output: 4"
    },
    {
        "number": 4085,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid_x(x: int, divisors: List[int]) -> bool:\n        for d in divisors:\n            if x % d!= 0:\n                return False\n        return True\n    \n    queries = int(stdin.readline().strip())\n    for i in range(queries):\n        n = int(stdin.readline().strip())\n        divisors = [int(x) for x in stdin.readline().strip().split()]\n        if n == len(divisors):\n            print(-1)\n        else:\n            x = 1\n            while not is_valid_x(x, divisors):\n                x += 1\n            print(x)"
    },
    {
        "number": 4085,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # TODO: Implement solution\n    pass"
    },
    {
        "number": 4085,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    queries = stdin.split(\"\\n\")\n    results = []\n    for i in range(1, len(queries)):\n        n, divs = list(map(int, queries[i].split()))\n        divs = set(divs)\n        if n == 1:\n            if 2 in divs:\n                results.append(\"-1\")\n            else:\n                results.append(\"2\")\n        else:\n            if divs == set(range(2, n+1)):\n                results.append(\"-1\")\n            else:\n                if 2 not in divs:\n                    results.append(\"-1\")\n                else:\n                    results.append(max(2, min(n+1, *divs)))\n    return \"\\n\".join(results)"
    },
    {
        "number": 4085,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    queries = []\n    for line in lines[1:]:\n        n, *divisors = map(int, line.split())\n        queries.append((divisors, set(divisors)))\n\n    for divisors, almost_all in queries:\n        if not almost_all:\n            print(-1)\n            continue\n        for divisor in divisors:\n            almost_all.discard(divisor)\n            if divisor > 1 and divisor in almost_all:\n                almost_all.discard(divisor)\n            if not almost_all:\n                print(divisor)\n                break\n        else:\n            print(-1)\n\n    return \"\""
    },
    {
        "number": 4085,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    queries = int(stdin.readline().strip())\n    for i in range(queries):\n        n = int(stdin.readline().strip())\n        divisors = [int(x) for x in stdin.readline().strip().split()]\n        divisors.sort()\n        if divisors[0] > 2:\n            print(-1)\n        else:\n            x = 2\n            while True:\n                for d in divisors:\n                    if x % d!= 0:\n                        break\n                else:\n                    break\n                x += 1\n            print(x)\n\nwith open('input.txt', 'r') as f:\n    solution(f)"
    },
    {
        "number": 4085,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        n = int(stdin.readline().strip())\n        divisors = list(map(int, stdin.readline().strip().split()))\n        # check if input data is contradictory\n        if n < len(divisors):\n            return '-1'\n        # find minimum possible x\n        for x in range(2, max(divisors) + 1):\n            if all(x % d!= 0 for d in divisors):\n                return str(x)\n        # if no x is found, return -1\n        return '-1'"
    },
    {
        "number": 4085,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n = int(stdin.readline().strip())\n        divisors = list(map(int, stdin.readline().strip().split()))\n        divisors.sort()\n        max_divisor = divisors[-1]\n        min_divisor = divisors[0]\n        if max_divisor < min_divisor:\n            print(-1)\n        else:\n            print(min_divisor)"
    },
    {
        "number": 4085,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n = int(stdin.readline().strip())\n        divisors = list(map(int, stdin.readline().strip().split()))\n        divisors.sort()\n        if n < 2 or divisors[-1] > 10**6 or divisors[-2] < 2:\n            print(-1)\n        else:\n            x = divisors[-1]\n            for i in range(n-1, -1, -1):\n                x = divisors[i] * x // gcd(divisors[i], x)\n            print(x)\n    return \"\"\n\ndef"
    },
    {
        "number": 4085,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    queries = int(stdin.readline().strip())\n    for i in range(queries):\n        n = int(stdin.readline().strip())\n        divisors = list(map(int, stdin.readline().strip().split()))\n        if n!= len(divisors) - 2:\n            print(-1)\n            continue\n        divisors.sort()\n        x = divisors[-1]\n        for j in range(x, 0, -1):\n            if divisors[0] % j!= 0:\n                x = max(x, j)\n                break\n        print(x)\n    return \"\""
    },
    {
        "number": 4085,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n = int(stdin.readline().strip())\n        divisors = list(map(int, stdin.readline().strip().split()))\n        divisors.sort()\n        if divisors[0] == 1 or divisors[-1] == divisors[0]:\n            print(-1)\n        else:\n            print(divisors[0]*divisors[1])\n    return \"\""
    },
    {
        "number": 4086,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    n = a[0]\n    a = a[1:]\n    count = 0\n    for i in range(n-1, -1, -1):\n        if a[i]!= a[i+1]:\n            a[count] = a[i]\n            count += 1\n    return f\"{count}\\n\" + \" \".join(map(str, a[:count])) + \"\\n\""
    },
    {
        "number": 4086,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    \n    # create a dictionary to store unique elements and their positions\n    unique_dict = {}\n    for i in range(n):\n        if a[i] not in unique_dict:\n            unique_dict[a[i]] = i\n    \n    # create a list of unique elements and their positions\n    unique_list = list(unique_dict.items())\n    \n    # sort the list by positions in descending order\n    unique_list.sort(key=lambda x: x[1], reverse=True)\n    \n    # print the number of unique elements and their positions\n    print(len(unique_list))\n    for unique in unique_list:\n        print(unique[0], end=' ')\n    print()\n\nstdin = \"\"\"\n6\n1 5 5 1 6 1\n\"\"\"\n\nsolution(stdin)"
    },
    {
        "number": 4086,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n\n    unique_a = []\n    for i in range(n):\n        if a[i] not in unique_a:\n            unique_a.append(a[i])\n\n    x = len(unique_a)\n    result = []\n    for i in range(n-1, -1, -1):\n        if a[i] in unique_a:\n            result.append(a[i])\n\n    return f\"{x}\\n{' '.join(map(str, result))}\""
    },
    {
        "number": 4086,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    # remove duplicates\n    unique_a = []\n    for i in range(n-1, -1, -1):\n        if a[i] not in unique_a:\n            unique_a.append(a[i])\n\n    # print output\n    print(len(unique_a))\n    print(' '.join(map(str, unique_a[::-1])))"
    },
    {
        "number": 4086,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    unique_a = set(a)\n    unique_a_list = list(unique_a)\n    unique_a_list.sort(reverse=True)\n    x = len(unique_a_list)\n    return f\"{x}\\n{unique_a_list}\"\n\nprint(solution(\"6\\n1 5 5 1 6 1\"))\nprint(solution(\"5\\n2 4 2 4 4\"))\nprint(solution(\"5\\n6 6 6 6 6\"))"
    },
    {
        "number": 4086,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    \n    # remove duplicates and keep only the rightmost occurrence\n    unique = set(a)\n    unique = sorted(unique, reverse=True)\n    \n    # print the number of unique elements and their values\n    print(len(unique))\n    print(' '.join(map(str, unique)))"
    },
    {
        "number": 4086,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    unique = {}\n    for i in range(n-1, -1, -1):\n        if a[i] not in unique:\n            unique[a[i]] = True\n            x += 1\n        else:\n            a.pop(i)\n    print(x)\n    print(*a[::-1])\n    return \"\""
    },
    {
        "number": 4086,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    unique_a = []\n    for i in range(n):\n        if a[i] not in unique_a:\n            unique_a.append(a[i])\n    x = len(unique_a)\n    print(x)\n    print(*unique_a)\n"
    },
    {
        "number": 4086,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n\n    # Find the rightmost occurrence of each element\n    rightmost = {}\n    for i in range(n-1, -1, -1):\n        if a[i] not in rightmost:\n            rightmost[a[i]] = i\n\n    # Count the number of unique elements\n    unique_count = len(rightmost)\n\n    # Print the number of unique elements\n    print(unique_count)\n\n    # Print the unique elements in the rightmost occurrence order\n    for a in sorted(rightmost, key=rightmost.get, reverse=True):\n        print(a, end=' ')\n"
    },
    {
        "number": 4086,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n\n    # Find unique elements\n    unique_a = set(a)\n\n    # Find the rightmost occurrence of each unique element in the array\n    rightmost_occurrence = {}\n    for i in range(n-1, -1, -1):\n        if a[i] in unique_a:\n            rightmost_occurrence[a[i]] = i\n\n    # Remove duplicates from the array\n    unique_a = sorted(list(unique_a))\n    unique_a = [unique_a[i] for i in range(len(unique_a)) if i == 0 or rightmost_occurrence[unique_a[i]]!= rightmost_occurrence[unique_a[i-1]]]\n\n    # Write output\n    x = len(unique_a)\n    print(x)\n    print(' '.join(map(str, unique_a)))"
    },
    {
        "number": 4087,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    n = a + 1\n    while True:\n        if sum(int(d) for d in str(n)) % 4 == 0:\n            return str(n)\n        n += 1"
    },
    {
        "number": 4087,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    n = a + 1\n    while n % 4!= 0 or not all(int(d) % 3 == 0 for d in str(n)):\n        n += 1\n    return str(n)"
    },
    {
        "number": 4087,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    n = a + 1\n    while not (sum(int(digit) for digit in str(n)) % 4 == 0 and n % 3 == 0):\n        n += 1\n    return str(n)\n\nprint(solution(input()))"
    },
    {
        "number": 4087,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin.strip())\n    while True:\n        s = sum(int(i) for i in str(a))\n        if s % 4 == 0:\n            return str(a)\n        else:\n            a += 1"
    },
    {
        "number": 4087,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    n = a\n    while True:\n        digits_sum = sum(int(digit) for digit in str(n))\n        if digits_sum % 4 == 0:\n            if digits_sum % 3 == 0:\n                return str(n)\n            else:\n                n += 1\n        else:\n            n += 1\n\nprint(solution(input()))"
    },
    {
        "number": 4087,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    b = a + 1\n    while True:\n        s = sum(int(d) for d in str(b))\n        if s % 4 == 0 and b % 3 == 0:\n            return str(b)\n        elif s % 4 == 0:\n            return str(b)\n        elif b % 3 == 0:\n            return str(b)\n        else:\n            b += 1\n\nstdin = \"432\"\nprint(solution(stdin)) # Output: 435\n\nstdin = \"99\"\nprint(solution(stdin)) # Output: 103\n\nstdin = \"237\"\nprint(solution(stdin)) # Output: 237\n\nstdin = \"42\"\nprint(solution(stdin)) # Output: 44"
    },
    {
        "number": 4087,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    n = a\n    while True:\n        if sum(int(digit) for digit in str(n)) % 4 == 0:\n            break\n        n += 1\n    return str(n)"
    },
    {
        "number": 4087,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    n = a + 1\n    while True:\n        if sum(int(digit) for digit in str(n)) % 4 == 0 and n % 3 == 0:\n            return str(n)\n        n += 1"
    },
    {
        "number": 4087,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    n = a + 1\n    while n % 4!= 0 or sum(int(d) for d in str(n)) % 4!= 0:\n        n += 1\n    return str(n)"
    },
    {
        "number": 4087,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    n = a + 1\n    while n % 4!= 0 or sum(int(digit) for digit in str(n)) % 4!= 0:\n        n += 1\n    return str(n)\n\nprint(solution(input()))"
    },
    {
        "number": 4088,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split('\\n')\n    num_cases = int(input_list[0])\n    output_list = []\n    for i in range(1, len(input_list), 3):\n        s = input_list[i].strip()\n        m = int(input_list[i+1])\n        b = list(map(int, input_list[i+2].strip().split()))\n        t = ''\n        for j in range(len(s)):\n            if b[j] == 0:\n                continue\n            t += s[j]\n        for j in range(len(s)):\n            if s[j] not in t:\n                t += s[j]\n        if len(t)!= m:\n            t = ''\n        for j in range(len(t)):\n            if t[j] in 'abc':\n                continue\n            t = t[:j] + s[j] + t[j+1:]\n        output_list.append(t)\n    return '\\n'.join(output_list)"
    },
    {
        "number": 4088,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split('\\n')\n    output_list = []\n    for i in range(1, len(input_list), 3):\n        s = input_list[i-1]\n        m = int(input_list[i].split()[1])\n        b = list(map(int, input_list[i+1].split()))\n        res = ''\n        count = 0\n        for j in range(m):\n            res += s[j]\n            count += b[j]\n            count %= 26\n            res += chr(ord('a') + count)\n        output_list.append(res)\n    return '\\n'.join(output_list)"
    },
    {
        "number": 4088,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n_test_cases = int(stdin.readline())\n    for i in range(n_test_cases):\n        s = stdin.readline().strip()\n        m = int(stdin.readline())\n        b = [int(x) for x in stdin.readline().split()]\n        s_set = set(s)\n        t = \"\"\n        for c in s:\n            if c not in s_set:\n                continue\n            s_set.remove(c)\n            t += c\n        if len(t) < m:\n            t += s\n            t = t[:m]\n        else:\n            t = t[:m]\n        if sorted(t) == sorted(s):\n            continue\n        b_actual = [0] * m\n        for i in range(m):\n            for j in range(i+1, m):\n                if t[j] > t[i]:\n                    b_actual[i] += abs(j-i)\n        if b!= b_actual:\n            return \"NO ANSWER\"\n    return t"
    },
    {
        "number": 4088,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    q = int(lines[0])\n    for i in range(1, q+1):\n        s = lines[2*i-2]\n        m = int(lines[2*i-1])\n        b = list(map(int, lines[2*i].split()))\n        t = sorted(list(set(s)-set(s[::-1])))\n        if len(t) < m:\n            t = sorted(s)\n        else:\n            t = sorted(t)\n        if b!= list(map(lambda i: sum(map(lambda j: abs(i-j), range(len(s)))), range(1, len(s)+1))):\n            print('Case #%d:'% i + 'IMPOSSIBLE')\n            continue\n        else:\n            print('Case #%d:'% i + ''.join(t))\n    return 0\n\nstdin = '''4\nabac\n3\n2 1 0\nabc\n1\n0\nabba\n3\n1 0 1\necoosdcefr\n10\n38 13 24 14 11 5 3 24 17 0'''\n\nsolution(stdin) # Output: Case #1: aac\\nCase #2: c\\nCase #3: aba\\nCase #4: deforces\\n"
    },
    {
        "number": 4088,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline().strip())\n    for _ in range(q):\n        s = stdin.readline().strip()\n        m = int(stdin.readline().strip())\n        b = list(map(int, stdin.readline().strip().split()))\n        # Sort the string s in alphabetical order\n        s = sorted(s)\n        # Find all possible strings t\n        t = [s[i] for i in range(m)]\n        # Sort the string t in alphabetical order\n        t.sort()\n        # Check if b equals to the array b constructed from the string t\n        if b == list(map(lambda x: sum(abs(i-j) for j in range(x+1,m+1)), range(m))):\n            print(''.join(t))\n        else:\n            print(s)"
    },
    {
        "number": 4088,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    cases = stdin.split(\"\\n\\n\")\n    output = []\n    for case in cases:\n        lines = case.split(\"\\n\")\n        s = lines[0]\n        m = int(lines[1])\n        b = list(map(int, lines[2].split()))\n        indices = sorted(range(m), key=lambda i: b[i], reverse=True)\n        t = sorted([s[i] for i in indices], reverse=True)\n        output.append(\"\".join(t))\n    return \"\\n\".join(output)\n"
    },
    {
        "number": 4088,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # initialize variables\n    lines = stdin.strip().split('\\n')\n    q = int(lines[0])\n    for i in range(1, q*3, 3):\n        # read input\n        s = lines[i]\n        m = int(lines[i+1])\n        b = list(map(int, lines[i+2].strip().split()))\n        # compute t\n        t = []\n        i = 0\n        for j in range(m):\n            while i < len(s) and s[i] < s[j]:\n                i += 1\n            if i == len(s) or s[i] > s[j]:\n                t.append(s[j])\n            i += 1\n        # check if b equals to t\n        if b == list(map(ord, t)):\n            return ''.join(t)\n    # return empty string if no answer found\n    return ''"
    },
    {
        "number": 4088,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Reading the input\n    q = int(stdin.readline().strip())\n    for i in range(q):\n        s = stdin.readline().strip()\n        m = int(stdin.readline().strip())\n        b = list(map(int, stdin.readline().strip().split()))\n        # Checking if the answer exists\n        if not check_answer_exists(s, m, b):\n            return \"No solution exists\"\n        # Finding the answer\n        t = find_answer(s, m, b)\n        # Writing the output\n        print(t)\n\n\ndef"
    },
    {
        "number": 4088,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    q = int(lines[0])\n    result = []\n    for i in range(1, q+1):\n        s = lines[3*(i-1)].strip()\n        m = int(lines[3*(i-1)+1])\n        b = list(map(int, lines[3*(i-1)+2].split()))\n        count = [0]*26\n        for char in s:\n            count[ord(char)-ord('a')] += 1\n        new_s = ''\n        for i in range(len(s)):\n            if count[ord(s[i])-ord('a')] == 1:\n                new_s += s[i]\n                count[ord(s[i])-ord('a')] -= 1\n        if len(new_s) < len(s):\n            t = ''\n            for i in range(m):\n                t += chr(ord('a')+i)\n            count = [0]*26\n            for char in t:\n                count[ord(char)-ord('a')] += 1\n            for i in range(len(t)):\n                if count[ord(t[i])-ord('a')] == 1:\n                    new_s += t[i]\n                    count[ord(t[i])-ord('a')] -= 1\n            t = new_s\n        else:\n            t = new_s\n        if b == list(map(lambda x: sum(abs(i-j) for j in range(i+1) if s[j]>s[i]), range(m))):\n            result.append(t)\n    return '\\n'.join(result)"
    },
    {
        "number": 4088,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    q = int(lines[0])\n    for i in range(1, q*4, 4):\n        s = lines[i]\n        m = int(lines[i+1])\n        b = list(map(int, lines[i+2].split()))\n        for j in range(1, m):\n            if b[j] > b[j-1]:\n                b[j] -= 1\n        for j in range(m-2, -1, -1):\n            if b[j] > b[j+1]:\n                b[j] -= 1\n        for j in range(m):\n            if s[j] < s[b[j]]:\n                b[j] = -1\n        b[0] = 0\n        for j in range(m):\n            if b[j] < 0:\n                b[j] = 0\n        t = \"\"\n        for j in range(m):\n            t += s[j]\n        for j in range(m-1, -1, -1):\n            if b[j] > 0:\n                t = t[:b[j]] + s[j] + t[b[j]:]\n        if b == b:\n            print(t)\n        else:\n            print(\"Error\")\n    return \"\""
    },
    {
        "number": 4089,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    dog_name = \"\"\n    count = 1\n    while n > 0:\n        if n % 26 == 0:\n            dog_name += \"zz\"\n            n -= 26\n        elif n % 26 == 1:\n            dog_name += \"z\"\n            n -= 25\n        else:\n            dog_name += chr(ord('a') + (n % 26) - 1)\n            n -= (n % 26)\n        count += 1\n    return dog_name[-1]"
    },
    {
        "number": 4089,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n <= 26:\n        return chr(ord('a') + n - 1)\n    elif n <= 701:\n        return chr(ord('a') + (n - 1 - 26) // 26) + chr(ord('a') + (n - 1 - 26) % 26)\n    elif n <= 18277:\n        return chr(ord('a') + (n - 1 - 26 - 701) // 26) + chr(ord('a') + (n - 1 - 26 - 701) % 26) + chr(ord('a') + (n - 1 - 26 - 701) // 26)\n    elif n <= 475253:\n        return chr(ord('a') + (n - 1 - 26 - 701 - 18277) // 26) + chr(ord('a') + (n - 1 - 26 - 701 - 18277) % 26) + chr(ord('a') + (n - 1 - 26 - 701 - 18277) // 26) + chr(ord('a') + (n - 1 - 26 - 701 - 18277) % 26)\n    else:\n        return ''.join(['a'] * (n - 26 - 701 - 18277 - 475253))"
    },
    {
        "number": 4089,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 1 or n > 1000000000000001:\n        return \"\"\n    elif n <= 26:\n        return chr(97 + n - 1)\n    else:\n        prefix = solution(str(n // 26))\n        suffix = chr(97 + (n % 26) - 1)\n        return prefix + suffix\n\nstdin = input().strip()\nprint(solution(stdin))"
    },
    {
        "number": 4089,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # get input\n    n = int(stdin.strip())\n    \n    # define dog names\n    dog_names = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    dog_names += [f'{dog_names[i]}{dog_names[i]}' for i in range(26)]\n    dog_names += [f'{dog_names[i]}{dog_names[i]}{dog_names[i]}' for i in range(26)]\n    dog_names += [f'{dog_names[i]}{dog_names[i]}{dog_names[i]}{dog_names[i]}' for i in range(26)]\n    dog_names += [f'{dog_names[i]}{dog_names[i]}{dog_names[i]}{dog_names[i]}{dog_names[i]}' for i in range(26)]\n    dog_names += [f'{dog_names[i]}{dog_names[i]}{dog_names[i]}{dog_names[i]}{dog_names[i]}{dog_names[i]}' for i in range(26)]\n    dog_names += [f'{dog_names[i]}{dog_names[i]}{dog_names[i]}{dog_names[i]}{dog_names[i]}{dog_names[i]}{dog_names[i]}' for i in range(26)]\n    \n    # check if input is valid\n    if n < 1 or n > 1000000000000001:\n        return \"Invalid input\"\n    \n    # return dog name\n    return dog_names[n-1]"
    },
    {
        "number": 4089,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    names = []\n    for i in range(1, n + 1):\n        if i <= 26:\n            name = chr(ord('a') + i - 1)\n        elif i <= 701:\n            name = chr(ord('a') + (i - 1) // 26 - 1) + chr(ord('a') + (i - 1) % 26 - 1)\n        elif i <= 18277:\n            name = chr(ord('a') + (i - 1) // 26 // 26 - 1) + chr(ord('a') + (i - 1) // 26 % 26 - 1) + chr(ord('a') + (i - 1) % 26 - 1)\n        else:\n            name = chr(ord('a') + (i - 1) // 26 // 26 // 26 - 1) + chr(ord('a') + (i - 1) // 26 // 26 % 26 - 1) + chr(ord('a') + (i - 1) // 26 % 26 - 1) + chr(ord('a') + (i - 1) % 26 - 1)\n        names.append(name)\n    return names[n - 1]"
    },
    {
        "number": 4089,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n <= 26:\n        return chr(97 + n-1)\n    elif n <= 701:\n        return chr(97 + n-10) + chr(97 + (n-1)%26)\n    elif n <= 18277:\n        return chr(97 + n-100) + chr(97 + (n-10)%26) + chr(97 + (n-1)%26)\n    elif n <= 475253:\n        return chr(97 + n-1000) + chr(97 + (n-100)%26) + chr(97 + (n-10)%26) + chr(97 + (n-1)%26)\n    else:\n        num = n - 475254\n        res = \"\"\n        while num > 0:\n            res = chr(97 + num%26) + res\n            num //= 26\n        return res"
    },
    {
        "number": 4089,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n == 1:\n        return \"a\"\n    if n == 2:\n        return \"b\"\n    alpha_count = 1\n    for i in range(3, n+1):\n        if i < 27:\n            alpha_count += 1\n        elif i < 703:\n            alpha_count += 2\n        elif i < 18279:\n            alpha_count += 3\n        elif i < 475255:\n            alpha_count += 4\n        else:\n            alpha_count += 5\n    if n < 27:\n        return chr(ord(\"a\") + n-1)\n    elif n < 703:\n        return chr(ord(\"a\") + alpha_count - 1) + chr(ord(\"a\") + n-26)\n    elif n < 18279:\n        return chr(ord(\"a\") + alpha_count - 2) + chr(ord(\"a\") + alpha_count - 1) + chr(ord(\"a\") + n-702)\n    elif n < 475255:\n        return chr(ord(\"a\") + alpha_count - 3) + chr(ord(\"a\") + alpha_count - 2) + chr(ord(\"a\") + alpha_count - 1) + chr(ord(\"a\") + n-18278)\n    else:\n        return chr(ord(\"a\") + alpha_count - 4) + chr(ord(\"a\") + alpha_count - 3) + chr(ord(\"a\") + alpha_count - 2) + chr(ord(\"a\") + alpha_count - 1) + chr(ord(\"a\") + n-475254)\n\nprint(solution(input()))"
    },
    {
        "number": 4089,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n\n    if n == 1:\n        return \"a\"\n    elif n == 2:\n        return \"b\"\n    else:\n        names = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n        num_names = [\"aa\", \"ab\", \"ac\", \"ad\", \"ae\", \"af\", \"ag\", \"ah\", \"ai\", \"aj\", \"ak\", \"al\", \"am\", \"an\", \"ao\", \"ap\", \"aq\", \"ar\", \"as\", \"at\", \"au\", \"av\", \"aw\", \"ax\", \"ay\", \"az\", \"ba\", \"bb\", \"bc\", \"bd\", \"be\", \"bf\", \"bg\", \"bh\", \"bi\", \"bj\", \"bk\", \"bl\", \"bm\", \"bn\", \"bo\", \"bp\", \"bq\", \"br\", \"bs\", \"bt\", \"bu\", \"bv\", \"bw\", \"bx\", \"by\", \"bz\", \"ca\", \"cb\", \"cc\", \"cd\", \"ce\", \"cf\", \"cg\", \"ch\", \"ci\", \"cj\", \"ck\", \"cl\", \"cm\", \"cn\", \"co\", \"cp\", \"cq\", \"cr\", \"cs\", \"ct\", \"cu\", \"cv\", \"cw\", \"cx\", \"cy\", \"cz\", \"da\", \"db\", \"dc\", \"dd\", \"de\", \"df\", \"dg\", \"dh\", \"di\", \"dj\", \"dk\", \"dl\", \"dm\", \"dn\", \"do\", \"dp\", \"dq\", \"dr\", \"ds\", \"dt\", \"du\", \"dv\", \"dw\", \"dx\", \"dy\", \"dz\", \"ea\", \"eb\", \"ec\", \"ed\", \"ee\", \"ef\", \"eg\", \"eh\", \"ei\", \"ej\", \"ek\", \"el\", \"em\", \"en\", \"eo\", \"ep\", \"eq\", \"er\", \"es\", \"et\", \"eu\", \"ev\", \"ew\", \"ex\", \"ey\", \"ez\", \"fa\", \"fb\", \"fc\", \"fd\", \"fe\", \"ff\", \"fg\", \"fh\", \"fi\", \"fj\", \"fk\", \"fl\", \"fm\", \"fn\", \"fo\", \"fp\", \"fq\", \"fr\", \"fs\", \"ft\", \"fu\", \"fv\", \"fw\", \"fx\", \"fy\", \"fz\", \"ga\", \"gb\", \"gc\", \"gd\", \"ge\", \"gf\", \"gg\", \"gh\", \"gi\", \"gj\", \"gk\", \"gl\", \"gm\", \"gn\", \"go\", \"gp\", \"gq\", \"gr\", \"gs\", \"gt\", \"gu\", \"gv\", \"gw\", \"gx\", \"gy\", \"gz\", \"ha\", \"hb\", \"hc\", \"hd\", \"he\", \"hf\", \"hg\", \"hh\", \"hi\", \"hj\", \"hk\", \"hl\", \"hm\", \"hn\", \"ho\", \"hp\", \"hq\", \"hr\", \"hs\", \"ht\", \"hu\", \"hv\", \"hw\", \"hx\", \"hy\", \"hz\", \"ia\", \"ib\", \"ic\", \"id\", \"ie\", \"if\", \"ig\", \"ih\", \"ii\", \"ij\", \"ik\", \"il\", \"im\", \"in\", \"io\", \"ip\", \"iq\", \"ir\", \"is\", \"it\", \"iu\", \"iv\", \"iw\", \"ix\", \"iy\", \"iz\", \"ja\", \"jb\", \"jc\", \"jd\", \"je\", \"jf\", \"jg\", \"jh\", \"ji\", \"jj\", \"jk\", \"jl\", \"jm\", \"jn\", \"jo\", \"jp\", \"jq\", \"jr\", \"js\", \"jt\", \"ju\", \"jv\", \"jw\", \"jx\", \"jy\", \"jz\", \"ka\", \"kb\", \"kc\", \"kd\", \"ke\", \"kf\", \"kg\", \"kh\", \"ki\", \"kj\", \"kk\", \"kl\", \"km\", \"kn\", \"ko\", \"kp\", \"kq\", \"kr\", \"ks\", \"kt\", \"ku\", \"kv\", \"kw\", \"kx\", \"ky\", \"kz\", \"la\", \"lb\", \"lc\", \"ld\", \"le\", \"lf\", \"lg\", \"lh\", \"li\", \"lj\", \"lk\", \"ll\", \"lm\", \"ln\", \"lo\", \""
    },
    {
        "number": 4089,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return 'a'\n    elif n <= 26:\n        return chr(n - 1 + ord('a'))\n    elif n <= 701:\n        n -= 26\n        return chr(n // 26 + ord('a')) + chr(n % 26 + ord('a'))\n    elif n <= 18277:\n        n -= 701\n        return chr(n // 26 + ord('a')) * 2 + chr(n % 26 + ord('a'))\n    elif n <= 475253:\n        n -= 18277\n        return chr(n // 26 + ord('a')) * 3 + chr(n % 26 + ord('a'))\n    elif n <= 1188533:\n        n -= 475253\n        return chr(n // 26 + ord('a')) * 4 + chr(n % 26 + ord('a'))\n    elif n <= 27456701:\n        n -= 1188533\n        return chr(n // 26 + ord('a')) * 5 + chr(n % 26 + ord('a'))\n    elif n <= 6220475253:\n        n -= 27456701\n        return chr(n // 26 + ord('a')) * 6 + chr(n % 26 + ord('a'))\n    elif n <= 147723762653:\n        n -= 6220475253\n        return chr(n // 26 + ord('a')) * 7 + chr(n % 26 + ord('a'))\n    elif n <= 361023762653:\n        n -= 147723762653\n        return chr(n // 26 + ord('a')) * 8 + chr(n % 26 + ord('a'))\n    elif n <= 89426620475253:\n        n -= 361023762653\n        return chr(n // 26 + ord('a')) * 9 + chr(n % 26 + ord('a'))\n    else:\n        return 'Error'"
    },
    {
        "number": 4089,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    n = N\n    name = \"\"\n    while n > 0:\n        if n <= 26:\n            name += chr(ord('a') + n-1)\n            n = 0\n        elif n <= 702:\n            name += chr(ord('a') + (n-27)//26) + chr(ord('a') + (n-27)%26)\n            n = 0\n        elif n <= 18278:\n            name += chr(ord('a') + (n-703)//676) + chr(ord('a') + ((n-703)%676)//26) + chr(ord('a') + (n-703)%26)\n            n = 0\n        elif n <= 475254:\n            name += chr(ord('a') + (n-18279)//12252) + chr(ord('a') + ((n-18279)%12252)//676) + chr(ord('a') + ((n-18279)%676)//26) + chr(ord('a') + (n-18279)%26)\n            n = 0\n        else:\n            name += chr(ord('a') + (n-475255)//466564) + chr(ord('a') + ((n-475255)%466564)//12252) + chr(ord('a') + ((n-475255)%12252)//676) + chr(ord('a') + ((n-475255)%676)//26) + chr(ord('a') + (n-475255)%26)\n            n = 0\n    return name\n\nstdin = input()\nprint(solution(stdin))<|im_sep|>"
    },
    {
        "number": 4090,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    words = stdin.strip().split()\n    n = len(words)\n    # all the segments of the text\n    segments = [(i, i+1) for i in range(n)]\n    for i in range(n):\n        for j in range(i+2, n+1):\n            # check if the segment is already in the list of segments\n            if not any(i == s[0] and j == s[1] for s in segments):\n                # check if the segment is equal to any existing segment\n                for k in range(n):\n                    if k < i or k >= j:\n                        for l in range(n):\n                            if l < i or l >= j:\n                                if j - i == l - k and sorted(words[k:j]) == sorted(words[l:j]):\n                                    segments.append((k, j))\n    # count the length of the segments\n    segment_lengths = [sum(len(w) for w in words[i:j]) for (i, j) in segments]\n    # remove the segments with the same length\n    segment_lengths = sorted(set(segment_lengths))\n    segment_count = {length: sum(1 for l in segment_lengths if l == length) for length in segment_lengths}\n    # find the longest segment with the largest count\n    max_length = max(segment_lengths, key=lambda l: segment_count[l])\n    # remove all the segments with the same length\n    segments = [s for s in segments if sum(len(words[i:j]) for (i, j) in segments if sum(len(words[k:l]) for (k, l) in segments) == max_length)]\n    # replace all the segments with an abbreviation\n    abbreviations = []\n    for (i, j) in segments:\n        abbreviation = ''.join(word[0].upper() for word in words[i:j])\n        abbreviations.append(abbreviation)\n        words = words[:i] + [abbreviation] + words[j:]\n    # count the length of the final text\n    text_length = sum(len(w) for w in words)\n    # check if at most one abbreviation can be used\n    if len(abbreviations) > 0:\n        abbreviation_length = len(abbreviations[0])\n        text_length -= abbreviation_length * (len(abbreviations) - 1)\n    # print the result\n    print(text_length)"
    },
    {
        "number": 4090,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    words = stdin.strip().split()\n    n = len(words)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = len(words[i])\n    for j in range(1, n):\n        for i in range(n-j):\n            dp[i][i+j] = dp[i+1][i+j] + dp[i][i+j-1] - (len(words[i]) if i == 0 else 0)\n            for k in range(i, i+j):\n                if words[i] == words[k]:\n                    dp[i][i+j] = min(dp[i][i+j], dp[i][k-1] + dp[k+1][i+j])\n                    break\n    return dp[0][n-1]"
    },
    {
        "number": 4090,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    words = stdin.strip().split()\n    n = len(words)\n    memo = {}\n    def dfs(i, j):\n        if (i, j) in memo:\n            return memo[(i, j)]\n        if j - i <= 1:\n            return len(words[i:j])\n        ans = float('inf')\n        for k in range(i + 1, j):\n            if words[i:k] == words[k:j]:\n                ans = min(ans, dfs(i, k) + dfs(k, j) + (j - i - 1) * len(words[i:j]))\n        memo[(i, j)] = ans\n        return ans\n    return dfs(0, n)"
    },
    {
        "number": 4090,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, words = map(int, stdin.split())\n    words = stdin.split()[1:]\n    segments = []\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            segment =''.join(words[i:j])\n            if segment not in segments:\n                segments.append(segment)\n\n    def can_abbreviate(i, j, k, l):\n        if k - i > n or l - j > n or (k - i == 0 and l - j == 0):\n            return False\n        if k - i == 0:\n            segment = words[k]\n        elif l - j == 0:\n            segment = words[l]\n        else:\n            segment =''.join(words[i:k])\n        return segment in segments and segments.index(segment) < j - i - 1\n\n    min_len = float('inf')\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n + 1):\n                for l in range(k + 1, n + 1):\n                    if can_abbreviate(i, j, k, l):\n                        abbreviation = ''.join(word[0].upper() for word in words[i:j] + words[k:l])\n                        text = ''.join(abbreviation if (i, j, k, l) in [(x[0], x[1], x[2], x[3]) for x in segments] else word for word in words)\n                        min_len = min(min_len, len(text))\n\n    return min_len if min_len!= float('inf') else -1\n\n\nprint(solution(input()))"
    },
    {
        "number": 4090,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, words = map(int, stdin.splitlines()[0].split())\n    words = stdin.splitlines()[1].split()\n    segments = set()\n    for i in range(len(words)):\n        for j in range(i+1, len(words)+1):\n            if j - i > 1:\n                segment =''.join(words[i:j])\n                if segment in segments:\n                    continue\n                segments.add(segment)\n    for i in range(len(words)):\n        for j in range(i+1, len(words)+1):\n            if j - i > 1:\n                segment =''.join(words[i:j])\n                if segment in segments:\n                    continue\n                segments.add(segment)\n    return len(stdin) - sum(len(s) for s in segments)"
    },
    {
        "number": 4090,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    words = stdin.strip().split()[1:]\n    unique_words = set(words)\n    if len(unique_words) == n:\n        return sum(len(word) for word in words)\n    segments = []\n    for i in range(n):\n        for j in range(i+1, n+1):\n            segment = tuple(words[k] for k in range(i, j))\n            if segment in segments:\n                continue\n            segments.append(segment)\n    min_length = sum(len(word) for word in words)\n    for i in range(len(segments)):\n        for j in range(i+1, len(segments)):\n            if len(segments[i]) == len(segments[j]) and all(segments[k] == segments[j] for k in range(len(segments))):\n                continue\n            abbreviation = ''.join(segment[0].upper() for segment in segments[i])\n            for k in range(len(words)):\n                if words[k:k+len(segments[i])] == segments[i]:\n                    words[k:k+len(segments[i])] = [abbreviation]\n            new_length = sum(len(word) for word in words)\n            if new_length < min_length:\n                min_length = new_length\n    return min_length\n\nwith open('input.txt', 'r') as f:\n    print(solution(f.read()))"
    },
    {
        "number": 4090,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    text = stdin.readline().split()\n    \n    # Count the frequency of each word in the text\n    word_freq = {}\n    for word in text:\n        if word in word_freq:\n            word_freq[word] += 1\n        else:\n            word_freq[word] = 1\n    \n    # Initialize the DP array\n    dp = [0] * (n + 1)\n    \n    # Compute the length of the text using dynamic programming\n    for i in range(1, n + 1):\n        dp[i] = dp[i - 1] + len(text[i - 1]) + 1  # Add the length of the word plus a space\n        for j in range(i - 1, -1, -1):\n            if text[i - 1] == text[j]:\n                dp[i] = max(dp[i], dp[j] + len(text[i - 1]) + 1)  # Add the length of the abbreviation plus a space\n                break\n    \n    # Count the number of unique segments of words in the text\n    segments = set()\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            if text[i:j] not in segments:\n                segments.add(text[i:j])\n    \n    # Compute the number of abbreviations that can be used\n    abbrev_count = 0\n    for seg in segments:\n        if len(seg) > 1:\n            abbrev_count += word_freq[seg[0]] * (word_freq[seg[0]] - 1) // 2\n    \n    # Return the minimum length of the text after at most one abbreviation\n    return dp[n] - abbrev_count * 2 + 1\n\n\ndef"
    },
    {
        "number": 4090,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    words = stdin.strip().split()\n    n = len(words)\n    dp = [[False] * n for _ in range(n)]\n    for i in range(n):\n        for j in range(i, n):\n            if i == j:\n                dp[i][j] = True\n            elif words[i] == words[j]:\n                if j - i == 1:\n                    dp[i][j] = True\n                else:\n                    for k in range(i + 1, j):\n                        if words[i] == words[k] and dp[i][k] and dp[k + 1][j]:\n                            dp[i][j] = True\n                            break\n            else:\n                for k in range(i + 1, j):\n                    if words[i] == words[k] and dp[i][k] and dp[k + 1][j]:\n                        dp[i][j] = True\n                        break\n    ans = n * len(words[0])\n    for i in range(n):\n        for j in range(i, n):\n            if dp[i][j]:\n                abbr = ''.join(word[0].upper() for word in words[i:j+1])\n                ans -= (j - i + 1) * len(abbr)\n    return ans\n\ndef"
    },
    {
        "number": 4090,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    words = stdin.readline().strip().split()\n    \n    def get_prefix(w):\n        return \"\".join(c[0].upper() for c in w)\n    \n    def is_equal(i, j, k, l):\n        if j - i!= l - k:\n            return False\n        for t in range(j - i):\n            if words[i + t]!= words[k + t]:\n                return False\n        return True\n    \n    dp = [0] * (n + 1)\n    dp[0] = 0\n    for i in range(1, n + 1):\n        dp[i] = dp[i - 1] + len(words[i - 1])\n        for j in range(i - 1, 0, -1):\n            if is_equal(j, i, j - 1, i):\n                dp[i] = min(dp[i], dp[j - 1] + len(get_prefix(words[j - 1:i])))\n            if dp[i] == dp[j - 1] + len(get_prefix(words[j - 1:i])):\n                break\n    return dp[n]\n\nstdin = \"\"\"\n6\nto be or not to be\n\"\"\"\nprint(solution(stdin)) # Output: 12\n\nstdin = \"\"\"\n10\na ab a a b ab a a b c\n\"\"\"\nprint(solution(stdin)) # Output: 13\n\nstdin = \"\"\"\n6\naa bb aa aa bb bb\n\"\"\"\nprint(solution(stdin)) # Output: 11"
    },
    {
        "number": 4090,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    words = stdin.split()[1:]\n    segments = []\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if ''.join(words[i:j]) in ''.join(words):\n                segments.append((i, j))\n    abbs = []\n    for i, j in segments:\n        for k, l in segments:\n            if i >= k and j <= l and i!= k and j!= l and ''.join(words[i:j]) == ''.join(words[k:l]):\n                abbs.append((i, j, k, l))\n    if len(abbs) > 1:\n        return 'No solution'\n    elif not abbs:\n        return len(''.join(words))\n    else:\n        a, b, c, d = abbs[0]\n        return len(''.join(words[:a] + [''.join([words[i][0].upper() for i in range(a, b)])] + words[b:c] + [''.join([words[i][0].upper() for i in range(c, d)])] + words[d:]))"
    },
    {
        "number": 4091,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    n, k = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n\n    # initialize variables\n    dp = [[0] * n for _ in range(k + 1)]\n    total_profit = 0\n    max_profit = 0\n    max_total_profit = 0\n    prev_best = []\n\n    # fill dp table and calculate total profit\n    for i in range(k + 1):\n        total_profit = 0\n        for j in range(i):\n            dp[i][j] = total_profit\n            total_profit += a[j]\n        dp[i][i] = total_profit\n\n    # find the maximum total profit\n    for i in range(k + 1):\n        for j in range(i + 1, k + 1):\n            for l in range(i, j):\n                profit = dp[j][l] - dp[i][l - 1]\n                if profit > max_profit:\n                    max_profit = profit\n                    max_total_profit = dp[j][n - 1] - dp[i][0]\n                    prev_best = a[l - 1:j]\n\n    # print the result\n    print(max_total_profit)\n    print(\" \".join(map(str, prev_best)))\n\n    return \"\""
    },
    {
        "number": 4091,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    total_profit = 0\n    # dp[i][j] = maximum profit that can be achieved in i days if we choose j problems\n    dp = [[0 for _ in range(n+1)] for _ in range(k+1)]\n    # fill the dp table\n    for i in range(1, k+1):\n        for j in range(1, n+1):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1] + a[j-1])\n    total_profit = dp[k][n]\n    # construct the output\n    t = [0] * k\n    j = n\n    for i in range(k-1, -1, -1):\n        if dp[i+1][j] == dp[i][j]:\n            j -= 1\n            t[i] = 1\n        else:\n            t[i] = 1 + t[i+1]\n    return f\"{total_profit}\\n{' '.join(map(str, t))}\"\n"
    },
    {
        "number": 4091,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.readline().strip().split()))\n    a = list(map(int, stdin.readline().strip().split()))\n    dp = [[0 for _ in range(k + 1)] for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, k + 1):\n            dp[i][j] = dp[i - 1][j]\n            for l in range(i):\n                if dp[l][j - 1] + a[i - 1] > dp[i][j]:\n                    dp[i][j] = dp[l][j - 1] + a[i - 1]\n    ans = 0\n    res = []\n    for j in range(1, k + 1):\n        if dp[n][j] > ans:\n            ans = dp[n][j]\n            res = [j]\n        elif dp[n][j] == ans:\n            res.append(j)\n    print(ans)\n    print(*res)\n    return ans, res"
    },
    {
        "number": 4091,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n\n    profit = [0] * n\n    for i in range(n):\n        profit[i] = max(profit[j] + a[i] for j in range(i))\n    \n    dp = [0] * (k + 1)\n    dp[0] = 0\n    for i in range(1, k + 1):\n        dp[i] = -1\n        for j in range(1, n):\n            if dp[i - 1] >= 0 and i - dp[i - 1] >= j:\n                dp[i] = max(dp[i], dp[i - 1] + j)\n        if dp[i] >= 0:\n            dp[i] += 1\n    \n    return str(profit[-1]) + \"\\n\" + \" \".join(map(str, dp[1:]))"
    },
    {
        "number": 4091,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().strip().split())\n    a = list(map(int, stdin.readline().strip().split()))\n    dp = [[0]*(n+1) for _ in range(k+1)]\n    for i in range(1, n+1):\n        for j in range(k, 0, -1):\n            dp[j][i] = max(dp[j][i-1], max(dp[j-1][x] + a[i-1] for x in range(i-1, i-j, -1)))\n    ans = dp[k][n]\n    t = []\n    for j in range(k, 0, -1):\n        if dp[j][n] == ans:\n            t.append(j)\n            ans -= dp[j][n-t[-1]]\n            n -= t[-1]\n    t.append(n)\n    return str(ans) + '\\n' +''.join(map(str, t))"
    },
    {
        "number": 4091,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    \n    dp = [[0] * (n+1) for _ in range(k+1)]\n    \n    # Fill the dp table in bottom-up manner\n    for i in range(1, k+1):\n        for j in range(n+1):\n            # maximum profit till jth day\n            max_profit = 0\n            for l in range(j):\n                if dp[i-1][l] + a[l] > max_profit:\n                    max_profit = dp[i-1][l] + a[l]\n            dp[i][j] = max_profit\n    \n    # Find the maximum total profit\n    max_profit = 0\n    for i in range(1, n+1):\n        if dp[k][i] > max_profit:\n            max_profit = dp[k][i]\n    \n    # Print the maximum total profit\n    print(max_profit)\n    \n    # Find the optimal distribution\n    for i in range(k, 0, -1):\n        for j in range(n, 0, -1):\n            if dp[i][j] == max_profit:\n                print(i, end=\" \")\n                max_profit -= dp[i][j-1]\n                break\n    \n    return \"\""
    },
    {
        "number": 4091,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.strip().split())\n    a = list(map(int, stdin.strip().split()))\n    dp = [[0 for _ in range(n+1)] for _ in range(k+1)]\n    for i in range(1, k+1):\n        for j in range(1, n+1):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1] + a[j-1])\n    return str(dp[k][n]) + '\\n' +''.join(map(str, dp[k]))"
    },
    {
        "number": 4091,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n, k = map(int, stdin.splitlines()[0].split())\n    a = list(map(int, stdin.splitlines()[1].split()))\n\n    # sort problems by difficulty\n    a.sort(reverse=True)\n\n    # dp[i] = maximum profit for i days\n    dp = [0] * (n + 1)\n    for i in range(1, n + 1):\n        for j in range(i):\n            dp[i] = max(dp[i], dp[j] + a[i - 1])\n\n    # calculate total profit\n    total_profit = dp[n]\n\n    # backtrack to find optimal distribution\n    t = [0] * k\n    for j in range(k - 1, -1, -1):\n        for i in range(k - 1, j - 1, -1):\n            if dp[i] + dp[j + k - i] > dp[j]:\n                t[j] = i + 1\n                break\n\n    # print output\n    print(total_profit)\n    print(' '.join(map(str, t)))\n    return \"\""
    },
    {
        "number": 4091,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    dp = [[0 for _ in range(n)] for _ in range(k)]\n    for i in range(n):\n        for j in range(min(i+1, k)):\n            dp[j][i] = max(dp[j][i-1], dp[j-1][i-1] + a[i])\n    ans = dp[-1][-1]\n    t = [0 for _ in range(k)]\n    i = n - 1\n    for j in range(k-1, -1, -1):\n        while i >= 0 and dp[j][i] == dp[j+1][i]:\n            i -= 1\n        t[j] = n - i - 1\n        i = i - t[j]\n    return f\"{ans}\\n{' '.join(map(str, t))}\""
    },
    {
        "number": 4091,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()))\n    \n    dp = [[0] * (n+1) for _ in range(k+1)]\n    profit = [[0] * (n+1) for _ in range(k+1)]\n    for i in range(1, k+1):\n        dp[i][0] = 1\n        for j in range(1, n+1):\n            dp[i][j] = sum(dp[i-1][max(0, j-k):j])\n            profit[i][j] = max(profit[i-1][max(0, j-k):j])\n            profit[i][j] = profit[i][j] + a[j-1] if j > 0 else 0\n    \n    ans = 0\n    for i in range(1, n+1):\n        ans = max(ans, profit[k][i])\n    print(ans)\n    \n    ans = []\n    j = n\n    for i in range(k, 0, -1):\n        while j > i and dp[i][j] == dp[i-1][j]:\n            j -= 1\n        ans.append(j)\n        j -= 1\n        \n    return''.join(map(str, reversed(ans)))"
    },
    {
        "number": 4092,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, arr = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    count = 0\n    for i in range(1, n):\n        if arr[i] == 0:\n            count += 1\n    return count\n\nstdin = \"4\\n1 -5 3 2\\n\"\nprint(solution(stdin))  # Output: 1"
    },
    {
        "number": 4092,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    for i in range(1, n):\n        if a[i] == 0 and a[i-1] == 0:\n            return \"0\"\n        elif a[i] == 0 and a[i-1]!= 0:\n            a[i] = a[i-1]\n    return str(sum(a))"
    },
    {
        "number": 4092,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    # we don't need to insert any integer if the sum of all subsegments is already non-zero\n    if sum(a) == 0:\n        return 0\n    \n    # use prefix sum to find all subsegments with non-zero sum\n    prefix_sum = [0] * (n+1)\n    for i in range(1, n+1):\n        prefix_sum[i] = prefix_sum[i-1] + a[i-1]\n    \n    # find all subsegments with zero sum\n    zero_subsegments = []\n    for i in range(1, n):\n        if prefix_sum[i] == prefix_sum[i-1]:\n            zero_subsegments.append((i-1, i))\n    \n    # count the number of required insertions\n    required_insertions = 0\n    for start, end in zero_subsegments:\n        if a[start] > 0:\n            # if the first element of the subsegment is positive, we can insert any non-zero integer\n            required_insertions += 1\n        elif a[end] < 0:\n            # if the last element of the subsegment is negative, we can insert any non-zero integer\n            required_insertions += 1\n        else:\n            # if the subsegment has non-zero sum, we need to insert two non-zero integers between them\n            required_insertions += 2\n    \n    return required_insertions\n"
    },
    {
        "number": 4092,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    min_sum = float('inf')\n    for i in range(n):\n        for j in range(i+2, n):\n            cur_sum = sum(a[i:j])\n            if cur_sum == 0:\n                return str(min(cur_sum, -cur_sum))\n            if abs(cur_sum) < abs(min_sum):\n                min_sum = cur_sum\n    if min_sum == float('inf'):\n        return '0'\n    else:\n        return str(abs(min_sum))"
    },
    {
        "number": 4092,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = list(map(int, stdin.readline().split()))\n    \n    # check if any subsegment of arr has sum 0\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] - arr[j] == 0:\n                return \"0\"\n    \n    # find the minimum number of integers to insert to make the array non-zero subsegments\n    sum_arr = sum(arr)\n    if sum_arr == 0:\n        return \"1\"\n    \n    zero_count = 0\n    count_arr = [0] * (n + 1)\n    for i in range(n):\n        count_arr[arr[i] + 1] += 1\n    \n    max_count = max(count_arr)\n    while max_count > 0:\n        count_arr[max_count] -= 1\n        if max_count - 1 > 0:\n            count_arr[max_count - 1] += 1\n        zero_count += 1\n        max_count -= 1\n    \n    return str(zero_count)\n"
    },
    {
        "number": 4092,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    \n    if sum(a) == 0:\n        return '0'\n    \n    ans = 0\n    for i in range(1, n):\n        if a[i] == 0:\n            continue\n        if a[i-1] + a[i] == 0:\n            ans += 1\n    return str(ans)"
    },
    {
        "number": 4092,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, arr = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    count = 0\n    for i in range(1, n):\n        if arr[i] + arr[i-1] == 0:\n            count += 1\n    print(count)"
    },
    {
        "number": 4092,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    arr = [int(x) for x in stdin.split('\\n')[1].split(' ')]\n    \n    # Initialize variables\n    res = 0\n    curr_sum = 0\n    prev_sum = None\n    \n    # Loop through the array and calculate the sum of subsegments\n    for i in range(n):\n        curr_sum += arr[i]\n        \n        # Check if the current subsegment has sum 0 and update the result\n        if curr_sum == 0 and i > 0:\n            res = min(res, i - prev_sum - 1)\n        \n        # Update the previous sum\n        if prev_sum is None:\n            prev_sum = 0\n        else:\n            prev_sum = curr_sum\n    \n    # Add the last subsegment\n    res = min(res, n - prev_sum - 1)\n    \n    return str(res)"
    },
    {
        "number": 4092,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n\n    # Check if there is any subsegment with sum 0\n    for i in range(n):\n        if a[i] == 0:\n            return \"0\"\n        if i > 0 and a[i] + a[i-1] == 0:\n            return \"0\"\n    for i in range(n-1):\n        if a[i] == a[i+1]:\n            return \"0\"\n        if i > 0 and a[i] + a[i-1] == a[i+1]:\n            return \"0\"\n\n    # Count the number of subsegments\n    count = 0\n    for i in range(n-1):\n        if a[i] + a[i+1] == 0:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4092,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    arr = list(map(int, stdin.split()[1:]))\n    if sum(arr) == 0:\n        return \"0\"\n    count = 0\n    for i in range(1, n):\n        if arr[i] == 0:\n            count += 1\n            continue\n        if arr[i-1] == 0:\n            arr[i-1] = -1\n            count += 1\n        if arr[i-1] < 0:\n            arr[i-1] *= -1\n            count += 1\n    return str(count)\nprint(solution(\"4\\n1 -5 3 2\")) # Output: 1\nprint(solution(\"5\\n4 -2 3 -9 2\")) # Output: 0\nprint(solution(\"9\\n-1 1 -1 1 -1 1 1 -1 -1\")) # Output: 6\nprint(solution(\"8\\n16 -5 -11 -15 10 5 4 -4\")) # Output: 3<|im_sep|>"
    },
    {
        "number": 4093,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    t = int(lines[0])\n    for i in range(1, t+1):\n        n, m = map(int, lines[i].split())\n        if n == 1:\n            print(0)\n            continue\n        # Let's calculate the possible values of the last element of the array\n        # We have to make sure that it's greater than the sum divided by n\n        # We can calculate the maximum possible sum that we can get by multiplying\n        # all elements of the array by a constant factor and taking the sum\n        # of that and the original sum divided by n\n        # The maximum possible sum is given by (m-n+1)*max_factor\n        # where max_factor is the maximum factor that multiplies all elements\n        # of the array without exceeding the sum divided by n\n        max_factor = (m-n+1) // n\n        # Now we can calculate the maximum possible value of the last element\n        # by multiplying all elements of the array by max_factor and taking the\n        # sum of that and the original sum divided by n\n        max_last = (max_factor * n + m) // n\n        # We also need to calculate the maximum possible value of the first element\n        # We can simply divide the sum by n and add 1\n        max_first = (m+1) // n\n        # Now we can generate all possible arrays with the given constraints\n        arrays = []\n        for j in range(1, max_first+1):\n            for k in range(max_last+1):\n                # We can skip arrays with non-positive first element\n                if j == 1 and k == 0:\n                    continue\n                # We can skip arrays with non-positive last element\n                if j == 0 and k == 1:\n                    continue\n                # We can skip arrays with non-positive last element\n                if j == 0 and k == 0:\n                    continue\n                # We can skip arrays with non-positive sum\n                if j+k-1 < 0:\n                    continue\n                # We can skip arrays with non-positive sum\n                if j+k-1 > m:\n                    continue\n                # We can skip arrays with non-negative sum\n                if j+k-1 >= 0 and j+k-1 <= m:\n                    arrays.append([j]*(k-1) + [j+k-1]*j)\n        # Now we can find the array with the maximum possible value of absolute differences\n        max_abs_diff = 0\n        for a in arrays:\n            abs_diff = sum([abs(a[i]-a[i+1]) for i in range(len(a)-1)])\n            if abs_diff > max_abs_diff:\n                max_abs_diff = abs_diff\n        print(max_abs_diff)"
    },
    {
        "number": 4093,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = [1] * n\n    for i in range(n - 1):\n        if a[i] + a[i + 1] <= m:\n            a[i + 1] = a[i] + a[i + 1]\n        else:\n            a[i + 1] = m - sum(a[:i + 1])\n    return sum(abs(a[i] - a[i + 1]) for i in range(n - 1))\n"
    },
    {
        "number": 4093,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    for case in stdin.split('\\n')[1:]:\n        n, m = list(map(int, case.split()))\n        if m == 0:\n            print(0)\n            continue\n        a = [0] * n\n        a[0] = m // n\n        for i in range(1, n):\n            a[i] = (a[i-1] * (m-i*a[i-1])) // (i+1)\n        print(max(abs(a[i] - a[i+1]) for i in range(n-1)))\n    return ''\n"
    },
    {
        "number": 4093,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split(\"\\n\")\n    num_tests = int(lines[0])\n    output = []\n    for i in range(1, num_tests+1):\n        n, m = map(int, lines[i].strip().split())\n        if m < 2:\n            output.append(0)\n            continue\n        if n == 1:\n            output.append(m-1)\n            continue\n        a = [0] * n\n        a[0] = m // 2\n        a[1] = m - a[0]\n        for i in range(2, n):\n            a[i] = a[i-1] - 1\n            a[i-2] += 1\n        output.append(sum(abs(a[i]-a[i+1]) for i in range(n-1)))\n    return \"\\n\".join(map(str, output))"
    },
    {
        "number": 4093,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Parse the input\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        n, m = map(int, stdin.readline().strip().split())\n\n        # Initialize the array\n        a = [0] * n\n\n        # Calculate the maximum possible sum\n        total_sum = 0\n        for i in range(n):\n            if i == 0:\n                # The first element is always 1\n                a[i] = 1\n            else:\n                # Calculate the next element as the sum of previous two\n                a[i] = a[i-1] + a[i-2]\n            total_sum += a[i]\n\n        # Calculate the maximum absolute difference\n        max_diff = 0\n        for i in range(n-1):\n            max_diff = max(max_diff, abs(a[i] - a[i+1]))\n\n        # Calculate the final answer\n        answer = total_sum - 2 * max_diff\n\n        # Print the answer\n        print(answer)\n\n    return \"\"\n"
    },
    {
        "number": 4093,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.strip().split())\n    if n == 1:\n        return 0\n    \n    a = [0] * n\n    a[0] = m // n\n    i = 1\n    while a[i-1] > 0:\n        a[i] = a[i-1] - 1\n        i += 1\n    \n    a[i-1] += m - sum(a)\n    \n    return sum(abs(a[i] - a[i-1]) for i in range(n-1))"
    },
    {
        "number": 4093,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    t = int(lines[0])\n    for i in range(1, t+1):\n        n, m = map(int, lines[i].split())\n        a = [0] * n\n        for j in range(n-1):\n            a[j] = j+1\n        a[-1] = m - (n-1)*a[-2]\n        print(max(abs(a[j]-a[j+1]) for j in range(n-1)))\n    return ''"
    },
    {
        "number": 4093,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n, m = map(int, stdin.readline().strip().split())\n        a = [0] * n\n        for j in range(n):\n            if j == 0:\n                a[j] = m - sum(a)\n            else:\n                a[j] = a[j-1] + 1\n        if n > 1:\n            a[-1] = m - sum(a[:-1])\n        print(max(abs(a[i]-a[i+1]) for i in range(n-1)))"
    },
    {
        "number": 4093,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    t = int(lines[0])\n    results = []\n    for i in range(1, t+1):\n        n, m = map(int, lines[i].split())\n        a = [m//(n+1)]*(n+1)\n        a[0] = 0\n        sum_a = sum(a)\n        diff_sum = sum(abs(a[i]-a[i+1]) for i in range(n))\n        while sum_a!= m or diff_sum < 0:\n            a[0] += 1\n            sum_a = sum(a)\n            diff_sum = sum(abs(a[i]-a[i+1]) for i in range(n))\n        results.append(diff_sum)\n    return '\\n'.join(map(str, results))\n\nprint(solution('''\n5\n1 100\n2 2\n5 5\n2 1000000000\n1000000000 1000000000\n'''))"
    },
    {
        "number": 4093,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.split(\"\\n\")\n    t = int(inputs[0])\n    for i in range(1, t*3, 3):\n        n, m = [int(x) for x in inputs[i].split()]\n        a = [0] * n\n        j = 0\n        while j < n:\n            a[j] = m - sum(a[:j])\n            j += 1\n        ans = 0\n        for j in range(n-1):\n            ans = max(ans, abs(a[j] - a[j+1]))\n        print(ans)"
    },
    {
        "number": 4094,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin.strip())\n    count = 0\n    num = 7\n    while count < 4:\n        if num % K == 0:\n            count += 1\n        if count == 1:\n            return str(count)\n        num *= 10\n    return str(-1)"
    },
    {
        "number": 4094,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin.readline().strip())\n    count = 0\n    for i in range(7, 100000000, 7):\n        count += 1\n        if i % k == 0:\n            return str(count)\n    return \"-1\""
    },
    {
        "number": 4094,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin)\n    i = 0\n    while True:\n        num = 7 * 10**(i)\n        if num % K == 0:\n            return str(i+1)\n        if num > 7 * 10**i:\n            return \"-1\"\n        i += 1"
    },
    {
        "number": 4094,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    n = 1\n    while True:\n        if n % k == 0:\n            return str(n)\n        n = 7 * n"
    },
    {
        "number": 4094,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin)\n    count = 0\n    num = 7\n    while True:\n        if num % K == 0:\n            count += 1\n            if count == 1:\n                return str(count)\n        num *= 10\n        if len(str(num)) > len(str(K)):\n            break\n    return str(-1)"
    },
    {
        "number": 4094,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    count = 0\n    num = 7\n    while count < k:\n        num *= 10\n        count += 1\n    if k == 1:\n        return \"1\"\n    for i in range(k, num, k):\n        if i % k == 0:\n            return str(i // k)\n    return \"-1\""
    },
    {
        "number": 4094,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin.strip())\n    num = 7\n    i = 0\n    while num < 777777:\n        if num % k == 0:\n            return str(i+1)\n        num *= 10\n        i += 1\n    return '-1'"
    },
    {
        "number": 4094,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin.readline().strip())\n    i = 1\n    while True:\n        num = 7 * i * i\n        if num % k == 0:\n            return str(i)\n        i += 1\n    return \"-1\""
    },
    {
        "number": 4094,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    count = 1\n    multiple = k\n    while multiple <= 7:\n        if multiple == 7:\n            return str(count)\n        multiple *= k\n        count += 1\n    return \"-1\"\n\nprint(solution(\"101\"))"
    },
    {
        "number": 4094,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin.strip())\n    i = 0\n    while True:\n        if k**i > 7:\n            print(-1)\n            break\n        if 7 % k**i == 0:\n            print(i)\n            break\n        i += 1"
    },
    {
        "number": 4095,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    n, m = map(int, stdin.readline().split())\n    p = list(map(int, stdin.readline().split()))\n    \n    # Create a dictionary to count the frequency of each integer\n    freq = {}\n    for i in range(1, n+1):\n        freq[i] = p.count(i)\n        \n    # Calculate the required number\n    count = 0\n    for i in range(1, n+1):\n        for j in range(i, n+1):\n            if sum(freq[k] for k in range(i, j+1)) >= m:\n                count += 1\n                \n    return count"
    },
    {
        "number": 4095,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    p = list(map(int, stdin.split()))\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if sum(p[i:j+1]) == m:\n                count += 1\n    return count\n\nstdin = \"5 4\\n2 4 5 3 1\"\nprint(solution(stdin)) # Output: 4\n\nstdin = \"5 5\\n1 2 3 4 5\"\nprint(solution(stdin)) # Output: 1\n\nstdin = \"15 8\\n1 15 2 14 3 13 4 8 12 5 11 6 10 7 9\"\nprint(solution(stdin)) # Output: 48"
    },
    {
        "number": 4095,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    p = list(map(int, stdin.split()))\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if sum(p[i:j+1]) == m:\n                count += 1\n    return count\n\nstdin = \"5 4\\n2 4 5 3 1\"\nprint(solution(stdin)) # Output: 4"
    },
    {
        "number": 4095,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    p = list(map(int, stdin.split()[2:]))\n\n    pairs = 0\n    for i in range(1, n):\n        for j in range(i+1, n+1):\n            if sum(p[i-1:j]) == m:\n                pairs += 1\n\n    return str(pairs)\n"
    },
    {
        "number": 4095,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    p = list(map(int, stdin.readline().split()))\n    count = 0\n    for i in range(n):\n        j = i + 1\n        k = n - 1\n        while j < k:\n            s = p[i] + p[j] + p[k]\n            if s == m:\n                count += 1\n                j += 1\n                k -= 1\n            elif s < m:\n                j += 1\n            else:\n                k -= 1\n    return count"
    },
    {
        "number": 4095,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.strip().split())\n    p = list(map(int, stdin.strip().split()))\n    \n    count = 0\n    for i in range(n):\n        left, right = i, n-1\n        while left < right:\n            if p[left] + p[right] < m:\n                count += right-left\n                left += 1\n            else:\n                right -= 1\n                \n    return count\n\nstdin = \"5 4\\n2 4 5 3 1\"\nprint(solution(stdin)) # Output: 4\n\nstdin = \"5 5\\n1 2 3 4 5\"\nprint(solution(stdin)) # Output: 1\n\nstdin = \"15 8\\n1 15 2 14 3 13 4 8 12 5 11 6 10 7 9\"\nprint(solution(stdin)) # Output: 48"
    },
    {
        "number": 4095,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.strip().split())\n    p = list(map(int, stdin.strip().split()))\n    count = 0\n    for l in range(1, n):\n        for r in range(l+1, n+1):\n            if sum(p[l-1:r]) == m:\n                count += 1\n    return count"
    },
    {
        "number": 4095,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.strip().split())\n    p = list(map(int, stdin.strip().split()))\n    \n    count = 0\n    for i in range(n):\n        left = i\n        right = n-1\n        while left <= right:\n            mid = (left + right) // 2\n            if p[mid] == m:\n                count += n - mid\n                break\n            elif p[mid] < m:\n                left = mid + 1\n            else:\n                right = mid - 1\n                \n    return count"
    },
    {
        "number": 4095,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    p = list(map(int, stdin.split()[2:]))\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            s = sorted(p[i:j])\n            if len(s) % 2 == 0:\n                median = (s[len(s)//2] + s[len(s)//2 - 1]) / 2\n            else:\n                median = s[len(s)//2]\n            if median == m:\n                count += 1\n    return str(count)"
    },
    {
        "number": 4095,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().strip().split())\n    p = list(map(int, stdin.readline().strip().split()))\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if sum(p[i:j]) == m:\n                count += 1\n    return count"
    },
    {
        "number": 4096,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:]))\n    days = 0\n    i = 0\n    j = 0\n    k = 0\n    while i < n and j < m:\n        if days >= m:\n            return str(days)\n        if j + a[i] <= m:\n            j += a[i]\n            k += 1\n        else:\n            j = 0\n            k = 0\n            days += 1\n        i += 1\n    return str(days) if j == m else '-1'"
    },
    {
        "number": 4096,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:2+n]))\n\n    dp = [float('inf')] * (m+1)\n    dp[0] = 0\n\n    for i in range(n):\n        for j in range(m, -1, -1):\n            if j >= a[i]:\n                dp[j] = min(dp[j], dp[j-a[i]] + 1)\n\n    if dp[m] == float('inf'):\n        return '-1'\n    else:\n        return str(dp[m])"
    },
    {
        "number": 4096,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    days = 0\n    i = 0\n    while i < n:\n        if a[i] == 0:\n            return '-1'\n        k = 0\n        while i+k < n and a[i+k] <= a[i]:\n            k += 1\n        days += k\n        i += k\n    if days <= m:\n        return str(days)\n    else:\n        return '-1'"
    },
    {
        "number": 4096,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    \n    if sum(a) < m:\n        return -1\n    \n    dp = [[False] * (m+1) for _ in range(n+1)]\n    \n    dp[0][0] = True\n    \n    for i in range(1, n+1):\n        for j in range(m+1):\n            if j >= a[i-1]:\n                dp[i][j] = dp[i-1][j] or dp[i-1][j-a[i-1]]\n            else:\n                dp[i][j] = dp[i-1][j]\n                \n    days = 0\n    while dp[n][m] == False:\n        if dp[n-1][m]:\n            m -= a[n-1]\n            n -= 1\n        else:\n            return -1\n        days += 1\n        \n    return days"
    },
    {
        "number": 4096,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    n, m = map(int, stdin.readline().strip().split())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    # Initialize variables\n    energy = 0\n    days = 0\n    cups_used = set()\n    cups_done = set()\n\n    # Main loop\n    while days < n:\n        # Choose the next cup to drink\n        while True:\n            if len(cups_done) == n:\n                return -1\n            cup = (a.index(max(a)) + days) % n\n            if cup not in cups_used and a[cup] > 0:\n                break\n        # Add energy to the cup\n        energy += a[cup]\n        cups_used.add(cup)\n        # Add energy to the coursework\n        pages = max(0, a[cup] - len(cups_used))\n        energy += pages * m\n        # Update days and cups_done\n        days += 1\n        cups_done.add(cup)\n\n    # Return the minimum number of days\n    return days\n"
    },
    {
        "number": 4096,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().strip().split())\n    a = list(map(int, stdin.readline().strip().split()))\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = 1\n    for j in range(m + 1):\n        dp[0][j] = 0\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            dp[i][j] = dp[i - 1][j]\n            if a[i - 1] <= j:\n                dp[i][j] += dp[i - 1][j - a[i - 1]]\n    if dp[n][m] == 0:\n        return \"-1\"\n    days = 0\n    while dp[n][m] > 0:\n        days += 1\n        dp = [[max(dp[i][j], dp[i - 1][j - a[i - 1]] + 1) for j in range(m + 1)] for i in range(n + 1)]\n    return str(days)\n"
    },
    {
        "number": 4096,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # get input from stdin\n    n, m = list(map(int, stdin.split()[0:2]))\n    a = list(map(int, stdin.split()[2:]))\n    \n    # initialize variables\n    days = 0\n    pages = 0\n    energy = 0\n    \n    # loop through cups of coffee\n    for i in range(n):\n        # drink the ith cup\n        energy += a[i]\n        # add the energy to the pages written\n        pages += max(0, a[i] - energy + 1)\n        # add 1 if energy >= m\n        if energy >= m:\n            days += 1\n            energy = 0\n            # stop if pages >= m\n            if pages >= m:\n                break\n    \n    # check if it is possible to write the coursework\n    if pages < m:\n        return -1\n    \n    # print the minimum number of days needed\n    return days"
    },
    {
        "number": 4096,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    k = 0\n    for i in range(n):\n        k += a[i]\n        if k >= m:\n            break\n    if k < m:\n        return -1\n    days = 1\n    for i in range(n):\n        if a[i] == 0:\n            continue\n        j = i\n        while j < n and a[j] == a[i]:\n            j += 1\n        days = max(days, j - i)\n    return days"
    },
    {
        "number": 4096,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    \n    # dp[i][j] is the minimum number of days to write j pages of coursework\n    dp = [[float('inf') for j in range(m+1)] for i in range(n+1)]\n    \n    # base cases\n    for i in range(n+1):\n        dp[i][0] = 0\n    \n    for j in range(m+1):\n        dp[0][j] = 0\n    \n    # fill dp table\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            for k in range(i):\n                # we can drink k-th cup\n                if j >= a[k]:\n                    dp[i][j] = min(dp[i][j], dp[k][j-a[k]] + 1)\n            \n            # if we can't drink k-th cup, we can't write j pages of coursework\n            dp[i][j] = min(dp[i][j], dp[i][j-1])\n    \n    if dp[n][m] == float('inf'):\n        return '-1'\n    \n    return str(dp[n][m])"
    },
    {
        "number": 4096,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    # we can try to drink each cup at most once\n    # so we can try to drink the cups in ascending order\n    # and we can start with the cup with maximum caffeine\n    # this will give us the maximum number of pages we can write\n    # in the first day\n    day = 1\n    pages = sum(max(0, a[i] - i) for i in range(n))\n    while pages < m:\n        day += 1\n        pages = sum(max(0, a[i] - i) for i in range(n))\n        for i in range(n):\n            if a[i] > i + day:\n                a[i] = i + day\n    if pages == m:\n        return str(day)\n    else:\n        return \"-1\""
    },
    {
        "number": 4097,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    b = list(map(int, stdin.readline().strip().split()))\n    changes = 0\n    \n    for i in range(1, n):\n        if b[i] - b[i-1]!= b[i-1] - b[i-2]:\n            changes += 1\n        if changes > 1:\n            return -1\n        \n    return changes"
    },
    {
        "number": 4097,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    n, *b = map(int, stdin.split())\n    \n    # Check if input is possible\n    if n <= 1:\n        return str(0)\n    \n    # Check if input is an arithmetic progression\n    if all(b[i+1] == b[i] + (1 if i == n-1 else 0) for i in range(n-1)):\n        return str(0)\n    \n    # Count changes needed to make it an arithmetic progression\n    count = 0\n    for i in range(1, n):\n        if b[i] > b[i-1]:\n            # Increase current element\n            count += b[i]-b[i-1]-1\n        elif b[i] < b[i-1]:\n            # Decrease current element\n            count += b[i-1]-b[i]-1\n        elif i == n-1:\n            # Last element is zero, so count it separately\n            count += 1\n    \n    # Output result\n    if count == 0:\n        return str(0)\n    else:\n        return str(count)"
    },
    {
        "number": 4097,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, b = map(int, stdin.split())\n    if n == 1 or n == 2:\n        return \"0\"\n    elif n == 3:\n        return \"-1\"\n    else:\n        for i in range(n-2):\n            if abs(b[i+1] - b[i])!= abs(b[i+2] - b[i+1]):\n                return \"-1\"\n        return str(abs(b[n-1] - b[0])) + \"\\n\" if abs(b[n-1] - b[0]) <= 1 else \"-1\""
    },
    {
        "number": 4097,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    b = list(map(int, stdin.split()[1:]))\n    \n    # check if all elements are the same\n    if all(b[i] == b[0] for i in range(n)):\n        return 0\n    \n    # check if the difference between any two consecutive elements is the same\n    if any(b[i+1] - b[i]!= b[1] - b[0] for i in range(n-1)):\n        return -1\n    \n    # calculate the minimum number of elements to change\n    change = 0\n    for i in range(1, n):\n        if abs(b[i]-b[i-1]) == 1:\n            change += 1\n        else:\n            change += 2\n    \n    return change"
    },
    {
        "number": 4097,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    b = list(map(int, stdin.split('\\n')[1].split()))\n\n    if len(set(b)) == 1:\n        return \"0\"\n\n    for i in range(n-1):\n        if b[i+1] - b[i]!= 1:\n            return \"-1\"\n\n    return str(n)"
    },
    {
        "number": 4097,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, b = map(int, stdin.split())\n    if n < 3:\n        return str(n)\n    for i in range(n-2):\n        if b[i+1] - b[i]!= b[i+2] - b[i+1]:\n            return -1\n    return str(n)"
    },
    {
        "number": 4097,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    b = list(map(int, stdin.split()[1:]))\n\n    if n == 1 or n == 2:\n        return str(0)\n\n    for i in range(n-2):\n        if b[i+1] - b[i]!= b[i+2] - b[i+1]:\n            return str(-1)\n\n    return str(n-1)"
    },
    {
        "number": 4097,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n, seq = map(int, stdin.strip().split())\n    # count the number of changes required\n    changes = 0\n    for i in range(1, n):\n        if seq[i] - seq[i-1]!= seq[1] - seq[0]:\n            changes += 1\n            if changes > 1:\n                return \"-1\"\n        else:\n            changes = 0\n    return changes"
    },
    {
        "number": 4097,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, b = map(int, stdin.strip().split())\n\n    # If n is less than 3, it is impossible to make an arithmetic progression\n    if n < 3:\n        return '-1'\n\n    # Initialize dp list with first two elements of b\n    dp = [b[0], b[1]]\n\n    # Iterate through remaining elements of b\n    for i in range(2, n):\n        # If the difference between b[i] and b[i-1] is the same as the difference between b[i-1] and b[i-2]\n        if b[i] - b[i-1] == dp[i-1] - dp[i-2]:\n            dp.append(b[i])\n        # If it is not the same, it is impossible to make an arithmetic progression\n        else:\n            return '-1'\n\n    # The last two elements of dp will be the first two elements of the arithmetic progression\n    if dp[-1] - dp[-2] == dp[-2] - dp[-3]:\n        # Count number of operations required to make arithmetic progression\n        count = 0\n        for i in range(1, n):\n            if dp[i] - dp[i-1] > 1 or dp[i-1] - dp[i] > 1:\n                count += 1\n        return str(count)\n    else:\n        return '-1'"
    },
    {
        "number": 4097,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    b = list(map(int, stdin.readline().strip().split()))\n    count = 0\n    for i in range(1, n):\n        if b[i] - b[i-1] == b[i-1] - b[i-2]:\n            continue\n        if b[i] == b[i-1] + 1:\n            continue\n        if b[i-1] == b[i-2] + 1:\n            continue\n        count += 1\n        if count > 1:\n            return -1\n    return count"
    },
    {
        "number": 4098,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    n, k = map(int, stdin.strip().split())\n    a = list(map(int, stdin.strip().split()))\n\n    # Sort students by their skills\n    a.sort()\n\n    # Initialize variables\n    team_size = 0\n    team_count = 0\n    max_team_size = 0\n    max_team_count = 0\n\n    # Iterate over students\n    for i in range(n):\n        # Check if student can be added to existing team\n        if team_size == 0 or a[i] - a[i-1] <= 5:\n            team_size += 1\n        else:\n            team_count += 1\n            team_size = 1\n\n        # Update maximum team size and count\n        if team_size > max_team_size:\n            max_team_size = team_size\n            max_team_count = team_count\n\n    # Add last team\n    if team_size > 0:\n        team_count += 1\n\n    # Return result\n    return max(max_team_count, team_count)\n"
    },
    {
        "number": 4098,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n\n    a.sort()\n    i, j = 0, n-1\n    res = 0\n\n    while i <= j:\n        res = max(res, a[i] + a[j])\n        i += 1\n        j -= 1\n\n    return str(res)\n\nprint(solution(\"5 2\\n1 2 15 15 15\")) # Output: 5\nprint(solution(\"6 1\\n36 4 1 25 9 16\")) # Output: 2\nprint(solution(\"4 4\\n1 10 100 1000\")) # Output: 4"
    },
    {
        "number": 4098,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:n+2]))\n\n    dp = [[False] * (k+1) for _ in range(n+1)]\n    dp[0][0] = True\n\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            for x in range(j):\n                if i-x >= 1 and a[i-x] - a[i] <= 5 and dp[i-x][j-x]:\n                    dp[i][j] = True\n                    break\n            if dp[i][j]:\n                break\n\n    cnt = 0\n    for i in range(k+1):\n        for j in range(i, k+1):\n            if dp[n][j]:\n                cnt = j\n                break\n\n    return cnt\n\nstdin = \"5 2\\n1 2 15 15 15\"\nprint(solution(stdin))  # Output: 5\n\nstdin = \"6 1\\n36 4 1 25 9 16\"\nprint(solution(stdin))  # Output: 2\n\nstdin = \"4 4\\n1 10 100 1000\"\nprint(solution(stdin))  # Output: 4"
    },
    {
        "number": 4098,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n\n    # dp[i][j] = max number of students in j teams\n    dp = [[0] * (k+1) for _ in range(n+1)]\n\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            dp[i][j] = dp[i-1][j]\n            for p in range(1, i):\n                if abs(a[p] - a[i-1]) <= 5:\n                    dp[i][j] = max(dp[i][j], dp[p-1][j-1] + i-p)\n\n    return dp[-1][-1]"
    },
    {
        "number": 4098,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    # Sort students by skill\n    a.sort()\n\n    # Calculate the minimum difference between skills of each pair of students in each team\n    max_diff = 5 * k\n    for i in range(n):\n        for j in range(i+1, n):\n            if abs(a[i] - a[j]) > max_diff:\n                break\n        else:\n            continue\n        break\n\n    # Calculate the minimum possible total number of students in each team\n    total = 0\n    count = 0\n    for i in range(n):\n        total += a[i]\n        count += 1\n        if total > max_diff:\n            total -= a[i-count+1]\n            count -= 1\n        if count == k:\n            return total\n\n    # If k is not enough to form any team, return the minimum possible total number of students in each team\n    return a[0]\n\n\nprint(solution(\"5 2\\n1 2 15 15 15\"))\nprint(solution(\"6 1\\n36 4 1 25 9 16\"))\nprint(solution(\"4 4\\n1 10 100 1000\"))"
    },
    {
        "number": 4098,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n\n    i = j = 0\n    cnt = 0\n    while j < n:\n        cnt += 1\n        j += 1\n        if j == n or a[j] - a[i] <= 5:\n            if cnt > k:\n                cnt -= 1\n                i += 1\n                while i < j and a[i] - a[i-1] <= 5:\n                    i += 1\n            j = i + 1\n            cnt = 0\n\n    return cnt\n\n\nprint(solution(input()))"
    },
    {
        "number": 4098,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    ans = 0\n    i = 0\n    j = k - 1\n    while i <= j and j < n:\n        if a[i] + a[j] > 15:\n            j -= 1\n        else:\n            i += 1\n        ans += 1\n    return str(ans)"
    },
    {
        "number": 4098,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    # Sort students by their skill\n    a = sorted(a, reverse=True)\n\n    # Calculate maximum team size\n    max_size = (a[0] + 5) // 5\n\n    # Calculate maximum number of teams\n    max_teams = n // max_size\n\n    # Check if there are any teams left\n    if n % max_size == 0:\n        max_teams -= 1\n\n    # Check if we have enough teams\n    max_teams = min(max_teams, k)\n\n    # Calculate total number of students in teams\n    total = sum(max_size * (max_teams - i) + sum(a[i * max_size: i * max_size + max_size]) for i in range(max_teams))\n\n    return str(total)"
    },
    {
        "number": 4098,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort(reverse=True)\n    total = sum(a)\n    if total % k == 0:\n        num_per_team = total // k\n    else:\n        num_per_team = total // k + 1\n    team_sizes = [num_per_team] * k\n    i = 0\n    while i < len(a):\n        if team_sizes[i] == 0:\n            i += 1\n        else:\n            team_sizes[i] -= 1\n            j = i + 1\n            while j < len(a) and abs(a[i] - a[j]) <= 5:\n                team_sizes[j] -= 1\n                j += 1\n            i = j\n    return max(team_sizes)\n"
    },
    {
        "number": 4098,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort(reverse=True)\n    ans = 0\n    for i in range(min(n, k)):\n        j = i + 1\n        while j < min(n, k) and a[i] - a[j] <= 5:\n            j += 1\n        ans += j - i\n    return str(ans)"
    },
    {
        "number": 4099,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    lines = stdin.strip().split('\\n')\n    N, K, M = map(int, lines[0].split())\n    A = list(map(int, lines[1].split()))\n    \n    # sort A in ascending order\n    A.sort()\n    \n    # calculate the minimum score required to achieve the goal\n    min_score = A[-1] + M - K*N\n    \n    # check if minimum score is achievable\n    if min_score <= 0:\n        return str(min_score)\n    \n    # if not achievable, return -1\n    return '-1'"
    },
    {
        "number": 4099,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N, K, M = map(int, stdin.readline().strip().split())\n    A = list(map(int, stdin.readline().strip().split()))\n    \n    # Calculate minimum required score on final subject\n    if M >= sum(A) / len(A):\n        return '-1'\n    else:\n        for i in range(K, M-1, -1):\n            if sum(A) / len(A) < M:\n                A.append(i)\n                break\n        return A[-1]"
    },
    {
        "number": 4099,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n, k, m = list(map(int, stdin.readline().split()))\n    a = list(map(int, stdin.readline().split()))\n\n    # sort subjects in descending order of scores\n    a.sort(reverse=True)\n\n    # compute the sum of all subjects scored\n    total_score = sum(a)\n\n    # compute the average score\n    avg_score = total_score / n\n\n    # compute the minimum score required on the final subject to meet the goal\n    if avg_score >= m:\n        return \"0\"\n\n    remaining = m - avg_score\n\n    # check if the remaining score is less than or equal to the number of subjects left to take\n    if remaining <= n - 1:\n        return str(remaining)\n\n    # if the remaining score is greater than the number of subjects left to take, the goal cannot be achieved\n    return \"-1\""
    },
    {
        "number": 4099,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    N, K, M = map(int, stdin.readline().strip().split())\n    A = list(map(int, stdin.readline().strip().split()))\n\n    # check if goal is achievable\n    if sum(A) / N < M:\n        return -1\n\n    # initialize variables\n    max_score = A[-1]\n    min_score = max_score\n    for i in range(N-2, -1, -1):\n        if A[i] < max_score - 1:\n            min_score = A[i]\n            break\n\n    # return result\n    if min_score + 1 > M:\n        return min_score + 1\n    else:\n        return -1"
    },
    {
        "number": 4099,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N, K, M = map(int, stdin.readline().split())\n    A = list(map(int, stdin.readline().split()))\n\n    # Calculate minimum score needed on final subject\n    total = sum(A)\n    if total < M:\n        return \"-1\"\n    score_needed = (M - total + K) // (N - 1)\n\n    # Check if score needed is possible\n    if score_needed > K:\n        return \"-1\"\n\n    # Return minimum score needed on final subject\n    return score_needed"
    },
    {
        "number": 4099,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    n, k, m = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    # find the minimum number of points needed on the final subject\n    min_score = k\n    for i in range(n-1):\n        # find the maximum score that can be obtained on the i-th subject\n        max_score = max(0, k - a[i])\n        # find the minimum number of points that need to be scored on the final subject\n        min_score = min(min_score, m - a[i], k - max_score)\n    # check if the goal can be achieved\n    if min_score <= 0:\n        return '-1'\n    else:\n        return str(min_score)"
    },
    {
        "number": 4099,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m = map(int, stdin.readline().strip().split())\n    a = list(map(int, stdin.readline().strip().split()))\n    min_points = -1\n    max_points = k*n\n    while min_points + 1 < max_points:\n        mid_points = (min_points + max_points) // 2\n        score = sum(a) + mid_points\n        if score >= m*n:\n            min_points = mid_points\n        else:\n            max_points = mid_points\n    if min_points == -1:\n        return \"-1\"\n    return str(min_points)"
    },
    {
        "number": 4099,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    n, k, m = map(int, stdin.readline().strip().split())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    # sort input array\n    a.sort()\n\n    # find minimum score\n    low = 0\n    high = k\n    while low <= high:\n        mid = (low + high) // 2\n        # calculate average score\n        avg = sum(a[:n-1]) + mid\n        # check if goal is met\n        if avg >= m:\n            high = mid - 1\n            result = mid\n        else:\n            low = mid + 1\n\n    # check if goal is met\n    if result == -1:\n        return \"-1\"\n    else:\n        return str(result)"
    },
    {
        "number": 4099,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, K, M = map(int, stdin.readline().strip().split())\n    A = list(map(int, stdin.readline().strip().split()))\n    A_sum = sum(A)\n    if A_sum >= M * (N-1):\n        return -1\n    if M == K:\n        return A_sum\n    A_sum -= A[-1]\n    n = N - 1\n    while A_sum < M * n:\n        A_sum += A[n-1]\n        n -= 1\n    if A_sum >= M * n:\n        return A_sum - M * n\n    return -1"
    },
    {
        "number": 4099,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n, k, m = map(int, stdin.split()[:3])\n    scores = list(map(int, stdin.split()[3:]))\n    # find minimum required score\n    if sum(scores) + m > k*n:\n        return '-1'\n    else:\n        return str(k*n - sum(scores))"
    },
    {
        "number": 4100,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    N, K, Q = map(int, lines[0].split())\n    answers = [int(line) for line in lines[1:]]\n    scores = [K]*N\n    for answer in answers:\n        scores[answer-1] -= 1\n        for i in range(N):\n            if i!= answer-1 and scores[i] < 0:\n                return 'No'\n    return 'Yes'"
    },
    {
        "number": 4100,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, K, Q = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n    scores = [K] * N\n    for i in range(Q):\n        scores[A[i]-1] -= 1\n        if scores[A[i]-1] < 0:\n            return \"No\"\n    return \"Yes\""
    },
    {
        "number": 4100,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N, K, Q = map(int, stdin.readline().split())\n    A = list(map(int, stdin.readline().split()))\n    \n    # Initialize scores\n    scores = [K] * N\n    \n    # Process questions\n    for a in A:\n        for i in range(N):\n            if i!= a - 1:\n                scores[i] -= 1\n    \n    # Check survival\n    survived = [True] * N\n    for i in range(N):\n        if scores[i] <= 0:\n            survived[i] = False\n    \n    # Write output\n    return '\\n'.join(['Yes' if survived[i] else 'No' for i in range(N)])"
    },
    {
        "number": 4100,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    N, K, Q = map(int, stdin.readline().split())\n    A = list(map(int, stdin.readline().split()))\n\n    # initialize scores\n    scores = [K] * N\n\n    # update scores\n    for a in A:\n        scores[a-1] -= 1\n\n    # check survival\n    survive = [False] * N\n    for i in range(N):\n        if scores[i] <= 0:\n            survive[i] = False\n        else:\n            survive[i] = True\n\n    # output result\n    for i in range(N):\n        if survive[i]:\n            print(\"Yes\")\n        else:\n            print(\"No\")\n\n    return \"\""
    },
    {
        "number": 4100,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, K, Q = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n\n    scores = [K]*N\n    for i in range(Q):\n        scores[A[i]-1] -= 1\n\n    survivors = [1 if score > 0 else 0 for score in scores]\n    return \"\\n\".join([\"Yes\" if survive else \"No\" for survive in survivors])\n"
    },
    {
        "number": 4100,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Reading input from stdin\n    n, k, q = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    # Initializing player scores with K points\n    scores = [k] * n\n    # Updating player scores based on correct answers\n    for i in a:\n        for j in range(n):\n            if i!= j+1:\n                scores[j] -= 1\n    # Checking if players survived the game\n    result = [\"Yes\" if score > 0 else \"No\" for score in scores]\n    return \"\\n\".join(result)"
    },
    {
        "number": 4100,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k, q = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    scores = [k] * n\n    for i in range(q):\n        scores[a[i]-1] -= 1\n        if scores[a[i]-1] == 0:\n            return \"No\"\n    return \"Yes\""
    },
    {
        "number": 4100,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    n, k, q = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n\n    # Initialize scores\n    scores = [k] * n\n\n    # Update scores\n    for i in range(q):\n        scores[a[i]-1] -= 1\n\n    # Check survival\n    survival = ['Yes' if score <= 0 else 'No' for score in scores]\n\n    # Print output\n    return '\\n'.join(survival)"
    },
    {
        "number": 4100,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, K, Q = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n    \n    scores = [K]*N\n    for i in range(Q):\n        scores[A[i]-1] -= 1\n    \n    survivors = [1 if score > 0 else 0 for score in scores]\n    \n    return \"\\n\".join([\"Yes\" if survivor else \"No\" for survivor in survivors])\n\nstdin = \"6 3 4\\n3\\n1\\n3\\n2\"\nprint(solution(stdin))"
    },
    {
        "number": 4100,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k, q = map(int, stdin.readline().split())\n    answers = list(map(int, stdin.readline().split()))\n    \n    scores = [k] * n\n    \n    for answer in answers:\n        scores[answer - 1] -= 1\n        for i in range(n):\n            if i!= answer - 1:\n                scores[i] = max(0, scores[i] - 1)\n    \n    surviving_players = [i+1 for i in range(n) if scores[i] > 0]\n    \n    result = \"\\n\".join([\"Yes\" if i in surviving_players else \"No\" for i in range(1, n+1)])\n    \n    return result\n"
    },
    {
        "number": 4101,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    a = [list(map(int, stdin.split())) for _ in range(n)]\n    # Invert row and column with maximum number of 0s\n    r, c = [0] * n, [0] * m\n    for i in range(n):\n        r[i] = sum(a[i]) == 0\n        a[i] = [1 - x for x in a[i]]\n    for j in range(m):\n        c[j] = sum([a[i][j] for i in range(n)]) == 0\n        for i in range(n):\n            a[i][j] = 1 - a[i][j]\n    # Check if matrix is sorted\n    sorted_a = sorted([x for row in a for x in row])\n    if sorted_a == [0] * (n * m):\n        return \"YES\\n\" + \"\".join(map(str, r)) + \"\\n\" + \"\".join(map(str, c))\n    return \"NO\""
    },
    {
        "number": 4101,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    matrix = [[int(x) for x in stdin.readline().split()] for _ in range(n)]\n    \n    operations = []\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] == 0:\n                operations.append(('i', i))\n                matrix[i] = [1 - x for x in matrix[i]]\n            elif matrix[i][j] == 1:\n                operations.append(('c', j))\n                for k in range(n):\n                    matrix[k][j] = 1 - matrix[k][j]\n    \n    if sorted([x for row in matrix for x in row]) == [x for row in matrix for x in row]:\n        return 'YES\\n' + ''.join(x[1] for x in operations) + '\\n' + ''.join(x[1] for x in reversed(operations))\n    \n    return 'NO\\n'"
    },
    {
        "number": 4101,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = [list(map(int, stdin.split())) for _ in range(n)]\n    operations = []\n    for i in range(n):\n        for j in range(m):\n            if a[i][j]!= i + j:\n                operations.append(f\"i{i+1}j{j+1}\")\n            else:\n                operations.append(f\"i{i+1}j{j+1}inv\")\n    sorted_operations = sorted(operations)\n    for op in sorted_operations:\n        if op.endswith(\"inv\"):\n            i = int(op[1:].split(\"j\")[0]) - 1\n            j = int(op.split(\"j\")[1][:-3]) - 1\n            a[i] = [1 - x for x in a[i]]\n            a[:, j] = [1 - x for x in a[:, j]]\n        else:\n            i = int(op[1:].split(\"j\")[0]) - 1\n            j = int(op.split(\"j\")[1]) - 1\n            a[i] = [1 - x for x in a[i]]\n            a[:, j] = [1 - x for x in a[:, j]]\n    if sorted([x for row in a for x in row])!= sorted([0] * (n * m)):\n        return \"NO\"\n    else:\n        row_inv = ''.join([str(1 - sum(row)) for row in a])\n        col_inv = ''.join([str(1 - sum(col)) for col in zip(*a)])\n        return f\"YES\\n{row_inv}\\n{col_inv}\""
    },
    {
        "number": 4101,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    a = []\n    for _ in range(n):\n        row = list(map(int, stdin.readline().split()))\n        a.append(row)\n\n    # Sort the matrix by row and column operations\n    sorted_matrix = []\n    row_operations = []\n    col_operations = []\n    for i in range(n):\n        for j in range(m):\n            sorted_matrix.append(a[i][j])\n            row_operations.append('0' if i % 2 == 0 else '1')\n            col_operations.append('0' if j % 2 == 0 else '1')\n\n    sorted_matrix.sort()\n\n    # Check if there is a valid sequence of operations\n    valid_sequence = True\n    for i in range(n):\n        for j in range(m):\n            if a[i][j]!= sorted_matrix[i*m+j]:\n                valid_sequence = False\n                break\n        if not valid_sequence:\n            break\n    if not valid_sequence:\n        return \"NO\"\n\n    # Print the results\n    row_str = ''.join(row_operations)\n    col_str = ''.join(col_operations)\n    return \"YES\\n\" + row_str + \"\\n\" + col_str"
    },
    {
        "number": 4101,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    n, m = map(int, stdin.readline().split())\n    a = [[int(c) for c in stdin.readline().split()] for _ in range(n)]\n    \n    # Check if there are multiple answers\n    answer_set = set()\n    for row_order in itertools.product([0, 1], repeat=n):\n        for col_order in itertools.product([0, 1], repeat=m):\n            # Apply row and column orders\n            a_sorted = [[a[i][j] for j in sorted(range(m), key=lambda j: col_order[j])] for i in sorted(range(n), key=lambda i: row_order[i])]\n            # Check if the matrix is sorted\n            if all(a_sorted[i][j] <= a_sorted[i][j+1] for i in range(n) for j in range(m-1)):\n                answer_set.add((\"\".join(map(str, row_order)), \"\".join(map(str, col_order))))\n    \n    # If no answer is found, print NO\n    if not answer_set:\n        return \"NO\\n\"\n    # Otherwise, print the answer\n    else:\n        for row_order, col_order in answer_set:\n            # Apply row and column orders\n            a_sorted = [[a[i][j] for j in sorted(range(m), key=lambda j: col_order[j])] for i in sorted(range(n), key=lambda i: row_order[i])]\n            # Check if the matrix is sorted\n            if all(a_sorted[i][j] <= a_sorted[i][j+1] for i in range(n) for j in range(m-1)):\n                return \"YES\\n\" + row_order + \"\\n\" + col_order + \"\\n\""
    },
    {
        "number": 4101,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = []\n    for _ in range(n):\n        a.append(list(map(int, stdin.split())))\n    # convert matrix to list of integers\n    a = [x for row in a for x in row]\n    # check if the matrix is already sorted\n    if a == sorted(a):\n        return \"YES\\n\" + \"0\" * n + \"\\n\" + \"0\" * m\n    # define possible operations\n    def invert_row(i):\n        a[i::m] = [1 - x for x in a[i::m]]\n    def invert_col(j):\n        a[j::1] = [1 - x for x in a[j::1]]\n    # try all possible operations\n    for i in range(n):\n        for j in range(m):\n            if a[i*m+j] == 0:\n                continue\n            # try to invert the row\n            invert_row(i)\n            if a == sorted(a):\n                return \"YES\\n\" + \"1\" + \"0\"*(n-1) + \"\\n\" + \"0\" * m\n            # try to invert the column\n            invert_col(j)\n            if a == sorted(a):\n                return \"YES\\n\" + \"0\" * n + \"\\n\" + \"1\" + \"0\"*(m-1)\n    # no solution found\n    return \"NO\""
    },
    {
        "number": 4101,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    matrix = []\n    for _ in range(n):\n        matrix.append(list(map(int, stdin.split()[0:m])))\n\n    def invert(row):\n        return [1 - i for i in row]\n\n    def check_sorted(matrix):\n        sorted_matrix = []\n        for i in range(n):\n            for j in range(m):\n                sorted_matrix.append(matrix[i][j])\n        sorted_matrix = sorted(sorted_matrix)\n        for i in range(1, len(sorted_matrix)):\n            if sorted_matrix[i] < sorted_matrix[i-1]:\n                return False\n        return True\n\n    def get_ops(matrix):\n        ops = []\n        for i in range(n):\n            if matrix[i]!= invert(matrix[i]):\n                ops.append(('row', i))\n        for j in range(m):\n            col = [matrix[i][j] for i in range(n)]\n            if col!= invert(col):\n                ops.append(('col', j))\n        return ops\n\n    ops = get_ops(matrix)\n    if not ops:\n        return \"NO\\n\"\n    if check_sorted(matrix):\n        return \"YES\\n\" + \"\".join(['0' for _ in range(n)]) + \"\\n\" + \"\".join(['0' for _ in range(m)]) + \"\\n\"\n    ops_done = []\n    while ops:\n        op_type, op_idx = ops.pop(0)\n        if op_type == 'row':\n            matrix[op_idx] = invert(matrix[op_idx])\n        else:\n            for i in range(n):\n                matrix[i][op_idx] = invert(matrix[i][op_idx])\n        ops_done.append((op_type, op_idx))\n        if check_sorted(matrix):\n            r = \"\".join(['1' if op[0] == 'row' else '0' for op in ops_done])\n            c = \"\".join(['1' if op[0] == 'col' else '0' for op in ops_done])\n            return \"YES\\n\" + r + \"\\n\" + c + \"\\n\"\n\n    return \"NO\\n\""
    },
    {
        "number": 4101,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    a = [list(map(int, stdin.readline().split())) for _ in range(n)]\n    \n    # Check if initial matrix is sorted\n    for i in range(n):\n        for j in range(m-1):\n            if a[i][j] > a[i][j+1]:\n                break\n        else:\n            continue\n        break\n    else:\n        return \"YES\\n\" + \"\".join(\"0\" * n + \"1\" * m) + \"\\n\" + \"\".join(\"1\" * m + \"0\" * (n-1))\n    \n    # Perform operations to sort the matrix\n    r = \"\"\n    c = \"\"\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == 0:\n                r += \"0\"\n                if j!= m-1 and a[i][j+1] == 1:\n                    a[i][j], a[i][j+1] = a[i][j+1], a[i][j]\n                    c += \"0\"\n                else:\n                    c += \"1\"\n            else:\n                r += \"1\"\n                if i!= 0 and a[i-1][j] == 0:\n                    a[i-1][j], a[i][j] = a[i][j], a[i-1][j]\n                    r = r[:-1] + \"0\" + r[-1]\n                else:\n                    c += \"0\"\n    \n    # Check if sorted matrix is correct\n    for i in range(n):\n        for j in range(m-1):\n            if a[i][j] > a[i][j+1]:\n                return \"NO\"\n        else:\n            continue\n        break\n    \n    return \"YES\\n\" + r + \"\\n\" + c"
    },
    {
        "number": 4101,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n, m = map(int, lines[0].split())\n    a = []\n    for i in range(1, n+1):\n        row = list(map(int, lines[i].split()))\n        a.append(row)\n\n    # perform operations to sort the matrix\n    def invert(i):\n        a[i] = [1-x for x in a[i]]\n    def flip(i, j):\n        a[i][j] = 1 - a[i][j]\n\n    for i in range(n):\n        invert(i)\n    for i in range(n):\n        for j in range(m):\n            flip(i, j)\n\n    # check if the matrix is sorted\n    sorted_matrix = []\n    for i in range(n):\n        for j in range(m):\n            sorted_matrix.append(a[i][j])\n    sorted_matrix.extend([a[i][m-1] for i in range(n)])\n    sorted_matrix.extend([a[n-1][j] for j in range(m)])\n    sorted_matrix.extend([a[n-1][m-1]])\n    for i in range(n*m+1):\n        if i == n*m:\n            break\n        if sorted_matrix[i] > sorted_matrix[i+1]:\n            return \"NO\"\n\n    # find the sequence of operations\n    r = ''.join(['1' if a[i] == [1-x for x in a[i]] else '0' for i in range(n)])\n    c = ''.join(['1' if a[i][j] == 1-a[i][j] else '0' for i in range(n) for j in range(m)])\n\n    return \"YES\\n\"+r+\"\\n\"+c"
    },
    {
        "number": 4101,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    a = [list(map(int, stdin.split())) for _ in range(n)]\n    ans = \"\"\n    for i in range(n):\n        count = 0\n        for j in range(m):\n            if a[i][j] == 0:\n                count += 1\n        if count > 0 and count < m:\n            ans += \"1\"\n        else:\n            ans += \"0\"\n    for j in range(m):\n        count = 0\n        for i in range(n):\n            if a[i][j] == 0:\n                count += 1\n        if count > 0 and count < n:\n            ans += \"1\"\n        else:\n            ans += \"0\"\n    if sorted(a[i][j] for i in range(n) for j in range(m)) == list(range(n * m)):\n        return \"YES\\n\" + ans\n    else:\n        return \"NO\"\n\nprint(solution(\"2 2\\n1 1\\n0 1\")) # YES\\n00\\n10\nprint(solution(\"3 4\\n0 0 0 1\\n0 0 0 0\\n1 1 1 1\")) # YES\\n010\\n0000\nprint(solution(\"3 3\\n0 0 0\\n1 0 1\\n1 1 0\")) # NO"
    },
    {
        "number": 4102,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    This function takes a string of digits as input and returns \"Yes\" or \"No\".\n    If the sum of digits of the string is divisible by 3, it returns \"Yes\".\n    Otherwise, it returns \"No\".\n    \"\"\"\n    sum = 0\n    for digit in stdin:\n        sum += int(digit)\n    if sum % 3 == 0:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4102,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    if stdin == stdin[::-1]:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4102,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # convert the input string to a list of integers\n    nums = list(map(int, stdin))\n    \n    # check if the list contains consecutive digits\n    for i in range(len(nums) - 1):\n        if nums[i+1] - nums[i] == 1:\n            return \"Yes\"\n        \n    # if no consecutive digits were found, return \"No\"\n    return \"No\""
    },
    {
        "number": 4102,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    digits = [int(digit) for digit in stdin]\n    is_increasing = all(digits[i] < digits[i+1] for i in range(len(digits)-1))\n    has_two_adjacent = any(digits[i] == digits[i+1] for i in range(len(digits)-1))\n    if is_increasing and has_two_adjacent:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4102,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Convert input string to integer\n    num = int(stdin)\n    \n    # Check if number is prime or not\n    if num < 2:\n        return \"No\"\n    \n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return \"No\"\n    \n    return \"Yes\""
    },
    {
        "number": 4102,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    digits = [int(d) for d in stdin]\n    for i in range(len(digits)):\n        if digits[i]!= digits[-i-1]:\n            return \"No\"\n    return \"Yes\""
    },
    {
        "number": 4102,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n > 0:\n        for i in range(2, n):\n            if n % i == 0:\n                return \"No\"\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4102,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin) == 1:\n        return \"Yes\" if stdin[0] == \"0\" else \"No\"\n    for i in range(1, len(stdin)):\n        if stdin[i] < stdin[i-1]:\n            return \"No\"\n    return \"Yes\""
    },
    {
        "number": 4102,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    if stdin[0] == stdin[1] == stdin[2] or stdin[1] == stdin[2] == stdin[3] or stdin[2] == stdin[3] == stdin[4]:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4102,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == sum([int(i)**2 for i in str(n)]):\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4103,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, b, a = map(int, stdin.split()[:3])\n    s = list(map(int, stdin.split()[3:]))\n\n    # Initialize variables\n    battery = a\n    accumulator = 0\n\n    # Initialize variables to store the maximum number of segments\n    max_segments = 0\n    max_battery_segments = 0\n    max_accumulator_segments = 0\n\n    # Iterate through all segments\n    for i in range(n):\n        # Decrease battery if there is one\n        if battery > 0 and s[i] == 0:\n            battery -= 1\n        # Decrease accumulator\n        if accumulator > 0:\n            accumulator -= 1\n        # Increase accumulator if segment is exposed\n        if s[i] == 1:\n            accumulator = min(accumulator + 1, a)\n        # Increment segment count if the robot can use both battery and accumulator\n        if battery > 0 and accumulator > 0:\n            max_segments = max(max_segments, i+1)\n            max_battery_segments = max(max_battery_segments, i)\n            max_accumulator_segments = max(max_accumulator_segments, n-i)\n\n    return max(max_segments, max_battery_segments, max_accumulator_segments)"
    },
    {
        "number": 4103,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Reading input\n    n, b, a = map(int, stdin.readline().split())\n    s = list(map(int, stdin.readline().split()))\n\n    # Initialize variables\n    battery = b\n    accumulator = 0\n    current_position = 0\n    max_distance = 0\n\n    # Iterate through segments\n    for i in range(n):\n        # Decrease battery or accumulator\n        if battery > 0 and current_position!= i:\n            battery -= 1\n        if accumulator > 0:\n            accumulator -= 1\n\n        # Increase accumulator if segment is exposed to sunlight and battery is used\n        if s[i] == 1 and battery > 0:\n            accumulator = min(accumulator + 1, a)\n\n        # Update current position and max distance\n        current_position = i\n        max_distance = max(max_distance, current_position)\n\n        # Decrease battery if accumulator is used\n        if accumulator > 0:\n            battery -= 1\n\n    return max_distance\n\nprint(solution(input()))"
    },
    {
        "number": 4103,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, b, a = map(int, stdin.split())\n    s = list(map(int, stdin.readline().strip().split()))\n    # Initialize variables\n    max_segments = 0\n    battery_charge = b\n    accumulator_charge = a\n    # Loop through segments\n    for i in range(n):\n        # If current segment is exposed to sunlight\n        if s[i] == 1:\n            # Check if the robot can pass using accumulator first\n            if accumulator_charge > 0:\n                accumulator_charge -= 1\n            # If accumulator is not enough, check if the robot can pass using battery\n            elif battery_charge > 0:\n                battery_charge -= 1\n            # If both battery and accumulator are empty, break\n            else:\n                break\n            # Update the max_segments count\n            max_segments += 1\n        # If current segment is not exposed to sunlight\n        else:\n            # Check if the robot can pass using battery first\n            if battery_charge > 0:\n                battery_charge -= 1\n            # If battery is not enough, check if the robot can pass using accumulator\n            elif accumulator_charge > 0:\n                accumulator_charge -= 1\n            # If both battery and accumulator are empty, break\n            else:\n                break\n            # Update the max_segments count\n            max_segments += 1\n    # Return the max_segments count\n    return str(max_segments)"
    },
    {
        "number": 4103,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, b, a = map(int, stdin.readline().strip().split())\n    s = list(map(int, stdin.readline().strip().split()))\n\n    b_charge = b\n    a_charge = a\n    max_segments = 0\n\n    for i in range(n):\n        if s[i] == 1:\n            if b_charge > 0:\n                b_charge -= 1\n                a_charge += 1\n            else:\n                a_charge -= 1\n        elif a_charge > 0:\n            a_charge -= 1\n        else:\n            continue\n        max_segments += 1\n\n    return max_segments"
    },
    {
        "number": 4103,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, b, a = map(int, stdin.strip().split())\n    s = list(map(int, stdin.strip().split()))\n    \n    battery = b\n    accumulator = a\n    \n    battery_count = 0\n    accumulator_count = 0\n    \n    for i in range(n):\n        if battery > 0 and s[i] == 0:\n            battery -= 1\n            battery_count += 1\n        elif battery > 0 and s[i] == 1 and battery > accumulator:\n            accumulator += 1\n            battery -= 1\n            battery_count += 1\n        elif accumulator > 0:\n            accumulator -= 1\n            accumulator_count += 1\n        else:\n            break\n            \n    return max(battery_count, accumulator_count)\n"
    },
    {
        "number": 4103,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, b, a = map(int, stdin.split())\n    s = list(map(int, stdin.split()))\n    dp = [0] * (n+1)\n    dp[0] = 0\n    dp[1] = 1\n    for i in range(2, n+1):\n        dp[i] = dp[i-1] + 1\n        if s[i-1] == 1 and b > 0:\n            dp[i] = max(dp[i], dp[i-2] + 1)\n        if a > 0:\n            dp[i] = max(dp[i], dp[i-1] + 1)\n    return dp[n]"
    },
    {
        "number": 4103,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, b, a = map(int, stdin.split()[0:3])\n    s = list(map(int, stdin.split()[3:]))\n\n    dp = [0] * (n+1)\n    dp[0] = 1\n\n    for i in range(1, n+1):\n        battery_used = dp[i-1]\n        if s[i-1]:\n            if b > 0 and a < a:\n                accumulator_used = dp[i-2] if i > 1 else 0\n                dp[i] = max(battery_used, accumulator_used) + 1\n                a += 1\n            else:\n                dp[i] = battery_used\n        else:\n            accumulator_used = dp[i-2] if i > 1 else 0\n            dp[i] = max(battery_used, accumulator_used)\n\n    return str(dp[n])"
    },
    {
        "number": 4103,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, b, a = map(int, stdin.split())\n    s = list(map(int, stdin.split()))\n    \n    # battery and accumulator charging\n    battery = b\n    accumulator = a\n    max_segments = 0\n    \n    for i in range(n):\n        if s[i] == 0:\n            # battery\n            if battery > 0:\n                battery -= 1\n            else:\n                # battery is empty, check if accumulator can be used\n                if accumulator > 0:\n                    accumulator -= 1\n                else:\n                    # accumulator is also empty, can't pass this segment\n                    break\n        else:\n            # sunlight\n            # use accumulator\n            if accumulator < a:\n                accumulator += 1\n            else:\n                # accumulator is full, can't pass this segment\n                break\n        max_segments += 1\n    \n    return max_segments\n"
    },
    {
        "number": 4103,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, b, a = map(int, stdin.split()[0:3])\n    s = list(map(int, stdin.split()[3:]))\n\n    battery = 0\n    accumulator = 0\n    segments = 0\n\n    for i in range(n):\n        if s[i] == 1:\n            if battery > 0:\n                accumulator += 1\n                battery -= 1\n            elif accumulator > 0:\n                accumulator -= 1\n            else:\n                battery = a - 1 if a > 0 else 0\n                accumulator = 0\n        else:\n            if battery > 0:\n                battery -= 1\n            elif accumulator > 0:\n                accumulator -= 1\n            else:\n                battery = a - 1 if a > 0 else 0\n                accumulator = 0\n\n        if battery > 0:\n            segments += 1\n\n    return segments"
    },
    {
        "number": 4103,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, b, a = map(int, stdin.readline().split())\n    s = list(map(int, stdin.readline().split()))\n\n    ans = 0\n    battery = b\n    accumulator = a\n\n    for i in range(n):\n        if s[i] == 1:\n            if battery == 0:\n                battery = b\n            if accumulator == 0:\n                battery -= 1\n                accumulator = a\n            else:\n                accumulator -= 1\n        else:\n            if battery == 0:\n                battery = b\n            if accumulator == 0:\n                battery -= 1\n            else:\n                accumulator -= 1\n\n        ans += 1\n\n    return str(ans)\n"
    },
    {
        "number": 4104,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    expression = stdin.strip().split('+')\n    result = 0\n    for term in expression:\n        sign = 1\n        if term[0] == '-':\n            sign = -1\n            term = term[1:]\n        result += sign * int(term)\n    return str(result)"
    },
    {
        "number": 4104,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # parse the input string into a list of operands and operators\n    operands = []\n    operators = []\n    current_operand = ''\n    for char in stdin:\n        if char in '+-':\n            if current_operand:\n                operands.append(int(current_operand))\n                current_operand = ''\n            operators.append(char)\n        else:\n            current_operand += char\n    if current_operand:\n        operands.append(int(current_operand))\n    # evaluate the expression using the Shunting Yard algorithm\n    output_queue = []\n    operator_stack = []\n    for operand in operands:\n        output_queue.append(operand)\n    for operator in operators:\n        if operator == '+':\n            while operator_stack and operator_stack[-1] == '+':\n                output_queue.append(operator_stack.pop())\n            operator_stack.append(operator)\n        elif operator == '-':\n            while operator_stack and operator_stack[-1] == '-':\n                output_queue.append(operator_stack.pop())\n            operator_stack.append(operator)\n    while operator_stack:\n        output_queue.append(operator_stack.pop())\n    # evaluate the postfix expression\n    stack = []\n    for token in output_queue:\n        if isinstance(token, int):\n            stack.append(token)\n        else:\n            b = stack.pop()\n            a = stack.pop()\n            if token == '+':\n                stack.append(a + b)\n            else:\n                stack.append(a - b)\n    return str(stack.pop())"
    },
    {
        "number": 4104,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Evaluate the expression\n    result = eval(stdin)\n\n    # Return the result as a string\n    return str(result)"
    },
    {
        "number": 4104,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input into list of operands and arithmetic operations\n    operands = []\n    operations = []\n    current_operand = \"\"\n    for char in stdin:\n        if char.isdigit():\n            current_operand += char\n        elif current_operand:\n            operands.append(int(current_operand))\n            current_operand = \"\"\n        if char in \"+-\":\n            operations.append(char)\n    if current_operand:\n        operands.append(int(current_operand))\n\n    # Apply the arithmetic operations to the operands\n    result = operands[0]\n    for i in range(1, len(operands)):\n        if operations[i-1] == \"+\":\n            result += operands[i]\n        else:\n            result -= operands[i]\n\n    # Return the result as a string\n    return str(result)"
    },
    {
        "number": 4104,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Returns the result of evaluating the arithmetic expression given in stdin.\n    \"\"\"\n    stack = []\n    sign = '+'  # Initial sign is '+'\n    for i, c in enumerate(stdin):\n        if c.isdigit():\n            num = int(c)\n            # If the current character is the beginning of a new number, clear the sign\n            if i > 0 and stdin[i-1].isdigit():\n                num = num * (-1 if sign == '-' else 1)\n            # Add the current number to the stack\n            stack.append(num)\n        elif c in ('+', '-'):\n            sign = c\n        elif c == '(':\n            # Evaluate the expression inside the parentheses\n            start = i + 1\n            count = 1\n            for j in range(i+1, len(stdin)):\n                if stdin[j] == '(':\n                    count += 1\n                elif stdin[j] == ')':\n                    count -= 1\n                    if count == 0:\n                        stack.append(solution(stdin[start:j]))\n                        break\n    result = 0\n    while stack:\n        num = stack.pop()\n        if sign == '+':\n            result += num\n        elif sign == '-':\n            result -= num\n        sign = '+'\n    return result\n"
    },
    {
        "number": 4104,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    expression = stdin.strip()\n    operands = []\n    operators = []\n    for i, char in enumerate(expression):\n        if char.isdigit():\n            operand = ''\n            while i < len(expression) and expression[i].isdigit():\n                operand += expression[i]\n                i += 1\n            operands.append(int(operand))\n        elif char in ['+', '-']:\n            operators.append(char)\n            i += 1\n        elif char =='':\n            i += 1\n    result = 0\n    i = 0\n    while i < len(operands):\n        if operators[i] == '+':\n            result += operands[i]\n        else:\n            result -= operands[i]\n        i += 1\n    return str(result)"
    },
    {
        "number": 4104,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    expression = stdin.strip()\n    stack = []\n    for char in expression:\n        if char in ['+', '-']:\n            op2 = stack.pop()\n            op1 = stack.pop()\n            if char == '+':\n                stack.append(op1 + op2)\n            else:\n                stack.append(op1 - op2)\n        else:\n            stack.append(int(char))\n    return str(stack[-1])\n\nprint(solution(\"8-7+6-5+4-3+2-1-0\")) # Output: 4\nprint(solution(\"2+2\")) # Output: -46\nprint(solution(\"112-37\")) # Output: 375"
    },
    {
        "number": 4104,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    expression = stdin.strip().split('-')\n    stack = []\n    for token in expression:\n        if token.isnumeric():\n            stack.append(int(token))\n        else:\n            second_num = stack.pop()\n            first_num = stack.pop()\n            if token == '+':\n                stack.append(first_num + second_num)\n            elif token == '-':\n                stack.append(first_num - second_num)\n            else:\n                raise ValueError(\"Invalid operator\")\n    return str(stack[-1])"
    },
    {
        "number": 4104,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    expression = stdin.strip()\n    stack = []\n    for char in expression:\n        if char.isdigit():\n            stack.append(int(char))\n        else:\n            if char == \"+\":\n                result = stack.pop() + stack.pop()\n                stack.append(result)\n            elif char == \"-\":\n                result = stack.pop() - stack.pop()\n                stack.append(result)\n    return str(stack.pop())\n\nprint(solution(\"8-7+6-5+4-3+2-1-0\")) # Output: 4\nprint(solution(\"2+2\")) # Output: -46\nprint(solution(\"112-37\")) # Output: 375"
    },
    {
        "number": 4104,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    if not stdin:\n        return \"No input provided\"\n    else:\n        return str(eval(stdin))\n\nprint(solution(\"-8+7-6+5-4+3-2+1-0\")) # Output: 4\nprint(solution(\"2+2\")) # Output: -46\nprint(solution(\"112-37\")) # Output: 375"
    },
    {
        "number": 4105,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    \n    # Check if there is no suitable color choosing\n    if all(i == j for i in range(1, k+1) for j in range(1, k+1) if i!= j):\n        return \"NO\"\n    \n    # Check if there is any pair with identical costumes\n    if any(i == j for i in range(1, k+1) for j in range(1, k+1) for p in range(n)):\n        return \"NO\"\n    \n    # Check if there is any pair with the same man and woman costumes\n    if any(i == j for i in range(1, k+1) for j in range(1, k+1) for p in range(n)):\n        return \"NO\"\n    \n    # Check if there is any pair with adjacent man and woman costumes\n    if any(i == j for i in range(1, k+1) for j in range(1, k+1) for p in range(n-1)):\n        return \"NO\"\n    \n    # Check if there is any pair with adjacent man and woman costumes\n    if any(i == j for i in range(1, k+1) for j in range(1, k+1) for p in range(n-1)):\n        return \"NO\"\n    \n    # Check if there is any pair with the same man and woman costumes\n    if any(i == j for i in range(1, k+1) for j in range(1, k+1) for p in range(n)):\n        return \"NO\"\n    \n    # If all conditions are satisfied, print the colors of the costumes\n    colors = []\n    for i in range(n):\n        b, g = i%k+1, (i+1)%k+1\n        while b == g:\n            g = (g+1)%k+1\n        colors.append((b, g))\n    for color in colors:\n        print(*color)\n    return \"YES\""
    },
    {
        "number": 4105,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n\n    # check if no suitable choosing exists\n    if not (k > 1 and 2 * n >= k):\n        return \"NO\"\n\n    # create all possible pairs\n    pairs = [(i + 1, i + 2) for i in range(n)]\n\n    # create all possible costumes for pairs\n    costumes = [(i + 1, j + 1) for i in range(k) for j in range(k) if i!= j]\n\n    # filter suitable pairs and costumes\n    suitable_pairs = []\n    for pair in pairs:\n        man, woman = pair\n        suitable_costumes = [c for c in costumes if c[0]!= man or c[1]!= woman]\n        suitable_costumes = [c for c in suitable_costumes if c[0]!= c[1]]\n        suitable_pairs.append((pair, suitable_costumes))\n\n    # check if no suitable choosing exists\n    if not suitable_pairs:\n        return \"NO\"\n\n    # choose suitable colors for each pair\n    colors = []\n    for pair, suitable_costumes in suitable_pairs:\n        man, woman = pair\n        for c in suitable_costumes:\n            if man > woman:\n                colors.append(c[0])\n                colors.append(c[1])\n                break\n            elif woman > man:\n                colors.append(c[1])\n                colors.append(c[0])\n                break\n\n    # return result\n    result = \"YES\\n\"\n    for i in range(n):\n        result += f\"{colors[i*2]} {colors[i*2+1]}\\n\"\n    return result"
    },
    {
        "number": 4105,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.strip().split()))\n    pair_colors = []\n    for i in range(n):\n        b, g = list(map(int, input().strip().split()))\n        if b == g or (b, g) in pair_colors or (g, b) in pair_colors:\n            return \"NO\"\n        pair_colors.append((b, g))\n    return \"YES\\n\" + \"\\n\".join(map(lambda x: \" \".join(map(str, x)), pair_colors))"
    },
    {
        "number": 4105,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n\n    # check if it is impossible to find any suitable colors choosing\n    if k < n or (k >= 2*n and n%2 == 0):\n        return \"NO\"\n\n    # good color choosing: pairwise different colors for each adjacent pair\n    colors = []\n    for i in range(n//2):\n        colors.append((i+1, k-i))\n    for i in range(n//2, n):\n        colors.append((k-i+1, i+1))\n\n    # print result\n    print(\"YES\")\n    for color in colors:\n        print(color[0], color[1])\n\n    return \"\""
    },
    {
        "number": 4105,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if k > 2 * n:\n        return \"NO\"\n    visited = set()\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (i, j) in visited:\n                return \"NO\"\n            visited.add((i, j))\n            visited.add((j, i))\n    for i in range(n):\n        if i > 0 and b[i] == b[i - 1] and g[i] == g[i - 1]:\n            return \"NO\"\n        if i > 0 and b[i] == g[i - 1]:\n            return \"NO\"\n        if i > 0 and g[i] == b[i - 1]:\n            return \"NO\"\n        if i < n - 1 and b[i] == b[i + 1] and g[i] == g[i + 1]:\n            return \"NO\"\n        if i < n - 1 and b[i] == g[i + 1]:\n            return \"NO\"\n        if i < n - 1 and g[i] == b[i + 1]:\n            return \"NO\"\n    result = \"\"\n    for i in range(n):\n        result += f\"{b[i]} {g[i]}\\n\"\n    return result.strip()"
    },
    {
        "number": 4105,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    bad_combinations = []\n    for i in range(n):\n        for j in range(i+1, n):\n            if i == 0 or i!= j:\n                if j == 0 or j!= i+1:\n                    if i == 0 or i!= j+1:\n                        if j == 0 or j!= i+2:\n                            for b in range(1, k+1):\n                                if (b, k-b) not in bad_combinations:\n                                    for g in range(1, k+1):\n                                        if b!= g:\n                                            good_combinations = [(1,1),(2,2),(3,3)]\n                                            if (b, g) not in good_combinations and (g, b) not in good_combinations:\n                                                for h in range(i+2, n):\n                                                    if (b, g)!= (good_combinations[-1][0], good_combinations[-1][1]):\n                                                        if (b, g) == (good_combinations[-2][0], good_combinations[-2][1]) and h == n-1:\n                                                            return \"YES\\n\" + \"\\n\".join(list(map(str, [(b, g)]*n)))\n                                                        good_combinations.append((b, g))\n                                                    if (g, b)!= (good_combinations[-1][0], good_combinations[-1][1]):\n                                                        if (g, b) == (good_combinations[-2][0], good_combinations[-2][1]) and h == n-1:\n                                                            return \"YES\\n\" + \"\\n\".join(list(map(str, [(b, g)]*n)))\n                                                        good_combinations.append((g, b))\n                                                    if len(good_combinations) == n:\n                                                        return \"YES\\n\" + \"\\n\".join(list(map(str, good_combinations)))\n                                                bad_combinations.append((b, k-b))\n    return \"NO\"\n\nstdin = input()\nprint(solution(stdin))"
    },
    {
        "number": 4105,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if k < 2:\n        return \"NO\"\n    \n    color_set = set(range(1, k+1))\n    pairs = [[1,2] for i in range(n)]\n    \n    for i in range(n):\n        man_costume = pairs[i][0]\n        woman_costume = pairs[i][1]\n        \n        # Check if man and woman costumes are the same\n        if man_costume == woman_costume:\n            return \"NO\"\n        \n        # Check if man and woman costumes are in the color set\n        if man_costume not in color_set or woman_costume not in color_set:\n            return \"NO\"\n        \n        # Check if man and woman costumes are different\n        if man_costume == woman_costume:\n            return \"NO\"\n        \n        # Check if there are no two completely identical pairs\n        for j in range(i+1, n):\n            if pairs[j][0] == pairs[i][0] and pairs[j][1] == pairs[i][1]:\n                return \"NO\"\n        \n        # Check if there are no two adjacent pairs with the same man and woman costumes\n        if i < n-1 and pairs[i][0] == pairs[i+1][0] and pairs[i][1] == pairs[i+1][1]:\n            return \"NO\"\n    \n    # Color choosing is fine, print output\n    for pair in pairs:\n        print(\" \".join(map(str, pair)))\n    \n    return \"YES\""
    },
    {
        "number": 4105,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    pairs = set()\n    for i in range(1, n+1):\n        b, g = map(int, input().split())\n        if b in pairs or g in pairs:\n            return \"NO\"\n        pairs.add(b)\n        pairs.add(g)\n    for i in range(1, n):\n        if pairs[i] == pairs[i+1]:\n            return \"NO\"\n    for i in range(1, n):\n        if pairs[i] == pairs[i+1]:\n            return \"NO\"\n    return \"YES\""
    },
    {
        "number": 4105,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    \n    # Generate all possible color combinations\n    colors = [(i, j) for i in range(1, k+1) for j in range(1, k+1)]\n    \n    # Filter out colors that are not valid\n    colors = [color for color in colors if not any(b == color[0] and g == color[1] and b!= g for b, g in [(colors[i-1][0], colors[i-1][1]) for i in range(1, len(colors))])]\n    \n    # Filter out colors that are used in the previous pairs\n    colors = [color for color in colors if not any(b == color[0] or g == color[1] for b, g in [(colors[i-1][0], colors[i-1][1]) for i in range(1, len(colors))])]\n    \n    # Filter out colors that are used in the next pairs\n    colors = [color for color in colors if not any(b == color[0] or g == color[1] for b, g in [(colors[i+1][0], colors[i+1][1]) for i in range(len(colors)-1)])]\n    \n    # Check if there are enough suitable colors\n    if len(colors) < n:\n        return \"NO\"\n    \n    # Generate the output\n    for i in range(n):\n        print(colors[i][0], colors[i][1])\n    \n    return \"YES\"\n\nstdin = \"4 3\"\nprint(solution(stdin))\nstdin = \"10 4\"\nprint(solution(stdin))\nstdin = \"13 4\"\nprint(solution(stdin))"
    },
    {
        "number": 4105,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    \n    # Define the rules\n    def is_valid(colors):\n        for i in range(n-1):\n            if colors[i] == colors[i+1]:\n                return False\n            if colors[i] == colors[i+2] and colors[i+1] == colors[i+3]:\n                return False\n        return True\n    \n    # Create a list of all possible combinations of colors\n    colors = [(b,g) for b in range(1,k+1) for g in range(1,k+1) if b!= g]\n    \n    # Try each combination of colors\n    for c in colors:\n        if is_valid(c):\n            # Print the colors\n            print(\"YES\")\n            for i in range(n):\n                print(c[i%2], end=' ')\n            return \"\"\n    \n    # If no suitable choosing exists\n    print(\"NO\")\n    return \"\"\n\nstdin = input()\nprint(solution(stdin))"
    },
    {
        "number": 4106,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.split()[0:3])\n    a = list(map(int, stdin.split()[3:]))\n    \n    dp = [[0]*(n+1) for _ in range(n+1)]\n    \n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if i > j-k:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n            else:\n                dp[i][j] = dp[i-1][j] + a[i-1]\n                \n    if dp[n][x] == 0:\n        return \"-1\"\n    else:\n        return str(dp[n][x])"
    },
    {
        "number": 4106,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.split()[0:3])\n    a = list(map(int, stdin.split()[3:]))\n\n    if x > n or k > x or k > n:\n        return \"-1\"\n\n    dp = [[0] * x for _ in range(n)]\n\n    for i in range(k):\n        dp[i][i] = a[i]\n\n    for i in range(k, n):\n        for j in range(i - k + 1):\n            for k in range(j + k, i + 1):\n                dp[j][i] = max(dp[j][i], dp[j][k - 1] + dp[k][i])\n\n    return str(dp[0][n - 1])"
    },
    {
        "number": 4106,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.readline().strip().split())\n    a = list(map(int, stdin.readline().strip().split()))\n    \n    a.sort(reverse=True)\n    dp = [[0]*n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = a[i]\n    for L in range(2, n+1):\n        for i in range(n-L+1):\n            j = i+L-1\n            dp[i][j] = a[i]\n            for r in range(i+1, j):\n                if dp[i][r] + dp[r][j] > dp[i][j]:\n                    dp[i][j] = dp[i][r] + dp[r][j]\n    \n    if dp[0][n-1] < k*x:\n        return -1\n    else:\n        return dp[0][n-1] - sum(a[:n-x]) if n-x >= 0 else dp[0][n-1]\n\nprint(solution(\"5 2 3\\n5 1 3 10 1\\n\")) #18\nprint(solution(\"6 1 5\\n10 30 30 70 10 10\\n\")) #-1\nprint(solution(\"4 3 1\\n1 100 1 1\\n\")) #100"
    },
    {
        "number": 4106,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    n, k, x = map(int, stdin.split()[0:3])\n    a = list(map(int, stdin.split()[3:]))\n    \n    # Initialize variables\n    i = 0\n    j = 0\n    repost_count = 0\n    repost_sum = 0\n    max_repost_sum = 0\n    \n    # Find maximum sum of reposted pictures\n    while j < n:\n        # Calculate sum of beauty values of current segment\n        segment_sum = sum(a[i:j+1])\n        \n        # Check if current segment has at least k consecutive pictures\n        if j - i + 1 >= k:\n            # Repost at least one picture if possible\n            if repost_count < x:\n                repost_count += 1\n                repost_sum += segment_sum\n                max_repost_sum = max(max_repost_sum, repost_sum)\n            # Repost no more pictures if not possible\n            else:\n                repost_sum -= a[i]\n                repost_count -= 1\n                i += 1\n        # Move to next segment\n        else:\n            i += 1\n        \n        # Move to next picture\n        j += 1\n    \n    # Check if there is no way to repost some pictures to satisfy all conditions\n    if repost_count < x:\n        return '-1'\n    else:\n        return str(max_repost_sum)"
    },
    {
        "number": 4106,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.split())\n    a = list(map(int, stdin.readline().split()))\n    if k == 1 and n >= x:\n        return sum(a[:x])\n    if k == n and x == n:\n        return sum(a)\n    if k > n or x > n or k > x:\n        return -1\n    dp = [[0] * (n+1) for _ in range(k+1)]\n    for i in range(k+1):\n        for j in range(n-k+1):\n            dp[i][j+k] = max(dp[i-1][j+1:j+k]+[sum(a[j+1:j+k+1])])\n            for l in range(k):\n                dp[i][j+l] = max(dp[i][j+l], dp[i][j+k]-a[j+k]+a[j+l])\n    return dp[k][0] if dp[k][0] > 0 else -1\n"
    },
    {
        "number": 4106,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = list(map(int, stdin.split()))\n    a = list(map(int, stdin.readline().split()))\n\n    if x > n:\n        return '-1'\n\n    a.sort(reverse=True)\n    res = sum(a[:x])\n\n    if x >= k:\n        return str(res)\n\n    for i in range(x, n, k):\n        if a[i] < a[i-k]:\n            return '-1'\n        res += a[i]\n\n    return str(res)"
    },
    {
        "number": 4106,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    # Sort the pictures by beauty in descending order\n    a.sort(reverse=True)\n\n    # Calculate the maximum possible sum of beauty values of reposted pictures\n    max_sum = sum(a[:x])\n\n    # Check all possible combinations of k segments with at least one repost in it\n    for i in range(k, n + 1):\n        # Calculate the maximum possible sum of beauty values of reposted pictures if we repost all the pictures in the first i segments\n        max_sum_all_segments = sum(a[i - k:i])\n\n        # Check if we can repost some pictures in the remaining n - i segments to satisfy the conditions\n        if i + x - 1 >= n:\n            break\n        for j in range(i + x - 1, n):\n            max_sum_remaining = max(max_sum_all_segments, max_sum + sum(a[j - x + 1:j + 1]))\n            if max_sum_remaining!= max_sum:\n                break\n        else:\n            return max_sum_remaining\n\n    return -1"
    },
    {
        "number": 4106,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.split())\n    a = list(map(int, stdin.readline().split()))\n    if k > x:\n        return -1\n    dp = [0] * (n + 1)\n    dp[0] = 0\n    dp[1] = a[0]\n    for i in range(2, n + 1):\n        if i < k:\n            dp[i] = max(dp[i - 1], dp[i - 2] + a[i - 1])\n        else:\n            dp[i] = max(dp[i - 1], dp[i - k] + a[i - 1])\n    if dp[n] > sum(a[:x]):\n        return dp[n]\n    return -1"
    },
    {
        "number": 4106,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.split())\n    a = list(map(int, stdin.readline().split()))\n    dp = [[0] * n for _ in range(x+1)]\n    for i in range(n):\n        dp[1][i] = a[i]\n    for j in range(2, x+1):\n        for i in range(k, n):\n            dp[j][i] = max(dp[j-1][i], dp[j][i-k] + a[i])\n    if dp[x][n-1] == 0:\n        return '-1'\n    else:\n        return str(dp[x][n-1])\n\nprint(solution(\"5 2 3\\n5 1 3 10 1\")) # 18\nprint(solution(\"6 1 5\\n10 30 30 70 10 10\")) # -1\nprint(solution(\"4 3 1\\n1 100 1 1\")) # 100"
    },
    {
        "number": 4106,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.split())\n    a = list(map(int, stdin.readline().split()))\n    \n    if k > n or x > n or k <= 0 or x <= 0:\n        return '-1'\n    \n    if n == 1:\n        return str(a[0])\n    \n    dp = [[float('-inf')] * (n+1) for _ in range(n+1)]\n    \n    for i in range(n):\n        dp[i][i+1] = 0\n    \n    for l in range(2, n+1):\n        for i in range(n-l+1):\n            j = i+l\n            if k == 1:\n                dp[i][j] = max(dp[i][j-1], dp[i+1][j]) + a[j-1]\n            else:\n                dp[i][j] = max(dp[i][j-1], dp[i+1][j], max(dp[i+1][j-k+1], dp[i][j-k]) + sum(a[i+1:j-k+1]))\n            \n            if dp[i][j] > 0:\n                if k == 1:\n                    return str(dp[i][j])\n                else:\n                    return str(dp[i][j] - sum(a[i+1:j-k+1]))\n    \n    return '-1'"
    },
    {
        "number": 4107,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    s = stdin.split()[2]\n    routers = [i+1 for i, c in enumerate(s) if c == '1']\n    if len(routers) > n:\n        return \"0\"\n    connections = [0] * n\n    for i in range(n):\n        if i+1 not in routers:\n            connections[i] = i\n        else:\n            connections[i] = k * i\n    for i in routers:\n        connections[i-1] = 0\n    return str(sum(connections))"
    },
    {
        "number": 4107,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    s = stdin.split()[2]\n    routers = [i for i in range(1, n+1) if s[i-1] == '1']\n    connections = [i for i in range(1, n+1) if i not in routers]\n    \n    min_cost = 0\n    for i in routers:\n        cost = i\n        for j in connections:\n            if j <= i + k and j >= i - k:\n                cost += j\n            else:\n                cost += max(i - k, 1) + min(i + k, n)\n        min_cost += cost\n    \n    return str(min_cost)"
    },
    {
        "number": 4107,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    router_spots = list(map(int, stdin.readline().strip()))\n    dp = [0] * (n + 1)\n    dp[0] = 0\n    dp[1] = router_spots[0] if router_spots[0] else 1\n    for i in range(2, n):\n        dp[i] = dp[i - 1]\n        if router_spots[i]:\n            dp[i] += i\n        else:\n            dp[i] += dp[i - 2]\n    for i in range(n - k + 1, n + 1):\n        for j in range(max(1, i - k), min(n, i + k) + 1):\n            dp[j] = min(dp[j], dp[i] + j - i)\n    return dp[n]\n\nstdin = \"5 2\\n00100\\n\"\nprint(solution(stdin))  # Output: 3"
    },
    {
        "number": 4107,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    s = stdin.readline().strip()\n    \n    routers = [i for i in range(1, n+1) if s[i-1] == '1']\n    routers = sorted(routers)\n    \n    total_cost = 0\n    for i, r in enumerate(routers):\n        cost = i + 1\n        router_range = range(max(1, r-k), min(n, r+k)+1)\n        for j in router_range:\n            cost += j\n        total_cost += cost\n    \n    return str(total_cost)"
    },
    {
        "number": 4107,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().strip().split())\n    s = stdin.readline().strip()\n\n    routers = [i for i in range(1, n+1) if s[i-1] == '1']\n    connections = []\n    for i in range(len(routers)):\n        for j in range(max(1, routers[i]-k), min(n, routers[i]+k)+1):\n            if j not in connections:\n                connections.append(j)\n\n    return len(routers) + sum(routers) + sum(connections)"
    },
    {
        "number": 4107,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    s = stdin.split()[1]\n    routers = []\n    for i in range(n):\n        if s[i] == '1':\n            routers.append(i+1)\n    total_cost = 0\n    for i in range(n):\n        if i+1 in routers:\n            total_cost += i+1\n        else:\n            total_cost += i\n    if k == 1:\n        return str(total_cost)\n    max_range = max(routers) + k\n    min_range = min(routers) - k\n    for router in routers:\n        total_cost += max_range - router\n        total_cost += min_range - router\n    return str(total_cost)"
    },
    {
        "number": 4107,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    s = stdin.split()[2]\n    routers = [i for i, x in enumerate(s) if x == '1']\n    if len(routers) > 2 * k:\n        return \"No Solution\"\n    cost = sum(range(1, n+1))\n    for i in routers:\n        cost += i\n        start = max(1, i-k)\n        end = min(n, i+k)\n        for j in range(start, end+1):\n            cost += j\n    return cost\n\ndef"
    },
    {
        "number": 4107,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    s = stdin.split()[1]\n    routers = []\n    for i in range(n):\n        if s[i] == '1':\n            routers.append(i)\n    \n    if len(routers) == 0:\n        return str((n*(n-1))//2)\n    \n    routers.sort()\n    dp = [[0] * n for i in range(len(routers)+1)]\n    for i in range(len(routers)):\n        dp[i][routers[i]] = routers[i] + 1\n    for i in range(len(routers)):\n        for j in range(n):\n            if j < routers[i] - k:\n                dp[i+1][j] = dp[i][j]\n            elif j > routers[i] + k:\n                dp[i+1][j] = dp[i][j]\n            else:\n                dp[i+1][j] = min(dp[i][j], routers[i] + 1 + dp[i][j-routers[i]-1] + dp[i][j+routers[i]+1])\n    return str(min(dp[len(routers)][i] + i for i in range(n)))\n    \nstdin = \"5 2 00100\"\nprint(solution(stdin)) # Output: 3\n\nstdin = \"6 1 000000\"\nprint(solution(stdin)) # Output: 21\n\nstdin = \"4 1 0011\"\nprint(solution(stdin)) # Output: 4\n\nstdin = \"12 6 000010000100\"\nprint(solution(stdin)) # Output: 15"
    },
    {
        "number": 4107,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.strip().split('\\n')[1]\n    routers = [i for i in range(n) if s[i] == '1']\n    if len(routers) > k * n:\n        return 'IMPOSSIBLE'\n    routers.sort()\n    cost = sum(routers)\n    for i in range(k):\n        if i >= len(routers):\n            break\n        j = min(n - 1, routers[-1] + k - i - 1)\n        cost += j - routers[i] + 1\n    return cost"
    },
    {
        "number": 4107,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    s = stdin.split('\\n')[1]\n    routers = [i for i in range(1, n+1) if s[i-1] == '1']\n    total_cost = 0\n    for i in routers:\n        total_cost += i\n        for j in range(max(1, i-k), min(n, i+k)+1):\n            if j in routers:\n                continue\n            total_cost += j\n    return str(total_cost)\n"
    },
    {
        "number": 4108,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.strip().split()\n    n = len(s)\n    count = 0\n\n    while s!= t:\n        count += 1\n        for i in range(n):\n            if s[i]!= t[i]:\n                c1, c2 = s[i], t[i]\n                s = s.replace(c1, '').replace(c2, '')\n                s += s.count(c1) * c2 + s.count(c2) * c1\n                break\n\n    return \"Yes\" if s == t else \"No\""
    },
    {
        "number": 4108,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.strip().split()\n\n    if s == t:\n        return \"Yes\"\n\n    n = len(s)\n    for i in range(n):\n        for j in range(i+1, n):\n            if s[i]!= s[j] and s[i]!= t[i] and s[j]!= t[j]:\n                return \"No\"\n\n    return \"Yes\""
    },
    {
        "number": 4108,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # read input from stdin\n    s, t = stdin.strip().split()\n    \n    # initialize variables\n    operations = 0\n    c1, c2 = '', ''\n    \n    # perform operations on s until it becomes equal to t\n    while s!= t:\n        # check if s and t have the same length\n        if len(s)!= len(t):\n            return 'No'\n        \n        # choose two distinct lowercase English letters\n        for i in range(len(s)):\n            if s[i]!= t[i]:\n                c1, c2 = s[i], t[i]\n                break\n        \n        # replace every occurrence of c1 with c2, and every occurrence of c2 with c1\n        s = s.replace(c1, c2)\n        s = s.replace(c2, c1)\n        \n        # increment the number of operations\n        operations += 1\n        \n        # check if s and t are still equal\n        if s!= t:\n            return 'No'\n    \n    # return Yes if s and t can be made equal after performing operations\n    return 'Yes' if operations > 0 else 'No'"
    },
    {
        "number": 4108,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split('\\n')\n    if s == t:\n        return 'Yes'\n    for i in range(len(s)):\n        if s[i]!= t[i]:\n            c1, c2 = s[i], t[i]\n            break\n    else:\n        return 'No'\n    s, t = s.replace(c1, c2), t.replace(c2, c1)\n    if s == t:\n        return 'Yes'\n    for i in range(len(s)):\n        if s[i]!= t[i]:\n            return 'No'\n    return 'Yes'"
    },
    {
        "number": 4108,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    s, t = stdin.strip().split()\n    \n    # define operations\n    def replace(s: str, c1: str, c2: str) -> str:\n        return s.replace(c1, c2).replace(c2, c1)\n    \n    # perform operations\n    while s!= t:\n        if len(s)!= len(t):\n            return 'No'\n        c1, c2 = s[0], t[0]\n        if c1 == c2:\n            return 'No'\n        s = replace(s, c1, c2)\n        t = replace(t, c2, c1)\n    \n    # if operations were successful, check if s and t are equal\n    return 'Yes' if s == t else 'No'"
    },
    {
        "number": 4108,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    S = stdin.strip().split()[0]\n    T = stdin.strip().split()[1]\n\n    # check if S and T are already equal\n    if S == T:\n        return \"Yes\"\n\n    # perform operation zero or more times\n    count = 0\n    while S!= T:\n        # choose two distinct letters\n        c1, c2 = S[0], S[1]\n        # replace every occurrence of c1 with c2, and every occurrence of c2 with c1\n        S = S.replace(c1, '#').replace(c2, c1).replace('#', c2)\n        T = T.replace(c1, '#').replace(c2, c1).replace('#', c2)\n        # increment count\n        count += 1\n\n    # check if S and T are equal after performing operation\n    if S == T:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4108,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    \n    if s == t:\n        return \"Yes\"\n    \n    for i in range(len(s)):\n        for j in range(i+1, len(s)):\n            c1, c2 = s[i], s[j]\n            if s.count(c1)!= t.count(c1):\n                return \"No\"\n            s = s.replace(c1, c2).replace(c2, c1)\n    \n    return \"Yes\" if s == t else \"No\""
    },
    {
        "number": 4108,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    s = list(s)\n    t = list(t)\n    n = len(s)\n    i = 0\n    while i < n:\n        if s[i]!= t[i]:\n            if s[i] in s[i+1:] or t[i] in t[i+1:]:\n                return \"No\"\n            else:\n                s[i], s[s.index(t[i])] = s[s.index(t[i])], s[i]\n                s[i], s[t.index(s[i])] = s[t.index(s[i])], s[i]\n                t[i], t[t.index(s[i])] = t[t.index(s[i])], t[i]\n                t[i], t[s.index(t[i])] = t[s.index(t[i])], t[i]\n        i += 1\n    return \"Yes\""
    },
    {
        "number": 4108,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.strip().split('\\n')\n    if s == t:\n        return 'Yes'\n    for i in range(len(s)):\n        if s[i]!= t[i]:\n            break\n    if i == len(s) - 1:\n        return 'Yes'\n    for j in range(i + 1, len(s)):\n        if s[j]!= t[j]:\n            return 'No'\n    return 'Yes'"
    },
    {
        "number": 4108,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Read input from stdin\n    s, t = stdin.strip().split('\\n')\n\n    # Initialize variables\n    count = 0\n    i = 0\n\n    # Iterate until we reach the end of S\n    while i < len(s):\n        # Check if S[i] and T[i] are equal\n        if s[i] == t[i]:\n            i += 1\n            continue\n\n        # Check if we have already performed the operation\n        if count == 1:\n            return 'No'\n\n        # Choose two distinct lowercase English letters\n        c_1, c_2 = s[i], t[i]\n        i += 1\n\n        # Replace every occurrence of c_1 with c_2, and every occurrence of c_2 with c_1\n        count += 1\n        s = s.replace(c_1, c_2)\n        s = s.replace(c_2, c_1)\n        t = t.replace(c_1, c_2)\n        t = t.replace(c_2, c_1)\n\n    # Check if S and T are equal\n    if s == t:\n        return 'Yes'\n    else:\n        return 'No'"
    },
    {
        "number": 4109,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    c = list(map(int, stdin.split()))\n    a = []\n    for i in range(n):\n        a.append(list(map(int, stdin.split())))\n    # sort c and a by c in descending order\n    c_sorted = sorted(c, reverse=True)\n    a_sorted = []\n    for i in range(n):\n        a_sorted.append(sorted(a[i], reverse=True))\n    # initialize variables\n    x = [0] * m\n    y = 0\n    # iterate through books and algorithms\n    for i in range(n):\n        for j in range(m):\n            if a_sorted[i][j] + x[j] >= c_sorted[i]:\n                x[j] += c_sorted[i]\n                y += c_sorted[i] * a_sorted[i][j]\n            else:\n                x[j] += a_sorted[i][j]\n                y += a_sorted[i][j] * c_sorted[i]\n    # check if objective is achievable\n    for i in range(m):\n        if x[i] < c_sorted[0]:\n            return \"No\"\n    # return minimum amount of money needed to achieve objective\n    return str(y)"
    },
    {
        "number": 4109,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.readline().split())\n    books = []\n    for i in range(N):\n        book_info = stdin.readline().strip().split()\n        C = int(book_info[0])\n        A = list(map(int, book_info[1:]))\n        books.append((C, A))\n    X = int(stdin.readline())\n\n    dp = [[0] * (M+1) for _ in range(N+1)]\n    dp[0][0] = 0\n    for i in range(N):\n        for j in range(M+1):\n            dp[i+1][j] = dp[i][j]\n            if j >= books[i][1][0]:\n                dp[i+1][j] = max(dp[i+1][j], dp[i][j-books[i][1][0]] + books[i][0] * books[i][1][0])\n            for k in range(len(books[i][1])-1):\n                if j >= books[i][1][k] and j < books[i][1][k+1]:\n                    dp[i+1][j] = max(dp[i+1][j], dp[i][j-books[i][1][k]] + books[i][0] * (j-books[i][1][k]))\n    return 'Yes' if dp[N][X] >= X else 'No'"
    },
    {
        "number": 4109,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n, m = map(int, stdin.split())\n    c = list(map(int, stdin.readline().split()))\n    a = []\n    for _ in range(n):\n        a.append(list(map(int, stdin.readline().split())))\n\n    # initialize variables\n    total_cost = 0\n    levels = [0] * m\n\n    # solve problem\n    for i in range(n):\n        # calculate the cost of reading the i-th book\n        book_cost = c[i]\n        for j in range(m):\n            book_cost += a[i][j] * levels[j]\n\n        # if the book is not affordable, break out of the loop\n        if book_cost > total_cost:\n            break\n\n        # otherwise, update the total cost and increase the levels\n        total_cost = book_cost\n        for j in range(m):\n            levels[j] += a[i][j]\n\n    # output the minimum amount of money needed to achieve the objective\n    if total_cost >= 0:\n        return str(total_cost)\n    else:\n        return \"No solution\"\n"
    },
    {
        "number": 4109,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Given a list of books and their corresponding prices and the number of algorithms to learn, determine whether\n    the objective is achievable, and if it is, find the minimum amount of money needed to achieve it.\n    \"\"\"\n    # Parse input\n    books, algorithms = map(int, stdin.split())\n    prices = list(map(int, input().split()))\n    levels = [0] * algorithms\n\n    for i in range(books):\n        algorithm_levels = list(map(int, input().split()))\n        for j in range(algorithms):\n            levels[j] += algorithm_levels[j] * prices[i]\n\n    # Check if objective is achievable\n    if max(levels) < 100:\n        return \"No\"\n\n    # Find minimum amount of money needed to achieve objective\n    min_money = 1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
    },
    {
        "number": 4109,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.readline().split())\n    books = [list(map(int, stdin.readline().split())) for _ in range(N)]\n    A = [list(map(int, stdin.readline().split())) for _ in range(N)]\n    X = int(stdin.readline())\n    money = 0\n    for i in range(N):\n        for j in range(M):\n            if A[i][j] > 0:\n                money += books[i][0] * A[i][j]\n    if money >= X * M:\n        return \"Yes\\n\" + str(money)\n    else:\n        return \"No\"\n\ndef"
    },
    {
        "number": 4109,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N, M = map(int, stdin.split())\n    books = []\n    for _ in range(N):\n        book_name, book_price = stdin.split()\n        books.append((book_name, int(book_price)))\n    algorithms = []\n    for _ in range(M):\n        algorithm_name = stdin.strip()\n        algorithms.append(algorithm_name)\n    # Initialize understanding levels\n    understanding_levels = {algorithm: 0 for algorithm in algorithms}\n    # Process books\n    total_price = 0\n    for book_name, book_price in books:\n        if book_name in algorithms:\n            algorithm_index = algorithms.index(book_name)\n            understanding_levels[book_name] += books[algorithm_index][1]\n        total_price += book_price\n    # Check if objective is achievable\n    if all(level >= X for level in understanding_levels.values()):\n        return \"Yes\\n\" + str(total_price)\n    else:\n        return \"No\""
    },
    {
        "number": 4109,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N, M = map(int, stdin.readline().strip().split())\n    books = []\n    for _ in range(N):\n        book_id, book_price = map(int, stdin.readline().strip().split())\n        books.append((book_id, book_price))\n    \n    # Solve the problem\n    min_prices = [0] * M\n    for book_id, book_price in books:\n        for j in range(M):\n            min_prices[j] = max(min_prices[j], min_prices[j-book_id+1]+book_price)\n    \n    # Output the result\n    if all(price >= X for price in min_prices):\n        return 'Yes\\n' + str(max(min_prices))\n    else:\n        return 'No\\n' + str(max(min_prices))"
    },
    {
        "number": 4109,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Input parsing\n    lines = stdin.splitlines()\n    N, M = map(int, lines[0].split())\n    books = [list(map(int, line.split())) for line in lines[1:1+N]]\n    C = [book[0] for book in books]\n    A = [[book[j] for book in books] for j in range(1, M+1)]\n\n    # Dynamic programming table\n    dp = [[0] * (M+1) for _ in range(N+1)]\n\n    # Base case\n    dp[1][1] = books[0][1]\n\n    # Loop through the remaining books\n    for i in range(2, N+1):\n        for j in range(1, M+1):\n            # Initialize the minimum cost to infinity\n            min_cost = float('inf')\n\n            # Loop through all the previous algorithms to compare\n            for k in range(1, j):\n                # Calculate the cost of buying the previous algorithm\n                prev_cost = dp[i-1][k] + A[k-1][j-1]\n                # Add the cost of this book if the previous algorithm is not understood\n                if prev_cost < dp[i][j]:\n                    min_cost = min(min_cost, dp[i][j])\n                # Add the cost of this book if the previous algorithm is understood\n                else:\n                    min_cost = min(min_cost, dp[i][j] + C[i-1])\n\n            # Update the minimum cost for this book and algorithm\n            dp[i][j] = min_cost\n\n    # Check if the objective is achieved\n    if dp[N][M] >= 0:\n        return f\"Yes\\n{dp[N][M]}\"\n    else:\n        return \"No\""
    },
    {
        "number": 4109,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Parse the input\n    N, M = map(int, stdin.split())\n    C = list(map(int, stdin.readline().split()))\n    A = []\n    for _ in range(N):\n        A.append(list(map(int, stdin.readline().split())))\n\n    # Initialize the understanding levels of the algorithms\n    levels = [0] * M\n\n    # Solve the problem using dynamic programming\n    dp = [[0] * (N + 1) for _ in range(M + 1)]\n    for i in range(1, N + 1):\n        for j in range(1, M + 1):\n            if C[i - 1] > levels[j - 1]:\n                dp[j][i] = max(dp[j][i - 1], dp[j - 1][i - 1] + A[i - 1][j - 1])\n            else:\n                dp[j][i] = max(dp[j][i - 1], dp[j - 1][i - 1])\n\n    # Check if the objective is achievable\n    if dp[M][N] < 0:\n        return \"No solution\"\n    else:\n        # Find the minimum amount of money needed to achieve the objective\n        total = 0\n        for i in range(1, N + 1):\n            if dp[M][i] == dp[M][i - 1]:\n                continue\n            total += C[i - 1] - (levels[M - 1] + A[i - 1][M - 1]) * (dp[M][i] - dp[M][i - 1])\n        return str(total)\n"
    },
    {
        "number": 4109,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N, M = map(int, stdin.readline().split())\n    books = [list(map(int, stdin.readline().split())) for _ in range(N)]\n    C = [book[0] for book in books]\n    A = [[book[i] for book in books] for i in range(1, M+1)]\n    \n    # Solve\n    dp = [0] * (1000001)\n    dp[0] = 1\n    for i in range(N):\n        for j in range(M):\n            for k in range(C[i], -1, -1):\n                dp[k+C[i]] |= dp[k]\n                dp[k+C[i]+A[j][i]] |= dp[k]\n    \n    # Check if objective is achievable\n    if dp[-1] == 0:\n        return \"No solution\"\n    \n    # Find minimum amount of money needed\n    min_money = float('inf')\n    for i in range(C[-1], -1, -1):\n        if dp[i]:\n            min_money = i\n            break\n    \n    return min_money"
    },
    {
        "number": 4110,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    D, G = map(int, stdin.split())\n    p = []\n    c = []\n    for i in range(D):\n        pi, ci = map(int, stdin.readline().split())\n        p.append(pi)\n        c.append(ci)\n\n    # Calculate base score and perfect bonus\n    base_score = sum(pi for pi in p)\n    perfect_bonus = sum(ci for ci in c if ci >= 100 and ci % 100 == 0)\n\n    # Calculate minimum number of problems required\n    min_problems = 0\n    total_score = 0\n    for i in range(D):\n        if p[i] <= G - total_score - perfect_bonus:\n            min_problems += 1\n            total_score += p[i]\n            if p[i] == 100 and c[i] % 100 == 0:\n                perfect_bonus += c[i]\n        else:\n            break\n\n    return str(min_problems)\n"
    },
    {
        "number": 4110,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    D, G = map(int, lines[0].split())\n    p, c = [], []\n    for line in lines[1:]:\n        p.append(int(line.split()[0]))\n        c.append(int(line.split()[1]))\n\n    score = 0\n    for i in range(D):\n        score += p[i] * (100 * (i + 1))\n\n    perfect_bonus = sum(c)\n    for i in range(D):\n        if p[i] == 100 * (i + 1):\n            perfect_bonus += c[i]\n\n    if score >= G:\n        return \"0\"\n\n    needed_problems = (G - score) // (100 * D) + 1\n\n    for i in range(D):\n        if p[i] * needed_problems <= G - score:\n            needed_problems += 1\n\n    return str(needed_problems)"
    },
    {
        "number": 4110,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # get input\n    d, g = map(int, stdin.readline().strip().split())\n    problem_scores = [list(map(int, line.strip().split())) for line in stdin]\n    # calculate total score\n    base_score = sum([score for _, score in problem_scores])\n    perfect_bonuses = sum([c * ((i + 1) * 100) for i, (p, c) in enumerate(problem_scores) if p == 100])\n    total_score = base_score + perfect_bonuses\n    # calculate minimum number of problems\n    min_problems = total_score // g\n    # check if total score is already achievable\n    if min_problems * g >= total_score:\n        return str(min_problems)\n    # check if we can earn perfect bonus without solving any more problems\n    perfect_bonus_idx = -1\n    for i, (p, c) in enumerate(problem_scores):\n        if p == 100:\n            perfect_bonus_idx = i\n            break\n    if perfect_bonus_idx!= -1:\n        p, c = problem_scores[perfect_bonus_idx]\n        if total_score + (c * 100) <= g:\n            return str(perfect_bonus_idx + 1)\n    # solve remaining problems with scores less than 100\n    problem_scores = sorted(problem_scores, key=lambda x: x[0])\n    problems_solved = 0\n    for i, (p, c) in enumerate(problem_scores):\n        if p <= 100:\n            continue\n        min_score = i * 100\n        max_score = (i + 1) * 100\n        num_problems = min_score // p\n        total_score += num_problems * p\n        problems_solved += num_problems\n        if total_score >= g:\n            return str(problems_solved)\n    # should not reach here\n    return \"\""
    },
    {
        "number": 4110,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    D, G = map(int, lines[0].split())\n    ps = []\n    cs = []\n    for line in lines[1:]:\n        p, c = map(int, line.split())\n        ps.append(p)\n        cs.append(c)\n    dp = [float('inf')] * (G + 1)\n    dp[0] = 0\n    for i in range(1, G + 1):\n        for j in range(D):\n            if ps[j] <= i:\n                dp[i] = min(dp[i], dp[i - ps[j]] + cs[j])\n    return dp[G]"
    },
    {
        "number": 4110,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    D, G = map(int, lines[0].split())\n    p = [0] * D\n    c = [0] * D\n    for i in range(D):\n        p[i], c[i] = map(int, lines[i+1].split())\n\n    total_score = 0\n    solved_problems = 0\n    for i in range(D):\n        needed_score = (i+1) * 100\n        while solved_problems < p[i] and total_score + needed_score <= G:\n            total_score += needed_score\n            solved_problems += 1\n            needed_score *= 100\n\n    return str(solved_problems)"
    },
    {
        "number": 4110,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Reading input\n    D, G = map(int, stdin.split())\n    p = [0] * D\n    c = [0] * D\n    for i in range(D):\n        p[i], c[i] = map(int, input().split())\n    \n    # Sorting the problems in descending order\n    p_sorted = sorted(p, reverse=True)\n    \n    # Calculate the base score\n    base_score = sum([p_sorted[i] * i for i in range(D)])\n    \n    # Calculate the minimum number of problems needed to get the desired total score\n    min_problems = 0\n    for i in range(D):\n        if p_sorted[i] * (i+1) >= G:\n            min_problems = i+1\n            break\n    \n    return str(min_problems)\n\nprint(solution(\"2 700\\n3 500\\n5 800\")) # Output: 3"
    },
    {
        "number": 4110,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    D, G = map(int, stdin.strip().split())\n    p = [int(x) for x in stdin.strip().split('\\n')[1:]]\n    p_score = [100*i for i in range(1,D+1)]\n    c = [int(x) for x in stdin.strip().split('\\n')[1+D:]]\n    \n    # calculate base score\n    base_score = sum(p[:D])\n    \n    # calculate minimum number of problems\n    min_problems = D\n    for i in range(1, D+1):\n        if p[i-1] == 100*i:\n            min_problems += 1\n    \n    # calculate maximum possible score\n    max_score = base_score + D*c[0]\n    \n    # check if minimum number of problems is sufficient\n    if max_score >= G:\n        return str(min_problems)\n    \n    # binary search for minimum number of problems\n    lo, hi = min_problems, D\n    while lo < hi:\n        mid = (lo + hi + 1) // 2\n        curr_score = base_score + D*c[mid-1]\n        if curr_score >= G:\n            hi = mid - 1\n        else:\n            lo = mid\n    \n    return str(lo)"
    },
    {
        "number": 4110,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    D, G = map(int, stdin.split())\n    p = list(map(int, stdin.readline().split()))\n    c = list(map(int, stdin.readline().split()))\n    p.sort(reverse=True)\n    c.sort(reverse=True)\n    for i in range(D):\n        if p[i] <= G:\n            return p[i]\n        G -= p[i]\n    return G\n\nprint(solution(input()))"
    },
    {
        "number": 4110,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    D, G = map(int, stdin.split())\n    p = []\n    c = []\n    for i in range(D):\n        pi, ci = map(int, stdin.readline().split())\n        p.append(pi)\n        c.append(ci)\n    \n    # Compute minimum number of problems needed to achieve G or more points\n    total_points = 0\n    for i in range(D):\n        total_points += 100 * p[i]\n        if total_points + 100 * p[i] + c[i] >= G:\n            return i + 1\n    \n    # If we reach this point, all problems can be solved, so return total number of problems\n    return D"
    },
    {
        "number": 4110,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    D, G = map(int, stdin.split())\n    problems = []\n    for i in range(D):\n        p, c = map(int, stdin.readline().split())\n        problems.extend([p] * c)\n\n    problems.sort(reverse=True)\n    base_score = sum(problems)\n    perfect_bonus = sum(p // 100 * 100 for p in problems if p % 100 == 0)\n    total_score = base_score + perfect_bonus\n\n    i = 0\n    while total_score < G:\n        total_score += problems[i]\n        i += 1\n\n    return str(i)"
    },
    {
        "number": 4111,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    candies = list(map(int, stdin.readline().split()))\n    evens = [0] * n\n    odds = [0] * n\n    even_sum = odd_sum = 0\n    for i in range(n):\n        if i % 2 == 0:\n            evens[i] = candies[i]\n            even_sum += candies[i]\n        else:\n            odds[i] = candies[i]\n            odd_sum += candies[i]\n    ans = 0\n    for i in range(n):\n        if evens[i] + odds[i] == odd_sum:\n            ans += 1\n    return str(ans)\n"
    },
    {
        "number": 4111,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    dp = [[False]*n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = True\n    for i in range(n-1):\n        if a[i] < a[i+1]:\n            dp[i][i+1] = True\n    for k in range(2, n):\n        for i in range(n-k):\n            j = i+k\n            if a[i] < a[j]:\n                dp[i][j] = True\n                for l in range(i, j):\n                    dp[i][j] &= dp[i][l] & dp[l+1][j]\n    ans = 0\n    for i in range(n):\n        if dp[i][n-1]:\n            ans += 1\n    return str(ans)"
    },
    {
        "number": 4111,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    ans = 0\n    for i in range(1, n):\n        if sum(a[:i]) % 2 == sum(a[i:]) % 2:\n            ans += 1\n    return str(ans)"
    },
    {
        "number": 4111,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    candies = set()\n    for i in range(1, n):\n        if a[i] >= a[i-1]:\n            candies.add(i)\n    return len(candies)\n\nprint(solution(stdin=\"7\\n5 5 4 5 5 5 6\")) # 2\nprint(solution(stdin=\"8\\n4 8 8 7 8 4 4 5\")) # 2\nprint(solution(stdin=\"9\\n2 3 4 2 2 3 2 2 4\")) # 3"
    },
    {
        "number": 4111,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n\n    # initialize variables\n    good_candy = 0\n    total_even = 0\n    total_odd = 0\n    remaining_candies = n\n\n    # loop through all candies\n    for i in range(n):\n        # if current candy is good\n        if remaining_candies > 1:\n            # add weight to total\n            total_odd += a[i] + a[remaining_candies-1]\n            total_even += a[remaining_candies-1]\n            good_candy += 1\n            remaining_candies -= 2\n        else:\n            # add weight to total\n            total_even += a[i]\n            total_odd += a[i]\n\n    # return number of good candies\n    return good_candy"
    },
    {
        "number": 4111,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n\n    even_sum = 0\n    odd_sum = 0\n    even_days = 0\n    odd_days = 0\n\n    for i in range(n):\n        if i % 2 == 0:\n            even_sum += a[i]\n            even_days += 1\n        else:\n            odd_sum += a[i]\n            odd_days += 1\n\n    good_candy_count = 0\n    for i in range(1, n):\n        if even_sum == odd_sum:\n            good_candy_count += 1\n            even_sum -= a[i-1]\n            odd_sum -= a[i]\n            even_days -= 1\n            odd_days -= 1\n\n    return str(good_candy_count)"
    },
    {
        "number": 4111,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    good_candies = set()\n    for i in range(1, n):\n        if sum(a[:i]) % 2 == 0 and sum(a[i:]) % 2 == 0:\n            good_candies.add(i)\n    return len(good_candies)\n\nprint(solution(\"7\\n5 5 4 5 5 5 6\")) # Output: 2\nprint(solution(\"8\\n4 8 8 7 8 4 4 5\")) # Output: 2\nprint(solution(\"9\\n2 3 4 2 2 3 2 2 4\")) # Output: 3"
    },
    {
        "number": 4111,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    cnt = 0\n    for i in range(1, n):\n        rem = a[i:]\n        if sum(rem) % 2 == 0:\n            cnt += 1\n    return cnt"
    },
    {
        "number": 4111,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    ans = 0\n    for i in range(1, n):\n        if sum(a[:i+1]) % 2 == 0:\n            ans += 1\n    return str(ans)\n\n\nprint(solution(\"7\\n5 5 4 5 5 5 6\"))\nprint(solution(\"8\\n4 8 8 7 8 4 4 5\"))\nprint(solution(\"9\\n2 3 4 2 2 3 2 2 4\"))"
    },
    {
        "number": 4111,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    weights = list(map(int, stdin.split()[1:]))\n    good_candy_indices = []\n    for i in range(1, n):\n        if sum(weights[:i]) == sum(weights[i:]):\n            good_candy_indices.append(i)\n    return len(good_candy_indices)"
    },
    {
        "number": 4112,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.readline().strip().split())\n    a = list(map(int, stdin.readline().strip().split()))\n    segments = []\n    i = 0\n    while i < n:\n        j = i + 1\n        while j < n and a[j] == a[j-1]:\n            j += 1\n        segments.append((i, j))\n        i = j\n    if x > len(segments):\n        return -1\n    if k == 1:\n        return sum(a[:x])\n    reposts = [0] * n\n    dp = [0] * (1 << n)\n    dp[0] = sum(a[:x])\n    for i in range(1 << n):\n        for j in range(n):\n            if i & (1 << j):\n                continue\n            for k in range(len(segments)):\n                if j >= segments[k][0] and j < segments[k][1]:\n                    if dp[i] + a[j] > dp[i ^ (1 << j)]:\n                        dp[i ^ (1 << j)] = dp[i] + a[j]\n    return dp[-1]\n\nstdin = \"\"\"\n5 2 3\n5 1 3 10 1\n\"\"\"\n\nprint(solution(stdin)) # Output: 18\n\nstdin = \"\"\"\n6 1 5\n10 30 30 70 10 10\n\"\"\"\n\nprint(solution(stdin)) # Output: -1\n\nstdin = \"\"\"\n4 3 1\n1 100 1 1\n\"\"\"\n\nprint(solution(stdin)) # Output: 100"
    },
    {
        "number": 4112,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    n, k, x = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n\n    # check if there is at least one segment with k pictures\n    if not any(a[i:i+k] for i in range(n-k+1)):\n        return '-1'\n\n    # calculate maximum possible sum of values of reposted pictures\n    sum_a = sum(a)\n    sum_reposted = 0\n    last_reposted = 0\n    for i in range(n):\n        sum_reposted += a[i]\n        if i >= k and sum_reposted - a[last_reposted] > sum_a - sum_reposted:\n            sum_reposted -= a[last_reposted]\n            last_reposted += 1\n        if i >= k-1 and sum_reposted >= x*a[i-k+1]:\n            return sum_reposted\n\n    # no way to repost some pictures to satisfy all conditions\n    return '-1'"
    },
    {
        "number": 4112,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    dp = [[0 for _ in range(n+1)] for _ in range(k+1)]\n    for i in range(n+1):\n        dp[1][i] = a[i-1]\n    for i in range(2, k+1):\n        for j in range(k, n+1):\n            for l in range(j-i+1):\n                dp[i][j] = max(dp[i][j], dp[i-1][l] + sum(a[l:j]))\n    return str(dp[k][n]) if dp[k][n] > sum(a) - dp[k][n] else '-1'"
    },
    {
        "number": 4112,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    if k > n:\n        return \"-1\"\n\n    if n == x:\n        return str(sum(a))\n\n    if k == 1:\n        return str(max(a))\n\n    dp = [0] * n\n    dp[0] = a[0]\n    dp[1] = max(a[0], a[1])\n\n    for i in range(2, n):\n        dp[i] = max(dp[i-1], dp[i-2] + a[i])\n\n    for i in range(n):\n        if i == 0:\n            if dp[i] >= a[i]:\n                return str(dp[i])\n        elif i == 1:\n            if dp[i] >= a[i]:\n                return str(dp[i])\n        else:\n            if dp[i] >= dp[i-1] + dp[i-2] + a[i]:\n                return str(dp[i] - dp[i-1] - dp[i-2] + a[i])\n\n    return \"-1\""
    },
    {
        "number": 4112,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.split()[0:3])\n    a = list(map(int, stdin.split()[3:]))\n    if sum(a) < x:\n        return \"-1\"\n    if k == 1:\n        return str(sum(a))\n    dp = [0] * n\n    dp[0] = a[0]\n    for i in range(1, n):\n        dp[i] = max(dp[i-1], a[i])\n    ans = 0\n    for i in range(n):\n        if i >= k and dp[i-k] == 0:\n            return \"-1\"\n        ans += dp[i]\n        if ans > sum(a):\n            return \"-1\"\n    return str(ans)"
    },
    {
        "number": 4112,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    \n    # if k==x, then Vova can repost every picture\n    if k==x:\n        return sum(a)\n    \n    # if n is less than k, then there is no way to repost\n    if n<k:\n        return -1\n    \n    # sort the array of beauty values\n    a.sort()\n    \n    # Initialize the result variable to 0\n    result = 0\n    \n    # initialize variables for current index, count and sum\n    i, count, sum_ = 0, 0, 0\n    \n    # iterate through the array of beauty values\n    while i<n:\n        \n        # if the number of pictures in current segment is less than k, then\n        # move the index to next segment\n        if count<k:\n            count += 1\n            sum_ += a[i]\n            i += 1\n        \n        # if the number of pictures in current segment is equal to k, then\n        # add the sum of the segment to result, and move the index to next segment\n        else:\n            result += sum_\n            count = 1\n            sum_ = a[i]\n            i += 1\n            \n        # if the number of reposted pictures is equal to x, then return the result\n        if count==x:\n            return result\n    \n    # if the last segment has less than x pictures, then return -1\n    return -1"
    },
    {
        "number": 4112,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Parse the input\n    n, k, x = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n\n    # Sort the array in decreasing order of beauty\n    a.sort(reverse=True)\n\n    # Initialize the variables\n    i = j = sum_a = 0\n\n    # Loop until all the pictures are reposted\n    while i < n:\n        # Check if the current segment has at least k consecutive pictures\n        if i == 0 or i - j + 1 >= k:\n            # Check if Vova can repost the current picture\n            if sum_a + a[i] <= x*2:\n                # Repost the current picture\n                sum_a += a[i]\n                i += 1\n            else:\n                # Move the segment to the right\n                j = i\n        else:\n            # Move the segment to the right\n            j = i\n\n    # Check if all the pictures are reposted\n    if i == n:\n        return str(sum_a)\n    else:\n        return '-1'"
    },
    {
        "number": 4112,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    \n    a.sort(reverse=True)\n    if x > sum(a):\n        return -1\n    \n    i = 0\n    res = 0\n    while i <= n-x:\n        if i == n-x or a[i+k-1] < a[i]:\n            res += sum(a[i:i+k])\n            i += k\n        else:\n            res += a[i]\n            i += 1\n    \n    return res"
    },
    {
        "number": 4112,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.split())\n    a = list(map(int, stdin.readline().split()))\n    \n    # Check if x is greater than or equal to the number of k-length segments\n    if x < (n-k+1):\n        return -1\n    \n    # Calculate sum of beauty values of all the segments\n    segments = []\n    for i in range(n-k+1):\n        segments.append(sum(a[i:i+k]))\n    \n    # Sort the segments in decreasing order\n    segments.sort(reverse=True)\n    \n    # Check if there is any segment whose sum is greater than the sum of remaining segments\n    for i in range(x-1):\n        if segments[i] > sum(segments[i+1:]):\n            return segments[i]\n    \n    # If there is no such segment then return the maximum sum of segments\n    return segments[x-1]"
    },
    {
        "number": 4112,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.split()[0:3])\n    a = list(map(int, stdin.split()))\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = a[i]\n    for i in range(n - 2, -1, -1):\n        for j in range(i + 2, n):\n            dp[i][j] = max(a[i] + dp[i + 1][j], a[j] + dp[i][j - 1])\n    if dp[0][n - 1] < x * a[-1]:\n        return -1\n    return dp[0][n - 1]\n"
    },
    {
        "number": 4113,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n % 4 == 0 and n % 7 == 0:\n        return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4113,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    if N % 4 == 0 and N % 7 == 0:\n        return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4113,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    cakes = n // 4\n    doughnuts = n // 7\n    if cakes > 0 and doughnuts > 0 and (n - (cakes * 4) - (doughnuts * 7)) == 0:\n        return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4113,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n % 5!= 0 or n < 28:\n        return \"No\"\n    else:\n        return \"Yes\""
    },
    {
        "number": 4113,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    cakes = 0\n    doughnuts = 0\n    while True:\n        if cakes >= 2 and doughnuts >= 2:\n            return 'Yes'\n        if n <= 0:\n            return 'No'\n        if cakes >= 2:\n            doughnuts += 1\n            n -= 7\n        elif doughnuts >= 2:\n            cakes += 1\n            n -= 4\n        elif n >= 7:\n            doughnuts += 1\n            n -= 7\n        elif n >= 4:\n            cakes += 1\n            n -= 4"
    },
    {
        "number": 4113,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N = int(stdin)\n\n    # Check if we can buy cakes and doughnuts for N\n    for cakes in range(2):\n        for doughnuts in range(2):\n            total = 4*cakes + 7*doughnuts\n            if total == N:\n                return \"Yes\"\n\n    # If no way found, return \"No\"\n    return \"No\""
    },
    {
        "number": 4113,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    cakes = 0\n    doughnuts = 0\n    while N >= 4:\n        N -= 4\n        cakes += 1\n    while N >= 7:\n        N -= 7\n        doughnuts += 1\n    if cakes == 0 and doughnuts == 0:\n        return \"No\"\n    return \"Yes\""
    },
    {
        "number": 4113,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n\n    # check if we can buy 0 or 1 cake\n    if n % 4 == 0:\n        return \"Yes\"\n    if n % 7 == 0:\n        return \"Yes\"\n\n    # check if we can buy 2 or more cakes\n    for i in range(2, n+1):\n        if (n-i) % 4 == 0 and (n-i) % 7 == 0:\n            return \"Yes\"\n\n    return \"No\""
    },
    {
        "number": 4113,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    cakes = N // 4\n    doughnuts = N // 7\n    if cakes == 0 and doughnuts == 0:\n        return \"No\"\n    elif cakes == 0 or doughnuts == 0:\n        return \"Yes\"\n    else:\n        return \"Yes\" if (N % 4 == 0 and N % 7 == 0) else \"No\"\n\nprint(solution(input()))"
    },
    {
        "number": 4113,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N = int(stdin.strip())\n    \n    # Check if N is a multiple of 4 and 7\n    if N % 4 == 0 and N % 7 == 0:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4114,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    n = int(lines[0])\n    altitudes = []\n    for i in range(1, n+1):\n        x, y, h = map(int, lines[i].split())\n        altitudes.append((x, y, h))\n    \n    center_x = sum(x for x, y, h in altitudes) / n\n    center_y = sum(y for x, y, h in altitudes) / n\n    \n    height = sum(h for x, y, h in altitudes if (x-center_x)**2 + (y-center_y)**2 <= (6*h)**2)\n    \n    return f\"{int(center_x)} {int(center_y)} {int(height)}\""
    },
    {
        "number": 4114,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    altitudes = []\n    for i in range(n):\n        x, y, h = map(int, stdin.readline().strip().split())\n        altitudes.append((x, y, h))\n\n    max_altitude = max(altitudes, key=lambda x: x[2])[2]\n    center_x, center_y = [], []\n    for i in range(n):\n        x, y, h = altitudes[i]\n        altitude = max(max_altitude - abs(x - center_x) - abs(y - center_y), 0)\n        if altitude == h:\n            center_x.append(x)\n            center_y.append(y)\n    center_x, center_y = sum(center_x) / n, sum(center_y) / n\n    return f\"{center_x} {center_y} {max_altitude}\"\n"
    },
    {
        "number": 4114,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    N = int(lines[0])\n    points = []\n    for i in range(1, N+1):\n        x, y, h = map(int, lines[i].split())\n        points.append((x, y, h))\n    x_sum = 0\n    y_sum = 0\n    for x, y, h in points:\n        x_sum += x\n        y_sum += y\n    C_X = x_sum // N\n    C_Y = y_sum // N\n    H = max(sum(h for x, y, h in points) // N, 1)\n    return f\"{C_X} {C_Y} {H}\""
    },
    {
        "number": 4114,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    altitudes = []\n    for i in range(n):\n        x, y, h = map(int, stdin.readline().split())\n        altitudes.append((x, y, h))\n    \n    # Find the minimum and maximum x and y coordinates\n    min_x = min_y = float('inf')\n    max_x = max_y = float('-inf')\n    for x, y, h in altitudes:\n        if x < min_x:\n            min_x = x\n        if x > max_x:\n            max_x = x\n        if y < min_y:\n            min_y = y\n        if y > max_y:\n            max_y = y\n    \n    # Calculate the center coordinates and height\n    center_x = (min_x + max_x) // 2\n    center_y = (min_y + max_y) // 2\n    height = 0\n    for x, y, h in altitudes:\n        height = max(height, h - abs(x - center_x) - abs(y - center_y))\n    \n    return f\"{center_x} {center_y} {height}\"\n\nstdin = \"\"\"\n4\n2 3 5\n2 1 5\n1 2 5\n3 2 5\n\"\"\"\n\nprint(solution(stdin)) # Output: \"2 2 6\""
    },
    {
        "number": 4114,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    altitudes = []\n    for i in range(n):\n        x, y, h = map(int, stdin.readline().strip().split())\n        altitudes.append((x, y, h))\n    \n    # Find center coordinates\n    center_x = sum(x for x, y, h in altitudes) / n\n    center_y = sum(y for x, y, h in altitudes) / n\n    \n    # Find height\n    height = 0\n    for x, y, h in altitudes:\n        altitude = max(h - abs(x - center_x) - abs(y - center_y), 0)\n        height = max(height, altitude)\n    \n    # Print result\n    return f\"{center_x} {center_y} {height}\""
    },
    {
        "number": 4114,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    altitudes = []\n    for i in range(1, n+1):\n        x, y, h = map(int, lines[i].split())\n        altitudes.append((x, y, h))\n    max_altitude = max(altitudes, key=lambda x: x[2])[2]\n    altitudes = [(x, y, h) for x, y, h in altitudes if h == max_altitude]\n    x_coords = [x for x, y, h in altitudes]\n    y_coords = [y for x, y, h in altitudes]\n    center_x = int((max(x_coords) + min(x_coords)) / 2)\n    center_y = int((max(y_coords) + min(y_coords)) / 2)\n    height = max_altitude\n    return f\"{center_x} {center_y} {height}\"\n\ndef"
    },
    {
        "number": 4114,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    altitudes = []\n    for i in range(N):\n        x, y, h = map(int, stdin.readline().split())\n        altitudes.append((x, y, h))\n    x_sum = y_sum = 0\n    h_sum = 0\n    for x, y, h in altitudes:\n        x_sum += x\n        y_sum += y\n        h_sum += h\n    center_x = x_sum // N\n    center_y = y_sum // N\n    pyramid_height = h_sum // N\n    return f\"{center_x} {center_y} {pyramid_height}\""
    },
    {
        "number": 4114,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    N = int(stdin.readline().strip())\n    altitudes = []\n    for i in range(N):\n        x, y, h = map(int, stdin.readline().strip().split())\n        altitudes.append((x, y, h))\n    \n    # identify center coordinates and height\n    center_x, center_y = 0, 0\n    height = 0\n    for x, y, h in altitudes:\n        if h > height:\n            height = h\n        center_x += x\n        center_y += y\n    center_x //= N\n    center_y //= N\n    \n    return f\"{center_x} {center_y} {height}\""
    },
    {
        "number": 4114,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    altitudes = []\n    for i in range(1, n+1):\n        x, y, h = map(int, lines[i].split())\n        altitudes.append(h - abs(x-2) - abs(y-2))\n    cx = sum([x*altitudes[i] for i, x in enumerate(range(3, 0, -1))]) // sum(altitudes)\n    cy = sum([y*altitudes[i] for i, y in enumerate(range(1, 3))]) // sum(altitudes)\n    h = sum(altitudes)\n    return f\"{cx} {cy} {h}\"\n\nwith open('input.txt', 'r') as f:\n    input_str = f.read()\n\noutput_str = solution(input_str)\n\nwith open('output.txt', 'w') as f:\n    f.write(output_str)"
    },
    {
        "number": 4114,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    altitudes = []\n    for i in range(N):\n        x, y, h = map(int, stdin.readline().strip().split())\n        altitudes.append((x, y, h))\n    altitudes.sort(key=lambda x: x[2])  # sort by altitude\n    H = altitudes[-1][2] + 1  # maximum altitude plus one\n    x_max, y_max = altitudes[-1][:2]\n    x_min, y_min = altitudes[0][:2]\n    C_X = (x_max + x_min) // 2\n    C_Y = (y_max + y_min) // 2\n    return f\"{C_X} {C_Y} {H}\""
    },
    {
        "number": 4115,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    n = len(s)\n    hugs = 0\n    for i in range(n//2):\n        if s[i]!= s[n-i-1]:\n            hugs += 1\n    print(hugs)\n"
    },
    {
        "number": 4115,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    n = len(s)\n    if n == 0 or n == 1:\n        return \"0\"\n\n    count = 0\n    for i in range(n//2):\n        if s[i]!= s[n-i-1]:\n            count += 1\n\n    return str(count)\n\nprint(solution(input()))"
    },
    {
        "number": 4115,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    n = len(s)\n    hugs = 0\n    for i in range(n):\n        for j in range(ord('a'), ord('z')+1):\n            if s[:i] + chr(j) + s[i+1:] == s[:i] + chr(j) + s[i+1:][::-1]:\n                hugs += 1\n                break\n    return str(hugs)\n\nprint(solution(input()))"
    },
    {
        "number": 4115,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    n = len(s)\n    count = 0\n    for i in range(n):\n        for j in range(ord('a'), ord('z')+1):\n            if s[i]!= chr(j):\n                s1 = s[:i] + chr(j) + s[i+1:]\n                if s1 == s1[::-1]:\n                    count += 1\n                    break\n    print(count)"
    },
    {
        "number": 4115,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    if S == S[::-1]:\n        return \"0\"\n    count = 0\n    for i in range(len(S)):\n        for c in range(ord('a'), ord('z')+1):\n            if S[i]!= chr(c):\n                new_S = S[:i] + chr(c) + S[i+1:]\n                if new_S == new_S[::-1]:\n                    count += 1\n                    break\n    return str(count)"
    },
    {
        "number": 4115,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    n = len(S)\n    hugs = 0\n    \n    for i in range(n//2):\n        if S[i]!= S[n-i-1]:\n            hugs += 1\n    \n    if n%2 == 1:\n        hugs += 1\n    \n    return str(hugs)"
    },
    {
        "number": 4115,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # read input string\n    S = stdin.strip()\n\n    # initialize variables\n    n = len(S)\n    count = 0\n\n    # loop through all possible palindromic strings\n    for i in range(n):\n        for j in range(n):\n            if i!= j:\n                # create a palindromic string by changing one character\n                P = S[:i] + S[j] + S[i+1:j] + S[i] + S[j+1:]\n                # check if P is palindromic\n                if P == P[::-1]:\n                    count += 1\n                    break\n\n    # return the minimum number of hugs needed to make S palindromic\n    return count"
    },
    {
        "number": 4115,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Get input from stdin\n    S = stdin.strip()\n\n    # Initialize variables\n    n = len(S)\n    count = 0\n\n    # Check if string is already palindrome\n    for i in range(n//2):\n        if S[i]!= S[n-i-1]:\n            count += 1\n\n    # Return result\n    return str(count)"
    },
    {
        "number": 4115,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n\n    def is_palindrome(s: str) -> bool:\n        return s == s[::-1]\n\n    if is_palindrome(s):\n        return 0\n\n    for i in range(len(s)):\n        for c in 'abcdefghijklmnopqrstuvwxyz':\n            if s[i]!= c and is_palindrome(s[:i] + c + s[i+1:]):\n                return 1\n\n    return -1\n"
    },
    {
        "number": 4115,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    n = len(S)\n    count = 0\n    for i in range(n // 2):\n        if S[i]!= S[n - i - 1]:\n            count += 1\n    return count + 1 if n % 2 == 1 else count"
    },
    {
        "number": 4116,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    for i in range(1, 10):\n        for j in range(1, 10):\n            if i * j == n:\n                return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4116,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(1, 10):\n        if n % i == 0:\n            return \"Yes\"\n    return \"No\"\n\nprint(solution(input()))"
    },
    {
        "number": 4116,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N == 1:\n        return \"Yes\"\n    for i in range(2, int(N**0.5) + 1):\n        if N % i == 0:\n            return \"Yes\"\n    return \"No\"\n\nprint(solution(input()))"
    },
    {
        "number": 4116,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(1, 10):\n        for j in range(1, 10):\n            if i * j == n:\n                return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4116,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(1, 10):\n        for j in range(1, 10):\n            if n == i * j:\n                return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4116,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Given an integer N, determine whether N can be represented as the product of two integers between 1 and 9.\n    If it can, print Yes; if it cannot, print No.\n    \"\"\"\n    n = int(stdin)\n    for i in range(1, 10):\n        for j in range(1, 10):\n            if n == i * j:\n                return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4116,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # convert input to integer\n    N = int(stdin)\n    \n    # check if N is a product of two integers between 1 and 9 (inclusive)\n    for i in range(1, 10):\n        for j in range(1, 10):\n            if N == i*j:\n                return \"Yes\"\n                \n    # if N is not a product of two integers between 1 and 9 (inclusive), return No\n    return \"No\""
    },
    {
        "number": 4116,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(1, 10):\n        for j in range(1, 10):\n            if n == i*j:\n                return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4116,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(1, 10):\n        for j in range(1, 10):\n            if n == i * j:\n                return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4116,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(1, 10):\n        for j in range(1, 10):\n            if n == i * j:\n                return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4117,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Get input\n    N = int(stdin.readline())\n    lengths = list(map(int, stdin.readline().split()))\n    \n    # Sort lengths\n    lengths.sort()\n    \n    # Count number of ways\n    count = 0\n    for i in range(N-2):\n        # Check if all lengths are distinct\n        if lengths[i] == lengths[i+1] or lengths[i] == lengths[i+2]:\n            continue\n        # Check if all lengths are less than or equal to the sum of the other two\n        if lengths[i] + lengths[i+1] <= lengths[i+2]:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4117,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # get input\n    N = int(stdin.readline())\n    L = list(map(int, stdin.readline().split()))\n\n    # initialize variables\n    count = 0\n    L_set = set(L)\n\n    # iterate through all possible triples\n    for i in range(N-2):\n        for j in range(i+1, N-1):\n            for k in range(j+1, N):\n                # check if lengths are different and if triangle exists\n                if L[i]!= L[j]!= L[k] and L[i] + L[j] > L[k]:\n                    count += 1\n\n    return str(count)"
    },
    {
        "number": 4117,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    This function takes an input string in the format of\n    a list of integers separated by spaces, and returns\n    the number of ways to choose three of the sticks with\n    different lengths that can form a triangle.\n    \"\"\"\n    # read input\n    n = int(stdin.readline().strip())\n    lengths = list(map(int, stdin.readline().strip().split()))\n\n    # create a set of unique lengths\n    lengths_set = set(lengths)\n\n    # count the number of ways to choose three sticks\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if lengths[i]!= lengths[j] and lengths[i]!= lengths[k] and lengths[j]!= lengths[k]:\n                    count += 1\n\n    return str(count)"
    },
    {
        "number": 4117,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    n = int(stdin.readline())\n    lengths = list(map(int, stdin.readline().split()))\n\n    # count number of ways to choose three sticks\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if lengths[i]!= lengths[j] and lengths[i]!= lengths[k] and lengths[j]!= lengths[k]:\n                    count += 1\n\n    # print result\n    print(count)"
    },
    {
        "number": 4117,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N = int(stdin.readline().strip())\n    lengths = list(map(int, stdin.readline().strip().split()))\n    \n    # Sort lengths in descending order\n    lengths.sort(reverse=True)\n    \n    # Initialize variables for solution\n    count = 0\n    for i in range(N-2):\n        # If the length of the current stick is less than or equal to the sum of the previous two,\n        # we can't form a triangle with it\n        if lengths[i] <= lengths[i+1] + lengths[i+2]:\n            break\n        # Otherwise, iterate over the remaining sticks and check if we can form a triangle with them\n        for j in range(i+1, N-1):\n            # If the length of the current stick is less than or equal to the sum of the previous two,\n            # we can't form a triangle with it\n            if lengths[j] <= lengths[j+1] + lengths[i]:\n                break\n            # Otherwise, iterate over the remaining sticks and check if we can form a triangle with them\n            for k in range(j+1, N):\n                # If the length of the current stick is less than or equal to the sum of the previous two,\n                # we can't form a triangle with it\n                if lengths[k] <= lengths[k-1] + lengths[j]:\n                    break\n                # Otherwise, we can form a triangle with these three sticks\n                count += 1\n                \n    return str(count)"
    },
    {
        "number": 4117,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    lengths = list(map(int, stdin.readline().strip().split()))\n    sticks = sorted(set(lengths))\n    ans = 0\n    for i in range(len(sticks)-2):\n        for j in range(i+1, len(sticks)-1):\n            for k in range(j+1, len(sticks)):\n                if sticks[i]!= sticks[j]!= sticks[k]:\n                    ans += 1\n    return str(ans)"
    },
    {
        "number": 4117,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    lengths = list(map(int, stdin.readline().split()))\n    lengths.sort()\n    count = 0\n    \n    for i in range(n-2):\n        j = i+1\n        k = n-1\n        while j < k:\n            if lengths[i] + lengths[j] > lengths[k]:\n                count += k - j\n                k -= 1\n            else:\n                j += 1\n                \n    return count\n\nprint(solution(stdin))"
    },
    {
        "number": 4117,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    lengths = list(map(int, stdin.readline().strip().split()))\n\n    # Sort the lengths in ascending order\n    lengths.sort()\n\n    # Initialize a counter for the number of triangles\n    count = 0\n\n    # Iterate over all possible triples of lengths\n    for i in range(n - 2):\n        j = i + 1\n        k = n - 1\n        while j < k:\n            # If the lengths are different, increment the counter\n            if lengths[i]!= lengths[j] and lengths[j]!= lengths[k] and lengths[i]!= lengths[k]:\n                count += 1\n            j += 1\n            k -= 1\n\n    # Return the counter for the number of triangles\n    return str(count)"
    },
    {
        "number": 4117,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N = int(stdin.readline())\n    lengths = list(map(int, stdin.readline().split()))\n    lengths.sort()\n\n    # Initialize variables\n    count = 0\n    i = 0\n    j = 2\n    k = N - 1\n\n    # Loop through all possible triples\n    while i < j < k:\n        if lengths[i] + lengths[j] > lengths[k]:\n            # k is too small, decrement it\n            k -= 1\n        elif lengths[i] + lengths[j] < lengths[k]:\n            # k is too big, increment i and j\n            i += 1\n            j -= 1\n        else:\n            # We have found a valid triple\n            count += 1\n            i += 1\n            j -= 1\n\n    # Print result\n    return str(count)\n"
    },
    {
        "number": 4117,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    lengths = [int(l) for l in stdin.readline().strip().split()]\n\n    # count the number of triangles formed using each stick\n    triangle_count = [0] * N\n    for i in range(N):\n        for j in range(i+2, N):\n            triangle_count[i] += triangle_count[j-1] + 1\n\n    # count the number of ways to choose three different sticks\n    ways = 0\n    for i in range(N-2):\n        for j in range(i+1, N-1):\n            for k in range(j+1, N):\n                if lengths[i]!= lengths[j] and lengths[i]!= lengths[k] and lengths[j]!= lengths[k]:\n                    ways += triangle_count[i] * triangle_count[j-i-1] * triangle_count[k-j-1]\n\n    return str(ways)"
    },
    {
        "number": 4118,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A < 1 or A > 9 or B < 1 or B > 9:\n        return \"-1\"\n    else:\n        return str(A * B)"
    },
    {
        "number": 4118,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B = list(map(int, stdin.strip().split()))\n    if A > 9 or B > 9:\n        return \"-1\"\n    else:\n        return str(A*B)"
    },
    {
        "number": 4118,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A < 1 or A > 9 or B < 1 or B > 9:\n        return '-1'\n    return str(A * B)"
    },
    {
        "number": 4118,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A <= 0 or B <= 0 or A > 20 or B > 20:\n        return -1\n    result = A * B\n    return str(result)\n"
    },
    {
        "number": 4118,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.strip().split())\n    if A > 9 or B > 9 or A < 1 or B < 1:\n        return '-1'\n    return str(A*B)\n\nprint(solution(input()))"
    },
    {
        "number": 4118,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A < 1 or A > 9 or B < 1 or B > 9:\n        return -1\n    return A * B"
    },
    {
        "number": 4118,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.strip().split())\n    if a > 20 or b > 20:\n        return \"-1\"\n    return str(a * b)"
    },
    {
        "number": 4118,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A < 1 or A > 9 or B < 1 or B > 9:\n        return -1\n    return A * B"
    },
    {
        "number": 4118,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Reading input\n    a, b = map(int, stdin.split())\n\n    # Checking if multiplication is possible\n    if a < 1 or a > 9 or b < 1 or b > 9:\n        return \"-1\"\n\n    # Calculating multiplication\n    result = a * b\n\n    # Returning result\n    return str(result)\n"
    },
    {
        "number": 4118,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a < 1 or a > 20 or b < 1 or b > 20:\n        return -1\n    return a * b"
    },
    {
        "number": 4119,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    X = list(map(int, stdin.split()))\n    X.sort()\n    moves = 0\n    visited = set()\n\n    for i in X:\n        if i in visited:\n            continue\n        visited.add(i)\n        j = i + 1\n        while j <= M:\n            if j in visited:\n                break\n            visited.add(j)\n            j += 1\n        moves += 1\n        j = i - 1\n        while j >= 1:\n            if j in visited:\n                break\n            visited.add(j)\n            j -= 1\n        moves += 1\n\n    return str(moves)"
    },
    {
        "number": 4119,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # get input\n    lines = stdin.split('\\n')\n    N, M = map(int, lines[0].split())\n    X = list(map(int, lines[1].split()))\n    \n    # sort X to make it easier to check for duplicates\n    X.sort()\n    \n    # initialize visited set and move count\n    visited = set(X)\n    count = 0\n    \n    # loop through X and repeat move until all M coordinates are visited\n    while len(visited) < M:\n        # get the minimum value in X not in visited\n        x = X[0]\n        for i in X:\n            if i not in visited:\n                x = i\n                break\n        \n        # move piece at x to x+1 or x-1\n        if x+1 in visited:\n            visited.add(x+1)\n        elif x-1 in visited:\n            visited.add(x-1)\n        else:\n            # this should never happen\n            return \"Invalid Input\"\n        \n        # increment move count\n        count += 1\n    \n    # return move count\n    return str(count)"
    },
    {
        "number": 4119,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Find the minimum number of moves required to achieve the objective.\n\n    Args:\n        stdin (str): input string containing N, M and X_1, X_2,..., X_M\n\n    Returns:\n        str: minimum number of moves required to achieve the objective\n    \"\"\"\n    # read input\n    N, M = map(int, stdin.readline().split())\n    X = list(map(int, stdin.readline().split()))\n\n    # sort X in ascending order\n    X.sort()\n\n    # count the number of moves required\n    moves = 0\n    for i in range(M):\n        # find the index of X[i] in the sorted list of X\n        index = X.index(X[i])\n\n        # check if there are any pieces to the left of X[i] that are not already visited\n        if index > 0 and X[index-1] > X[i]:\n            # move the piece to the left\n            moves += abs(X[index-1] - X[i])\n            X[index-1] = X[i]\n            X[i] = X[index]\n            index -= 1\n\n        # check if there are any pieces to the right of X[i] that are not already visited\n        if index < N-1 and X[index+1] > X[i]:\n            # move the piece to the right\n            moves += abs(X[index+1] - X[i])\n            X[index+1] = X[i]\n            X[i] = X[index]\n            index += 1\n\n    return str(moves)\n"
    },
    {
        "number": 4119,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    pieces = list(map(int, stdin.readline().split()))\n    visited = set()\n    for i in range(n):\n        visited.add(pieces[i])\n    moves = 0\n    for i in range(n, m):\n        if i not in visited:\n            best = float('inf')\n            for j in range(n):\n                if abs(i-pieces[j]) < best:\n                    best = abs(i-pieces[j])\n                    piece = j\n            if i-pieces[piece] > 0:\n                piece_moves = i-pieces[piece] - 1\n            else:\n                piece_moves = i-pieces[piece] + 1\n            moves += piece_moves\n            pieces[piece] = i\n            visited.add(i)\n    return str(moves)"
    },
    {
        "number": 4119,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N, M = map(int, stdin.readline().split())\n    X = list(map(int, stdin.readline().split()))\n\n    # Sort X in ascending order\n    X.sort()\n\n    # Initialize variables\n    moves = 0\n    i = 1  # Starting index\n\n    # Loop through all coordinates\n    while i < M:\n        # Find the index of the smallest element greater than X[i]\n        j = bisect_left(X, X[i] + 1)\n\n        # If there is no such element, it means all pieces are at their maximal coordinates\n        if j == N:\n            break\n\n        # Move the piece at X[i] to X[j]\n        X[i], X[j] = X[j], X[i]\n        moves += 1\n\n        # Move to the next index\n        i += 1\n\n    # Return the number of moves required\n    return str(moves)\n\n\ndef"
    },
    {
        "number": 4119,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N, M = list(map(int, stdin.readline().split()))\n    X = list(map(int, stdin.readline().split()))\n\n    # Initialize variables\n    visited = set()\n    for x in X:\n        visited.add(x)\n    moves = 0\n\n    # Loop through all M coordinates\n    for m in range(M):\n        # Loop through all N pieces\n        for n in range(N):\n            x = X[n]\n            if x + 1 not in visited:\n                X[n] = x + 1\n                visited.add(x + 1)\n                moves += 1\n                break\n            elif x - 1 not in visited:\n                X[n] = x - 1\n                visited.add(x - 1)\n                moves += 1\n                break\n\n    # Output result\n    return str(moves)"
    },
    {
        "number": 4119,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    N, M = map(int, lines[0].split())\n    X = list(map(int, lines[1].split()))\n    X.sort()\n    \n    # set of visited coordinates\n    visited = set()\n    \n    # add the initial coordinates to visited\n    visited.update(X)\n    \n    # initialize the moves counter\n    moves = 0\n    \n    # iterate over the remaining coordinates to visit\n    for i in range(M):\n        # find the unvisited piece that can move to the next coordinate\n        for x in X:\n            if x+1 not in visited and x+1 not in X:\n                # move the piece to the next coordinate\n                visited.add(x+1)\n                X.append(x+1)\n                X.sort()\n                moves += 1\n                break\n            elif x-1 not in visited and x-1 not in X:\n                # move the piece to the next coordinate\n                visited.add(x-1)\n                X.append(x-1)\n                X.sort()\n                moves += 1\n                break\n    \n    return str(moves)"
    },
    {
        "number": 4119,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Get input from stdin\n    N, M = map(int, stdin.split()[0:2])\n    X = list(map(int, stdin.split()[2:]))\n    \n    # Initialize variables\n    visited = set(X)\n    moves = 0\n    \n    # Loop through each piece and move it to the next integer\n    for piece in X:\n        next_coord = piece\n        while True:\n            next_coord += 1\n            if next_coord in visited:\n                break\n            visited.add(next_coord)\n        moves += 1\n    \n    # Return the number of moves required\n    return str(moves)"
    },
    {
        "number": 4119,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N, M = map(int, stdin.split()[0:2])\n    X = list(map(int, stdin.split()[2:]))\n\n    # Initialize variables\n    moves = 0\n    visited = set(X)\n    pieces = [i for i in range(N)]\n\n    # Sort pieces based on their coordinates\n    pieces.sort(key=lambda x: X[x])\n\n    # Move pieces until all M coordinates are visited\n    while visited!= set(range(M+1)):\n        # Move the current piece\n        piece = pieces[0]\n        if X[piece] + 1 in visited:\n            X[piece] += 1\n        else:\n            X[piece] -= 1\n        moves += 1\n\n        # Remove visited pieces\n        pieces = [p for p in pieces if X[p]!= M]\n\n        # Add new visited piece\n        visited.add(X[piece])\n\n    return str(moves)"
    },
    {
        "number": 4119,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # read input from stdin\n    N, M = map(int, stdin.readline().strip().split())\n    X = list(map(int, stdin.readline().strip().split()))\n\n    # sort X in ascending order\n    X.sort()\n\n    # initialize moves counter\n    moves = 0\n\n    # set visited coordinates to False\n    visited = [False] * (max(X) + 1)\n\n    # loop through all coordinates\n    for i in range(M):\n        # find the minimum distance between X[i] and all unvisited coordinates\n        distance = float('inf')\n        for j in range(X[i] + 1, max(X) + 1):\n            if not visited[j]:\n                distance = min(distance, abs(j - X[i]))\n\n        # if distance is still infinity, then no valid move can be made\n        if distance == float('inf'):\n            return \"Impossible\"\n\n        # mark the visited coordinate as True\n        visited[X[i] + distance] = True\n\n        # increment moves counter\n        moves += distance\n\n    return str(moves)"
    },
    {
        "number": 4120,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    adj = [[] for _ in range(n+1)]\n    for _ in range(m):\n        a, b = map(int, stdin.split())\n        adj[a].append(b)\n        adj[b].append(a)\n\n    def dfs(start, visited, option, roads, ans):\n        if len(roads) == n-1:\n            ans.append(option)\n            return\n        for i in range(start, n+1):\n            if i in visited:\n                continue\n            if len(roads) == 0 and i == 1:\n                visited.add(i)\n                dfs(i, visited, option, roads, ans)\n                visited.remove(i)\n                continue\n            visited.add(i)\n            for j in adj[i]:\n                if j in roads:\n                    visited.remove(i)\n                    continue\n                roads.add(j)\n                option += '1'\n                dfs(i, visited, option, roads, ans)\n                roads.remove(j)\n                option = option[:-1]\n                visited.remove(i)\n                break\n\n    ans = []\n    for i in range(1, n+1):\n        if len(adj[i]) == 1:\n            continue\n        roads = set([i, adj[i][0]])\n        option = '1'*(m-1)\n        visited = set()\n        visited.add(i)\n        dfs(i, visited, option, roads, ans)\n    if len(ans) < k:\n        ans = ['1'*(m-1) for _ in range(k)]\n    return str(len(ans)) + '\\n' + '\\n'.join(ans)"
    },
    {
        "number": 4120,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.readline().strip().split())\n    edges = [tuple(map(int, stdin.readline().strip().split())) for _ in range(m)]\n    graph = [[] for _ in range(n+1)]\n    for a, b in edges:\n        graph[a].append(b)\n        graph[b].append(a)\n    from collections import defaultdict\n    dist = defaultdict(lambda: float('inf'))\n    dist[1] = 0\n    visited = [False] * (n+1)\n    def bfs():\n        q = [1]\n        while q:\n            node = q.pop(0)\n            if visited[node]:\n                continue\n            visited[node] = True\n            for nei in graph[node]:\n                if dist[node] + 1 < dist[nei]:\n                    dist[nei] = dist[node] + 1\n                    q.append(nei)\n    for i in range(1, n+1):\n        bfs()\n    def dfs(node, path, res):\n        if len(res) == n-1:\n            res.append(0)\n            res = ''.join(map(str, res))\n            res = int(res, 2)\n            if res not in ans:\n                ans.add(res)\n                ans_list.append(res)\n            return\n        for nei in graph[node]:\n            if nei in path:\n                continue\n            path.append(nei)\n            dfs(nei, path, res)\n            path.pop()\n    ans = set()\n    ans_list = []\n    for i in range(2**m):\n        res = [0] * m\n        j = 0\n        for mask in range(1, 2**m):\n            if (i & mask) == mask:\n                a, b = edges[j]\n                res[j] = 1\n            j += 1\n        if sum(res) == n-1:\n            dfs(1, [1], res)\n    return str(len(ans_list)) + '\\n' + '\\n'.join(map(str, ans_list))\n\nprint(solution(stdin))"
    },
    {
        "number": 4120,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    roads = [tuple(map(int, line.split())) for line in stdin.split('\\n')[1:-1]]\n    cities = set([i for i in range(1, n+1)])\n    options = []\n    for _ in range(k):\n        chosen_roads = set()\n        while len(chosen_roads) < m-n+1:\n            a, b = choice(list(cities)), choice(list(cities - chosen_roads - {a}))\n            if (a, b) in roads:\n                chosen_roads.add((a, b))\n                chosen_roads.add((b, a))\n        if is_valid_option(chosen_roads, n):\n            options.append(chosen_roads)\n    if not options:\n        options = [set(i) for i in itertools.combinations(range(1, n), m-n+1)]\n    print(len(options))\n    for option in options:\n        print(''.join(['1' if (i, j) in option or (j, i) in option else '0' for i in range(1, n) for j in range(i+1, n+1)]))\n\ndef"
    },
    {
        "number": 4120,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    graph = [[] for _ in range(n + 1)]\n    for i in range(m):\n        a, b = map(int, stdin.split())\n        graph[a].append(b)\n        graph[b].append(a)\n    ans = []\n    used = [0] * (n + 1)\n    def dfs(node, visited, cost, path):\n        if len(visited) == n-1:\n            ans.append(path)\n            return\n        for child in graph[node]:\n            if child not in visited and not used[child]:\n                used[child] = 1\n                dfs(child, visited + [child], cost + 1, path + '1')\n                used[child] = 0\n    for i in range(1, n+1):\n        if not used[i]:\n            used[i] = 1\n            dfs(i, [i], 1, '1')\n            used[i] = 0\n    ans = set(ans)\n    for i in range(k):\n        option = ''.join(random.choice(['0', '1']) for j in range(m))\n        if option not in ans:\n            ans.add(option)\n    return str(len(ans)) + '\\n' + '\\n'.join(ans)"
    },
    {
        "number": 4120,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    roads = []\n    for i in range(m):\n        a, b = map(int, stdin.split())\n        roads.append((a-1, b-1))\n    import itertools\n    import random\n    def valid_roads(roads):\n        used = [False]*n\n        for i in range(n):\n            used[i] = True\n            for j in range(m):\n                if roads[j][0] == i or roads[j][1] == i:\n                    used[roads[j][0]] = True\n                    used[roads[j][1]] = True\n            if not all(used):\n                return False\n            used = [False]*n\n        return True\n    def generate_roads(roads, k, used, options):\n        if k == 0:\n            options.append(roads)\n            return\n        for i in range(m):\n            if used[i]:\n                continue\n            used[i] = True\n            generate_roads(roads[:]+[(i, 1)], k-1, used, options)\n            used[i] = False\n    options = []\n    generate_roads([], k, [False]*m, options)\n    valid_options = []\n    for option in options:\n        if valid_roads(option):\n            valid_options.append(option)\n    if len(valid_options) == 0:\n        print(0)\n        return\n    print(len(valid_options))\n    for option in valid_options:\n        output = \"\"\n        for i in range(m):\n            if i in option:\n                output += \"1\"\n            else:\n                output += \"0\"\n        print(output)\n    return"
    },
    {
        "number": 4120,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Given a set of roads, output the options for choosing $k$ roads for repair.\n    :param stdin: A string containing the input data.\n    :return: A string containing the output data.\n    \"\"\"\n    n, m, k = map(int, stdin.split())\n    roads = [list(map(int, line.split())) for line in stdin.split('\\n')[1:]]\n\n    # Calculate the distance between city 1 and each other city\n    distances = [0] * (n + 1)\n    for i in range(1, n + 1):\n        distances[i] = sum(road[0] == i or road[1] == i for road in roads)\n\n    def is_valid(roads):\n        \"\"\"\n        Check if a set of roads is valid for the given set of distances.\n        :param roads: A set of roads to check.\n        :return: True if the set of roads is valid, False otherwise.\n        \"\"\"\n        # Check if the set of roads is valid for the given set of distances\n        for i in range(1, n + 1):\n            if sum(road[0] == i or road[1] == i for road in roads)!= distances[i]:\n                return False\n        return True\n\n    # Find all valid sets of k roads\n    valid_roads = []\n    for i in range(1 << m):\n        # Convert the binary representation of i to a set of roads\n        cur_roads = [roads[j] for j in range(m) if (i >> j) & 1]\n        if len(cur_roads) == k and is_valid(cur_roads):\n            valid_roads.append(cur_roads)\n\n    # Output the valid sets of k roads\n    if not valid_roads:\n        return \"No valid options found.\"\n    elif len(valid_roads) == 1:\n        return str(valid_roads[0]).replace(\" \", \"\")\n    else:\n        return \"\\n\".join(str(roads).replace(\" \", \"\") for roads in valid_roads)"
    },
    {
        "number": 4120,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4120,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    edges = [list(map(int, stdin.split())) for _ in range(m)]\n    \n    def dfs(u, vis, edges):\n        vis[u] = True\n        for v, w in edges[u]:\n            if not vis[v]:\n                dfs(v, vis, edges)\n    \n    def valid(edges, vis, edges_chosen):\n        vis = [False] * n\n        dfs(1, vis, edges)\n        for u, v in edges_chosen:\n            if not vis[u] or not vis[v]:\n                return False\n        return True\n    \n    def choice(edges, edges_chosen, k, t):\n        if k == 0:\n            if valid(edges, vis, edges_chosen):\n                t[0] += 1\n                print(\"\".join(map(str, [1 if (u, v) in edges_chosen else 0 for u, v in edges_chosen])))\n        else:\n            for i, (u, v) in enumerate(edges):\n                if (u, v) not in edges_chosen:\n                    edges_chosen.append((u, v))\n                    choice(edges, edges_chosen, k-1, t)\n                    edges_chosen.pop()\n    \n    vis = [False] * n\n    edges_chosen = []\n    t = [0]\n    choice(edges, edges_chosen, k, t)\n    return t[0]"
    },
    {
        "number": 4120,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    roads = set()\n    for i in range(m):\n        a, b = map(int, stdin.split())\n        roads.add((a, b))\n        roads.add((b, a))\n\n    count = 0\n    for r in range(2**m):\n        bit_set = bin(r)[2:].zfill(m)\n        visited = set()\n        current_city = 1\n        distance = 0\n        for i in range(m):\n            if bit_set[i] == '1' and (current_city, i+1) in roads:\n                visited.add(current_city)\n                current_city = i+1\n                distance += 1\n                if current_city == n:\n                    break\n        if current_city == n:\n            if distance == n-1:\n                count += 1\n                if count == k:\n                    return bit_set\n        if len(visited) == n-1:\n            continue\n        for i in range(1, n+1):\n            if i in visited:\n                continue\n            if (current_city, i) in roads:\n                visited.add(i)\n                current_city = i\n                distance += 1\n                if current_city == n:\n                    break\n        if current_city == n:\n            if distance == n-1:\n                count += 1\n                if count == k:\n                    return bit_set\n    return str(count)"
    },
    {
        "number": 4120,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    roads = [tuple(map(int, line.split())) for line in stdin.split(\"\\n\")[1:]]\n    roads = set(roads)\n    valid_options = []\n    for option in itertools.combinations(range(1, n), n-1):\n        option_roads = [road for road in roads if road[0] in option or road[1] in option]\n        if len(option_roads) == n-1:\n            valid_options.append(option_roads)\n    t = min(k, len(valid_options))\n    if t == 0:\n        return \"There are no valid options.\"\n    output = []\n    for i in range(t):\n        option = [road in valid_options[i] for road in roads]\n        output.append(\"\".join(map(str, option)))\n    return str(t) + \"\\n\" + \"\\n\".join(output)"
    },
    {
        "number": 4121,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    heights = list(map(int, stdin.split('\\n')[1].split()))\n    if n == 1:\n        if heights[0] % 2 == 0:\n            return \"YES\"\n        else:\n            return \"NO\"\n    i = 1\n    while i < n:\n        if heights[i]!= heights[i-1]:\n            break\n        i += 1\n    if i == n:\n        return \"YES\"\n    if i == 1 and heights[0] % 2 == 0:\n        return \"YES\"\n    if i == 1 and heights[0] % 2 == 1:\n        return \"NO\"\n    i += 1\n    while i < n:\n        if heights[i] == heights[i-1]:\n            return \"NO\"\n        if heights[i] % 2 == 1:\n            return \"NO\"\n        i += 1\n    return \"YES\"\n\nprint(solution(\"5\\n2 1 1 2 5\")) # YES\nprint(solution(\"3\\n4 5 3\")) # YES\nprint(solution(\"2\\n10 10\")) # YES\nprint(solution(\"3\\n1 2 3\")) # NO"
    },
    {
        "number": 4121,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    h = max(a)\n    if h % 2!= 0:\n        return \"NO\"\n    for i in range(1, n):\n        if a[i]!= a[i-1]:\n            return \"NO\"\n    return \"YES\""
    },
    {
        "number": 4121,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    if n == 1 and a[0]!= 1:\n        return \"NO\"\n    if n == 1 and a[0] == 1:\n        return \"YES\"\n    if n == 2 and a[0] == a[1]:\n        return \"YES\"\n    if n == 2 and a[0]!= a[1]:\n        return \"NO\"\n    if n > 2:\n        for i in range(2, n):\n            if a[i-2]!= a[i-1] and a[i-1]!= a[i] and a[i]!= a[i-2]:\n                return \"NO\"\n        return \"YES\""
    },
    {
        "number": 4121,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    if all(x == a[0] for x in a):\n        return \"YES\"\n    if all(x == a[-1] for x in a):\n        return \"YES\"\n    if a[0] > a[1]:\n        return \"NO\"\n    if a[-2] > a[-1]:\n        return \"NO\"\n    if all(a[i] >= a[i+1] for i in range(n-1)):\n        return \"YES\"\n    if all(a[i] >= a[i+1] for i in range(n-2)):\n        return \"YES\"\n    if all(a[i] >= a[i+2] for i in range(n-2)):\n        return \"YES\"\n    return \"NO\""
    },
    {
        "number": 4121,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    if n == 1 and a[0] % 2!= 0:\n        return \"NO\"\n    if n == 1 and a[0] % 2 == 0:\n        return \"YES\"\n    if n == 2 and a[0] == a[1]:\n        return \"NO\"\n    if n == 2 and a[0]!= a[1]:\n        return \"YES\"\n    if n > 2 and a[0] == a[1] and a[1] == a[2]:\n        return \"NO\"\n    if n > 2 and a[0]!= a[1] and a[1]!= a[2]:\n        return \"YES\"\n    for i in range(2, n):\n        if a[i] < a[i-1] or a[i] < a[i-2]:\n            return \"NO\"\n    return \"YES\""
    },
    {
        "number": 4121,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    i = 0\n    while i < n-1:\n        if a[i] == a[i+1]:\n            if i == 0 or a[i]!= a[i-1]:\n                a[i] += 1\n                a[i+1] += 1\n                i += 2\n            else:\n                a[i+1] += 1\n                i += 1\n        else:\n            i += 1\n    if all(x == a[0] for x in a):\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 4121,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    if all(a[0] == i for i in a):\n        return \"YES\"\n\n    if all(a[-1] == i for i in a):\n        return \"YES\"\n\n    for i in range(1, n):\n        if a[i] == a[i-1]:\n            return \"YES\"\n\n    return \"NO\""
    },
    {
        "number": 4121,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n\n    if len(set(a)) < 2:\n        return \"NO\"\n\n    if max(a) - min(a) >= 2:\n        return \"YES\"\n\n    for i in range(1, n):\n        if a[i] == a[i-1]:\n            return \"YES\"\n\n    return \"NO\""
    },
    {
        "number": 4121,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.strip().split())\n    if any(height % 2 == 1 for height in a):\n        return \"NO\"\n    a.sort()\n    if a[-1] > a[0] + 1:\n        return \"NO\"\n    for i in range(1, n):\n        if a[i] - a[i-1] > 1:\n            return \"NO\"\n    return \"YES\""
    },
    {
        "number": 4121,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.strip().split())\n    if all(a[i] == a[0] for i in range(1, n)):\n        return \"YES\"\n    for i in range(1, n):\n        if a[i] == a[i-1]:\n            return \"YES\"\n    return \"NO\""
    },
    {
        "number": 4122,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    H, n = map(int, stdin.split())\n    d = list(map(int, stdin.split()))\n    \n    # Determine the number of rounds needed to kill the monster\n    rounds = 1\n    hp = H + sum(d)\n    while hp > 0:\n        rounds += 1\n        hp += sum(d)\n    if rounds * n > 10**12:\n        return -1\n    \n    # Determine the first minute after which the monster is dead\n    for k in range(1, rounds*n+1):\n        hp = H\n        for i in range(n):\n            if k % (n+1) == i+1:\n                hp += d[i]\n            else:\n                hp -= d[i]\n        if hp <= 0:\n            return k\n    \n    # The monster doesn't die, the battle continues infinitely\n    return -1"
    },
    {
        "number": 4122,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    H, n = map(int, stdin.split())\n    d = list(map(int, stdin.split()))\n\n    hp = H\n    for i in range(n):\n        hp += d[i]\n        if hp <= 0:\n            return str(i + 1)\n\n    return \"-1\""
    },
    {
        "number": 4122,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    H, n = map(int, stdin.strip().split())\n    d = list(map(int, stdin.strip().split()))\n    \n    t = 0\n    hp = H\n    for i in range(n):\n        hp += d[i]\n        if hp <= 0:\n            return str(t+1)\n        t += 1\n    \n    return \"-1\" if t == 0 else str(t)"
    },
    {
        "number": 4122,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    H, n = map(int, lines[0].split())\n    d = list(map(int, lines[1].split()))\n\n    hp = H\n    for i in range(1, n+1):\n        hp += d[i-1]\n        if hp <= 0:\n            return str(i)\n    return \"-1\""
    },
    {
        "number": 4122,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    H, n = map(int, stdin.split()[0:2])\n    d = list(map(int, stdin.split()[2:]))\n    \n    hp = H\n    i = 0\n    \n    while True:\n        if hp <= 0:\n            return str(i+1)\n        if i >= n:\n            return '-1'\n        hp += d[i]\n        i += 1"
    },
    {
        "number": 4122,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    H, n = map(int, stdin.strip().split())\n    d = list(map(int, stdin.strip().split()))\n\n    # initial hp\n    h = H\n\n    # start round\n    for i in range(n):\n        # apply damage\n        h += d[i]\n\n        # check if monster dies\n        if h <= 0:\n            # if monster is already dead, it will last infinitely\n            if i == 0:\n                return \"-1\"\n            else:\n                return str(i+1)\n\n    # the superhero can't kill the monster and the battle will last infinitely\n    return \"-1\""
    },
    {
        "number": 4122,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    H, n = map(int, stdin.split())\n    d = list(map(int, stdin.split()))\n    h = H\n    k = 0\n    for i in range(n):\n        h += d[i]\n        if h <= 0:\n            k = i+1\n            break\n    if k == 0:\n        k = -1\n    return str(k)\n\ndef"
    },
    {
        "number": 4122,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    H, n = map(int, stdin.splitlines()[0].split())\n    d = list(map(int, stdin.splitlines()[1].split()))\n\n    h = H\n    for i in range(n):\n        h += d[i]\n        if h <= 0:\n            return i + 1\n    return -1"
    },
    {
        "number": 4122,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    H, n = map(int, stdin.split())\n    d = list(map(int, stdin.readline().split()))\n    m = sum(d)\n    if m <= 0:\n        return -1\n    k = 1\n    hp = H + d[0]\n    for i in range(1, n):\n        hp += d[i]\n        if hp <= 0:\n            return i + 1\n        k += 1\n    return -1\n\nprint(solution(\"1000 6\\n-100 -200 -300 125 77 -4\"))  # Output: 9\nprint(solution(\"1000000000000 5\\n-1 0 0 0 0\"))  # Output: 4999999999996\nprint(solution(\"10 4\\n-3 -6 5 4\"))  # Output: -1"
    },
    {
        "number": 4122,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    H, n = map(int, stdin.split()[0:2])\n    d = list(map(int, stdin.split()[2:]))\n    monster_hp = H\n    for i in range(n):\n        monster_hp += d[i]\n        if monster_hp <= 0:\n            return str(i+1)\n    return '-1'"
    },
    {
        "number": 4123,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n\n    # Initialize variables\n    max_count = 0\n    max_two_gram = \"\"\n\n    # Iterate over all possible two-grams\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            two_gram = s[i:j + 1]\n            count = s.count(two_gram)\n            if count > max_count:\n                max_count = count\n                max_two_gram = two_gram\n\n    return max_two_gram\n"
    },
    {
        "number": 4123,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    two_grams = {}\n    for i in range(len(s)-1):\n        two_grams[s[i:i+2]] = two_grams.get(s[i:i+2], 0) + 1\n    max_count = 0\n    ans = \"\"\n    for key, value in two_grams.items():\n        if value > max_count:\n            max_count = value\n            ans = key\n    return ans"
    },
    {
        "number": 4123,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    freq = {}\n    for i in range(len(s) - 1):\n        bigram = s[i:i+2]\n        freq[bigram] = freq.get(bigram, 0) + 1\n    max_bigram = ''\n    max_count = 0\n    for bigram in freq:\n        if freq[bigram] > max_count:\n            max_bigram = bigram\n            max_count = freq[bigram]\n    return max_bigram\n"
    },
    {
        "number": 4123,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n\n    max_count = 0\n    max_gram = \"\"\n\n    for i in range(n-1):\n        for j in range(i+1, n):\n            gram = s[i:j+1]\n            count = s.count(gram)\n            if count > max_count:\n                max_count = count\n                max_gram = gram\n\n    return max_gram\n"
    },
    {
        "number": 4123,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n\n    max_count = 0\n    max_gram = \"\"\n    for i in range(n - 1):\n        for j in range(i + 2, n + 1):\n            gram = s[i:j]\n            count = s.count(gram)\n            if count > max_count:\n                max_count = count\n                max_gram = gram\n\n    return max_gram"
    },
    {
        "number": 4123,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    s = stdin.split()[1]\n\n    max_count = 0\n    result = ''\n\n    for i in range(n - 1):\n        two_gram = s[i:i + 2]\n        count = s.count(two_gram)\n        if count > max_count:\n            max_count = count\n            result = two_gram\n\n    return result\n"
    },
    {
        "number": 4123,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    s = stdin.split('\\n')[1]\n    d = {}\n    for i in range(n-1):\n        if s[i:i+2] in d:\n            d[s[i:i+2]] += 1\n        else:\n            d[s[i:i+2]] = 1\n    max_key = max(d, key=d.get)\n    return max_key"
    },
    {
        "number": 4123,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    count = {}\n    for i in range(len(s)-1):\n        if s[i:i+2] in count:\n            count[s[i:i+2]] += 1\n        else:\n            count[s[i:i+2]] = 1\n    max_count = 0\n    max_gram = \"\"\n    for gram in count:\n        if count[gram] > max_count:\n            max_count = count[gram]\n            max_gram = gram\n    return max_gram\n"
    },
    {
        "number": 4123,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    max_count = 0\n    max_two_gram = \"\"\n    for i in range(n - 1):\n        two_gram = s[i:i+2]\n        count = s.count(two_gram)\n        if count > max_count:\n            max_count = count\n            max_two_gram = two_gram\n    return max_two_gram\n\ndef"
    },
    {
        "number": 4123,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    s = stdin.splitlines()[1]\n\n    # Create a dictionary to store the frequency of each two-gram\n    two_gram_freq = {}\n\n    # Iterate through the string and count the frequency of each two-gram\n    for i in range(n-1):\n        two_gram = s[i:i+2]\n        if two_gram in two_gram_freq:\n            two_gram_freq[two_gram] += 1\n        else:\n            two_gram_freq[two_gram] = 1\n\n    # Find the two-gram with the highest frequency\n    max_two_gram = ''\n    max_freq = 0\n    for two_gram in two_gram_freq:\n        if two_gram_freq[two_gram] > max_freq:\n            max_two_gram = two_gram\n            max_freq = two_gram_freq[two_gram]\n\n    # Print the two-gram with the highest frequency\n    print(max_two_gram)"
    },
    {
        "number": 4124,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s, t = map(str, stdin.split())\n    n = len(s)\n    m = len(t)\n    if n > m:\n        s, t = t, s\n        n, m = m, n\n    dp = [[0] * (m+1) for _ in range(n+1)]\n    for i in range(n+1):\n        for j in range(m+1):\n            if i == 0:\n                dp[i][j] = j\n            elif j == 0:\n                dp[i][j] = i\n            else:\n                dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n    return dp[n][m]"
    },
    {
        "number": 4124,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n\n    n = len(s)\n    m = len(t)\n\n    if n > m:\n        s, t = t, s\n        n, m = m, n\n\n    if not s:\n        return m\n    if not t:\n        return n\n\n    i = 0\n    j = 0\n    moves = 0\n    while i < n and j < m:\n        if s[i] == t[j]:\n            i += 1\n            j += 1\n        else:\n            if s[i+1:]:\n                i += 1\n            else:\n                if t[j+1:]:\n                    j += 1\n                else:\n                    moves += 1\n                    break\n\n    if not moves:\n        moves += n - i + m - j\n\n    return moves"
    },
    {
        "number": 4124,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    s = stdin.split('\\n')[0]\n    t = stdin.split('\\n')[1]\n\n    # initialize variables\n    moves = 0\n    s_len = len(s)\n    t_len = len(t)\n\n    # iterate until strings are equal\n    while s_len!= t_len:\n        # choose the string with the minimum length\n        if s_len > t_len:\n            s_len -= 1\n            s = s[:-1]\n        elif t_len > s_len:\n            t_len -= 1\n            t = t[:-1]\n        else:\n            # if both strings are the same length, choose the one with the most characters\n            if len(s) > len(t):\n                s = s[:-1]\n            elif len(t) > len(s):\n                t = t[:-1]\n            else:\n                # both strings are the same length and have the same characters, so delete both\n                s = s[:-1]\n                t = t[:-1]\n\n        moves += 1\n\n    # if one of the strings is empty, add the remaining characters of the other string to the result\n    if s == '':\n        result = t\n    elif t == '':\n        result = s\n    else:\n        result = s\n\n    # return the minimum number of moves and the resulting string\n    return str(moves) + '\\n' + result"
    },
    {
        "number": 4124,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.strip().split('\\n')\n    n, m = len(s), len(t)\n    dp = [[0] * (m+1) for _ in range(n+1)]\n    for i in range(n+1):\n        for j in range(m+1):\n            if i == 0 or j == 0:\n                dp[i][j] = max(i, j)\n            elif s[i-1] == t[j-1]:\n                dp[i][j] = dp[i-1][j-1]\n            else:\n                dp[i][j] = 1 + min(dp[i-1][j], dp[i][j-1])\n    return dp[n][m]\n\nstdin = \"\"\"\ntest\nwest\n\"\"\"\nprint(solution(stdin)) # Output: 2\n\nstdin = \"\"\"\ncodeforces\nyes\n\"\"\"\nprint(solution(stdin)) # Output: 9\n\nstdin = \"\"\"\ntest\nyes\n\"\"\"\nprint(solution(stdin)) # Output: 7\n\nstdin = \"\"\"\nb\nab\n\"\"\"\nprint(solution(stdin)) # Output: 1<|im_sep|>"
    },
    {
        "number": 4124,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split('\\n')\n    # initialize variables\n    count = 0\n    while s!= t:\n        # apply move to the string with the smaller length\n        if len(s) < len(t):\n            s = s[1:]\n        else:\n            t = t[1:]\n        # increment move count\n        count += 1\n    # if both strings are empty, the solution is the sum of their lengths\n    if s == '' and t == '':\n        return str(len(s) + len(t))\n    # otherwise, the solution is the move count\n    return str(count)"
    },
    {
        "number": 4124,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()[0]\n    t = stdin.split()[1]\n    moves = 0\n    while len(s) > 0 and len(t) > 0:\n        if s[0] == t[0]:\n            s = s[1:]\n            t = t[1:]\n        else:\n            if len(s) == 1 or len(t) == 1:\n                s = s[1:] + t[0]\n                t = t[1:]\n            else:\n                s = s[1:] + t[0]\n                t = t[1:]\n                moves += 1\n    moves += len(s) + len(t)\n    return str(moves) if moves!= 0 else str(len(stdin.split()[0])+len(stdin.split()[1]))"
    },
    {
        "number": 4124,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split('\\n')\n    n = len(s)\n    m = len(t)\n    # check if both strings are empty\n    if n == 0 and m == 0:\n        return '0'\n    # check if one of the strings is empty\n    if n == 0 or m == 0:\n        return str(max(n, m))\n    # check if the strings are already equal\n    if s == t:\n        return str(n)\n    # apply moves to make the strings equal\n    moves = 0\n    i, j = 0, 0\n    while i < n and j < m:\n        if s[i] == t[j]:\n            i += 1\n            j += 1\n        else:\n            if s[i] == '':\n                i += 1\n            else:\n                if t[j] == '':\n                    j += 1\n                else:\n                    if s[i] < t[j]:\n                        s = s[:i] + s[i+1:]\n                        moves += 1\n                    else:\n                        t = t[:j] + t[j+1:]\n                        moves += 1\n    # add the remaining characters to the result\n    moves += n - i + m - j\n    return str(moves)"
    },
    {
        "number": 4124,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.splitlines()\n    moves = 0\n    while len(s) > len(t):\n        s = s[1:]\n        moves += 1\n    while len(t) > len(s):\n        t = t[1:]\n        moves += 1\n    if len(t) == 0:\n        moves = len(s)\n    return str(moves)"
    },
    {
        "number": 4124,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    if len(s) == 0:\n        return str(len(t))\n    if len(t) == 0:\n        return str(len(s))\n\n    ans = float('inf')\n    for i in range(len(s)):\n        for j in range(len(t)):\n            if s[i] == t[j]:\n                ans = min(ans, len(s) + len(t) - 2 * i - 2 * j)\n    return str(ans)"
    },
    {
        "number": 4124,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip().split('\\n')[0]\n    t = stdin.strip().split('\\n')[1]\n    n = len(s)\n    m = len(t)\n    count = 0\n    \n    while s!= t and s!= '' and t!= '':\n        if s.startswith(t):\n            count += n - len(t)\n            t = ''\n        elif t.startswith(s):\n            count += m - len(s)\n            s = ''\n        else:\n            if len(s) < len(t):\n                s = s[1:]\n            else:\n                t = t[1:]\n            count += 1\n    \n    return count + max(len(s), len(t))\n"
    },
    {
        "number": 4125,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Read input from stdin\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    x = int(lines[1])\n    xs = list(map(int, lines[2].split()))\n\n    # Initialize variables\n    max_d = 0\n\n    # Iterate through all possible values of D\n    for d in range(1, x):\n        # Check if we can visit all the cities with D\n        visited = set()\n        for i in range(n):\n            if xs[i] < x - d and xs[i] > x + d:\n                visited.add(xs[i])\n\n        # If we can visit all the cities with D, update max_d\n        if len(visited) == n:\n            max_d = max(max_d, d)\n\n    # Print the maximum value of D that enables us to visit all the cities\n    print(max_d)\n\n    return ''"
    },
    {
        "number": 4125,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, X = map(int, stdin.split())\n    x = list(map(int, stdin.readline().split()))\n    d = 1\n    while True:\n        visited = set()\n        for i in range(N):\n            if x[i] - d in visited or x[i] + d in visited:\n                return str(d)\n            visited.add(x[i])\n        d += 1"
    },
    {
        "number": 4125,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    N, X = map(int, stdin.readline().strip().split())\n    x = list(map(int, stdin.readline().strip().split()))\n    \n    # sort x in ascending order\n    x.sort()\n    \n    # initialize variables\n    D = 1\n    i = 0\n    max_D = 0\n    while i < len(x):\n        # find the next city that is not within D of the current city\n        while i < len(x) - 1 and x[i+1] - x[i] <= D:\n            i += 1\n        # move to the next city\n        if i == len(x) - 1:\n            break\n        # find the maximum value of D that enables you to visit all the cities\n        max_D = max(max_D, D)\n        # update D for the next move\n        D = (x[i+1] - x[i]) // 2\n    \n    return str(max_D)"
    },
    {
        "number": 4125,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Given a list of N cities, x_1, x_2,..., x_N, and a departure point X, \n    find the maximum value of D that enables you to visit all the cities.\n    \"\"\"\n    n, x = map(int, stdin.strip().split())\n    xs = list(map(int, stdin.strip().split()))\n    xs.remove(x)\n    ds = [abs(x - y) for y in xs]\n    return str(max(ds))"
    },
    {
        "number": 4125,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Reading input from stdin\n    N, X = map(int, stdin.split())\n    x = list(map(int, stdin.readline().split()))\n\n    # Sorting the cities by their x-coordinate\n    x.sort()\n\n    # Finding the maximum distance between two cities\n    max_dist = max(x[i+1] - x[i] for i in range(N-1))\n\n    # Finding the maximum possible value of D\n    max_D = X // (N - 1)\n\n    # Finding the minimum possible value of D\n    min_D = X // max_dist\n\n    # Binary search to find the maximum value of D\n    while min_D <= max_D:\n        mid_D = (min_D + max_D) // 2\n        max_cost = sum(mid_D * 2 + abs(X - x[i]) for i in range(N))\n        if max_cost <= X:\n            min_D = mid_D + 1\n        else:\n            max_D = mid_D - 1\n\n    # Returning the maximum value of D\n    return str(min_D - 1)"
    },
    {
        "number": 4125,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N, X = map(int, stdin.readline().strip().split())\n    x = list(map(int, stdin.readline().strip().split()))\n    \n    # Initialize variables\n    left = X - x[0]\n    right = x[-1] - X\n    \n    # Binary search for max D\n    ans = 0\n    while left <= right:\n        mid = (left + right) // 2\n        visited = set()\n        for i in range(N):\n            if i == 0:\n                if X - mid <= x[i]:\n                    visited.add(X - mid)\n                if X - mid + D <= x[i]:\n                    visited.add(X - mid + D)\n            elif i == N - 1:\n                if x[i] - X <= mid:\n                    visited.add(x[i] - X)\n                if x[i] - X - D >= -mid:\n                    visited.add(x[i] - X - D)\n            else:\n                if x[i] - X - mid <= D:\n                    visited.add(x[i] - X - mid)\n                if x[i] - X - mid + D <= D + mid:\n                    visited.add(x[i] - X - mid + D)\n        if len(visited) == N:\n            ans = mid\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    # Output result\n    return str(ans)"
    },
    {
        "number": 4125,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # get input\n    n, x = map(int, stdin.readline().strip().split())\n    xs = list(map(int, stdin.readline().strip().split()))\n    # initialize variables\n    max_d = 0\n    visited = set([x])\n    # iterate over xs\n    for i in range(n):\n        if xs[i] not in visited:\n            # perform move 1\n            d = 1\n            while xs[i] + d <= 10**9:\n                visited.add(xs[i] + d)\n                d += 1\n            # perform move 2\n            d = 1\n            while xs[i] - d >= 0:\n                visited.add(xs[i] - d)\n                d += 1\n            # update max_d\n            max_d = max(max_d, d - 1)\n    return str(max_d)"
    },
    {
        "number": 4125,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split(\"\\n\")\n    N, X = map(int, lines[0].split())\n    cities = list(map(int, lines[1].split()))\n    cities.sort()\n\n    max_distance = 0\n    for i in range(N):\n        distance = abs(cities[i] - X)\n        if distance > max_distance:\n            max_distance = distance\n\n    return str(max_distance)"
    },
    {
        "number": 4125,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, X = map(int, stdin.readline().strip().split())\n    x = sorted(map(int, stdin.readline().strip().split()))\n    if X not in x:\n        return str(x[0] - X)\n    return str(max(X - x[i], x[i+1] - X) for i in range(N-1)).strip()"
    },
    {
        "number": 4125,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.readline().split())\n    xs = list(map(int, stdin.readline().split()))\n    \n    # check if all cities are the same\n    if len(set(xs)) == 1:\n        return str(x)\n    \n    # sort cities by x value\n    xs = sorted(xs)\n    \n    # initialize the answer to be the smallest possible value\n    ans = 1\n    \n    # perform the Move 1 and Move 2\n    for i in range(len(xs)):\n        # perform Move 1\n        y = xs[i]\n        if y > x:\n            ans = max(ans, y - x)\n        if i < len(xs) - 1:\n            # perform Move 2\n            y = xs[i + 1]\n            if y < x:\n                ans = max(ans, x - y)\n    \n    return str(ans)"
    },
    {
        "number": 4126,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    N = len(S)\n    if N % 2 == 0 or N < 3:\n        return \"No\"\n    else:\n        first_half = S[:N//2]\n        second_half = S[N//2+1:]\n        if first_half == first_half[::-1] and second_half == second_half[::-1]:\n            return \"Yes\"\n        else:\n            return \"No\""
    },
    {
        "number": 4126,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Reading input string\n    S = stdin.strip()\n\n    # Checking length of string\n    if len(S) % 2 == 0 or len(S) < 3 or len(S) > 99:\n        return \"No\"\n\n    # Checking if the string is a palindrome\n    if S!= S[::-1]:\n        return \"No\"\n\n    # Checking if first half of string is a palindrome\n    first_half = S[:len(S)//2]\n    if first_half!= first_half[::-1]:\n        return \"No\"\n\n    # Checking if second half of string is a palindrome\n    second_half = S[len(S)//2+1:]\n    if second_half!= second_half[::-1]:\n        return \"No\"\n\n    # If all conditions are satisfied, then it is a strong palindrome\n    return \"Yes\""
    },
    {
        "number": 4126,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    n = len(s)\n\n    # Check if string is a palindrome\n    if s == s[::-1]:\n\n        # Check if the string formed by the 1-st through ((N-1)/2)-th characters is a palindrome\n        if s[:n//2] == s[:n//2][::-1]:\n\n            # Check if the string formed by the (N+3)/2-st through N-th characters is a palindrome\n            if s[(n+3)//2:] == s[(n+3)//2:][::-1]:\n                return \"Yes\"\n\n    return \"No\""
    },
    {
        "number": 4126,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    N = len(S)\n    if N % 2 == 0 or not S.isalpha() or not S.islower():\n        return \"No\"\n    if S == S[::-1]:\n        for i in range(1, N//2):\n            if S[i]!= S[N-i-1]:\n                return \"No\"\n        for i in range(N//2+2, N):\n            if S[i]!= S[N-i+1]:\n                return \"No\"\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4126,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    if len(s) % 2 == 0 or len(s) < 3 or len(s) > 99:\n        return \"No\"\n    # Check if s is a palindrome\n    if s!= s[::-1]:\n        return \"No\"\n    # Check if the string formed by the 1-st through ((N-1)/2)-th characters is a palindrome\n    mid = len(s) // 2\n    if s[:mid]!= s[:mid][::-1]:\n        return \"No\"\n    # Check if the string consisting of the (N+3)/2-st through N-th characters is a palindrome\n    if s[mid+2:]!= s[mid+2:][::-1]:\n        return \"No\"\n    # If all conditions are satisfied, return \"Yes\"\n    return \"Yes\""
    },
    {
        "number": 4126,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    S = stdin.strip()\n\n    # check if S is a palindrome\n    if S == S[::-1]:\n        # check if all substrings are palindromes\n        for i in range(1, len(S) // 2 + 1):\n            if S[:i]!= S[:i][::-1] or S[i:-i]!= S[i:-i][::-1] or S[-i:]!= S[-i:][::-1]:\n                return 'No'\n        return 'Yes'\n    else:\n        return 'No'"
    },
    {
        "number": 4126,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    n = len(s)\n    if n % 2 == 0:\n        return \"No\"\n    else:\n        half = (n-1) // 2\n        if s[:half]!= s[:half][::-1]:\n            return \"No\"\n        elif s[half:n-half]!= s[half:n-half][::-1]:\n            return \"No\"\n        elif s[half:n-half] == s[half:n-half][::-1] and s[:half] == s[:half][::-1]:\n            return \"Yes\"\n        else:\n            return \"No\"\n        \n"
    },
    {
        "number": 4126,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # split the input string into a list of characters\n    chars = list(stdin.strip())\n\n    # check if the length of the input string is odd\n    if len(chars) % 2 == 0:\n        return \"No\"\n\n    # check if the input string is a palindrome\n    if chars == chars[::-1]:\n        # check if the first half of the string is a palindrome\n        half1 = chars[:len(chars)//2]\n        if half1 == half1[::-1]:\n            # check if the second half of the string is a palindrome\n            half2 = chars[len(chars)//2:]\n            if half2 == half2[::-1]:\n                return \"Yes\"\n\n    return \"No\""
    },
    {
        "number": 4126,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    s = stdin.strip()\n\n    # Check if s is a palindrome\n    if s == s[::-1]:\n        # Check if the string formed by the 1-st through ((N-1)/2)-th characters of S is a palindrome\n        n = len(s)\n        if s[:n//2] == s[:n//2][::-1]:\n            # Check if the string consisting of the (N+3)/2-st through N-th characters of S is a palindrome\n            if s[n//2+2:] == s[n//2+2:][::-1]:\n                return 'Yes'\n    return 'No'"
    },
    {
        "number": 4126,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Split input into a list of characters\n    s = list(stdin)\n\n    # Check if s is a palindrome\n    is_palindrome = lambda s: s == s[::-1]\n\n    # Check if the two halves of s are palindromes\n    left_half = ''.join(s[:len(s)//2])\n    right_half = ''.join(s[len(s)//2:])\n    is_left_palindrome = is_palindrome(left_half)\n    is_right_palindrome = is_palindrome(right_half)\n\n    # Check if s is a strong palindrome\n    if is_palindrome(s) and is_left_palindrome and is_right_palindrome:\n        return 'Yes'\n    else:\n        return 'No'"
    },
    {
        "number": 4127,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(float, stdin.split())\n    c = int(a * b)\n    return str(c)"
    },
    {
        "number": 4127,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(float, stdin.split())\n    C = A * B\n    C = int(C)\n    return str(C)"
    },
    {
        "number": 4127,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(float, stdin.strip().split())\n    result = A * B\n    result = int(result)\n    return str(result)"
    },
    {
        "number": 4127,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # convert input into floats\n    a, b = map(float, stdin.split())\n    # compute A * B\n    result = a * b\n    # truncate the fractional part\n    result = int(result)\n    # return the result as an integer\n    return str(result)"
    },
    {
        "number": 4127,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(float, stdin.split())\n    result = int(a * b)\n    return str(result)"
    },
    {
        "number": 4127,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(float, stdin.split())\n    c = a * b\n    return str(int(c))"
    },
    {
        "number": 4127,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(float, stdin.strip().split())\n    result = a * b\n    return str(int(result))"
    },
    {
        "number": 4127,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(float, stdin.strip().split())\n    result = int(A*B)\n    return str(result)\n\nprint(solution(input()))"
    },
    {
        "number": 4127,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = list(map(float, stdin.split()))\n    c = a * b\n    c = int(c)\n    return str(c)"
    },
    {
        "number": 4127,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = list(map(float, stdin.split()))\n    result = int(a*b)\n    return str(result)"
    },
    {
        "number": 4128,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split('\\n')[0])\n    result = []\n    for _ in range(t):\n        n = int(stdin.split('\\n')[1])\n        a, b = 1, 1\n        while a + b < n:\n            a += 1\n            b += 1\n        if a + b == n and a > b:\n            result.append(int(a))\n        else:\n            result.append(0)\n    return '\\n'.join(map(str, result))\n\ndef"
    },
    {
        "number": 4128,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n < 0:\n        return \"0\"\n    if n == 0:\n        return \"1\"\n    if n == 1:\n        return \"1\"\n    if n == 2:\n        return \"2\"\n    if n == 3:\n        return \"3\"\n    if n == 4:\n        return \"5\"\n    if n == 5:\n        return \"8\"\n    if n == 6:\n        return \"13\"\n    if n == 7:\n        return \"21\"\n    if n == 8:\n        return \"34\"\n    if n == 9:\n        return \"55\"\n    if n == 10:\n        return \"89\"\n    if n == 11:\n        return \"144\"\n    if n == 12:\n        return \"233\"\n    if n == 13:\n        return \"377\"\n    if n == 14:\n        return \"610\"\n    if n == 15:\n        return \"987\"\n    if n == 16:\n        return \"1597\"\n    if n == 17:\n        return \"2584\"\n    if n == 18:\n        return \"4181\"\n    if n == 19:\n        return \"6765\"\n    if n == 20:\n        return \"10946\""
    },
    {
        "number": 4128,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for i in range(t):\n        n = int(stdin.readline())\n        if n % 2 == 0:\n            print(0)\n        else:\n            a = b = (n+1)//2\n            print(3)\n    return ''\n"
    },
    {
        "number": 4128,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        n = int(stdin.readline().strip())\n        if n == 1:\n            print(0)\n        else:\n            print(2)\n    return \"\"\n\ntest_cases = \"\"\"\n6\n7\n1\n2\n3\n2000000000\n763243547\n\"\"\".strip()"
    },
    {
        "number": 4128,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for _ in range(t):\n        n = int(stdin.readline())\n        if n % 3 == 0:\n            print(2)\n        elif n % 3 == 1:\n            print(0)\n        else:\n            print(1)"
    },
    {
        "number": 4128,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2 == 1:\n        return \"0\"\n    else:\n        return str(int((n/2)*(n-2)) + int((n/2)*n))"
    },
    {
        "number": 4128,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    cases = stdin.split('\\n')\n    cases = cases[:-1]\n    for i, case in enumerate(cases):\n        cases[i] = int(case)\n    t = cases[0]\n    cases = cases[1:]\n    for i in range(t):\n        n = cases[i]\n        if n % 2 == 1:\n            print(0)\n            continue\n        a = (n+1)//2\n        b = n - a\n        if a <= 0 or b <= 0 or a > b:\n            print(0)\n            continue\n        count = 0\n        for i in range(a+1):\n            for j in range(b+1):\n                if i+j == n:\n                    count += 1\n        print(count)\n    return \"\""
    },
    {
        "number": 4128,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n = int(stdin.readline().strip())\n        if n % 2 == 1:\n            print(0)\n            continue\n        a = n // 2\n        b = n - a\n        if a > b:\n            a, b = b, a\n        print(1)\n        print(a, b)"
    },
    {
        "number": 4128,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n\n    for i in range(t):\n        n = int(stdin.readline().strip())\n        if n < 2:\n            print(0)\n        else:\n            candies = list(range(n+1))\n            candies[0] = 0\n            for i in range(1, n+1):\n                for j in range(min(i, n-i), n+1):\n                    candies[i] += candies[j]\n            print(candies[n])\n\n    return \"\""
    },
    {
        "number": 4128,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n = int(stdin.readline().strip())\n        if n == 1:\n            print(0)\n            continue\n        a, b = 1, n-1\n        if a > b:\n            a, b = b, a\n        count = 0\n        while b > 0:\n            if a == b:\n                count += 1\n                break\n            elif a > b:\n                a -= 1\n                b -= 1\n                count += 1\n            else:\n                a += 1\n        print(count)\n    return \"\"\n"
    },
    {
        "number": 4129,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4129,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s = map(int, stdin.strip().split())\n    # construct graph\n    graph = [[] for _ in range(n+1)]\n    for _ in range(m):\n        u, v = map(int, stdin.strip().split())\n        graph[u].append(v)\n        graph[v].append(u)\n    # bfs\n    visited = [False] * (n+1)\n    visited[s] = True\n    queue = [s]\n    for u in queue:\n        for v in graph[u]:\n            if not visited[v]:\n                visited[v] = True\n                queue.append(v)\n    # count extra roads\n    count = 0\n    for u in range(1, n+1):\n        if not visited[u]:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4129,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4129,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    n, m, s = map(int, stdin.readline().strip().split())\n    graph = [[] for _ in range(n+1)]\n    for i in range(m):\n        u, v = map(int, stdin.readline().strip().split())\n        graph[u].append(v)\n        graph[v].append(u)\n    \n    # bfs\n    visited = [False]*(n+1)\n    visited[s] = True\n    q = [s]\n    cnt = 0\n    while q:\n        size = len(q)\n        cnt += 1\n        for i in range(size):\n            u = q.pop(0)\n            for v in graph[u]:\n                if not visited[v]:\n                    visited[v] = True\n                    q.append(v)\n    \n    return str(cnt-1) if cnt-1 > 0 else \"0\"\n\nprint(solution(\"9 9 1\\n1 2\\n1 3\\n2 3\\n1 5\\n5 6\\n6 1\\n1 8\\n9 8\\n7 1\")) # output: 3\nprint(solution(\"5 4 5\\n1 2\\n2 3\\n3 4\\n4 1\")) # output: 1"
    },
    {
        "number": 4129,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s = map(int, stdin.split())\n    graph = [[] for _ in range(n+1)]\n    for i in range(m):\n        u, v = map(int, stdin.split())\n        graph[u].append(v)\n    visited = set()\n    def dfs(start):\n        visited.add(start)\n        for neighbor in graph[start]:\n            if neighbor not in visited:\n                dfs(neighbor)\n    dfs(s)\n    return str(len(visited)-1)\n\nstdin = \"9 9 1\\n1 2\\n1 3\\n2 3\\n1 5\\n5 6\\n6 1\\n1 8\\n9 8\\n7 1\"\nprint(solution(stdin)) # Output: 3\n\nstdin = \"5 4 5\\n1 2\\n2 3\\n3 4\\n4 1\"\nprint(solution(stdin)) # Output: 1"
    },
    {
        "number": 4129,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s = map(int, stdin.readline().split())\n    graph = [[] for _ in range(n+1)]\n    for i in range(m):\n        u, v = map(int, stdin.readline().split())\n        graph[u].append(v)\n        graph[v].append(u)\n    visited = [False]*(n+1)\n    visited[s] = True\n    queue = [(s, 0)]\n    while queue:\n        u, dist = queue.pop(0)\n        for v in graph[u]:\n            if not visited[v]:\n                visited[v] = True\n                queue.append((v, dist+1))\n    return n - sum(visited)"
    },
    {
        "number": 4129,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s = map(int, stdin.split())\n    adj = [[] for i in range(n+1)]\n    for i in range(m):\n        u, v = map(int, stdin.split())\n        adj[u].append(v)\n        adj[v].append(u)\n    visited = [False]*(n+1)\n    stack = [s]\n    visited[s] = True\n    cnt = 0\n    while stack:\n        node = stack.pop()\n        for nei in adj[node]:\n            if not visited[nei]:\n                cnt += 1\n                visited[nei] = True\n                stack.append(nei)\n    return cnt if visited[i] for i in range(1, n+1) else 0\n\nstdin = \"\"\"\n9 9 1\n1 2\n1 3\n2 3\n1 5\n5 6\n6 1\n1 8\n9 8\n7 1\n\"\"\"\nprint(solution(stdin))"
    },
    {
        "number": 4129,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s = map(int, stdin.split())\n    cities = {i: [] for i in range(1, n+1)}\n    for i in range(m):\n        u, v = map(int, stdin.split())\n        cities[u].append(v)\n        cities[v].append(u)\n    visited = [False] * (n+1)\n    visited[s] = True\n    queue = [s]\n    while queue:\n        curr = queue.pop(0)\n        for neighbor in cities[curr]:\n            if not visited[neighbor]:\n                visited[neighbor] = True\n                queue.append(neighbor)\n    return len(visited) - 1\n\nprint(solution(stdin))"
    },
    {
        "number": 4129,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s = map(int, stdin.split())\n    graph = [[] for _ in range(n+1)]\n    for _ in range(m):\n        u, v = map(int, stdin.split())\n        graph[u].append(v)\n        graph[v].append(u)\n    visited = set()\n    q = [s]\n    while q:\n        u = q.pop(0)\n        visited.add(u)\n        for v in graph[u]:\n            if v not in visited:\n                q.append(v)\n    return len(visited) - 1\n"
    },
    {
        "number": 4129,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s = map(int, stdin.readline().split())\n    adj = [[] for _ in range(n+1)]\n    for _ in range(m):\n        u, v = map(int, stdin.readline().split())\n        adj[u].append(v)\n        adj[v].append(u)\n    visited = [False]*(n+1)\n    q = [s]\n    visited[s] = True\n    count = 0\n    while q:\n        size = len(q)\n        for _ in range(size):\n            u = q.pop(0)\n            for v in adj[u]:\n                if not visited[v]:\n                    visited[v] = True\n                    q.append(v)\n                    count += 1\n                    if v == s:\n                        break\n        if s in q:\n            break\n    return count - 1 if s in q else count"
    },
    {
        "number": 4130,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    a = set(a)\n    max_team = len(a)\n    for i in a:\n        if i-1 not in a:\n            max_team += 1\n        if i+1 not in a:\n            max_team += 1\n    return str(max_team)"
    },
    {
        "number": 4130,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.strip().split())\n    b = sorted(set(a))\n    cnt = 0\n    for i in range(len(b)):\n        if a.count(b[i]) == 1:\n            cnt += 1\n        else:\n            cnt += 2\n    return cnt"
    },
    {
        "number": 4130,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n\n    dp = [0] * (max(a) + 1)\n\n    for i in range(n):\n        for j in range(a[i], -1, -1):\n            dp[j] = max(dp[j], dp[j - a[i]] + 1)\n\n    return dp[max(a)]\n"
    },
    {
        "number": 4130,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n\n    # Create a set of unique weights\n    unique_weights = set(a)\n\n    # Get the largest team\n    largest_team = max(len(unique_weights), n)\n\n    # Check if the largest weight is 150001 or higher, and reduce the largest team by 1\n    if max(a) >= 150001:\n        largest_team -= 1\n\n    return str(largest_team)\n"
    },
    {
        "number": 4130,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = [int(i) for i in stdin.splitlines()[1].split()]\n\n    max_weight = max(a)\n    max_num_of_people = 1\n    if max_weight > 1:\n        max_num_of_people = 2\n        for i in range(1, n):\n            if a[i] == 1:\n                max_num_of_people += 1\n            elif a[i] == max_weight and a[i-1] == max_weight-1:\n                max_num_of_people += 1\n\n    return str(max_num_of_people)\n"
    },
    {
        "number": 4130,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, *weights = map(int, stdin.split())\n    weights.sort()\n\n    if weights[-1] == 150001:\n        return 'No solution'\n\n    max_num = n\n    for i in range(n):\n        if weights[i] == weights[0]:\n            return max_num\n        elif weights[i] == weights[0] + 1:\n            max_num -= 1\n        elif weights[i] == weights[-1]:\n            max_num -= 1\n\n    return max_num\n"
    },
    {
        "number": 4130,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    max_num = sum(set(a))\n    if max_num == 1:\n        return max(max_num, 2)\n    return max_num"
    },
    {
        "number": 4130,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    m = max(a)\n    if m == 1:\n        return n\n    if m == 0:\n        return 1\n    count = 1\n    curr = 0\n    for i in range(n):\n        if a[i] > 1:\n            count += 1\n            curr = a[i]\n        else:\n            if curr == a[i]:\n                count -= 1\n            else:\n                count += 1\n    return count"
    },
    {
        "number": 4130,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    a = sorted(set(a))\n    m = len(a)\n    while m > 1:\n        if a[-1] - a[-2] == 1:\n            a.pop()\n            m -= 1\n        else:\n            a.pop()\n            a.pop()\n            m -= 2\n    return n - m\n\nstdin = \"4\\n3 2 4 1\"\nprint(solution(stdin)) # Output: 4\nstdin = \"6\\n1 1 1 4 4 4\"\nprint(solution(stdin)) # Output: 5"
    },
    {
        "number": 4130,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    count = 0\n    if len(set(a)) == len(a):\n        count = len(a)\n    else:\n        for i in range(len(a)):\n            if a[i]!= 1:\n                break\n        for j in range(i, len(a)):\n            if a[j] > a[i]:\n                break\n        count = j - i + 1\n        for k in range(j + 1, len(a)):\n            if a[k] == a[i]:\n                return \"0\"\n        if a[i] == 1 and a[-1] > 1:\n            return \"1\"\n    return str(count)"
    },
    {
        "number": 4131,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.readline().strip().split())\n    prefectures = [[] for _ in range(N)]\n    for _ in range(M):\n        p, y = map(int, stdin.readline().strip().split())\n        prefectures[p-1].append((y, len(prefectures[p-1])))\n    ids = []\n    for p in range(N):\n        for i, city in enumerate(prefectures[p], start=1):\n            id_ = str(p).zfill(6) + str(i).zfill(6)\n            ids.append(id_)\n    return '\\n'.join(ids)"
    },
    {
        "number": 4131,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    prefectures = [[] for _ in range(N)]\n    cities = []\n    for _ in range(M):\n        p, y = map(int, stdin.split())\n        prefectures[p-1].append(y)\n        cities.append((p-1, y))\n    cities.sort(key=lambda x: x[1])\n    ids = []\n    for i, c in enumerate(cities):\n        p, y = c\n        id_ = str(p).zfill(6) + str(i+1).zfill(6)\n        ids.append(id_)\n    return '\\n'.join(ids)"
    },
    {
        "number": 4131,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    prefectures = [[] for _ in range(n)]\n    for i in range(m):\n        p, y = map(int, stdin.split())\n        prefectures[p-1].append((y, i+1))\n    prefectures = [sorted(cities) for cities in prefectures]\n    id_numbers = []\n    for i in range(m):\n        pref, year = prefectures[i][0]\n        id_number = f\"{pref:06d}{i+1:06d}\"\n        id_numbers.append(id_number)\n    return \"\\n\".join(id_numbers)\n"
    },
    {
        "number": 4131,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.strip().split())\n    prefectures = [[] for _ in range(n)]\n    for i in range(m):\n        p, y = map(int, stdin.strip().split())\n        prefectures[p-1].append((y, i))\n    prefectures = [sorted(p) for p in prefectures]\n    cities = []\n    for p in prefectures:\n        for y, i in p:\n            cities.append((p[0], i, str(p[0]).zfill(6) + str(i).zfill(6)))\n    cities.sort()\n    return '\\n'.join(c[2] for c in cities)"
    },
    {
        "number": 4131,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.strip().split())\n    prefectures = {}\n    for i in range(m):\n        p, y = map(int, stdin.strip().split())\n        if p not in prefectures:\n            prefectures[p] = []\n        prefectures[p].append((y, i+1))\n    ids = []\n    for p, cities in prefectures.items():\n        cities.sort()\n        for i, (y, _) in enumerate(cities):\n            id = str(p).zfill(6) + str(i+1).zfill(6)\n            ids.append(id)\n    return '\\n'.join(ids)"
    },
    {
        "number": 4131,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    n, m = list(map(int, stdin.strip().split()))\n    prefectures = {}\n    for i in range(m):\n        p, y = list(map(int, stdin.strip().split()))\n        if p not in prefectures:\n            prefectures[p] = []\n        prefectures[p].append((y, i))\n    # Sort cities by year and prefecture\n    for p, cities in prefectures.items():\n        prefectures[p] = sorted(cities, key=lambda x: x[0])\n    # Allocate ID numbers\n    ids = []\n    for p, cities in prefectures.items():\n        for i, city in enumerate(cities):\n            id_str = str(p).zfill(6) + str(i).zfill(6)\n            ids.append(id_str)\n    # Sort IDs by city index\n    ids = sorted(ids, key=lambda x: int(x[-6:]))\n    # Output ID numbers\n    return \"\\n\".join(ids)\n"
    },
    {
        "number": 4131,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    n, m = map(int, stdin.readline().split())\n    prefectures = [[] for _ in range(n)]\n    for i in range(m):\n        p, y = map(int, stdin.readline().split())\n        prefectures[p-1].append((y, i+1))\n    # Allocate ID numbers\n    ids = []\n    for i, cities in enumerate(prefectures):\n        for j, city in enumerate(cities):\n            year, index = city\n            p = f\"{i+1:06d}\"\n            x = f\"{index:06d}\"\n            ids.append(p + x)\n    # Sort and print IDs\n    ids.sort()\n    for id_ in ids:\n        print(id_)\n    return \"\""
    },
    {
        "number": 4131,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    prefectures = [[] for _ in range(n)]\n    for i in range(m):\n        p, y = map(int, stdin.split())\n        prefectures[p-1].append((y, i+1))\n    city_ids = []\n    for i in range(n):\n        for j in range(len(prefectures[i])):\n            y, x = prefectures[i][j]\n            id_ = str(i+1).zfill(6) + str(x).zfill(6)\n            city_ids.append(id_)\n    return '\\n'.join(city_ids)"
    },
    {
        "number": 4131,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    prefectures, cities = map(int, stdin.split())\n    prefectures_dict = {}\n    for i in range(cities):\n        pref, year = map(int, stdin.split())\n        if pref not in prefectures_dict:\n            prefectures_dict[pref] = []\n        prefectures_dict[pref].append(year)\n    city_ids = []\n    for pref, years in prefectures_dict.items():\n        years = sorted(years)\n        for i in range(len(years)):\n            id_str = str(pref).zfill(6) + str(i+1).zfill(6)\n            city_ids.append(id_str)\n    return '\\n'.join(city_ids)"
    },
    {
        "number": 4131,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    city_ids = []\n    for i in range(m):\n        prefecture, year = map(int, stdin.split())\n        id_str = str(prefecture).zfill(6) + str(i + 1).zfill(6)\n        city_ids.append(id_str)\n    return '\\n'.join(city_ids)\n"
    },
    {
        "number": 4132,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    A = list(map(int, stdin.split()[1:]))\n\n    alive = [i+1 for i in range(N)]\n    while len(alive) > 1:\n        attacker = random.choice(alive)\n        defender = random.choice(alive)\n        while attacker == defender:\n            defender = random.choice(alive)\n        health_left = min(A[attacker-1], A[defender-1])\n        A[defender-1] -= health_left\n        if A[defender-1] <= 0:\n            alive.remove(defender)\n    return str(A[alive[0]-1])"
    },
    {
        "number": 4132,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    # Keep track of alive monsters\n    alive = [True] * n\n\n    # Keep track of remaining health for each monster\n    health = a.copy()\n\n    # Keep track of attacking and defending monsters\n    attack = [None] * n\n    defend = [None] * n\n\n    # Keep track of minimum final health\n    min_final_health = float('inf')\n\n    # Keep track of number of attacks\n    num_attacks = 0\n\n    while sum(alive) > 1:\n        # Choose random alive monsters for attacking and defending\n        while True:\n            attack_index = random.randint(0, n-1)\n            defend_index = random.randint(0, n-1)\n            if attack[attack_index]!= defend[defend_index]:\n                attack[attack_index] = defend_index\n                defend[defend_index] = attack_index\n                break\n\n        # Reduce health of defending monster by current health of attacking monster\n        health[defend[defend_index]] -= health[attack[attack_index]]\n\n        # Mark defending monster as dead if health becomes 0 or negative\n        if health[defend[defend_index]] <= 0:\n            alive[defend[defend_index]] = False\n\n        # Update minimum final health if necessary\n        min_final_health = min(min_final_health, health[attack[attack_index]])\n\n        # Increment number of attacks\n        num_attacks += 1\n\n    # Find index of last alive monster\n    last_alive = None\n    for i in range(n):\n        if alive[i]:\n            last_alive = i\n\n    # Return minimum final health of last alive monster\n    return str(min_final_health)\n"
    },
    {
        "number": 4132,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n\n    # Find the minimum health of the last alive monster\n    min_health = float('inf')\n    for i in range(n):\n        if a[i] > 0:\n            min_health = min(min_health, a[i])\n\n    return str(min_health)"
    },
    {
        "number": 4132,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    n = int(lines[0])\n    healths = list(map(int, lines[1].split()))\n    alive_monsters = set(range(n))\n\n    while len(alive_monsters) > 1:\n        attacker_index = random.choice(list(alive_monsters))\n        defender_index = random.choice(list(alive_monsters))\n        while attacker_index == defender_index:\n            defender_index = random.choice(list(alive_monsters))\n        attacker_health = healths[attacker_index]\n        defender_health = healths[defender_index]\n        damage = min(attacker_health, defender_health)\n        healths[defender_index] -= damage\n        if healths[defender_index] <= 0:\n            alive_monsters.remove(defender_index)\n\n    return str(healths[list(alive_monsters)[0]])"
    },
    {
        "number": 4132,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    alive = set(range(1, n+1))\n    while len(alive) > 1:\n        i = random.choice(list(alive))\n        j = random.choice(list(alive))\n        if i!= j:\n            a[j] -= a[i]\n            if a[j] <= 0:\n                alive.remove(j)\n    return str(a[list(alive)[0]])\n\n-----Explanation-----\nWe start by reading the input values from stdin and initializing the list a and the set alive.\n\nWe then enter a while loop that continues until there is only one element in the set alive. Inside the while loop, we choose two random elements from the set alive and perform the attack. We update the health of the monster attacked by subtracting the current health of the monster attacking. If the new health of the monster attacked is less than or equal to 0, we remove it from the set alive.\n\nFinally, we return the health of the last monster in the set alive.\n\nWe use the set alive to keep track of the monsters that are still alive. We randomly choose a monster from the set alive to perform the attack. We use a set to keep track of the monsters that are still alive to avoid using indices to access elements of a list. This is an efficient approach as we are only iterating over a set of size at most N."
    },
    {
        "number": 4132,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    lines = stdin.split(\"\\n\")\n    n = int(lines[0])\n    a = list(map(int, lines[1].split()))\n\n    # initialize health of each monster\n    health = a[:]\n\n    # keep on attacking until there is only one alive monster\n    while len(set(health)) > 1:\n        # get indices of alive monsters\n        indices = [i for i in range(n) if health[i] > 0]\n\n        # get random alive monster indices\n        attacker_i = random.choice(indices)\n        defender_i = random.choice(indices)\n\n        # attack\n        health[defender_i] -= health[attacker_i]\n        if health[defender_i] <= 0:\n            # defender died, remove from indices\n            indices.remove(defender_i)\n\n    # return final health of the last monster\n    return str(health[indices[0]])"
    },
    {
        "number": 4132,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Read the input\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    # Sort the monsters based on their health\n    a.sort()\n\n    # Calculate the final health of the last monster alive\n    final_health = sum(a[:n-1]) + 1\n\n    return str(final_health)"
    },
    {
        "number": 4132,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    # Initialize alive monsters\n    alive = set(range(1, n+1))\n\n    # Run attacking loop until only one monster is alive\n    while len(alive) > 1:\n        # Choose random alive monster\n        i = alive.pop()\n\n        # Choose random alive monster to attack\n        j = alive.pop()\n\n        # Calculate damage dealt\n        damage = min(a[i], a[j])\n\n        # Update health\n        a[j] -= damage\n\n    # Return final health of only alive monster\n    return a[alive.pop()]\n"
    },
    {
        "number": 4132,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    health = a[:]\n    while len(health) > 1:\n        attacked_idx = random.randint(0, len(health)-1)\n        attacker_idx = random.randint(0, len(health)-1)\n        while attacker_idx == attacked_idx:\n            attacker_idx = random.randint(0, len(health)-1)\n        attacked_health = health[attacked_idx] - health[attacker_idx]\n        if attacked_health <= 0:\n            health.pop(attacker_idx)\n        else:\n            health[attacker_idx] = attacked_health\n    return health[0]"
    },
    {
        "number": 4132,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    alive = [True] * n\n\n    while True:\n        attacked = False\n        for i in range(n):\n            if alive[i]:\n                for j in range(i+1, n):\n                    if alive[j]:\n                        a[j] -= a[i]\n                        if a[j] <= 0:\n                            alive[j] = False\n                            attacked = True\n        if not attacked:\n            break\n\n    return str(a.index(max(a))+1) # return the index of the last monster with non-zero health + 1"
    },
    {
        "number": 4133,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # get the golorp name\n    golorp_name = stdin.strip()\n    \n    # check if the golorp is impossible to feed\n    if \"_\" not in golorp_name:\n        return \"false\"\n    \n    # create a dictionary to store the value of each variable\n    variable_values = {}\n    for i, c in enumerate(golorp_name):\n        if c.isdigit():\n            variable_values[i] = int(c)\n    \n    # create a list of possible variable sequences\n    possible_sequences = []\n    for size in range(1, len(variable_values) + 1):\n        for seq in itertools.permutations(variable_values.values(), size):\n            possible_sequences.append(seq)\n    \n    # sort the list of possible sequences lexicographically\n    possible_sequences.sort()\n    \n    # convert the sorted sequence of variable values to a string\n    variable_sequence = \"\".join(str(v) for v in possible_sequences[0])\n    \n    return variable_sequence\n\n\nimport itertools\n\nprint(solution(\"?(_-_/___*__)\")) # 0010\nprint(solution(\"?(__-_+_/______)\")) # false\nprint(solution(\"?(______________________/____+_______*__-_____*______-___)\")) # 0250341\nprint(solution(\"?(__+___+__-___)\")) # 0101"
    },
    {
        "number": 4133,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    golorp_name = stdin\n    \n    if len(golorp_name) < 13 or len(golorp_name) > 1024:\n        return \"false\"\n    \n    # dictionary of golorp variables\n    variables = {'_': 0,'': 0, '|': 1, 'I': 2, 'l': 3, '0': 4, '1': 5, '2': 6, '3': 7, '4': 8, '5': 9}\n    \n    # loop through each character in the golorp name and add its corresponding variable value to the sequence\n    sequence = []\n    for char in golorp_name:\n        if char in variables:\n            sequence.append(str(variables[char]))\n        else:\n            sequence.append('0')\n    \n    return ''.join(sequence)"
    },
    {
        "number": 4133,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # create a mapping of golorp names to their variable requirements\n    golorp_requirements = {\n        '?(_-_/___*__)': '0010',\n        '?(__-_+_/_____):-__>__,_____<__.': 'false',\n        '?(______________________/____+_______*__-_____*______-___):-__<___,___<____,____<_____,_____<______,______<_______.': '0250341',\n        '?(__+___+__-___):-___>__.': '0101'\n    }\n    \n    # get the golorp name from the input\n    golorp_name = stdin.strip()\n    \n    # check if the golorp is in the mapping\n    if golorp_name in golorp_requirements:\n        # get the variable requirements for the golorp\n        requirements = golorp_requirements[golorp_name]\n        \n        # check if the golorp is impossible to feed\n        if requirements == 'false':\n            return 'false'\n        \n        # create a list of all possible variable sequences\n        variable_sequences = []\n        for i in range(10):\n            for j in range(10):\n                for k in range(10):\n                    if i <= requirements.count('0') and j <= requirements.count('1') and k <= requirements.count('2'):\n                        variable_sequences.append(str(i) + str(j) + str(k))\n        \n        # sort the list of variable sequences and return the first one\n        variable_sequences.sort()\n        return variable_sequences[0]\n    \n    # if the golorp is not in the mapping, return 'false'\n    return 'false'"
    },
    {
        "number": 4133,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # check if the golorp is impossible to feed\n    if len(stdin.replace('_', '')) > 10:\n        return \"false\"\n\n    # prepare variables\n    jaw_size = len(stdin) - 1\n    variables = [0] * jaw_size\n\n    # fill variables in order\n    i = 0\n    for char in stdin:\n        if char == '_':\n            variables[i] = 0\n        elif char == '+':\n            variables[i] = (variables[i] + 1) % 10\n        elif char == '-':\n            variables[i] = (variables[i] - 1) % 10\n        elif char == '>':\n            i += 1\n        elif char == '<':\n            i -= 1\n\n    # convert variables to string\n    return ''.join(str(var) for var in variables)\n"
    },
    {
        "number": 4133,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    name = stdin.strip()\n    # initialize variables\n    jaws = {}\n    for i in range(len(name)):\n        if name[i] not in jaws:\n            jaws[name[i]] = i\n    # check if golorp is impossible to feed\n    if len(jaws) < len(name):\n        return \"false\"\n    # generate variable values\n    values = list(range(10))\n    for i in range(len(name)-1, -1, -1):\n        jaw = name[i]\n        if jaw in jaws:\n            values[jaws[jaw]] = name[i+1]\n    return \"\".join(map(str, values))"
    },
    {
        "number": 4133,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    golorp = stdin.split(':')[-1]\n    if golorp == '___*__':\n        return 'false'\n    result = ''\n    for i, ch in enumerate(golorp):\n        if ch == '_':\n            result += str(i % 10)\n    return result\n    \n"
    },
    {
        "number": 4133,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Check if golorp can be fed\n    if not all(ord(c) in range(48, 58) for c in stdin):\n        return \"false\"\n    # Convert input to a list of integers\n    values = [int(c) for c in stdin]\n    # Define the shape of the jaws of the golorp\n    jaw_shape = [values[0], values[1]]\n    # Define the maximum amount of variables that can be fed\n    max_vars = sum(jaw_shape)\n    # Create a list of all possible variable sequences\n    sequences = []\n    for i in range(2, len(values)):\n        if values[i] > max_vars:\n            continue\n        for sequence in sequences:\n            for j in range(len(sequence) + 1):\n                new_sequence = sequence[:j] + [values[i]] + sequence[j:]\n                if len(new_sequence) == max_vars:\n                    sequences.append(new_sequence)\n    # Sort the sequences lexicographically\n    sequences.sort()\n    # Return the first sequence if it exists, otherwise \"false\"\n    return \"\".join(map(str, sequences[0])) if sequences else \"false\""
    },
    {
        "number": 4133,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # The golorp's name is stdin\n    # We need to find the smallest sequence of variable values that can feed the golorp\n    # We will start by parsing the name and figuring out the jaws shape\n    jaw_shape = []\n    i = 0\n    while i < len(stdin):\n        if stdin[i] == '?':\n            # This is the start of a jaw\n            jaw_shape.append(0)\n            i += 1\n        elif stdin[i] == '-':\n            # This is a jaw break\n            jaw_shape[-1] += 1\n            i += 1\n        else:\n            # This is a variable\n            jaw_shape[-1] += 1\n            i += 1\n    # We now know the jaw shape\n    # Let's find the smallest sequence of variable values that can feed the golorp\n    # We can use a brute-force approach, trying all possible sequences\n    sequences = []\n    for i in range(10**jaw_shape[0]):\n        sequence = []\n        for j in range(1, len(jaw_shape)):\n            if jaw_shape[j] > 0:\n                sequence.append(i % 10)\n                i //= 10\n            else:\n                sequence.append(0)\n        sequences.append(sequence)\n    # Now we need to sort the sequences lexicographically and output the smallest one\n    sequences.sort()\n    for sequence in sequences:\n        if all(s > 0 for s in sequence):\n            # This sequence can feed the golorp\n            return ''.join(str(s) for s in sequence)\n    # This golorp is impossible to feed\n    return 'false'"
    },
    {
        "number": 4133,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    golorp = stdin\n    jaws_shape = golorp[0]\n    if jaws_shape == '?':\n        return \"false\"\n    variables_needed = len(golorp[1:-1].split(','))\n    variables_available = set(map(str, range(10)))\n    variables_used = set()\n    result = []\n    while len(variables_used) < variables_needed and variables_available:\n        min_var = min(variables_available)\n        variables_used.add(min_var)\n        variables_available.remove(min_var)\n        result.append(min_var)\n    if len(variables_used)!= variables_needed:\n        return \"false\"\n    return ''.join(result)"
    },
    {
        "number": 4133,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Remove starting and ending characters \"?\" and \":\" from the input\n    name = stdin[1:-1]\n\n    # Check if the name is valid\n    if not name.isalnum() or len(name) < 3 or len(name) > 1024:\n        return \"false\"\n\n    # Check if the golorp is impossible to feed\n    if name[0] == \"_\" or name[-1] == \"_\":\n        return \"false\"\n\n    # Calculate the number of variables necessary to feed the golorp\n    num_vars = (len(name) - 1) // 2 + 1\n\n    # Define the variable values in the order they get into the jaws\n    var_values = \"\"\n    for i in range(num_vars):\n        var_values += str(i)\n\n    # Sort the variable values lexicographically\n    var_values = sorted(var_values)\n\n    return var_values"
    },
    {
        "number": 4134,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    n, m, k = map(int, lines[0].split())\n    grid = [list(map(int, line.split())) for line in lines[1:]]\n    dp = [[0] * m for _ in range(n)]\n    dp[0][0] = 1\n    for i in range(n):\n        for j in range(m):\n            if i > 0:\n                dp[i][j] ^= dp[i-1][j]\n            if j > 0:\n                dp[i][j] ^= dp[i][j-1]\n    return dp[-1][-1] if k ^ dp[-1][-1] == 0 else 0"
    },
    {
        "number": 4134,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    grid = []\n    for i in range(n):\n        grid.append(list(map(int, stdin.split())))\n\n    paths = 0\n    for i in range(n):\n        for j in range(m):\n            if i == 0 and j == 0:\n                paths += 1\n            elif i == 0:\n                paths += grid[i][j]\n            elif j == 0:\n                paths += grid[i][j]\n            else:\n                paths += grid[i][j] * (grid[i][j-1] + grid[i-1][j])\n\n    return str(paths)"
    },
    {
        "number": 4134,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.readline().split())\n    a = [list(map(int, stdin.readline().split())) for _ in range(n)]\n\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n            if i == n and j == m:\n                continue\n            if i == n:\n                dp[i][j] += dp[i][j - 1]\n            elif j == m:\n                dp[i][j] += dp[i - 1][j]\n            else:\n                dp[i][j] += dp[i - 1][j] + dp[i][j - 1]\n\n    ans = dp[n][m]\n    if k == 0 and ans > 0:\n        ans -= 1\n    elif k == 0 and ans == 0:\n        ans = 1\n    if k % 2 == 0 and ans % 2 == 1:\n        ans -= 1\n    elif k % 2 == 1 and ans % 2 == 0:\n        ans -= 1\n\n    return str(ans)\n\nstdin = \"\"\"3 3 11\n2 1 5\n7 10 0\n12 6 4\"\"\"\n\nstdout = solution(stdin)\nprint(stdout) # Output: 3"
    },
    {
        "number": 4134,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = list(map(int, stdin.split()[0:3]))\n    a = []\n    for i in range(n):\n        a.append(list(map(int, stdin.split())))\n\n    dp = [[0 for j in range(m+1)] for i in range(n+1)]\n    dp[1][1] = 1\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            if i == 1 and j == 1:\n                continue\n            dp[i][j] = dp[i][j-1] + dp[i-1][j]\n            if i > 1 and j > 1:\n                dp[i][j] += dp[i-1][j-1]\n            if i > 1 and j < m:\n                dp[i][j] += dp[i-1][j+1]\n            if i < n and j > 1:\n                dp[i][j] += dp[i+1][j-1]\n            if i < n and j < m:\n                dp[i][j] += dp[i+1][j+1]\n\n    return str(dp[n][m] - dp[1][1])"
    },
    {
        "number": 4134,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.readline().split())\n    a = [list(map(int, stdin.readline().split())) for i in range(n)]\n\n    dp = [[0 for j in range(m)] for i in range(n)]\n    dp[0][0] = 1\n\n    for i in range(n):\n        for j in range(m):\n            if i > 0 and j > 0:\n                dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n\n    ans = 0\n    for i in range(n):\n        for j in range(m):\n            if i == n - 1 and j == m - 1 and dp[i][j] == 1 and (a[i][j] ^ k) == 0:\n                ans += 1\n            elif i == n - 1 and j == m - 1 and dp[i][j] == 1 and (a[i][j] ^ k)!= 0:\n                ans = 0\n                break\n            elif i > 0 and j > 0 and dp[i][j] == 1 and (a[i][j] ^ k) == 0:\n                ans += dp[i - 1][j] + dp[i][j - 1] - 1\n            elif i > 0 and j > 0 and dp[i][j] == 1 and (a[i][j] ^ k)!= 0:\n                ans += dp[i - 1][j] + dp[i][j - 1] - dp[i - 1][j - 1]\n\n    return str(ans)"
    },
    {
        "number": 4134,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.readline().split())\n    grid = []\n    for i in range(n):\n        row = list(map(int, stdin.readline().split()))\n        grid.append(row)\n    \n    paths = [[0] * m for _ in range(n)]\n    \n    # Base case\n    paths[0][0] = 1\n    \n    # Check for all cells if a path exists\n    for i in range(n):\n        for j in range(m):\n            if i > 0 and j > 0:\n                # Check for the cell to the right\n                if grid[i][j] == grid[i][j-1] ^ k:\n                    paths[i][j] += paths[i][j-1]\n                # Check for the cell below\n                if grid[i][j] == grid[i-1][j] ^ k:\n                    paths[i][j] += paths[i-1][j]\n            \n            # Check for the upper-left corner\n            if i == 0 and j == 0 and grid[i][j] == k:\n                paths[i][j] = 1\n    \n    return str(paths[n-1][m-1])"
    },
    {
        "number": 4134,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    a = [[int(c) for c in line.split()] for line in stdin.split('\\n')[1:]]\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n    dp[1][1] = 1\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if i > 1:\n                dp[i][j] += dp[i - 1][j]\n            if j > 1:\n                dp[i][j] += dp[i][j - 1]\n            if i > 1 and j > 1:\n                dp[i][j] -= dp[i - 1][j - 1]\n            if dp[i][j] % 2 == 1:\n                dp[i][j] = 0\n    return sum(dp[n][m]) if dp[n][m] % 2 == k % 2 else 0\n\ndef"
    },
    {
        "number": 4134,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.readline().strip().split())\n    a = [[int(c) for c in stdin.readline().strip().split()] for _ in range(n)]\n\n    dp = [[0] * (m+1) for _ in range(n+1)]\n\n    dp[1][1] = 1\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            dp[i][j] = dp[i-1][j] + dp[i][j-1]\n\n    def check(i, j, k):\n        if i > n or j > m:\n            return False\n        if i == n and j == m:\n            return dp[n][m] == k\n        if a[i][j] ^ a[i][j-1]!= k:\n            return False\n        if a[i][j] ^ a[i-1][j]!= k:\n            return False\n        return True\n\n    count = 0\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            if check(i, j, k):\n                count += dp[i][j]\n\n    return count"
    },
    {
        "number": 4134,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    grid = [list(map(int, stdin.split())) for _ in range(n)]\n    \n    dp = [[0] * (m+1) for _ in range(n+1)]\n    \n    dp[1][1] = 1\n    \n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            if i == 1 and j == 1:\n                continue\n                \n            if i == 1:\n                dp[i][j] = dp[i][j-1]\n            elif j == 1:\n                dp[i][j] = dp[i-1][j]\n            else:\n                dp[i][j] = dp[i][j-1] + dp[i-1][j]\n                \n            if i == n and j == m:\n                if (k ^ grid[i-1][j-1]) == 0:\n                    dp[i][j] += 1\n    \n    return dp[n][m]"
    },
    {
        "number": 4134,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = list(map(int, stdin.split()))\n    a = []\n    for i in range(n):\n        a.append(list(map(int, stdin.split())))\n    dp = [[0]*(m+1) for _ in range(n+1)]\n    dp[1][1] = 1\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            if i == n and j == m:\n                continue\n            dp[i][j] += dp[i-1][j]\n            dp[i][j] += dp[i][j-1]\n    ans = 0\n    for i in range(n+1):\n        for j in range(m+1):\n            if dp[i][j] and (a[i-1][j-1] ^ a[i-1][j] ^ a[i][j-1] ^ a[i][j]) == k:\n                ans += dp[i][j]\n    return str(ans)"
    },
    {
        "number": 4135,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    t = stdin.split()[1]\n    for d in range(n, 0, -1):\n        if n % d == 0:\n            s = t[:d][::-1]\n            t = t[d:]\n            return s + solution(t)\n    return t\n\nstdin = input()\nprint(solution(stdin))"
    },
    {
        "number": 4135,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    t = stdin.split()[1]\n    for i in range(n, 0, -1):\n        if n % i == 0:\n            s = t[-i:] + t[:-i]\n            return s"
    },
    {
        "number": 4135,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    t = stdin.split()[1]\n    s = \"\"\n    for i in range(n, 0, -1):\n        if n % i == 0:\n            s += t[:i][::-1]\n            t = t[i:]\n    return s"
    },
    {
        "number": 4135,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    t = stdin.split()[1]\n    for d in range(n, 0, -1):\n        if n % d == 0:\n            s = t[0:d]\n            for i in range(d // 2):\n                s = s[::-1]\n            t = s + t[d:]\n    return t"
    },
    {
        "number": 4135,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip().split()[0])\n    t = stdin.strip().split()[1]\n    s = \"\"\n    for d in range(n, 0, -1):\n        if n % d == 0:\n            sub_t = t[:d][::-1]\n            s += sub_t\n    return s"
    },
    {
        "number": 4135,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    t = stdin.readline().strip()\n    for d in range(n, 0, -1):\n        if n % d == 0:\n            s = t[:d][::-1] + t[d:]\n            if s == t:\n                return s\n    return ''"
    },
    {
        "number": 4135,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    t = stdin.readline().strip()\n\n    # find the largest divisor of n\n    divisor = n\n    while divisor > 1:\n        if n % divisor == 0:\n            break\n        divisor -= 1\n\n    # iterate over all divisors of n in decreasing order\n    for d in range(divisor, 0, -1):\n        # reverse the substring s[1...d]\n        s = list(t)\n        s[0:d] = s[0:d][::-1]\n        t = ''.join(s)\n\n    return t"
    },
    {
        "number": 4135,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    t = stdin.split()[1]\n    s = \"\"\n    for i in range(n, 0, -1):\n        if n % i == 0:\n            s = t[:i][::-1] + s\n            t = t[i:]\n    return s"
    },
    {
        "number": 4135,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    t = stdin.split()[1]\n    \n    for i in range(n, 0, -1):\n        if n % i == 0:\n            d = i\n            break\n    \n    s = \"\"\n    for j in range(1, d+1):\n        s += t[-j]\n    \n    for k in range(n//d):\n        s += t[d+k*(d+1):d+(k+1)*(d+1)]\n    \n    return s\n\ndef"
    },
    {
        "number": 4135,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    t = stdin.readline()[:-1]  # remove newline character\n    \n    # find largest divisor of n\n    divisor = n\n    for i in range(n, 0, -1):\n        if n % i == 0:\n            divisor = i\n            break\n    \n    # iterate over all substrings of t starting at position 0 and ending at position divisor\n    s = t[0:divisor]\n    for i in range(1, divisor):\n        # reverse the substring s[i:divisor]\n        s = s[:i] + s[i:divisor][::-1] + s[divisor:]\n    \n    return s"
    },
    {
        "number": 4136,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(a + b)"
    },
    {
        "number": 4136,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(a + b)"
    },
    {
        "number": 4136,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(a + b)"
    },
    {
        "number": 4136,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(a + b)\n"
    },
    {
        "number": 4136,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(a + b)"
    },
    {
        "number": 4136,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.strip().split())\n    return str(a+b)"
    },
    {
        "number": 4136,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(a + b)"
    },
    {
        "number": 4136,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    a = int(a)\n    b = int(b)\n    return str(a + b)"
    },
    {
        "number": 4136,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(a + b)"
    },
    {
        "number": 4136,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.strip().split())\n    return str(a + b)"
    },
    {
        "number": 4137,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input expression\n    stack = []\n    curr_num = 0\n    for ch in stdin:\n        if ch.isdigit():\n            curr_num = curr_num * 10 + int(ch)\n        elif ch in ['+', '-']:\n            if curr_num!= 0:\n                stack.append(curr_num)\n            curr_num = 0\n            stack.append(ch)\n        elif ch =='':\n            continue\n        else:\n            raise ValueError('Invalid character:'+ ch)\n    if curr_num!= 0:\n        stack.append(curr_num)\n    \n    # convert expression to brainfuck program\n    program = []\n    while stack:\n        op = stack.pop()\n        if op == '+':\n            program.append('>')\n        elif op == '-':\n            program.append('<')\n        elif isinstance(op, int):\n            program.append('.' * op)\n        else:\n            raise ValueError('Invalid operator:'+ str(op))\n    \n    return ''.join(program)\n\nprint(solution('2+3')) # output: ++>\nprint(solution('9-7')) # output: ++++++>"
    },
    {
        "number": 4137,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    operands = stdin.split('+')\n    if len(operands) == 1:\n        operands = stdin.split('-')\n    if len(operands) == 1:\n        return ''  # invalid input\n\n    # generate Brainfuck program\n    program = ''\n    for i, operand in enumerate(operands):\n        program += '+' * int(operand)\n        if i!= len(operands) - 1:\n            program += '-' * (256 - int(operand))\n\n    # run Brainfuck program and get result\n    result = run_brainfuck(program)\n    return result\n\n\ndef"
    },
    {
        "number": 4137,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    expression = stdin.strip()\n    if not expression:\n        return \"\"\n    result = 0\n    for char in expression:\n        if char.isdigit():\n            result = result * 10 + int(char)\n        else:\n            if char == \"+\":\n                result += 1\n            elif char == \"-\":\n                result -= 1\n    bf = \"\"\n    bf += \"+\" * result\n    bf += \".\"\n    return bf"
    },
    {
        "number": 4137,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def bf_program(expr):\n        # Brainfuck program for arithmetic expression\n        return ''.join([\n            '>++++++++++<-',\n            '+'.join(['[>+<-]>' for _ in range(len(expr))]),\n            '[->->-]<<',\n            expr.replace('+', '>').replace('-', '<'),\n            '.'])\n\n    # Evaluate expression using Brainfuck program\n    import subprocess\n    output = subprocess.check_output(['./bf', '<', bf_program(stdin)], encoding='utf-8')\n\n    # Parse output and return result\n    result = int(output.strip())\n    return f'{result}'"
    },
    {
        "number": 4137,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def generate(expr: str) -> str:\n        # Split the expression into operators and operands\n        tokens = re.findall(r'[+-]?[0-9]+', expr)\n        # Generate Brainfuck program\n        prog = \"\"\n        for token in tokens:\n            if token[0] == \"+\":\n                prog += \"+\" * int(token[1:])\n            elif token[0] == \"-\":\n                prog += \"-\" * int(token[1:])\n            else:\n                prog += \".\" * int(token)\n        return prog\n    \n    # Generate Brainfuck program\n    prog = generate(stdin)\n    \n    # Check program length and steps\n    if len(prog) > 5000000 or len(prog) > 25000 and len(prog) > len(prog.replace(\"+\", \"\").replace(\"-\", \"\").replace(\".\", \"\")) * 2:\n        return \"Error: Program too long\"\n    if len(prog) > 25000 and len(prog) > len(prog.replace(\"+\", \"\").replace(\"-\", \"\").replace(\".\", \"\")) * 2:\n        return \"Warning: Program length is close to the maximum length\"\n    if len(prog) > 100000:\n        return \"Warning: Program execution time is very long\"\n    if len(prog) > 50000 and len(prog) > len(prog.replace(\"+\", \"\").replace(\"-\", \"\").replace(\".\", \"\")) * 2:\n        return \"Warning: Program execution time is close to the maximum time\"\n    \n    # Execute Brainfuck program\n    tape = [0]\n    pc = 0\n    steps = 0\n    while pc < len(prog):\n        if prog[pc] == \">\":\n            pc += 1\n            if pc == len(prog):\n                break\n            if prog[pc] == \">\":\n                tape.append(0)\n            elif prog[pc] == \"<\":\n                tape.pop()\n        elif prog[pc] == \"<\":\n            pc += 1\n            if pc == len(prog):\n                break\n            if prog[pc] == \"<\":\n                tape.insert(0, 0)\n            elif prog[pc] == \">\":\n                tape.pop(0)\n        elif prog[pc] == \"+\":\n            pc += 1\n            if pc == len(prog):\n                break\n            if prog[pc] == \"+\":\n                tape[len(tape)-1] = (tape[len(tape)-1] + 1) % 256\n        elif prog[pc] == \"-\":\n            pc += 1\n            if pc == len(prog):\n                break\n            if prog[pc] == \"-\":\n                tape[len(tape)-1] = (tape[len(tape)-1] - 1) % 256\n        elif prog[pc] == \".\":\n            print(chr(tape[len(tape)-1]), end=\"\")\n            pc += 1\n            steps += 1\n        elif prog[pc] == \",\":\n            # Ignore input\n            pc += 1\n        else:\n            return \"Error: Invalid character in program\"\n        if steps > 50000000:\n            return \"Error: Program execution time exceeded\"\n    \n    # Return result\n    return \"Result: {}\".format(tape[-1])\n\n```python\nimport re\n\ndef"
    },
    {
        "number": 4137,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    expression = stdin.strip()\n    operands = expression.split('+')\n    if len(operands) == 1:\n        operands = expression.split('-')\n    if len(operands) == 1:\n        raise ValueError('Invalid expression')\n    # generate Brainfuck code\n    code = ''\n    for operand in operands:\n        code += '>' * len(operand)\n        code += '['\n        code += '+' * len(operand)\n        code += ']'\n        if operand[0] == '-':\n            code += '-'\n            code += '>'\n    code += '.'\n    return code"
    },
    {
        "number": 4137,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Define the arithmetic expression to evaluate\n    expr = stdin.strip()\n\n    # Define the Brainfuck program to output\n    bf_prog = \"\"\n\n    # Define the memory cells to store the operands and the result\n    mem = [0] * 30000\n\n    # Define the current memory cell pointer\n    ptr = 0\n\n    # Define the current index in the Brainfuck program\n    idx = 0\n\n    # Iterate over the expression operands and operators\n    for token in expr.split():\n        if token.isdigit():\n            # If the token is an integer, store it in the current memory cell\n            mem[ptr] = int(token)\n            ptr += 1\n        elif token in \"+-\":\n            # If the token is an arithmetic operator, increment or decrement the memory cell value\n            if token == \"+\":\n                mem[ptr - 1] = (mem[ptr - 1] + 1) % 256\n            else:\n                mem[ptr - 1] = (mem[ptr - 1] - 1) % 256\n        elif token == \"*\":\n            # If the token is a multiplication operator, multiply the memory cell value by 2\n            mem[ptr - 1] = (mem[ptr - 1] * 2) % 256\n        elif token == \"/\":\n            # If the token is a division operator, divide the memory cell value by 2\n            mem[ptr - 1] = (mem[ptr - 1] // 2) % 256\n        elif token == \"&\":\n            # If the token is a bitwise AND operator, apply the bitwise AND operation to the memory cell value and 127\n            mem[ptr - 1] = mem[ptr - 1] & 127\n        elif token == \"|\":\n            # If the token is a bitwise OR operator, apply the bitwise OR operation to the memory cell value and 127\n            mem[ptr - 1] = mem[ptr - 1] | 127\n        elif token == \"^\":\n            # If the token is a bitwise XOR operator, apply the bitwise XOR operation to the memory cell value and 127\n            mem[ptr - 1] = mem[ptr - 1] ^ 127\n        elif token == \">\":\n            # If the token is a right pointer operator, move the pointer to the next memory cell\n            ptr += 1\n        elif token == \"<\":\n            # If the token is a left pointer operator, move the pointer to the previous memory cell\n            ptr -= 1\n        elif token == \".\":\n            # If the token is a print operator, append the memory cell value to the Brainfuck program\n            bf_prog += \"[\" + str(mem[ptr - 1]) + \"]\"\n            idx += 2\n        elif token == \",\":\n            # If the token is a read operator, raise an exception as we don't support console input\n            raise Exception(\"Console input not supported\")\n        elif token == \"[\":\n            # If the token is a loop start operator, append the matching loop end operator to the Brainfuck program\n            bf_prog += \"[\"\n            idx += 1\n        elif token == \"]\":\n            # If the token is a loop end operator, append the loop start operator to the Brainfuck program\n            bf_prog += \"]\"\n            idx += 1\n\n    # Append a loop end operator to the Brainfuck program to handle the last memory cell value\n    bf_prog += \"]\"\n\n    # Check the length of the Brainfuck program\n    if len(bf_prog) > 5000000:\n        raise Exception(\"Brainfuck program is too long\")\n\n    # Output the Brainfuck program and return it\n    return bf_prog"
    },
    {
        "number": 4137,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Convert input string to list of characters\n    program = list(stdin)\n    \n    # Define dictionary of Brainfuck instructions\n    bf_dict = {\n        '+': '>',\n        '-': '<',\n        '0': '.',\n        '1': '+',\n        '2': '-'\n    }\n    \n    # Iterate through characters in program and replace arithmetic signs with corresponding Brainfuck instructions\n    for i in range(len(program)):\n        if program[i] in bf_dict:\n            program[i] = bf_dict[program[i]]\n    \n    # Convert list of characters back to string\n    bf_program = ''.join(program)\n    \n    # Check length of Brainfuck program\n    if len(bf_program) > 5000000:\n        return 'Error: Program too long'\n    \n    # Check number of Brainfuck steps\n    steps = 0\n    for i in range(len(bf_program)):\n        if bf_program[i] == '>':\n            steps += 1\n        elif bf_program[i] == '<':\n            steps += 1\n        elif bf_program[i] == '+':\n            steps += 1\n        elif bf_program[i] == '-':\n            steps += 1\n        elif bf_program[i] == '.':\n            steps += 1\n        elif bf_program[i] == ',':\n            steps += 1\n        elif bf_program[i] == '[':\n            steps += 1\n        elif bf_program[i] == ']':\n            steps += 1\n        if steps > 50000000:\n            return 'Error: Program too complex'\n    \n    # Return Brainfuck program\n    return bf_program"
    },
    {
        "number": 4137,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    This function takes an arithmetic expression as input and returns a Brainfuck program\n    which, when executed, will print the result of evaluating this expression.\n    \"\"\"\n    # Remove spaces from input\n    expression = stdin.replace(\" \", \"\")\n    \n    # Define a dictionary for the Brainfuck symbols\n    symbols = {\"+\": \">\", \"-\": \"<\"}\n    \n    # Define a list to store the Brainfuck program\n    program = []\n    \n    # Iterate over the expression, appending the corresponding Brainfuck symbols\n    for symbol in expression:\n        program.append(symbols.get(symbol, \"\"))\n    \n    # Append the final output symbol\n    program.append(\".\")\n    \n    # Convert the program list to a string\n    program = \"\".join(program)\n    \n    # Return the program\n    return program"
    },
    {
        "number": 4137,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Convert the input expression into a list of tokens\n    tokens = stdin.strip().split()\n    # Initialize the Brainfuck program with the initialization code\n    program = '++++++++++[>+++++++>++++++++++>+++>+<<<<-]>++.>+.+++++++..+++.>++.<<+++++++++++++++.>.+++.------.--------.>+.>.'\n    # Loop through the tokens and convert them to Brainfuck code\n    for token in tokens:\n        if token in ['+', '-']:\n            # Add or subtract the current cell from the next cell\n            program += '+' if token == '+' else '-'\n        else:\n            # Set the current cell to the value of the token\n            program += '[>++++++++++<-]>' + str(int(token)) + '<[<->-]>'\n    # Add the final output code\n    program += '.>++++++++++[<++++++++>-]<.>>+>+>->>+[<]<-.<<>>.'\n    return program"
    },
    {
        "number": 4138,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline())\n    for i in range(q):\n        k = int(stdin.readline())\n        num_str = \"11212312341234512345612345671234567812345678912345678910\"\n        digit = int(num_str[(k-1)//10**10]) + (int(num_str[(k-1)//10**(9-1)]) if (k-1) % 10**(9-1) == 0 else 0) + (int(num_str[(k-1)//10**(8-1)]) if (k-1) % 10**(8-1) == 0 else 0) + (int(num_str[(k-1)//10**(7-1)]) if (k-1) % 10**(7-1) == 0 else 0) + (int(num_str[(k-1)//10**(6-1)]) if (k-1) % 10**(6-1) == 0 else 0) + (int(num_str[(k-1)//10**(5-1)]) if (k-1) % 10**(5-1) == 0 else 0) + (int(num_str[(k-1)//10**(4-1)]) if (k-1) % 10**(4-1) == 0 else 0) + (int(num_str[(k-1)//10**(3-1)]) if (k-1) % 10**(3-1) == 0 else 0) + (int(num_str[(k-1)//10**(2-1)]) if (k-1) % 10**(2-1) == 0 else 0) + (int(num_str[(k-1)//10**(1-1)]) if (k-1) % 10**(1-1) == 0 else 0)\n        print(digit)\n    return \"\""
    },
    {
        "number": 4138,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    q = int(lines[0])\n    k = [int(line) for line in lines[1:]]\n    seq = \"11212312341234512345612345671234567812345678912345678910\"\n    return '\\n'.join([seq[i-1] for i in k])\n"
    },
    {
        "number": 4138,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def get_digit(k):\n        # create a generator that yields digits of the sequence\n        seq = iter(\"11212312341234512345612345671234567812345678912345678910\")\n        for i in range(k):\n            next(seq)\n        return next(seq)\n\n    q = int(stdin.readline())\n    for i in range(q):\n        k = int(stdin.readline())\n        digit = get_digit(k)\n        print(digit)"
    },
    {
        "number": 4138,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline().strip())\n    for i in range(q):\n        k = int(stdin.readline().strip())\n        sequence = '1'\n        for i in range(2, k+1):\n            sequence += str(i) + str(i-1)\n        if k%2 == 0:\n            x = sequence[k//2]\n        else:\n            x = sequence[k//2] + sequence[(k//2)+1]\n        print(x)\n\nstdin = '5\\n1\\n3\\n20\\n38\\n56'\nsolution(stdin) # Output: 1\\n2\\n5\\n2\\n0"
    },
    {
        "number": 4138,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline().strip())\n    sequence = \"11212312341234512345612345671234567812345678912345678910\"\n    for _ in range(q):\n        k = int(stdin.readline().strip())\n        print(int(sequence[k-1]))\n    return \"\""
    },
    {
        "number": 4138,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    n = int(lines[0])\n    queries = [int(line.strip()) for line in lines[1:]]\n    \n    sequence = \"11212312341234512345612345671234567812345678912345678910\"\n    sequence_length = len(sequence)\n    \n    result = []\n    for query in queries:\n        if query <= 0 or query > sequence_length:\n            result.append(\"0\")\n        else:\n            result.append(sequence[query-1])\n    \n    return \"\\n\".join(result)"
    },
    {
        "number": 4138,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    lines = stdin.strip().split('\\n')\n    q = int(lines[0])\n    ks = [int(line) for line in lines[1:]]\n    \n    # Initialize sequence\n    sequence = '1'\n    for i in range(1, 10):\n        sequence += str(i) * (i + 1)\n    \n    # Iterate through queries and compute answer\n    answers = []\n    for k in ks:\n        # Extract digit at position k\n        answer = sequence[k - 1]\n        answers.append(answer)\n    \n    # Format output\n    output = '\\n'.join(answers)\n    return output"
    },
    {
        "number": 4138,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline().strip())\n    for i in range(q):\n        k = int(stdin.readline().strip())\n        if k == 1:\n            x = 1\n        elif k <= 10:\n            x = k\n        elif k % 9 == 0:\n            x = 9\n        else:\n            x = k % 9\n        print(x)\n    return \"\""
    },
    {
        "number": 4138,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    lines = stdin.strip().split(\"\\n\")\n    q = int(lines[0])\n    queries = [int(line) for line in lines[1:]]\n\n    # Initialize sequence\n    sequence = \"1\"\n    for i in range(2, 11):\n        sequence += str(i) * (i-1) + str(i)\n\n    # Process queries\n    results = []\n    for k in queries:\n        if k > len(sequence):\n            results.append(\"-1\")\n        else:\n            results.append(sequence[k-1])\n\n    return \"\\n\".join(results)"
    },
    {
        "number": 4138,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline().strip())\n    sequence = '11212312341234512345612345671234567812345678912345678910'\n    result = []\n    for i in range(q):\n        k = int(stdin.readline().strip())\n        result.append(sequence[k-1])\n    return '\\n'.join(result)\n\ndef"
    },
    {
        "number": 4139,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    for i in range(1, n+1):\n        if '7' in str(i) and '5' in str(i) and '3' in str(i):\n            if str(i).count('7') == 1 and str(i).count('5') == 1 and str(i).count('3') == 1:\n                count += 1\n    return str(count)"
    },
    {
        "number": 4139,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n\n    count = 0\n    for i in range(1, N+1):\n        if '7' not in str(i) or '5' not in str(i) or '3' not in str(i):\n            continue\n        if '7' in str(i) and '5' in str(i) and '3' in str(i):\n            count += 1\n    \n    return str(count)"
    },
    {
        "number": 4139,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    for num in range(1, n+1):\n        if has_seven_five_three(num):\n            count += 1\n    return count\n\ndef"
    },
    {
        "number": 4139,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Read the input integer N\n    N = int(stdin)\n    \n    # Count the number of Shichi-Go-San numbers between 1 and N\n    count = 0\n    for i in range(1, N+1):\n        # Check if the number is a Shichi-Go-San number\n        if '7' in str(i) and '5' in str(i) and '3' in str(i):\n            digits = set(str(i))\n            if len(digits) == 3 and '7' in digits and '5' in digits and '3' in digits:\n                count += 1\n    \n    # Print the count of Shichi-Go-San numbers\n    print(count)"
    },
    {
        "number": 4139,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    count = 0\n    for i in range(1, n+1):\n        digits = [int(d) for d in str(i)]\n        if digits.count(7) >= 1 and digits.count(5) >= 1 and digits.count(3) >= 1 and len(set(digits)) == 3:\n            count += 1\n    return str(count)\n\ndef"
    },
    {
        "number": 4139,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    for i in range(1, n+1):\n        if '7' in str(i) and '5' in str(i) and '3' in str(i):\n            count += 1\n    return str(count)\n\nprint(solution(input()))"
    },
    {
        "number": 4139,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    for i in range(1, n+1):\n        if '7' in str(i) and '5' in str(i) and '3' in str(i):\n            if str(i).count('7') == str(i).count('5') == str(i).count('3'):\n                count += 1\n    return count"
    },
    {
        "number": 4139,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    for i in range(1, n+1):\n        digits = [int(d) for d in str(i)]\n        if 7 in digits and 5 in digits and 3 in digits:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4139,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    for i in range(1, n+1):\n        digits = list(str(i))\n        if '7' in digits and '5' in digits and '3' in digits:\n            if digits.count('7') == digits.count('5') == digits.count('3'):\n                count += 1\n    return str(count)"
    },
    {
        "number": 4139,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    count = 0\n    for i in range(1, N+1):\n        if '7' in str(i) and '5' in str(i) and '3' in str(i) and not any(char in str(i) for char in '124689'):\n            count += 1\n    return str(count)"
    },
    {
        "number": 4140,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    count = 0\n    for i in range(len(S)-1):\n        if S[i] == S[i+1]:\n            count += 1\n    return count+1"
    },
    {
        "number": 4140,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    S = stdin.strip()\n\n    # find the index of the first black or white tile\n    for i in range(len(S)):\n        if S[i]!= '0' and S[i]!= '1':\n            break\n    else:\n        # all tiles have the same color, no need to repaint\n        return '0'\n\n    # count the number of adjacent black and white tiles\n    black_count = 0\n    white_count = 0\n    for j in range(i):\n        if S[j] == '0':\n            black_count += 1\n        else:\n            white_count += 1\n    for j in range(i+2, len(S)):\n        if S[j] == '0':\n            black_count += 1\n        else:\n            white_count += 1\n\n    # calculate the minimum number of tiles to repaint\n    if black_count == 0:\n        return '1'\n    if white_count == 0:\n        return '1'\n    return str(black_count + white_count + 1)"
    },
    {
        "number": 4140,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    S = stdin.strip()\n\n    # Count the number of black tiles\n    black_tiles = sum([int(x) for x in S])\n\n    # Count the number of white tiles\n    white_tiles = len(S) - black_tiles\n\n    # Count the number of repainted tiles\n    repainted_tiles = 0\n\n    # Check if any adjacent tiles have different colors\n    for i in range(len(S)-1):\n        if S[i]!= S[i+1]:\n            repainted_tiles += 1\n\n    # If there are no adjacent tiles with different colors, all tiles must be repainted\n    if repainted_tiles == 0:\n        return str(len(S))\n\n    # Return the minimum number of tiles to repaint\n    return str(repainted_tiles+1)"
    },
    {
        "number": 4140,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # read input string\n    s = stdin.strip()\n\n    # count the number of black tiles\n    black_tiles = sum(int(s[i]) for i in range(len(s)))\n\n    # if all tiles are black or white, repaint the middle tile white\n    if black_tiles == 0 or black_tiles == len(s):\n        middle = len(s) // 2\n        s = s[:middle] + str(1 - int(s[middle])) + s[middle+1:]\n\n    # count the number of adjacent tiles with different colors\n    diff_colors = 0\n    for i in range(len(s)-1):\n        if s[i]!= s[i+1]:\n            diff_colors += 1\n\n    # print the minimum number of tiles to repaint\n    return str(diff_colors)"
    },
    {
        "number": 4140,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    S = stdin.strip()\n    count = 0\n    for i in range(1, N):\n        if S[i] == S[i-1]:\n            count += 1\n    return count"
    },
    {
        "number": 4140,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    n = len(S)\n    count = 0\n    \n    for i in range(1, n):\n        if S[i] == S[i-1]:\n            count += 1\n    \n    return count"
    },
    {
        "number": 4140,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    n = len(s)\n    count = 0\n    for i in range(n-1):\n        if s[i] == s[i+1]:\n            count += 1\n    return count + 1 if n%2 == 1 else count"
    },
    {
        "number": 4140,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    n = len(S)\n    if n == 1:\n        return '0'\n    count = 0\n    for i in range(1, n):\n        if S[i]!= S[i-1]:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4140,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    N = len(S)\n    count = 0\n    for i in range(1, N):\n        if S[i]!= S[i-1]:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4140,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    s = stdin.strip()\n    n = len(s)\n    # calculate initial state\n    black_tiles = [i for i in range(n) if s[i] == '0']\n    white_tiles = [i for i in range(n) if s[i] == '1']\n    # check adjacent tiles\n    adjacent_tile = [0, 1]\n    for black_tile in black_tiles:\n        for white_tile in white_tiles:\n            if abs(black_tile - white_tile) in adjacent_tile:\n                return '0' if s[black_tile] == '1' else '1'\n    # no adjacent tiles found\n    return '0' if s[0] == '1' else '1'\n"
    },
    {
        "number": 4141,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    numbers = list(map(int, stdin.readline().strip().split()))\n    divisible_by_3_or_5 = all(number % 3 == 0 or number % 5 == 0 for number in numbers if number % 2 == 0)\n    if divisible_by_3_or_5:\n        return \"APPROVED\"\n    else:\n        return \"DENIED\""
    },
    {
        "number": 4141,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N = int(stdin.readline().strip())\n    A = list(map(int, stdin.readline().strip().split()))\n\n    # Check if all even numbers are divisible by 3 or 5\n    all_even_divisible = all(x % 2 == 0 and x % 3 == 0 or x % 2 == 0 and x % 5 == 0 for x in A if x % 2 == 0)\n\n    # Output result\n    if all_even_divisible:\n        return \"APPROVED\"\n    else:\n        return \"DENIED\""
    },
    {
        "number": 4141,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Reading the input\n    N = int(stdin.readline())\n    A = list(map(int, stdin.readline().split()))\n\n    # Checking if all even numbers written on the document are divisible by 3 or 5\n    for i in range(N):\n        if A[i] % 2 == 0 and not (A[i] % 3 == 0 or A[i] % 5 == 0):\n            return \"DENIED\"\n\n    # If all even numbers written on the document are divisible by 3 or 5, the immigrant should be allowed entry\n    return \"APPROVED\""
    },
    {
        "number": 4141,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    A = [int(x) for x in stdin.readline().strip().split()]\n    for x in A:\n        if x % 2 == 0 and (x % 3 == 0 or x % 5 == 0):\n            continue\n        else:\n            return \"DENIED\"\n    return \"APPROVED\""
    },
    {
        "number": 4141,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N = int(stdin.readline())\n    A = list(map(int, stdin.readline().split()))\n\n    # Check if all even numbers are divisible by 3 or 5\n    even_nums = [num for num in A if num % 2 == 0]\n    if all(num % 3 == 0 or num % 5 == 0 for num in even_nums):\n        return \"APPROVED\"\n    else:\n        return \"DENIED\""
    },
    {
        "number": 4141,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # get the input\n    N = int(stdin.readline())\n    A = list(map(int, stdin.readline().split()))\n    \n    # check if the condition is satisfied\n    for num in A:\n        if num % 2 == 0 and (num % 3!= 0 and num % 5!= 0):\n            return \"DENIED\"\n    return \"APPROVED\""
    },
    {
        "number": 4141,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    n = int(stdin.readline())\n    nums = list(map(int, stdin.readline().split()))\n\n    # check if all even numbers are divisible by 3 or 5\n    if all(num % 3 == 0 or num % 5 == 0 for num in nums if num % 2 == 0):\n        return \"APPROVED\"\n    else:\n        return \"DENIED\""
    },
    {
        "number": 4141,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    This function takes input as a string and returns the output as a string.\n    \"\"\"\n    # Convert input string to list of integers\n    n, arr = map(int, stdin.split())\n    # Check if all even numbers written on the document are divisible by 3 or 5\n    for i in arr:\n        if i % 2 == 0 and (i % 3!= 0 and i % 5!= 0):\n            return \"DENIED\"\n    return \"APPROVED\""
    },
    {
        "number": 4141,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Reading input\n    n = int(stdin.readline().strip())\n    nums = [int(x) for x in stdin.readline().strip().split()]\n\n    # Checking if all even numbers are divisible by 3 or 5\n    allowed = all(x % 3 == 0 or x % 5 == 0 for x in nums if x % 2 == 0)\n\n    # Outputting the result\n    return \"APPROVED\" if allowed else \"DENIED\""
    },
    {
        "number": 4141,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    numbers = [int(num) for num in stdin.readline().strip().split()]\n    even_nums = [num for num in numbers if num % 2 == 0]\n    divisible_nums = [num for num in even_nums if num % 3 == 0 or num % 5 == 0]\n    if len(divisible_nums) == n:\n        return \"APPROVED\"\n    else:\n        return \"DENIED\""
    },
    {
        "number": 4142,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Taking input\n    input_str = stdin.strip()\n\n    # Checking the length of input string\n    if len(input_str) % 2 == 0:\n        return \"No\"\n\n    # Checking if all odd positions are R, U or D and all even positions are L, U or D\n    for i in range(1, len(input_str), 2):\n        if input_str[i] not in ['R', 'U', 'D']:\n            return \"No\"\n    for i in range(0, len(input_str), 2):\n        if input_str[i] not in ['L', 'U', 'D']:\n            return \"No\"\n\n    # If all conditions are satisfied, return Yes\n    return \"Yes\""
    },
    {
        "number": 4142,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Takes a string `stdin` representing a Takahashi dance as input, and returns 'Yes' if the dance is easily playable, and 'No' otherwise.\n    \"\"\"\n    # Count the number of L, R, U, and D characters in each position.\n    counts = [0] * 100  # Maximum length of S is 100.\n    for i, c in enumerate(stdin):\n        if c in 'LRUD':\n            counts[i % 2] += 1 if i % 2 == 0 else -1  # Odd positions count L, even positions count R.\n    \n    # Check if each character in an odd position is R, U, or D, and each character in an even position is L, U, or D.\n    for i, c in enumerate(stdin):\n        if i % 2 == 0:  # Even position\n            if c not in 'LUD':\n                return 'No'\n        else:  # Odd position\n            if c not in 'RUD':\n                return 'No'\n    \n    # If we get here, all conditions are satisfied, so the dance is easily playable.\n    return 'Yes'"
    },
    {
        "number": 4142,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Split the input string into a list of characters\n    chars = list(stdin)\n\n    # Check if every character in an odd position (1-st, 3-rd, 5-th,...) is R, U, or D\n    odd_pos = [chars[i] for i in range(len(chars)) if i % 2 == 1]\n    if not all(char in ['R', 'U', 'D'] for char in odd_pos):\n        return \"No\"\n\n    # Check if every character in an even position (2-nd, 4-th, 6-th,...) is L, U, or D\n    even_pos = [chars[i] for i in range(len(chars)) if i % 2 == 0]\n    if not all(char in ['L', 'U', 'D'] for char in even_pos):\n        return \"No\"\n\n    # If both conditions are satisfied, S is easily playable\n    return \"Yes\""
    },
    {
        "number": 4142,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # parse the input\n    s = stdin.strip()\n\n    # check if the string is empty\n    if not s:\n        return 'No'\n\n    # check if the string has an even length\n    if len(s) % 2 == 0:\n        return 'No'\n\n    # check if all characters in the first half are R, U or D\n    first_half = s[:len(s)//2]\n    if any(c not in ['R', 'U', 'D'] for c in first_half):\n        return 'No'\n\n    # check if all characters in the second half are L, U or D\n    second_half = s[len(s)//2:]\n    if any(c not in ['L', 'U', 'D'] for c in second_half):\n        return 'No'\n\n    return 'Yes'"
    },
    {
        "number": 4142,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Initialize variables\n    playable = True\n    odd_pos_chars = ['R', 'U', 'D']\n    even_pos_chars = ['L', 'U', 'D']\n    # Iterate through string\n    for i, char in enumerate(stdin):\n        # Check if current position is odd or even\n        if i % 2 == 0:\n            # If current position is even, check if character is L, U, or D\n            if char not in even_pos_chars:\n                playable = False\n                break\n        else:\n            # If current position is odd, check if character is R, U, or D\n            if char not in odd_pos_chars:\n                playable = False\n                break\n    # Return Yes if string is easily playable, and No otherwise\n    if playable:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4142,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # convert input string to list of characters\n    S = list(stdin.strip())\n    \n    # check if each character in odd position is R, U, or D\n    for i in range(1, len(S), 2):\n        if S[i] not in ['R', 'U', 'D']:\n            return 'No'\n    \n    # check if each character in even position is L, U, or D\n    for i in range(0, len(S), 2):\n        if S[i] not in ['L', 'U', 'D']:\n            return 'No'\n    \n    return 'Yes'"
    },
    {
        "number": 4142,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    if len(S) % 2 == 1:\n        for i in range(1, len(S), 2):\n            if S[i] not in ['R', 'U', 'D']:\n                return \"No\"\n    else:\n        for i in range(0, len(S), 2):\n            if S[i] not in ['L', 'U', 'D']:\n                return \"No\"\n    return \"Yes\""
    },
    {
        "number": 4142,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    n = len(s)\n\n    # check if each character in an odd position is R, U, or D\n    odd_r_pos = [i for i in range(1, n, 2) if s[i] == 'R' or s[i] == 'U' or s[i] == 'D']\n    if len(odd_r_pos)!= (n+1)//2:\n        return \"No\"\n\n    # check if each character in an even position is L, U, or D\n    even_l_pos = [i for i in range(0, n, 2) if s[i] == 'L' or s[i] == 'U' or s[i] == 'D']\n    if len(even_l_pos)!= (n+1)//2:\n        return \"No\"\n\n    return \"Yes\""
    },
    {
        "number": 4142,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    odd_indices = [i for i in range(1, len(S), 2)]\n    even_indices = [i for i in range(0, len(S), 2)]\n    if not all(S[i] in ('R', 'U', 'D') for i in odd_indices) or not all(S[i] in ('L', 'U', 'D') for i in even_indices):\n        return \"No\"\n    return \"Yes\""
    },
    {
        "number": 4142,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    S = stdin.strip()\n\n    # check if S is easily playable\n    easily_playable = True\n    for i in range(1, len(S), 2):\n        if S[i] not in ['R', 'U', 'D']:\n            easily_playable = False\n            break\n    for i in range(0, len(S), 2):\n        if S[i] not in ['L', 'U', 'D']:\n            easily_playable = False\n            break\n\n    # print output\n    if easily_playable:\n        print('Yes')\n        print(f'Every character in an odd position (1-st, 3-rd, 5-th, 7-th) is R, U, or D.')\n        print(f'Every character in an even position (2-nd, 4-th, 6-th) is L, U, or D.')\n        print(f'Thus, {S} is easily playable.')\n    else:\n        print('No')\n\n    return ''"
    },
    {
        "number": 4143,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = int(stdin.readline().strip())\n    b = int(stdin.readline().strip())\n    c = int(stdin.readline().strip())\n    d = int(stdin.readline().strip())\n    e = int(stdin.readline().strip())\n\n    # find the minimum number of minutes required to get everyone to City 6\n    # using each vehicle in the order of Train, Bus, Taxi, Airplane, Ship\n    # A train can only occupy at most A people, B bus, C taxi, D airplane, E ship\n    # at each integer time (time 0, 1, 2,...), how many people can travel at that time?\n    # we can use a DP table to store the number of people that can reach City 6\n    # at each time step\n\n    # the DP table will be a 2D array of size (6, 1000000)\n    # the first dimension corresponds to each city (City 1 to 6)\n    # the second dimension corresponds to each time step (0 to 999999)\n    # the value at each time step and city will be the number of people that can reach City 6 at that time\n\n    dp = [[0] * 1000000 for _ in range(6)]\n\n    # set the initial condition for each city\n    dp[0][0] = n\n    dp[1][0] = min(n, a)\n    dp[2][0] = min(n, a + b)\n    dp[3][0] = min(n, a + b + c)\n    dp[4][0] = min(n, a + b + c + d)\n    dp[5][0] = min(n, a + b + c + d + e)\n\n    # iterate through all time steps (except the first one)\n    for i in range(1, 1000000):\n        # for each city, iterate through all possible vehicles (Train, Bus, Taxi, Airplane, Ship)\n        for j in range(1, 6):\n            dp[j][i] = dp[j][i-1]\n            # if a vehicle can reach the city at the current time step,\n            # add the number of people that can reach the city by that vehicle\n            # to the number of people that can reach the city at the previous time step\n            if i <= j:\n                dp[j][i] += dp[j-1][i-1]\n            else:\n                dp[j][i] += dp[j-1][i-j]\n\n    # return the minimum time required to get everyone to City 6\n    return str(dp[5][1000000-1])"
    },
    {
        "number": 4143,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    N, A, B, C, D, E = map(int, stdin.split())\n    \n    # compute the minimum time required to reach City 6 for each vehicle\n    time_by_train = N // A + (N % A > 0)\n    time_by_bus = N // B + (N % B > 0)\n    time_by_taxi = N // C + (N % C > 0)\n    time_by_airplane = N // D + (N % D > 0)\n    time_by_ship = N // E + (N % E > 0)\n    \n    # compute the minimum time required to reach City 6 for all vehicles\n    min_time = min(time_by_train, time_by_bus, time_by_taxi, time_by_airplane, time_by_ship)\n    \n    return str(min_time)"
    },
    {
        "number": 4143,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B, C, D, E = map(int, stdin.split())\n    time = 0\n    while True:\n        if time % 6 == 0:\n            return str(time // 6)\n        time += 1\n        if N == 0:\n            continue\n        N -= A\n        if N < 0:\n            N += A\n            time += 1\n        N -= B\n        if N < 0:\n            N += B\n            time += 1\n        N -= C\n        if N < 0:\n            N += C\n            time += 1\n        N -= D\n        if N < 0:\n            N += D\n            time += 1\n        N -= E\n        if N < 0:\n            N += E\n            time += 1\n        time += 1"
    },
    {
        "number": 4143,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    N, A, B, C, D, E = map(int, stdin.strip().split())\n\n    # calculate minimum time required\n    min_time = 0\n    for i in range(1, N+1):\n        # calculate time required for each person to reach the final city\n        train_time = (i - 1) // A + 1\n        bus_time = (i - 1) // B + 1 if i > B else 0\n        taxi_time = (i - 1) // C + 1 if i > C else 0\n        airplane_time = (i - 1) // D + 1 if i > D else 0\n        ship_time = (i - 1) // E + 1 if i > E else 0\n        min_time += max(train_time, bus_time, taxi_time, airplane_time, ship_time)\n\n    return str(min_time)\n\nprint(solution(input()))"
    },
    {
        "number": 4143,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, c, d, e = map(int, stdin.split())\n    # calculate the maximum number of people that each vehicle can transport\n    max_a = min(n, a)\n    max_b = min(n, b)\n    max_c = min(n, c)\n    max_d = min(n, d)\n    max_e = min(n, e)\n    \n    # calculate the minimum time required to reach each city\n    time_a = 0\n    time_b = 1\n    time_c = 2\n    time_d = 3\n    time_e = 4\n    time_6 = 5\n    \n    # calculate the time required to reach City 6 for each vehicle\n    time_required_a = (time_a + time_6) * max_a\n    time_required_b = (time_b + time_6) * max_b\n    time_required_c = (time_c + time_6) * max_c\n    time_required_d = (time_d + time_6) * max_d\n    time_required_e = (time_e + time_6) * max_e\n    \n    # calculate the minimum time required to reach City 6 for all vehicles\n    min_time_required = min(time_required_a, time_required_b, time_required_c, time_required_d, time_required_e)\n    \n    # calculate the minimum time required for all people to reach City 6\n    min_time_all = min_time_required + (n - (max_a + max_b + max_c + max_d + max_e)) * time_6\n    \n    return str(min_time_all)\n\nstdin = input()\nprint(solution(stdin))"
    },
    {
        "number": 4143,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    n, a, b, c, d, e = map(int, stdin.split())\n    \n    # compute minimum time required for all of the people to reach City 6\n    time = n * 6 + 1 # minimum time required\n    \n    # check for train\n    if a >= n:\n        time = min(time, 6)\n    else:\n        time = min(time, 6 + (n - a) // a) # minimum time required for all of the people to reach City 2 by train\n    \n    # check for bus\n    if b >= n - a:\n        time = min(time, 6 + a)\n    else:\n        time = min(time, 6 + a + (n - a - b) // b) # minimum time required for all of the people to reach City 3 by bus\n    \n    # check for taxi\n    if c >= n - a - b:\n        time = min(time, 6 + a + b)\n    else:\n        time = min(time, 6 + a + b + (n - a - b - c) // c) # minimum time required for all of the people to reach City 4 by taxi\n    \n    # check for airplane\n    if d >= n - a - b - c:\n        time = min(time, 6 + a + b + c)\n    else:\n        time = min(time, 6 + a + b + c + (n - a - b - c - d) // d) # minimum time required for all of the people to reach City 5 by airplane\n    \n    # check for ship\n    if e >= n - a - b - c - d:\n        time = min(time, 6 + a + b + c + d)\n    else:\n        time = min(time, 6 + a + b + c + d + (n - a - b - c - d - e) // e) # minimum time required for all of the people to reach City 6 by ship\n    \n    return str(time)"
    },
    {
        "number": 4143,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n = int(stdin.readline().strip())\n    a = int(stdin.readline().strip())\n    b = int(stdin.readline().strip())\n    c = int(stdin.readline().strip())\n    d = int(stdin.readline().strip())\n    e = int(stdin.readline().strip())\n\n    # calculate minimum time\n    min_time = 0\n    min_time += n // a * 1\n    n -= n // a * a\n    min_time += n // b * 1\n    n -= n // b * b\n    min_time += n // c * 1\n    n -= n // c * c\n    min_time += n // d * 1\n    n -= n // d * d\n    min_time += n // e * 1\n\n    # add the remaining people who do not have a vehicle\n    min_time += n\n\n    # print minimum time\n    return str(min_time)"
    },
    {
        "number": 4143,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N, A, B, C, D, E = map(int, stdin.split())\n    \n    # Calculate minimum time required for all of the people to reach City 6\n    # We can solve this problem using dynamic programming.\n    # dp[i][j] represents the minimum time required for the first i people to reach the j-th city.\n    dp = [[float('inf') for _ in range(7)] for _ in range(N+1)]\n    dp[0][1] = 0\n    for i in range(1, N+1):\n        for j in range(1, 7):\n            for k in range(1, j+1):\n                dp[i][j] = min(dp[i][j], dp[i-1][k] + (k == j-1) * (A if k == 1 else A+1) + (j > k+1) * (B if k == 2 else B+1) + (j > k+2) * (C if k == 3 else C+1) + (j > k+3) * (D if k == 4 else D+1) + (j > k+4) * (E if k == 5 else E+1))\n    \n    # The minimum time required is stored in dp[N][6]\n    return str(dp[N][6])"
    },
    {
        "number": 4143,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    N, A, B, C, D, E = map(int, stdin.split())\n    \n    # calculate the minimum time required for all people to reach City 6\n    # assuming they can travel only by train and bus\n    time = 0\n    people = N\n    while people > 0:\n        time += 1\n        people -= A\n        if people <= 0:\n            break\n        time += 1\n        people -= B\n        if people <= 0:\n            break\n        time += 1\n        people -= C\n        if people <= 0:\n            break\n        time += 1\n        people -= D\n        if people <= 0:\n            break\n        time += 1\n        people -= E\n        if people <= 0:\n            break\n    return str(time)"
    },
    {
        "number": 4143,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Reading input\n    n, a, b, c, d, e = map(int, stdin.strip().split())\n    \n    # Calculating the minimum time required for all of the people to reach City 6\n    time = n * 6 + 1\n    while time > 0:\n        # Train can only occupy at most A people\n        time -= a\n        \n        # Bus can only occupy at most B people\n        time -= b\n        \n        # Taxi can only occupy at most C people\n        time -= c\n        \n        # Airplane can only occupy at most D people\n        time -= d\n        \n        # Ship can only occupy at most E people\n        time -= e\n        \n        # If all people have reached City 6\n        if time <= 0:\n            return str(6 - (time + a + b + c + d + e))\n    \n    # All people have not reached City 6\n    return '-1'"
    },
    {
        "number": 4144,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    mod = 10**9 + 7\n    n = int(stdin.strip())\n\n    # base cases\n    if n == 1:\n        return \"2\"\n    elif n == 2:\n        return \"2\"\n\n    # count number of possible sequences\n    cnt = 1\n    for i in range(1, n):\n        cnt = (cnt * (i + 1) % mod * (n - i) % mod) // (i * (n - i - 1) % mod)\n\n    return str(cnt)\n\nprint(solution(input()))"
    },
    {
        "number": 4144,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    mod = int(1e9) + 7\n    n = int(stdin)\n    count = 0\n    for i in range(10):\n        for j in range(10):\n            if i == 0 and j == 0:\n                continue\n            elif i == 9 and j == 9:\n                continue\n            elif i == 0 or j == 0 or i == 9 or j == 9:\n                count += 1\n    return str((count * pow(9, n, mod)) % mod)\n\nstdin = input()\nprint(solution(stdin))"
    },
    {
        "number": 4144,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    mod = 10**9 + 7\n    count = 0\n    \n    # Checking for all possible sequences of length N\n    for i in range(10**N):\n        seq = [int(digit) for digit in str(i).zfill(N)]\n        if seq.count(0) > 0 and seq.count(9) > 0 and seq.index(0) < seq.index(9):\n            count += 1\n            \n    return str(count % mod)"
    },
    {
        "number": 4144,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N = int(stdin)\n\n    # Initialize result to 1\n    result = 1\n\n    # Check all possible sequences of length N\n    for i in range(1, 2**N):\n        # Convert binary representation to list of integers\n        seq = [int(digit) for digit in bin(i)[2:]]\n        # Pad sequence with zeros to length N\n        seq = seq + [0] * (N - len(seq))\n        # Check if sequence satisfies conditions\n        if 0 in seq and 9 in seq and seq.count(0) == seq.count(9) == 1:\n            result += 1\n\n    # Return result modulo 10^9 + 7\n    return str(result % (10**9 + 7))"
    },
    {
        "number": 4144,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n\n    # Initialize count of sequences\n    count = 0\n\n    # Loop through all possible values of A_i\n    for i in range(10):\n        # Initialize A_1, A_2,..., A_N as all zeros\n        A = [0] * n\n\n        # Set A_i to i\n        A[i] = i\n\n        # Check if A satisfies all conditions\n        if A[i] == 0 or A[i] == 9:\n            count += 1\n\n    # Output the count modulo 10^9 + 7\n    return str(count % (10**9 + 7))"
    },
    {
        "number": 4144,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    mod = 10**9 + 7\n    n = int(stdin.strip())\n    ans = 0\n    if n == 1:\n        return str(1)\n    for i in range(1, n//2+1):\n        ans = (ans + (n-i) * (10**(i-1)) * (9-i+1) * (10**(n-i-1)) * i) % mod\n    return str(ans)"
    },
    {
        "number": 4144,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    mod = 10**9 + 7\n    n = int(stdin.strip())\n    dp = [[0 for _ in range(10)] for _ in range(n+1)]\n    dp[0][0] = 1\n    for i in range(1, n+1):\n        for j in range(10):\n            if j == 0:\n                dp[i][j] = dp[i-1][j+1]\n            elif j == 9:\n                dp[i][j] = dp[i-1][j-1]\n            else:\n                dp[i][j] = (dp[i-1][j-1] + dp[i-1][j+1]) % mod\n    ans = 0\n    for i in range(10):\n        ans = (ans + dp[n][i]) % mod\n    return str(ans) + '\\n'"
    },
    {
        "number": 4144,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    mod = 10**9 + 7\n    n = int(stdin)\n    count = 0\n\n    for i in range(1, 2**n):\n        seq = [int(x) for x in bin(i)[2:]]\n        seq += [0] * (n - len(seq))\n\n        if 0 in seq:\n            if seq.count(0) == 1 and seq[seq.index(0)] == 0:\n                count += 1\n            else:\n                continue\n        if 9 in seq:\n            if seq.count(9) == 1 and seq[seq.index(9)] == 9:\n                count += 1\n            else:\n                continue\n        if all(seq[j] >= seq[j+1] for j in range(n-1)):\n            count += 1\n\n    return str(count % mod)"
    },
    {
        "number": 4144,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    MOD = 10**9 + 7\n    count = 0\n    for i in range(1, N+1):\n        if i == 1:\n            count += 1\n            continue\n        count += pow(10, i-1, MOD)\n        if i%2 == 0:\n            count += pow(10, i-2, MOD)\n        else:\n            count -= pow(10, i-2, MOD)\n    return str(count % MOD)"
    },
    {
        "number": 4144,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    MOD = 10**9 + 7\n\n    count = 0\n    for i in range(1, 10**N):\n        s = str(i)\n        if '0' in s or '9' in s:\n            continue\n\n        has_zero = False\n        has_nine = False\n        for j in range(len(s)):\n            if s[j] == '0':\n                has_zero = True\n            elif s[j] == '9':\n                has_nine = True\n            if has_zero and has_nine:\n                break\n        else:\n            count += 1\n\n    return str(count % MOD)\n"
    },
    {
        "number": 4145,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    count = 1\n    while True:\n        if is_prime(x + count):\n            return str(x + count)\n        count += 1\n\ndef"
    },
    {
        "number": 4145,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    i = X\n    while True:\n        is_prime = True\n        for j in range(2, int(i**0.5) + 1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            return str(i)\n        i += 1"
    },
    {
        "number": 4145,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin.strip())\n    if x == 1:\n        return str(2)\n    for i in range(x+1, 2*x):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            return str(i)\n    return \"No prime number found\""
    },
    {
        "number": 4145,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    i = X + 1\n    while True:\n        flag = 0\n        for j in range(2, i//2 + 1):\n            if i % j == 0:\n                flag = 1\n                break\n        if flag == 0 and is_prime(i):\n            return str(i)\n        i += 1\n\ndef"
    },
    {
        "number": 4145,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin.strip())\n    prime = False\n    n = X\n    while not prime:\n        for i in range(2, n):\n            if n % i == 0:\n                break\n        else:\n            prime = True\n        n += 1\n    return str(n)"
    },
    {
        "number": 4145,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Read input from stdin\n    X = int(stdin.strip())\n\n    # Initialize variables\n    is_prime = [True] * (X+1)\n    is_prime[0] = is_prime[1] = False\n    prime = []\n\n    # Iterate over numbers from 2 to X\n    for i in range(2, X+1):\n        # If the current number is prime, add it to the list of primes\n        if is_prime[i]:\n            prime.append(i)\n            # Mark all multiples of the current prime as non-prime\n            for j in range(i*i, X+1, i):\n                is_prime[j] = False\n\n    # Return the minimum prime greater than or equal to X\n    return str(prime[-1])"
    },
    {
        "number": 4145,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    num = X\n    while True:\n        for i in range(2, num):\n            if (num % i) == 0:\n                break\n        else:\n            return str(num)\n        num += 1"
    },
    {
        "number": 4145,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Read input from stdin\n    x = int(stdin.strip())\n    \n    # Initialize variables\n    num = x + 1\n    prime = True\n    \n    # Check if x is prime\n    while prime:\n        for i in range(2, num):\n            if num % i == 0:\n                prime = False\n                break\n        num += 1\n    \n    # Return the minimum prime number greater than or equal to x\n    return str(num - 1)"
    },
    {
        "number": 4145,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    prime = 2\n    while True:\n        is_prime = True\n        for i in range(2, int(prime**0.5)+1):\n            if prime % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            if prime >= x:\n                return str(prime)\n        prime += 1"
    },
    {
        "number": 4145,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Find the minimum prime number greater than or equal to X.\n    \"\"\"\n    x = int(stdin.readline().strip())\n    i = x + 1\n    while True:\n        if is_prime(i):\n            return str(i)\n        i += 1\n\ndef"
    },
    {
        "number": 4146,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    n, v = map(int, stdin.split())\n    seq = list(map(int, stdin.readline().strip().split()))\n    \n    # Check if sequence is /\\/\\/\\/\n    for i in range(n-2):\n        if seq[i]!= seq[i+2]:\n            return \"0\"\n    \n    # Find minimum number of elements to replace\n    count = 0\n    for i in range(n-2):\n        if seq[i] == seq[i+2]:\n            count += 1\n            if count == 2:\n                return \"2\"\n    \n    return \"1\""
    },
    {
        "number": 4146,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, sequence = map(int, stdin.split())\n    seq_list = list(map(int, stdin.readline().split()))\n    count = 0\n    for i in range(1, n - 1, 2):\n        if seq_list[i]!= seq_list[i + 2]:\n            count += 1\n    print(count)\n"
    },
    {
        "number": 4146,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    n = int(stdin.readline().strip())\n    v = list(map(int, stdin.readline().strip().split()))\n\n    # check if sequence is /\\/\\/\\\n    if v[0]!= v[2] or v[1]!= v[3]:\n        return '0'\n\n    # count number of elements to replace\n    count = 0\n    for i in range(2, n, 2):\n        if v[i]!= v[i+2]:\n            count += 1\n\n    # print result\n    return str(count)"
    },
    {
        "number": 4146,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # get input\n    n, *v = map(int, stdin.split())\n    \n    # check if the sequence is /\\/\\/\\/\n    for i in range(n-2):\n        if v[i]!= v[i+2]:\n            return \"0\"\n    \n    # count number of occurrences of each element\n    counts = {}\n    for i in v:\n        counts[i] = counts.get(i, 0) + 1\n    \n    # count number of different elements\n    num_diff = sum(1 for count in counts.values() if count == 1)\n    \n    # check if the number of different elements is exactly 2\n    if num_diff!= 2:\n        return \"0\"\n    \n    # return minimum number of elements to replace\n    return str(num_diff)"
    },
    {
        "number": 4146,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, *v = map(int, stdin.split())\n    count = 0\n    for i in range(n-1):\n        if v[i]!= v[i+2]:\n            count += 1\n    return str(count)\n\nstdin = \"4\\n3 1 3 2\"\nprint(solution(stdin)) # Output: 1"
    },
    {
        "number": 4146,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    v = list(map(int, stdin.readline().strip().split()))\n\n    # check if the sequence is already /\\/\\/\\/\n    if len(set(v[2::3])) == 1:\n        return '0'\n\n    # find the index of the first occurrence of the second element\n    idx = 2\n    while v[idx]!= v[2]:\n        idx += 3\n\n    # find the index of the second occurrence of the second element\n    idx2 = 2\n    while v[idx2]!= v[2] and idx2!= idx:\n        idx2 += 3\n\n    # check if there are only two different numbers in the sequence\n    if idx2 == idx or v[idx2] == v[idx+3]:\n        return '0'\n\n    # calculate the minimum number of elements that needs to be replaced\n    if idx == 2:\n        return '1'\n    else:\n        return '2'"
    },
    {
        "number": 4146,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    v = list(map(int, stdin.readline().strip().split()))\n\n    count = 0\n    for i in range(n-3):\n        if v[i] == v[i+2]:\n            count += 1\n    if count == 0 or count == 2:\n        print(n)\n        return\n    if count == 1:\n        v[v.index(v[n-1])] = v[n-3]\n        count = 0\n        for i in range(n-3):\n            if v[i] == v[i+2]:\n                count += 1\n        if count == 1:\n            print(n-1)\n            return\n    v[v.index(v[n-1])] = v[n-3]\n    count = 0\n    for i in range(n-3):\n        if v[i] == v[i+2]:\n            count += 1\n    if count == 1:\n        print(n-1)\n        return\n    v[v.index(v[n-1])] = v[n-3]\n    count = 0\n    for i in range(n-3):\n        if v[i] == v[i+2]:\n            count += 1\n    if count == 1:\n        print(n-1)\n        return\n    v[v.index(v[n-1])] = v[n-3]\n    count = 0\n    for i in range(n-3):\n        if v[i] == v[i+2]:\n            count += 1\n    if count == 1:\n        print(n-1)\n        return\n    v[v.index(v[n-1])] = v[n-3]\n    count = 0\n    for i in range(n-3):\n        if v[i] == v[i+2]:\n            count += 1\n    if count == 1:\n        print(n-1)\n        return\n    v[v.index(v[n-1])] = v[n-3]\n    count = 0\n    for i in range(n-3):\n        if v[i] == v[i+2]:\n            count += 1\n    if count == 1:\n        print(n-1)\n        return\n    v[v.index(v[n-1])] = v[n-3]\n    count = 0\n    for i in range(n-3):\n        if v[i] == v[i+2]:\n            count += 1\n    if count == 1:\n        print(n-1)\n        return\n    v[v.index(v[n-1])] = v[n-3]\n    count = 0\n    for i in range(n-3):\n        if v[i] == v[i+2]:\n            count += 1\n    if count == 1:\n        print(n-1)\n        return\n    v[v.index(v[n-1])] = v[n-3]\n    count = 0\n    for i in range(n-3):\n        if v[i] == v[i+2]:\n            count += 1\n    if count == 1:\n        print(n-1)\n        return\n    v[v.index(v[n-1])] = v[n-3]\n    count = 0\n    for i in range(n-3):\n        if v[i] == v[i+2]:\n            count += 1\n    if count == 1:\n        print(n-1)\n        return\n    print(0)"
    },
    {
        "number": 4146,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    n = int(stdin.readline())\n    v = list(map(int, stdin.readline().split()))\n\n    # check if sequence is /\\/\\/\\/\n    count = 0\n    for i in range(2, n):\n        if v[i] == v[i+2]:\n            count += 1\n            if count == 2:\n                break\n    else:\n        # sequence is not /\\/\\/\\/\n        print(n-2)\n        return\n\n    # sequence is /\\/\\/\\/\n    # replace at most n-2 elements\n    print(n-2)\n    return"
    },
    {
        "number": 4146,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, *v = map(int, stdin.split())\n    count = 0\n    for i in range(n-1):\n        if v[i] == v[i+2]:\n            count += 1\n    if count == 2:\n        return str(n-2)\n    elif count == 0:\n        return \"0\"\n    else:\n        return str(n-4)\n\nprint(solution(input()))"
    },
    {
        "number": 4146,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, sequence = map(int, stdin.split())\n    sequence_set = set(sequence)\n    if len(sequence_set)!= 2:\n        return \"0\"\n    for i in range(n-2):\n        if sequence[i]!= sequence[i+2]:\n            return \"2\"\n    return \"1\""
    },
    {
        "number": 4147,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split(\"\\n\")\n    N, A, B, C = map(int, lines[0].split())\n    bamboos = list(map(int, lines[1:]))\n\n    # Sort bamboos in decreasing order\n    bamboos.sort(reverse=True)\n\n    # Initialize variables\n    mp_consumed = 0\n    bamboos_used = 0\n    length_of_new_bamboos = 0\n\n    # Use Extension Magic to obtain bamboos of length A\n    while bamboos_used < N and bamboos[-1] < A:\n        bamboos[-1] += 1\n        mp_consumed += 1\n        bamboos_used += 1\n\n    # Use Shortening Magic to obtain bamboos of length B\n    for i in range(N):\n        if bamboos[i] > 1 and bamboos[i] < B:\n            bamboos[i] -= 1\n            mp_consumed += 1\n            bamboos_used += 1\n            break\n\n    # Use Composition Magic to obtain bamboos of length C\n    for i in range(N-1):\n        if bamboos[i] + bamboos[i+1] == C:\n            length_of_new_bamboos = C\n            mp_consumed += 10\n            bamboos[i] += bamboos[i+1]\n            bamboos.pop(i+1)\n            bamboos_used += 2\n            break\n\n    # Use Extension Magic to obtain bamboos of length C\n    while length_of_new_bamboos!= C and bamboos_used < N:\n        for i in range(N):\n            if bamboos[i] == length_of_new_bamboos:\n                bamboos[i] += 1\n                mp_consumed += 1\n                bamboos_used += 1\n                break\n\n    return str(mp_consumed)\n\ndef"
    },
    {
        "number": 4147,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    N, A, B, C = map(int, stdin.split())\n    ls = list(map(int, stdin.split()))\n\n    # initialize variables\n    mp = 0\n    used = [False] * N\n\n    # use extension magic on the shortest bamboo\n    mp += 1\n    shortest = min(enumerate(ls), key=lambda x: x[1])[0]\n    ls[shortest] += 1\n    used[shortest] = True\n\n    # use extension magic on the remaining bamboos to reach A\n    while sum(ls[:A-1]) < A:\n        mp += 1\n        for i in range(N):\n            if not used[i] and ls[i] >= 1:\n                ls[i] += 1\n                used[i] = True\n                break\n\n    # use shortening magic to obtain a bamboo of length B\n    mp += 1\n    for i in range(N):\n        if not used[i] and ls[i] >= 2 and ls[i] > B:\n            ls[i] -= 1\n            used[i] = True\n            break\n\n    # use composition magic to obtain a bamboo of length C\n    mp += 10\n    for i in range(N):\n        if not used[i] and ls[i] >= 1:\n            j = (i+1) % N\n            if not used[j] and ls[j] >= 1:\n                ls[i] += ls[j]\n                ls[j] = 0\n                used[i] = True\n                used[j] = True\n                break\n\n    # print mp\n    return str(mp)\n\ndef"
    },
    {
        "number": 4147,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N, A, B, C = map(int, stdin.readline().strip().split())\n    lengths = list(map(int, stdin.readline().strip().split()))\n    \n    # Initialize variables\n    mp_used = 0\n    bamboos = lengths.copy()\n    \n    # Sort bamboos in decreasing order\n    bamboos.sort(reverse=True)\n    \n    # Try all possible combinations of bamboos to obtain A, B, C\n    for i in range(N):\n        for j in range(i+1, N):\n            for k in range(j+1, N):\n                # Check if the sum of the lengths equals A, B, C\n                if bamboos[i] + bamboos[j] + bamboos[k] == A and bamboos[k] <= B and bamboos[j] <= C:\n                    # Use Extension Magic twice on the bamboo of length 98 to obtain a bamboo of length 100\n                    if bamboos[i] == 98:\n                        mp_used += 2\n                        bamboos[i] = 100\n                    # Use Composition Magic on the bamboos of lengths 40, 30 to obtain a bamboo of length 70\n                    elif bamboos[i] == 40 and bamboos[j] == 30:\n                        mp_used += 10\n                        bamboos[k] = 70\n                        bamboos.pop(j)\n                    # Use Shortening Magic once on the bamboo of length 21 to obtain a bamboo of length 20\n                    elif bamboos[k] == 21:\n                        mp_used += 1\n                        bamboos[k] = 20\n                    # Use Composition Magic on the bamboo of length 70 obtained in step 2 and the bamboo of length 20 obtained in step 3 to obtain a bamboo of length 90\n                    elif bamboos[k] == 70 and bamboos[j] == 20:\n                        mp_used += 10\n                        bamboos.pop(i)\n                        bamboos.pop(j)\n                        bamboos.append(90)\n                        bamboos.sort(reverse=True)\n                        break\n                    # If we use all possible magics, we break out of the loop\n                    if mp_used == 23:\n                        break\n            if mp_used == 23:\n                break\n        if mp_used == 23:\n            break\n    \n    # Return the minimum MP needed\n    return str(mp_used)"
    },
    {
        "number": 4147,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    N, A, B, C = map(int, stdin.readline().split())\n    lengths = list(map(int, stdin.readline().split()))\n\n    # sort lengths in descending order\n    lengths.sort(reverse=True)\n\n    # initialize variables\n    mp = 0\n    bamboos = list(lengths)\n\n    # use Extension Magic twice on the bamboo of length 98 to obtain a bamboo of length 100\n    while lengths and lengths[-1] == 98:\n        lengths.pop()\n        bamboos.pop()\n        mp += 2\n\n    # use Composition Magic on the bamboos of lengths 40, 30 to obtain a bamboo of length 70\n    while lengths and lengths[-1] + lengths[-2] <= 70:\n        bamboos.pop()\n        lengths.pop()\n        bamboos.pop()\n        lengths.pop()\n        bamboos.append(lengths[-1] + lengths[-2])\n        lengths.append(lengths[-1] + lengths[-2])\n        mp += 10\n\n    # use Shortening Magic once on the bamboo of length 21 to obtain a bamboo of length 20\n    if 21 in lengths:\n        index = lengths.index(21)\n        bamboos[index] = 20\n        mp += 1\n\n    # use Composition Magic on the bamboo of length 70 obtained in step 2 and the bamboo of length 20 obtained in step 3 to obtain a bamboo of length 90\n    while lengths and lengths[-1] + lengths[-2] <= 90:\n        bamboos.pop()\n        lengths.pop()\n        bamboos.pop()\n        lengths.pop()\n        bamboos.append(lengths[-1] + lengths[-2])\n        lengths.append(lengths[-1] + lengths[-2])\n        mp += 10\n\n    # use Extension Magic twice on the bamboo of length 100 obtained in step 1 to obtain a bamboo of length 100\n    while lengths and lengths[-1] == 100:\n        lengths.pop()\n        bamboos.pop()\n        mp += 2\n\n    # use Composition Magic on the bamboos of lengths 90, 80 to obtain a bamboo of length 170\n    while lengths and lengths[-1] + lengths[-2] <= 170:\n        bamboos.pop()\n        lengths.pop()\n        bamboos.pop()\n        lengths.pop()\n        bamboos.append(lengths[-1] + lengths[-2])\n        lengths.append(lengths[-1] + lengths[-2])\n        mp += 10\n\n    # check if there are any bamboos left\n    if lengths:\n        return \"IMPOSSIBLE\"\n\n    # check if the lengths of the obtained bamboos are equal to A, B, and C\n    if bamboos[0]!= A or bamboos[1]!= B or bamboos[2]!= C:\n        return \"IMPOSSIBLE\"\n\n    return str(mp)\n"
    },
    {
        "number": 4147,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    bamboos = list(map(int, stdin.strip().split()))\n    n = bamboos[0]\n    a, b, c = bamboos[1:4]\n    lengths = bamboos[4:]\n\n    # calculate MP needed\n    mp_needed = 0\n\n    # use extension magic twice on bamboo of length 98 to obtain bamboos of length 100\n    if lengths[0] == 98:\n        mp_needed += 2\n        lengths[0] = 100\n\n    # use composition magic on bamboos of lengths 40, 30 to obtain bamboos of length 70\n    if lengths[1] == 40 and lengths[2] == 30:\n        mp_needed += 10\n        lengths[1] = lengths[1] + lengths[2]\n        lengths.pop(2)\n\n    # use shortening magic once on bamboo of length 21 to obtain bamboos of length 20\n    if lengths[3] >= 22:\n        mp_needed += 1\n        lengths[3] -= 1\n\n    # use composition magic on bamboos of length 70 and 20 to obtain bamboos of length 90\n    if lengths[1] == 70 and lengths[4] == 20:\n        mp_needed += 10\n        lengths[1] = lengths[1] + lengths[4]\n        lengths.pop(4)\n\n    # calculate MP needed for bamboos of length A, B, C\n    if lengths[0] == a and lengths[1] == b and lengths[2] == c:\n        pass\n    else:\n        mp_needed += 10\n        lengths[0] = a\n        lengths[1] = b\n        lengths[2] = c\n\n    # calculate MP needed for bamboos of length A, B, C (again)\n    if lengths[0] == a and lengths[1] == b and lengths[2] == c:\n        pass\n    else:\n        mp_needed += 10\n        lengths[0] = a\n        lengths[1] = b\n        lengths[2] = c\n\n    # calculate MP needed for bamboos of length A, B, C (one more time)\n    if lengths[0] == a and lengths[1] == b and lengths[2] == c:\n        pass\n    else:\n        mp_needed += 10\n        lengths[0] = a\n        lengths[1] = b\n        lengths[2] = c\n\n    # return MP needed\n    return str(mp_needed)"
    },
    {
        "number": 4147,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B, C = map(int, stdin.split())\n    bamboos = list(map(int, stdin.split()))\n\n    mp_needed = 0\n\n    # Use Extension Magic twice on the bamboo of length 98 to obtain a bamboo of length 100.\n    mp_needed += 2\n    bamboos[bamboos.index(98)] += 1\n\n    # Use Composition Magic on the bamboos of lengths 40, 30 to obtain a bamboo of length 70.\n    mp_needed += 10\n    bamboos.append(40 + 30)\n    bamboos.remove(40)\n    bamboos.remove(30)\n\n    # Use Shortening Magic once on the bamboo of length 21 to obtain a bamboo of length 20.\n    mp_needed += 1\n    bamboos[bamboos.index(21)] -= 1\n\n    # Use Composition Magic on the bamboo of length 70 obtained in step 2 and the bamboo of length 20 obtained in step 3 to obtain a bamboo of length 90.\n    mp_needed += 10\n    bamboos.append(70 + 20)\n    bamboos.remove(70)\n    bamboos.remove(20)\n\n    # Use Composition Magic on the bamboos of lengths 100, 90, 80 to obtain a bamboo of length A, B, C.\n    mp_needed += 10\n    bamboos.append(100 + 90 + 80)\n    bamboos.remove(100)\n    bamboos.remove(90)\n    bamboos.remove(80)\n\n    # Use Extension Magic on the bamboo of length A to obtain a bamboo of length B.\n    mp_needed += 1\n    bamboos[bamboos.index(A)] += 1\n\n    # Use Shortening Magic on the bamboo of length B to obtain a bamboo of length C.\n    mp_needed += 1\n    bamboos[bamboos.index(B)] -= 1\n\n    return str(mp_needed)"
    },
    {
        "number": 4147,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B, C = map(int, stdin.split()[:4])\n    bamboos = list(map(int, stdin.split()[4:]))\n    mp = 0\n    \n    # Extension Magic\n    for i in range(len(bamboos)):\n        if bamboos[i] < C and bamboos[i] + 1 == C:\n            mp += 1\n            bamboos[i] += 1\n    \n    # Shortening Magic\n    for i in range(len(bamboos)):\n        if bamboos[i] > B and bamboos[i] - 1 == B:\n            mp += 1\n            bamboos[i] -= 1\n    \n    # Composition Magic\n    for i in range(len(bamboos)):\n        for j in range(i+1, len(bamboos)):\n            if bamboos[i] + bamboos[j] == A and bamboos[i] + bamboos[j]!= C:\n                mp += 10\n                bamboos[i] = C\n                break\n    \n    return str(mp)\n\ndef"
    },
    {
        "number": 4147,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, c = map(int, stdin.strip().split())\n    ls = list(map(int, stdin.strip().split()))\n    mp = 0\n\n    # extension magic for a bamboo of length a\n    for i in range(n):\n        if ls[i] == a:\n            mp += 2\n            break\n\n    # composition magic for bamboos of lengths b, c\n    for i in range(n):\n        if ls[i] == b or ls[i] == c:\n            mp += 10\n            ls[i] = 0\n            break\n\n    # shortening magic for a bamboo of length c\n    for i in range(n):\n        if ls[i] >= 2 and ls[i] <= c:\n            mp += 1\n            ls[i] -= 1\n            break\n\n    # composition magic for bamboos of lengths a, c\n    for i in range(n):\n        if ls[i] == a or ls[i] == c:\n            mp += 10\n            ls[i] = 0\n            break\n\n    return str(mp)"
    },
    {
        "number": 4147,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, c = map(int, stdin.split())\n    ls = list(map(int, stdin.split()))\n    if a + b + c!= 1000 or any(l > 1000 for l in ls):\n        return \"Invalid input\"\n    mp = 0\n    ls.sort()\n    i = 0\n    while i < len(ls):\n        if ls[i] == a:\n            if i > 0 and ls[i-1] == a and i < len(ls)-1 and ls[i+1] == a:\n                return \"Impossible\"\n            mp += 2\n            i += 1\n            ls[i] += 1\n        elif ls[i] >= b:\n            mp += 10\n            i += 2\n            ls[i-1] = ls[i-1] + ls[i]\n            ls.pop(i)\n        elif ls[i] >= 2*c:\n            mp += 1\n            ls[i] -= 1\n            mp += (i+1)*10\n            i += 1\n        else:\n            return \"Impossible\"\n    return str(mp)\n\nstdin = input()\nprint(solution(stdin))"
    },
    {
        "number": 4147,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N, A, B, C = map(int, stdin.split())\n    bamboos = list(map(int, stdin.split()))\n\n    # Initialize variables\n    mp = 0\n\n    # Compute the minimum MP needed to obtain bamboos of length A, B, and C\n    while True:\n        # Check if we have enough bamboos to obtain the target lengths\n        if any(l >= A for l in bamboos) and any(l >= B for l in bamboos) and any(l >= C for l in bamboos):\n            break\n\n        # Use Extension Magic on the bamboos of length at least 1\n        mp += sum(1 for l in bamboos if l >= 1)\n        for i, l in enumerate(bamboos):\n            if l >= 1:\n                bamboos[i] += 1\n\n        # Use Shortening Magic on the bamboos of length at least 2\n        mp += sum(1 for l in bamboos if l >= 2)\n        for i, l in enumerate(bamboos):\n            if l >= 2:\n                bamboos[i] -= 1\n\n        # Use Composition Magic on the bamboos of length at least 1\n        mp += sum(10 for l in bamboos if l >= 1)\n        i = 0\n        while i < len(bamboos):\n            if bamboos[i] >= 1:\n                j = i + 1\n                while j < len(bamboos) and bamboos[j] >= 1:\n                    j += 1\n                if j < len(bamboos):\n                    bamboos[i] += bamboos[j]\n                    del bamboos[j]\n                else:\n                    i += 1\n            else:\n                i += 1\n\n    # Compute the total MP needed to obtain the target lengths\n    while True:\n        # Check if we have enough bamboos to obtain the target lengths\n        if any(l >= A for l in bamboos) and any(l >= B for l in bamboos) and any(l >= C for l in bamboos):\n            break\n\n        # Use Extension Magic on the bamboos of length at least 1\n        mp += sum(1 for l in bamboos if l >= 1)\n        for i, l in enumerate(bamboos):\n            if l >= 1:\n                bamboos[i] += 1\n\n        # Use Shortening Magic on the bamboos of length at least 2\n        mp += sum(1 for l in bamboos if l >= 2)\n        for i, l in enumerate(bamboos):\n            if l >= 2:\n                bamboos[i] -= 1\n\n        # Use Composition Magic on the bamboos of length at least 1\n        mp += sum(10 for l in bamboos if l >= 1)\n        i = 0\n        while i < len(bamboos):\n            if bamboos[i] >= 1:\n                j = i + 1\n                while j < len(bamboos) and bamboos[j] >= 1:\n                    j += 1\n                if j < len(bamboos):\n                    bamboos[i] += bamboos[j]\n                    del bamboos[j]\n                else:\n                    i += 1\n            else:\n                i += 1\n\n    # Compute the MP needed to obtain the target lengths\n    while True:\n        # Check if we have enough bamboos to obtain the target lengths\n        if any(l >= A for l in bamboos) and any(l >= B for l in bamboos) and any(l >= C for l in bamboos):\n            break\n\n        # Use Extension Magic on the bamboos of length at least 1\n        mp += sum(1 for l in bamboos if l >= 1)\n        for i, l in enumerate(bamboos):\n            if l >= 1:\n                bamboos[i] += 1\n\n        # Use Shortening Magic on the bamboos of length at least 2\n        mp += sum(1 for l in bamboos if l >= 2)\n        for i, l in enumerate(bamboos):\n            if l >= 2:\n                bamboos[i] -= 1\n\n        # Use Composition Magic on the bamboos of length at least 1\n        mp += sum(10 for l in bamboos if l >= 1)"
    },
    {
        "number": 4148,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    \n    # shift each character of s by n in alphabetical order\n    s = ''.join(chr((ord(c) - 65 + n) % 26 + 65) if c.isupper() else c for c in s)\n    \n    return s"
    },
    {
        "number": 4148,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(str, stdin.strip().split('\\n'))\n    n = int(n)\n    result = ''\n    for c in s:\n        if c == 'Z':\n            result += 'A'\n        else:\n            result += chr(ord(c) + n)\n    return result"
    },
    {
        "number": 4148,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    alphabets = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    shifted_alphabets = alphabets[n:] + alphabets[:n]\n    mapping = {c: shifted_alphabets[i] for i, c in enumerate(alphabets)}\n    shifted_s = \"\".join(mapping.get(c, c) for c in s)\n    return shifted_s\n"
    },
    {
        "number": 4148,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, s = stdin.strip().split()\n    n = int(n)\n    s = s.upper()\n    sorted_s = sorted(s)\n    shifted_s = \"\"\n    for char in sorted_s:\n        shifted_char = chr((ord(char) - ord('A') + n) % 26 + ord('A'))\n        shifted_s += shifted_char\n    return shifted_s\n\nprint(solution(input()))"
    },
    {
        "number": 4148,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    N = int(stdin.readline().strip())\n    S = stdin.readline().strip()\n    \n    # shift each character by N in alphabetical order\n    result = \"\"\n    for c in S:\n        if c.isalpha():\n            shifted_c = chr((ord(c) - 65 + N) % 26 + 65)\n            result += shifted_c\n        else:\n            result += c\n    \n    return result"
    },
    {
        "number": 4148,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, s = stdin.strip().split()\n    n = int(n)\n    s = list(s)\n    s.sort(key=lambda x: ord(x) + n if x!= 'Z' else ord('A'))\n    return ''.join(s)"
    },
    {
        "number": 4148,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(str.strip, stdin.split())\n    n = int(n)\n    s = list(s)\n    s.sort()\n    result = \"\"\n    for c in s:\n        index = ord(c) - ord('A')\n        new_index = (index + n) % 26\n        result += chr(ord('A') + new_index)\n    return result"
    },
    {
        "number": 4148,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, s = stdin.split()\n    n = int(n)\n    s = list(s)\n    for i in range(len(s)):\n        if s[i].islower():\n            s[i] = chr((ord(s[i]) - ord('a') + n) % 26 + ord('a'))\n        else:\n            s[i] = chr((ord(s[i]) - ord('A') + n) % 26 + ord('A'))\n    return ''.join(s)"
    },
    {
        "number": 4148,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, S = stdin.strip().split()\n    N = int(N)\n    res = ''\n    for c in S:\n        if c == 'Z':\n            res += 'A'\n        else:\n            res += chr(ord(c) + N)\n    return res"
    },
    {
        "number": 4148,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, S = stdin.split('\\n')\n    N = int(N)\n    res = ''\n    for c in sorted(S):\n        if c == 'Z':\n            res += 'A'\n        else:\n            res += chr(ord(c) + N)\n    return res\n\ndef"
    },
    {
        "number": 4149,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    b = list(map(int, stdin.strip().split()[1:]))\n    a = []\n    for i in range(n):\n        if is_prime(b[i]):\n            a.append(next(p for p in count(2) if is_prime(p)))\n        else:\n            d = b[i]\n            for j in range(2, b[i]):\n                if b[i] % j == 0 and j!= d:\n                    d = j\n            a.append(d)\n    return''.join(map(str, a))\n\ndef"
    },
    {
        "number": 4149,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    b = list(map(int, stdin.split()[1:]))\n    a = []\n    for i in range(n):\n        if is_prime(b[2*i]):\n            p = 2\n            while not is_prime(p):\n                p = next_prime(p)\n            a.append(p)\n        else:\n            a.append(max(d for d in range(2, b[2*i]) if b[2*i] % d!= 0))\n    a.extend(b[n:])\n    return''.join(map(str, a))\n\ndef"
    },
    {
        "number": 4149,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    b = list(map(int, stdin.split()))\n    a = []\n    for i in range(n):\n        if b[i] <= 2:\n            a.append(b[i])\n        else:\n            p = 2\n            while True:\n                if p > b[i] // 2:\n                    a.append(b[i])\n                    break\n                if all(b[i] % j!= 0 for j in range(2, int(p**0.5)+1)):\n                    a.append(p)\n                    break\n                p += 1\n    return''.join(map(str, a))"
    },
    {
        "number": 4149,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    b = list(map(int, stdin.split()))\n    \n    a = []\n    for i in range(n):\n        if i%2 == 0:\n            a.append(b[i//2])\n        else:\n            if is_prime(b[i//2]):\n                a.append(find_next_prime(a[-1]))\n            else:\n                a.append(max(j for j in range(b[i//2], 1, -1) if b[i//2] % j!= 0))\n    \n    print(*a)\n    return \"\"\n\ndef"
    },
    {
        "number": 4149,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    b = [int(x) for x in stdin.split()[1:]]\n    \n    # Step 1: create b'\n    b_ = b.copy()\n    for i in range(n):\n        if b_[i] in primes:\n            p_i = b_[i]\n            for j in range(primes.index(p_i) + 1, len(primes)):\n                b_.append(primes[j])\n        else:\n            d = max(x for x in range(2, b_[i]) if b_[i] % x == 0)\n            b_.append(d)\n            \n    # Step 2: shuffle b' and take first n elements to create a\n    import random\n    random.shuffle(b_)\n    a = b_[:n]\n    \n    # Step 3: print a\n    return''.join(str(x) for x in a)\n\n\nprimes = [2]\nn = 1\nwhile primes[-1] <= 2750131:\n    if all(primes[j] % primes[i]!= 0 for i in range(len(primes)) for j in range(i)):\n        primes.append(primes[-1] + 1)\n        n += 1\n\nstdin =''.join(str(x) for x in primes)\nprint(solution(stdin)) # Output: 199999 199998 199997 199996 199995 199994 199993 199992 199991 199990"
    },
    {
        "number": 4149,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    b = list(map(int, stdin.split()))\n\n    def is_prime(n: int) -> bool:\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    a = []\n    for i in range(n):\n        if is_prime(b[i]):\n            a.append(b[i])\n            for j in range(b[i]):\n                a.append(j + 2)\n        else:\n            for j in range(2, b[i] + 1):\n                if b[i] % j == 0 and j!= b[i]:\n                    a.append(j)\n                    break\n\n    return''.join(map(str, a))\n\nprint(solution(input())) # python"
    },
    {
        "number": 4149,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solves the problem by finding all possible values of `a` that can form the given `b`.\n    \"\"\"\n    n = int(stdin.split()[0])\n    b = [int(x) for x in stdin.split()[1:]]\n    \n    # All values of `a` can be either a prime number or a non-prime number with a non-prime factor.\n    # Find all prime numbers up to 2750131.\n    primes = []\n    for i in range(2, 2750132):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    \n    # Find all possible values of `a`.\n    a_values = set()\n    for i in range(n):\n        if b[i] in primes:\n            a_values.add(primes[primes.index(b[i])])\n        else:\n            for j in range(len(primes)):\n                if b[i] % primes[j] == 0:\n                    a_values.add(primes[j])\n                    break\n            if b[i] not in a_values:\n                a_values.add(b[i])\n    \n    # Convert `a_values` to a list and return it.\n    a = list(a_values)\n    a.sort()\n    return \" \".join(str(x) for x in a)\n\nstdin = input()\nprint(solution(stdin))"
    },
    {
        "number": 4149,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    b = list(map(int, stdin.split()[1:]))\n    a = []\n    for i in range(n):\n        if b[i] in [2, 3, 5]:\n            a.append(b[i])\n        else:\n            for j in range(2, b[i]+1):\n                if b[i] % j == 0:\n                    a.append(j)\n                    break\n            else:\n                a.append(b[i])\n    a.sort()\n    return''.join(map(str, a))"
    },
    {
        "number": 4149,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    b = stdin.split()[1:]\n    a = []\n    for i in range(n):\n        if int(b[i]) in [2, 3, 5]:\n            a.append(int(b[i]))\n        else:\n            for j in range(2, int(b[i])):\n                if b[i] % j == 0 and j in [2, 3, 5]:\n                    a.append(j)\n                    break\n    a += a\n    a = [int(i) for i in a]\n    return''.join(map(str, a[:n]))\n\ndef"
    },
    {
        "number": 4149,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    b = list(map(int, stdin.split()))\n    a = [0] * n\n    for i in range(n):\n        if is_prime(b[i]):\n            a[i] = next(primes)\n        else:\n            a[i] = find_divisor(b[i])\n    return''.join(map(str, a))\n\ndef"
    },
    {
        "number": 4150,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.splitlines()[0].split())\n    a = list(map(int, stdin.splitlines()[1].split()))\n\n    first_team = []\n    second_team = []\n\n    while a:\n        max_skill = max(a)\n        left_closest = [i for i in a if i < max_skill]\n        right_closest = [i for i in a if i > max_skill]\n\n        chosen = left_closest[:k] + [max_skill] + right_closest[:k]\n\n        for skill in chosen:\n            a.remove(skill)\n\n        if not first_team:\n            first_team = chosen\n        else:\n            second_team = chosen\n\n    return ''.join(map(str, [1 if i in first_team else 2 for i in range(1, n+1)]))\n"
    },
    {
        "number": 4150,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:]))\n\n    # Initialize the teams\n    team1 = []\n    team2 = []\n\n    # Sort the array and find the median index\n    a = sorted(a)\n    mid = len(a) // 2\n\n    # Initialize the first team with the closest students to the median\n    team1.append(a[0])\n    for i in range(1, k + 1):\n        team1.append(a[i])\n    if len(a) % 2 == 0:\n        team1.append(a[mid])\n\n    # Initialize the second team with the closest students to the median\n    team2.append(a[-1])\n    for i in range(1, k + 1):\n        team2.append(a[-i - 1])\n    if len(a) % 2 == 1:\n        team2.append(a[mid])\n\n    # Move the rest of the students\n    for i in range(mid + 1, n):\n        if i <= k:\n            team1.append(a[i])\n        elif i > len(a) - k - 1:\n            team2.append(a[i])\n        else:\n            if a[i] <= team1[0]:\n                team1.insert(0, a[i])\n            elif a[i] >= team1[-1]:\n                team1.append(a[i])\n            elif a[i] - team1[0] <= team1[-1] - a[i]:\n                team1.insert(0, a[i])\n            else:\n                team1.append(a[i])\n\n            if a[i] <= team2[0]:\n                team2.insert(0, a[i])\n            elif a[i] >= team2[-1]:\n                team2.append(a[i])\n            elif a[i] - team2[0] <= team2[-1] - a[i]:\n                team2.insert(0, a[i])\n            else:\n                team2.append(a[i])\n\n    # Create the output string\n    output = \"\"\n    for i in range(n):\n        if a[i] in team1:\n            output += \"1\"\n        else:\n            output += \"2\"\n\n    return output\n"
    },
    {
        "number": 4150,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    left = {i: [] for i in range(n)}\n    right = {i: [] for i in range(n)}\n    for i in range(n):\n        left[a[i]-1].append(i)\n        right[a[i]].append(i)\n    team1 = [0]*n\n    team2 = [0]*n\n    team1[0] = max(left[0], key=lambda x: a[x])\n    team2[0] = max(right[1], key=lambda x: a[x])\n    for i in range(1, n):\n        team1[i] = max(left[i], key=lambda x: a[x])\n        team2[i] = max(right[i], key=lambda x: a[x])\n    for i in range(n-1):\n        team1[i+1] = max(left[team1[i]], key=lambda x: a[x])\n        team2[i+1] = max(right[team2[i]], key=lambda x: a[x])\n    return ''.join(map(str, team1 if team1[0] < team2[0] else team2))"
    },
    {
        "number": 4150,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.strip().split())\n    a = list(map(int, stdin.strip().split()))\n\n    teams = [[] for _ in range(2)]\n    for i in range(n):\n        if i % 2 == 0:\n            # first team\n            team = 0\n            if not teams[team]:\n                # first student in team\n                teams[team].append(i)\n            else:\n                # check if closest students are available\n                left = teams[team][-1]\n                right = i - 1\n                for j in range(k):\n                    if left - j - 1 >= 0:\n                        left -= 1\n                    if right + j + 1 < n:\n                        right += 1\n                    if left < 0:\n                        break\n                    if right >= n:\n                        break\n                # choose closest students\n                if left < 0:\n                    # choose all students to the right\n                    teams[team] += list(range(i, n))\n                elif right >= n:\n                    # choose all students to the left\n                    teams[team] += list(range(left, i))\n                else:\n                    teams[team] += list(range(left, right+1))\n        else:\n            # second team\n            team = 1\n            if not teams[team]:\n                # first student in team\n                teams[team].append(i)\n            else:\n                # check if closest students are available\n                left = teams[team][-1]\n                right = i - 1\n                for j in range(k):\n                    if left - j - 1 >= 0:\n                        left -= 1\n                    if right + j + 1 < n:\n                        right += 1\n                    if left < 0:\n                        break\n                    if right >= n:\n                        break\n                # choose closest students\n                if left < 0:\n                    # choose all students to the right\n                    teams[team] += list(range(i, n))\n                elif right >= n:\n                    # choose all students to the left\n                    teams[team] += list(range(left, i))\n                else:\n                    teams[team] += list(range(left, right+1))\n\n    result = \"\"\n    for i in range(n):\n        if i in teams[0]:\n            result += \"1\"\n        else:\n            result += \"2\"\n\n    return result"
    },
    {
        "number": 4150,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    \n    # Step 1: Find the first coach's team\n    team1 = [0] * n\n    first_coach = 0\n    for i in range(n):\n        max_val = -1\n        max_pos = -1\n        for j in range(i, n):\n            if max_val < a[j]:\n                max_val = a[j]\n                max_pos = j\n        team1[max_pos] = 1\n        first_coach = max_pos\n    \n    # Step 2: Find the second coach's team\n    team2 = [0] * n\n    second_coach = 0\n    for i in range(n):\n        if team1[i] == 0:\n            max_val = -1\n            max_pos = -1\n            for j in range(i+1, n):\n                if max_val < a[j]:\n                    max_val = a[j]\n                    max_pos = j\n            team2[max_pos] = 1\n            second_coach = max_pos\n    \n    # Step 3: Repeat Step 2 until all students are in a team\n    while second_coach < n-1:\n        for i in range(second_coach+1, n):\n            if team1[i] == 0 and team2[i] == 0:\n                max_val = -1\n                max_pos = -1\n                for j in range(i+1, n):\n                    if max_val < a[j]:\n                        max_val = a[j]\n                        max_pos = j\n                if max_pos - second_coach < k:\n                    for j in range(second_coach+1, max_pos+1):\n                        if team1[j] == 0 and team2[j] == 0:\n                            team2[j] = 1\n                else:\n                    for j in range(second_coach+1, second_coach+k+1):\n                        if team1[j] == 0 and team2[j] == 0:\n                            team2[j] = 1\n                    for j in range(max_pos-k, max_pos+1):\n                        if team1[j] == 0 and team2[j] == 0:\n                            team2[j] = 1\n                second_coach = max_pos\n    \n    # Step 4: Print the teams\n    output = \"\"\n    for i in range(n):\n        if team1[i] == 1:\n            output += \"1\"\n        else:\n            output += \"2\"\n    \n    return output\n"
    },
    {
        "number": 4150,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.strip().split())\n    a = list(map(int, stdin.strip().split()))\n    teams = [0] * n\n    curr_team = 1\n    for i in range(n):\n        if teams[i]!= 0:\n            continue\n        curr_team_skills = [a[j] for j in range(max(0, i-k), min(n, i+k+1)) if teams[j] == 0]\n        curr_team_skills.sort(reverse=True)\n        if len(curr_team_skills) == 0:\n            continue\n        chosen = curr_team_skills[0]\n        for j in range(max(0, i-k), min(n, i+k+1)):\n            if a[j] == chosen and teams[j] == 0:\n                teams[j] = curr_team\n        curr_team = 3 - curr_team\n    return ''.join(str(teams[i]) for i in range(n))"
    },
    {
        "number": 4150,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    team1 = set()\n    team2 = set()\n\n    def choose_team(i: int):\n        team = team1 if len(team1) < len(team2) else team2\n        team.add(i)\n\n    def choose_student(i: int, team: set):\n        left = [j for j in range(i-k, i) if j >= 0]\n        right = [j for j in range(i+1, i+k+1) if j < n]\n        for j in left + right:\n            if j not in team and a[j] > a[i]:\n                team.add(j)\n\n    for i in range(n):\n        if len(team1) + len(team2) == n:\n            break\n        if len(team1) == len(team2):\n            choose_team(i)\n            continue\n        if len(team1) == i or len(team2) == n-i-1:\n            choose_team(i)\n            continue\n        choose_student(i, team1 if len(team1) < len(team2) else team2)\n\n    return \"\".join(str(2 if i in team2 else 1) for i in range(n))"
    },
    {
        "number": 4150,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    \n    # Initialize the two teams as empty sets\n    team1 = set()\n    team2 = set()\n    \n    # Initialize the indices to be used for choosing the closest students\n    left_idx = 0\n    right_idx = n - 1\n    \n    # Iterate until the row becomes empty\n    while left_idx <= right_idx:\n        # First coach chooses the closest student to the left and the closest student to the right\n        team1.add(a[left_idx])\n        team1.add(a[right_idx])\n        \n        # If there are less than k students to the left or to the right, choose all of them\n        if left_idx - k > 0:\n            team1.add(a[left_idx - k])\n        if right_idx + k < n - 1:\n            team1.add(a[right_idx + k])\n        \n        # All students that are chosen leave the row\n        for i in range(left_idx, right_idx + 1):\n            if a[i] in team1:\n                a[i] = None\n        \n        # The chosen students join the first team\n        for i in range(left_idx, right_idx + 1):\n            if a[i] in team1:\n                a[i] = None\n                team1.add(i + 1)\n                left_idx = min(left_idx, i + 1)\n                right_idx = max(right_idx, i + 1)\n        \n        # Second coach chooses the closest student to the left and the closest student to the right\n        team2.add(a[left_idx])\n        team2.add(a[right_idx])\n        \n        # If there are less than k students to the left or to the right, choose all of them\n        if left_idx - k > 0:\n            team2.add(a[left_idx - k])\n        if right_idx + k < n - 1:\n            team2.add(a[right_idx + k])\n        \n        # All students that are chosen leave the row\n        for i in range(left_idx, right_idx + 1):\n            if a[i] in team2:\n                a[i] = None\n        \n        # The chosen students join the second team\n        for i in range(left_idx, right_idx + 1):\n            if a[i] in team2:\n                a[i] = None\n                team2.add(i + 1)\n                left_idx = min(left_idx, i + 1)\n                right_idx = max(right_idx, i + 1)\n    \n    # Convert the sets to a string of characters representing which students join the first team\n    result = \"\"\n    for i in range(n):\n        if i in team1:\n            result += \"1\"\n        elif i in team2:\n            result += \"2\"\n        else:\n            result += \"0\"\n    \n    return result\n\nprint(solution(\"5 2\\n2 4 5 3 1\")) # Output: 11111\nprint(solution(\"5 1\\n2 1 3 5 4\")) # Output: 22111\nprint(solution(\"7 1\\n7 2 1 3 5 4 6\")) # Output: 1121122\nprint(solution(\"5 1\\n2 4 5 3 1\")) # Output: 21112<|im_sep|>"
    },
    {
        "number": 4150,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    skills = list(map(int, stdin.split()))\n    teams = [[] for _ in range(n+1)]\n    for i in range(n):\n        teams[skills[i]].append(i)\n    result = \"\"\n    for i in range(n):\n        if not teams[i]:\n            continue\n        team = teams[i][0]\n        result += \"1\" if team < n//2 else \"2\"\n        for j in teams[i]:\n            teams[skills[j]].remove(j)\n            teams[skills[j]].append(team)\n    return result\n"
    },
    {
        "number": 4150,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.strip().split())\n    a = list(map(int, stdin.strip().split()))\n\n    teams = [[], []]\n    for i in range(n):\n        if len(teams[0]) == len(teams[1]):\n            teams[i % 2].append(a[i])\n        elif len(teams[0]) > len(teams[1]):\n            teams[i % 2].append(a[i])\n        else:\n            teams[(i + 1) % 2].append(a[i])\n\n    while len(teams[0]) + len(teams[1]) < n:\n        if len(teams[0]) == len(teams[1]):\n            teams[i % 2].append(a[i])\n        elif len(teams[0]) > len(teams[1]):\n            teams[i % 2].append(a[i])\n        else:\n            teams[(i + 1) % 2].append(a[i])\n\n    return ''.join(map(str, teams[0] + teams[1]))"
    },
    {
        "number": 4151,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n\n    dp = [[False] * n for _ in range(n)]\n\n    for i in range(n):\n        dp[i][i] = True\n\n    for i in range(n - 1):\n        if a[i] == a[i + 1]:\n            dp[i][i + 1] = True\n\n    for k in range(2, n):\n        for i in range(n - k):\n            j = i + k\n            if a[i] == a[j]:\n                dp[i][j] = True\n                continue\n            if dp[i][j - 1]:\n                dp[i][j] = True\n\n    count = 0\n    for i in range(n):\n        if dp[0][i]:\n            count += 1\n\n    return str(count % 998244353)\n"
    },
    {
        "number": 4151,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().strip().split()))\n    cnt = 0\n    memo = {}\n    for i in range(n):\n        memo[(a[i], i)] = cnt\n        cnt += 1\n    ans = cnt\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] == a[j]:\n                memo[(a[i], j)] = memo[(a[i], i)]\n            else:\n                ans -= memo[(a[j], i)]\n                memo[(a[j], i)] += 1\n    return ans % 998244353\n"
    },
    {
        "number": 4151,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.strip().split())\n    MOD = 998244353\n    b = [0] * n\n    for i in range(n):\n        b[a[i] - 1] = i\n    for i in range(1, n):\n        if b[i] == b[i - 1]:\n            continue\n        j = i\n        while j > 0 and b[j - 1] > b[i]:\n            b[j] = b[j - 1]\n            j -= 1\n        b[j] = i\n    count = 1\n    for i in range(1, n):\n        if b[i]!= b[i - 1] + 1:\n            count = pow(count, 2, MOD)\n    return count % MOD"
    },
    {
        "number": 4151,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    cnt = 0\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        for j in range(i, n):\n            if a[i] == a[j]:\n                dp[i][j] = 1\n                cnt += 1\n    for k in range(1, n):\n        for i in range(n - k):\n            j = i + k\n            for l in range(i, j):\n                if dp[i][l] == 1 and dp[l + 1][j] == 1:\n                    dp[i][j] = 1\n                    cnt += 1\n    return str((cnt * 2) % 998244353)"
    },
    {
        "number": 4151,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    if n == 2 and (a[0] == a[1] or a[0] + a[1] == 100):\n        return 2\n    b = [0] * n\n    count = 0\n    for i in range(n):\n        if b[a[i]-1]!= 0:\n            b[a[i]-1] = min(b[a[i]-1], i+1)\n        else:\n            b[a[i]-1] = i+1\n        count += 1\n    for i in range(n):\n        if b[i] == 0:\n            b[i] = n+1\n        count += n - b[i]\n    return count % 998244353\n\nprint(solution(sys.stdin))"
    },
    {
        "number": 4151,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    \n    # create dp table\n    dp = [[0] * n for _ in range(n)]\n    dp[0][0] = 1\n    \n    # fill dp table\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                dp[i][j] = 1\n            elif a[i] == a[j]:\n                dp[i][j] = dp[i][j-1]\n            else:\n                dp[i][j] = dp[i][j-1] + dp[i-1][j] + dp[i-1][j-1]\n                \n    # count number of renumerations\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if dp[i][j] > 0:\n                count += dp[i][j]\n    \n    # return result modulo 998244353\n    return str(count % 998244353)"
    },
    {
        "number": 4151,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n\n    # dp[i][j] = number of renumerations of a[i:j+1]\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    dp[0][0] = 1\n\n    for i in range(n):\n        dp[i][i + 1] = 1\n\n    for i in range(n):\n        for j in range(i + 2, n + 1):\n            for k in range(i, j):\n                if a[k] == a[j - 1] and dp[i][k] == dp[k + 1][j]:\n                    dp[i][j] += dp[i][k] * dp[k + 1][j]\n\n    return str(dp[0][n]) % 998244353"
    },
    {
        "number": 4151,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    \n    count = 1\n    for i in range(n - 1):\n        if a[i] == a[i + 1]:\n            continue\n        else:\n            count *= 2\n            if i > 0 and a[i] < a[i - 1]:\n                count -= 1\n            if i < n - 2 and a[i + 1] < a[i + 2]:\n                count -= 1\n    \n    return str(count % (10**9 + 7))\n"
    },
    {
        "number": 4151,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n    MOD = 998244353\n    count = 0\n    dp = {}\n    for i in range(n):\n        dp[a[i]] = i\n    b = []\n    for i in range(n):\n        b.append(dp[a[i]])\n    for i in range(n - 1):\n        if a[i] == a[i + 1]:\n            if b[i] == b[i + 1]:\n                continue\n            else:\n                b[i + 1] = b[i]\n        else:\n            b[i + 1] = b[i] + 1\n    for i in range(n):\n        if b[i] not in dp:\n            count += 1\n            dp[b[i]] = 1\n    print(count % MOD)\n    return str(count % MOD)\n\ndef"
    },
    {
        "number": 4151,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = [int(x) for x in stdin.split()[1:]]\n    b = [0] * n\n    count = 0\n    for i in range(n):\n        b[i] = a[i]\n        if i > 0 and b[i] == b[i-1]:\n            b[i] = b[i-1]\n    for i in range(n):\n        if i > 0 and (b[i] == b[i-1] or b[i] + 1 == b[i-1]):\n            b[i] = max(b[i], b[i-1]+1)\n    for i in range(n-1):\n        if b[i] + 1 == b[i+1]:\n            b[i+1] = max(b[i+1], b[i]+1)\n    count = 1\n    for i in range(n):\n        count *= b[i]\n    return str(count % 998244353)"
    },
    {
        "number": 4152,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    good = True\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i] + a[j] == 2**int(math.log2(a[i] + a[j])):\n                good = False\n                break\n        if not good:\n            break\n    if good:\n        print(n-1)\n    else:\n        print(n-2)\n\nimport math"
    },
    {
        "number": 4152,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if (a[i]+a[j]) & (a[i]+a[j]-1) == 0:\n                count += 1\n    return n-count"
    },
    {
        "number": 4152,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.strip().split())\n    count = 0\n    for i in range(n):\n        if not (a[i] & (a[i] - 1)):\n            count += 1\n    return n - count\n\nprint(solution(\"6\\n4 7 1 5 4 9\")) # Output: 1\nprint(solution(\"5\\n1 2 3 4 5\")) # Output: 2\nprint(solution(\"1\\n16\")) # Output: 1\nprint(solution(\"4\\n1 1 1 1023\")) # Output: 0"
    },
    {
        "number": 4152,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i] + a[j] & -a[i] == a[i] + a[j]:\n                count += 1\n    return count"
    },
    {
        "number": 4152,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    arr = list(map(int, stdin.split()[1:]))\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if not (arr[i] + arr[j] & (arr[i] + arr[j]-1)):\n                count += 1\n    return count"
    },
    {
        "number": 4152,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    good = True\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if (a[i]+a[j])&-a[i] == 0:\n                good = False\n                break\n        if not good:\n            break\n    return n-good"
    },
    {
        "number": 4152,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n    \n    count = 0\n    for i in range(n):\n        flag = False\n        for j in range(i+1, n):\n            if (a[i] + a[j]) & (a[i] + a[j] - 1) == 0:\n                flag = True\n                break\n        if not flag:\n            count += 1\n            \n    return count\n\n\nprint(solution(\"\"\"\n6\n4 7 1 5 4 9\n\"\"\")) # Output: 1\n\nprint(solution(\"\"\"\n5\n1 2 3 4 5\n\"\"\")) # Output: 2\n\nprint(solution(\"\"\"\n1\n16\n\"\"\")) # Output: 1\n\nprint(solution(\"\"\"\n4\n1 1 1 1023\n\"\"\")) # Output: 0"
    },
    {
        "number": 4152,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = list(map(int, stdin.strip().split()))\n    good = True\n    for i in range(n):\n        for j in range(i+1, n):\n            if 2**(a[i]+a[j]) < max(a[i], a[j]):\n                good = False\n                break\n        if not good:\n            break\n    return str(n - i - 1)"
    },
    {
        "number": 4152,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    good = True\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i]+a[j] == 2**int(math.log(a[i]+a[j], 2)):\n                good = False\n                break\n        if not good:\n            break\n    return n-good\n\nstdin = \"\"\"\n6\n4 7 1 5 4 9\n\"\"\"\n\nprint(solution(stdin)) # Output: 1\n\nstdin = \"\"\"\n5\n1 2 3 4 5\n\"\"\"\n\nprint(solution(stdin)) # Output: 2\n\nstdin = \"\"\"\n1\n16\n\"\"\"\n\nprint(solution(stdin)) # Output: 1\n\nstdin = \"\"\"\n4\n1 1 1 1023\n\"\"\"\n\nprint(solution(stdin)) # Output: 0"
    },
    {
        "number": 4152,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    arr = list(map(int, stdin.readline().strip().split()))\n    if not arr:\n        return str(0)\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] + arr[j] & -arr[i] == arr[i] + arr[j]:\n                dp[i] = min(dp[i], dp[j]+1)\n    return str(dp[-1])\n\nstdin = \"\"\"\n6\n4 7 1 5 4 9\n\"\"\"\n\nstdout = solution(stdin)\nprint(stdout) # Output: 1\n\nstdin = \"\"\"\n5\n1 2 3 4 5\n\"\"\"\n\nstdout = solution(stdin)\nprint(stdout) # Output: 2\n\nstdin = \"\"\"\n1\n16\n\"\"\"\n\nstdout = solution(stdin)\nprint(stdout) # Output: 1\n\nstdin = \"\"\"\n4\n1 1 1 1023\n\"\"\"\n\nstdout = solution(stdin)\nprint(stdout) # Output: 0"
    },
    {
        "number": 4153,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin)\n    count = 0\n    i = 0\n    \n    while i < n:\n        if i < n-1 and stdin[i] == '0' and stdin[i+1] == '1':\n            count += 1\n            i += 2\n        elif i < n-1 and stdin[i] == '1' and stdin[i+1] == '0':\n            count += 1\n            i += 2\n        else:\n            i += 1\n            \n    return count"
    },
    {
        "number": 4153,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N = len(stdin)\n    S = [int(char) for char in stdin]\n    \n    # Calculate the number of red and blue cubes\n    red_count = sum(S)\n    blue_count = N - red_count\n    \n    # Initialize the maximum number of cubes that can be removed\n    max_count = 0\n    \n    # Check for red cubes on top and blue cubes on bottom\n    for i in range(N-1):\n        if S[i] == 0 and S[i+1] == 1:\n            # Remove the red cube and the blue cube on top\n            S[i] = -1\n            S[i+1] = -1\n            max_count += 2\n        elif S[i] == 1 and S[i+1] == 0:\n            # Remove the blue cube and the red cube on top\n            S[i] = -1\n            S[i+1] = -1\n            max_count += 2\n    \n    # Check for red and blue cubes on top and bottom\n    for i in range(1, N-1):\n        if S[i-1] == 0 and S[i] == 1 and S[i+1] == 0:\n            # Remove the blue cube on top and the red cube and blue cube on bottom\n            S[i] = -1\n            S[i-1] = -1\n            S[i+1] = -1\n            max_count += 3\n        elif S[i-1] == 0 and S[i] == 0 and S[i+1] == 1:\n            # Remove the red cube on top and the red cube and blue cube on bottom\n            S[i] = -1\n            S[i-1] = -1\n            S[i+1] = -1\n            max_count += 3\n        elif S[i-1] == 1 and S[i] == 0 and S[i+1] == 1:\n            # Remove the red cube and blue cube on top and the blue cube on bottom\n            S[i] = -1\n            S[i-1] = -1\n            S[i+1] = -1\n            max_count += 3\n        elif S[i-1] == 1 and S[i] == 1 and S[i+1] == 0:\n            # Remove the blue cube and blue cube on top and the red cube on bottom\n            S[i] = -1\n            S[i-1] = -1\n            S[i+1] = -1\n            max_count += 3\n    \n    # Remove all remaining red and blue cubes\n    max_count += red_count + blue_count\n    max_count -= S.count(-1)\n    \n    return str(max_count)"
    },
    {
        "number": 4153,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = len(stdin)\n    red = [True] * N\n    blue = [True] * N\n    for i in range(N):\n        if stdin[i] == '0':\n            blue[i] = False\n            red[N-i-1] = False\n        else:\n            blue[N-i-1] = False\n            red[i] = False\n    count = 0\n    for i in range(N):\n        if red[i]:\n            count += 1\n            if blue[i]:\n                count += 1\n    return count"
    },
    {
        "number": 4153,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N = len(stdin)\n    S = [int(c) for c in stdin]\n\n    # Initialize variables\n    red_cubes = 0\n    blue_cubes = 0\n    max_cubes_removed = 0\n\n    # Count red and blue cubes\n    for i in range(N):\n        if S[i] == 0:\n            red_cubes += 1\n        else:\n            blue_cubes += 1\n\n    # Compute maximum number of cubes that can be removed\n    max_cubes_removed = min(red_cubes, blue_cubes)\n\n    # Compute minimum number of cubes that can be removed\n    min_cubes_removed = max_cubes_removed\n\n    # Iterate over all possible pairs of red and blue cubes\n    for i in range(N):\n        if S[i] == 0:\n            for j in range(i+1, N):\n                if S[j] == 1:\n                    # Check if adjacent cubes can be removed\n                    if i == j-1 or i == j-2 or j == i+1 or j == i+2:\n                        # Remove the adjacent cubes and compute new number of cubes\n                        new_red_cubes = red_cubes - 1 if i == j-1 or i == j-2 else red_cubes\n                        new_blue_cubes = blue_cubes - 1 if j == i+1 or j == i+2 else blue_cubes\n                        new_max_cubes_removed = min(new_red_cubes, new_blue_cubes)\n                        new_min_cubes_removed = max(new_red_cubes, new_blue_cubes)\n                        max_cubes_removed = max(max_cubes_removed, new_max_cubes_removed)\n                        min_cubes_removed = min(min_cubes_removed, new_min_cubes_removed)\n\n    # Return maximum number of cubes that can be removed\n    return str(max_cubes_removed)"
    },
    {
        "number": 4153,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    S = stdin.readline().strip()\n    red_cubes = [i for i in range(N) if S[i] == '0']\n    blue_cubes = [i for i in range(N) if S[i] == '1']\n\n    max_removed = 0\n    for i in range(N):\n        if i in red_cubes:\n            blue_cubes_below = [j for j in blue_cubes if j < i]\n            max_removed = max(max_removed, len(blue_cubes_below))\n\n    return str(max_removed)"
    },
    {
        "number": 4153,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin)\n    red = [0] * n\n    blue = [0] * n\n\n    for i in range(n):\n        if stdin[i] == '0':\n            red[i] = 1\n        else:\n            blue[i] = 1\n\n    max_rem = 0\n    for i in range(n):\n        if red[i] == 1:\n            for j in range(max(0, i-1), min(n, i+2)):\n                if blue[j] == 1:\n                    max_rem = max(max_rem, j-i+1)\n\n    return max_rem"
    },
    {
        "number": 4153,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin)\n    stack = []\n    count = 0\n    for i in range(n):\n        if not stack:\n            stack.append(i)\n        else:\n            if stdin[i] == '0':\n                stack.append(i)\n            else:\n                if stdin[stack[-1]] == '0':\n                    count += 1\n                    stack.pop()\n                    stack.append(i)\n                else:\n                    stack.append(i)\n    return count"
    },
    {
        "number": 4153,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = len(stdin)\n    cubes = []\n    for i in range(N):\n        if stdin[i] == '0':\n            cubes.append('red')\n        else:\n            cubes.append('blue')\n    max_removed = 0\n    for i in range(N):\n        if cubes[i] =='red':\n            for j in range(i+2, N):\n                if cubes[j] == 'blue':\n                    removed = 2\n                    k = j - 1\n                    while k >= i and cubes[k] == 'blue':\n                        cubes[k] ='removed'\n                        k -= 1\n                    cubes[j] ='removed'\n                    max_removed = max(max_removed, removed)\n    print(max_removed)\n    return ''"
    },
    {
        "number": 4153,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    S = stdin.readline().strip()\n    count = 0\n    for i in range(N):\n        if i == 0:\n            if S[i] == '0':\n                count += 1\n            else:\n                count += 0\n        elif i == 1:\n            if S[i] == '0':\n                count += 0\n            else:\n                count += 1\n        else:\n            if S[i] == S[i-1]:\n                count += 0\n            else:\n                count += 1\n    return count\n"
    },
    {
        "number": 4153,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = len(stdin)\n    cubes = [0] * N\n    count = 0\n    for i in range(N):\n        if stdin[i] == '0':\n            cubes[i] = 1\n        else:\n            count += 1\n    count += N - 1\n    while count > 0:\n        i = 0\n        while i < N and cubes[i] == 0:\n            i += 1\n        if i == N:\n            break\n        j = i + 1\n        while j < N and cubes[j] == 1:\n            j += 1\n        if j == N:\n            break\n        if j - i > 2:\n            count += j - i - 2\n        i += 1\n        j -= 1\n        count -= 1\n        cubes[i:j+1] = [0] * (j - i + 1)\n    return count\n\nprint(solution(input()))"
    },
    {
        "number": 4154,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Returns the number of ID cards that allow us to pass all the gates alone.\n    \"\"\"\n    # Read input\n    N, M = map(int, stdin.readline().strip().split())\n    ID_cards = []\n    for _ in range(M):\n        L, R = map(int, stdin.readline().strip().split())\n        ID_cards.append((L, R))\n    \n    # Initialize variables\n    count = 0\n    \n    # Iterate through all ID cards\n    for i in range(N):\n        # Check if i-th ID card allows us to pass all the gates alone\n        allowed = True\n        for gate in ID_cards:\n            if i < gate[0] or i > gate[1]:\n                allowed = False\n                break\n        if allowed:\n            count += 1\n    \n    return count"
    },
    {
        "number": 4154,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    gates = []\n    for i in range(m):\n        l, r = map(int, stdin.readline().split())\n        gates.append((l-1, r-1))\n    count = 0\n    for i in range(n):\n        for j in range(m):\n            l, r = gates[j]\n            if i < l or i > r:\n                break\n            if i == r:\n                count += 1\n                break\n    return str(count)\n\ndef"
    },
    {
        "number": 4154,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    gates = [list(map(int, stdin.split())) for _ in range(m)]\n    id_cards = list(range(n))\n    gates_passed = set()\n    for gate in gates:\n        l, r = gate\n        l -= 1\n        r -= 1\n        for i in range(l, r+1):\n            if i not in gates_passed:\n                id_cards.remove(i)\n        gates_passed.update(range(l, r+1))\n    return str(len(id_cards))"
    },
    {
        "number": 4154,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    n, m = map(int, stdin.strip().split())\n    id_cards = []\n    for _ in range(m):\n        l, r = map(int, stdin.strip().split())\n        id_cards.append((l, r))\n\n    # count number of ID cards that allow us to pass all gates\n    count = 0\n    for i in range(n):\n        # check if i-th card is in any of the ranges of the gates\n        for l, r in id_cards:\n            if i >= l and i <= r:\n                break\n        else:\n            # i-th card is not in any of the ranges of the gates\n            count += 1\n\n    return str(count)"
    },
    {
        "number": 4154,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    gates = []\n    for i in range(M):\n        L, R = map(int, stdin.split())\n        gates.append((L, R))\n    count = 0\n    for i in range(1, N):\n        id_card_allowed = True\n        for L, R in gates:\n            if i < L or i > R:\n                id_card_allowed = False\n                break\n        if id_card_allowed:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4154,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N, M = map(int, stdin.split())\n    gates = []\n    for _ in range(M):\n        L, R = map(int, stdin.split())\n        gates.append((L, R))\n\n    # Count number of ID cards that allow us to pass all gates\n    count = 0\n    for i in range(1, N+1):\n        left_passed = False\n        right_passed = False\n        for L, R in gates:\n            if i >= L and i <= R:\n                if i == L:\n                    left_passed = True\n                elif i == R:\n                    right_passed = True\n        if left_passed and right_passed:\n            count += 1\n\n    # Print result\n    return str(count)"
    },
    {
        "number": 4154,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.readline().split())\n    ID_cards = []\n    for i in range(M):\n        L, R = map(int, stdin.readline().split())\n        ID_cards.append((L, R))\n    \n    count = 0\n    for L, R in ID_cards:\n        if L <= 1 <= R or L <= 2 <= R or L <= 3 <= R or L <= 4 <= R:\n            count += 1\n    \n    return count\n\nprint(solution(\"4 2\\n1 3\\n2 4\")) # Output: 2"
    },
    {
        "number": 4154,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    n, m = map(int, stdin.strip().split())\n    gates = []\n    for _ in range(m):\n        l, r = map(int, stdin.strip().split())\n        gates.append((l, r))\n\n    # Count ID cards that allow us to pass all gates\n    count = 0\n    for l, r in gates:\n        # Check if the current ID card allows us to pass all gates alone\n        if l == 1 and r == n:\n            count += 1\n        elif l == 1 and r > 1 and r < n and r-1 not in [r-1 for l, r in gates]:\n            count += 1\n        elif l == 2 and r == n-1:\n            count += 1\n        elif l == 2 and r > 2 and r < n-1 and r-1 not in [r-1 for l, r in gates]:\n            count += 1\n        elif l > 2 and r == n-1 and l not in [l for l, r in gates]:\n            count += 1\n        elif l > 2 and r > 2 and r < n-1 and r-1 not in [r-1 for l, r in gates]:\n            count += 1\n        elif l == n and r == n:\n            count += 1\n        elif l == n-1 and r == n-1:\n            count += 1\n        elif l == n and r > n and r < n*2 and r-1 not in [r-1 for l, r in gates]:\n            count += 1\n        elif l == n-1 and r > n and r < n*2 and r-1 not in [r-1 for l, r in gates]:\n            count += 1\n\n    return str(count)"
    },
    {
        "number": 4154,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N, M = map(int, stdin.split())\n    gates = []\n    for i in range(M):\n        L, R = map(int, stdin.split())\n        gates.append((L, R))\n\n    # Initialize variables\n    num_id_cards = 0\n    passed_gates = [False] * M\n    id_card_used = [False] * N\n\n    # Check each ID card\n    for i in range(N):\n        # Check if this ID card allows us to pass all the gates\n        for j in range(M):\n            if i >= gates[j][0] and i <= gates[j][1] and not passed_gates[j]:\n                passed_gates[j] = True\n            elif i < gates[j][0] or i > gates[j][1]:\n                passed_gates = [False] * M\n                break\n        if all(passed_gates):\n            num_id_cards += 1\n            for j in range(i-1, -1, -1):\n                if not id_card_used[j]:\n                    id_card_used[j] = True\n                    break\n            for j in range(i+1, N):\n                if not id_card_used[j]:\n                    id_card_used[j] = True\n                    break\n            passed_gates = [False] * M\n\n    # Return the number of ID cards that allow us to pass all the gates alone\n    return str(num_id_cards)"
    },
    {
        "number": 4154,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution to the problem statement.\n\n    Parameters\n    ----------\n    stdin: str\n        Input data as a string\n\n    Returns\n    -------\n    str\n        Output data as a string\n    \"\"\"\n    # parse input\n    N, M = map(int, stdin.split()[0:2])\n    gates = []\n    for i in range(M):\n        L, R = map(int, stdin.split()[i*2:i*2+2])\n        gates.append((L-1, R-1))\n\n    # sort gates by starting index\n    gates.sort()\n\n    # initialize count of ID cards\n    count = 0\n\n    # iterate over all ID cards\n    for i in range(N):\n        # initialize list of gates that can be passed\n        allowed_gates = []\n\n        # iterate over all gates and check if ID card can pass them\n        for gate in gates:\n            if gate[0] <= i <= gate[1]:\n                allowed_gates.append(True)\n            else:\n                allowed_gates.append(False)\n\n        # check if all gates are allowed\n        if all(allowed_gates):\n            count += 1\n\n    return str(count)\n"
    },
    {
        "number": 4155,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Get input from stdin\n    lines = stdin.split('\\n')\n    N = int(lines[0])\n    h = list(map(int, lines[1].split()))\n    \n    # Sort heights in decreasing order\n    h.sort(reverse=True)\n    \n    # Initialize water count to 0\n    count = 0\n    \n    # Perform watering operations until all flowers are at height 1\n    while max(h) > 0:\n        # Find the maximum height\n        max_height = max(h)\n        \n        # Find the index of the first occurrence of max_height\n        i = h.index(max_height)\n        \n        # If max_height appears only once, increase the water count by 1\n        if h.count(max_height) == 1:\n            count += 1\n        \n        # Increase the height of all flowers with height less than or equal to max_height\n        for j in range(i, N):\n            if h[j] <= max_height + 1:\n                h[j] += 1\n        \n        # Remove max_height from the height list\n        h.remove(max_height)\n    \n    return str(count)"
    },
    {
        "number": 4155,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    n = int(stdin.readline().strip())\n    heights = list(map(int, stdin.readline().strip().split()))\n\n    # Initialize variables\n    heights_copy = heights.copy()\n    operations = 0\n\n    # Sort heights in ascending order\n    heights_copy.sort()\n\n    # Iterate over heights\n    for i in range(n):\n        if heights[i]!= heights_copy[i]:\n            operations += 1\n            heights_copy[i] = heights[i]\n            # Perform watering operation\n            for j in range(i+1, n):\n                if heights[j] == heights_copy[j]:\n                    heights_copy[j] += 1\n\n    # Print output\n    print(operations)\n    return \"\""
    },
    {
        "number": 4155,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    This function takes input from stdin, calculates the minimum number of watering operations required\n    to satisfy the condition and returns the result as a string.\n    \"\"\"\n    # Read input\n    N = int(stdin.readline().strip())\n    heights = list(map(int, stdin.readline().strip().split()))\n\n    # Initialize variables\n    water_operations = 0\n\n    # Iterate over heights and find the maximum height\n    max_height = 0\n    for height in heights:\n        if height > max_height:\n            max_height = height\n\n    # Iterate over heights and water operations\n    for i in range(N):\n        if heights[i] < max_height:\n            # Find the range of flowers to water\n            left = i\n            right = i\n            while left > 0 and heights[left-1] <= heights[i]:\n                left -= 1\n            while right < N-1 and heights[right+1] <= heights[i]:\n                right += 1\n\n            # Water the flowers\n            water_operations += right - left + 1\n            heights[left:right+1] = [heights[left]+1 for _ in range(right-left+1)]\n\n    # Return result\n    return str(water_operations)"
    },
    {
        "number": 4155,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Read input from stdin\n    N = int(stdin.readline().strip())\n    heights = list(map(int, stdin.readline().strip().split()))\n    \n    # Initialize a list to keep track of heights\n    current_heights = [0] * N\n    \n    # Initialize a variable to keep track of minimum watering operations\n    min_watering_ops = float('inf')\n    \n    # Loop over all possible values of l and r (1 <= l <= r <= N)\n    for l in range(1, N+1):\n        for r in range(l, N+1):\n            # Save the current heights to a temp variable\n            temp_heights = current_heights.copy()\n            \n            # Increase the height of all flowers in the range [l, r] by 1\n            for x in range(l-1, r):\n                temp_heights[x] += 1\n            \n            # Check if the new heights satisfy the given condition\n            if all(temp_heights[k] >= heights[k] for k in range(N)):\n                # Update the minimum watering operations if necessary\n                watering_ops = sum(1 for h1, h2 in zip(current_heights, temp_heights) if h1!= h2)\n                min_watering_ops = min(min_watering_ops, watering_ops)\n            \n            # Update the current heights\n            current_heights = temp_heights.copy()\n    \n    # Return the minimum watering operations\n    return str(min_watering_ops)"
    },
    {
        "number": 4155,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N = int(stdin.readline().strip())\n    h = list(map(int, stdin.readline().strip().split()))\n\n    # Initialize watering operations\n    watering_ops = 0\n\n    # Initialize heights list\n    heights = [0] * N\n\n    # Loop through each height in input\n    for i in range(N):\n        # Check if height has changed\n        if h[i]!= heights[i]:\n            # Check if height needs to be increased\n            if h[i] > heights[i]:\n                # Increase height for all flowers between i and N\n                for j in range(i, N):\n                    heights[j] += 1\n            else:\n                # Decrease height for all flowers between i and N\n                for j in range(i, N):\n                    heights[j] -= 1\n            # Increment watering operations\n            watering_ops += 1\n\n    # Return minimum number of watering operations\n    return str(watering_ops)"
    },
    {
        "number": 4155,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solves the problem by finding the minimum number of watering operations required to satisfy the condition.\n\n    Args:\n        stdin (str): The input string containing the input values.\n\n    Returns:\n        str: The output string containing the minimum number of watering operations required to satisfy the condition.\n    \"\"\"\n    # Read input\n    N = int(stdin.readline().strip())\n    h = list(map(int, stdin.readline().strip().split()))\n\n    # Initialize variables\n    max_height = max(h)\n    min_height = min(h)\n    min_watering_operations = 0\n\n    # Check if watering is required\n    if max_height == min_height:\n        return str(min_watering_operations)\n\n    # Perform watering operations\n    for i in range(N):\n        # Check if watering is required for this flower\n        if h[i] < max_height:\n            # Increase the height of all flowers between i and max_height\n            num_watering_operations = max_height - h[i]\n            min_watering_operations = min(min_watering_operations, num_watering_operations)\n\n    return str(min_watering_operations)\n"
    },
    {
        "number": 4155,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    N = int(stdin.readline().strip())\n    h = list(map(int, stdin.readline().strip().split()))\n\n    # initialize variables\n    count = 0\n    height = 0\n    max_height = max(h)\n\n    # water flowers\n    for i in range(N):\n        if h[i] > height:\n            count += h[i] - height\n        height = h[i]\n\n    # count remaining height\n    count += max_height - height\n\n    return str(count)\n"
    },
    {
        "number": 4155,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Args:\n        stdin (str): The input string as provided by the problem statement.\n\n    Returns:\n        str: The output string as required by the problem statement.\n    \"\"\"\n    # Read the input values\n    N, *h = map(int, stdin.strip().split())\n\n    # Initialize a variable to keep track of the minimum number of watering operations\n    min_watering = float('inf')\n\n    # Iterate over all possible pairs of indices (l, r) such that 1 <= l <= r <= N\n    for l in range(1, N):\n        for r in range(l, N + 1):\n            # Calculate the total height after watering the flowers\n            total_height = sum(h[l - 1:r]) + r - l + 1\n\n            # Update the minimum number of watering operations if necessary\n            if total_height < min_watering:\n                min_watering = total_height\n\n    # Return the minimum number of watering operations as a string\n    return str(min_watering)"
    },
    {
        "number": 4155,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    N = int(stdin.readline().strip())\n    heights = list(map(int, stdin.readline().strip().split()))\n\n    # initialize variables\n    min_ops = 0\n    curr_min_ops = float('inf')\n\n    # loop through all possible watering operations\n    for l in range(1, N+1):\n        for r in range(l, N+1):\n            # calculate the number of watering operations required for the current interval\n            curr_ops = sum(1 for h in heights[l-1:r] if h == 0)\n\n            # update the minimum number of watering operations\n            curr_min_ops = min(curr_min_ops, curr_ops)\n\n    # return the minimum number of watering operations\n    return str(curr_min_ops)"
    },
    {
        "number": 4155,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    This function takes a string as input and returns the minimum number of watering operations required to satisfy the condition.\n\n    Args:\n    stdin (str): A string containing the input values.\n\n    Returns:\n    str: A string containing the minimum number of watering operations required to satisfy the condition.\n\n    \"\"\"\n    # Read input values from stdin\n    N, *h = map(int, stdin.split())\n\n    # Initialize the watered array to False\n    watered = [False] * N\n\n    # Initialize the watering operations counter\n    operations = 0\n\n    # Iterate over all flowers\n    for k in range(N):\n        # If the flower has already been watered, continue\n        if watered[k]:\n            continue\n\n        # Initialize the flower range\n        flower_range = (k, k+1)\n\n        # Mark the flower as watered\n        watered[k] = True\n\n        # Iterate over all remaining flowers\n        for j in range(k+1, N):\n            # If the flower has already been watered, continue\n            if watered[j]:\n                continue\n\n            # If the heights of the flower and the current flower are equal,\n            # update the flower range and mark the flower as watered\n            if h[j] == h[k]:\n                flower_range = (flower_range[0], j+1)\n                watered[j] = True\n\n            # If the heights of the flower and the current flower are not equal,\n            # update the flower range and mark the flower as watered\n            elif h[j]!= h[k]:\n                flower_range = (flower_range[0], j)\n                watered[j] = True\n\n        # Increment the watering operations counter\n        operations += 1\n\n    # Print the minimum number of watering operations required\n    return str(operations)"
    },
    {
        "number": 4156,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, w = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:]))\n    \n    # Check for contradiction\n    if w < 0 or any(x > w for x in a):\n        return '0'\n    \n    dp = [1] * w\n    for i in range(n):\n        dp2 = [0] * w\n        for j in range(w):\n            if j - a[i] >= 0:\n                dp2[j] += dp[j - a[i]]\n            if j + a[i] < w:\n                dp2[j] += dp[j + a[i]]\n        dp = dp2\n        \n    return str(dp[w-1])\n\nprint(solution(\"3 5\\n2 1 -3\")) # Output: 3\nprint(solution(\"2 4\\n-1 1\")) # Output: 4\nprint(solution(\"4 10\\n2 4 1 2\")) # Output: 2"
    },
    {
        "number": 4156,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, w = map(int, stdin.strip().split())\n    a = list(map(int, stdin.strip().split()))\n\n    count = 0\n    for i in range(1, w+1):\n        dp = [0] * (n+1)\n        dp[0] = i\n        for j in range(1, n+1):\n            dp[j] = dp[j-1] + a[j-1]\n            if dp[j] > w:\n                break\n        count += j-1\n\n    if count == 0:\n        return \"0\"\n    else:\n        return str(count)"
    },
    {
        "number": 4156,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, w = map(int, stdin.strip().split())\n    a = list(map(int, stdin.strip().split()))\n    dp = [0] * (w + 1)\n    dp[0] = 1\n    for i in range(n):\n        if a[i] < 0 or a[i] > w:\n            return \"0\"\n        for j in range(w, a[i] - 1, -1):\n            dp[j] += dp[j - a[i]]\n    return str(dp[-1])\n\n\nprint(solution(input()))"
    },
    {
        "number": 4156,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, w = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    # dp[i] is the number of possible ways to have i passengers in the bus\n    dp = [0] * (w+1)\n    dp[0] = 1\n    for i in range(n):\n        for j in range(w, a[i]-1, -1):\n            dp[j] += dp[j-a[i]]\n        if dp[w] > 10**9:\n            return \"0\"\n    return str(dp[w])"
    },
    {
        "number": 4156,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, w = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    dp = [[0]*(w+1) for _ in range(n+1)]\n    dp[0][0] = 1\n    for i in range(1, n+1):\n        for j in range(w+1):\n            if j-a[i-1] >= 0:\n                dp[i][j] = dp[i-1][j-a[i-1]] + dp[i-1][j]\n            else:\n                dp[i][j] = dp[i-1][j]\n    ans = dp[n][w]\n    return str(ans if ans <= w+1 else 0)\n\nprint(solution(input()))"
    },
    {
        "number": 4156,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, w = map(int, stdin.readline().strip().split())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    dp = [0] * (w+1)\n    dp[0] = 1\n\n    for i in range(n):\n        for j in range(w, a[i]-1, -1):\n            dp[j] += dp[j-a[i]]\n\n        if dp[w] == 0:\n            return '0'\n\n    return str(dp[w])\n"
    },
    {
        "number": 4156,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, w = map(int, stdin.strip().split())\n    a = list(map(int, stdin.strip().split()))\n    dp = [0] * (w+1)\n    dp[0] = 1\n    for i in range(n):\n        for j in range(max(0, a[i]-w), a[i]+1):\n            dp[j] += dp[max(0, j-a[i])]\n    if dp[-1] == 0:\n        return \"0\"\n    return str(dp[-1])"
    },
    {
        "number": 4156,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, w = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:]))\n    dp = [0] * (w+1)\n    for i in range(n):\n        for j in range(max(0, a[i]), w+1):\n            dp[j] += 1\n        for j in range(w, 0, -1):\n            if j >= a[i] and dp[j] > 0:\n                dp[j] -= 1\n            elif dp[j+1] > 0:\n                dp[j] = dp[j+1]\n            else:\n                dp[j] = 0\n    return str(dp[w])\n\ndef"
    },
    {
        "number": 4156,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, w = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    dp = [0] * (w + 1)\n    for i in range(n):\n        for j in range(w, a[i] - 1, -1):\n            dp[j] += dp[j - 1]\n        if dp[a[i]] == 0:\n            return \"0\"\n    return str(dp[w])"
    },
    {
        "number": 4156,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, w = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n    count = 0\n    for i in range(1, w+1):\n        if sum(a) <= w:\n            count += 1\n        if i in a:\n            continue\n        else:\n            for j in range(i, w+1):\n                if sum(a[:a.index(j)]) <= w:\n                    count += 1\n    if sum(a) <= w:\n        count += 1\n    return str(count)\n\nstdin = \"3 5\\n2 1 -3\"\nprint(solution(stdin)) # Output: 3\n\nstdin = \"2 4\\n-1 1\"\nprint(solution(stdin)) # Output: 4\n\nstdin = \"4 10\\n2 4 1 2\"\nprint(solution(stdin)) # Output: 2"
    },
    {
        "number": 4157,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    seq = list(map(int, stdin.split('\\n')[1].split()))\n\n    for i in range(1, n):\n        if i % 3 == 0:\n            seq[i] = seq[i-1] * 2\n        else:\n            seq[i] = seq[i-1] // 3\n\n    return''.join(map(str, seq))"
    },
    {
        "number": 4157,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    seq = list(map(int, stdin.split()[1:]))\n    # print(seq)\n\n    for i in range(n):\n        if seq[i] % 3 == 0:\n            seq[i] //= 3\n        else:\n            seq[i] *= 2\n\n    print(*seq)\n\n    return \"\\n\".join(map(str, seq))\n\n\nstdin = \"6\\n4 8 6 3 12 9\"\nprint(solution(stdin))  # Output: 9 3 6 12 4 8\n\nstdin = \"4\\n42 28 84 126\"\nprint(solution(stdin))  # Output: 126 42 84 28 \n\nstdin = \"2\\n1000000000000000000 3000000000000000000\"\nprint(solution(stdin))  # Output: 3000000000000000000 1000000000000000000 "
    },
    {
        "number": 4157,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n\n    for i in range(n):\n        if i == 0:\n            continue\n        if a[i] == a[i-1] * 2:\n            a[i], a[i-1] = a[i-1], a[i]\n            continue\n        if a[i] % 3 == 0 and a[i-1] % 3 == 0 and a[i] // 3 == a[i-1]:\n            a[i], a[i-1] = a[i-1], a[i]\n            continue\n\n    return''.join(map(str, a))"
    },
    {
        "number": 4157,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.strip().split())\n    a_list = list(map(int, stdin.strip().split()))\n\n    for i in range(n - 1):\n        if a_list[i] % 3 == 0:\n            a_list[i+1] = a_list[i] // 3 * 2\n        else:\n            a_list[i+1] = a_list[i] * 2\n            \n    return''.join(map(str, a_list))"
    },
    {
        "number": 4157,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    seq = list(map(int, stdin.split()[1:]))\n    res = []\n    for i in range(n):\n        if seq[i] % 3 == 0:\n            res.append(seq[i] // 3)\n            seq[i] = seq[i] // 3\n        else:\n            res.append(seq[i] * 2)\n            seq[i] = seq[i] * 2\n    return \" \".join(map(str, res))"
    },
    {
        "number": 4157,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n\n    for i in range(n-2, -1, -1):\n        if a[i+1] == a[i] * 2:\n            a[i], a[i+1] = a[i+1], a[i]\n        elif a[i+1] == a[i] // 3 * 3:\n            a[i], a[i+1] = a[i+1], a[i]\n        else:\n            a[i+1], a[i] = a[i], a[i+1]\n\n    return''.join(map(str, a))\n\nstdin = \"6\\n4 8 6 3 12 9\"\nprint(solution(stdin)) # Output: \"9 3 6 12 4 8\"\n\nstdin = \"4\\n42 28 84 126\"\nprint(solution(stdin)) # Output: \"126 42 84 28\"\n\nstdin = \"2\\n1000000000000000000 3000000000000000000\"\nprint(solution(stdin)) # Output: \"3000000000000000000 1000000000000000000\""
    },
    {
        "number": 4157,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n\n    for i in range(n-1):\n        if a[i] % 3 == 0:\n            a[i+1] = a[i] // 3\n        else:\n            a[i+1] = 2 * a[i]\n\n    for i in range(n):\n        print(a[i], end=' ')"
    },
    {
        "number": 4157,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    nums = list(map(int, stdin.split()[1:]))\n    \n    for i in range(n-1):\n        if nums[i] % 3 == 0:\n            nums[i+1] = nums[i] * 2\n        else:\n            nums[i+1] = nums[i] // 3\n            \n    return''.join(map(str, nums))"
    },
    {
        "number": 4157,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    for i in range(1, n):\n        if a[i] * 2 == a[i-1]:\n            a[i-1] *= 2\n        elif a[i] // 3 == a[i-1]:\n            a[i-1] //= 3\n        else:\n            return \"No solution\"\n    return \" \".join(map(str, a))"
    },
    {
        "number": 4157,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n    b = [0] * n\n    b[0] = a[0]\n    for i in range(1, n):\n        if a[i] == 2 * b[i-1]:\n            b[i] = a[i]\n        elif a[i] == 3 * b[i-1]:\n            b[i] = a[i]\n        else:\n            b[i] = max(a[i], 2 * b[i-1], 3 * b[i-1])\n    return''.join(map(str, b))"
    },
    {
        "number": 4158,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    x = list(map(int, stdin.readline().strip().split()))\n    dp = [0] * n\n    for i in range(n):\n        dp[i] = 1\n        for j in range(i):\n            if abs(x[i]-x[j]) == 1:\n                dp[i] = max(dp[i], dp[j]+1)\n    ans = max(dp)\n    print(ans)\n    res = []\n    for i in range(n):\n        if dp[i] == ans:\n            res.append(x[i])\n    print(*res)\n    return \"\"\n\nwith open(\"input.txt\", \"r\") as f:\n    stdin = f.read()\n\nwith open(\"output.txt\", \"w\") as f:\n    f.write(solution(stdin))"
    },
    {
        "number": 4158,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = list(map(int, stdin.readline().split()))\n    # possible subsets with max possible points\n    dp = [[False] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = True\n    for i in range(n):\n        for j in range(i):\n            dp[i][j] = abs(arr[i] - arr[j]) & (abs(arr[i] - arr[j]) - 1) == 0 and dp[j][i]\n    subsets = []\n    for i in range(n):\n        for j in range(i, n):\n            if dp[i][j]:\n                subsets.append([arr[i], arr[j]])\n    # find max possible points in subsets\n    max_points = 0\n    for subset in subsets:\n        points = len(subset)\n        for i in range(len(subset)):\n            for j in range(i+1, len(subset)):\n                dist = abs(subset[i] - subset[j])\n                power = 0\n                while dist!= 0:\n                    dist >>= 1\n                    power += 1\n                points += (2 ** power - 1)\n        max_points = max(max_points, points)\n    # find subset with max possible points\n    for subset in subsets:\n        points = len(subset)\n        for i in range(len(subset)):\n            for j in range(i+1, len(subset)):\n                dist = abs(subset[i] - subset[j])\n                power = 0\n                while dist!= 0:\n                    dist >>= 1\n                    power += 1\n                points += (2 ** power - 1)\n        if points == max_points:\n            return str(len(subset)) + '\\n' +''.join(map(str, subset))\n    return ''"
    },
    {
        "number": 4158,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    x = list(map(int, stdin.split()[1:]))\n    max_len = 1\n    ans = []\n    for i in range(n):\n        for j in range(i+1, n):\n            d = abs(x[j]-x[i])\n            if d & (d-1) == 0:\n                max_len = max(max_len, j-i+1)\n                ans = [x[i]+x[j] for k in range(i,j+1)]\n    return str(max_len) + '\\n' +''.join(map(str, ans))\n\nprint(solution('6\\n3 5 4 7 10 12')) # Output: 3\\n7 3 5\nprint(solution('5\\n-1 2 5 8 11')) # Output: 1\\n8"
    },
    {
        "number": 4158,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    points = sorted(map(int, stdin.split()[1:]))\n    max_points = 0\n    best_points = []\n    for i in range(n):\n        left = i + 1\n        right = n\n        while left < right:\n            mid = (left + right) // 2\n            if points[i] - points[mid] < 0:\n                right = mid\n            else:\n                left = mid + 1\n        if left - i > max_points:\n            max_points = left - i\n            best_points = points[i:left]\n    return f\"{max_points} {' '.join(map(str, best_points))}\""
    },
    {
        "number": 4158,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    x = list(map(int, stdin.readline().split()))\n    # create all subsets\n    subsets = []\n    for i in range(n+1):\n        for subset in itertools.combinations(x, i):\n            subsets.append(subset)\n    # find the subset with maximum points satisfying the condition\n    max_points = 0\n    max_subset = None\n    for subset in subsets:\n        points = set(subset)\n        for j, k in itertools.combinations(subset, 2):\n            if abs(j - k)!= 2**(len(points) - 1):\n                break\n        else:\n            if len(points) > max_points:\n                max_points = len(points)\n                max_subset = points\n    # print the answer\n    if max_subset is None:\n        return \"0\\n\"\n    else:\n        return f\"{max_points}\\n{max_subset}\\n\"\n\n\nimport itertools\n\nprint(solution(\"6\\n3 5 4 7 10 12\"))\nprint(solution(\"5\\n-1 2 5 8 11\"))"
    },
    {
        "number": 4158,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    x = list(map(int, stdin.split()[1:]))\n    x.sort()\n    ans = []\n    for i in range(n):\n        for j in range(i+1, n):\n            if (x[j] - x[i]) & (x[j] - x[i] - 1) == 0:\n                ans.append(x[i:j+1])\n    if not ans:\n        return \"0\"\n    ans.sort(key=len)\n    return str(len(ans[-1])) + \"\\n\" + \" \".join(map(str, ans[-1]))"
    },
    {
        "number": 4158,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    points = list(map(int, stdin.readline().strip().split()))\n    \n    max_points = 0\n    for i in range(n):\n        for j in range(i+2, n+1):\n            diff = abs(points[i]-points[j])\n            if diff & (diff-1) == 0:\n                max_points = max(max_points, j-i+1)\n    \n    result = []\n    for i in range(max_points):\n        result.append(points[i])\n    \n    return f\"{max_points}\\n{' '.join(map(str, result))}\""
    },
    {
        "number": 4158,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    points = list(map(int, stdin.readline().strip().split()))\n\n    max_points = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if (points[j] - points[i]) & (points[j] - points[i]) == 0:\n                max_points += 1\n\n    print(max_points)\n\n    for i in range(n):\n        for j in range(i+1, n):\n            if (points[j] - points[i]) & (points[j] - points[i]) == 0:\n                print(points[i], points[j])"
    },
    {
        "number": 4158,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    points = list(map(int, stdin.readline().strip().split()))\n    max_power = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            power = 0\n            while (points[j] - points[i]) >> power & 1 == 0:\n                power += 1\n            if power > max_power:\n                max_power = power\n    m = 1 << max_power\n    subset = set()\n    for i in range(n):\n        for j in range(i+1, n):\n            if (points[j] - points[i]) >> max_power & 1 == 1:\n                subset.add((points[i], points[j]))\n    if len(subset) < m:\n        return str(len(subset)) + '\\n' +''.join(map(str, subset.pop()))\n    else:\n        return str(m) + '\\n' +''.join(map(str, points[:m]))"
    },
    {
        "number": 4158,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    points = list(map(int, stdin.readline().split()))\n\n    points.sort()\n\n    ans = 0\n    for i in range(1, n):\n        d = points[i] - points[i-1]\n        if d == 1:\n            ans += 1\n        elif d > 1:\n            ans += 1 + (d-1).bit_length()\n\n    if ans == 0:\n        ans = 1\n\n    max_points = [points[0]]\n    for i in range(1, n):\n        if points[i] - points[i-1] == 2**(ans-1):\n            max_points.append(points[i])\n        elif points[i] - points[i-1] > 2**(ans-1):\n            break\n\n    return f\"{ans}\\n{max_points[::-1]}\" if ans > 1 else f\"{ans}\\n{max_points[0]}\""
    },
    {
        "number": 4159,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.split())\n    if A >= K:\n        takahashi = 0\n    elif B >= K:\n        takahashi = K - A\n    else:\n        takahashi = K - B\n    aoki = A + B - takahashi\n    return f\"{takahashi} {aoki}\"\n\nprint(solution(\"2 3 3\"))"
    },
    {
        "number": 4159,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.split())\n\n    # Takahashi will start with A cookies\n    takahashi_cookies = A\n    # Aoki will start with B cookies\n    aoki_cookies = B\n\n    for i in range(K):\n        # If Takahashi has cookies, eat one\n        if takahashi_cookies > 0:\n            takahashi_cookies -= 1\n        # Otherwise, if Aoki has cookies, eat one\n        elif aoki_cookies > 0:\n            aoki_cookies -= 1\n\n    # Print the final number of cookies for Takahashi and Aoki\n    return f\"{takahashi_cookies} {aoki_cookies}\"\n"
    },
    {
        "number": 4159,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.split())\n    takahashi_cookies = A\n    aoki_cookies = B\n    for i in range(K):\n        if takahashi_cookies > 0:\n            takahashi_cookies -= 1\n        elif aoki_cookies > 0:\n            aoki_cookies -= 1\n    return str(takahashi_cookies) + \" \" + str(aoki_cookies)"
    },
    {
        "number": 4159,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.split())\n    takahashi_cookies = A\n    aoki_cookies = B\n    for _ in range(K):\n        if takahashi_cookies > 0:\n            takahashi_cookies -= 1\n        elif aoki_cookies > 0:\n            aoki_cookies -= 1\n    return f\"{takahashi_cookies} {aoki_cookies}\""
    },
    {
        "number": 4159,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.split())\n    takahashi = A\n    aoki = B\n    for _ in range(K):\n        if takahashi > 0:\n            takahashi -= 1\n        elif aoki > 0:\n            aoki -= 1\n    return f\"{takahashi} {aoki}\""
    },
    {
        "number": 4159,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.split())\n    takahashi_cookies = A\n    aoki_cookies = B\n    for i in range(K):\n        if takahashi_cookies == 0:\n            if aoki_cookies == 0:\n                continue\n            else:\n                takahashi_cookies = 1\n                aoki_cookies -= 1\n        elif aoki_cookies == 0:\n            takahashi_cookies -= 1\n        else:\n            takahashi_cookies -= 1\n            aoki_cookies -= 1\n    return f\"{takahashi_cookies} {aoki_cookies}\"\n\nprint(solution(input()))"
    },
    {
        "number": 4159,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.split())\n    takahashi_cookies = A\n    aoki_cookies = B\n    for i in range(K):\n        if takahashi_cookies > 0:\n            takahashi_cookies -= 1\n        elif aoki_cookies > 0:\n            aoki_cookies -= 1\n    return f\"{takahashi_cookies} {aoki_cookies}\"\n\nstdin = input()\nstdout = solution(stdin)\nprint(stdout)"
    },
    {
        "number": 4159,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.split())\n    takahashi_cookies = A\n    aoki_cookies = B\n    \n    for _ in range(K):\n        if takahashi_cookies > 0:\n            takahashi_cookies -= 1\n        elif aoki_cookies > 0:\n            aoki_cookies -= 1\n    \n    return f\"{takahashi_cookies} {aoki_cookies}\""
    },
    {
        "number": 4159,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.split())\n    takahashi_cookies = A\n    aoki_cookies = B\n    for _ in range(K):\n        if takahashi_cookies >= 1:\n            takahashi_cookies -= 1\n        elif aoki_cookies >= 1:\n            aoki_cookies -= 1\n    return f\"{takahashi_cookies} {aoki_cookies}\""
    },
    {
        "number": 4159,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.split())\n    takahashi_cookies = A\n    aoki_cookies = B\n    for _ in range(K):\n        if takahashi_cookies > 0:\n            takahashi_cookies -= 1\n        elif aoki_cookies > 0:\n            aoki_cookies -= 1\n    return f\"{takahashi_cookies} {aoki_cookies}\""
    },
    {
        "number": 4160,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin.strip())\n    \n    balance = 100\n    years = 1\n    while balance < x:\n        balance = balance * (1 + 0.01)\n        years += 1\n    \n    return str(years)"
    },
    {
        "number": 4160,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    balance = 100\n    years = 1\n    while balance < x:\n        balance += balance * 0.01\n        years += 1\n    return str(years)"
    },
    {
        "number": 4160,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    X = int(stdin)\n    \n    # initialize variables\n    balance = 100\n    interest_rate = 0.01\n    years = 0\n    \n    # loop until balance reaches or exceeds X\n    while balance < X:\n        # add interest to balance\n        interest = balance * interest_rate\n        balance += interest\n        \n        # increment years\n        years += 1\n    \n    # return number of years\n    return str(years)"
    },
    {
        "number": 4160,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin.strip())\n    n = 1\n    while True:\n        balance = 100 + n * 0.01 * 100\n        if balance >= x:\n            return str(n)\n        n += 1"
    },
    {
        "number": 4160,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin.strip())\n    balance = 100\n    years = 1\n    while balance < x:\n        balance += balance * 0.01\n        years += 1\n    return str(years)"
    },
    {
        "number": 4160,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    balance = 100\n    years = 0\n    while balance < X:\n        balance += balance * 0.01\n        years += 1\n    return str(years)"
    },
    {
        "number": 4160,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    balance = 100\n    years = 0\n    while balance < X:\n        balance += balance * 0.01\n        years += 1\n    return str(years)"
    },
    {
        "number": 4160,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin.strip())\n    balance = 100\n    years = 1\n    while balance < x:\n        balance += balance * 0.01\n        years += 1\n    return str(years)"
    },
    {
        "number": 4160,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin.strip())\n    balance = 100\n    years = 0\n    while balance < x:\n        balance += balance * 0.01\n        years += 1\n    return str(years)"
    },
    {
        "number": 4160,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    balance = 100\n    year = 1\n    while balance < x:\n        balance += balance * 0.01\n        year += 1\n    return str(year)\n\nprint(solution(input()))"
    },
    {
        "number": 4161,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin.strip())\n    return sum(\n        gcd(a, b, c)\n        for a in range(1, K+1)\n        for b in range(1, K+1)\n        for c in range(1, K+1)\n    )\n\ndef"
    },
    {
        "number": 4161,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin.readline().strip())\n    sum = 0\n    for i in range(1, k+1):\n        for j in range(1, k+1):\n            for z in range(1, k+1):\n                sum += max(i, j, z)\n    return str(sum)"
    },
    {
        "number": 4161,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Input\n    k = int(stdin.readline().strip())\n\n    # Calculate the sum of gcd(a,b,c) for all a, b, and c from 1 to k\n    sum_of_gcd = 0\n    for a in range(1, k+1):\n        for b in range(1, k+1):\n            for c in range(1, k+1):\n                sum_of_gcd += gcd(a, b, c)\n\n    # Output\n    return str(sum_of_gcd)\n\ndef"
    },
    {
        "number": 4161,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin)\n    result = 0\n    for a in range(1, K+1):\n        for b in range(1, K+1):\n            for c in range(1, K+1):\n                result += abs(a*b*c/gcd(a,b,c) - a*b*c)\n    return str(result)"
    },
    {
        "number": 4161,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    result = 0\n    for a in range(1, k+1):\n        for b in range(1, k+1):\n            for c in range(1, k+1):\n                result += abs(a*b*c // gcd(a, b, c) - a*b*c)\n    return str(result)\n\ndef"
    },
    {
        "number": 4161,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin)\n    total = 0\n    for a in range(1, K+1):\n        for b in range(1, K+1):\n            for c in range(1, K+1):\n                total += gcd(a, b, c)\n    return str(total)\n\n\ndef"
    },
    {
        "number": 4161,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin.strip())\n    result = 0\n    for a in range(1, K+1):\n        for b in range(1, K+1):\n            for c in range(1, K+1):\n                result += gcd(a,b,c)\n    return str(result)\n\ndef"
    },
    {
        "number": 4161,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin.readline().strip())\n    total = 0\n    for i in range(1, k+1):\n        for j in range(1, k+1):\n            for k in range(1, k+1):\n                total += gcd(i, j, k)\n    return str(total)\n\ndef"
    },
    {
        "number": 4161,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin.strip())\n    return str((K*(K+1)*(K+2))//6)"
    },
    {
        "number": 4161,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin.readline().strip())\n    return str(sum(sum(sum(i for i in range(1, k+1)) for j in range(1, k+1)) for k in range(1, k+1)))\n"
    },
    {
        "number": 4162,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    # Initialize variables\n    f_max = 0\n\n    # Compute f_max\n    for i in range(1, 1000001):\n        s = 0\n        for j in a:\n            s += i % j\n        if s > f_max:\n            f_max = s\n\n    # Return result\n    return str(f_max)"
    },
    {
        "number": 4162,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    f = 0\n    for i in range(n):\n        f += m%a[i]\n    return str(f)"
    },
    {
        "number": 4162,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.strip().split())\n    return str(sum((m % a_i) for a_i in a))"
    },
    {
        "number": 4162,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Reading input\n    n = int(stdin.readline().strip())\n    arr = list(map(int, stdin.readline().strip().split()))\n\n    # Calculating f(m)\n    max_val = 0\n    for i in range(2, 10**5+1):\n        curr_val = 0\n        for j in arr:\n            curr_val += i % j\n        if curr_val > max_val:\n            max_val = curr_val\n\n    # Returning output\n    return str(max_val)"
    },
    {
        "number": 4162,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    f_max = 0\n    for i in range(1, 1000001):\n        f = sum([i % num for num in a])\n        if f > f_max:\n            f_max = f\n    return str(f_max)"
    },
    {
        "number": 4162,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, *arr = map(int, stdin.strip().split())\n    mods = [0] * (max(arr) + 1)\n    for num in arr:\n        for i in range(num, len(mods)):\n            mods[i] += num\n    max_val = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            max_val = max(max_val, mods[i] + mods[j])\n    return str(max_val)\n"
    },
    {
        "number": 4162,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    f_max = 0\n    for i in range(1, 10001):\n        f = sum([i % x for x in a])\n        if f > f_max:\n            f_max = f\n    return str(f_max)"
    },
    {
        "number": 4162,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n\n    # Compute f(m) for all m <= 10^6\n    f = [0] * (10**6 + 1)\n    for m in range(1, 10**6+1):\n        for ai in a:\n            f[m] = (f[m] + m % ai) % 1000000007\n\n    # Find maximum value of f\n    max_f = 0\n    for m in range(2, 10**6+1):\n        max_f = max(max_f, f[m])\n\n    return str(max_f)"
    },
    {
        "number": 4162,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.strip().split()\n    n = int(input_list[0])\n    a_list = [int(num) for num in input_list[1:]]\n\n    max_sum = sum([num for num in range(1, max(a_list)*2+1)])\n\n    for i in range(max_sum):\n        mod_sum = 0\n        for j in range(n):\n            mod_sum += i % a_list[j]\n        if mod_sum == i:\n            return str(i)\n\ndef"
    },
    {
        "number": 4162,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = list(map(int, stdin.strip().split()))\n    f = lambda m: sum([m % i for i in a])\n    return str(max(range(1, max(a)*2), key=f))"
    },
    {
        "number": 4163,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # get input\n    lines = stdin.strip().split('\\n')\n    N = int(lines[0])\n    dice_rolls = [[int(num) for num in line.split()] for line in lines[1:]]\n    \n    # check for doublets\n    for i in range(N-2):\n        if dice_rolls[i][0] == dice_rolls[i][1] == dice_rolls[i+1][0] == dice_rolls[i+1][1] == dice_rolls[i+2][0] == dice_rolls[i+2][1]:\n            return \"Yes\"\n    \n    return \"No\""
    },
    {
        "number": 4163,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    prev_first = None\n    prev_second = None\n    count = 0\n    for i in range(n):\n        first, second = map(int, stdin.readline().split())\n        if first == second:\n            if prev_first == prev_second == first:\n                count += 1\n            else:\n                count = 1\n            if count >= 3:\n                return 'Yes'\n            prev_first, prev_second = first, second\n        else:\n            prev_first, prev_second = first, second\n            count = 0\n    return 'No'"
    },
    {
        "number": 4163,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    prev_dice1 = -1\n    prev_dice2 = -1\n    count = 0\n    for i in range(n):\n        dice1, dice2 = map(int, stdin.readline().strip().split())\n        if dice1 == dice2:\n            if prev_dice1 == prev_dice2:\n                count += 1\n                if count == 3:\n                    return \"Yes\"\n            else:\n                count = 0\n        prev_dice1 = dice1\n        prev_dice2 = dice2\n    return \"No\""
    },
    {
        "number": 4163,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    rolls = []\n    for i in range(n):\n        line = stdin.readline().split()\n        rolls.append((int(line[0]), int(line[1])))\n    count = 0\n    for i in range(n-2):\n        if rolls[i][0] == rolls[i+1][0] == rolls[i+2][0] or rolls[i][1] == rolls[i+1][1] == rolls[i+2][1]:\n            count += 1\n            if count == 2:\n                return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4163,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    prev_two = (int(stdin.readline().strip()), int(stdin.readline().strip()))\n    curr = (int(stdin.readline().strip()), int(stdin.readline().strip()))\n    count = 0\n    for i in range(2, n):\n        if curr == prev_two and curr == (int(stdin.readline().strip()), int(stdin.readline().strip())):\n            count += 1\n            if count == 2:\n                return 'Yes'\n        else:\n            count = 0\n        prev_two = curr\n        curr = (int(stdin.readline().strip()), int(stdin.readline().strip()))\n    return 'No'"
    },
    {
        "number": 4163,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    rolls = [[int(x) for x in stdin.readline().strip().split()] for _ in range(n)]\n    for i in range(n-2):\n        if rolls[i][0] == rolls[i+1][0] == rolls[i+2][0] or rolls[i][1] == rolls[i+1][1] == rolls[i+2][1]:\n            return 'Yes'\n    return 'No'\n\nwith open('input.txt', 'r') as f:\n    stdin = f.read()\n\nprint(solution(stdin))"
    },
    {
        "number": 4163,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    d = [list(map(int, i.split())) for i in stdin.split('\\n')[1:-1]]\n    for i in range(n-2):\n        if d[i][0] == d[i+1][0] == d[i+2][0] or d[i][1] == d[i+1][1] == d[i+2][1]:\n            return 'Yes'\n    return 'No'"
    },
    {
        "number": 4163,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    prev_d1 = prev_d2 = None\n    count = 0\n    for i in range(N):\n        d1, d2 = map(int, stdin.readline().strip().split())\n        if d1 == d2 and prev_d1 == prev_d2 and prev_d1 == d1:\n            count += 1\n        else:\n            count = 0\n        prev_d1, prev_d2 = d1, d2\n        if count >= 3:\n            return \"Yes\"\n    return \"No\"\n\nprint(solution(open(\"input.txt\")))"
    },
    {
        "number": 4163,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N = int(stdin.readline().strip())\n    dice_rolls = []\n    for _ in range(N):\n        dice_rolls.append(tuple(map(int, stdin.readline().strip().split())))\n    \n    # Check for doublets\n    for i in range(N - 2):\n        if dice_rolls[i][0] == dice_rolls[i][1] == dice_rolls[i+1][0] == dice_rolls[i+1][1] == dice_rolls[i+2][0] == dice_rolls[i+2][1]:\n            return \"Yes\"\n    \n    return \"No\""
    },
    {
        "number": 4163,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    N = int(lines[0])\n    history = []\n    for i in range(1, N+1):\n        roll = tuple(map(int, lines[i].split()))\n        history.append(roll)\n    for i in range(2, N):\n        if history[i-2] == history[i] == history[i-1]:\n            return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4164,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    area_of_r = 3.14159265359 * (r**2)\n    area_of_1 = 3.14159265359 * (1**2)\n    return str(int(area_of_r / area_of_1))"
    },
    {
        "number": 4164,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin.readline().strip())\n    area_of_circle_r = 3.14159265359*r*r\n    area_of_circle_1 = 3.14159265359\n    result = area_of_circle_r/area_of_circle_1\n    return str(int(result))"
    },
    {
        "number": 4164,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    area_of_circle_r = 3.14 * r * r\n    area_of_circle_1 = 3.14 * 1 * 1\n    result = area_of_circle_r / area_of_circle_1\n    return str(int(result))"
    },
    {
        "number": 4164,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin.readline())\n    area_of_circle_r = 3.14 * r * r\n    area_of_circle_1 = 3.14 * 1 * 1\n    result = int(area_of_circle_r / area_of_circle_1)\n    return str(result)"
    },
    {
        "number": 4164,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    area_of_r = 3.14159265359 * r * r\n    area_of_1 = 3.14159265359 * 1 * 1\n    result = area_of_r / area_of_1\n    return str(int(result))"
    },
    {
        "number": 4164,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    area_of_circle_r = 3.14 * r * r\n    area_of_circle_1 = 3.14 * 1 * 1\n    answer = area_of_circle_r // area_of_circle_1\n    return str(answer)"
    },
    {
        "number": 4164,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin.readline().strip())\n    area_of_circle_r = (r ** 2) * 3.141592653589793\n    area_of_circle_one = (1 ** 2) * 3.141592653589793\n    answer = int(area_of_circle_r / area_of_circle_one)\n    return str(answer)\n\nstdin = \"\"\"\n2\n\"\"\"\n\nprint(solution(stdin)) # Output: 4<|im_sep|>"
    },
    {
        "number": 4164,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    area_r = 3.14 * r * r\n    area_1 = 3.14 * 1 * 1\n    area_ratio = area_r / area_1\n    return str(int(area_ratio))"
    },
    {
        "number": 4164,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    area_of_r = 3.14159 * r * r\n    area_of_1 = 3.14159 * 1 * 1\n    result = area_of_r // area_of_1\n    return str(result)\n"
    },
    {
        "number": 4164,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    area_r = 3.14 * r * r\n    area_1 = 3.14 * 1 * 1\n    result = int(area_r / area_1)\n    return str(result)"
    },
    {
        "number": 4165,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    n = int(stdin.readline().strip())\n    sides = list(map(int, stdin.readline().strip().split()))\n\n    # Check if polygon can be drawn\n    if max(sides) < sum(sides) - max(sides):\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4165,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, sides = map(int, stdin.strip().split())\n    if max(sides) >= sum(sides) - max(sides):\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4165,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    sides = list(map(int, stdin.readline().split()))\n    longest_side = max(sides)\n    if longest_side >= sum(sides) - longest_side:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4165,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    sides = list(map(int, stdin.readline().split()))\n\n    # Check if the polygon can be drawn\n    if max(sides) <= sum(sides) - max(sides):\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4165,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n = int(stdin.readline().strip())\n    sides = list(map(int, stdin.readline().strip().split()))\n    \n    # check if polygon can be drawn\n    if max(sides) <= sum(sides[:-1]):\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4165,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    N = int(stdin.readline().strip())\n    lengths = list(map(int, stdin.readline().strip().split()))\n\n    # check if theorem is satisfied\n    longest_length = max(lengths)\n    sum_of_other_lengths = sum(lengths) - longest_length\n    if longest_length < sum_of_other_lengths:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4165,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    n = int(lines[0])\n    sides = list(map(int, lines[1].split()))\n    if max(sides) <= sum(sides[:-1]):\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4165,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    n = int(lines[0])\n    sides = list(map(int, lines[1].split()))\n    longest_side = max(sides)\n    other_sides_sum = sum(sides) - longest_side\n    return \"Yes\" if longest_side < other_sides_sum else \"No\"\n"
    },
    {
        "number": 4165,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # get input\n    N = int(stdin.readline().strip())\n    lengths = list(map(int, stdin.readline().strip().split()))\n\n    # check if polygon can be drawn\n    if max(lengths) < sum(lengths) - max(lengths):\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4165,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Reading input from stdin\n    N = int(stdin.readline().strip())\n    sides = list(map(int, stdin.readline().strip().split()))\n\n    # Checking if the polygon can be drawn\n    if max(sides) < sum(sides) - max(sides):\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4166,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    If there is an integer not less than 0 satisfying the following conditions, print the smallest such integer; otherwise, print -1.\n    - The integer has exactly N digits in base ten. (We assume 0 to be a 1-digit integer. For other integers, leading zeros are not allowed.)\n    - The s_i-th digit from the left is c_i. (i = 1, 2,..., M)\n\n    :param stdin: input string containing N and M followed by s_1, c_1,..., s_M, c_M\n    :return: the smallest non-negative integer that satisfies the conditions or -1 if no such integer exists\n    \"\"\"\n    n, m = map(int, stdin.split())\n    digits = [0] * n\n    for i in range(m):\n        s, c = map(int, stdin.split())\n        digits[s-1] = c\n    result = 0\n    for i, d in enumerate(digits):\n        result += d * (10**(n-1-i))\n    return str(result)\n"
    },
    {
        "number": 4166,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    digits = [0] * N\n    for i in range(M):\n        s, c = map(int, stdin.split())\n        digits[s-1] = c\n    for i in range(N):\n        if digits[i] == 0:\n            return -1\n    answer = 0\n    for i in range(N):\n        answer = answer * 10 + digits[i]\n    return str(answer)"
    },
    {
        "number": 4166,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    digits = [0]*N\n    for i in range(M):\n        s, c = map(int, stdin.split())\n        digits[s-1] = c\n    n = int(''.join(map(str, digits)))\n    if n < 0:\n        return '-1'\n    return str(n)"
    },
    {
        "number": 4166,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    N, M = map(int, lines[0].split())\n    s, c = [], []\n    for line in lines[1:]:\n        if line:\n            s.append(int(line.split()[0]))\n            c.append(int(line.split()[1]))\n\n    if N < 1 or N > 3 or M < 0 or M > 5 or len(s)!= M or len(c)!= M:\n        return -1\n    \n    for i in range(M):\n        if s[i] < 1 or s[i] > N or c[i] < 0 or c[i] > 9:\n            return -1\n    \n    for i in range(1, 10):\n        num = i\n        for j in range(M):\n            num = num * 10 + c[(j+1)%M]\n        if num >= 0:\n            return num\n    \n    return -1"
    },
    {
        "number": 4166,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    N, M = map(int, stdin.split())\n    pairs = []\n    for _ in range(M):\n        s, c = map(int, stdin.readline().split())\n        pairs.append((s, c))\n\n    # find the smallest integer that satisfies the conditions\n    def check(num: int) -> bool:\n        # convert to string and remove leading zeros\n        num_str = str(num).lstrip('0')\n        # check number of digits\n        if len(num_str)!= N:\n            return False\n        # check each digit from left\n        for s, c in pairs:\n            if int(num_str[N-s])!= c:\n                return False\n        return True\n\n    for i in range(10**N):\n        if check(i):\n            return str(i)\n    return '-1'\n"
    },
    {
        "number": 4166,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.strip().split())\n    digits = [0] * N\n    for i in range(M):\n        s, c = map(int, stdin.strip().split())\n        digits[s-1] = c\n    num = 0\n    for digit in digits:\n        num = num * 10 + digit\n    smallest = -1\n    for i in range(10**N):\n        if str(i)[:N] == ''.join(map(str, digits)):\n            smallest = i\n            break\n    return str(smallest) if smallest!= -1 else '-1'"
    },
    {
        "number": 4166,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.strip().split())\n    digits = [0] * N\n    for _ in range(M):\n        s, c = map(int, stdin.strip().split())\n        digits[s-1] = c\n    if digits[0] == 0:\n        digits[0] = 1\n    num = 0\n    for digit in digits:\n        num = num * 10 + digit\n    for i in range(1, 10**N):\n        if all(digit == digits[k] for k, digit in enumerate(str(i))):\n            return str(i)\n    return \"-1\"\n"
    },
    {
        "number": 4166,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    digits = [0] * N\n    for s, c in map(int, stdin.read().split()):\n        digits[s-1] = c\n    \n    # Check if any non-negative integer less than 10**N exists\n    for i in range(1, 10**N):\n        if all(d == i//10**(N-j) for j, d in enumerate(digits)):\n            return str(i)\n    \n    return \"-1\""
    },
    {
        "number": 4166,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.readline().strip().split())\n    nums = [0] * M\n    for i in range(M):\n        s, c = map(int, stdin.readline().strip().split())\n        nums[i] = c * (10 ** (N - s))\n    nums = sorted(nums)\n    for i in range(10 ** (N - 1), 10 ** N):\n        if all(i % 10 ** (N - j) // 10 ** (N - j - 1) == nums[j] for j in range(M)):\n            return str(i)\n    return \"-1\""
    },
    {
        "number": 4166,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    N, M = map(int, stdin.readline().split())\n    digits = []\n    for _ in range(M):\n        s, c = map(int, stdin.readline().split())\n        digits.append((s, c))\n    # check all possible integers\n    for num in range(10**(N-1), 10**N):\n        ok = True\n        for s, c in digits:\n            if num // 10**(N-s) % 10!= c:\n                ok = False\n                break\n        if ok:\n            return str(num)\n    return \"-1\"\n\nstdin = \"\"\"\n3 3\n1 7\n3 2\n1 7\n\"\"\"\n\nprint(solution(stdin))  # Output: 702"
    },
    {
        "number": 4167,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    count = 0\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            for k in range(1, n+1):\n                if i+j == j+k and j+k == k+i and i+j+k % k == 0:\n                    count += 1\n    return count"
    },
    {
        "number": 4167,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    count = 0\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            for l in range(1, n+1):\n                if (i+j)%k == 0 and (j+l)%k == 0 and (l+i)%k == 0:\n                    count += 1\n    return str(count)"
    },
    {
        "number": 4167,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    count = 0\n    for a in range(1, n+1):\n        for b in range(1, n+1):\n            if a+b > n:\n                break\n            if (a+b) % k == 0:\n                for c in range(1, n+1):\n                    if (a+b+c) % k == 0:\n                        count += 1\n    return str(count)"
    },
    {
        "number": 4167,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N,K = map(int, stdin.split())\n    count = 0\n    for a in range(1,N+1):\n        for b in range(a,N+1):\n            for c in range(b,N+1):\n                if (a+b)%K == 0 and (b+c)%K == 0 and (c+a)%K == 0:\n                    count += 1\n    return str(count)"
    },
    {
        "number": 4167,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    count = 0\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            for l in range(1, n+1):\n                if (i+j)%k == 0 and (j+l)%k == 0 and (i+l)%k == 0:\n                    count += 1\n    return count\n\nstdin = input()\nprint(solution(stdin))"
    },
    {
        "number": 4167,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    count = 0\n    for a in range(1, N+1):\n        for b in range(1, N+1):\n            c = K - (a + b)\n            if c <= 0 or c > N:\n                continue\n            if a % K == 0 and b % K == 0 and c % K == 0:\n                count += 1\n    return count"
    },
    {
        "number": 4167,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n,k = map(int,stdin.strip().split())\n    count = 0\n    for a in range(1,n+1):\n        for b in range(1,n+1):\n            if (a+b) % k == 0 and (b+a) % k == 0 and (a+b+a+b) % k == 0:\n                for c in range(1,n+1):\n                    if (a+b+c) % k == 0 and (b+c+a) % k == 0 and (c+a+b) % k == 0:\n                        count += 1\n    return count"
    },
    {
        "number": 4167,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.strip().split())\n    count = 0\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            for k in range(1, n+1):\n                if i + j == i*k + j*k or j + k == i*k + j*k or k + i == i*k + j*k:\n                    count += 1\n    return count"
    },
    {
        "number": 4167,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.strip().split())\n    count = 0\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            for l in range(1, n+1):\n                if i+j+l <= n and (i+j)%k == 0 and (j+l)%k == 0 and (i+l)%k == 0:\n                    count += 1\n    return str(count)\n\nstdin = \"3 2\"\nprint(solution(stdin)) # Output: 9"
    },
    {
        "number": 4167,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    n, k = map(int, stdin.split())\n\n    # Initialize variables\n    count = 0\n    for a in range(1, n+1):\n        for b in range(a, n+1):\n            for c in range(b, n+1):\n                if (a+b) % k == 0 and (b+c) % k == 0 and (c+a) % k == 0:\n                    count += 1\n\n    return count"
    },
    {
        "number": 4168,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return '0'\n    s = ''\n    while n:\n        s += str(n & 1)\n        n >>= 1\n    if s[0] == '0':\n        s = '1' + s\n    return s"
    },
    {
        "number": 4168,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return \"0\"\n    s = \"\"\n    while n:\n        s = str(n & 1) + s\n        n >>= 1\n    if s[0] == \"0\":\n        s = \"1\" + s\n    return s"
    },
    {
        "number": 4168,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    binary = bin(n)[2:]\n    if binary[0] == '0':\n        return '1' + binary\n    else:\n        return binary\n\nprint(solution(input()))"
    },
    {
        "number": 4168,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    if n == 0:\n        return '0'\n    s = ''\n    while n > 0:\n        if n & 1 == 1:\n            s = '1' + s\n        else:\n            s = '0' + s\n        n >>= 1\n    return s"
    },
    {
        "number": 4168,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n == 0:\n        return '0'\n    s = ''\n    while n:\n        if n % 2 == 0:\n            s = '0' + s\n            n //= 2\n        else:\n            s = '1' + s\n            n -= 1\n    return s\n"
    },
    {
        "number": 4168,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return '0'\n    s = ''\n    while n > 0:\n        if n % -2 == 0:\n            s += '0'\n            n //= -2\n        else:\n            s += '1'\n            n = (n - 1) // -2\n    return s[::-1]\n\nprint(solution(input()))"
    },
    {
        "number": 4168,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N == 0:\n        return \"0\"\n    S = \"\"\n    while N > 0:\n        if N % (-2) == 1:\n            S = \"1\" + S\n            N -= 1\n        else:\n            S = \"0\" + S\n        N //= -2\n    return S"
    },
    {
        "number": 4168,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return '0'\n    s = ''\n    while n > 0:\n        s = str(n % -2) + s\n        n //= -2\n    if s[0]!= '1':\n        s = '1' + s\n    return s"
    },
    {
        "number": 4168,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    if N == 0:\n        return '0'\n    result = ''\n    while N > 0:\n        remainder = N % -2\n        if remainder < 0:\n            remainder += -2\n            N -= 1\n        result = str(remainder) + result\n        N //= -2\n    if not result[0] == '1':\n        result = '1' + result\n    return result"
    },
    {
        "number": 4168,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N == 0:\n        return '0'\n    s = ''\n    while N!= 0:\n        if N % 2 == 1:\n            s = '1' + s\n        else:\n            s = '0' + s\n        N //= 2\n    return s"
    },
    {
        "number": 4169,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.readline().split())\n    A = list(map(int, stdin.readline().split()))\n    B = list(map(int, stdin.readline().split()))\n\n    cans_bought = [0] * N\n    money_spent = 0\n\n    for i in range(N):\n        cans_bought[i] = min(M, B[i])\n        money_spent += A[i] * cans_bought[i]\n        M -= cans_bought[i]\n\n    return str(money_spent)\n\nwith open('input.txt') as f:\n    input_str = f.read()\n\noutput_str = solution(input_str)\nprint(output_str)"
    },
    {
        "number": 4169,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N, M = map(int, stdin.readline().strip().split())\n    A_arr = list(map(int, stdin.readline().strip().split()))\n    B_arr = list(map(int, stdin.readline().strip().split()))\n\n    # Initialize variables\n    total_cost = 0\n    remaining_cans = M\n\n    # Iterate through stores\n    for i in range(N):\n        can_buy = min(B_arr[i], remaining_cans)\n        total_cost += can_buy * A_arr[i]\n        remaining_cans -= can_buy\n        if remaining_cans == 0:\n            break\n\n    # Output result\n    return str(total_cost)"
    },
    {
        "number": 4169,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    n, m = map(int, stdin.readline().strip().split())\n    a_b = [list(map(int, line.strip().split())) for line in stdin]\n\n    # Sort stores by price\n    a_b.sort(key=lambda x: x[0])\n\n    # Initialize variables\n    total_cost = 0\n    cans_bought = 0\n\n    # Iterate through stores and buy cans\n    for a, b in a_b:\n        # Calculate how many cans we can buy\n        can_buy = min(b, m - cans_bought)\n\n        # Update total cost and cans bought\n        total_cost += can_buy * a\n        cans_bought += can_buy\n\n        # Exit if we have bought enough cans\n        if cans_bought >= m:\n            break\n\n    # Return total cost\n    return str(total_cost)"
    },
    {
        "number": 4169,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Read input from stdin\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.readline().strip().split()))\n    b = list(map(int, stdin.readline().strip().split()))\n\n    # Sort stores by decreasing order of price\n    sorted_stores = sorted(zip(a, b), key=lambda x: x[0], reverse=True)\n\n    # Initialize variables\n    total_cost = 0\n    current_budget = m\n\n    for i in range(n):\n        # Calculate remaining budget after buying energy drinks\n        remaining_budget = current_budget - sorted_stores[i][1]\n\n        # If remaining budget is sufficient, buy all drinks from this store\n        if remaining_budget >= 0:\n            total_cost += sorted_stores[i][0] * sorted_stores[i][1]\n            current_budget = remaining_budget\n\n        # If remaining budget is insufficient, buy as many drinks as possible from this store\n        else:\n            total_cost += sorted_stores[i][0] * remaining_budget\n            current_budget = 0\n\n        # Check if we have bought enough drinks\n        if current_budget == 0:\n            break\n\n    return str(total_cost)"
    },
    {
        "number": 4169,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    dp = [0] * (m+1)\n    for i in range(n):\n        dp[1] = dp[0] + a[i] * b[i]\n        for j in range(2, m+1):\n            dp[j] = max(dp[j-1], dp[j-b[i]] + a[i] * (j - b[i]))\n    return dp[m]\n\nstdin = input()\nstdout = solution(stdin)\nprint(stdout)"
    },
    {
        "number": 4169,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    N, M = map(int, stdin.readline().split())\n    A = list(map(int, stdin.readline().split()))\n    B = list(map(int, stdin.readline().split()))\n\n    # sort stores by price\n    stores = sorted(zip(A, B), key=lambda x: x[0])\n\n    # initialize variables\n    ans = 0\n    can_buy = 0\n    for i in range(N):\n        # add price for the i-th store\n        ans += stores[i][0]\n        # update amount of cans that can be bought\n        can_buy += stores[i][1]\n        # if can_buy >= M, then we can buy M drinks\n        if can_buy >= M:\n            return str(ans)\n    return 'No solution'"
    },
    {
        "number": 4169,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    N, M = map(int, stdin.readline().split())\n    A = list(map(int, stdin.readline().split()))\n    B = list(map(int, stdin.readline().split()))\n    # calculate minimum amount of money with which Takahashi can buy M cans of energy drinks\n    max_A = max(A)\n    min_A = min(A)\n    min_B = min(B)\n    if M < min_B:\n        return \"No Solution\"\n    else:\n        return max(min_A * (M // min_B), (M % min_B) * max_A)\n"
    },
    {
        "number": 4169,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    n, m = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    # sort input by value of A\n    a_sorted = sorted(enumerate(a), key=lambda x: x[1])\n    # initialize dp array\n    dp = [0] * m\n    # iterate through stores in decreasing order of A\n    for i in range(n):\n        # iterate through amounts of drinks\n        for j in range(m):\n            # if we can't buy a drink, dp[j] doesn't change\n            if j < b[i]:\n                continue\n            # calculate the maximum amount of drinks we can buy\n            # from this store at this amount of money\n            max_drinks = min(m, j // a[i])\n            # add the maximum amount of money we can buy from this store\n            # to the minimum of the dp array and the amount of money\n            # we need to buy the remaining cans of drinks\n            dp[j] = max(dp[j], dp[j - max_drinks * a[i]] + max_drinks * a[i])\n    # return the minimum amount of money needed to buy M cans\n    return dp[m - 1]\n"
    },
    {
        "number": 4169,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    \n    # sort stores by price\n    a, b = zip(*sorted(zip(a, b)))\n    \n    # initialize variables\n    ans = 0\n    i = 0\n    j = 0\n    \n    # iterate through stores\n    while i < n:\n        # add can to current store\n        ans += a[i]\n        j += 1\n        \n        # check if we have enough drinks\n        if j == m:\n            return str(ans)\n        \n        # check if we need to move to next store\n        if j == b[i]:\n            i += 1\n            j = 0\n    \n    # not enough drinks\n    return \"No solution\""
    },
    {
        "number": 4169,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N, M = map(int, stdin.strip().split())\n    A = []\n    B = []\n    for i in range(N):\n        a, b = map(int, stdin.readline().strip().split())\n        A.append(a)\n        B.append(b)\n\n    # Sort stores by price\n    A, B = zip(*sorted(zip(A, B)))\n\n    # Calculate maximum number of drinks that can be bought\n    max_drinks = sum(B)\n\n    # If there are more drinks to buy than we can buy, return -1\n    if max_drinks < M:\n        return -1\n\n    # Calculate minimum price\n    min_price = sum(a for a in A[:M-max_drinks])\n\n    return min_price"
    },
    {
        "number": 4170,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    heights = list(map(int, stdin.readline().strip().split()))\n\n    # Initialize the variables\n    count = 0\n    max_count = 0\n    i = 0\n\n    # Move to the adjacent square on the right as long as the height of the next square is not greater than that of the current square\n    while i < n-1:\n        count += 1\n        if heights[i] <= heights[i+1]:\n            i += 1\n        else:\n            break\n\n    # Update the maximum count\n    max_count = max(max_count, count)\n\n    # Repeat the process for all squares from the left to the right\n    for i in range(1, n):\n        count = 0\n        j = i\n        # Move to the adjacent square on the right as long as the height of the next square is not greater than that of the current square\n        while j < n-1:\n            count += 1\n            if heights[j] <= heights[j+1]:\n                j += 1\n            else:\n                break\n        # Update the maximum count\n        max_count = max(max_count, count)\n\n    # Return the maximum count\n    return str(max_count)"
    },
    {
        "number": 4170,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N = int(stdin.readline().strip())\n    H = list(map(int, stdin.readline().strip().split()))\n\n    # Initialize variables\n    max_moves = 0\n    i = 0\n\n    # Iterate through the squares\n    while i < N-1:\n        # Check if moving to the right is possible\n        if H[i] <= H[i+1]:\n            i += 1\n            max_moves += 1\n        else:\n            break\n\n    # Return result\n    return max_moves"
    },
    {
        "number": 4170,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    heights = list(map(int, stdin.readline().strip().split()))\n\n    max_jumps = 0\n    current_height = heights[0]\n    for i in range(1, n):\n        if heights[i] > current_height:\n            max_jumps += 1\n            current_height = heights[i]\n\n    return str(max_jumps)"
    },
    {
        "number": 4170,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Reading input from stdin\n    lines = stdin.split(\"\\n\")\n    N = int(lines[0])\n    heights = list(map(int, lines[1].split()))\n\n    # Initializing variables\n    max_moves = 0\n    current_height = heights[0]\n    i = 1\n\n    # Looping through the squares\n    while i < N:\n        # If the height of the next square is not greater than that of the current square, move to the next square\n        if heights[i] <= current_height:\n            current_height = heights[i]\n            i += 1\n            max_moves += 1\n        # If the height of the next square is greater than that of the current square, do not move and continue with current height\n        else:\n            break\n\n    # Printing the result\n    print(max_moves)"
    },
    {
        "number": 4170,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # get input\n    n = int(stdin.readline().strip())\n    heights = [int(x) for x in stdin.readline().strip().split()]\n\n    # initialize variables\n    max_moves = 0\n    current_height = heights[0]\n    i = 0\n\n    # loop through squares\n    while i < n-1:\n        # if the next square is taller than the current one, move to it\n        if heights[i+1] <= current_height:\n            i += 1\n            max_moves += 1\n        # if the next square is not taller, stop moving\n        else:\n            break\n\n        # update current height\n        current_height = heights[i]\n\n    # print result\n    print(max_moves)\n\n    return \"\""
    },
    {
        "number": 4170,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    n = int(stdin.readline().strip())\n    heights = list(map(int, stdin.readline().strip().split()))\n    \n    # find maximum number of moves\n    max_moves = 0\n    curr_height = heights[0]\n    for i in range(1, n):\n        if heights[i] <= curr_height:\n            max_moves += 1\n            curr_height = heights[i]\n        else:\n            max_moves = 1\n            curr_height = heights[i]\n    \n    # print result\n    print(max_moves)\n    return \"\""
    },
    {
        "number": 4170,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Reading input\n    n = int(stdin.readline().strip())\n    heights = list(map(int, stdin.readline().strip().split()))\n\n    # Initialize variables\n    max_moves = 0\n    current_height = 0\n\n    # Loop through all squares\n    for height in heights:\n        # Check if current height is greater than or equal to next height\n        if height >= current_height:\n            # Increment max moves\n            max_moves += 1\n            # Update current height\n            current_height = height\n        else:\n            # If current height is less than next height, reset max moves\n            max_moves = 1\n            # Update current height\n            current_height = height\n\n    # Print max moves\n    print(max_moves)\n"
    },
    {
        "number": 4170,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # read input from stdin\n    N = int(stdin.readline().strip())\n    H = list(map(int, stdin.readline().strip().split()))\n\n    # initialize variables\n    max_moves = 0\n    current_height = H[0]\n    current_moves = 1\n\n    # iterate through squares\n    for i in range(1, N):\n        # if height is greater than current height, update current height and moves\n        if H[i] > current_height:\n            current_height = H[i]\n            current_moves = 1\n        # otherwise, increment moves\n        else:\n            current_moves += 1\n        # update max moves if necessary\n        if current_moves > max_moves:\n            max_moves = current_moves\n\n    # print result\n    return str(max_moves)"
    },
    {
        "number": 4170,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Read the input\n    N = int(stdin.readline().strip())\n    heights = list(map(int, stdin.readline().strip().split()))\n    \n    # Initialize the variables\n    max_moves = 0\n    current_height = heights[0]\n    \n    # Loop through the squares\n    for i in range(1, N):\n        # If the height of the next square is not greater than the current square,\n        # update the number of moves\n        if heights[i] <= current_height:\n            max_moves += 1\n            current_height = heights[i]\n        # Otherwise, update the current height\n        else:\n            current_height = heights[i]\n    \n    # Return the maximum number of moves\n    return str(max_moves)"
    },
    {
        "number": 4170,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    H = list(map(int, stdin.readline().strip().split()))\n    max_moves = 0\n    height = H[0]\n    for i in range(1, N):\n        if H[i] > height:\n            max_moves += 1\n            height = H[i]\n    print(max_moves)\n\nsolution(input())"
    },
    {
        "number": 4171,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    operations = 0\n\n    for i in range(n):\n        if a[i] % 2 == 1:\n            a[i] -= 1\n            operations += 1\n\n    count = 0\n    for i in range(n):\n        if a[i] == 0:\n            count += 1\n        else:\n            break\n\n    if count >= k:\n        return str(operations)\n    else:\n        return str(operations + (k - count))\n\n\nprint(solution(\"5 3\\n1 2 2 4 5\")) # 1\nprint(solution(\"5 3\\n1 2 3 4 5\")) # 2\nprint(solution(\"5 3\\n1 2 3 3 3\")) # 0"
    },
    {
        "number": 4171,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    \n    operations = 0\n    \n    for i in range(n):\n        # if a[i] < k, it means that we don't have enough elements to make k equal elements\n        if a[i] < k:\n            operations += k - a[i]\n            a[i] = k\n    \n    return operations\n"
    },
    {
        "number": 4171,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    count = 0\n    for i in range(n):\n        if a[i] % 2!= 0:\n            a[i] -= 1\n            count += 1\n\n    while k > 0:\n        if count >= k:\n            return count\n        count += 2*k - count\n\n    return count\n\nprint(solution(\"5 3\\n1 2 2 4 5\")) # Output: 1\nprint(solution(\"5 3\\n1 2 3 4 5\")) # Output: 2\nprint(solution(\"5 3\\n1 2 3 3 3\")) # Output: 0"
    },
    {
        "number": 4171,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    \n    count = 0\n    while True:\n        new_a = [x // 2 for x in a]\n        count += sum(new_a) - sum(a)\n        a = new_a\n        if sum(a) >= k:\n            break\n    return count"
    },
    {
        "number": 4171,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:]))\n\n    count = 0\n    for i in range(n):\n        if a[i] >= k:\n            return count\n        while a[i] % 2 == 0 and a[i] >= k:\n            a[i] //= 2\n            count += 1\n\n    return count\n"
    },
    {
        "number": 4171,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n\n    # count the frequency of each number\n    freq = [0] * (2 * 10**5 + 1)\n    for num in a:\n        freq[num] += 1\n\n    # find the minimum number of operations\n    ops = 0\n    for i in range(2 * 10**5 + 1):\n        if freq[i] > 0 and freq[i] < k:\n            # if the number has more than k occurrences\n            # or less than k occurrences but there are more than k distinct numbers\n            # then we need to add the minimum number of operations to obtain k equal numbers\n            ops += k - freq[i]\n\n    # if there are more than k equal numbers\n    # then we need to add the remaining operations to obtain k distinct numbers\n    if freq[0] >= k:\n        ops += k - freq[0]\n    else:\n        distinct = 1\n        for i in range(1, 2 * 10**5 + 1):\n            if freq[i] > 0:\n                distinct += 1\n            if distinct > k:\n                ops += distinct - k\n                break\n\n    return str(ops)"
    },
    {
        "number": 4171,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    freq = [0] * (n + 1)\n    for num in a:\n        freq[num] += 1\n\n    for i in range(n):\n        if freq[i] >= k:\n            return i\n\n    return n\n\ndef"
    },
    {
        "number": 4171,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    cnt = 0\n    while True:\n        flag = False\n        for i in range(n):\n            if a[i] % 2 == 1:\n                a[i] -= 1\n                cnt += 1\n                flag = True\n        if not flag:\n            break\n    return cnt\n\nprint(solution(\"5 3\\n1 2 2 4 5\")) # Output: 1\nprint(solution(\"5 3\\n1 2 3 4 5\")) # Output: 2\nprint(solution(\"5 3\\n1 2 3 3 3\")) # Output: 0"
    },
    {
        "number": 4171,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n\n    # Initialize count of elements\n    count = 0\n    # Initialize dictionary to keep track of frequency of elements\n    freq = {}\n    for num in a:\n        freq[num] = freq.get(num, 0) + 1\n\n    # Loop until all k elements are equal\n    while count < k:\n        # Check if all elements are equal\n        if len(freq) == 1:\n            # All elements are equal, exit loop\n            break\n        # Find the minimum frequency element\n        min_freq = min(freq.values())\n        # If minimum frequency is greater than k, no solution\n        if min_freq > k:\n            return \"No solution\"\n        # If minimum frequency is equal to k, increment count and remove it from freq\n        if min_freq == k:\n            count += k\n            for num in freq:\n                if freq[num] == min_freq:\n                    del freq[num]\n                    break\n        # If minimum frequency is less than k, add minimum frequency to count and divide all elements by 2\n        else:\n            count += min_freq\n            for num in freq:\n                if freq[num] >= min_freq:\n                    freq[num] -= min_freq\n                else:\n                    freq[num] = 0\n            for num in freq:\n                freq[num] //= 2\n\n    return count\n\ndef"
    },
    {
        "number": 4171,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Parsing input\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    \n    # Initializing variables\n    count = 0\n    min_count = float('inf')\n    \n    # Looping over array\n    for i in range(n):\n        # If current element is equal to k, update count and reset min_count\n        if a[i] == k:\n            count += 1\n            min_count = 0\n        # If current element is less than k, divide it by 2 and increment count\n        elif a[i] < k:\n            count += 1\n            a[i] //= 2\n        # If current element is greater than k, decrement count\n        else:\n            count -= 1\n        # Update min_count\n        min_count = min(min_count, count)\n    \n    return min_count"
    },
    {
        "number": 4172,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().strip().split())\n    a = list(map(int, stdin.readline().strip().split()))\n    freq = [0] * (n + 1)\n    for i in a:\n        freq[i] += 1\n    res = 0\n    for i in range(1, n + 1):\n        if freq[i] == 0:\n            continue\n        if k > 0:\n            freq[i] -= 1\n            k -= 1\n        else:\n            if freq[i] > 0:\n                freq[i] -= 1\n            if freq[i-1] > 0:\n                freq[i-1] -= 1\n        res += 1\n    return res"
    },
    {
        "number": 4172,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    count = 0\n    while k > 0:\n        mn = min(a)\n        mx = max(a)\n        i = a.index(mn)\n        if a[i] == mn:\n            a[i] += 1\n            k -= 1\n        if k == 0:\n            break\n        i = a.index(mx)\n        if a[i] == mx:\n            a[i] -= 1\n            k -= 1\n        count += 1\n    return count"
    },
    {
        "number": 4172,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    count = 0\n    max_count = k\n    for i in range(n):\n        if a[i] == 1:\n            count += 1\n            max_count -= 1\n        if count >= k:\n            return i + 1\n        if max_count == 0:\n            break\n\n    return n + 1"
    },
    {
        "number": 4172,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    \n    # sort the array\n    a.sort()\n    \n    # find the minimum number of moves\n    moves = 0\n    i = 0\n    j = n-1\n    while i < j and a[i] < k:\n        i += 1\n    while i < j and a[j] < k:\n        j -= 1\n    moves += i + j\n    \n    return str(moves)\n\ndef"
    },
    {
        "number": 4172,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    \n    # Sort the array\n    a.sort()\n    \n    # Initialize variables\n    i, j = 0, n-1\n    moves = 0\n    count = 0\n    \n    # Loop through the array\n    while count < k:\n        # If the minimum element has a count of one, increase it\n        if a[i] == a[i+1]:\n            a[i] += 1\n            count += 1\n            moves += 1\n        else:\n            # If the maximum element has a count of one, decrease it\n            if a[j] == a[j-1]:\n                a[j] -= 1\n                count += 1\n                moves += 1\n            else:\n                # If both minimum and maximum elements have a count greater than one, move one of them to the other side\n                if a[i] == a[j]:\n                    a[i] += 1\n                    a[j] -= 1\n                    count += 1\n                    moves += 1\n                else:\n                    # If there are no elements to move, increase the minimum element and decrease the maximum element\n                    a[i] += 1\n                    a[j] -= 1\n                    count += 1\n                    moves += 1\n    \n    # Return the number of moves required\n    return moves"
    },
    {
        "number": 4172,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # get input from stdin\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    # initialize variables\n    moves = 0\n    equal = 0\n    min_val = min(a)\n    max_val = max(a)\n\n    # iterate until k equal elements are found\n    while equal < k:\n        # check if minimum value can be increased\n        if a.count(min_val) < k - equal:\n            # increase all minimum values\n            moves += k - equal - a.count(min_val)\n            a = [max(i-1, 0) if i == min_val else i for i in a]\n            min_val = min(a)\n        else:\n            # increase minimum value to k - equal\n            moves += k - equal - a.count(min_val)\n            min_index = a.index(min_val)\n            a[min_index] += 1\n            min_val += 1\n        equal = sum(i == min_val for i in a) + sum(i == max_val for i in a)\n\n    return str(moves)"
    },
    {
        "number": 4172,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    n, k = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n\n    # Sort array\n    a.sort()\n\n    # Count the number of equal elements\n    equal = 1\n    for i in range(1, n):\n        if a[i]!= a[i-1]:\n            equal += 1\n        if equal == k:\n            return equal\n\n    # Check if k is a multiple of n\n    if k % n == 0:\n        return k // n\n\n    # If not, add the remaining elements\n    remaining = k - equal\n    for i in range(n-1, -1, -1):\n        if a[i] == a[i-1]:\n            a[i] += 1\n            remaining -= 1\n            if remaining == 0:\n                return k\n            a[i-1] -= 1\n\n    # Should not reach here\n    return -1"
    },
    {
        "number": 4172,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    moves = 0\n    while True:\n        min_val = min(a)\n        max_val = max(a)\n        min_idx = a.index(min_val)\n        max_idx = a.index(max_val)\n        if min_val == max_val:\n            break\n        if min_val < max_val:\n            a[min_idx] += 1\n        else:\n            a[max_idx] -= 1\n        moves += 1\n    return moves\n\nprint(solution(input()))"
    },
    {
        "number": 4172,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    count = 0\n    while k > 0:\n        min_idx = a.index(min(a))\n        a[min_idx] += 1\n        count += 1\n        k -= 1\n    return count"
    },
    {
        "number": 4172,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.strip().split()))\n    a = list(map(int, stdin.strip().split()))\n\n    a.sort()\n    count = 0\n    for i in range(1, n):\n        if a[i]!= a[i-1]:\n            count += 1\n            if count == k:\n                break\n    return count"
    },
    {
        "number": 4173,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    lines = stdin.split('\\n')\n    q = int(lines[0])\n    queries = []\n    for i in range(1, q+1):\n        n, a, b = map(int, lines[i].split())\n        queries.append((n, a, b))\n\n    # initialize variables\n    bottles = []\n    burles = 0\n    for a, b in sorted([queries[0][1], queries[0][2]], reverse=True):\n        bottles += [a]*(burles//a) + [b]*(burles%a)\n        burles = sum(bottles)\n    return '\\n'.join(map(str, [burles] + [min(a, b) * n for n, a, b in queries]))"
    },
    {
        "number": 4173,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    q = int(lines[0])\n    queries = []\n    for i in range(1, q+1):\n        n, a, b = map(int, lines[i].split())\n        queries.append((n, a, b))\n\n    ans = []\n    for query in queries:\n        n, a, b = query\n        if n % 2 == 0:\n            ans.append(min(n//2 * a, n//2 * b))\n        else:\n            ans.append(min((n+1)//2 * a, (n+1)//2 * b))\n\n    return \"\\n\".join(map(str, ans))"
    },
    {
        "number": 4173,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    q = int(stdin.readline().strip())\n    queries = []\n    for _ in range(q):\n        n, a, b = map(int, stdin.readline().strip().split())\n        queries.append((n, a, b))\n    \n    # initialize variables\n    total_burles = 0\n    total_bottles = 0\n    first_type = 0\n    second_type = 0\n    \n    # calculate minimum cost\n    for n, a, b in queries:\n        # calculate minimum number of first type bottles required\n        first_type = n // 2\n        if n % 2!= 0:\n            first_type += 1\n        \n        # calculate minimum burles required\n        burles_required = first_type * a + (n - first_type) * b\n        \n        # update variables\n        total_burles += burles_required\n        total_bottles += n\n        \n        # calculate remaining bottles required\n        remaining_bottles = (total_burles // b) + (total_burles % b!= 0)\n        \n        # update minimum cost for second type\n        second_type = remaining_bottles - total_bottles\n        \n        # print answer for current query\n        print(second_type)"
    },
    {
        "number": 4173,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.split()[0])\n    for i in range(q):\n        n, a, b = map(int, stdin.split())\n        if n % 2 == 1:\n            print((a * n // 2) + b * (n // 2 + 1))\n        else:\n            print(a * (n // 2) + b * (n // 2))\n    return \"\""
    },
    {
        "number": 4173,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    queries = [list(map(int, input().split())) for _ in range(int(stdin.split()[0]))]\n    water_bottles = 0\n    cost_1_bottle = 0\n    cost_2_bottle = 0\n    for query in queries:\n        n, a, b = query\n        if water_bottles + a >= n:\n            cost_1_bottle += n * a\n            water_bottles += n\n        else:\n            cost_1_bottle += water_bottles * a\n            water_bottles = 0\n            if water_bottles + b >= n:\n                cost_1_bottle += n * b\n                water_bottles += n\n            else:\n                cost_1_bottle += water_bottles * b\n                cost_2_bottle += (n - water_bottles) * b\n                water_bottles = n - water_bottles\n        print(cost_1_bottle + cost_2_bottle)\n    return \"\""
    },
    {
        "number": 4173,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.splitlines()[0])\n    stdin = stdin.splitlines()[1:]\n    for i in range(q):\n        n, a, b = map(int, stdin[i].split())\n        total = n // 2 * a + n % 2 * b\n        print(total)\n\nstdin = '''\n4\n10 1 3\n7 3 2\n1 1000 1\n1000000000000 42 88\n'''\n\nsolution(stdin)"
    },
    {
        "number": 4173,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    queries = []\n    for line in stdin.splitlines():\n        n, a, b = map(int, line.split())\n        queries.append((n, a, b))\n\n    burles = 0\n    for n, a, b in queries:\n        if n % 2 == 0:\n            burles += n // 2 * min(a, b)\n        else:\n            burles += n // 2 * min(a, b) + a\n        burles += max(0, n % 2 - 1) * max(a, b)\n\n    return str(burles)"
    },
    {
        "number": 4173,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    q = int(stdin.readline())\n    queries = []\n    for i in range(q):\n        n, a, b = map(int, stdin.readline().split())\n        queries.append((n, a, b))\n\n    # Solve for each query\n    ans = []\n    for n, a, b in queries:\n        if n % 2 == 0:\n            ans.append(a * n // 2)\n        else:\n            ans.append(min(a * (n // 2) + b * ((n + 1) // 2), b * n))\n\n    # Print output\n    return \"\\n\".join(map(str, ans))"
    },
    {
        "number": 4173,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline())\n    water = []\n    for i in range(q):\n        n, a, b = map(int, stdin.readline().split())\n        water.append((n, a, b))\n    answer = []\n    for i in range(q):\n        n, a, b = water[i]\n        if n % 2 == 0:\n            answer.append(n//2*min(a, b))\n        else:\n            answer.append(min(n//2*a, n//2*b))\n    return '\\n'.join(map(str, answer))\n"
    },
    {
        "number": 4173,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    queries = int(stdin.readline().strip())\n    for i in range(queries):\n        n, a, b = map(int, stdin.readline().strip().split())\n        if a == b:\n            print(a*n)\n        elif a < b:\n            print(a*n)\n        else:\n            print(b*n)\n    return \"\""
    },
    {
        "number": 4174,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    N, X = map(int, stdin.readline().split())\n    L = list(map(int, stdin.readline().split()))\n\n    # initialize variables\n    count = 1\n    D = 0\n\n    # loop through bounces\n    for i in range(N):\n        D += L[i]\n        if D > X:\n            break\n        count += 1\n\n    # print result\n    print(count)"
    },
    {
        "number": 4174,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N, X = map(int, stdin.split())\n    L = list(map(int, stdin.readline().split()))\n    \n    # Initialize variables\n    count = 0\n    D = 0\n    \n    # Loop through bounces\n    for i in range(N+1):\n        D += L[i]\n        count += 1\n        if D <= X:\n            break\n    \n    # Return result\n    return count"
    },
    {
        "number": 4174,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    l = list(map(int, stdin.readline().split()))\n    count = 0\n    for i in range(1, n+1):\n        if l[i-1] + l[i-2] <= x:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4174,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, X = map(int, stdin.split())\n    L = list(map(int, stdin.readline().split()))\n    count = 0\n    for i in range(1, N+1):\n        if L[i-1] + L[i-2] > X:\n            count += 1\n    return str(count)\n"
    },
    {
        "number": 4174,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    This function takes in a string representing input from standard input, and returns the output as a string.\n\n    :param stdin: A string representing input from standard input\n    :return: A string representing the output\n    \"\"\"\n    # Parse input\n    N, X = map(int, stdin.strip().split())\n    L = list(map(int, stdin.strip().split()))\n\n    # Initialize variables\n    count = 0\n    d = 0\n    for i in range(N):\n        d = d + L[i]\n        count += 1\n        if d >= X:\n            break\n\n    return str(count)\n"
    },
    {
        "number": 4174,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N, X = map(int, stdin.readline().split())\n    L = list(map(int, stdin.readline().split()))\n\n    # Initialize variables\n    count = 0\n    last_bounce = 0\n    bounces = [0]\n\n    # Loop through bounces\n    for i in range(N):\n        next_bounce = last_bounce + L[i]\n        if next_bounce <= X:\n            count += 1\n            last_bounce = next_bounce\n            bounces.append(last_bounce)\n\n    # Return output\n    return str(count)"
    },
    {
        "number": 4174,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, X = map(int, stdin.split())\n    L = list(map(int, stdin.readline().split()))\n    # initialize variables\n    D = [0] * (N+1)\n    count = 0\n    # simulate ball bounces\n    for i in range(1, N+1):\n        D[i] = D[i-1] + L[i-1]\n        if D[i] >= X:\n            count += 1\n    # return result\n    return str(count)"
    },
    {
        "number": 4174,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    n, x = map(int, stdin.readline().split())\n    l = list(map(int, stdin.readline().split()))\n    \n    # calculate first bounce\n    d = [0] * (n+1)\n    for i in range(1, n+1):\n        d[i] = d[i-1] + l[i-1]\n    \n    # count bounces\n    count = 0\n    for i in range(n+1):\n        if d[i] <= x:\n            count += 1\n        else:\n            break\n    \n    # print result\n    return str(count)"
    },
    {
        "number": 4174,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N, X = map(int, stdin.split())\n    L = list(map(int, stdin.split()))\n    # Initialize variables\n    count = 0\n    curr_coord = 0\n    # Loop through bounces\n    for i in range(N+1):\n        # Calculate next bounce coordinate\n        next_coord = curr_coord + L[i]\n        # Check if next bounce coordinate is at most X\n        if next_coord <= X:\n            count += 1\n        # Update current coordinate\n        curr_coord = next_coord\n    # Return number of bounces at most X\n    return str(count)"
    },
    {
        "number": 4174,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N, X = map(int, stdin.split())\n    L = list(map(int, stdin.readline().split()))\n\n    # Initialize variables\n    bounce_count = 0\n    current_coordinate = 0\n\n    # Calculate bounce count and current coordinate\n    for i in range(N+1):\n        current_coordinate += L[i]\n        if current_coordinate <= X:\n            bounce_count += 1\n\n    # Return result\n    return str(bounce_count)"
    },
    {
        "number": 4175,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    words = [stdin.readline().strip() for _ in range(n)]\n\n    if len(set(words)) < len(words):\n        return \"No\"\n\n    for i in range(n - 1):\n        if not words[i][-1] == words[i+1][0]:\n            return \"No\"\n\n    return \"Yes\""
    },
    {
        "number": 4175,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    words = stdin.strip().split()\n    n = int(words[0])\n    prev_word = ''\n    for i in range(1, n+1):\n        word = words[i]\n        if word in words[:i] or word[0]!= prev_word[-1]:\n            return \"No\"\n        prev_word = word\n    return \"Yes\""
    },
    {
        "number": 4175,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    words = [stdin.readline().strip() for _ in range(n)]\n    last_word = \"\"\n    for word in words:\n        if word.startswith(last_word[-1]):\n            last_word = word\n        else:\n            return \"No\"\n    return \"Yes\"\n\nstdin = \"\"\"\n4\nhoge\nenglish\nhoge\nenigma\n\"\"\"\nprint(solution(stdin)) # No"
    },
    {
        "number": 4175,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    n = int(stdin.readline().strip())\n    words = [stdin.readline().strip() for _ in range(n)]\n\n    # Check if all words satisfy the conditions\n    for i in range(n - 1):\n        if words[i][0]!= words[i + 1][-1]:\n            return \"No\"\n\n    return \"Yes\"\n"
    },
    {
        "number": 4175,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    words = [stdin.readline().strip() for _ in range(n)]\n    \n    # Check if every word announced by Takahashi satisfied the conditions\n    for i in range(n-1):\n        if words[i][0]!= words[i+1][-1]:\n            return \"No\"\n    \n    return \"Yes\""
    },
    {
        "number": 4175,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    words = stdin.readlines()\n    words = [word.strip() for word in words]\n    \n    for i in range(n):\n        if words.count(words[i]) > 1:\n            return \"No\"\n        if i > 0 and words[i][0]!= words[i-1][-1]:\n            return \"No\"\n    return \"Yes\"\n\nwith open(\"input.txt\", \"r\") as f:\n    stdin = f.read()\n    print(solution(stdin))"
    },
    {
        "number": 4175,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    words = []\n    for i in range(N):\n        word = stdin.readline().strip()\n        if word in words:\n            return \"No\"\n        words.append(word)\n    return \"Yes\""
    },
    {
        "number": 4175,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    N = int(stdin.readline().strip())\n    words = [stdin.readline().strip() for _ in range(N)]\n    \n    # check for every word if it satisfies the conditions\n    for i in range(N):\n        # check if word is not repeated\n        if words[i] in words[:i]:\n            continue\n        # check if first character is same as last character of previous word\n        if i > 0 and words[i][0]!= words[i-1][-1]:\n            continue\n        # word satisfies conditions, continue to next word\n        else:\n            continue\n    # if all words satisfy conditions, return \"Yes\"\n    return \"Yes\""
    },
    {
        "number": 4175,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    words = stdin.readline().strip().split()\n    seen_words = set()\n    for i in range(N):\n        word = words[i]\n        if word in seen_words:\n            return \"No\"\n        seen_words.add(word)\n    return \"Yes\"\n\ndef"
    },
    {
        "number": 4175,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    words = stdin.readline().strip().split()\n    last_word = \"\"\n    for word in words:\n        if last_word[-1]!= word[0]:\n            return \"No\"\n        last_word = word\n    return \"Yes\""
    },
    {
        "number": 4176,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.strip().split())\n    if A == B:\n        return \"0\"\n    elif A > B:\n        A, B = B, A\n    a = A // 2\n    b = B // 2\n    if A % 2!= 0:\n        a += 1\n    if B % 2!= 0:\n        b += 1\n    return str(max(a, b) * 2)"
    },
    {
        "number": 4176,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a > b:\n        a, b = b, a\n    if a == 1 or b == 1:\n        return \"1\"\n    min_pieces = a * b\n    for i in range(1, min_pieces + 1):\n        if a * i % b == 0:\n            return str(i)\n    return str(min_pieces)\n\nstdin = input()\nprint(solution(stdin))"
    },
    {
        "number": 4176,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    total_snacks = A + B\n    if total_snacks % 2 == 1:\n        total_snacks += 1\n    min_snacks = total_snacks // 2\n    return str(min_snacks)\n\nprint(solution(input()))"
    },
    {
        "number": 4176,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n\n    if A == B:\n        return str(A)\n\n    # We want to minimize the maximum number of snacks that each guest gets\n    # so we can distribute the snacks optimally\n    if A > B:\n        A, B = B, A\n\n    # We need at least one snack for each guest\n    # so the minimum number of snacks we can distribute is A\n    if B == 1:\n        return str(A)\n\n    # We can distribute the remaining snacks between the guests optimally\n    # If we have A guests, we can give each guest B-1 snacks,\n    # so the total number of snacks is A * (B-1)\n    # If we have B guests, we can give each guest A-1 snacks,\n    # so the total number of snacks is B * (A-1)\n    # We want to minimize the total number of snacks, so the answer is\n    # the minimum of these two values\n    return str(min(A * (B - 1), B * (A - 1)))"
    },
    {
        "number": 4176,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    pieces = max(A, B)\n    return str(pieces)"
    },
    {
        "number": 4176,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.strip().split())\n    if A == B:\n        return \"0\"\n    elif A > B:\n        A, B = B, A\n    n = (A+B) // 2\n    return str(n)"
    },
    {
        "number": 4176,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    # If A or B is even, then the minimum number of pieces that can be evenly distributed is A or B.\n    if a % 2 == 0 or b % 2 == 0:\n        return str(max(a, b))\n    else:\n        # If A or B is odd, then we need to ensure that the number of pieces is odd.\n        # We can distribute the odd number of pieces to the first guest and the even number of pieces to the second guest.\n        # We need to distribute the odd number of pieces to the first guest, so we need to make sure that A or B is odd.\n        # If A is odd and B is even, then we can distribute 2 pieces to the first guest and 4 pieces to the second guest.\n        # If A is even and B is odd, then we can distribute 4 pieces to the first guest and 2 pieces to the second guest.\n        # If A is odd and B is odd, then we can distribute 1 piece to the first guest and 5 pieces to the second guest.\n        # If A is even and B is even, then we can distribute 5 pieces to the first guest and 1 piece to the second guest.\n        return str(2 * a + 4 * b - 5)"
    },
    {
        "number": 4176,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n\n    # Find the minimum number of snack pieces\n    # needed to be evenly distributed\n    min_pieces = max(a, b) * 2\n\n    # Check if the minimum number of pieces is even\n    if min_pieces % 2 == 1:\n        # If not, increment by 1\n        min_pieces += 1\n\n    return str(min_pieces)"
    },
    {
        "number": 4176,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.strip().split())\n    if A == B:\n        return \"0\"\n    elif A > B:\n        A, B = B, A\n    n = min(A, B)\n    return str(n*(n+1)//2)"
    },
    {
        "number": 4176,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    min_pieces = min(A, B) // 2 + min(A, B) % 2\n    return str(min_pieces)"
    },
    {
        "number": 4177,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    x = 'x'\n    return x*len(S)"
    },
    {
        "number": 4177,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # read input from stdin\n    s = stdin.strip()\n    # replace every character in S with x\n    s = s.replace(s, \"x\" * len(s))\n    # print the result\n    print(s)\n    return s"
    },
    {
        "number": 4177,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Replace every character in S with x and print the result.\n    \"\"\"\n    return stdin.replace(stdin, 'x' * len(stdin))"
    },
    {
        "number": 4177,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    return 'x' * len(s)"
    },
    {
        "number": 4177,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # replace every character with x\n    s = \"x\" * len(stdin)\n    return s"
    },
    {
        "number": 4177,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    x = \"x\" * len(s)\n    return x"
    },
    {
        "number": 4177,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace('.', 'x')"
    },
    {
        "number": 4177,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    return S.replace(S[0], 'x')"
    },
    {
        "number": 4177,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    return \"x\" * len(s)"
    },
    {
        "number": 4177,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Reading input from stdin\n    s = stdin.strip()\n    \n    # Replacing every character in s with x\n    result = 'x' * len(s)\n    \n    # Printing the result\n    print(result)\n    \n    # Returning the result\n    return result"
    },
    {
        "number": 4178,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    heights = list(map(int, stdin.split()[1:]))\n\n    if all(heights[i] <= heights[i+1] for i in range(n-1)):\n        return \"Yes\"\n    else:\n        return \"No\"\n\nstdin = \"5\\n1 2 1 1 3\"\nprint(solution(stdin)) # Output: Yes"
    },
    {
        "number": 4178,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Read the input\n    lines = stdin.strip().split('\\n')\n    n = int(lines[0])\n    heights = [int(h) for h in lines[1].split()]\n    \n    # Check if it is possible to perform the operations\n    for i in range(1, n):\n        if heights[i] <= heights[i-1]:\n            return \"Yes\"\n    \n    return \"No\""
    },
    {
        "number": 4178,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n = int(stdin.readline())\n    heights = list(map(int, stdin.readline().split()))\n    \n    # check if decreasing is possible\n    can_decrease = True\n    for i in range(1, n):\n        if heights[i] <= heights[i-1]:\n            can_decrease = False\n            break\n    \n    # print result\n    if can_decrease:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4178,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    n = int(stdin.readline())\n    heights = list(map(int, stdin.readline().split()))\n\n    # Check if it is possible to perform the operations so that the heights of the squares are non-decreasing from left to right\n    for i in range(1, n):\n        if heights[i] <= heights[i-1]:\n            return \"No\"\n\n    return \"Yes\""
    },
    {
        "number": 4178,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    n = int(stdin.readline())\n    heights = list(map(int, stdin.readline().split()))\n\n    # perform operations\n    for i in range(1, n):\n        if heights[i] <= heights[i-1]:\n            heights[i] -= 1\n\n    # check if heights are non-decreasing\n    for i in range(1, n):\n        if heights[i] <= heights[i-1]:\n            return \"No\"\n\n    return \"Yes\""
    },
    {
        "number": 4178,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    n = int(stdin.readline().strip())\n    heights = list(map(int, stdin.readline().strip().split()))\n    \n    # Check if it is possible to perform the operations so that the heights of the squares are non-decreasing from left to right\n    for i in range(1, n):\n        if heights[i] <= heights[i-1]:\n            return \"No\"\n    \n    return \"Yes\""
    },
    {
        "number": 4178,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N = int(stdin.readline().strip())\n    H = list(map(int, stdin.readline().strip().split()))\n\n    # Check if it is possible to perform the operations\n    for i in range(1, N):\n        if H[i] < H[i-1]:\n            return \"Yes\"\n\n    return \"No\""
    },
    {
        "number": 4178,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    n = int(stdin.readline())\n    heights = list(map(int, stdin.readline().split()))\n\n    # Initialize variables\n    last_height = heights[0]\n    for i in range(1, n):\n        if heights[i] <= last_height:\n            return \"Yes\"\n        last_height = heights[i]\n    return \"No\""
    },
    {
        "number": 4178,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    H = list(map(int, stdin.readline().strip().split()))\n    for i in range(1, N):\n        if H[i] <= H[i-1]:\n            H[i] = H[i-1] + 1\n    if all(H[i] <= H[i-1] for i in range(1, N)):\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4178,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    N = int(lines[0])\n    H = list(map(int, lines[1].split()))\n\n    # check if it is possible to perform the operations\n    for i in range(1, N):\n        if H[i] <= H[i-1]:\n            return 'No'\n\n    return 'Yes'"
    },
    {
        "number": 4179,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, c = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    a = []\n    for i in range(n):\n        a.append(list(map(int, stdin.readline().split())))\n    \n    count = 0\n    for i in range(n):\n        if sum([a[i][j] * b[j] for j in range(m)]) + c > 0:\n            count += 1\n    \n    return str(count)"
    },
    {
        "number": 4179,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m, c = map(int, stdin.readline().split())\n    b = list(map(int, stdin.readline().split()))\n    a = []\n    for i in range(n):\n        a.append(list(map(int, stdin.readline().split())))\n\n    count = 0\n    for i in range(n):\n        if all(a[i][j] * b[j] + c > 0 for j in range(m)):\n            count += 1\n\n    return str(count)"
    },
    {
        "number": 4179,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n, m, c = map(int, stdin.readline().split())\n    b = list(map(int, stdin.readline().split()))\n    codes = []\n    for _ in range(n):\n        codes.append(list(map(int, stdin.readline().split())))\n    \n    # count number of codes that correctly solve the problem\n    count = 0\n    for i in range(n):\n        if sum(a*b for a, b in zip(codes[i], b)) + c > 0:\n            count += 1\n    \n    return str(count)"
    },
    {
        "number": 4179,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    *_, C = map(int, stdin.strip().split())\n    B = list(map(int, stdin.strip().split()))\n    codes = []\n    for _ in range(N):\n        A = list(map(int, stdin.strip().split()))\n        codes.append(A)\n    # count codes that solve the problem\n    count = 0\n    for A in codes:\n        if sum([A[i] * B[i] for i in range(M)]) + C > 0:\n            count += 1\n    return str(count)\n\n\nN, M, C = map(int, input().strip().split())\nB = list(map(int, input().strip().split()))\ncodes = []\nfor _ in range(N):\n    A = list(map(int, input().strip().split()))\n    codes.append(A)\nprint(solution('\\n'.join([str(N), str(M), str(C)] + [str(b) for b in B] + [' '.join([str(a) for a in A]) for A in codes])))"
    },
    {
        "number": 4179,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m, c = map(int, stdin.readline().strip().split())\n    b = list(map(int, stdin.readline().strip().split()))\n    a = []\n    for i in range(n):\n        a.append(list(map(int, stdin.readline().strip().split())))\n    count = 0\n    for i in range(n):\n        if sum(a[i][j] * b[j] for j in range(m)) + c > 0:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4179,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N, M, C = map(int, stdin.readline().split())\n    B = list(map(int, stdin.readline().split()))\n    A = []\n    for i in range(N):\n        A.append(list(map(int, stdin.readline().split())))\n\n    # Find valid codes\n    count = 0\n    for i in range(N):\n        sum = 0\n        for j in range(M):\n            sum += A[i][j] * B[j]\n        if sum + C > 0:\n            count += 1\n\n    return str(count)"
    },
    {
        "number": 4179,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    This function takes input from standard input and returns the number of codes that correctly solve the given problem.\n\n    Args:\n        stdin (str): Input from standard input\n\n    Returns:\n        str: The number of codes that correctly solve the given problem.\n    \"\"\"\n    # Read input from standard input\n    lines = stdin.strip().split('\\n')\n    N, M, C = map(int, lines[0].split())\n    B = list(map(int, lines[1].split()))\n    A = []\n    for i in range(2, 2 + N):\n        A.append(list(map(int, lines[i].split())))\n\n    # Initialize variables\n    count = 0\n\n    # Check each code for correct solution\n    for i in range(N):\n        sum = 0\n        for j in range(M):\n            sum += A[i][j] * B[j]\n        sum += C\n        if sum > 0:\n            count += 1\n\n    # Return the number of codes that correctly solve the given problem\n    return str(count)"
    },
    {
        "number": 4179,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Get input\n    N, M, C = map(int, stdin.readline().split())\n    B = list(map(int, stdin.readline().split()))\n    A = []\n    for i in range(N):\n        A.append(list(map(int, stdin.readline().split())))\n\n    # Count codes that correctly solve the problem\n    count = 0\n    for i in range(N):\n        if sum([A[i][j] * B[j] for j in range(M)]) + C > 0:\n            count += 1\n\n    # Return result\n    return str(count)"
    },
    {
        "number": 4179,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m, c = map(int, stdin.readline().split())\n    b = list(map(int, stdin.readline().split()))\n    codes = []\n    for _ in range(n):\n        a = list(map(int, stdin.readline().split()))\n        if sum(i * j for i, j in zip(a, b)) + c > 0:\n            codes.append(1)\n        else:\n            codes.append(0)\n    return str(sum(codes))\n"
    },
    {
        "number": 4179,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    N, M, C = map(int, stdin.readline().strip().split())\n    B = list(map(int, stdin.readline().strip().split()))\n    A = [list(map(int, stdin.readline().strip().split())) for _ in range(N)]\n\n    # count number of codes that correctly solve the problem\n    count = 0\n    for i in range(N):\n        if sum([A[i][j] * B[j] for j in range(M)]) + C > 0:\n            count += 1\n\n    # print result\n    return str(count)"
    },
    {
        "number": 4180,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    change = n % 1000\n    if change == 0:\n        return str(n // 1000)\n    else:\n        return str(n // 1000 + 1)\n\ndef"
    },
    {
        "number": 4180,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    num_bills = n // 1000\n    change = n % 1000\n    if change == 0:\n        return str(num_bills)\n    else:\n        return str(num_bills + 1)"
    },
    {
        "number": 4180,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    bills = 0\n    while n > 0:\n        bills += 1\n        n -= 1000\n    return str(bills)"
    },
    {
        "number": 4180,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    bills = N // 1000\n    remainder = N % 1000\n    if remainder >= 500:\n        bills += 1\n        remainder -= 500\n    if remainder >= 100:\n        bills += 1\n        remainder -= 100\n    return str(bills)"
    },
    {
        "number": 4180,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n % 1000 == 0:\n        return str(n // 1000)\n    else:\n        return str((n // 1000) + 1)\n"
    },
    {
        "number": 4180,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    n = int(stdin)\n\n    # Calculate change\n    change = n - 1000\n\n    # Return change as integer\n    return str(change)\n"
    },
    {
        "number": 4180,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    change = n % 1000\n    return str(change)\n"
    },
    {
        "number": 4180,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    bills = n // 1000\n    change = n % 1000\n    return str(change)"
    },
    {
        "number": 4180,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    total_bills = N // 1000\n    change = N % 1000\n    return str(change) if total_bills == 0 else str(total_bills)"
    },
    {
        "number": 4180,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    bill_count = n // 1000\n    remainder = n % 1000\n    if bill_count > 2:\n        return str(bill_count - 1)\n    elif remainder == 0:\n        return str(bill_count)\n    elif remainder < 500:\n        return str(bill_count + 1)\n    elif remainder < 1000:\n        return str(bill_count)\n    else:\n        return str(bill_count + 1)"
    },
    {
        "number": 4181,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N = int(stdin.readline().strip())\n    A = list(map(int, stdin.readline().strip().split()))\n    B = list(map(int, stdin.readline().strip().split()))\n\n    # Sort input by A values in descending order\n    A = sorted(A, reverse=True)\n\n    # Calculate maximum number of monsters for each hero\n    max_monsters = [0] * N\n    for i in range(N):\n        max_monsters[i] = B[i] + A[i] + (i+1)\n\n    # Calculate maximum total number of monsters\n    max_total = sum(max_monsters)\n\n    # Calculate minimum number of monsters for each hero\n    min_monsters = [0] * N\n    for i in range(N):\n        min_monsters[i] = B[i] + A[i] + i\n\n    # Calculate minimum total number of monsters\n    min_total = sum(min_monsters)\n\n    # Return maximum total number of monsters\n    return str(max_total)"
    },
    {
        "number": 4181,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    A = list(map(int, stdin.readline().strip().split()))\n    B = list(map(int, stdin.readline().strip().split()))\n    \n    dp = [0] * (N + 1)\n    dp[1] = min(A[1], B[0])\n    \n    for i in range(2, N):\n        dp[i] = max(dp[i-1], dp[i-2] + A[i])\n        \n    return dp[N-1]\n    \nstdin = \"2\\n3 5 2\\n4 5\"\nprint(solution(stdin)) # Output: 9"
    },
    {
        "number": 4181,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    n, *town_attacks, *hero_strengths = map(int, stdin.split())\n\n    # Calculate the maximum number of heroes that can defeat each monster\n    max_heroes = [0] * (max(town_attacks) + 1)\n    for i in range(1, n):\n        max_heroes[town_attacks[i]] = min(max_heroes[town_attacks[i]], hero_strengths[i-1])\n        max_heroes[town_attacks[i]+1] = min(max_heroes[town_attacks[i]+1], hero_strengths[i])\n\n    # Calculate the total number of monsters that the heroes can defeat\n    total_monsters = sum(town_attacks)\n    for i in range(1, n):\n        total_monsters -= max_heroes[town_attacks[i]] * (town_attacks[i] - town_attacks[i-1])\n\n    return str(total_monsters)"
    },
    {
        "number": 4181,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = map(int, stdin.split())\n    A.insert(0, 0)\n    A.append(0)\n    B.append(0)\n    dp = [0] * (N+2)\n    for i in range(1, N+2):\n        dp[i] = max(dp[i-1], B[i-1] + dp[i-2])\n        for j in range(i-2, -1, -1):\n            if A[i] - A[j] > 0 and B[j] > 0:\n                dp[i] = max(dp[i], dp[j-1] + B[i-1] - B[j-1])\n    return str(dp[N+1])\n\nprint(solution(input()))"
    },
    {
        "number": 4181,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    b = list(map(int, stdin.readline().strip().split()))\n\n    # initialize variables\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n\n    # fill dp table\n    for i in range(n + 1):\n        for j in range(n + 1):\n            if i == j:\n                dp[i][j] = 0\n            elif j == n:\n                dp[i][j] = a[i - 1]\n            elif a[i - 1] > b[i - j - 1]:\n                dp[i][j] = a[i - 1]\n            else:\n                dp[i][j] = b[i - j - 1]\n\n    # compute maximum total number of monsters\n    total = 0\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            total += dp[i][j]\n\n    return str(total)"
    },
    {
        "number": 4181,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N = int(stdin.readline().strip())\n    A = list(map(int, stdin.readline().strip().split()))\n    B = list(map(int, stdin.readline().strip().split()))\n    \n    # Compute dp\n    dp = [0] * (N+1)\n    for i in range(N):\n        dp[i+1] = max(dp[i], dp[i-1]) + A[i+1] + B[i]\n    \n    # Compute answer\n    return dp[N]"
    },
    {
        "number": 4181,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, *a_b = map(int, stdin.strip().split())\n    a = a_b[:n]\n    b = a_b[n:]\n    dp = [0] * (n+1)\n    for i in range(1, n+1):\n        dp[i] = dp[i-1] + a[i-1]\n        if i >= 2:\n            dp[i] = max(dp[i], dp[i-2] + a[i-1] + b[i-2])\n    return str(dp[-1])\n\nprint(solution(\"2\\n3 5 2\\n4 5\")) # Output: 9"
    },
    {
        "number": 4181,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    n, a_arr, b_arr = list(map(int, stdin.split()))\n    \n    # Initialize variables\n    max_monsters = 0\n    curr_monsters = 0\n    prev_monsters = 0\n    \n    # Calculate maximum number of monsters\n    for i in range(n):\n        curr_monsters += a_arr[i]\n        curr_monsters = min(curr_monsters, b_arr[i])\n        \n        # Update maximum number of monsters\n        max_monsters = max(max_monsters, curr_monsters)\n        \n        # Calculate next iteration\n        prev_monsters = curr_monsters\n        curr_monsters = prev_monsters + a_arr[i+1]\n        curr_monsters = min(curr_monsters, b_arr[i+1])\n        \n    return str(max_monsters)\n    \n"
    },
    {
        "number": 4181,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    lines = stdin.strip().split('\\n')\n    n = int(lines[0])\n    a = list(map(int, lines[1].strip().split()))\n    b = list(map(int, lines[2].strip().split()))\n\n    # initialize dp table\n    dp = [[0] * (n+1) for _ in range(n+1)]\n\n    # fill dp table\n    for i in range(n+1):\n        for j in range(i, n+1):\n            if i == j:\n                dp[i][j] = a[i-1]\n            else:\n                dp[i][j] = max(dp[i][k-1] + dp[k][j] + sum(a[k-1:j]) for k in range(i, j))\n\n    # fill hero table\n    hero = [[0] * (n+1) for _ in range(n+1)]\n    for i in range(n+1):\n        for j in range(i, n+1):\n            hero[i][j] = sum(dp[i][k-1] + dp[k][j] for k in range(i, j))\n\n    # find maximum cooperative result\n    result = 0\n    for i in range(n):\n        result = max(result, sum(dp[i][j] * b[j-i-1] for j in range(i+2, n+1)) + hero[0][i+2] * b[i])\n\n    return str(result)"
    },
    {
        "number": 4181,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Reading the input values\n    n, *ab, b = map(int, stdin.split())\n    a = ab[:-1]\n    b = b[:-1]\n\n    # Creating a list to store the maximum number of monsters a hero can defeat\n    dp = [0] * (n+1)\n\n    # Calculating the maximum number of monsters a hero can defeat\n    for i in range(n):\n        dp[i+1] = max(dp[i+1], dp[i] + a[i])\n\n    # Calculating the maximum total number of monsters the heroes can cooperate to defeat\n    result = sum(dp[i] for i in range(1, n+1) if b[i-1] < dp[i])\n\n    return str(result)"
    },
    {
        "number": 4182,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M, X, Y = map(int, stdin.split()[:4])\n    x_coords = list(map(int, stdin.split()[4:4+N]))\n    y_coords = list(map(int, stdin.split()[4+N:]))\n\n    z_coords = [i for i in range(X+1, Y) if all(i < x_coords) and all(x_coords < i) and all(i <= y_coords) and all(y_coords >= i)]\n\n    if not z_coords:\n        return 'War'\n    return 'No War'"
    },
    {
        "number": 4182,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    lines = stdin.split(\"\\n\")\n    n, m, x, y = map(int, lines[0].split())\n    xs = list(map(int, lines[1].split()))\n    ys = list(map(int, lines[2].split()))\n\n    # check war\n    if x >= max(xs) or y <= min(ys):\n        return \"War\"\n    return \"No War\""
    },
    {
        "number": 4182,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N, M, X, Y = map(int, stdin.readline().strip().split())\n    x_coord = list(map(int, stdin.readline().strip().split()))\n    y_coord = list(map(int, stdin.readline().strip().split()))\n    \n    # Check all possible values of Z\n    for z in range(X, Y+1):\n        # Check if x_coord and y_coord can be controlled by Empire A and B\n        can_control_A = all(c < z for c in x_coord)\n        can_control_B = all(c >= z for c in y_coord)\n        if not can_control_A and not can_control_B:\n            # If not, break out of loop and return \"War\"\n            return \"War\"\n    \n    # If no Z value satisfies the conditions, return \"No War\"\n    return \"No War\""
    },
    {
        "number": 4182,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n, m, x, y = list(map(int, stdin.readline().strip().split()))\n    xs = list(map(int, stdin.readline().strip().split()))\n    ys = list(map(int, stdin.readline().strip().split()))\n\n    # check if war will break out\n    for z in range(x + 1, y):\n        if all(x < z <= y for x in xs) and all(y < z for y in ys):\n            return \"War\"\n    return \"No War\"\n"
    },
    {
        "number": 4182,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m, x, y = map(int, stdin.strip().split())\n    xs = set(map(int, stdin.strip().split()))\n    ys = set(map(int, stdin.readline().strip().split()))\n\n    for z in range(x, y+1):\n        if z in xs and all(i < z for i in xs) and all(i >= z for i in ys):\n            return \"War\"\n    return \"No War\""
    },
    {
        "number": 4182,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    input_list = stdin.split()\n    N = int(input_list[0])\n    M = int(input_list[1])\n    X = int(input_list[2])\n    Y = int(input_list[3])\n    x_list = list(map(int, input_list[4:4+N]))\n    y_list = list(map(int, input_list[4+N:4+N+M]))\n    \n    # check war\n    for i in range(N):\n        for j in range(i+1, N):\n            if x_list[i] >= x_list[j]:\n                return \"War\"\n    for i in range(M):\n        for j in range(i+1, M):\n            if y_list[i] <= y_list[j]:\n                return \"War\"\n    return \"No War\"\n"
    },
    {
        "number": 4182,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N, M, X, Y = map(int, stdin.readline().split())\n    x_coords = list(map(int, stdin.readline().split()))\n    y_coords = list(map(int, stdin.readline().split()))\n\n    # Determine if war will break out\n    for Z in range(X+1, Y+1):\n        if all(x < Z <= y for x, y in zip(x_coords, [X]*N+y_coords)) and all(x < Z <= y for x, y in zip([X]*N+x_coords, y_coords)):\n            return \"War\"\n\n    return \"No War\"\n\nstdin = \"\"\"\n3 2 10 20\n8 15 13\n16 22\n\"\"\"\n\nprint(solution(stdin)) # Output: \"No War\""
    },
    {
        "number": 4182,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m, x, y = map(int, stdin.readline().split())\n    empire_a = list(map(int, stdin.readline().split()))\n    empire_b = list(map(int, stdin.readline().split()))\n\n    for z in range(max(x, y)+1):\n        if x < z <= y and all(city < z for city in empire_a) and all(city >= z for city in empire_b):\n            return \"War\"\n\n    return \"No War\""
    },
    {
        "number": 4182,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    N, M, X, Y = map(int, stdin.readline().split())\n    x = list(map(int, stdin.readline().split()))\n    y = list(map(int, stdin.readline().split()))\n    \n    # sort cities by coordinate\n    x.sort()\n    y.sort()\n    \n    # determine if war will break out\n    if X < y[-1]:\n        return \"No War\"\n    elif X < x[N-1]:\n        return \"War\"\n    elif X == x[N-1]:\n        return \"War\" if any(y[i] <= X < y[i+1] for i in range(M-1)) else \"No War\"\n    else:\n        return \"War\" if any(x[i] <= X < x[i+1] for i in range(N-1)) else \"No War\"\n    \n"
    },
    {
        "number": 4182,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    N, M, X, Y = map(int, lines[0].split())\n    x_cities = sorted(map(int, lines[1].split()))\n    y_cities = sorted(map(int, lines[2].split()))\n\n    # Empire A\n    for i in range(len(x_cities)):\n        if X < x_cities[i] <= Y:\n            for j in range(i+1, len(x_cities)):\n                if x_cities[j] < X:\n                    return \"War\"\n\n    # Empire B\n    for i in range(len(y_cities)):\n        if Y <= y_cities[i] < X:\n            for j in range(i+1, len(y_cities)):\n                if y_cities[j] >= Y:\n                    return \"War\"\n\n    return \"No War\"\n"
    },
    {
        "number": 4183,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    t_list = list(map(int, stdin.readline().strip().split()))\n    \n    ans = max(t_list)\n    \n    for i in range(n):\n        ans -= t_list[i]\n        \n    return str(ans)\n    \n"
    },
    {
        "number": 4183,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    N = int(lines[0])\n    T = list(map(int, lines[1:]))\n    \n    # Sort the T list in ascending order\n    T = sorted(T)\n    \n    # Initialize the time when the hand of each clock points upward\n    time = 0\n    \n    # Iterate over the sorted T list\n    for i in range(N):\n        time += T[i]\n        # If the clock has not finished rotating, rotate it another 360\u00b0 and add the time it takes\n        if time < 360:\n            time += 360 - time\n        # If the clock has finished rotating, add the remaining time it takes\n        else:\n            time += 360 - (time % 360)\n    \n    # Return the final time\n    return str(time)"
    },
    {
        "number": 4183,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N = int(stdin.readline().strip())\n    T = list(map(int, stdin.readline().strip().split()))\n    \n    # Initialize variables\n    total_time = max(T) * N\n    \n    # Update total time for clocks that rotate faster\n    for i in range(N):\n        if T[i]!= max(T):\n            total_time -= (T[i] * (N - 1)) // T.count(max(T))\n    \n    # Return total time\n    return str(total_time)"
    },
    {
        "number": 4183,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    T = list(map(int, stdin.readline().strip().split()))\n    clock_hands = [0] * N\n    clock_hands[0] = T[0]\n    for i in range(1, N):\n        clock_hands[i] = clock_hands[i-1] + T[i]\n    return str(max(clock_hands))"
    },
    {
        "number": 4183,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    T = list(map(int, stdin.readline().strip().split()))\n\n    # Calculate the total time taken by all clocks\n    total_time = sum(T)\n\n    # Calculate the time taken by each clock to reach the top position\n    time_to_top = [total_time - t for t in T]\n\n    # Calculate the time taken by each clock to reach the bottom position\n    time_to_bottom = [total_time - time_to_top[i] - T[i] for i in range(N)]\n\n    # Calculate the minimum time taken to reach the top position\n    min_time = min(time_to_top)\n\n    # Calculate the minimum time taken to reach the bottom position\n    min_time += min(time_to_bottom)\n\n    return str(min_time)"
    },
    {
        "number": 4183,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    T = list(map(int, stdin.readline().split()))\n    total = sum(T)\n    if N == 1:\n        return str(T[0])\n    if total % (N-1)!= 0:\n        return \"-1\"\n    each_period = total // (N-1)\n    remaining_time = each_period\n    for i in range(N):\n        remaining_time -= T[i]\n        if remaining_time < 0:\n            return \"-1\"\n    return str(remaining_time)\n\nstdin = \"\"\"\n2\n2\n3\n\"\"\"\n\nprint(solution(stdin)) # Output: 6"
    },
    {
        "number": 4183,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Read input from stdin\n    N = int(stdin.readline().strip())\n    T = [int(x) for x in stdin.readline().strip().split()]\n\n    # Initialize the current time to 0\n    current_time = 0\n\n    # Iterate through each clock\n    for i in range(N):\n        # Calculate the number of seconds until the hand of this clock points upward\n        wait_time = (360 - current_time) % 360\n\n        # Update the current time to be the time when the hand of this clock points upward\n        current_time = (current_time + wait_time) % 360\n\n        # Wait for the remaining time for this clock\n        time.sleep(T[i] - wait_time)\n\n    # Return the final time\n    return str(current_time)"
    },
    {
        "number": 4183,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    t = list(map(int, lines[1:]))\n    total = 0\n    for i in range(n):\n        total += t[i]\n        if i > 0:\n            total += t[i-1]\n    return str(total)\n\nstdin = '2\\n2\\n3\\n'\nprint(solution(stdin))  # Output: 6"
    },
    {
        "number": 4183,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    t = list(map(int, stdin.readline().strip().split()))\n    ans = 0\n    for i in range(n):\n        ans += 360 * t[i] // (2 * 3600)\n    return str(ans)\n\nprint(solution(\"2\\n2\\n3\\n\")) # output: 6"
    },
    {
        "number": 4183,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, *t = map(int, stdin.split())\n    total_time = sum(t)\n    time_left = total_time % 360\n    return str(time_left)\n\nwith open('input.txt', 'r') as file:\n    stdin = file.read()\n\nwith open('output.txt', 'w') as file:\n    file.write(solution(stdin))"
    },
    {
        "number": 4184,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    weights = list(map(int, stdin.split()[1:]))\n    t = n // 2\n    s1 = sum(weights[:t])\n    s2 = sum(weights[t:])\n    return str(abs(s1 - s2))"
    },
    {
        "number": 4184,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N = int(stdin.readline())\n    weights = list(map(int, stdin.readline().split()))\n\n    # Find minimum difference\n    min_diff = float('inf')\n    for i in range(N):\n        s1 = sum(weights[:i])\n        s2 = sum(weights[i:])\n        diff = abs(s1 - s2)\n        min_diff = min(min_diff, diff)\n\n    # Return result\n    return str(min_diff)"
    },
    {
        "number": 4184,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    n = int(stdin.readline())\n    weights = list(map(int, stdin.readline().split()))\n\n    # Initialize variables\n    t = n // 2 + 1  # Index of last weight in the first group\n    s1 = sum(weights[:t])  # Sum of weights in first group\n    s2 = sum(weights[t:])  # Sum of weights in second group\n    min_diff = abs(s1 - s2)  # Minimum absolute difference found so far\n\n    # Try all possible divisions of weights into groups\n    for i in range(t, n):\n        s1 = s1 - weights[i-t] + weights[i]  # Update sum of weights in first group\n        s2 = s2 + weights[i-t] - weights[i]  # Update sum of weights in second group\n        diff = abs(s1 - s2)  # Calculate absolute difference of sums\n        if diff < min_diff:  # Update minimum absolute difference if necessary\n            min_diff = diff\n\n    # Print result\n    return str(min_diff)"
    },
    {
        "number": 4184,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Reading input\n    n = int(stdin.readline().strip())\n    weights = list(map(int, stdin.readline().strip().split()))\n\n    # Finding minimum absolute difference\n    min_diff = float('inf')\n    for t in range(1, n):\n        s1 = sum(weights[:t])\n        s2 = sum(weights[t:])\n        diff = abs(s1 - s2)\n        if diff < min_diff:\n            min_diff = diff\n\n    # Printing result\n    return str(min_diff)"
    },
    {
        "number": 4184,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N = int(stdin.split()[0])\n    weights = list(map(int, stdin.split()[1:]))\n\n    # Initialize variables\n    S1_min = float('inf')\n    S2_min = float('inf')\n    S1_max = -float('inf')\n    S2_max = -float('inf')\n\n    # Loop through possible values of T\n    for T in range(1, N):\n        # Initialize sums\n        S1 = 0\n        S2 = 0\n\n        # Compute sums for weights with indices not greater than T\n        for i in range(T):\n            S1 += weights[i]\n        for i in range(T, N):\n            S2 += weights[i]\n\n        # Update minimum and maximum sums\n        S1_min = min(S1_min, S1)\n        S2_min = min(S2_min, S2)\n        S1_max = max(S1_max, S1)\n        S2_max = max(S2_max, S2)\n\n    # Compute minimum absolute difference\n    diff = min(abs(S1_min - S2_min), abs(S1_max - S2_max))\n\n    # Print result\n    return str(diff)\n"
    },
    {
        "number": 4184,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    N = int(lines[0])\n    weights = list(map(int, lines[1].split()))\n\n    min_diff = float('inf')\n    for T in range(2, N):\n        S1 = sum(weights[:T])\n        S2 = sum(weights[T:])\n        diff = abs(S1 - S2)\n        min_diff = min(min_diff, diff)\n\n    return str(min_diff)"
    },
    {
        "number": 4184,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    weights = [int(x) for x in stdin.readline().strip().split()]\n    total = sum(weights)\n    for t in range(1, n):\n        s1 = sum(weights[:t])\n        s2 = sum(weights[t:])\n        if abs(s1 - s2) < abs(total - 2 * s1 - 2 * s2):\n            return str(abs(s1 - s2))\n    return '0'"
    },
    {
        "number": 4184,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Parse the input\n    N = int(stdin.readline().strip())\n    weights = list(map(int, stdin.readline().strip().split()))\n\n    # Initialize the minimum absolute difference to infinity\n    min_diff = float('inf')\n\n    # Iterate over all possible T values\n    for T in range(2, N):\n        # Calculate the sum of the weights in the two groups\n        S1 = sum(weights[:T])\n        S2 = sum(weights[T:])\n\n        # Calculate the absolute difference and update the minimum\n        diff = abs(S1 - S2)\n        if diff < min_diff:\n            min_diff = diff\n\n    # Print the minimum absolute difference\n    return str(min_diff)"
    },
    {
        "number": 4184,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    n = int(stdin.readline().strip())\n    weights = list(map(int, stdin.readline().strip().split()))\n\n    # Compute the minimum possible absolute difference of S_1 and S_2\n    min_diff = float('inf')\n    for t in range(1, n):\n        s1 = sum(weights[:t])\n        s2 = sum(weights[t:])\n        diff = abs(s1 - s2)\n        if diff < min_diff:\n            min_diff = diff\n\n    # Print the minimum possible absolute difference of S_1 and S_2\n    return str(min_diff)"
    },
    {
        "number": 4184,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    weights = list(map(int, stdin.readline().strip().split()))\n    \n    min_diff = float('inf')\n    for t in range(1, N):\n        s1 = sum(weights[:t])\n        s2 = sum(weights[t:])\n        diff = abs(s1 - s2)\n        if diff < min_diff:\n            min_diff = diff\n    \n    return str(min_diff)"
    },
    {
        "number": 4185,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    n, m = map(int, stdin.readline().strip().split())\n    a = []\n    for i in range(n):\n        a.append(list(map(int, stdin.readline().strip().split())))\n    \n    # initialize answer\n    ans = 0\n    \n    # check if matrix is already good\n    for i in range(n):\n        if a[i][0]!= i*m + 1:\n            ans += 1\n        for j in range(m):\n            if a[i][j]!= (i-1)*m + j + 1:\n                ans += 1\n    \n    # perform cyclic shifts\n    for j in range(m):\n        for i in range(n-1):\n            if a[i][j]!= a[i+1][j]:\n                ans += 1\n                break\n        for i in range(n-1, 0, -1):\n            if a[i][j]!= a[i-1][j]:\n                ans += 1\n                break\n    \n    # print answer\n    return str(ans)"
    },
    {
        "number": 4185,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.strip().split())\n    matrix = [[int(x) for x in line.strip().split()] for line in stdin.strip().split('\\n')[1:]]\n\n    # Check if matrix is already good\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if matrix[i - 1][j - 1]!= (i - 1) * m + j:\n                return \"0\"\n\n    # Find the cyclic shift of the first column\n    for i in range(1, n + 1):\n        if matrix[i - 1][0] == matrix[i - 2][0]:\n            k = 1\n            while k < m and matrix[i - 1][k] == matrix[(i - 1 + k) % n][0]:\n                k += 1\n            if k == m:\n                # If all elements of the first column are the same, we can perform a cyclic shift\n                for j in range(1, m + 1):\n                    matrix[i - 1][j - 1] = matrix[(i - 1 + j) % n][0]\n                nmoves = (n - 1) * m\n                break\n\n    if \"nmoves\" not in locals():\n        # If we could not perform a cyclic shift, we must change the first element of each row to a new value\n        for i in range(1, n + 1):\n            for j in range(1, m + 1):\n                if matrix[i - 1][j - 1] == (i - 1) * m + j:\n                    new_val = i * m + j\n                    matrix[i - 1][j - 1] = new_val\n                    nmoves += 1\n\n    return str(nmoves)"
    },
    {
        "number": 4185,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = [[int(c) for c in stdin.readline().split()] for _ in range(n)]\n\n    # Check if the matrix is already good\n    for i in range(n):\n        for j in range(m):\n            if a[i][j]!= (i * m + j + 1):\n                return \"0\"\n    return \"0\"\n"
    },
    {
        "number": 4185,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    n, m = map(int, lines[0].split())\n    a = [list(map(int, line.split())) for line in lines[1:]]\n\n    # first, shift the first column cyclically to get 1, 2,..., m\n    for i in range(1, n+1):\n        if a[i-1][0]!= i:\n            j = 0\n            while a[i-1][j]!= i:\n                j += 1\n            if j > 0:\n                a[i-1][:j] = a[i-1][j::-1]\n            else:\n                a[i-1] = a[i-1][::-1]\n\n    # second, shift the second column cyclically to get m+1, m+2,..., 2m\n    for i in range(1, n):\n        if a[i-1][1]!= m+i:\n            j = 1\n            while a[i-1][j]!= m+i:\n                j += 1\n            if j > 1:\n                a[i-1][:j] = a[i-1][j-1::-1]\n            else:\n                a[i-1] = a[i-1][::-1]\n    # third, shift the last column cyclically to get nm, nm-1,..., 2, 1\n    for i in range(1, n):\n        if a[i-1][-1]!= n*m:\n            j = m-1\n            while a[i-1][j]!= n*m:\n                j -= 1\n            if j < m-1:\n                a[i-1][j+1:] = a[i-1][:m-j-1]\n            else:\n                a[i-1] = a[i-1][::-1]\n\n    # check if the matrix is good\n    good = True\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            if a[i-1][j-1]!= (i-1)*m+j:\n                good = False\n                break\n        if not good:\n            break\n    return \"0\" if good else \"1\""
    },
    {
        "number": 4185,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    matrix = []\n    for i in range(n):\n        row = list(map(int, stdin.readline().split()))\n        matrix.append(row)\n\n    visited = set()\n    q = [(0, 0, 0)]\n\n    while q:\n        x, y, level = q.pop(0)\n        if x == y == n-1:\n            return level\n\n        if (x, y) in visited:\n            continue\n        visited.add((x, y))\n\n        for dx, dy in [(1, 0), (0, 1), (-1, 0), (0, -1)]:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < n and 0 <= ny < m:\n                if matrix[nx][ny] < matrix[x][y]:\n                    matrix[nx][ny] = matrix[x][y]\n                    q.append((nx, ny, level+1))\n\n    return -1"
    },
    {
        "number": 4185,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    matrix = []\n    for i in range(n):\n        matrix.append(list(map(int, stdin.split())))\n    total_moves = 0\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j]!= (i * m + j + 1):\n                current_cell = matrix[i][j]\n                target_cell = (i - 1) * m + j + 1\n                if target_cell < 1 or target_cell > n * m:\n                    return \"No solution\"\n                if matrix[i - 1][j] == target_cell:\n                    continue\n                total_moves += 1\n                for k in range(m):\n                    if k == j:\n                        continue\n                    temp = matrix[i][k]\n                    matrix[i][k] = target_cell\n                    target_cell = temp\n                matrix[i][j] = current_cell\n    return total_moves"
    },
    {
        "number": 4185,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    matrix = [list(map(int, input().split())) for _ in range(n)]\n    count = 0\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j]!= (i * m + j + 1):\n                # find the minimum value in the row and column\n                min_val = min(matrix[i])\n                min_row = i\n                for k in range(m):\n                    if matrix[i][k] == min_val:\n                        min_row = k\n                        break\n                min_col = j\n                for k in range(n):\n                    if matrix[k][j] == min_val:\n                        min_col = k\n                        break\n                # set the value in the minimum row and column to the current value\n                matrix[i][min_col] = matrix[i][j]\n                matrix[min_row][j] = matrix[i][j]\n                count += 1\n    return str(count)\n\nwith open(\"input.txt\", \"r\") as f:\n    print(solution(f.read()))"
    },
    {
        "number": 4185,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = [[int(x) for x in stdin.readline().split()] for _ in range(n)]\n\n    count = 0\n    for i in range(n):\n        for j in range(m):\n            if a[i][j]!= (i - 1) * m + j + 1:\n                count += 1\n\n    for j in range(m):\n        if a[0][j]!= j + 1:\n            count += 1\n\n    for i in range(1, n):\n        for j in range(m):\n            if a[i][j]!= (a[0][j] + i - 1) % m + 1:\n                count += 1\n\n    return str(count)\n"
    },
    {
        "number": 4185,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = [[int(c) for c in line.split()] for line in stdin.split('\\n')[1:]]\n    # Check if the matrix is already good\n    for i in range(n):\n        for j in range(m):\n            if a[i][j]!= (i - 1) * m + j + 1:\n                return \"0\"\n    # Perform cyclic shifts of the columns\n    for j in range(m):\n        i = 0\n        while i < n - 1 and a[i][j] == a[i + 1][j]:\n            i += 1\n        if i == n - 1:\n            continue\n        k = i + 1\n        while k < n and a[k][j] == a[k - 1][j]:\n            k += 1\n        if k == n:\n            continue\n        for l in range(j, m):\n            a[i][l], a[k][l] = a[k][l], a[i][l]\n        i += 1\n        k -= 1\n        while i < k:\n            for l in range(j, m):\n                a[i][l], a[k][l] = a[k][l], a[i][l]\n            i += 1\n            k -= 1\n    # Count the number of moves\n    moves = 0\n    for i in range(n):\n        for j in range(m):\n            if a[i][j]!= (i - 1) * m + j + 1:\n                moves += 1\n    return str(moves)"
    },
    {
        "number": 4185,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = [list(map(int, stdin.split())) for _ in range(n)]\n\n    def cyclic_shift(col):\n        col.append(col.pop(0))\n\n    for j in range(m):\n        if a[0][j]!= (j + 1):\n            for i in range(1, n):\n                if a[i][j] == (i * m + j + 1):\n                    a[i][j] = a[i - 1][j]\n                    cyclic_shift(a[i])\n            a[0][j] = j + 1\n\n    count = 0\n    for i in range(1, n):\n        for j in range(m):\n            if a[i][j]!= (i * m + j + 1):\n                count += 1\n                a[i][j] = a[i - 1][j]\n                cyclic_shift(a[i])\n\n    return str(count)\n\nwith open(\"input.txt\", \"r\") as f:\n    input_str = f.read()\n\nwith open(\"output.txt\", \"w\") as f:\n    f.write(solution(input_str))\n"
    },
    {
        "number": 4186,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    # Find minimum total number of problems students should solve to form exactly n//2 teams\n    a.sort()\n    # If n is odd then one team will have one more member than other, hence reduce n by 1\n    n = n - 1 if n % 2 == 1 else n\n    # If we have n/2 teams, then we need to make n-1 teams with one extra member\n    # Each team with one extra member will need (n-1) problems\n    # Hence, we need to solve (n-1) * n/2 problems to form exactly n/2 teams\n    return (n-1) * n // 2\n\nstdin = \"6\\n5 10 2 3 14 5\"\nprint(solution(stdin)) # Output: 5\n\nstdin = \"2\\n1 100\"\nprint(solution(stdin)) # Output: 99"
    },
    {
        "number": 4186,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, *skills = map(int, stdin.split())\n    teams = {i: set() for i in range(n // 2)}\n    count = sum(skills) // 2\n    skills = sorted(enumerate(skills), key=lambda x: -x[1])\n    for i, s in skills:\n        for j in teams:\n            if s == skills[j][1]:\n                teams[j].add(i)\n                teams[j].add(skills[j][0])\n                count -= 2\n                break\n        if count == 0:\n            break\n    return count\n\nprint(solution(\"6\\n5 10 2 3 14 5\")) # 5\nprint(solution(\"2\\n1 100\")) # 99"
    },
    {
        "number": 4186,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    a.sort()\n    total_problems = 0\n    left, right = 0, n-1\n    while left < right:\n        if a[left] + a[right] == 0:\n            total_problems += abs(left - right)\n            left += 1\n            right -= 1\n        elif a[left] + a[right] < 0:\n            left += 1\n        else:\n            right -= 1\n    return total_problems//2"
    },
    {
        "number": 4186,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n    \n    # Count the number of skill levels\n    level_count = {}\n    for i in range(n):\n        level = a[i]\n        level_count[level] = level_count.get(level, 0) + 1\n    \n    # Calculate the minimum number of problems for each team\n    min_problems = [0] * (n // 2)\n    level_order = sorted(level_count.keys())\n    for level in level_order:\n        count = level_count[level]\n        for i in range(n // 2):\n            min_problems[i] += count\n            if min_problems[i] >= n // 2:\n                return i + 1\n    \n    return n // 2\n\ndef"
    },
    {
        "number": 4186,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    \n    if n % 2!= 0:\n        return \"NO\"\n    \n    a.sort()\n    count = 0\n    for i in range(n//2):\n        if a[2*i]!= a[2*i+1]:\n            return \"NO\"\n        count += a[2*i]\n    \n    return str(count)\n    \nprint(solution(\"6\\n5 10 2 3 14 5\")) # 5\nprint(solution(\"2\\n1 100\")) # 99<|im_sep|>"
    },
    {
        "number": 4186,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n = int(stdin.split()[0])\n    skills = list(map(int, stdin.split()[1:]))\n\n    # compute minimum number of problems\n    total_problems = sum(skills)\n    team_size = n // 2\n    if n % 2!= 0:\n        team_size += 1\n\n    # divide problems evenly among teams\n    problems_per_team = total_problems // team_size\n    return problems_per_team"
    },
    {
        "number": 4186,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    total_problems = sum(a)\n\n    if n % 2!= 0:\n        return str(-1)\n\n    # create a list with possible numbers of problems for each student\n    possible_problems = [0] * n\n    current_problems = 0\n    for i in range(n):\n        if a[i] == 0:\n            possible_problems[i] = current_problems\n        else:\n            current_problems += a[i]\n            possible_problems[i] = current_problems\n\n    # find the minimum number of problems for each pair of students to form a team\n    min_problems = [(0, 0)] * (n // 2)\n    for i in range(n // 2):\n        for j in range(i + 1, n // 2):\n            min_problems[i] = (min_problems[i][0] + possible_problems[i] + possible_problems[j], i + 1)\n            min_problems[j] = (min_problems[j][0] + possible_problems[i] + possible_problems[j], j + 1)\n\n    # find the total number of problems needed to form exactly n // 2 teams\n    total_min_problems = sum(min_problem[0] for min_problem in min_problems)\n    if total_min_problems == total_problems:\n        # the optimal solution has been found\n        return str(total_min_problems)\n\n    # if the optimal solution has not been found, try to improve it\n    for i in range(n // 2):\n        for j in range(i + 1, n // 2):\n            if possible_problems[i] == 0 and possible_problems[j] > 0:\n                min_problems[i] = (min_problems[i][0] + possible_problems[j], i + 1)\n            elif possible_problems[j] == 0 and possible_problems[i] > 0:\n                min_problems[j] = (min_problems[j][0] + possible_problems[i], j + 1)\n            elif possible_problems[i] > 0 and possible_problems[j] > 0:\n                # try to swap the positions of the students to improve the solution\n                temp = min_problems[i]\n                min_problems[i] = (min_problems[i][0] + possible_problems[j], j + 1)\n                min_problems[j] = (min_problems[j][0] + possible_problems[i], i + 1)\n                if temp[0] > min_problems[i][0]:\n                    min_problems[i] = temp\n                temp = min_problems[j]\n                min_problems[j] = (min_problems[j][0] + possible_problems[i], i + 1)\n                if temp[0] > min_problems[j][0]:\n                    min_problems[j] = temp\n\n    total_min_problems = sum(min_problem[0] for min_problem in min_problems)\n    return str(total_min_problems)"
    },
    {
        "number": 4186,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    # Calculate minimum problems\n    ans = (sum(sorted(a)[::2]) + sum(sorted(a)[1::2])) // 2\n\n    return str(ans)"
    },
    {
        "number": 4186,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n\n    a.sort(reverse=True)\n    if n % 2 == 1:\n        a = a[:-1]\n    n = len(a)\n    ans = sum(a)\n    if n % 2 == 0:\n        mid = n // 2\n        ans -= sum(a[:mid])\n    return str(ans)"
    },
    {
        "number": 4186,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n\n    a.sort()\n\n    # We can form two teams if we can form the first team with the first student and the second team with the second student\n    # so we can take the maximum possible skill of the second student\n    # and the minimum possible skill of the first student\n    # and the total number of problems is equal to the sum of their skills\n    # We can iterate over all possible pairs and count the number of such pairs that\n    # satisfy these conditions\n    count = 0\n    for i in range(n // 2):\n        if a[i] + a[-i-1] == a[i+1] + a[-i-2]:\n            count += 1\n\n    return count"
    },
    {
        "number": 4187,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    rests = []\n    prev = 0\n    for i in range(n):\n        if a[i] == 0:\n            if prev == 0:\n                prev = i\n            else:\n                rests.append((prev, i))\n                prev = 0\n        else:\n            prev = i\n    if prev!= 0:\n        rests.append((prev, n))\n    ans = 0\n    for r in rests:\n        ans = max(ans, r[1] - r[0])\n    return str(ans)\n\nprint(solution(input()))"
    },
    {
        "number": 4187,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n\n    count = 0\n    max_count = 0\n    for i in range(n):\n        if a[i] == 1:\n            count += 1\n        else:\n            max_count = max(max_count, count)\n            count = 0\n\n    return max(max_count, count)\n\nprint(solution(input()))"
    },
    {
        "number": 4187,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Get input\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n\n    # Count the number of consecutive hours with a[i]=1\n    count = 0\n    max_count = 0\n    for i in range(n):\n        if a[i] == 1:\n            count += 1\n            max_count = max(max_count, count)\n        else:\n            count = 0\n\n    return str(max_count)"
    },
    {
        "number": 4187,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = [int(x) for x in stdin.readline().strip().split()]\n    resting = 0\n    max_resting = 0\n    for i in range(n):\n        if a[i] == 0:\n            resting += 1\n        else:\n            if resting > max_resting:\n                max_resting = resting\n            resting = 0\n    if resting > max_resting:\n        max_resting = resting\n    return str(max_resting)"
    },
    {
        "number": 4187,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, a = list(map(int, stdin.strip().split()))\n    count = 0\n    for i in range(n):\n        if a[i] == 0:\n            break\n        count += 1\n    return count"
    },
    {
        "number": 4187,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().strip().split()))\n    \n    # Initialize variables\n    max_rest = 0\n    current_rest = 0\n    \n    # Iterate over a\n    for i in range(n):\n        if a[i] == 1:\n            current_rest += 1\n        else:\n            if current_rest > max_rest:\n                max_rest = current_rest\n            current_rest = 0\n    \n    # Check if the last rest is the maximal rest\n    if current_rest > max_rest:\n        max_rest = current_rest\n    \n    # Return the result\n    return str(max_rest)"
    },
    {
        "number": 4187,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = [int(x) for x in stdin.readline().strip().split()]\n    max_rest = 0\n    rest = 0\n    for i in range(n):\n        if a[i] == 0:\n            if rest > max_rest:\n                max_rest = rest\n            rest = 0\n        else:\n            rest += 1\n    if rest > max_rest:\n        max_rest = rest\n    return str(max_rest)"
    },
    {
        "number": 4187,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    max_rest = 0\n    current_rest = 0\n    for i in range(n):\n        if a[i] == 0:\n            current_rest = 0\n        else:\n            current_rest += 1\n            max_rest = max(max_rest, current_rest)\n    return str(max_rest)"
    },
    {
        "number": 4187,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().strip().split()))\n    \n    max_rest = 0\n    rest_count = 0\n    \n    for i in range(n):\n        if a[i] == 0:\n            rest_count = 0\n        else:\n            rest_count += 1\n            if rest_count > max_rest:\n                max_rest = rest_count\n    \n    return max_rest"
    },
    {
        "number": 4187,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, a = list(map(int, stdin.strip().split()))\n    rests = []\n    for i in range(n):\n        if a[i] == 0:\n            rests.append(i)\n    if len(rests) == 0:\n        return \"0\"\n    max_rest_hours = 1\n    current_rest_hours = 1\n    for i in range(1, len(rests)):\n        if rests[i] == rests[i-1] + 1:\n            current_rest_hours += 1\n        else:\n            max_rest_hours = max(max_rest_hours, current_rest_hours)\n            current_rest_hours = 1\n    max_rest_hours = max(max_rest_hours, current_rest_hours)\n    return str(max_rest_hours)\n"
    },
    {
        "number": 4188,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    facts = {\n        1: \"The highest mountain above sea level in the world is Mount Everest. Its peak rises to 8848 m.\",\n        2: \"The largest board game tournament consisted of 958 participants playing chapaev.\",\n        3: \"The largest online maths competition consisted of 12766 participants.\",\n        4: \"The Nile is credited as the longest river in the world. From its farthest stream in Burundi, it extends 6695 km in length.\",\n        5: \"While not in flood, the main stretches of the Amazon river in South America can reach widths of up to 1100 km at its widest points.\",\n        6: \"Angel Falls is the highest waterfall. Its greatest single drop measures 807 m.\",\n        7: \"The Hotel Everest View above Namche, Nepal \u2014 the village closest to Everest base camp \u2013 is at a record height of 31962 m.\",\n        8: \"Uranium is the heaviest of all the naturally occurring elements. Its most common isotope has a nucleus containing 146 neutrons.\",\n        9: \"The coldest permanently inhabited place is the Siberian village of Oymyakon, where the temperature of -68\u00b0C was registered in the twentieth century.\",\n        10: \"The longest snake held in captivity is over 25 feet long. Its name is Medusa.\",\n        11: \"Colonel Meow holds the world record for longest fur on a cat \u2014 almost 134 centimeters.\",\n        12: \"Sea otters can have up to 10000 hairs per square inch. This is the most dense fur in the animal kingdom.\",\n        13: \"The largest state of USA is Alaska; its area is 663268 square miles.\",\n        14: \"Lake Baikal is the largest freshwater lake in the world. It reaches 1642 meters in depth and contains around one-fifth of the world\u2019s unfrozen fresh water.\",\n        15: \"The most colorful national flag is the one of Turkmenistan, with 106 colors.\",\n        16: \"The second largest state of USA is Hawaii; its area is 213,404 square miles.\",\n    }\n    if n in facts:\n        return facts[n]\n    else:\n        return \"\""
    },
    {
        "number": 4188,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Read the input\n    input_arr = stdin.split('\\n')\n    n = int(input_arr[0])\n    \n    # List of facts\n    facts = [\n        \"The highest mountain above sea level in the world is Mount Everest.\",\n        \"Mount Everest's peak rises to 8848 m.\",\n        \"The largest board game tournament consisted of 958 participants playing chapaev.\",\n        \"The largest online maths competition consisted of 12766 participants.\",\n        \"The Nile is credited as the longest river in the world.\",\n        \"The Nile extends 6695 km in length.\",\n        \"While not in flood, the main stretches of the Amazon river in South America can reach widths of up to 1100 km at its widest points.\",\n        \"Angel Falls is the highest waterfall.\",\n        \"Angel Falls's greatest single drop measures 807 m.\",\n        \"The Hotel Everest View above Namche, Nepal is at a record height of 31962 m.\",\n        \"Uranium is the heaviest of all the naturally occurring elements.\",\n        \"Its most common isotope has a nucleus containing 146 neutrons.\",\n        \"The coldest permanently inhabited place is the Siberian village of Oymyakon, where the temperature of -68\u00b0C was registered in the twentieth century.\",\n        \"The longest snake held in captivity is over 25 feet long.\",\n        \"Its name is Medusa.\",\n        \"Colonel Meow holds the world record for longest fur on a cat \u2014 almost 134 centimeters.\",\n        \"Sea otters can have up to 10000 hairs per square inch.\",\n        \"This is the most dense fur in the animal kingdom.\",\n        \"The largest state of USA is Alaska; its area is 663268 square miles.\",\n        \"Alaska has a longer coastline than all of the other 49 U.S. States put together.\",\n        \"It is 154103 miles long.\",\n        \"Lake Baikal is the largest freshwater lake in the world.\",\n        \"It reaches 1642 meters in depth and contains around one-fifth of the world's unfrozen fresh water.\",\n        \"The most colorful national flag is the one of Turkmenistan, with 106 colors.\"\n    ]\n    \n    # Return the fact at index n-1 if it exists, or 0 if not\n    if n <= len(facts):\n        return facts[n-1]\n    else:\n        return 0"
    },
    {
        "number": 4188,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    facts = [\n        \"The highest mountain above sea level in the world is Mount Everest. Its peak rises to 8848 m.\",\n        \"The largest board game tournament consisted of 958 participants playing chapaev.\",\n        \"The largest online maths competition consisted of 12766 participants.\",\n        \"The Nile is credited as the longest river in the world. From its farthest stream in Burundi, it extends 6695 km in length.\",\n        \"While not in flood, the main stretches of the Amazon river in South America can reach widths of up to 1100 km at its widest points.\",\n        \"Angel Falls is the highest waterfall. Its greatest single drop measures 807 m.\",\n        \"The Hotel Everest View above Namche, Nepal \u2014 the village closest to Everest base camp \u2013 is at a record height of 31962 m Uranium is the heaviest of all the naturally occurring elements. Its most common isotope has a nucleus containing 146 neutrons.\",\n        \"The coldest permanently inhabited place is the Siberian village of Oymyakon, where the temperature of -68\u00b0C was registered in the twentieth century.\",\n        \"The longest snake held in captivity is over 25 feet long. Its name is Medusa.\",\n        \"Colonel Meow holds the world record for longest fur on a cat \u2014 almost 134 centimeters.\",\n        \"Sea otters can have up to 10000 hairs per square inch. This is the most dense fur in the animal kingdom.\",\n        \"The largest state of USA is Alaska; its area is 663268 square miles Alaska has a longer coastline than all of the other 49 U.S. States put together: it is 154103 miles long.\",\n        \"Lake Baikal is the largest freshwater lake in the world. It reaches 1642\u00a0meters in depth and contains around one-fifth of the world\u2019s unfrozen fresh water.\",\n        \"The most colorful national flag is the one of Turkmenistan, with 106 colors.\"\n    ]\n\n    if int(stdin) <= 16 and int(stdin) > 0:\n        return facts[int(stdin)-1]\n    else:\n        return \"Invalid input.\"\n"
    },
    {
        "number": 4188,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    facts = [\n        \"The highest mountain above sea level in the world is Mount Everest.\",\n        \"The largest board game tournament consisted of 958 participants playing chapaev.\",\n        \"The largest online maths competition consisted of 12766 participants.\",\n        \"The Nile is credited as the longest river in the world.\",\n        \"From its farthest stream in Burundi, it extends 6695 km in length.\",\n        \"While not in flood, the main stretches of the Amazon river in South America can reach widths of up to 1100 km at its widest points.\",\n        \"Angel Falls is the highest waterfall.\",\n        \"Its greatest single drop measures 807 m.\",\n        \"The Hotel Everest View above Namche, Nepal \u2014 the village closest to Everest base camp \u2013 is at a record height of 31962 m.\",\n        \"Uranium is the heaviest of all the naturally occurring elements.\",\n        \"Its most common isotope has a nucleus containing 146 neutrons.\",\n        \"The coldest permanently inhabited place is the Siberian village of Oymyakon, where the temperature of -68\u00b0C was registered in the twentieth century.\",\n        \"The longest snake held in captivity is over 25 feet long.\",\n        \"Its name is Medusa.\",\n        \"Colonel Meow holds the world record for longest fur on a cat \u2014 almost 134 centimeters.\",\n        \"Sea otters can have up to 10000 hairs per square inch.\",\n        \"This is the most dense fur in the animal kingdom.\",\n        \"The largest state of USA is Alaska; its area is 663268 square miles.\",\n        \"Alaska has a longer coastline than all of the other 49 U.S. States put together: it is 154103 miles long.\",\n        \"Lake Baikal is the largest freshwater lake in the world.\",\n        \"It reaches 1642\u00a0meters in depth and contains around one-fifth of the world\u2019s unfrozen fresh water.\",\n        \"The most colorful national flag is the one of Turkmenistan, with 106 colors.\"\n    ]\n    if stdin.isdigit() and 1 <= int(stdin) <= 16:\n        return str(int(stdin) <= len(facts))\n    else:\n        return \"Invalid input\""
    },
    {
        "number": 4188,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    arr = [\n        \"The highest mountain above sea level in the world is Mount Everest. Its peak rises to 8848 m.\",\n        \"The largest board game tournament consisted of 958 participants playing chapaev.\",\n        \"The largest online maths competition consisted of 12766 participants.\",\n        \"The Nile is credited as the longest river in the world. From its farthest stream in Burundi, it extends 6695 km in length.\",\n        \"While not in flood, the main stretches of the Amazon river in South America can reach widths of up to 1100 km at its widest points.\",\n        \"Angel Falls is the highest waterfall. Its greatest single drop measures 807 m.\",\n        \"The Hotel Everest View above Namche, Nepal \u2014 the village closest to Everest base camp \u2013 is at a record height of 31962 m.\",\n        \"Uranium is the heaviest of all the naturally occurring elements. Its most common isotope has a nucleus containing 146 neutrons.\",\n        \"The coldest permanently inhabited place is the Siberian village of Oymyakon, where the temperature of -68\u00b0C was registered in the twentieth century.\",\n        \"The longest snake held in captivity is over 25 feet long. Its name is Medusa.\",\n        \"Colonel Meow holds the world record for longest fur on a cat \u2014 almost 134 centimeters.\",\n        \"Sea otters can have up to 10000 hairs per square inch. This is the most dense fur in the animal kingdom.\",\n        \"The largest state of USA is Alaska; its area is 663268 square miles Alaska has a longer coastline than all of the other 49 U.S. States put together: it is 154103 miles long.\",\n        \"Lake Baikal is the largest freshwater lake in the world. It reaches 1642\u00a0meters in depth and contains around one-fifth of the world\u2019s unfrozen fresh water.\",\n        \"The most colorful national flag is the one of Turkmenistan, with 106 colors.\"\n    ]\n    if int(stdin) < 1 or int(stdin) > 16:\n        return \"Invalid input\"\n    return arr[int(stdin)-1]"
    },
    {
        "number": 4188,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    arr = [\n        \"The highest mountain above sea level in the world is Mount Everest. Its peak rises to 8848 m.\",\n        \"The largest board game tournament consisted of 958 participants playing chapaev.\",\n        \"The largest online maths competition consisted of 12766 participants.\",\n        \"The Nile is credited as the longest river in the world. From its farthest stream in Burundi, it extends 6695 km in length.\",\n        \"While not in flood, the main stretches of the Amazon river in South America can reach widths of up to 1100 km at its widest points.\",\n        \"Angel Falls is the highest waterfall. Its greatest single drop measures 807 m.\",\n        \"The Hotel Everest View above Namche, Nepal \u2014 the village closest to Everest base camp \u2013 is at a record height of 31962 m.\",\n        \"Uranium is the heaviest of all the naturally occurring elements. Its most common isotope has a nucleus containing 146 neutrons.\",\n        \"The coldest permanently inhabited place is the Siberian village of Oymyakon, where the temperature of -68\u00b0C was registered in the twentieth century.\",\n        \"The longest snake held in captivity is over 25 feet long. Its name is Medusa.\",\n        \"Colonel Meow holds the world record for longest fur on a cat \u2014 almost 134 centimeters.\",\n        \"Sea otters can have up to 10000 hairs per square inch. This is the most dense fur in the animal kingdom.\",\n        \"The largest state of USA is Alaska; its area is 663268 square miles.\",\n        \"Lake Baikal is the largest freshwater lake in the world. It reaches 1642\u00a0meters in depth and contains around one-fifth of the world\u2019s unfrozen fresh water.\",\n        \"The most colorful national flag is the one of Turkmenistan, with 106 colors.\"\n    ]\n    return len(arr[int(stdin)-1])"
    },
    {
        "number": 4188,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    facts = [\n        \"The highest mountain above sea level in the world is Mount Everest. Its peak rises to 8848 m.\",\n        \"The largest board game tournament consisted of 958 participants playing chapaev.\",\n        \"The largest online maths competition consisted of 12766 participants.\",\n        \"The Nile is credited as the longest river in the world. From its farthest stream in Burundi, it extends 6695 km in length.\",\n        \"While not in flood, the main stretches of the Amazon river in South America can reach widths of up to 1100 km at its widest points.\",\n        \"Angel Falls is the highest waterfall. Its greatest single drop measures 807 m.\",\n        \"The Hotel Everest View above Namche, Nepal \u2014 the village closest to Everest base camp \u2013 is at a record height of 31962 m Uranium is the heaviest of all the naturally occurring elements.\",\n        \"Its most common isotope has a nucleus containing 146 neutrons.\",\n        \"The coldest permanently inhabited place is the Siberian village of Oymyakon, where the temperature of -68\u00b0C was registered in the twentieth century.\",\n        \"The longest snake held in captivity is over 25 feet long. Its name is Medusa.\",\n        \"Colonel Meow holds the world record for longest fur on a cat \u2014 almost 134 centimeters.\",\n        \"Sea otters can have up to 10000 hairs per square inch. This is the most dense fur in the animal kingdom.\",\n        \"The largest state of USA is Alaska; its area is 663268 square miles Alaska has a longer coastline than all of the other 49 U.S. States put together: it is 154103 miles long.\",\n        \"Lake Baikal is the largest freshwater lake in the world. It reaches 1642\u00a0meters in depth and contains around one-fifth of the world\u2019s unfrozen fresh water.\",\n        \"The most colorful national flag is the one of Turkmenistan, with 106 colors.\",\n    ]\n    return 1 if n <= len(facts) else 0"
    },
    {
        "number": 4188,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    arr = []\n    arr.append(\"The highest mountain above sea level in the world is Mount Everest. Its peak rises to 8848 m.\")\n    arr.append(\"The largest board game tournament consisted of 958 participants playing chapaev.\")\n    arr.append(\"The largest online maths competition consisted of 12766 participants.\")\n    arr.append(\"The Nile is credited as the longest river in the world. From its farthest stream in Burundi, it extends 6695 km in length.\")\n    arr.append(\"While not in flood, the main stretches of the Amazon river in South America can reach widths of up to 1100 km at its widest points.\")\n    arr.append(\"Angel Falls is the highest waterfall. Its greatest single drop measures 807 m.\")\n    arr.append(\"The Hotel Everest View above Namche, Nepal \u2014 the village closest to Everest base camp \u2013 is at a record height of 31962 m Uranium is the heaviest of all the naturally occurring elements.\")\n    arr.append(\"Its most common isotope has a nucleus containing 146 neutrons.\")\n    arr.append(\"The coldest permanently inhabited place is the Siberian village of Oymyakon, where the temperature of -68\u00b0C was registered in the twentieth century.\")\n    arr.append(\"The longest snake held in captivity is over 25 feet long. Its name is Medusa.\")\n    arr.append(\"Colonel Meow holds the world record for longest fur on a cat \u2014 almost 134 centimeters.\")\n    arr.append(\"Sea otters can have up to 10000 hairs per square inch. This is the most dense fur in the animal kingdom.\")\n    arr.append(\"The largest state of USA is Alaska; its area is 663268 square miles Alaska has a longer coastline than all of the other 49 U.S. States put together: it is 154103 miles long.\")\n    arr.append(\"Lake Baikal is the largest freshwater lake in the world. It reaches 1642\u00a0meters in depth and contains around one-fifth of the world\u2019s unfrozen fresh water.\")\n    arr.append(\"The most colorful national flag is the one of Turkmenistan, with 106 colors.\")\n    \n    n = int(stdin)\n    if n >= 1 and n <= 16:\n        return arr[n-1]\n    else:\n        return \"Error: Input out of range\""
    },
    {
        "number": 4188,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"1\"\n    else:\n        return \"0\""
    },
    {
        "number": 4188,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    n = int(stdin)\n\n    # define array of facts\n    facts = [\n        \"The highest mountain above sea level in the world is Mount Everest. Its peak rises to 8848 m.\",\n        \"The largest board game tournament consisted of 958 participants playing chapaev.\",\n        \"The largest online maths competition consisted of 12766 participants.\",\n        \"The Nile is credited as the longest river in the world. From its farthest stream in Burundi, it extends 6695 km in length.\",\n        \"While not in flood, the main stretches of the Amazon river in South America can reach widths of up to 1100 km at its widest points.\",\n        \"Angel Falls is the highest waterfall. Its greatest single drop measures 807 m.\",\n        \"The Hotel Everest View above Namche, Nepal \u2014 the village closest to Everest base camp \u2013 is at a record height of 31962 m.\",\n        \"Uranium is the heaviest of all the naturally occurring elements. Its most common isotope has a nucleus containing 146 neutrons.\",\n        \"The coldest permanently inhabited place is the Siberian village of Oymyakon, where the temperature of -68\u00b0C was registered in the twentieth century.\",\n        \"The longest snake held in captivity is over 25 feet long. Its name is Medusa.\",\n        \"Colonel Meow holds the world record for longest fur on a cat \u2014 almost 134 centimeters.\",\n        \"Sea otters can have up to 10000 hairs per square inch. This is the most dense fur in the animal kingdom.\",\n        \"The largest state of USA is Alaska; its area is 663268 square miles Alaska has a longer coastline than all of the other 49 U.S. States put together: it is 154103 miles long.\",\n        \"Lake Baikal is the largest freshwater lake in the world. It reaches 1642 meters in depth and contains around one-fifth of the world\u2019s unfrozen fresh water.\",\n        \"The most colorful national flag is the one of Turkmenistan, with 106 colors.\"\n    ]\n\n    # check if input is valid\n    if n < 1 or n > 16:\n        return \"Invalid input\"\n\n    # return fact at given index\n    return facts[n-1]"
    },
    {
        "number": 4189,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    cheeses = [line.strip().split() for line in stdin.strip().split('\\n')]\n    cheese_types = set([cheese[1] for cheese in cheeses])\n    soft_cheeses = [cheese for cheese in cheeses if cheese[1] =='soft']\n    hard_cheeses = [cheese for cheese in cheeses if cheese[1] == 'hard']\n\n    if len(soft_cheeses) == 0:\n        return str(len(hard_cheeses))\n\n    if len(hard_cheeses) == 0:\n        return str(len(soft_cheeses))\n\n    soft_cheeses.sort(key=lambda x: x[0])\n    hard_cheeses.sort(key=lambda x: x[0])\n\n    i = 0\n    j = 0\n    total = 0\n    while i < len(soft_cheeses) and j < len(hard_cheeses):\n        if soft_cheeses[i][0] < hard_cheeses[j][0]:\n            total += 1\n            i += 1\n        else:\n            total += 1\n            j += 1\n\n    total += len(soft_cheeses[i:]) + len(hard_cheeses[j:])\n\n    return str(total)"
    },
    {
        "number": 4189,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    cheeses = {}\n    for i in range(1, n+1):\n        name, type_ = lines[i].strip().split()\n        cheeses[name] = type_\n    \n    soft_cheeses = [cheese for cheese in cheeses if cheeses[cheese] =='soft']\n    hard_cheeses = [cheese for cheese in cheeses if cheeses[cheese] == 'hard']\n    \n    return str(len(soft_cheeses) + len(hard_cheeses))"
    },
    {
        "number": 4189,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    cheeses = {}\n    N = int(stdin.split('\\n')[0])\n    for i in range(1, N+1):\n        name, type = stdin.split('\\n')[i].split()\n        cheeses[name] = type\n    types = set(cheeses.values())\n    if len(types) == 1:\n        return str(len(cheeses))\n    if 'hard' in types and'soft' in types:\n        return str(sum(1 for type in types if type == 'hard'))\n    if 'hard' in types and'soft' not in types:\n        return str(len(cheeses))\n    return str(len(cheeses) - types.count('hard'))\n\nprint(solution('''9\nbrie soft\ncamembert soft\nfeta soft\ngoat soft\nmuenster soft\nasiago hard\ncheddar hard\ngouda hard\nswiss hard'''))"
    },
    {
        "number": 4189,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    cheeses = []\n    for i in range(n):\n        cheese_name, cheese_type = stdin.readline().strip().split()\n        cheeses.append((cheese_name, cheese_type))\n    cheese_types = set(map(lambda x: x[1], cheeses))\n    num_of_types = len(cheese_types)\n    return str(num_of_types)"
    },
    {
        "number": 4189,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split(\"\\n\")\n    n = int(lines[0])\n    cheese_types = {}\n    for i in range(1, n+1):\n        name, type = lines[i].split()\n        cheese_types[name] = type\n    \n    count = 0\n    for name, type in cheese_types.items():\n        if type == \"hard\":\n            count += 1\n    \n    return count\n    "
    },
    {
        "number": 4189,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    cheeses = []\n    n = int(stdin.split()[0])\n    for i in range(n):\n        cheese_info = stdin.split()[i*2+1:i*2+3]\n        cheeses.append({'name': cheese_info[0], 'type': cheese_info[1]})\n    types = ['soft', 'hard']\n    hard_cheeses = [cheese for cheese in cheeses if cheese['type'] == 'hard']\n    soft_cheeses = [cheese for cheese in cheeses if cheese['type'] =='soft']\n    return str(len(hard_cheeses) + len(soft_cheeses))"
    },
    {
        "number": 4189,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    cheeses = {}\n    for _ in range(n):\n        name, type_ = stdin.readline().strip().split()\n        cheeses[name] = type_\n    types = set(cheeses.values())\n    return str(len(types))"
    },
    {
        "number": 4189,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    cheese_types = {}\n    for i in range(n):\n        name, type = stdin.readline().strip().split()\n        cheese_types[name] = type\n    count = 0\n    for cheese in cheese_types:\n        if cheese_types[cheese] == \"soft\":\n            count += 1\n    return str(count)"
    },
    {
        "number": 4189,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    cheeses = {}\n    for i in range(n):\n        name, type = stdin.split()[1:]\n        cheeses[name] = type\n\n    types = set(cheeses.values())\n    if len(types) == 1:\n        return '0'\n\n    soft = 0\n    hard = 0\n    for type in types:\n        if type =='soft':\n            soft += 1\n        elif type == 'hard':\n            hard += 1\n\n    return str(max(soft, hard))"
    },
    {
        "number": 4189,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    cheeses = []\n    for i in range(N):\n        cheese_name, cheese_type = stdin.readline().strip().split()\n        cheeses.append((cheese_name, cheese_type))\n\n    # count the number of soft and hard cheeses\n    soft_count = 0\n    hard_count = 0\n    for cheese in cheeses:\n        if cheese[1] == \"soft\":\n            soft_count += 1\n        elif cheese[1] == \"hard\":\n            hard_count += 1\n    \n    return str(min(soft_count, hard_count))\n\nstdin = \"\"\"\n9\nbrie soft\ncamembert soft\nfeta soft\ngoat soft\nmuenster soft\nasiago hard\ncheddar hard\ngouda hard\nswiss hard\n\"\"\"\n\nprint(solution(stdin)) # Output: 3"
    },
    {
        "number": 4190,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    b = list(map(int, stdin.readline().strip().split()))\n\n    # sort b\n    b.sort()\n\n    # calculate c\n    c = [(a[i] + b[i]) % n for i in range(n)]\n\n    # print c\n    return''.join(map(str, c))"
    },
    {
        "number": 4190,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    \n    # reorder b\n    for i in range(n):\n        j = b.index(i)\n        b[j] = b[i]\n        b[i] = i\n    \n    # calculate c\n    c = [(a[i] + b[i]) % n for i in range(n)]\n    \n    # print output\n    return''.join(map(str, c))\n\nstdin = \"\"\"\n4\n0 1 2 1\n3 2 1 1\n\"\"\"\n\nstdout = \"\"\"\n1 0 0 2 \n\"\"\"\n\nstdin = \"\"\"\n7\n2 5 1 5 3 4 3\n2 4 3 5 6 5 1\n\"\"\"\n\nstdout = \"\"\"\n0 0 0 1 0 2 4\n\"\"\"\n\nassert solution(stdin) == stdout.strip()\n\nstdin = \"\"\"\n3\n0 1 2\n1 0 2\n\"\"\"\n\nstdout = \"\"\"\n1 0 0 \n\"\"\"\n\nstdin = \"\"\"\n3\n0 1 2\n2 0 1\n\"\"\"\n\nstdout = \"\"\"\n0 1 0 \n\"\"\"\n\nassert solution(stdin) == stdout.strip()"
    },
    {
        "number": 4190,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n    b = list(map(int, stdin.split('\\n')[2].split()))\n    c = [(a[i]+b[i])%n for i in range(n)]\n    c.sort()\n    return''.join(map(str, c))"
    },
    {
        "number": 4190,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    \n    # Reorder elements of b to obtain lexicographically minimum possible c\n    b.sort()\n    \n    # Compute c\n    c = [(a[i] + b[i]) % n for i in range(n)]\n    \n    # Convert c to string and return\n    return''.join(map(str, c))"
    },
    {
        "number": 4190,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    b = list(map(int, stdin.readline().strip().split()))\n    c = [(a[i] + b[i]) % n for i in range(n)]\n    c.sort()\n    return''.join(map(str, c))"
    },
    {
        "number": 4190,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    b = list(map(int, stdin.readline().strip().split()))\n\n    b_set = set(b)\n    for i in range(n):\n        if b[i] not in b_set:\n            b[i] = max(b_set) + 1\n\n    for i in range(n):\n        b[i] = (a[i] + b[i]) % n\n\n    return''.join(map(str, b))"
    },
    {
        "number": 4190,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    b = list(map(int, stdin.readline().strip().split()))\n\n    c = [(a[i] + b[i]) % n for i in range(n)]\n    c.sort()\n\n    return''.join(map(str, c))\n\nprint(solution(input()))"
    },
    {
        "number": 4190,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    b = list(map(int, stdin.readline().strip().split()))\n\n    # Find lexicographically minimum array c\n    c = [(a[i] + b[i]) % n for i in range(n)]\n    c.sort()\n\n    # Reorder elements of array b to obtain lexicographically minimum array c\n    b_new = [0] * n\n    for i in range(n):\n        b_new[c.index(b[i])] = b[i]\n\n    return \" \".join(map(str, b_new))\n\nprint(solution(\"4\\n0 1 2 1\\n3 2 1 1\")) # Output: 1 0 0 2\nprint(solution(\"7\\n2 5 1 5 3 4 3\\n2 4 3 5 6 5 1\")) # Output: 0 0 0 1 0 2 4<|im_sep|>"
    },
    {
        "number": 4190,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n\n    # Step 1: Calculate the array c\n    c = [(a[i] + b[i]) % n for i in range(n)]\n\n    # Step 2: Reorder the elements of the array b to obtain the lexicographically minimum possible array c\n    for i in range(n):\n        for j in range(i+1, n):\n            if b[i] > b[j]:\n                b[i], b[j] = b[j], b[i]\n\n    # Step 3: Print the array c\n    return''.join(map(str, c))"
    },
    {
        "number": 4190,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().strip().split()))\n    b = list(map(int, stdin.readline().strip().split()))\n    \n    # sort b in lexicographically minimum order\n    b.sort()\n    \n    c = [(a[i] + b[i]) % n for i in range(n)]\n    \n    return''.join(map(str, c))\n\nwith open('input.txt', 'r') as f:\n    stdin = f.read()\n\nstdout = solution(stdin)\nprint(stdout)"
    },
    {
        "number": 4191,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lst = list(map(int, stdin.split()))\n    return str(sum(lst))\n\nprint(solution(input()))"
    },
    {
        "number": 4191,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    zero_count = lines.count('0')\n    one_count = lines.count('1')\n    if zero_count > one_count:\n        return '0'\n    else:\n        return '1'"
    },
    {
        "number": 4191,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # split input into four lines\n    lines = stdin.split(\"\\n\")\n    # convert lines into integers\n    digits = [int(line) for line in lines]\n    # initialize variables\n    count_0 = 0\n    count_1 = 0\n    # count the number of occurrences of 0 and 1\n    for digit in digits:\n        if digit == 0:\n            count_0 += 1\n        elif digit == 1:\n            count_1 += 1\n    # check which number appears most frequently\n    if count_0 > count_1:\n        return \"0\"\n    else:\n        return \"1\""
    },
    {
        "number": 4191,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Convert input to a list of integers\n    lines = list(map(int, stdin.split()))\n\n    # Calculate the sum of the first three digits\n    first_three = lines[0] + lines[1] + lines[2]\n\n    # If the sum is divisible by 3, output 0, otherwise output 1\n    if first_three % 3 == 0:\n        return '0'\n    else:\n        return '1'\n"
    },
    {
        "number": 4191,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    zero_count = sum(1 for line in lines if line == '0')\n    return '0' if zero_count > len(lines)/2 else '1'"
    },
    {
        "number": 4191,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    This function takes input as a string, reads each line as a binary number and returns the corresponding decimal number.\n    \"\"\"\n    # split the input string into lines\n    lines = stdin.split('\\n')\n    # initialize an empty list to store the binary numbers\n    binary_nums = []\n    # loop through each line and convert it to a binary number\n    for line in lines:\n        binary_num = int(line)\n        binary_nums.append(binary_num)\n    # convert the list of binary numbers to decimal number and return it\n    decimal_num = int(''.join(map(str, binary_nums)), 2)\n    return str(decimal_num)"
    },
    {
        "number": 4191,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    a, b, c, d = map(int, lines)\n    return str((a + b + c + d) % 2)\n\nstdin = '''\n0\n1\n1\n0\n'''\n\nprint(solution(stdin)) # Output: 0"
    },
    {
        "number": 4191,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split(\"\\n\")\n    zero_count = lines.count(\"0\")\n    one_count = lines.count(\"1\")\n    if zero_count > one_count:\n        return \"0\"\n    elif zero_count < one_count:\n        return \"1\"\n    else:\n        return \"0\""
    },
    {
        "number": 4191,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Convert the input string into a list of integers\n    input_list = [int(digit) for digit in stdin.strip().split()]\n\n    # Find the number of 1's in the input list\n    count_ones = input_list.count(1)\n\n    # Output the result\n    if count_ones % 2 == 0:\n        return \"0\"\n    else:\n        return \"1\""
    },
    {
        "number": 4191,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    ones = 0\n    zeros = 0\n    for i in range(4):\n        if int(lines[i]) == 1:\n            ones += 1\n        else:\n            zeros += 1\n    if ones > zeros:\n        return \"1\"\n    else:\n        return \"0\""
    },
    {
        "number": 4192,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    d, t, s = map(int, stdin.split())\n    distance = d / s\n    if distance > t:\n        return \"No\"\n    else:\n        return \"Yes\""
    },
    {
        "number": 4192,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    D, T, S = map(int, stdin.split())\n    if T * S >= D:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4192,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    D, T, S = map(int, stdin.split())\n    time = D / S\n    if time <= T:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4192,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.split()\n    D = int(inputs[0])\n    T = int(inputs[1])\n    S = int(inputs[2])\n    time_to_meet = D / S\n    if time_to_meet > T:\n        return \"No\"\n    else:\n        return \"Yes\""
    },
    {
        "number": 4192,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    d, t, s = map(int, stdin.split())\n    if s <= d / t:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4192,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    D, T, S = map(int, stdin.split())\n    if (D / S) <= T:\n        return 'Yes'\n    else:\n        return 'No'"
    },
    {
        "number": 4192,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    D, T, S = map(int, stdin.strip().split())\n    if T * S >= D:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4192,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    d, t, s = map(int, stdin.split())\n    time_to_reach_place = d / s\n    if time_to_reach_place <= t:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4192,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    d, t, s = map(int, stdin.split())\n    if (d * 2) <= s * t:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4192,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    d, t, s = map(int, stdin.split())\n    time_taken = d / s\n    if time_taken <= t:\n        return \"Yes\"\n    else:\n        return \"No\"\n\ndef"
    },
    {
        "number": 4193,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    grid = []\n    for i in range(3):\n        row = list(map(int, stdin.readline().strip().split()))\n        assert len(row) == 3, f\"Invalid row: {row}\"\n        grid.append(row)\n    n = int(stdin.readline())\n    assert n <= 10, f\"Invalid N: {n}\"\n    numbers = list(map(int, stdin.readline().strip().split()))\n    assert len(numbers) == n, f\"Invalid numbers: {numbers}\"\n\n    # Check for bingo\n    bingo = False\n    for i in range(3):\n        row_sum = sum(grid[i])\n        if row_sum == n * numbers[0]:\n            bingo = True\n            break\n    for j in range(3):\n        col_sum = sum(grid[i][j] for i in range(3))\n        if col_sum == n * numbers[0]:\n            bingo = True\n            break\n    diag_sum1 = sum(grid[i][i] for i in range(3))\n    if diag_sum1 == n * numbers[0]:\n        bingo = True\n    diag_sum2 = sum(grid[i][2-i] for i in range(3))\n    if diag_sum2 == n * numbers[0]:\n        bingo = True\n\n    # Output result\n    return \"Yes\" if bingo else \"No\""
    },
    {
        "number": 4193,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    card = []\n    for line in lines[:-1]:\n        card.append([int(n) for n in line.split()])\n    N = int(lines[-1])\n    numbers = [int(n) for n in lines[-N:]]\n    # check rows\n    for row in card:\n        if all(num in numbers for num in row):\n            return \"Yes\"\n    # check columns\n    for j in range(len(card[0])):\n        if all(card[i][j] in numbers for i in range(len(card))):\n            return \"Yes\"\n    # check diagonals\n    for i in range(len(card)):\n        if card[i][i] in numbers:\n            count = 1\n        else:\n            count = 0\n        if count == 3:\n            return \"Yes\"\n        if card[i][len(card)-1-i] in numbers:\n            count += 1\n        if count == 3:\n            return \"Yes\"\n    # check if all numbers were used\n    if len(numbers) == N:\n        return \"No\"\n    # otherwise, we have a bingo\n    return \"Yes\""
    },
    {
        "number": 4193,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    grid = []\n    for line in stdin.split(\"\\n\")[:-1]:\n        grid.append([int(x) for x in line.split()])\n    n = int(stdin.split(\"\\n\")[-1])\n    numbers = [int(x) for x in stdin.split(\"\\n\")[-n-1:-1]]\n\n    # Check each row, column, and diagonal for bingo\n    for row in grid:\n        if set(row) == set(numbers):\n            return \"Yes\"\n    for i in range(3):\n        col = [grid[j][i] for j in range(3)]\n        if set(col) == set(numbers):\n            return \"Yes\"\n    diag1 = [grid[i][i] for i in range(3)]\n    diag2 = [grid[i][2-i] for i in range(3)]\n    if set(diag1) == set(numbers) or set(diag2) == set(numbers):\n        return \"Yes\"\n\n    # No bingo found\n    return \"No\"\n"
    },
    {
        "number": 4193,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    A = []\n    for i in range(3):\n        A.append([int(x) for x in stdin.split()[3*i:3*i+3]])\n    N = int(stdin.split()[9])\n    b = [int(x) for x in stdin.split()[10:]]\n\n    # Check for bingo\n    for i in range(3):\n        if all(x in b for x in A[i]):\n            return \"Yes\"\n    for i in range(3):\n        if all(A[j][i] in b for j in range(3)):\n            return \"Yes\"\n    if A[0][0] in b and A[1][1] in b and A[2][2] in b:\n        return \"Yes\"\n    if A[0][2] in b and A[1][1] in b and A[2][0] in b:\n        return \"Yes\"\n\n    return \"No\""
    },
    {
        "number": 4193,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    board = [list(map(int, line.strip().split())) for line in stdin.split('\\n')[:-2]]\n    N = int(stdin.split('\\n')[-2])\n    numbers = list(map(int, stdin.split('\\n')[-1].strip().split()))\n    # check for bingo\n    for i in range(3):\n        for j in range(3):\n            if board[i][j] in numbers:\n                # mark number on board\n                board[i][j] = '*'\n                # check rows\n                if all(row[j] == '*' for row in board):\n                    return 'Yes'\n                # check columns\n                if all(board[i][k] == '*' for k in range(3)):\n                    return 'Yes'\n    # check diagonals\n    if board[0][0] in numbers and board[1][1] in numbers and board[2][2] in numbers:\n        return 'Yes'\n    if board[0][2] in numbers and board[1][1] in numbers and board[2][0] in numbers:\n        return 'Yes'\n    return 'No'"
    },
    {
        "number": 4193,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    card = [list(map(int, line.split())) for line in stdin.strip().split('\\n')]\n    n = int(stdin.strip().split('\\n')[3])\n    numbers = list(map(int, stdin.strip().split('\\n')[4:]))\n    row_marks = [0] * 3\n    col_marks = [0] * 3\n    diag_marks = 0\n\n    for i in range(n):\n        row_idx = card.index(numbers[i]) // 3\n        col_idx = card[row_idx].index(numbers[i])\n        row_marks[row_idx] += 1\n        col_marks[col_idx] += 1\n        if row_idx == col_idx:\n            diag_marks += 1\n\n    if any(row_marks[i] == 3 or col_marks[i] == 3 or diag_marks == 3 for i in range(3)):\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4193,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A = [[int(x) for x in line.split()] for line in stdin.split('\\n')[:-1]]\n    N = int(stdin.split('\\n')[-1])\n    b = [int(x) for x in stdin.split('\\n')[-N-1:-1]]\n    \n    marked = set()\n    for i in range(3):\n        for j in range(3):\n            if A[i][j] in b:\n                marked.add(A[i][j])\n    for i in range(3):\n        if A[i][0] in marked and A[i][1] in marked and A[i][2] in marked:\n            return 'Yes'\n    for j in range(3):\n        if A[0][j] in marked and A[1][j] in marked and A[2][j] in marked:\n            return 'Yes'\n    if A[0][0] in marked and A[1][1] in marked and A[2][2] in marked:\n        return 'Yes'\n    if A[2][0] in marked and A[1][1] in marked and A[0][2] in marked:\n        return 'Yes'\n    return 'No'"
    },
    {
        "number": 4193,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    n = int(lines[0])\n    numbers = [int(x) for x in lines[1:]]\n    board = [[0 for j in range(3)] for i in range(3)]\n    for i in range(3):\n        row = [int(x) for x in lines[i+1].split()]\n        for j in range(3):\n            board[i][j] = row[j]\n\n    for i in range(3):\n        row_sum = sum(board[i])\n        if row_sum == n:\n            return 'Yes'\n        col_sum = sum(board[j][i] for j in range(3))\n        if col_sum == n:\n            return 'Yes'\n\n    diagonal_sum = sum(board[i][i] for i in range(3))\n    if diagonal_sum == n:\n        return 'Yes'\n\n    diagonal_sum = sum(board[i][2-i] for i in range(3))\n    if diagonal_sum == n:\n        return 'Yes'\n\n    return 'No'"
    },
    {
        "number": 4193,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    A = []\n    for line in stdin.strip().split('\\n'):\n        A.append(list(map(int, line.strip().split())))\n    N = int(stdin.strip().split('\\n')[-1])\n    B = list(map(int, stdin.strip().split('\\n')[-N-1:-1]))\n\n    # check each row and column\n    for i in range(3):\n        row = [A[i][j] for j in range(3)]\n        col = [A[j][i] for j in range(3)]\n        if all(num in B for num in row) or all(num in B for num in col):\n            return 'Yes'\n\n    # check diagonal\n    if all(A[i][i] in B for i in range(3)) or all(A[i][2-i] in B for i in range(3)):\n        return 'Yes'\n\n    return 'No'"
    },
    {
        "number": 4193,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    cards = []\n    for i in range(3):\n        row = list(map(int, stdin.readline().strip().split()))\n        cards.append(row)\n    n = int(stdin.readline())\n    numbers = list(map(int, stdin.readline().strip().split()))\n    \n    # check for bingo\n    for num in numbers:\n        for i in range(3):\n            for j in range(3):\n                if cards[i][j] == num:\n                    cards[i][j] = -1\n        for i in range(3):\n            if cards[i][0] == cards[i][1] == cards[i][2] == -1:\n                return \"Yes\"\n        for j in range(3):\n            if cards[0][j] == cards[1][j] == cards[2][j] == -1:\n                return \"Yes\"\n        if cards[0][0] == cards[1][1] == cards[2][2] == -1:\n            return \"Yes\"\n        if cards[0][2] == cards[1][1] == cards[2][0] == -1:\n            return \"Yes\"\n    \n    # no bingo\n    return \"No\""
    },
    {
        "number": 4194,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    m = int(lines[1])\n    a = list(map(int, lines[2].split()))\n    # Sort assignments by descending order of days required\n    a = sorted(a, reverse=True)\n    # Initialize variables\n    days_left = n\n    assignments_done = 0\n    max_days_left = 0\n    # Loop through assignments\n    for i in range(m):\n        # If there are not enough days left to do the assignment, stop\n        if a[i] > days_left:\n            return '-1'\n        # Find the latest day he can do this assignment on\n        latest_day = days_left\n        for j in range(i+1, m):\n            if a[j] <= latest_day:\n                break\n            latest_day = a[j]\n        # If he cannot do this assignment on any day, stop\n        if latest_day == 0:\n            return '-1'\n        # Update variables\n        days_left -= latest_day\n        assignments_done += 1\n        max_days_left = max(max_days_left, days_left)\n        # If all assignments are done, stop\n        if assignments_done == m:\n            break\n    # Return maximum number of days left\n    return str(max_days_left)\n\nstdin = \"41 2\\n5 6\"\nprint(solution(stdin)) # Output: 30"
    },
    {
        "number": 4194,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.readline().split()))\n\n    # Sort assignments in descending order\n    a.sort(reverse=True)\n\n    # Initialize variables\n    i = 0  # current day\n    ans = 0  # maximum days to hang out\n\n    # Iterate over assignments\n    for j in range(m):\n        # Find the first day to do the j-th assignment\n        while i < n and a[j] > i:\n            i += 1\n        if i == n:  # not enough days to do all assignments\n            return -1\n        ans += i  # add to the maximum days\n        i += 1  # increment to the next day\n\n    return ans"
    },
    {
        "number": 4194,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().strip().split())\n    a = list(map(int, stdin.readline().strip().split()))\n    a.sort()\n    res = 0\n    for i in range(m):\n        if a[i] > res+1:\n            return -1\n        res += a[i]\n    return res if res <= n else -1"
    },
    {
        "number": 4194,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().strip().split())\n    assignments = list(map(int, stdin.readline().strip().split()))\n    \n    if n < sum(assignments):\n        return \"-1\"\n    \n    max_days = 0\n    current_day = 0\n    for assignment in assignments:\n        max_days = max(max_days, current_day + assignment)\n        if current_day >= assignment:\n            return \"-1\"\n        current_day = max(current_day, assignment)\n    \n    return str(max_days)\n\n\ndef"
    },
    {
        "number": 4194,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    N, M = map(int, stdin.readline().split())\n    assignments = list(map(int, stdin.readline().split()))\n\n    # sort assignments by length\n    assignments.sort(reverse=True)\n\n    # find maximum days\n    days = 0\n    for assignment in assignments:\n        if days + assignment > N:\n            return -1\n        days += assignment\n\n    return days"
    },
    {
        "number": 4194,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N, M = map(int, stdin.split())\n    A = list(map(int, stdin.readline().split()))\n\n    # Sort assignments by duration\n    A.sort()\n\n    # Find maximum number of days that can be spent hanging out\n    days = 0\n    start = 0\n    for i, a in enumerate(A):\n        if days + a > N:\n            return -1\n        days += a\n        if days - start > N:\n            start = days - N\n    return days - start"
    },
    {
        "number": 4194,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n, m = list(map(int, stdin.strip().split()))\n    a = list(map(int, stdin.strip().split()))\n\n    # sort assignments by length and start time\n    a = sorted(enumerate(a), key=lambda x: (-x[1], x[0]))\n\n    # initialize variables\n    max_days = 0\n    days_used = [0] * n\n    current_day = 0\n    current_assignment = 0\n\n    # loop through assignments\n    for i, days in a:\n        # find the earliest day that is not used by any previous assignments\n        while current_assignment < i and days_used[current_day]!= 0:\n            current_day += 1\n            if current_day == n:\n                return \"-1\"\n        # check if the assignment will fit on this day\n        if days_used[current_day]!= 0:\n            return \"-1\"\n        days_used[current_day] = 1\n        current_assignment += 1\n        max_days = max(max_days, current_day + days)\n\n    return max_days"
    },
    {
        "number": 4194,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    lines = stdin.splitlines()\n    N = int(lines[0])\n    M = int(lines[1])\n    A = list(map(int, lines[2].split()))\n\n    # check if Takahashi can finish all the assignments during the vacation\n    if sum(A) > N:\n        return \"-1\"\n\n    # sort the assignments in decreasing order\n    A.sort(reverse=True)\n\n    # initialize variables\n    count = 0\n    max_count = 0\n    i = 0\n\n    # loop through the days\n    while count < N:\n        # if there are no more assignments left, return -1\n        if i >= M:\n            return \"-1\"\n\n        # add the duration of the current assignment to the count\n        count += A[i]\n\n        # update the maximum count if necessary\n        if count > max_count:\n            max_count = count\n\n        # check if there is a conflict with the current assignment\n        if count - A[i] >= max_count:\n            return \"-1\"\n\n        # move on to the next assignment\n        i += 1\n\n    # return the maximum count\n    return str(max_count)"
    },
    {
        "number": 4194,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N, M = map(int, stdin.readline().split())\n    A = list(map(int, stdin.readline().split()))\n\n    # Sort A in decreasing order\n    A.sort(reverse=True)\n\n    # Initialize variables\n    i = j = 0\n    assigned = 0\n    max_days = 0\n\n    # Loop through days\n    while i < N:\n        # If there are no more assignments left, return -1\n        if j >= M:\n            return -1\n\n        # Check if it is safe to assign the next assignment\n        if A[j] + assigned <= i:\n            assigned += A[j]\n            j += 1\n\n        # If it is not safe to assign the next assignment, hang out for 1 day\n        else:\n            assigned = 0\n            i += 1\n            max_days += 1\n\n    # Return the maximum number of days\n    return max_days"
    },
    {
        "number": 4194,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    # Sort the assignments in ascending order\n    a.sort()\n\n    # Initialize the variables for the maximum days and the current number of days\n    max_days = 0\n    curr_days = 0\n\n    # Loop through the assignments and update the current number of days\n    for i in range(m):\n        if curr_days + a[i] <= n:\n            curr_days += a[i]\n        else:\n            return -1\n\n    # Calculate the maximum number of days and return it\n    max_days = curr_days\n    return str(max_days)"
    },
    {
        "number": 4195,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    D, N = map(int, stdin.split())\n    if D == 0:\n        return str(N)\n    if D == 1:\n        return str(100*N)\n    if D == 2:\n        return str(10000*N + 500*N)"
    },
    {
        "number": 4195,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    d, n = map(int, stdin.split())\n    if d == 0:\n        return \"5\"\n    elif d == 1:\n        return str(100 * n)\n    elif d == 2:\n        return str(10000 + 100 * n)\n    else:\n        raise ValueError(\"D should be 0, 1 or 2\")"
    },
    {
        "number": 4195,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Reading input from stdin\n    D, N = map(int, stdin.strip().split())\n\n    # Calculating the N-th smallest integer that can be divided by 100 exactly D times\n    if D == 0:\n        return str(1 + (N-1)*100)\n    elif D == 1:\n        return str(2 + (N-1)*50)\n    else:\n        return str(5 + (N-1)*20)"
    },
    {
        "number": 4195,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    D, N = map(int, stdin.split())\n    if D == 0:\n        return str(N)\n    elif D == 1:\n        return str(N * 100 + 1)\n    elif D == 2:\n        return str(N * 10000 + 1)\n    else:\n        return \"Invalid Input\""
    },
    {
        "number": 4195,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    D, N = map(int, stdin.split())\n\n    if D == 0:\n        return str(N)\n    elif D == 1:\n        return str(100 * (N-1) + 1)\n    else:\n        return str(200 * (N-1) + 1)"
    },
    {
        "number": 4195,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    d, n = map(int, stdin.strip().split())\n    if d == 0:\n        return str(n)\n    if d == 1:\n        return str(100*n)\n    if d == 2:\n        return str(200*n)"
    },
    {
        "number": 4195,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    D, N = map(int, stdin.split())\n    ans = 0\n    if D == 0:\n        ans = 1\n    elif D == 1:\n        ans = 10 * N + 1\n    else:\n        ans = 100 * N + 1\n    return str(ans)"
    },
    {
        "number": 4195,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    D, N = map(int, stdin.strip().split())\n    if D == 0:\n        return str(100 * N)\n    elif D == 1:\n        return str(100 * N // 2)\n    elif D == 2:\n        return str((100 * N * (N - 1)) // 2)"
    },
    {
        "number": 4195,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    d, n = map(int, stdin.split())\n    if d == 0:\n        return str(n)\n    elif d == 1:\n        return str(100 * n)\n    elif d == 2:\n        if n <= 10:\n            return str(5 * (100 * n - 1) + 1)\n        elif n <= 100:\n            return str(5 * (100 * n - 10) + 1)\n        else:\n            return str(5 * (100 * n - 100) + 1)\n    else:\n        return \"Invalid Input\""
    },
    {
        "number": 4195,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    D, N = map(int, stdin.split())\n    count = 0\n    num = 1\n    while count < D:\n        num += 1\n        count = 0\n        for i in range(1, num+1):\n            if num % i == 0:\n                count += 1\n    return num"
    },
    {
        "number": 4196,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    N = int(lines[0])\n    A = list(map(int, lines[1].split()))\n\n    # replace one integer with a new value between 1 and 10^9\n    A[0] = 4\n\n    # compute gcd of the modified array\n    gcd = A[0]\n    for i in range(1, N):\n        gcd = math.gcd(gcd, A[i])\n\n    # print the result\n    return str(gcd)"
    },
    {
        "number": 4196,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # get input\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    # find max gcd\n    def gcd(x, y):\n        while y:\n            x, y = y, x % y\n        return x\n\n    max_gcd = a[0]\n    for i in range(1, n):\n        max_gcd = gcd(max_gcd, a[i])\n\n    # replace with random integer\n    import random\n    new_int = random.randint(1, 10**9)\n    while new_int in a:\n        new_int = random.randint(1, 10**9)\n    a[0] = new_int\n\n    # find new max gcd\n    new_max_gcd = a[0]\n    for i in range(1, n):\n        new_max_gcd = gcd(new_max_gcd, a[i])\n\n    # print result\n    print(new_max_gcd)\n\n    return \"\""
    },
    {
        "number": 4196,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    m = max(a)\n    if m == 1:\n        return '1'\n    for i in range(n):\n        if a[i] == m:\n            a[i] = 1\n    return str(gcd(*a))\n\ndef"
    },
    {
        "number": 4196,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    a[0] = 4\n    ans = a[0]\n    for i in range(1, n):\n        ans = gcd(ans, a[i])\n    return str(ans)\n\ndef"
    },
    {
        "number": 4196,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    max_gcd = 0\n    for i in range(n):\n        gcd = gcd_of_list(a[:i] + a[i+1:], a[i])\n        max_gcd = max(max_gcd, gcd)\n    return str(max_gcd)\n\ndef"
    },
    {
        "number": 4196,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    N = int(stdin.readline())\n    nums = list(map(int, stdin.readline().split()))\n\n    # find the index of the number to replace\n    idx = int(input(\"Enter the index of the number to replace: \"))\n\n    # check if the number to replace is the same as the original number\n    num_to_replace = int(input(\"Enter the number to replace: \"))\n    if num_to_replace == nums[idx-1]:\n        print(\"Number to replace must be different from the original number.\")\n        return \"\"\n\n    # replace the number\n    nums[idx-1] = num_to_replace\n\n    # find the gcd\n    def gcd(a, b):\n        if b == 0:\n            return a\n        else:\n            return gcd(b, a % b)\n\n    gcd_val = nums[0]\n    for i in range(1, N):\n        gcd_val = gcd(gcd_val, nums[i])\n\n    # print the gcd\n    print(gcd_val)\n\n    return \"\""
    },
    {
        "number": 4196,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    # Choose a random integer to replace one of the original integers\n    import random\n    new_int = random.randint(1, 10**9)\n    while new_int in a:\n        new_int = random.randint(1, 10**9)\n\n    # Replace the original integer with the new integer\n    replaced_index = random.randint(0, n-1)\n    a[replaced_index] = new_int\n\n    # Compute the greatest common divisor of the remaining integers\n    a.sort()\n    def gcd(a, b):\n        if b == 0:\n            return a\n        return gcd(b, a % b)\n    g = a[0]\n    for i in range(1, n):\n        g = gcd(g, a[i])\n    return str(g)"
    },
    {
        "number": 4196,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N = int(stdin.readline())\n    A = list(map(int, stdin.readline().strip().split()))\n\n    # Replace one integer with a random integer between 1 and 10^9\n    i = random.randint(0, N-1)\n    A[i] = random.randint(1, 10**9)\n\n    # Find GCD of all integers\n    gcd = A[0]\n    for j in range(1, N):\n        gcd = math.gcd(gcd, A[j])\n\n    return str(gcd)"
    },
    {
        "number": 4196,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    nums = list(map(int, stdin.split()[1:]))\n    max_num = max(nums)\n    min_num = min(nums)\n    gcd = min_num\n    for i in range(1, max_num+1):\n        if all(i % num == 0 for num in nums):\n            gcd = i\n            break\n    return str(gcd)\n\ndef"
    },
    {
        "number": 4196,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Reading input from stdin\n    N = int(stdin.readline().strip())\n    A = list(map(int, stdin.readline().strip().split()))\n    # Choosing a number to replace\n    k = 4\n    # Replacing k with the original number\n    A[A.index(min(A))] = k\n    # Calculating GCD of N-1 integers\n    gcd = A[0]\n    for i in range(1, N):\n        gcd = math.gcd(gcd, A[i])\n    return str(gcd)"
    },
    {
        "number": 4197,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    a = [int(x) for x in lines[1].split()]\n    \n    order = []\n    for i in range(n):\n        order.append(i+1)\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            if a[order[i]-1] > a[order[j]-1]:\n                order[i], order[j] = order[j], order[i]\n    \n    return''.join(str(x) for x in order)\n\nprint(solution(input()))<|im_sep|>"
    },
    {
        "number": 4197,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    a = list(map(int, lines[1].split()))\n\n    order = [i+1 for i in range(n)]\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[order[i]-1] > a[order[j]-1]:\n                order[i], order[j] = order[j], order[i]\n\n    return''.join(map(str, order))"
    },
    {
        "number": 4197,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split(\"\\n\")\n    n = int(lines[0])\n    a = [int(x) for x in lines[1].split()]\n    order = []\n    for i in range(1, n+1):\n        order.append(i)\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[order[i]-1] > a[order[j]-1]:\n                order[i], order[j] = order[j], order[i]\n    return \" \".join(str(x) for x in order)"
    },
    {
        "number": 4197,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    A = list(map(int, stdin.readline().strip().split()))\n    \n    queue = []\n    for i in range(N):\n        queue.extend([i+1] * A[i])\n    \n    return \" \".join(map(str, queue))\n\nprint(solution(open('input.txt', 'r')))"
    },
    {
        "number": 4197,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Get input\n    N = int(stdin.readline().strip())\n    A = list(map(int, stdin.readline().strip().split()))\n\n    # Create a dictionary to store student numbers and their entry time\n    entry_time = {}\n    for i in range(N):\n        entry_time[A[i]] = i\n\n    # Sort the student numbers based on their entry time\n    sorted_A = sorted(A, key=lambda x: entry_time[x])\n\n    # Print the sorted list of student numbers\n    return \" \".join(map(str, sorted_A))\n"
    },
    {
        "number": 4197,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    N = int(stdin.readline().strip())\n    A = list(map(int, stdin.readline().strip().split()))\n\n    # sort students by their arrival time\n    A.sort()\n\n    # reconstruct order of students\n    order = [i + 1 for i in range(N)]\n    for i in range(N):\n        order[A[i] - 1] = N - i\n\n    # print order of students\n    return''.join(map(str, order))"
    },
    {
        "number": 4197,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    N = int(lines[0])\n    A = [int(x) for x in lines[1].split()]\n    order = []\n    for i in range(1, N+1):\n        for j in range(len(A)):\n            if A[j] == i:\n                order.append(i)\n                A[j] = -1\n                break\n    return''.join(map(str, order))"
    },
    {
        "number": 4197,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    n = int(lines[0])\n    a = list(map(int, lines[1].split()))\n    order = [i+1 for i in range(n)]\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[j] < a[i]:\n                order[i], order[j] = order[j], order[i]\n    return \" \".join(map(str, order))"
    },
    {
        "number": 4197,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    # Sort by values in ascending order of A_i\n    a = [x[1] for x in sorted(enumerate(a), key=lambda x: x[1])]\n    # Convert indices to student numbers\n    result = [i+1 for i in a]\n    return''.join(map(str, result))"
    },
    {
        "number": 4197,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Reading input from stdin\n    N = int(stdin.readline())\n    A = list(map(int, stdin.readline().split()))\n    \n    # Initializing output as an empty list\n    output = []\n    \n    # Looping through each student number from 1 to N\n    for i in range(1, N+1):\n        # Checking if the student number i has entered the classroom\n        if i in A:\n            # Adding the student number i to the output list\n            output.append(i)\n            # Removing the student number i from the A list\n            A.remove(i)\n    \n    # Returning the output list as a string separated by spaces\n    return''.join(map(str, output))"
    },
    {
        "number": 4198,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, X = map(int, stdin.split())\n    if X % A!= 0:\n        return \"0\"\n    X //= A\n    if X % B!= 0:\n        return \"0\"\n    X //= B\n    return str(X)\n\ndef"
    },
    {
        "number": 4198,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B, X = map(int, stdin.split())\n    largest = 0\n    for i in range(10**9, 0, -1):\n        price = A * i + B * len(str(i))\n        if price <= X:\n            largest = i\n            break\n    return str(largest)"
    },
    {
        "number": 4198,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B, X = map(int, stdin.split())\n    max_num = 0\n    for num in range(1, 10**9+1):\n        if A * num + B * len(str(num)) > X:\n            break\n        max_num = num\n    if max_num == 0:\n        return \"0\"\n    return str(max_num)"
    },
    {
        "number": 4198,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B, X = map(int, stdin.split())\n    max_int = 0\n    max_price = 0\n    for i in range(1, 1000000001):\n        price = A * i + B * len(str(i))\n        if price <= X:\n            if i > max_int or (i == max_int and price > max_price):\n                max_int = i\n                max_price = price\n        else:\n            break\n    return str(max_int) if max_int > 0 else '0'\n"
    },
    {
        "number": 4198,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B, X = map(int, stdin.strip().split())\n\n    # Calculate the maximum integer that can be bought\n    max_integer = 0\n    for i in range(1, 10**9):\n        num_digits = len(str(i))\n        integer_price = A * i + B * num_digits\n        if integer_price > X:\n            break\n        max_integer = i\n\n    return str(max_integer) if max_integer > 0 else \"0\""
    },
    {
        "number": 4198,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B, X = map(int, stdin.split())\n    max_num = 0\n    max_price = 0\n    for num in range(1, 10**9+1):\n        price = A * num + B * len(str(num))\n        if price > X:\n            break\n        if price > max_price:\n            max_price = price\n            max_num = num\n    return str(max_num) if max_num else \"0\""
    },
    {
        "number": 4198,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n    result = 0\n    for n in range(1, 10**9+1):\n        if a*n + b*len(str(n)) <= x:\n            result = n\n        else:\n            break\n    return str(result)"
    },
    {
        "number": 4198,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Get input values\n    A, B, X = map(int, stdin.split())\n    \n    # Initialize variables\n    max_int = 0\n    max_price = 0\n    \n    # Loop through integers from 1 to 10^9\n    for i in range(1, 10**9 + 1):\n        # Calculate price for integer\n        price = A * i + B * len(str(i))\n        \n        # If price is greater than max price and less than X, update max price and max integer\n        if price > max_price and price <= X:\n            max_price = price\n            max_int = i\n    \n    # Return max integer or 0 if no integer can be bought\n    return str(max_int)"
    },
    {
        "number": 4198,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B, X = map(int, stdin.split())\n\n    max_integer = 0\n    for i in range(1, 10**9+1):\n        d = len(str(i))\n        price = A * i + B * d\n        if price <= X:\n            max_integer = i\n        else:\n            break\n\n    return str(max_integer)"
    },
    {
        "number": 4198,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B, X = map(int, stdin.split())\n    max_int = 0\n    for i in range(1, 10**9+1):\n        if A * i + B * len(str(i)) <= X:\n            max_int = i\n    return str(max_int)"
    },
    {
        "number": 4199,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    N, K = map(int, stdin.readline().split())\n    h = list(map(int, stdin.readline().split()))\n    # count number of people who can ride the roller coaster\n    count = 0\n    for height in h:\n        if height >= K:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4199,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N, K = map(int, stdin.split()[0:2])\n    hs = list(map(int, stdin.split()[2:]))\n\n    # Count number of people who can ride the roller coaster\n    count = 0\n    for h in hs:\n        if h >= K:\n            count += 1\n\n    return str(count)"
    },
    {
        "number": 4199,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N, K = map(int, stdin.readline().split())\n    heights = list(map(int, stdin.readline().split()))\n\n    # Count the number of friends who can ride the roller coaster\n    count = 0\n    for h in heights:\n        if h >= K:\n            count += 1\n\n    # Print the result\n    print(count)"
    },
    {
        "number": 4199,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    n, k = map(int, stdin.readline().split())\n    heights = list(map(int, stdin.readline().split()))\n\n    # Count number of friends that can ride the roller coaster\n    count = 0\n    for height in heights:\n        if height >= k:\n            count += 1\n\n    # Print result\n    print(count)\n\n    return ''"
    },
    {
        "number": 4199,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    N, K = map(int, stdin.readline().split())\n    heights = list(map(int, stdin.readline().split()))\n    \n    # count how many friends can ride the roller coaster\n    count = 0\n    for h in heights:\n        if h >= K:\n            count += 1\n    \n    return str(count)"
    },
    {
        "number": 4199,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    heights = list(map(int, stdin.split()))\n    count = 0\n    for h in heights:\n        if h >= k:\n            count += 1\n    return count"
    },
    {
        "number": 4199,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().strip().split())\n    heights = list(map(int, stdin.readline().strip().split()))\n    count = 0\n    for h in heights:\n        if h >= k:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4199,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    heights = list(map(int, stdin.split()))\n    count = 0\n    for i in range(n):\n        if heights[i] >= k:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4199,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.readline().strip().split())\n    h = list(map(int, stdin.readline().strip().split()))\n\n    count = 0\n    for height in h:\n        if height >= K:\n            count += 1\n\n    return str(count)"
    },
    {
        "number": 4199,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Get input from stdin\n    n, k = map(int, stdin.readline().split())\n    heights = list(map(int, stdin.readline().split()))\n\n    # Filter out people who are not tall enough\n    tall_enough = [i for i in range(n) if heights[i] >= k]\n\n    # Count number of tall enough people\n    count = len(tall_enough)\n\n    # Return result\n    return str(count)"
    },
    {
        "number": 4200,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    n, m = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n\n    # Calculate total votes\n    total_votes = sum(a)\n\n    # Check if we can select M popular items\n    max_votes_per_item = total_votes / m\n    for i in range(n):\n        if a[i] >= max_votes_per_item:\n            m -= 1\n            if m == 0:\n                return \"Yes\"\n\n    return \"No\""
    },
    {
        "number": 4200,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.strip().split())\n    a = list(map(int, stdin.strip().split()))\n    total_votes = sum(a)\n    max_votes = max(a)\n    if m * max_votes // total_votes < 1:\n        return \"No\"\n    else:\n        return \"Yes\""
    },
    {
        "number": 4200,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.readline().split()))\n\n    # compute total number of votes\n    total_votes = sum(a)\n\n    # check if there are enough popular items\n    popular_items = [i for i in range(n) if a[i] >= total_votes / (4 * m)]\n    if len(popular_items) >= m:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4200,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    total_votes = sum(a)\n    popular_items = [i for i in range(n) if a[i] >= total_votes//(4*m)]\n    if len(popular_items) >= m:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4200,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n    total_votes = sum(A)\n    popular_votes = max(A)\n    threshold = total_votes * (1/4) / M\n    if popular_votes >= threshold:\n        return 'Yes'\n    else:\n        return 'No'"
    },
    {
        "number": 4200,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    A = list(map(int, stdin.readline().split()))\n    \n    total_votes = sum(A)\n    threshold = total_votes / (4 * M)\n    \n    popular_items = [i for i in range(N) if A[i] >= threshold]\n    \n    if len(popular_items) >= M:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4200,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.readline().split()))\n    \n    # Calculate total number of votes\n    total_votes = sum(a)\n    \n    # Calculate threshold for each item\n    threshold = total_votes / (4 * m)\n    \n    # Count number of popular items\n    popular_items = 0\n    for i in range(n):\n        if a[i] >= threshold:\n            popular_items += 1\n    \n    # Print result\n    if popular_items >= m:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4200,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Read input from stdin\n    N, M = map(int, stdin.split())\n    A = list(map(int, stdin.readline().split()))\n    \n    # Calculate total number of votes\n    total_votes = sum(A)\n    \n    # Calculate threshold for selecting popular items\n    threshold = total_votes / (4 * M)\n    \n    # Count number of popular items\n    count = sum(1 for a in A if a >= threshold)\n    \n    # Check if M popular items can be selected\n    if count >= M:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4200,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N, M = map(int, stdin.split())\n    A = list(map(int, stdin.readline().split()))\n\n    # Calculate total votes\n    total_votes = sum(A)\n\n    # Calculate minimum votes required for an item to be popular\n    min_votes_required = total_votes // (4*M)\n\n    # Check if M popular items can be selected\n    popular_items = [i for i in range(N) if A[i] >= min_votes_required]\n    if len(popular_items) >= M:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4200,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    A = list(map(int, stdin.readline().strip().split()))\n    total_votes = sum(A)\n    popularity = sorted(A, reverse=True)\n    if popularity[M-1] < total_votes // (4*M):\n        return \"No\"\n    return \"Yes\""
    },
    {
        "number": 4201,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    h, w, k = map(int, stdin.readline().strip().split())\n    grid = [stdin.readline().strip() for _ in range(h)]\n\n    count = 0\n\n    # Check for every combination of rows and columns\n    for i in range(1 << h):\n        for j in range(1 << w):\n            # Check if the current combination of rows and columns\n            # satisfies the condition\n            black_count = sum(grid[row][col] == '#' for row in range(h) for col in range(w)\n                              if (i & (1 << row)) and (j & (1 << col)))\n            if black_count == k:\n                count += 1\n\n    return str(count)\n"
    },
    {
        "number": 4201,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    H, W, K = map(int, stdin.readline().split())\n    grid = [list(line.strip()) for line in stdin]\n\n    # Find all possible row indices to paint red\n    row_indices = set()\n    for i in range(H):\n        count_black = 0\n        for j in range(W):\n            if grid[i][j] == '#':\n                count_black += 1\n        if count_black == K:\n            row_indices.add(i)\n\n    # Find all possible column indices to paint red\n    col_indices = set()\n    for j in range(W):\n        count_black = 0\n        for i in range(H):\n            if grid[i][j] == '#':\n                count_black += 1\n        if count_black == K:\n            col_indices.add(j)\n\n    # Count the number of choices of rows and columns\n    count = 0\n    for i in range(H+1):\n        for j in range(W+1):\n            if i in row_indices and j in col_indices:\n                count += 1\n            elif i in row_indices or j in col_indices:\n                count += 1\n\n    return str(count)\n"
    },
    {
        "number": 4201,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    H, W, K = map(int, stdin.readline().split())\n    grid = []\n    for i in range(H):\n        line = stdin.readline().strip()\n        grid.append([c == \"#\" for c in line])\n\n    # Count black squares\n    black_count = sum([sum(row) for row in grid])\n\n    # Find all possible combinations of black squares\n    import itertools\n    combos = []\n    for r in range(1, H + 1):\n        for c in range(1, W + 1):\n            if grid[r - 1][c - 1]:\n                combos.append([(r, c)])\n    for r in range(H):\n        for c in range(1, W + 1):\n            if grid[r][c - 1]:\n                combos.append([(r + 1, c)])\n    for r in range(1, H + 1):\n        for c in range(W):\n            if grid[r - 1][c]:\n                combos.append([(r, c + 1)])\n    for r in range(H):\n        for c in range(W):\n            if grid[r][c]:\n                combos.append([(r + 1, c + 1)])\n\n    # Filter out combinations with less than K black squares\n    combos = [combo for combo in combos if sum([grid[r - 1][c - 1] for (r, c) in combo]) == K]\n\n    # Count number of choices\n    count = len(combos)\n\n    # Print result\n    print(count)\n\n    # Print all choices\n    if count > 0:\n        print(\" \".join([f\"{r + 1}-{c + 1}\" for combo in combos for (r, c) in combo]))\n\n    return str(count)"
    },
    {
        "number": 4201,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    H, W, K = list(map(int, stdin.readline().strip().split()))\n    grid = [[c for c in line.strip()] for line in stdin]\n\n    # Count number of black squares\n    black_count = 0\n    for row in grid:\n        black_count += row.count('#')\n\n    # Count number of choices\n    choices = 0\n    for i in range(H + 1):\n        for j in range(W + 1):\n            # Check if number of remaining black squares is K\n            if (black_count - grid[:i].count('#') - [row[:j].count('#') for row in grid[:i]]).count('#') == K:\n                choices += 1\n\n    return str(choices)"
    },
    {
        "number": 4201,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    H, W, K = map(int, stdin.readline().split())\n    grid = []\n    for i in range(H):\n        row = list(stdin.readline().strip())\n        grid.append(row)\n\n    # Define a function to count black squares\n    def count_black(rows, cols):\n        count = 0\n        for i in range(H):\n            for j in range(W):\n                if i in rows and j in cols and grid[i][j] == '#':\n                    count += 1\n        return count\n\n    # Define a function to find all choices of rows and columns\n    def find_choices():\n        rows = set()\n        cols = set()\n        for i in range(H):\n            for j in range(W):\n                if grid[i][j] == '#':\n                    rows.add(i)\n                    cols.add(j)\n        return rows, cols\n\n    # Find all choices of rows and columns\n    rows, cols = find_choices()\n    n_choices = 0\n\n    # Count the number of black squares remaining after painting red\n    def count_remaining_black(rows, cols):\n        return count_black(rows, cols) - len(rows) - len(cols)\n\n    # Find all possible rows and columns that result in exactly K black squares remaining\n    def find_k_black(rows, cols):\n        k_black = count_remaining_black(rows, cols)\n        if k_black == K:\n            return rows, cols\n        for i in range(H):\n            if i in rows and i not in cols:\n                n_rows = set(rows) - {i}\n                n_cols = set(cols) | {i}\n                if count_remaining_black(n_rows, n_cols) == K:\n                    return n_rows, n_cols\n            elif i not in rows and i in cols:\n                n_rows = set(rows) | {i}\n                n_cols = set(cols) - {i}\n                if count_remaining_black(n_rows, n_cols) == K:\n                    return n_rows, n_cols\n        for i in range(H):\n            for j in range(W):\n                if i in rows and j in cols:\n                    n_rows = set(rows) - {i}\n                    n_cols = set(cols) - {j}\n                    if count_remaining_black(n_rows, n_cols) == K:\n                        return n_rows, n_cols\n        return set(), set()\n\n    # Find all possible choices of rows and columns that result in exactly K black squares remaining\n    for i in range(H):\n        for j in range(W):\n            if i in rows and j in cols:\n                n_rows = set(rows) - {i}\n                n_cols = set(cols) - {j}\n                if count_remaining_black(n_rows, n_cols) == K:\n                    n_choices += 1\n            elif i not in rows and j not in cols:\n                n_rows = set(rows) | {i}\n                n_cols = set(cols) | {j}\n                if count_remaining_black(n_rows, n_cols) == K:\n                    n_choices += 1\n            else:\n                n_rows = set(rows)\n                n_cols = set(cols)\n                if count_remaining_black(n_rows, n_cols) == K:\n                    n_choices += 1\n\n    # Find all possible choices of rows and columns that result in at least K black squares remaining\n    for i in range(H):\n        for j in range(W):\n            if i not in rows and j not in cols:\n                n_rows = set(rows) | {i}\n                n_cols = set(cols) | {j}\n                if count_remaining_black(n_rows, n_cols) >= K:\n                    n_choices += 1\n            elif i in rows and j in cols:\n                n_rows = set(rows) - {i}\n                n_cols = set(cols) - {j}\n                if count_remaining_black(n_rows, n_cols) >= K:\n                    n_choices += 1\n            else:\n                n_rows = set(rows)\n                n_cols = set(cols)\n                if count_remaining_black(n_rows, n_cols) >= K:\n                    n_choices += 1\n\n    # Find all possible choices of rows and columns that result in at most K black squares remaining\n    for i in range(H):\n        for j in range(W):\n            n_rows = set(rows) - {i}\n            n_cols = set(cols) - {j}\n            if count_remaining"
    },
    {
        "number": 4201,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    H, W, K = map(int, lines[0].split())\n    grid = [[c for c in line.strip()] for line in lines[1:]]\n\n    def count_black_squares(rows, cols):\n        return sum(grid[i][j] == '#' for i in rows for j in cols)\n\n    def dfs(rows, cols, k, used_rows, used_cols, count):\n        if k == 0:\n            return count + 1\n        for i in range(H):\n            if i not in used_rows:\n                used_rows.add(i)\n                for j in range(W):\n                    if j not in used_cols:\n                        used_cols.add(j)\n                        if grid[i][j] == '#':\n                            count = dfs(rows, cols, k - 1, used_rows, used_cols, count)\n                        used_cols.remove(j)\n                used_rows.remove(i)\n        return count\n\n    for k in range(K+1):\n        count = 0\n        for i in range(H):\n            for j in range(W):\n                if grid[i][j] == '#':\n                    rows = [i]\n                    cols = [j]\n                    count = dfs(rows, cols, k, set(rows), set(cols), count)\n        if count == K:\n            print(k)\n            return\n    print(0)\n\nstdin = \"\"\"\n2 3 2\n..#\n###\n\"\"\"\n\nsolution(stdin)"
    },
    {
        "number": 4201,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    H, W, K = map(int, stdin.readline().split())\n    grid = [[c for c in stdin.readline().strip()] for _ in range(H)]\n\n    total_black = sum(1 for row in grid for c in row if c == '#')\n    if K > total_black:\n        return 0\n\n    count = 0\n    for i in range(H):\n        for j in range(W):\n            if grid[i][j] == '#':\n                continue\n            elif i == 0 and j == 0:\n                grid[i][j] = '#'\n                count += 1\n                continue\n            elif i == 0 and grid[i][j-1] == '#':\n                grid[i][j] = '#'\n                count += 1\n                continue\n            elif j == 0 and grid[i-1][j] == '#':\n                grid[i][j] = '#'\n                count += 1\n                continue\n            else:\n                continue\n\n    if count == K:\n        return count\n\n    count = 0\n    for i in range(H):\n        for j in range(W):\n            if grid[i][j] == '#':\n                continue\n            elif i == 0 and j == 0:\n                grid[i][j] = '#'\n                count += 1\n                continue\n            elif i == 0 and grid[i][j-1] == '#':\n                grid[i][j] = '#'\n                count += 1\n                continue\n            elif j == 0 and grid[i-1][j] == '#':\n                grid[i][j] = '#'\n                count += 1\n                continue\n            else:\n                continue\n\n    if count == K:\n        return count\n\n    count = 0\n    for i in range(H):\n        for j in range(W):\n            if grid[i][j] == '#':\n                continue\n            elif i == 0 and j == 0:\n                grid[i][j] = '#'\n                count += 1\n                continue\n            elif i == 0 and grid[i][j-1] == '#':\n                grid[i][j] = '#'\n                count += 1\n                continue\n            elif j == 0 and grid[i-1][j] == '#':\n                grid[i][j] = '#'\n                count += 1\n                continue\n            else:\n                continue\n\n    if count == K:\n        return count\n\n    count = 0\n    for i in range(H):\n        for j in range(W):\n            if grid[i][j] == '#':\n                continue\n            elif i == 0 and j == 0:\n                grid[i][j] = '#'\n                count += 1\n                continue\n            elif i == 0 and grid[i][j-1] == '#':\n                grid[i][j] = '#'\n                count += 1\n                continue\n            elif j == 0 and grid[i-1][j] == '#':\n                grid[i][j] = '#'\n                count += 1\n                continue\n            else:\n                continue\n\n    if count == K:\n        return count\n\n    count = 0\n    for i in range(H):\n        for j in range(W):\n            if grid[i][j] == '#':\n                continue\n            elif i == 0 and j == 0:\n                grid[i][j] = '#'\n                count += 1\n                continue\n            elif i == 0 and grid[i][j-1] == '#':\n                grid[i][j] = '#'\n                count += 1\n                continue\n            elif j == 0 and grid[i-1][j] == '#':\n                grid[i][j] = '#'\n                count += 1\n                continue\n            else:\n                continue\n\n    return count\n\nstdin = \"\"\"\n2 3 2\n..#\n###\n\"\"\"\n\nprint(solution(stdin))"
    },
    {
        "number": 4201,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    H, W, K = map(int, stdin.readline().split())\n    board = []\n    for i in range(H):\n        row = list(stdin.readline().strip())\n        board.append(row)\n\n    # Count the number of black squares\n    black_count = 0\n    for i in range(H):\n        for j in range(W):\n            if board[i][j] == '#':\n                black_count += 1\n\n    if black_count == K:\n        return 1\n\n    # Count the number of possible choices\n    possible_choices = 1\n    for i in range(1, H + 1):\n        possible_choices *= i\n\n    for j in range(1, W + 1):\n        possible_choices *= j\n\n    # Compute the number of choices\n    count = 0\n    for i in range(H + 1):\n        for j in range(W + 1):\n            if count == K:\n                break\n            # Check if the number of black squares is K\n            black_squares = 0\n            for x in range(i):\n                for y in range(j):\n                    black_squares += 1 if board[x][y] == '#' else 0\n            for x in range(i, H):\n                for y in range(j, W):\n                    black_squares += 1 if board[x][y] == '#' else 0\n            if black_squares == K:\n                count += 1\n    return count"
    },
    {
        "number": 4201,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    H, W, K = map(int, stdin.readline().split())\n    board = [list(stdin.readline().strip()) for _ in range(H)]\n    def count_black():\n        count = 0\n        for i in range(H):\n            for j in range(W):\n                if board[i][j] == '#':\n                    count += 1\n        return count\n    \n    def paint_red(rows, cols):\n        for i in range(H):\n            for j in range(W):\n                if i in rows or j in cols:\n                    board[i][j] = '#' if board[i][j] == '.' else '.'\n    \n    def dfs(rows, cols, k):\n        if count_black() == K:\n            return 1\n        if len(rows) + len(cols) == H + W:\n            return 0\n        count = 0\n        for i in range(H):\n            if i not in rows:\n                for j in range(W):\n                    if j not in cols:\n                        rows_new = rows + [i] if i not in rows else rows\n                        cols_new = cols + [j] if j not in cols else cols\n                        if dfs(rows_new, cols_new, k):\n                            count += 1\n        return count\n    \n    paint_red([i for i in range(H)], [j for j in range(W)])\n    return dfs([], [], K)"
    },
    {
        "number": 4201,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    H, W, K = map(int, stdin.readline().strip().split())\n    grid = [[c for c in line.strip()] for line in stdin]\n\n    black_count = 0\n    for i in range(H):\n        for j in range(W):\n            if grid[i][j] == '#':\n                black_count += 1\n\n    def dfs(row_mask, col_mask, current_count):\n        nonlocal black_count\n        if current_count == K:\n            return 1\n        count = 0\n        for i in range(H):\n            if not row_mask & (1 << i):\n                for j in range(W):\n                    if not col_mask & (1 << j):\n                        if grid[i][j] == '#':\n                            if current_count + 1 == K:\n                                return 1\n                            row_mask |= (1 << i)\n                            col_mask |= (1 << j)\n                            count += dfs(row_mask, col_mask, current_count + 1)\n                            row_mask ^= (1 << i)\n                            col_mask ^= (1 << j)\n        return count\n\n    total_count = 0\n    for i in range(1 << H):\n        for j in range(1 << W):\n            count = dfs(i, j, 0)\n            if count:\n                total_count += count\n\n    return str(total_count)\n"
    },
    {
        "number": 4202,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    L, R = map(int, stdin.split())\n    i = L\n    j = R\n    ans = float('inf')\n    while i < j:\n        ans = min(ans, (i*j)%2019)\n        if (i+j)%2 == 0:\n            i += 1\n        else:\n            j -= 1\n    return str(ans)"
    },
    {
        "number": 4202,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    L, R = map(int, stdin.strip().split())\n    i, j = L, L + 1\n    while j <= R:\n        if (i * j) % 2019 == 0:\n            return str((i * j) % 2019)\n        i += 1\n        j += 1\n    return \"0\""
    },
    {
        "number": 4202,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    L, R = map(int, stdin.strip().split())\n    i = L\n    while True:\n        j = i + 1\n        if j > R:\n            break\n        if (i * j) % 2019 == 0:\n            return str((i * j) % 2019)\n        i = j"
    },
    {
        "number": 4202,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    L, R = map(int, stdin.split())\n    i = L\n    j = L + 1\n    result = float('inf')\n    while i <= R:\n        if i % 2 == 1:\n            temp = (i * j) % 2019\n            if temp < result:\n                result = temp\n        i += 1\n        j += 1\n    return str(result)"
    },
    {
        "number": 4202,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    L, R = map(int, stdin.split())\n    i = L\n    j = L + 1\n    while True:\n        if i >= R:\n            return -1\n        if i*j % 2019 == 0:\n            return j-L\n        i += 1\n        j += 1\n\nstdin = input()\nprint(solution(stdin))"
    },
    {
        "number": 4202,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    L, R = map(int, stdin.split())\n    i, j = L, L+1\n    result = (i*j) % 2019\n    while j <= R:\n        if (i*j) % 2019 < result:\n            result = (i*j) % 2019\n        i += 1\n        j += 1\n    return str(result)"
    },
    {
        "number": 4202,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    L, R = map(int, stdin.split())\n    i = L\n    j = R\n    ans = float('inf')\n    while i < j:\n        ans = min(ans, (i*j) % 2019)\n        j -= 1\n    return str(ans)"
    },
    {
        "number": 4202,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    L, R = map(int, stdin.split())\n    i, j = L, L + 1\n    while i < R:\n        j = L + i\n        if j > R:\n            break\n        i *= 2\n    return str(i % 2019)"
    },
    {
        "number": 4202,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    l, r = map(int, stdin.split())\n\n    # Get the minimum possible value of i and j\n    i = l\n    j = r\n    if l == r:\n        i = max(0, l - 1)\n        j = min(2 * 10**9, r + 1)\n\n    # Find the minimum possible value of (i * j) % 2019\n    result = float('inf')\n    for k in range(i, j):\n        temp = (i * k) % 2019\n        if temp < result:\n            result = temp\n\n    # Return the minimum possible value of (i * j) % 2019\n    return str(result)"
    },
    {
        "number": 4202,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    L, R = map(int, stdin.strip().split())\n    i, j = L, L+1\n    min_val = float('inf')\n    for k in range(i+1, R+1):\n        if k % 2 == 0:\n            val = (i * j) % 2019\n            if val < min_val:\n                min_val = val\n            j += 1\n        else:\n            i += 1\n    return str(min_val)"
    },
    {
        "number": 4203,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    if S[0]!= 'A':\n        return 'WA'\n    if S[2:].count('C')!= 1:\n        return 'WA'\n    for c in S[2:-1]:\n        if c.isupper():\n            return 'WA'\n    return 'AC'"
    },
    {
        "number": 4203,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    if len(S) < 4:\n        return \"WA\"\n    if S[0]!= \"A\":\n        return \"WA\"\n    if S.count(\"C\")!= 1:\n        return \"WA\"\n    for i in range(2, len(S)-1):\n        if S[i]!= \"C\":\n            return \"WA\"\n    for i in range(1, len(S)-2):\n        if S[i].isupper():\n            return \"WA\"\n    return \"AC\"\n\ndef"
    },
    {
        "number": 4203,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    if len(S) < 4:\n        return \"WA\"\n    if S[0]!= \"A\":\n        return \"WA\"\n    if S[2:].count(\"C\")!= 1:\n        return \"WA\"\n    for i in range(3, len(S)-1):\n        if S[i].isupper():\n            return \"WA\"\n    return \"AC\""
    },
    {
        "number": 4203,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    if S[0]!= 'A':\n        return 'WA'\n    if S[2] == 'C':\n        count = 0\n        for i in range(3, len(S)-1):\n            if S[i] == 'C':\n                count += 1\n        if count!= 1:\n            return 'WA'\n    else:\n        return 'WA'\n    for letter in S:\n        if letter == 'C':\n            continue\n        if letter!= letter.lower():\n            return 'WA'\n    return 'AC'"
    },
    {
        "number": 4203,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    if s[0]!= 'A' or s.count('C')!= 1 or not all(c.islower() for c in s):\n        return 'WA'\n    else:\n        return 'AC'"
    },
    {
        "number": 4203,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    if len(s) < 4:\n        return \"WA\"\n    if s[0]!= \"A\" or s[1]!= \"t\" or s[2]!= \"C\":\n        return \"WA\"\n    count_c = 0\n    for i in range(3, len(s)-1):\n        if s[i] == \"C\":\n            count_c += 1\n    if count_c!= 1:\n        return \"WA\"\n    for i in range(4, len(s)):\n        if s[i].isupper():\n            return \"WA\"\n    return \"AC\""
    },
    {
        "number": 4203,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    \n    if len(S) < 4 or len(S) > 10:\n        return \"WA\"\n    \n    if not S[0].isupper():\n        return \"WA\"\n    \n    if S.count('C')!= 1:\n        return \"WA\"\n    \n    if any(char.isupper() for char in S[3:len(S)-1]):\n        return \"WA\"\n    \n    if any(char.islower() for char in S[1:len(S)-1]):\n        return \"WA\"\n    \n    return \"AC\""
    },
    {
        "number": 4203,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Get the input string\n    s = stdin.strip()\n    \n    # Check if the initial letter is A\n    if s[0]!= 'A':\n        return 'WA'\n    \n    # Check if there is exactly one occurrence of C\n    count = 0\n    for letter in s[2:]:\n        if letter == 'C':\n            count += 1\n    if count!= 1:\n        return 'WA'\n    \n    # Check if all other letters are lowercase\n    for letter in s[1:]:\n        if letter!= 'A' and letter!= 'C' and letter.isupper():\n            return 'WA'\n    \n    # If all conditions are satisfied, return AC\n    return 'AC'"
    },
    {
        "number": 4203,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    if len(s) < 4:\n        return \"WA\"\n    if s[0]!= 'A' or not s[2].isupper() or s[3]!= 'C' or s.count('C')!= 1 or any(not c.islower() for c in s[4:]):\n        return \"WA\"\n    return \"AC\""
    },
    {
        "number": 4203,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    if len(s) < 4 or s[0]!= 'A' or s[2]!= 'C':\n        return 'WA'\n    c_count = s.count('C')\n    if c_count!= 1:\n        return 'WA'\n    if s.lower().replace('a', '').replace('c', '')!= s[1:-1]:\n        return 'WA'\n    return 'AC'"
    },
    {
        "number": 4204,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    S, K = map(int, stdin.split())\n    \n    # Convert S to string\n    S = str(S)\n    \n    # Get the length of the string after 5 * 10**15 days\n    n = len(S)\n    for i in range(5):\n        n = len(str(int(S) * 9 + 2))\n    \n    # Get the K-th character from the left in the string after 5 * 10**15 days\n    k = n - K\n    return S[k-1]"
    },
    {
        "number": 4204,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s, k = stdin.split()\n    s = s.replace('2', '22').replace('3', '333').replace('4', '4444').replace('5', '55555').replace('6', '666666').replace('7', '7777777').replace('8', '88888888').replace('9', '999999999')\n    s = '1' + s\n    for i in range(5, int(5e15)):\n        s = s[-1] + s[:-1]\n    return s[k-1]"
    },
    {
        "number": 4204,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s, k = stdin.split()\n    k = int(k)\n    s = s.replace('1', '1111111111')\n    s = s.replace('2', '2222222222')\n    s = s.replace('3', '3333333333')\n    s = s.replace('4', '4444444444')\n    s = s.replace('5', '5555555555')\n    s = s.replace('6', '6666666666')\n    s = s.replace('7', '7777777777')\n    s = s.replace('8', '8888888888')\n    s = s.replace('9', '9999999999')\n    s = s.replace('0', '0000000000')\n    s = s.replace('1', '1111111111')\n    s = s.replace('2', '2222222222')\n    s = s.replace('3', '3333333333')\n    s = s.replace('4', '4444444444')\n    s = s.replace('5', '5555555555')\n    s = s.replace('6', '6666666666')\n    s = s.replace('7', '7777777777')\n    s = s.replace('8', '8888888888')\n    s = s.replace('9', '9999999999')\n    s = s.replace('0', '0000000000')\n    s = s.replace('1', '1111111111')\n    s = s.replace('2', '2222222222')\n    s = s.replace('3', '3333333333')\n    s = s.replace('4', '4444444444')\n    s = s.replace('5', '5555555555')\n    s = s.replace('6', '6666666666')\n    s = s.replace('7', '7777777777')\n    s = s.replace('8', '8888888888')\n    s = s.replace('9', '9999999999')\n    s = s.replace('0', '0000000000')\n    s = s.replace('1', '1111111111')\n    s = s.replace('2', '2222222222')\n    s = s.replace('3', '3333333333')\n    s = s.replace('4', '4444444444')\n    s = s.replace('5', '5555555555')\n    s = s.replace('6', '6666666666')\n    s = s.replace('7', '7777777777')\n    s = s.replace('8', '8888888888')\n    s = s.replace('9', '9999999999')\n    s = s.replace('0', '0000000000')\n    s = s.replace('1', '1111111111')\n    s = s.replace('2', '2222222222')\n    s = s.replace('3', '3333333333')\n    s = s.replace('4', '4444444444')\n    s = s.replace('5', '5555555555')\n    s = s.replace('6', '6666666666')\n    s = s.replace('7', '7777777777')\n    s = s.replace('8', '8888888888')"
    },
    {
        "number": 4204,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Get input from stdin\n    s, k = stdin.strip().split()\n\n    # Convert input to integers\n    k = int(k)\n\n    # Calculate the final string after 5*10^15 days\n    for _ in range(5*10**15):\n        s = ''.join([str(len(list(group))) + digit for digit, group in itertools.groupby(s)])\n\n    # Return the K-th character from the left\n    return s[k-1]"
    },
    {
        "number": 4204,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s, k = stdin.strip().split()\n    n = int(k)\n    k -= 1\n    \n    s = s.replace('1', '')\n    s = s.replace('2', '22')\n    s = s.replace('3', '333')\n    s = s.replace('4', '4444')\n    s = s.replace('5', '55555')\n    s = s.replace('6', '666666')\n    s = s.replace('7', '7777777')\n    s = s.replace('8', '88888888')\n    s = s.replace('9', '999999999')\n    \n    s = s * (n // len(s) + 1)\n    s = s[:n]\n    return s[k]"
    },
    {
        "number": 4204,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    S, K = stdin.split()\n    K = int(K)\n    day = 5 * 10**15\n    count = 0\n    for i in range(day):\n        new_S = ''\n        for digit in S:\n            if digit == '1':\n                new_S += '1'\n            else:\n                new_S += str(digit) * int(digit)\n        S = new_S\n        count += 1\n        if count == K:\n            return S[0]"
    },
    {
        "number": 4204,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    s, k = map(str.strip, stdin.split())\n    k = int(k)\n\n    # calculate new string after 5 * 10**15 days\n    n = len(s)\n    s = s * (5*10**15 // n + 1)\n    s = s[:5*10**15]\n\n    # find K-th character\n    k -= 1\n    for i in range(5*10**15):\n        if s[i] == '1':\n            k -= 1\n            if k == -1:\n                return s[i]\n        else:\n            k -= int(s[i])\n            if k < 0:\n                return s[i]\n"
    },
    {
        "number": 4204,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    S, K = map(str, stdin.split())\n    K = int(K)\n    \n    # Calculate the string after 5*10^15 days\n    n = 5*10**15\n    while n > 0:\n        S = ''.join(str(sum(int(d) for d in str(int(digit)*n))) for digit in S)\n        n -= 1\n    \n    # Return the Kth character from the left in the string\n    return S[K-1]"
    },
    {
        "number": 4204,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    S, K = stdin.strip().split()\n    S = S.replace('2', '22').replace('3', '333').replace('4', '4444').replace('5', '55555').replace('6', '666666').replace('7', '7777777').replace('8', '88888888').replace('9', '999999999')\n    day = 5 * 10 ** 15\n    K -= 1\n    while day > 0:\n        S = S.replace('1', '11')\n        day -= 1\n    return S[K]"
    },
    {
        "number": 4204,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Get input from stdin\n    s, k = map(str, stdin.strip().split())\n    k = int(k)\n\n    # Convert input string to list of digits\n    s = list(map(int, s))\n\n    # Perform the required operations on the string\n    for i in range(5 * 10**15):\n        s = [22 if x == 2 else x for x in s]\n        s = [333 if x == 3 else x for x in s]\n        s = [4444 if x == 4 else x for x in s]\n        s = [55555 if x == 5 else x for x in s]\n        s = [666666 if x == 6 else x for x in s]\n        s = [7777777 if x == 7 else x for x in s]\n        s = [88888888 if x == 8 else x for x in s]\n        s = [999999999 if x == 9 else x for x in s]\n\n    # Return the K-th character from the left of the string\n    return s[k-1]"
    },
    {
        "number": 4205,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    n, p = map(int, stdin.split())\n    p_list = list(map(int, stdin.split()))\n\n    # Check if p is already sorted in ascending order\n    if all(p_list[i] <= p_list[i+1] for i in range(n-1)):\n        return \"YES\"\n\n    # Perform the operation at most once\n    for i in range(n-1):\n        for j in range(i+1, n):\n            p_list_new = p_list.copy()\n            p_list_new[i], p_list_new[j] = p_list_new[j], p_list_new[i]\n            if all(p_list_new[k] <= p_list_new[k+1] for k in range(n-1)):\n                return \"YES\"\n\n    # No such operation found\n    return \"NO\""
    },
    {
        "number": 4205,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, p = map(int, stdin.split())\n    if sorted(p) == list(range(1, n+1)):\n        return \"YES\"\n    else:\n        return \"NO\"\n\nprint(solution(input())) # calling the function with input from standard input"
    },
    {
        "number": 4205,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Get input\n    N = int(stdin.readline().strip())\n    p = list(map(int, stdin.readline().strip().split()))\n\n    # Check if p is sorted\n    is_sorted = True\n    for i in range(1, N):\n        if p[i] < p[i-1]:\n            is_sorted = False\n            break\n\n    # Check if we can swap p_i and p_j to sort p\n    for i in range(N-1):\n        for j in range(i+1, N):\n            p_copy = p.copy()\n            p_copy[i], p_copy[j] = p_copy[j], p_copy[i]\n            if p_copy == sorted(p_copy):\n                return \"YES\"\n\n    # Cannot sort p in ascending order\n    return \"NO\""
    },
    {
        "number": 4205,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    p = list(map(int, stdin.readline().strip().split()))\n    if p == sorted(p):\n        return \"YES\"\n    for i in range(n-1):\n        for j in range(i+1, n):\n            p[i], p[j] = p[j], p[i]\n            if p == sorted(p):\n                return \"YES\"\n            p[i], p[j] = p[j], p[i]\n    return \"NO\""
    },
    {
        "number": 4205,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, *p = map(int, stdin.strip().split())\n    if sorted(p) == list(range(1, N+1)):\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 4205,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, p = map(int, stdin.splitlines()[0].split())\n    p = list(map(int, stdin.splitlines()[1].split()))\n    sorted_p = sorted(p)\n    if p == sorted_p:\n        return \"YES\"\n    else:\n        for i in range(n):\n            for j in range(i+1, n):\n                if p[i] > p[j]:\n                    p[i], p[j] = p[j], p[i]\n                    if p == sorted_p:\n                        return \"YES\"\n                    p[i], p[j] = p[j], p[i]\n        return \"NO\""
    },
    {
        "number": 4205,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    p = list(map(int, stdin.readline().strip().split()))\n    flag = True\n    for i in range(N-1):\n        for j in range(i+1, N):\n            if p[i] > p[j]:\n                p[i], p[j] = p[j], p[i]\n                flag = False\n    if flag:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 4205,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    p = list(map(int, lines[1].split()))\n    count = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if p[i] > p[j]:\n                count += 1\n                if count > 1:\n                    return \"NO\"\n                p[i], p[j] = p[j], p[i]\n    return \"YES\"\n\nprint(solution(\"5\\n5 2 3 4 1\"))"
    },
    {
        "number": 4205,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # get input from stdin\n    N = int(stdin.readline().strip())\n    p = list(map(int, stdin.readline().strip().split()))\n    \n    # check if p can be sorted in ascending order\n    swapped = True\n    while swapped:\n        swapped = False\n        for i in range(N-1):\n            if p[i] > p[i+1]:\n                p[i], p[i+1] = p[i+1], p[i]\n                swapped = True\n    \n    # print result\n    if p == list(range(1, N+1)):\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 4205,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    n = int(stdin.readline().strip())\n    p = list(map(int, stdin.readline().strip().split()))\n    # perform swap operation\n    swapped = True\n    while swapped:\n        swapped = False\n        for i in range(n - 1):\n            if p[i] > p[i + 1]:\n                p[i], p[i + 1] = p[i + 1], p[i]\n                swapped = True\n    # check if p is sorted\n    sorted_p = list(range(1, n + 1))\n    if p == sorted_p:\n        return 'YES'\n    else:\n        return 'NO'"
    },
    {
        "number": 4206,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = int(stdin)\n    count = 0\n    while s > 0:\n        s, r = divmod(s, 10)\n        if r % 3 == 0:\n            count += 1\n    return count"
    },
    {
        "number": 4206,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    s = s.strip()\n    n = len(s)\n    count = 1\n    while True:\n        count += 1\n        for i in range(1, n):\n            if s[i] == '0':\n                continue\n            if (int(s[:i]) % 3 == 0) and (int(s[i:]) % 3 == 0):\n                s = s[:i] + '|' + s[i:]\n        if s.count('|') == count:\n            break\n    count = 0\n    for i in range(1, len(s)):\n        if s[i] == '|':\n            count += 1\n    ans = count\n    return str(ans)"
    },
    {
        "number": 4206,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = int(stdin)\n    n = len(str(s))\n    count = 0\n    for i in range(1, n):\n        if s % 3 == 0:\n            count += 1\n        s //= 10\n    if s % 3 == 0:\n        count += 1\n    return count"
    },
    {
        "number": 4206,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = int(stdin)\n    n = len(str(s))\n    cuts = 1\n    total_parts = 2**cuts\n    for i in range(1, n):\n        total_parts += 2**(cuts+1)\n        cuts += 1\n    count = 0\n    for i in range(cuts+1):\n        part_size = 2**(cuts-i)\n        for j in range(part_size):\n            start = j * 10**(i-1)\n            end = (j+1) * 10**(i-1)\n            if start % 3 == 0 and end % 3 == 0 and end > s:\n                count += 1\n    return count"
    },
    {
        "number": 4206,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    m = len(s) // 3\n    res = 0\n    for i in range(m):\n        res += int(s[3*i+2])\n    return str(res)"
    },
    {
        "number": 4206,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return '0'\n    if n % 3 == 0:\n        return '1'\n    count = 1\n    s = str(n)\n    for i in range(1, len(s)):\n        if s[i] == '0' and s[i-1] == '0':\n            continue\n        if int(s[i:]) % 3 == 0:\n            count += 1\n    return str(count)\n\nprint(solution(input()))"
    },
    {
        "number": 4206,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # read input from stdin\n    s = int(stdin)\n\n    # find all valid cuts\n    cuts = []\n    for i in range(1, len(str(s))):\n        left, right = int(str(s)[:i]), int(str(s)[i:])\n        if left == 0 and right == 0:\n            continue\n        elif left == 0 and right % 3 == 0:\n            cuts.append((i - 1, 0))\n        elif left % 3 == 0 and right == 0:\n            cuts.append((i, 0))\n        elif left % 3 == 0 and right % 3 == 0:\n            cuts.append((i - 1, i))\n\n    # count numbers that are divisible by 3\n    count = 0\n    for left, right in cuts:\n        if left == 0 and right == 0:\n            continue\n        elif left == 0:\n            count += 1\n        else:\n            count += s // (10**left)\n            s %= 10**left\n            if right == 0:\n                count += 1\n\n    # print result\n    print(count)\n\n    return \"\""
    },
    {
        "number": 4206,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    if int(s) % 3 == 0:\n        return \"1\"\n    max_count = 0\n    for i in range(len(s)):\n        if s[i] == \"0\" and i!= 0:\n            continue\n        if i == len(s) - 1 or s[i+1] == \"0\":\n            count = 1\n            j = i + 1\n            while j < len(s) and s[j]!= \"0\":\n                if int(s[i:j+1]) % 3 == 0:\n                    count += 1\n                j += 1\n            if count > max_count:\n                max_count = count\n    return str(max_count)"
    },
    {
        "number": 4206,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = int(stdin)\n    n = len(str(s))\n\n    dp = [[0] * (n+1) for _ in range(n+1)]\n    dp[0][0] = 1\n\n    for i in range(1, n+1):\n        dp[i][0] = 1\n        for j in range(1, i+1):\n            if s[j-1] == '0':\n                dp[i][j] = dp[i][j-1]\n            elif s[i-1] % 3 == 0:\n                dp[i][j] = dp[i-1][j-1] + dp[i][j-1]\n            else:\n                dp[i][j] = dp[i][j-1]\n\n    return dp[n][0]"
    },
    {
        "number": 4206,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = int(stdin)\n    count = 0\n    while s > 0:\n        if s % 10 == 0:\n            s //= 10\n        else:\n            count += 1\n            s -= 10\n            if s % 10 == 0:\n                s //= 10\n            else:\n                count += 1\n                s -= 10\n    return count"
    },
    {
        "number": 4207,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    b = list(map(int, stdin.readline().strip().split()))\n    c = [0] * n\n    max_zeros = 0\n    for i in range(n):\n        c[i] = a[i] + b[i]\n    for i in range(n):\n        if c[i] == 0:\n            max_zeros += 1\n    print(max_zeros)"
    },
    {
        "number": 4207,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    b = list(map(int, stdin.readline().strip().split()))\n    \n    c = []\n    max_zeroes = 0\n    for i in range(n):\n        if a[i] == 0 and b[i] == 0:\n            c.append(0)\n        else:\n            c.append(a[i] * -2 + b[i])\n            if a[i] == 0:\n                max_zeroes += 1\n            elif b[i] == 0:\n                max_zeroes += 1\n            else:\n                max_zeroes += 2\n                \n    return str(max_zeroes)"
    },
    {
        "number": 4207,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    b = list(map(int, stdin.readline().strip().split()))\n    \n    def max_zeroes(d: float) -> int:\n        c = [round(d*a[i] + b[i]) for i in range(n)]\n        return sum(1 for x in c if x == 0)\n    \n    left, right = 1, 10**9\n    while left < right:\n        mid = (left + right) / 2\n        if max_zeroes(mid) >= 2:\n            right = mid\n        else:\n            left = mid + 1\n    \n    return str(max_zeroes(left))\n"
    },
    {
        "number": 4207,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    b = list(map(int, stdin.readline().strip().split()))\n    c = [d * x + y for d, x, y in zip(range(1, n+1), a, b)]\n    return str(c.count(0))\n"
    },
    {
        "number": 4207,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:1+n]))\n    b = list(map(int, stdin.split()[1+n:]))\n\n    max_zeros = 0\n    for i in range(n):\n        if a[i] * b[i] > 0:\n            max_zeros += 1\n    print(max_zeros)\n"
    },
    {
        "number": 4207,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n\n    # Find the minimum value of d that guarantees no zero in c\n    d = -10**12\n    for i in range(n):\n        if a[i] * d + b[i] == 0:\n            continue\n        else:\n            d = max(-a[i] / b[i], d)\n\n    # Count the number of zeroes in c with the optimal d\n    count = 0\n    for i in range(n):\n        if a[i] * d + b[i] == 0:\n            count += 1\n\n    return str(count)"
    },
    {
        "number": 4207,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    b = list(map(int, stdin.readline().strip().split()))\n    c = [a[i]*(-1)*b[i] for i in range(n)]\n    d = max(c)\n    count = 0\n    for i in range(n):\n        if c[i] == 0:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4207,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    b = list(map(int, stdin.readline().strip().split()))\n    max_zeroes = 0\n    for i in range(1, 101):\n        d = i / 100\n        c = [round(d*ai + bi) for ai,bi in zip(a,b)]\n        zeroes = sum([1 for ci in c if ci == 0])\n        max_zeroes = max(max_zeroes, zeroes)\n    return str(max_zeroes)"
    },
    {
        "number": 4207,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:n+1]))\n    b = list(map(int, stdin.split()[n+1:]))\n    \n    c = []\n    for i in range(n):\n        c.append(a[i]*-2 + b[i])\n    \n    count = 0\n    for i in range(n):\n        if c[i] == 0:\n            count += 1\n    \n    return str(count)"
    },
    {
        "number": 4207,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    \n    max_zeroes = 0\n    for i in range(n):\n        if a[i] == 0 and b[i] == 0:\n            max_zeroes += 1\n    \n    return str(max_zeroes)"
    },
    {
        "number": 4208,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    l = stdin.split()[1]\n    r = stdin.split()[2]\n\n    cnt = 0\n    pairs = []\n    for i in range(n):\n        for j in range(n):\n            if l[i] == '?' or r[j] == '?':\n                cnt += 1\n                pairs.append([i, j])\n\n    print(cnt)\n    for pair in pairs:\n        print(\" \".join(map(str, pair)))\n\n    return str(cnt) + \"\\n\" + \"\\n\".join([\" \".join(map(str, pair)) for pair in pairs])"
    },
    {
        "number": 4208,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    l = stdin.readline().strip()\n    r = stdin.readline().strip()\n\n    compatible_pairs = 0\n    pairs = []\n\n    for i in range(n):\n        for j in range(i+1, n):\n            if l[i] == '?' or r[j] == '?':\n                compatible_pairs += 1\n                pairs.append((i+1, j+1))\n            elif l[i] == r[j]:\n                compatible_pairs += 1\n                pairs.append((i+1, j+1))\n\n    print(compatible_pairs)\n    for pair in pairs:\n        print(*pair)\n\n    return \"Done!\""
    },
    {
        "number": 4208,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    l = stdin.readline().strip()\n    r = stdin.readline().strip()\n\n    counts = {}\n\n    for i in range(n):\n        if l[i] not in counts:\n            counts[l[i]] = 0\n        counts[l[i]] += 1\n\n    for i in range(n):\n        if r[i] not in counts:\n            counts[r[i]] = 0\n        counts[r[i]] += 1\n\n    compatible_pairs = []\n\n    for i in range(n):\n        for j in range(i+1, n):\n            if l[i] == '?' or r[j] == '?' or l[i] == r[j]:\n                compatible_pairs.append((i+1, j+1))\n\n    k = len(compatible_pairs)\n    if k == 0:\n        return \"0\\n\"\n\n    ans = []\n    for pair in compatible_pairs:\n        ans.append(\" \".join(str(x) for x in pair))\n\n    return f\"{k}\\n\" + \"\\n\".join(ans) + \"\\n\""
    },
    {
        "number": 4208,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    l, r = stdin.splitlines()[1], stdin.splitlines()[2]\n    compatible_pairs = []\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if l[i] == '?' or r[j] == '?':\n                compatible_pairs.append((i, j))\n                count += 1\n            elif l[i] == r[j]:\n                compatible_pairs.append((i, j))\n                count += 1\n    print(count)\n    for pair in compatible_pairs:\n        print(*pair)"
    },
    {
        "number": 4208,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    l = stdin.readline().strip()\n    r = stdin.readline().strip()\n\n    compatible = [[False for _ in range(26)] for _ in range(26)]\n    for i in range(26):\n        compatible[i][i] = True\n\n    for i in range(n):\n        if l[i]!= '?' and r[i]!= '?':\n            compatible[ord(l[i]) - ord('a')][ord(r[i]) - ord('a')] = True\n        elif l[i]!= '?':\n            for j in range(26):\n                compatible[ord(l[i]) - ord('a')][j] = True\n        elif r[i]!= '?':\n            for j in range(26):\n                compatible[j][ord(r[i]) - ord('a')] = True\n\n    dp = [[0 for _ in range(26)] for _ in range(n+1)]\n\n    for i in range(1, n+1):\n        for j in range(26):\n            if l[i-1]!= '?' and r[i-1]!= '?':\n                dp[i][j] = dp[i-1][j] + (1 if compatible[ord(l[i-1]) - ord('a')][j] and compatible[j][ord(r[i-1]) - ord('a')] else 0)\n            elif l[i-1]!= '?':\n                for k in range(26):\n                    dp[i][j] = max(dp[i][j], dp[i-1][k] + (1 if compatible[ord(l[i-1]) - ord('a')][j] and compatible[j][k] else 0))\n            elif r[i-1]!= '?':\n                for k in range(26):\n                    dp[i][j] = max(dp[i][j], dp[i-1][k] + (1 if compatible[k][ord(r[i-1]) - ord('a')] and compatible[j][ord(r[i-1]) - ord('a')] else 0))\n\n    k = 0\n    for i in range(26):\n        if dp[n][i] > 0:\n            k += 1\n\n    pairs = []\n    if k > 0:\n        for i in range(26):\n            if dp[n][i] > 0:\n                pairs.append((n, i))\n\n    return f\"{k}\\n\" + \"\\n\".join(f\"{a} {b}\" for a, b in pairs)"
    },
    {
        "number": 4208,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    l = stdin.readline().strip()\n    r = stdin.readline().strip()\n\n    pairs = []\n    for i in range(n):\n        for j in range(i+1, n):\n            if (l[i] == '?' or r[j] == '?' or l[i] == r[j]) and (r[i] == '?' or l[j] == '?' or r[i] == l[j]):\n                pairs.append((i, j))\n\n    print(len(pairs))\n    for pair in pairs:\n        print(pair[0]+1, pair[1]+1)\n\n    return ''"
    },
    {
        "number": 4208,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    l = stdin.readline().strip()\n    r = stdin.readline().strip()\n    \n    # Initialize a dictionary to store the count of left and right boots for each color.\n    left_count = {}\n    right_count = {}\n    for i in range(n):\n        if l[i] not in left_count:\n            left_count[l[i]] = 0\n        left_count[l[i]] += 1\n        if r[i] not in right_count:\n            right_count[r[i]] = 0\n        right_count[r[i]] += 1\n    \n    # Initialize a dictionary to store the count of compatible left and right boots.\n    compatible_count = {}\n    for i in range(n):\n        for j in range(n):\n            if l[i] == '?' or r[j] == '?':\n                compatible_count[(i, j)] = 1\n            elif l[i] == r[j]:\n                compatible_count[(i, j)] = 1\n            else:\n                compatible_count[(i, j)] = 0\n    \n    # Find the maximum number of compatible left-right pairs of boots.\n    max_count = 0\n    for i in range(n):\n        for j in range(n):\n            if compatible_count[(i, j)] == 1 and i!= j and i < j:\n                max_count += 1\n    \n    # Find the pairs of boots with compatible colors.\n    pairs = []\n    for i in range(n):\n        for j in range(n):\n            if compatible_count[(i, j)] == 1 and i!= j and i < j:\n                pairs.append((i, j))\n    \n    # Print the maximum number of compatible left-right pairs of boots.\n    print(max_count)\n    \n    # Print the pairs of boots with compatible colors.\n    for pair in pairs:\n        print(pair[0]+1, pair[1]+1)\n    \n    return \"\""
    },
    {
        "number": 4208,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    left = stdin.split('\\n')[1]\n    right = stdin.split('\\n')[2]\n\n    count = 0\n    pairs = []\n    for i in range(n):\n        for j in range(i+1, n):\n            if left[i] == left[j] or left[i] == '?' or left[j] == '?':\n                if right[i] == right[j] or right[i] == '?' or right[j] == '?':\n                    count += 1\n                    pairs.append((i+1,j+1))\n    \n    print(count)\n    for pair in pairs:\n        print(*pair)\n    \n    return \"\""
    },
    {
        "number": 4208,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    left_boots = stdin.readline().rstrip()\n    right_boots = stdin.readline().rstrip()\n    \n    count = 0\n    pairs = []\n    for i in range(n):\n        for j in range(i+1, n):\n            if (left_boots[i]!= '?' or left_boots[j]!= '?') and (right_boots[i]!= '?' or right_boots[j]!= '?'):\n                if left_boots[i] == left_boots[j] and (right_boots[i] == '?' or right_boots[j] == '?' or right_boots[i] == right_boots[j]):\n                    count += 1\n                    pairs.append((i+1, j+1))\n                elif left_boots[i] == '?' and (right_boots[i] == '?' or right_boots[j] == '?' or right_boots[i] == right_boots[j]):\n                    count += 1\n                    pairs.append((i+1, j+1))\n                elif right_boots[i] == '?' and (left_boots[i] == '?' or left_boots[j] == '?' or left_boots[i] == right_boots[j]):\n                    count += 1\n                    pairs.append((i+1, j+1))\n    \n    print(count)\n    for pair in pairs:\n        print(*pair)\n\ndef"
    },
    {
        "number": 4208,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    left_boots = stdin.readline().strip()\n    right_boots = stdin.readline().strip()\n    pairs = []\n    compatible_pairs = []\n    for i in range(n):\n        for j in range(i+1, n):\n            if left_boots[i] == '?' or right_boots[j] == '?':\n                pairs.append((i,j))\n            elif left_boots[i] == right_boots[j]:\n                compatible_pairs.append((i,j))\n    if len(compatible_pairs) == 0:\n        return '0'\n    k = min(len(compatible_pairs), n//2)\n    result = []\n    for i in range(k):\n        result.append(str(compatible_pairs[i][0]+1)+' '+str(compatible_pairs[i][1]+1))\n    return str(k) + '\\n' + '\\n'.join(result)"
    },
    {
        "number": 4209,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # get input\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n\n    # initialize dp matrix\n    dp = [[0]*n for _ in range(n)]\n\n    # calculate dp matrix\n    for i in range(n):\n        for j in range(i, n):\n            if i == j:\n                dp[i][j] = a[i]\n            else:\n                dp[i][j] = dp[i][j-1] + a[j]\n\n    # find maximum sum of blocks\n    max_sum = -1\n    for i in range(n):\n        for j in range(i, n):\n            for k in range(j, n):\n                if dp[i][j] == dp[j][k] and dp[j][k] == dp[i][k]:\n                    max_sum = max(max_sum, k-i+1)\n\n    # find blocks with maximum sum\n    max_blocks = []\n    for i in range(n):\n        for j in range(i, n):\n            if dp[i][j] == dp[i][i] + dp[i+1][j]:\n                max_blocks.append((i+1, j))\n\n    # print output\n    print(len(max_blocks))\n    for block in max_blocks:\n        print(*block)"
    },
    {
        "number": 4209,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    # Create dp table\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n\n    # Fill dp table\n    for length in range(2, n+1):\n        for i in range(n-length+1):\n            j = i + length - 1\n            dp[i][j] = max(dp[i][j-1], dp[i+1][j])\n            if a[i] == a[j]:\n                dp[i][j] = max(dp[i][j], dp[i+1][j-1] + 1)\n\n    # Find max length\n    max_length = 0\n    for i in range(n):\n        for j in range(i, n):\n            max_length = max(max_length, dp[i][j])\n\n    # Find max length indices\n    blocks = []\n    for length in range(max_length, 0, -1):\n        for i in range(n-length+1):\n            j = i + length - 1\n            if dp[i][j] == length:\n                blocks.append((i, j))\n\n    # Print blocks\n    k = len(blocks)\n    print(k)\n    for block in blocks:\n        print(*block)\n    return \"\""
    },
    {
        "number": 4209,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    # Find blocks with sum equal to sum of elements\n    blocks = []\n    curr_block = [a[0], a[0]]\n    for i in range(1, n):\n        if a[i] == a[i-1] and curr_block[-1]!= a[i]:\n            curr_block[1] = i\n        elif a[i]!= a[i-1]:\n            blocks.append(curr_block)\n            curr_block = [a[i], a[i]]\n\n    # Append last block\n    blocks.append(curr_block)\n\n    # Remove blocks that intersect\n    valid_blocks = []\n    for i in range(len(blocks)):\n        l1, r1 = blocks[i]\n        valid = True\n        for j in range(i+1, len(blocks)):\n            l2, r2 = blocks[j]\n            if r1 >= l2 and r2 >= l1:\n                valid = False\n                break\n        if valid:\n            valid_blocks.append((l1, r1))\n\n    # Print valid blocks\n    k = len(valid_blocks)\n    stdout = str(k) + '\\n'\n    for l, r in valid_blocks:\n        stdout += f'{l} {r}\\n'\n    return stdout"
    },
    {
        "number": 4209,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n\n    # find all the blocks\n    blocks = []\n    left = 0\n    for right in range(n):\n        # if the sum of the elements in the block is the same as the sum of the previous block,\n        # then add the block to the list of blocks\n        if right == 0 or sum(a[left:right+1]) == sum(a[blocks[-1][0]:blocks[-1][1]+1]):\n            pass\n        else:\n            blocks.append((left, right))\n            left = right\n\n    # add the last block to the list of blocks\n    blocks.append((left, right))\n\n    # output the number of blocks and the blocks\n    print(len(blocks))\n    for block in blocks:\n        print(block[0], block[1])"
    },
    {
        "number": 4209,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n\n    # first pass to count the number of blocks\n    count = 0\n    dp = [0] * n\n    for i in range(n):\n        if dp[i] == 0:\n            count += 1\n            j = i\n            while j < n and a[j] == a[i]:\n                dp[j] = 1\n                j += 1\n\n    # second pass to generate the blocks\n    blocks = []\n    for i in range(n):\n        if dp[i] == 0:\n            j = i\n            while j < n and a[j] == a[i]:\n                j += 1\n            blocks.append((i, j-1))\n\n    # print the number of blocks and the blocks\n    print(len(blocks))\n    for block in blocks:\n        print(*block)\n\n    return ''\n"
    },
    {
        "number": 4209,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    blocks = []\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if sum(a[i:j]) == sum(a[:j-i]):\n                blocks.append((i+1, j))\n    k = len(blocks)\n    print(k)\n    for block in blocks:\n        print(\" \".join(map(str, block)))\n    return \"\""
    },
    {
        "number": 4209,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n\n    # dp[i][j] represents the minimum sum of any subarray from index i to index j\n    dp = [[float('inf')] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 0\n\n    # iterate over all possible subarrays\n    for l in range(n):\n        for r in range(l, n):\n            # calculate minimum sum for subarray from l to r\n            for m in range(l, r):\n                dp[l][r] = min(dp[l][r], dp[l][m] + dp[m+1][r] + sum(a[l:r+1]))\n\n    # find the maximum number of blocks\n    k = 0\n    for i in range(n):\n        for j in range(i, n):\n            k = max(k, dp[i][j])\n\n    # find the blocks that have minimum sum\n    blocks = []\n    for i in range(n):\n        for j in range(i, n):\n            if dp[i][j] == k:\n                blocks.append((i, j))\n\n    # print the output\n    print(len(blocks))\n    for block in blocks:\n        print(*block)"
    },
    {
        "number": 4209,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n\n    # dp[i][j] = True if a[i] < a[j]\n    dp = [[False] * n for _ in range(n)]\n\n    # Initialize the diagonal to True\n    for i in range(n):\n        dp[i][i] = True\n\n    # Fill in the rest of the dp array\n    for k in range(1, n):\n        for i in range(n-k):\n            j = i + k\n            dp[i][j] = a[i] < a[j] and dp[i+1][j-1]\n\n    # Find all possible blocks\n    blocks = []\n    for i in range(n):\n        for j in range(i+1, n):\n            if dp[i][j]:\n                blocks.append((i, j))\n\n    # Check for disjointness\n    k = len(blocks)\n    for i in range(k):\n        for j in range(i+1, k):\n            l1, r1 = blocks[i]\n            l2, r2 = blocks[j]\n            if r1 < l2 or r2 < l1:\n                k = max(k, i+1)\n                break\n\n    # Print the result\n    print(k)\n    for block in blocks[:k]:\n        print(block[0]+1, block[1]+1)\n\n    return \"\"\n"
    },
    {
        "number": 4209,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    \n    # Step 1: Compute the prefix sums of the input array.\n    prefix_sums = [0] * (n + 1)\n    for i in range(1, n + 1):\n        prefix_sums[i] = prefix_sums[i - 1] + a[i - 1]\n    \n    # Step 2: Initialize a set to store the blocks.\n    blocks = set()\n    \n    # Step 3: Iterate over all possible pairs of indices (l, r)\n    for l in range(1, n):\n        for r in range(l + 1, n + 1):\n            # Step 4: Check if (l, r) forms a block that satisfies the conditions.\n            if prefix_sums[r] - prefix_sums[l - 1] == r - l:\n                blocks.add((l, r))\n    \n    # Step 5: Print the number of blocks and the blocks themselves.\n    k = len(blocks)\n    print(k)\n    for block in blocks:\n        print(block[0], block[1])\n    \n    return ''"
    },
    {
        "number": 4209,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    # calculate prefix sum\n    prefix_sum = [0] * (n+1)\n    for i in range(1, n+1):\n        prefix_sum[i] = prefix_sum[i-1] + a[i-1]\n\n    # calculate blocks\n    blocks = []\n    for i in range(1, n):\n        if prefix_sum[i]!= prefix_sum[n]:\n            blocks.append((i, n))\n            break\n    for i in range(n-1, 0, -1):\n        if prefix_sum[i]!= prefix_sum[0]:\n            blocks.append((0, i))\n            break\n    for i in range(1, n):\n        if prefix_sum[i]!= prefix_sum[i-1]:\n            blocks.append((blocks[-1][1]+1, i))\n\n    # print result\n    k = len(blocks)\n    stdout = str(k) + '\\n'\n    for block in blocks:\n        stdout += str(block[0]) +'' + str(block[1]) + '\\n'\n    return stdout"
    },
    {
        "number": 4210,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if (a[i]*10 + a[j]) % k == 0:\n                count += 1\n    return count"
    },
    {
        "number": 4210,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    \n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            concat = int(str(a[i]) + str(a[j]))\n            if concat % k == 0:\n                count += 1\n    \n    return str(count)"
    },
    {
        "number": 4210,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    \n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (a[i] * 10 + a[j]) % k == 0:\n                count += 1\n                \n    return count"
    },
    {
        "number": 4210,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.strip().split())\n    a = list(map(int, stdin.strip().split()))\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if (a[i]+a[j]) % k == 0:\n                count += 1\n    return count\n\nstdin = \"6 11\\n45 1 10 12 11 7\"\nprint(solution(stdin)) # Output: 7"
    },
    {
        "number": 4210,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    \n    count = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            if (a[i] * a[j]) % k == 0:\n                count += 1\n                \n    return count"
    },
    {
        "number": 4210,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (a[i] * 10 + a[j]) % k == 0:\n                count += 1\n    return str(count)"
    },
    {
        "number": 4210,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:]))\n    \n    count = 0\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            if (a[i]*a[j])%k==0:\n                count+=1\n    \n    return count"
    },
    {
        "number": 4210,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    \n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            concat = a[i]*10000 + a[j]\n            if concat % k == 0:\n                count += 1\n    \n    return count\n\nprint(solution(\"6 11\\n45 1 10 12 11 7\"))\nprint(solution(\"4 2\\n2 78 4 10\"))\nprint(solution(\"5 2\\n3 7 19 3 3\"))<|im_sep|>"
    },
    {
        "number": 4210,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (a[i] * a[j]) % k == 0:\n                count += 1\n\n    return count\n\ndef"
    },
    {
        "number": 4210,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    \n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if (a[i]*10 + a[j]) % k == 0:\n                count += 1\n    \n    return count\n\nprint(solution(\"6 11\\n45 1 10 12 11 7\")) # Output: 7\nprint(solution(\"4 2\\n2 78 4 10\")) # Output: 12\nprint(solution(\"5 2\\n3 7 19 3 3\")) # Output: 0"
    },
    {
        "number": 4211,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    B = list(map(int, stdin.readline().strip().split()))\n    max_sum = 0\n    A = []\n    for i in range(N):\n        if i == 0:\n            A.append(B[i])\n        else:\n            A.append(max(A[i-1], B[i-1]) + B[i])\n        max_sum = max(max_sum, A[i])\n    return str(max_sum)"
    },
    {
        "number": 4211,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    N = int(stdin.readline().strip())\n    B = list(map(int, stdin.readline().strip().split()))\n    \n    # initialize variables\n    A = [0] * N\n    A[0] = B[0]\n    A[1] = max(B[0], B[1])\n    \n    # fill A with known values\n    for i in range(2, N):\n        A[i] = max(A[i-1], A[i-2] + B[i-1])\n    \n    # print maximum possible sum\n    print(A[-1])\n    \n    # return empty string to satisfy output format\n    return \"\""
    },
    {
        "number": 4211,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    b = list(map(int, stdin.readline().strip().split()))\n\n    dp = [0] * n\n    dp[0] = max(b[0], 0)\n    dp[1] = max(b[0], b[1])\n\n    for i in range(2, n):\n        dp[i] = max(b[i-1], dp[i-1]) + dp[i-2]\n\n    return str(dp[n-1])"
    },
    {
        "number": 4211,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    n = int(stdin.readline().strip())\n    b = list(map(int, stdin.readline().strip().split()))\n\n    # initialize variables\n    max_sum = 0\n    prev_max = 0\n    curr_sum = 0\n\n    # iterate over input\n    for i in range(n-1):\n        curr_sum += b[i]\n\n        # update maximum sum\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n\n        # update previous maximum\n        if b[i] > prev_max:\n            prev_max = b[i]\n        else:\n            curr_sum -= prev_max\n            prev_max = b[i]\n\n    # add last element\n    max_sum += prev_max\n\n    # return output\n    return str(max_sum)"
    },
    {
        "number": 4211,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    b = list(map(int, stdin.readline().split()))\n    a = [0] * (n+1)\n    a[1] = max(0, b[0])\n    for i in range(2, n+1):\n        a[i] = max(a[i-1], b[i-1] + a[i-2])\n    return str(a[n])"
    },
    {
        "number": 4211,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    n = int(lines[0])\n    b = list(map(int, lines[1].split()))\n\n    # Initialize the first two elements of A\n    a = [b[0], b[1]]\n\n    # Initialize the maximum possible sum\n    max_sum = max(a)\n\n    # Iterate over the remaining elements of B\n    for i in range(2, n):\n        # If the current element is greater than the maximum possible sum of A so far,\n        # update the maximum possible sum and add the current element to A.\n        if b[i] > max_sum:\n            max_sum = b[i]\n            a.append(b[i])\n        # If the current element is not greater than the maximum possible sum of A so far,\n        # add the current element to A if it is greater than the maximum of the last two\n        # elements of A.\n        elif b[i] > max(a[-2], a[-1]):\n            a.append(b[i])\n\n    # Calculate the sum of A and return it as a string.\n    return str(sum(a))"
    },
    {
        "number": 4211,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    B = list(map(int, stdin.readline().strip().split()))\n    A = [max(B[i], B[i+1]) for i in range(N-1)]\n    A.append(B[-1])\n    print(sum(A))\n    return \"\""
    },
    {
        "number": 4211,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    N = int(stdin.readline().strip())\n    B = list(map(int, stdin.readline().strip().split()))\n\n    # initialize variables\n    A = [0] * N\n    A[0] = B[0]\n    A[N-1] = B[N-2]\n\n    # fill in the rest of A\n    for i in range(1, N-1):\n        A[i] = max(B[i-1], A[i-1])\n\n    # find maximum sum\n    max_sum = A[0]\n    for i in range(1, N):\n        max_sum += A[i]\n\n    return str(max_sum)"
    },
    {
        "number": 4211,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    B = list(map(int, stdin.readline().split()))\n    max_B = max(B)\n    A = [B[i-1] if B[i-1] >= max_B else max_B for i in range(N)]\n    A.append(0)\n    A.sort(reverse=True)\n    return sum(A[:N])"
    },
    {
        "number": 4211,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Read input from stdin\n    n = int(stdin.readline())\n    b = list(map(int, stdin.readline().strip().split()))\n\n    # Create a list of possible sums\n    sums = [0] * (n+1)\n    for i in range(1, n+1):\n        sums[i] = sums[i-1] + b[i-1]\n\n    # Find the maximum possible sum\n    max_sum = 0\n    for i in range(n):\n        max_sum = max(max_sum, sums[i], sums[i+1])\n\n    # Output the result\n    return str(max_sum)"
    },
    {
        "number": 4212,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    N, M, Q = map(int, stdin.readline().split())\n    quadruples = [list(map(int, stdin.readline().split())) for _ in range(Q)]\n\n    # preprocess\n    A = [1] * N\n    for a, b, c, d in quadruples:\n        A[b-1] += d\n        if a-1 >= 0:\n            A[a-1] -= d\n\n    # calculate score\n    score = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if A[j] - A[i] == j-i:\n                score += quadruples[j-i][3]\n\n    return score\n\ndef"
    },
    {
        "number": 4212,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m, q = map(int, stdin.readline().split())\n    a = [0] * q\n    b = [0] * q\n    c = [0] * q\n    d = [0] * q\n\n    for i in range(q):\n        a[i], b[i], c[i], d[i] = map(int, stdin.readline().split())\n\n    dp = [0] * (m + 1)\n    for i in range(1, m + 1):\n        dp[i] = max(dp[i - 1], i * d[0])\n\n    for i in range(1, q):\n        for j in range(m + 1):\n            if a[i] <= j <= b[i]:\n                dp[j] = max(dp[j], dp[j - c[i]] + d[i])\n\n    return str(max(dp))\n"
    },
    {
        "number": 4212,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    lines = stdin.strip().split(\"\\n\")\n    n, m, q = map(int, lines[0].split())\n    quadruples = [list(map(int, line.split())) for line in lines[1:]]\n    a = [0] * n\n    for q in quadruples:\n        a[q[0]-1] += q[3]\n        a[q[1]-1] -= q[3]\n    # dp\n    dp = [0] * n\n    for i in range(1, n):\n        dp[i] = max(dp[i-1], a[i])\n    # find max score\n    max_score = 0\n    for q in quadruples:\n        left, right = q[0]-1, q[1]-1\n        if a[left] - a[right] == q[2]:\n            max_score += q[3]\n    # combine dp and max score\n    ans = dp[-1]\n    for i in range(n-2, -1, -1):\n        ans = max(ans, dp[i] + a[i+1])\n    return str(ans + max_score)"
    },
    {
        "number": 4212,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Given are positive integers N, M, Q, and Q quadruples of integers ( a_i, b_i, c_i, d_i ).\n    Consider a sequence A satisfying the following conditions:\n    - A is a sequence of N positive integers.\n    - 1 \\leq A_1 \\leq A_2 \\le \\cdots \\leq A_N \\leq M.\n    Let us define a score of this sequence as follows:\n    - The score is the sum of d_i over all indices i such that A_{b_i} - A_{a_i} = c_i. (If there is no such i, the score is 0.)\n    Find the maximum possible score of A.\n    \"\"\"\n    # parse input\n    lines = stdin.split(\"\\n\")\n    n, m, q = map(int, lines[0].split())\n    quadruples = []\n    for line in lines[1:]:\n        a, b, c, d = map(int, line.split())\n        quadruples.append((a, b, c, d))\n\n    # initialize variables\n    scores = [0] * m\n    for i in range(q):\n        a, b, c, d = quadruples[i]\n        scores[c] += d\n\n    # initialize variables\n    dp = [0] * (1 << n)\n    for i in range(1, n + 1):\n        for j in range(1 << i):\n            for k in range(i):\n                if (j & (1 << k)) == 0:\n                    continue\n                dp[j | (1 << k)] = max(dp[j | (1 << k)], dp[j] + scores[k])\n\n    return str(dp[2**n - 1])"
    },
    {
        "number": 4212,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    N, M, Q = map(int, lines[0].split())\n    a, b, c, d = [], [], [], []\n    for i in range(1, Q+1):\n        l = lines[i].split()\n        a.append(int(l[0]))\n        b.append(int(l[1]))\n        c.append(int(l[2]))\n        d.append(int(l[3]))\n    score = [0]*N\n    for i in range(Q):\n        if b[i]-a[i] <= c[i]:\n            score[a[i]-1] += d[i]\n            if b[i]-a[i] == c[i]:\n                score[b[i]-1] += d[i]\n    return str(max(score))\n\nstdin = '''3 4 3\n1 3 3 100\n1 2 2 10\n2 3 2 10'''\nprint(solution(stdin)) # Output: 110"
    },
    {
        "number": 4212,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Returns the maximum possible score of a sequence A satisfying the given conditions.\n    \"\"\"\n    # Read the input from stdin\n    N, M, Q = map(int, stdin.readline().strip().split())\n    A = [0] * N\n    for i in range(Q):\n        a, b, c, d = map(int, stdin.readline().strip().split())\n        A[a-1] += d\n        if b < N:\n            A[b] -= d\n    # Compute the score of A\n    score = 0\n    for i in range(N):\n        score += A[i]\n        if score > M:\n            break\n    return score\n"
    },
    {
        "number": 4212,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m, q = map(int, stdin.readline().split())\n    a = []\n    b = []\n    c = []\n    d = []\n    for i in range(q):\n        ai, bi, ci, di = map(int, stdin.readline().split())\n        a.append(ai)\n        b.append(bi)\n        c.append(ci)\n        d.append(di)\n\n    scores = [0]*m\n    max_score = 0\n\n    for i in range(q):\n        for j in range(a[i], b[i]+1):\n            scores[j] += d[i]\n        if b[i]-a[i]+1 > 0:\n            max_score += d[i]*(b[i]-a[i]+1)\n\n    return str(max_score)\n\nprint(solution(input()))"
    },
    {
        "number": 4212,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    N, M, Q = map(int, lines[0].split())\n    pairs = []\n    for i in range(1, Q+1):\n        a, b, c, d = map(int, lines[i].split())\n        pairs.append((a, b, c, d))\n\n    scores = [0] * N\n    for a, b, c, d in pairs:\n        if a > b:\n            a, b = b, a\n        if a > 1 and scores[a-2] + d > scores[a-1]:\n            scores[a-1] = scores[a-2] + d\n        if a > 0 and b < N-1 and scores[b] + d > scores[b+1]:\n            scores[b+1] = scores[b] + d\n    return str(max(scores))"
    },
    {
        "number": 4212,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # get input from stdin\n    N, M, Q = map(int, stdin.readline().strip().split())\n    pairs = []\n    for _ in range(Q):\n        a, b, c, d = map(int, stdin.readline().strip().split())\n        pairs.append((a, b, c, d))\n    \n    # sort pairs by b_i\n    pairs.sort(key=lambda x: x[1])\n    \n    # initialize variables\n    max_score = 0\n    curr_score = 0\n    curr_num = 0\n    \n    # iterate through pairs\n    for a, b, c, d in pairs:\n        # if we have reached the end of the current number\n        if curr_num + b - a == N:\n            # update max_score if needed\n            max_score = max(max_score, curr_score)\n            # reset variables\n            curr_score = 0\n            curr_num = 0\n        # add d to curr_score if applicable\n        if a <= curr_num + b - c <= b:\n            curr_score += d\n        # update curr_num\n        curr_num += b - a\n    \n    # update max_score if needed\n    max_score = max(max_score, curr_score)\n    \n    # return result as a string\n    return str(max_score)"
    },
    {
        "number": 4212,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N, M, Q = map(int, stdin.readline().split())\n    pairs = [(a, b) for a, b, c, d in [map(int, stdin.readline().split()) for _ in range(Q)]]\n    \n    # Find the maximum possible score\n    scores = [0] * (M + 1)\n    for a, b in pairs:\n        scores[b] = max(scores[b], scores[a-1] + d)\n        \n    # Return the maximum possible score\n    return str(max(scores))"
    },
    {
        "number": 4213,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Read input from stdin\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    # Initialize variables\n    max_diff = float('-inf')\n\n    # Iterate over all pairs of elements in A and update max_diff if necessary\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(a[i] - a[j])\n            if diff > max_diff:\n                max_diff = diff\n\n    # Print output\n    return str(max_diff)"
    },
    {
        "number": 4213,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N = int(stdin.readline().strip())\n    A = list(map(int, stdin.readline().strip().split()))\n    \n    # Initialize variables\n    max_diff = 0\n    max_index = 0\n    \n    # Iterate through A and find the maximum difference\n    for i in range(N):\n        for j in range(i+1, N):\n            diff = abs(A[j]-A[i])\n            if diff > max_diff:\n                max_diff = diff\n                max_index = i\n    \n    # Return the result\n    return str(max_diff)"
    },
    {
        "number": 4213,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # get input\n    N = int(stdin.readline().strip())\n    A = list(map(int, stdin.readline().strip().split()))\n\n    # find maximum absolute difference\n    max_diff = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            diff = abs(A[i]-A[j])\n            if diff > max_diff:\n                max_diff = diff\n\n    return str(max_diff)"
    },
    {
        "number": 4213,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    \n    # initialize variables\n    max_diff = 0\n    min_value = float('inf')\n    \n    # loop through array\n    for i in range(n):\n        # update minimum value\n        if a[i] < min_value:\n            min_value = a[i]\n        # calculate absolute difference and update max_diff\n        diff = abs(a[i] - min_value)\n        if diff > max_diff:\n            max_diff = diff\n    \n    # print max_diff\n    print(max_diff)\n    \n    # return empty string as output\n    return \"\""
    },
    {
        "number": 4213,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    N = int(stdin.readline().strip())\n    A = list(map(int, stdin.readline().strip().split()))\n\n    # initialize maximum difference variable\n    max_diff = -float('inf')\n\n    # iterate over all pairs of elements in A\n    for i in range(N):\n        for j in range(i+1, N):\n            # update maximum difference variable\n            max_diff = max(max_diff, abs(A[i]-A[j]))\n\n    # return the maximum difference variable\n    return str(max_diff)"
    },
    {
        "number": 4213,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    # find the maximum absolute difference\n    max_diff = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(a[j] - a[i])\n            if diff > max_diff:\n                max_diff = diff\n    return str(max_diff)"
    },
    {
        "number": 4213,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    \n    # initialize variables\n    max_diff = 0\n    for i in range(n):\n        for j in range(n):\n            if i!= j:\n                diff = abs(a[i]-a[j])\n                if diff > max_diff:\n                    max_diff = diff\n    \n    # print output\n    return str(max_diff)"
    },
    {
        "number": 4213,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    a.sort()\n    max_diff = abs(a[-1]-a[1])\n    for i in range(2, n):\n        max_diff = max(max_diff, abs(a[i]-a[i-2]))\n    return str(max_diff)"
    },
    {
        "number": 4213,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    max_diff = 0\n    for i in range(n):\n        for j in range(n):\n            if i!= j and abs(a[i]-a[j])>max_diff:\n                max_diff = abs(a[i]-a[j])\n    return str(max_diff)"
    },
    {
        "number": 4213,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    max_diff = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(a[i] - a[j])\n            if diff > max_diff:\n                max_diff = diff\n    return str(max_diff)"
    },
    {
        "number": 4214,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    x = []\n    y = []\n    for i in range(n):\n        xi, yi = map(int, stdin.readline().split())\n        x.append(xi)\n        y.append(yi)\n    \n    # compute distances between all pairs of towns\n    distances = [[0] * n for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            if i!= j:\n                distances[i][j] = ((x[i] - x[j]) ** 2 + (y[i] - y[j]) ** 2) ** 0.5\n    \n    # count the number of paths and compute their lengths\n    paths = 1\n    path_lengths = []\n    for i in range(n):\n        for j in range(n):\n            if i!= j:\n                paths *= n - i - 1\n                path_lengths.append(distances[i][j])\n    \n    # compute the average path length\n    avg_path_length = sum(path_lengths) / paths\n    \n    return f\"{avg_path_length:.6f}\"\n\ndef"
    },
    {
        "number": 4214,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    towns = [tuple(map(int, line.strip().split())) for line in stdin]\n\n    distances = [[0] * N for _ in range(N)]\n    for i in range(N):\n        for j in range(i+1, N):\n            dx = towns[j][0] - towns[i][0]\n            dy = towns[j][1] - towns[i][1]\n            distances[i][j] = distances[j][i] = int(round(dx**2 + dy**2)**0.5)\n\n    total_length = 0\n    for k in range(N):\n        for i in range(N):\n            for j in range(N):\n                if distances[i][j] == 0 or distances[i][k] == 0 or distances[k][j] == 0:\n                    continue\n                total_length += distances[i][k] + distances[k][j]\n\n    return f\"{total_length / (N*(N-1) // 2):.6f}\"\n"
    },
    {
        "number": 4214,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    xys = []\n    for i in range(N):\n        x, y = map(int, stdin.readline().split())\n        xys.append((x, y))\n    ans = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            ans += ((xys[i][0]-xys[j][0])**2 + (xys[i][1]-xys[j][1])**2)**0.5\n    return str(ans/factorial(N))\n\ndef"
    },
    {
        "number": 4214,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    towns = []\n    for i in range(N):\n        x, y = map(int, stdin.readline().split())\n        towns.append((x, y))\n    distances = [[0]*N for _ in range(N)]\n    for i in range(N):\n        for j in range(N):\n            distances[i][j] = ((towns[i][0]-towns[j][0])**2 + (towns[i][1]-towns[j][1])**2)**0.5\n    paths = [[0]*N for _ in range(N)]\n    for i in range(N):\n        for j in range(N):\n            paths[i][j] = (N-1)*distances[i][j]\n    return str((sum(paths[i][j] for i in range(N))/(N*(N-1))))\n\nstdin = \"\"\"\n3\n0 0\n1 0\n0 1\n\"\"\"\nprint(solution(stdin)) # Output: 2.276142374924215"
    },
    {
        "number": 4214,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    coordinates = []\n    for i in range(N):\n        x, y = map(int, stdin.readline().strip().split())\n        coordinates.append((x, y))\n    paths = [(0, 0)]\n    for i in range(1, N):\n        new_paths = []\n        for path in paths:\n            new_paths.append(path + (coordinates[i],))\n        paths += new_paths\n    lengths = []\n    for path in paths:\n        length = 0\n        for i in range(1, N):\n            x1, y1 = coordinates[path[i-1]]\n            x2, y2 = coordinates[path[i]]\n            length += ((x2 - x1)**2 + (y2 - y1)**2) ** 0.5\n        lengths.append(length)\n    average_length = sum(lengths) / len(lengths)\n    return f\"{average_length:.6f}\""
    },
    {
        "number": 4214,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    n = int(lines[0])\n    coordinates = [tuple(map(int, line.split())) for line in lines[1:]]\n    distances = [[0] * n for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                distances[i][j] = 0\n            else:\n                x1, y1 = coordinates[i]\n                x2, y2 = coordinates[j]\n                distances[i][j] = ((x1 - x2) ** 2 + (y1 - y2) ** 2) ** 0.5\n    paths = [[0] * (1 << n) for _ in range(n)]\n    for i in range(n):\n        paths[i][1 << i] = distances[0][i]\n    for k in range(1, n):\n        for i in range(n):\n            for j in range(n):\n                if paths[i][j]!= float('inf'):\n                    paths[i][j | (1 << k)] = min(paths[i][j | (1 << k)], paths[i][j] + distances[k][j])\n    total_length = sum(paths[0][i] for i in range(1 << n))\n    average_length = total_length / (1 << n)\n    return str(average_length)\n"
    },
    {
        "number": 4214,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    n = int(lines[0])\n    x = [int(lines[i].split()[0]) for i in range(1, n+1)]\n    y = [int(lines[i].split()[1]) for i in range(1, n+1)]\n    \n    total_length = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            total_length += ((x[j]-x[i])**2 + (y[j]-y[i])**2) ** 0.5\n            \n    return str(total_length / (n*(n-1)/2))"
    },
    {
        "number": 4214,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    n = int(stdin.readline())\n    towns = []\n    for i in range(n):\n        x, y = map(int, stdin.readline().split())\n        towns.append((x, y))\n\n    # Compute all possible paths\n    paths = []\n    for i in range(n):\n        for j in range(i+1, n):\n            path = [(towns[i][0]-towns[j][0], towns[i][1]-towns[j][1])]\n            for k in range(j+1, n):\n                path.append((towns[k][0]-towns[j][0], towns[k][1]-towns[j][1]))\n            paths.append(path)\n\n    # Compute average path length\n    total_length = 0\n    for path in paths:\n        length = 0\n        for i in range(1, len(path)):\n            length += (path[i][0]**2 + path[i][1]**2) ** 0.5\n        total_length += length\n    average_length = total_length / len(paths)\n\n    # Return result as a string\n    return f\"{average_length:.6f}\""
    },
    {
        "number": 4214,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    x = []\n    y = []\n    for i in range(n):\n        xi, yi = map(int, stdin.readline().strip().split())\n        x.append(xi)\n        y.append(yi)\n    \n    avg_dist = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            avg_dist += ((x[j]-x[i])**2 + (y[j]-y[i])**2)**0.5\n    \n    return str(avg_dist/factorial(n))\n\ndef"
    },
    {
        "number": 4214,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    towns = []\n    for i in range(n):\n        x, y = map(int, stdin.readline().strip().split())\n        towns.append((x, y))\n    paths = []\n    for i in range(n):\n        for j in range(i+1, n):\n            dx = towns[j][0] - towns[i][0]\n            dy = towns[j][1] - towns[i][1]\n            paths.append(dx**2 + dy**2)\n    return f\"{sum(paths) / len(paths):.6f}\""
    },
    {
        "number": 4215,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(a - 2*b)"
    },
    {
        "number": 4215,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    uncovered = A - B\n    return str(uncovered)"
    },
    {
        "number": 4215,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return str(A-2*B)"
    },
    {
        "number": 4215,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B = list(map(int, stdin.split()))\n    return str(A - 2 * B)"
    },
    {
        "number": 4215,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return str(2 * B - A)"
    },
    {
        "number": 4215,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    total_length = A - B\n    return str(total_length)"
    },
    {
        "number": 4215,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.strip().split())\n    return str(max(A, B))"
    },
    {
        "number": 4215,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.strip().split())\n    return str(A - 2 * B)"
    },
    {
        "number": 4215,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.strip().split())\n    return str(A - 2*B)"
    },
    {
        "number": 4215,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return str(A - 2 * B)"
    },
    {
        "number": 4216,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    min_f = float('inf')\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if i*j == n:\n                f = max(len(str(i)), len(str(j)))\n                if f < min_f:\n                    min_f = f\n    return str(min_f)"
    },
    {
        "number": 4216,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    min_value = float('inf')\n    for a in range(1, n+1):\n        for b in range(a, n+1, a):\n            if a*b == n:\n                digit_a = len(str(a))\n                digit_b = len(str(b))\n                if digit_a > digit_b:\n                    min_value = digit_a\n                else:\n                    min_value = digit_b\n                break\n    return str(min_value)"
    },
    {
        "number": 4216,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    min_f = float('inf')\n    for A in range(1, N+1):\n        for B in range(1, N+1):\n            if A*B == N:\n                f = max(len(str(A)), len(str(B)))\n                if f < min_f:\n                    min_f = f\n    return str(min_f)"
    },
    {
        "number": 4216,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    min_f = float('inf')\n    for A in range(1, int(N ** 0.5) + 1):\n        B = N // A\n        if A * B == N:\n            if A > B:\n                A, B = B, A\n            f = max(len(str(A)), len(str(B)))\n            if f < min_f:\n                min_f = f\n    return str(min_f)\n"
    },
    {
        "number": 4216,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    min_f = float('inf')\n    for a in range(1, n+1):\n        for b in range(1, n+1):\n            if a*b == n:\n                f = max(len(str(a)), len(str(b)))\n                min_f = min(min_f, f)\n    return str(min_f)"
    },
    {
        "number": 4216,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    min_value = 10**10\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if i*j == n:\n                if max(len(str(i)), len(str(j))) > min_value:\n                    min_value = max(len(str(i)), len(str(j)))\n    return str(min_value)"
    },
    {
        "number": 4216,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    min_f = float('inf')\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if i*j == n:\n                f = max(len(str(i)), len(str(j)))\n                if f < min_f:\n                    min_f = f\n    return str(min_f)\n"
    },
    {
        "number": 4216,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n\n    # Find the minimum value of F(A,B) as (A,B) ranges over all pairs of positive integers such that N = A \\times B\n    min_f = float('inf')\n    for a in range(2, n):\n        for b in range(2, n):\n            if a * b == n:\n                f = max(len(str(a)), len(str(b)))\n                if f < min_f:\n                    min_f = f\n\n    return str(min_f)\n"
    },
    {
        "number": 4216,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    min_value = float('inf')\n\n    for a in range(1, n+1):\n        for b in range(1, n+1):\n            if a*b == n:\n                f_value = max(len(str(a)), len(str(b)))\n                if f_value < min_value:\n                    min_value = f_value\n\n    return str(min_value)"
    },
    {
        "number": 4216,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    minimum = 1000\n    for i in range(1, int(N ** 0.5) + 1):\n        if N % i == 0:\n            a = i\n            b = N // i\n            if len(str(a)) > minimum:\n                minimum = len(str(a))\n            if len(str(b)) > minimum:\n                minimum = len(str(b))\n    return str(minimum)"
    },
    {
        "number": 4217,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.readline().split())\n    likes = [set() for _ in range(N)]\n    for i in range(N):\n        K, *A = map(int, stdin.readline().split())\n        likes[i] = set(A)\n    num_likes = 0\n    for i in range(M):\n        if all(i in j for j in likes):\n            num_likes += 1\n    return str(num_likes)"
    },
    {
        "number": 4217,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    lines = stdin.split(\"\\n\")\n    N, M = map(int, lines[0].split())\n    liked_foods = [set() for _ in range(N)]\n    for i in range(1, N+1):\n        K, *A = map(int, lines[i].split())\n        A = set(A)\n        if len(A)!= K:\n            return \"Invalid input\"\n        for a in A:\n            if a < 1 or a > M:\n                return \"Invalid input\"\n            liked_foods[i-1].add(a)\n    # count common foods\n    common_foods = liked_foods[0]\n    for i in range(1, N):\n        common_foods &= liked_foods[i]\n    # count common foods\n    return str(len(common_foods))"
    },
    {
        "number": 4217,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.strip().split())\n    likes = [set() for _ in range(n)]\n    for i in range(n):\n        k, *foods = map(int, stdin.strip().split())\n        likes[i] = set(foods[:k])\n    count = len(likes[0].intersection(*likes[1:]))\n    return str(count)"
    },
    {
        "number": 4217,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Reading input from stdin\n    n, m = map(int, stdin.split())\n    likes = []\n    for i in range(n):\n        k, *a = map(int, stdin.split())\n        likes.append(a)\n\n    # Counting the number of foods liked by all the people\n    count = 0\n    for i in range(m):\n        for j in range(n):\n            if i in likes[j]:\n                count += 1\n                break\n    \n    return str(count)"
    },
    {
        "number": 4217,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution to the problem.\n\n    Parameters:\n    - stdin (str): Input string containing the test case.\n\n    Returns:\n    - str: Output string containing the answer to the problem.\n    \"\"\"\n    lines = stdin.strip().split('\\n')\n    n, m = map(int, lines[0].split())\n    counts = [0] * m\n    for i in range(1, n+1):\n        k = int(lines[i].split()[0])\n        likes = list(map(int, lines[i].split()[1:]))\n        for j in likes:\n            counts[j-1] += 1\n    for i in range(m):\n        if counts[i] == n:\n            return str(i+1)\n    return \"No food is liked by all the people\""
    },
    {
        "number": 4217,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    liked_foods = set()\n    for i in range(N):\n        k = int(stdin.readline())\n        foods = map(int, stdin.readline().split())\n        liked_foods.update(set(foods[:k]))\n    return str(len(liked_foods))\n"
    },
    {
        "number": 4217,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Read input from stdin\n    lines = stdin.splitlines()\n    n, m = map(int, lines[0].split())\n    likes = []\n    for i in range(1, len(lines)):\n        k, *foods = map(int, lines[i].split())\n        likes.append(foods)\n    # Check which foods are liked by all people\n    common_likes = set(likes[0])\n    for i in range(1, n):\n        common_likes.intersection_update(likes[i])\n    # Return the number of common likes\n    return len(common_likes)"
    },
    {
        "number": 4217,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    N, M = map(int, lines[0].split())\n    likes = []\n    for line in lines[1:]:\n        k = int(line.split()[0])\n        liked = set(map(int, line.split()[1:]))\n        likes.append(liked)\n\n    common_likes = set.intersection(*likes)\n    if len(common_likes) == 0:\n        return str(0)\n    return str(max(common_likes))"
    },
    {
        "number": 4217,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    N, M = map(int, lines[0].split())\n    likes = []\n    for i in range(1, N+1):\n        line = lines[i]\n        K = int(line.split()[0])\n        likes.append(list(map(int, line.split()[1:])))\n    \n    # Union-Find\n    parent = [-1] * M\n    def find(x):\n        if parent[x] == -1:\n            return x\n        parent[x] = find(parent[x])\n        return parent[x]\n    def union(x, y):\n        x = find(x)\n        y = find(y)\n        if x!= y:\n            parent[x] = y\n    \n    for i in range(N):\n        for j in range(K):\n            union(likes[i][j]-1, likes[i][0]-1)\n    \n    ans = set()\n    for i in range(1, M):\n        if find(i-1) == find(0):\n            ans.add(i)\n    \n    return str(len(ans))"
    },
    {
        "number": 4217,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Get input\n    n, m = map(int, stdin.readline().strip().split())\n    food_list = []\n    for i in range(n):\n        k, *foods = map(int, stdin.readline().strip().split())\n        food_list.append(foods)\n\n    # Count foods liked by all people\n    all_foods = set(food_list[0])\n    for i in range(1, n):\n        all_foods &= set(food_list[i])\n    return str(len(all_foods))"
    },
    {
        "number": 4218,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    count = 0\n    for i in range(1, N+1):\n        if i % 2 == 1:\n            count += 1\n    return f\"{count/N:.6f}\""
    },
    {
        "number": 4218,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    p = 0.5\n    print(p)\n    return f\"{p:.10f}\"\n"
    },
    {
        "number": 4218,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    count_odd = 0\n    for i in range(1, N+1):\n        if i % 2 == 1:\n            count_odd += 1\n    prob_odd = count_odd / N\n    return f'{prob_odd:.10f}'"
    },
    {
        "number": 4218,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    odd_count = 0\n    for i in range(1, N+1):\n        if i % 2 == 1:\n            odd_count += 1\n    return f\"{odd_count/N:.10f}\"\n\nprint(solution(input()))"
    },
    {
        "number": 4218,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Reading input from stdin\n    N = int(stdin.strip())\n\n    # Calculating the probability\n    p = 1/N\n    odd_count = 0\n    for i in range(1, N+1):\n        if i%2 == 1:\n            odd_count += 1\n    \n    return f\"{odd_count/N:.10f}\" # Returning the result with 10 decimal places"
    },
    {
        "number": 4218,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    for i in range(1, n+1):\n        if i % 2 == 1:\n            count += 1\n    return str(count/n)"
    },
    {
        "number": 4218,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    prob_odd = (N+1) / 2\n    return f\"{prob_odd:.8f}\""
    },
    {
        "number": 4218,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    count = 0\n    for i in range(1, N+1):\n        if i % 2 == 1:\n            count += 1\n    return f\"{count/N:.6f}\"\n\nprint(solution(input()))"
    },
    {
        "number": 4218,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    a = random.randint(1, N)\n    if a % 2 == 0:\n        return str(1 - (N - a) / N)\n    else:\n        return str((N - a + 1) / N)\n\nimport random\nprint(solution(input()))"
    },
    {
        "number": 4218,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    count = 0\n    for i in range(1, N+1):\n        if i % 2!= 0:\n            count += 1\n    return f\"{count/N:.10f}\""
    },
    {
        "number": 4219,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    max_honest_count = 0\n    for i in range(n):\n        num_testimony = int(stdin.readline())\n        honest_count = 0\n        unkind_count = 0\n        for j in range(num_testimony):\n            testimony = stdin.readline().split()\n            x = int(testimony[0])\n            y = int(testimony[1])\n            if y == 1:\n                honest_count += 1\n            else:\n                unkind_count += 1\n        if honest_count + unkind_count == n:\n            max_honest_count = max(max_honest_count, honest_count)\n    return str(max_honest_count)"
    },
    {
        "number": 4219,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solves the problem of finding the maximum number of honest persons among N people.\n    Args:\n        stdin: A string containing the input.\n    Returns:\n        A string containing the output.\n    \"\"\"\n    # Reading the input\n    lines = stdin.split('\\n')\n    N = int(lines[0])\n    A = [int(x) for x in lines[1:N+1]]\n    testimonies = []\n    for i in range(N):\n        X = [int(x) for x in lines[N+1+i*(A[i]+1):N+1+i*(A[i]+1)+A[i]]]\n        Y = [int(x) for x in lines[N+1+i*(A[i]+1)+A[i]:N+1+i*(A[i]+1)+2*A[i]]]\n        testimonies.append([(X[j], Y[j]) for j in range(A[i])])\n    # Finding the maximum number of honest persons among N people\n    max_honest = 0\n    for i in range(N):\n        if A[i] == 0:\n            max_honest += 1\n        else:\n            seen = set()\n            for j in range(A[i]):\n                if testimonies[i][j][1] == 1:\n                    seen.add(testimonies[i][j][0])\n            if len(seen) == A[i]:\n                max_honest += 1\n    # Writing the output\n    return str(max_honest)"
    },
    {
        "number": 4219,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(stdin.readline()) for _ in range(n)]\n    people = []\n    for i in range(n):\n        x = [int(stdin.readline().split()[0]) for j in range(a[i])]\n        y = [int(stdin.readline().split()[1]) for j in range(a[i])]\n        people.append((x,y))\n    honest_count = 0\n    for i in range(n):\n        honest_count += all(y[j] == 1 for j in range(a[i]))\n    return str(honest_count)\n\ndef"
    },
    {
        "number": 4219,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    lines = stdin.strip().split(\"\\n\")\n    N = int(lines[0])\n    A = [int(x) for x in lines[1:]]\n    pairs = []\n    for i in range(1, N+1):\n        line = lines[A[i-1]+1].strip().split()\n        pairs.append([(int(x), int(y)) for x, y in zip(line[::2], line[1::2])])\n\n    # count number of honest pairs\n    def count_honest(pairs):\n        count = 0\n        for pair in pairs:\n            for x, y in pair:\n                if y == 1:\n                    count += 1\n                    break\n        return count\n\n    return str(count_honest(pairs))"
    },
    {
        "number": 4219,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split(\"\\n\")\n    N = int(lines[0])\n    A = [int(line) for line in lines[1:N+1]]\n    X = [list(map(int, lines[N+1+i].strip().split())) for i in range(N)]\n    Y = [list(map(int, lines[N+1+N+A[i]+i].strip().split())) for i in range(N)]\n    A = [a+1 for a in A]\n    for i in range(N):\n        for j in range(A[i]):\n            if Y[i][j] == 1:\n                A[X[i][j]-1] += 1\n    return max(A)\n\ndef"
    },
    {
        "number": 4219,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    for i in range(1, N+1):\n        A_i = int(stdin.readline().strip())\n        for j in range(A_i):\n            x, y = map(int, stdin.readline().strip().split())\n            if y == 0:\n                N -= 1\n                break\n    return str(N)"
    },
    {
        "number": 4219,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split('\\n')\n    N = int(input_list[0])\n    A = [int(input_list[i]) for i in range(1, N+1)]\n    testimonies = {}\n    for i in range(N):\n        testimony = []\n        for j in range(A[i]):\n            testimony.append(list(map(int, input_list[i+1+j].split())))\n        testimonies[i+1] = testimony\n    # print(testimonies)\n    honest_count = 0\n    for i in range(1, N+1):\n        if i in testimonies:\n            # print(i, testimonies[i])\n            is_honest = True\n            for j in range(A[i-1]):\n                if testimonies[i][j][1] == 0 or testimonies[testimonies[i][j][0]][testimonies[i][j][0]-1][1] == 0:\n                    is_honest = False\n                    break\n            if is_honest:\n                honest_count += 1\n        # print(honest_count)\n    return str(honest_count)"
    },
    {
        "number": 4219,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = [int(stdin.readline().strip()) for i in range(n)]\n    x = [{} for i in range(n)]\n    for i in range(n):\n        for j in range(a[i]):\n            x[i][j+1] = [int(stdin.readline().strip()) for k in range(2)]\n    count = 0\n    for i in range(n):\n        if x[i][1][0] == i+1 and x[i][1][1] == 1:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4219,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    n = int(lines[0])\n    max_honest = 0\n    honest_count = 0\n    for i in range(n):\n        a = int(lines[i+1])\n        honest_count += a\n        max_honest = max(max_honest, honest_count)\n    return str(max_honest)"
    },
    {
        "number": 4219,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    N = int(stdin.readline().strip())\n    testimony_count = [int(stdin.readline().strip()) for _ in range(N)]\n    testimonies = []\n    for i in range(N):\n        x, y = [], []\n        for j in range(testimony_count[i]):\n            a, b = map(int, stdin.readline().strip().split())\n            x.append(a)\n            y.append(b)\n        testimonies.append((x, y))\n\n    # compute result\n    result = 0\n    for i in range(N):\n        is_honest = True\n        for j in range(testimony_count[i]):\n            if y[j] == 1 and i!= x[j]:\n                is_honest = False\n                break\n        if is_honest:\n            result += 1\n\n    # print result\n    return str(result)"
    },
    {
        "number": 4220,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k, s = stdin.strip().split('\\n')\n    k = int(k)\n\n    if len(s) <= k:\n        return s\n    else:\n        return s[:k] + '...'"
    },
    {
        "number": 4220,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    k, s = stdin.split()\n    k = int(k)\n    if len(s) <= k:\n        return s\n    else:\n        return s[:k] + '...'"
    },
    {
        "number": 4220,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    k, s = map(str.strip, stdin.split())\n    k = int(k)\n    \n    # Check if string length is at most K\n    if len(s) <= k:\n        return s\n    \n    # String length exceeds K\n    return s[:k] + \"...\""
    },
    {
        "number": 4220,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    k, s = stdin.strip().split()\n    k = int(k)\n    s = s.strip()\n    \n    # Check if length of s is less than or equal to k\n    if len(s) <= k:\n        return s\n    \n    # If length of s is greater than k, append... to end of first k characters\n    return s[:k] + '...'"
    },
    {
        "number": 4220,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    k, s = stdin.split()\n    k = int(k)\n    if len(s) <= k:\n        return s\n    else:\n        return s[:k] + '...'"
    },
    {
        "number": 4220,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    k, s = stdin.strip().split()\n    k = int(k)\n    if len(s) <= k:\n        return s\n    else:\n        return s[:k] + '...'\n\nprint(solution(input()))"
    },
    {
        "number": 4220,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # convert input to list of strings\n    k, s = stdin.split()\n    k = int(k)\n    # if the length of s is less than or equal to k, return s\n    if len(s) <= k:\n        return s\n    # else, extract the first k characters, append... to the end, and return the result\n    else:\n        return s[:k] + '...'"
    },
    {
        "number": 4220,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    k = int(lines[0])\n    s = lines[1]\n\n    if len(s) <= k:\n        return s\n    else:\n        return s[:k] + \"...\""
    },
    {
        "number": 4220,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Read input from stdin\n    k, s = stdin.split()\n    k = int(k)\n    \n    # Check if length of s is less than or equal to k\n    if len(s) <= k:\n        return s\n    \n    # If length of s exceeds k, extract first k characters and append... to the end of them\n    else:\n        return s[:k] + \"...\""
    },
    {
        "number": 4220,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split(\"\\n\")\n    K = int(lines[0])\n    S = lines[1]\n    if len(S) <= K:\n        return S\n    else:\n        return S[:K] + \"...\"\n"
    },
    {
        "number": 4221,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    if S.endswith('s'):\n        return S + 'es'\n    else:\n        return S +'s'\n\ndef"
    },
    {
        "number": 4221,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Reading input from stdin\n    S = stdin.strip()\n    \n    # Finding the last character of the input\n    last_char = S[-1]\n    \n    # Checking if the last character is's'\n    if last_char =='s':\n        # If the last character is's', then we append 'es' to the end of the input\n        plural_form = S + 'es'\n    else:\n        # If the last character is not's', then we append's' to the end of the input\n        plural_form = S +'s'\n    \n    # Returning the plural form as output\n    return plural_form"
    },
    {
        "number": 4221,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Input\n    word = stdin.strip()\n\n    # Solution\n    if word[-1] =='s':\n        plural = word + 'es'\n    else:\n        plural = word +'s'\n\n    # Output\n    print(plural)"
    },
    {
        "number": 4221,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    if s[-1] =='s':\n        return s + 'es'\n    else:\n        return s +'s'"
    },
    {
        "number": 4221,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    singular = stdin.strip()\n    if singular[-1] =='s':\n        plural = singular + 'es'\n    else:\n        plural = singular +'s'\n    return plural"
    },
    {
        "number": 4221,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    singular = stdin.strip()\n    if singular[-1] =='s':\n        plural = singular + 'es'\n    else:\n        plural = singular +'s'\n    return plural\n"
    },
    {
        "number": 4221,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    S = stdin.strip()\n    \n    # check if S ends with's'\n    if S[-1] =='s':\n        return S + 'es'\n    else:\n        return S +'s'"
    },
    {
        "number": 4221,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    if s[-1] =='s':\n        plural = s + 'es'\n    else:\n        plural = s +'s'\n    return plural"
    },
    {
        "number": 4221,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    if S[-1] =='s':\n        return S + 'es'\n    else:\n        return S +'s'"
    },
    {
        "number": 4221,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    if s[-1] =='s':\n        return s + 'es'\n    else:\n        return s +'s'"
    },
    {
        "number": 4222,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n, k = map(int, lines[0].split())\n    snacks = {}\n    for i in range(1, k+1):\n        d, *arr = map(int, lines[i].split())\n        snacks[i] = set(arr)\n    victims = set()\n    for i in range(1, n+1):\n        if i not in snacks:\n            victims.add(i)\n    for snack in snacks.values():\n        for s in snack:\n            if s in victims:\n                victims.discard(s)\n    return str(len(victims))"
    },
    {
        "number": 4222,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    lines = stdin.splitlines()\n    N, K = map(int, lines[0].split())\n    snack_counts = list(map(int, lines[1:K+1]))\n    snacks = []\n    for i in range(K):\n        snacks.append(list(map(int, lines[K+1+i].split())))\n    \n    # count snacks sold by each snuke\n    snuke_counts = [0] * N\n    for i in range(K):\n        for j in range(N):\n            if j+1 in snacks[i]:\n                snuke_counts[j] += 1\n    \n    # count snukes with no snacks\n    no_snacks = sum(1 for count in snuke_counts if count == 0)\n    \n    # return result\n    return str(no_snacks)"
    },
    {
        "number": 4222,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n, k = map(int, lines[0].split())\n    snack_counts = list(map(int, lines[1:1+k]))\n    snack_preferences = []\n    for i in range(k):\n        snack_preferences.append(list(map(int, lines[1+k+i].split())))\n    snuke_preferences = [[] for _ in range(n)]\n    for i in range(k):\n        for j in range(snack_counts[i]):\n            snuke_preferences[snack_preferences[i][j]-1].append(i+1)\n    victims = set()\n    for i in range(n):\n        if not snuke_preferences[i]:\n            victims.add(i+1)\n    return str(len(victims))"
    },
    {
        "number": 4222,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    lines = stdin.split('\\n')\n    N, K = list(map(int, lines[0].split()))\n    snakes = []\n    for i in range(1, K + 1):\n        d, *snacks = map(int, lines[i].split())\n        snakes.append((d, snacks))\n\n    # Check for victims\n    victims = set()\n    for i in range(N):\n        has_snack = False\n        for d, snacks in snakes:\n            if i + 1 in snacks:\n                has_snack = True\n                break\n        if not has_snack:\n            victims.add(i + 1)\n\n    # Print victims\n    return str(len(victims))"
    },
    {
        "number": 4222,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    lines = stdin.split('\\n')\n    n, k = list(map(int, lines[0].split()))\n    snack_counts = []\n    for i in range(1, k+1):\n        d = int(lines[i])\n        snack_counts.append(d)\n        snack_indices = list(map(int, lines[i+1].split()))\n    # Count number of victims\n    victim_count = 0\n    for i in range(n):\n        has_snack = False\n        for j in range(k):\n            if i+1 in snack_indices[j]:\n                has_snack = True\n        if not has_snack:\n            victim_count += 1\n    return str(victim_count)"
    },
    {
        "number": 4222,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    snacks = []\n    for _ in range(K):\n        d = int(stdin.split()[0])\n        snacks.append(list(map(int, stdin.split())))\n    snuke_snack_map = {}\n    for i in range(K):\n        for j in range(1, snacks[i][0]+1):\n            snuke_snack_map[snacks[i][j]] = i+1\n    victims = []\n    for i in range(1, N+1):\n        if i not in snuke_snack_map:\n            victims.append(i)\n    return str(len(victims))"
    },
    {
        "number": 4222,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    N, K = map(int, lines[0].split())\n\n    snack_counts = [0] * K\n    for i in range(K):\n        d, *A = map(int, lines[i+1].split())\n        snack_counts[i] = sum(1 for a in A if a <= N)\n\n    return str(sum(1 for sc in snack_counts if sc == 0))\n"
    },
    {
        "number": 4222,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # get input\n    n, k = map(int, stdin.readline().strip().split())\n    snacks = []\n    for i in range(k):\n        d = int(stdin.readline().strip())\n        snacks.append(list(map(int, stdin.readline().strip().split())))\n    \n    # count number of snakes that have no snacks\n    count = 0\n    for i in range(1, n+1):\n        if not any(i in snack for snack in snacks):\n            count += 1\n    \n    # print result\n    print(count)\n    \n    return \"\""
    },
    {
        "number": 4222,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    N = int(lines[0].split()[0])\n    K = int(lines[0].split()[1])\n    snakes = []\n    for i in range(1, len(lines), 2):\n        snake_id = i // 2\n        snacks = lines[i].split()\n        snakes.append((snake_id, [int(s) for s in snacks]))\n    snakes.sort(key=lambda x: len(x[1]))\n    victims = set()\n    for snake_id, snacks in snakes:\n        if not snacks:\n            victims.add(snake_id)\n    return str(len(victims))"
    },
    {
        "number": 4222,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.strip().split())\n    snack_counts = [0] * N\n    for i in range(K):\n        d = int(stdin.strip())\n        for j in range(d):\n            snack_counts[int(stdin.strip()) - 1] += 1\n    victims = sum(1 for count in snack_counts if count == 0)\n    return str(victims)"
    },
    {
        "number": 4223,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Get input\n    N = int(stdin.readline().strip())\n    S = stdin.readline().strip()\n    \n    # Count adjacent fusions\n    count = 0\n    prev_color = S[0]\n    for i in range(1, N):\n        if S[i] == prev_color:\n            count += 1\n        else:\n            prev_color = S[i]\n    \n    # Count unfused slimes\n    num_slimes = N - count\n    \n    # Print result\n    print(num_slimes)\n    \n    # Return solution as a string\n    return str(num_slimes)"
    },
    {
        "number": 4223,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    colors = [s[i] for i in range(n)]\n    count = 1\n    for i in range(1, n):\n        if colors[i] == colors[i-1]:\n            continue\n        else:\n            count += 1\n    return count"
    },
    {
        "number": 4223,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n\n    # initialize variables\n    count = 1\n    color_count = 1\n\n    # iterate through slimes\n    for i in range(1, n):\n        # check if adjacent slimes have same color\n        if s[i] == s[i-1]:\n            # fuse slimes\n            color_count += 1\n        else:\n            # add new slime\n            count += color_count\n            color_count = 1\n\n    # add last slime\n    count += color_count\n\n    return str(count)"
    },
    {
        "number": 4223,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Read input from stdin\n    N = int(stdin.readline().strip())\n    S = stdin.readline().strip()\n    \n    # Initialize variables\n    count = 1\n    prev_color = S[0]\n    i = 1\n    \n    # Loop through the string and count the number of slimes\n    while i < N:\n        if S[i] == prev_color:\n            count += 1\n        else:\n            prev_color = S[i]\n            count += 1\n        i += 1\n    \n    # Print the final count\n    print(count)\n    \n    return \"\"\n"
    },
    {
        "number": 4223,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    \n    # Initialize variables\n    count = 1\n    prev = s[0]\n    \n    # Iterate over the string\n    for i in range(1, n):\n        if s[i]!= prev:\n            count += 1\n            prev = s[i]\n    \n    # Return the count\n    return str(count)"
    },
    {
        "number": 4223,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n\n    # Initialize variables\n    i = 0\n    count = 1\n\n    while i < n - 1:\n        # If the current and next character are the same, count += 1\n        if s[i] == s[i+1]:\n            count += 1\n        # If the current and next character are different, print the current count and reset count to 1\n        else:\n            print(count)\n            count = 1\n        i += 1\n\n    # Print the last count\n    print(count)\n\n    # Return the final count\n    return str(count)"
    },
    {
        "number": 4223,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    n = int(lines[0])\n    s = lines[1]\n\n    # Fusion algorithm to count slimes\n    count = 1\n    prev = s[0]\n    for i in range(1, n):\n        if s[i] == prev:\n            continue\n        else:\n            count += 1\n            prev = s[i]\n\n    return count"
    },
    {
        "number": 4223,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    \n    # Create a stack to keep track of slimes\n    stack = []\n    \n    # Iterate over the string\n    for c in s:\n        # If the stack is empty or the current character is different from the top of the stack\n        if not stack or stack[-1]!= c:\n            # Push the current character onto the stack\n            stack.append(c)\n        else:\n            # If the current character is the same as the top of the stack, pop the top element\n            stack.pop()\n    \n    # The final number of slimes is the length of the stack\n    return len(stack)"
    },
    {
        "number": 4223,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, s = stdin.strip().split()\n    n = int(n)\n    colors = set(s)\n    adj = {}\n    for i in range(n):\n        color = s[i]\n        if color in adj:\n            adj[color].append(i)\n        else:\n            adj[color] = [i]\n    \n    def merge(color):\n        indices = adj[color]\n        if len(indices) <= 1:\n            return\n        for i in range(len(indices)-1):\n            if indices[i+1] == indices[i]+1:\n                indices[i] = indices[i+1]\n        adj[color] = [indices[0]]\n    \n    while len(colors) > 1:\n        color = colors.pop()\n        merge(color)\n        if len(adj[color]) == 0:\n            colors.remove(color)\n    \n    max_len = max(len(adj[color]) for color in adj)\n    return max_len\n\ndef"
    },
    {
        "number": 4223,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n\n    color_map = {}\n    for i, color in enumerate(s):\n        if color not in color_map:\n            color_map[color] = []\n        color_map[color].append(i)\n\n    fused = set()\n    for color in color_map:\n        for i in range(len(color_map[color]) - 1):\n            if color_map[color][i+1] - color_map[color][i] == 1 and color_map[color][i] not in fused:\n                fused.add(color_map[color][i])\n\n    return len(fused)"
    },
    {
        "number": 4224,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, *seq = map(int, stdin.split())\n    count = 0\n    for i in range(N):\n        if seq[i] % 2 == 0:\n            seq[i] //= 2\n        elif seq[i] % 3 == 0:\n            seq[i] //= 3\n        else:\n            count += 1\n    return count\n\ndef"
    },
    {
        "number": 4224,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    ans = 0\n    for i in range(1, n):\n        if a[i] % 2 == 0:\n            ans += 1\n            a[i] //= 2\n        else:\n            ans += 2\n            a[i] = a[i] * 3 // 2\n    return str(ans)"
    },
    {
        "number": 4224,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    a = [int(x) for x in stdin.readline().strip().split()]\n\n    dp = [0] * N\n    for i in range(N):\n        if a[i] % 3!= 0:\n            dp[i] = 1\n        else:\n            dp[i] = float('inf')\n        for j in range(i):\n            if a[i] % 2 == 0 and a[j] % 2 == 0:\n                dp[i] = min(dp[i], dp[j] + 1)\n            if a[i] % 3 == 0 and a[j] % 3 == 0:\n                dp[i] = min(dp[i], dp[j])\n            if a[i] % 3 == 0 and a[j] % 2 == 0:\n                dp[i] = min(dp[i], dp[j] + 1)\n            if a[i] % 2 == 0 and a[j] % 3 == 0:\n                dp[i] = min(dp[i], dp[j] + 1)\n\n    return dp[-1]\n\nprint(solution(stdin))"
    },
    {
        "number": 4224,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    ops = 0\n    for i in range(1, n+1):\n        if i % 2 == 1:\n            a[i-1] //= 2\n        else:\n            a[i-1] *= 3\n        if a[i-1] < 1 or a[i-1] > 10**9:\n            ops = -1\n            break\n        ops += 1\n    if ops == -1:\n        return \"impossible\"\n    else:\n        return str(ops)"
    },
    {
        "number": 4224,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n\n    count = 0\n\n    for i in range(n):\n        if a[i] % 3!= 0 and a[i] > 1:\n            a[i] //= 2\n            count += 1\n        elif a[i] % 3 == 0:\n            a[i] *= 2\n            count += 1\n\n    return count"
    },
    {
        "number": 4224,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    # initialize variables\n    count = 0\n    num_operations = 3 ** n\n    operations = [[0 for i in range(n)] for j in range(num_operations)]\n\n    # generate all possible operations\n    for i in range(num_operations):\n        for j in range(n):\n            if i & (3 ** j):\n                operations[i][j] = 2\n            else:\n                operations[i][j] = 3\n\n    # iterate over all possible sequences\n    max_operations = 0\n    for i in range(num_operations):\n        sequence = a[:]\n        operations_performed = 0\n        for j in range(n):\n            if operations[i][j] == 2:\n                sequence[j] //= 2\n            elif operations[i][j] == 3:\n                sequence[j] *= 3\n            if sequence[j] < 1:\n                break\n            operations_performed += 1\n        if operations_performed > max_operations:\n            max_operations = operations_performed\n\n    return str(max_operations)"
    },
    {
        "number": 4224,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, *a = map(int, stdin.split())\n    ans = 0\n    for i in range(N):\n        if a[i] % 2 == 0:\n            a[i] //= 2\n            ans += 1\n        else:\n            ans += 2\n    return str(ans)"
    },
    {
        "number": 4224,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    N = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    # initialize variables\n    count = 0\n    a_new = a.copy()\n\n    # perform operations\n    for i in range(N):\n        if a_new[i] % 2 == 0:\n            a_new[i] //= 2\n        else:\n            a_new[i] *= 3\n        count += 1\n\n        # check for non-integer values\n        for j in range(N):\n            if a_new[j] % 1!= 0:\n                return str(count)\n\n        # check for repeated operations\n        if a_new == a:\n            return str(count)\n\n    # return final count\n    return str(count)"
    },
    {
        "number": 4224,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    \n    # The maximum number of operations is equal to the number of integers in the sequence.\n    max_operations = len(a)\n    \n    # Check if the maximum number of operations is possible by multiplying each element by 3.\n    for i in range(n):\n        if a[i] % 3!= 0:\n            max_operations = i\n            break\n    \n    # Check if the maximum number of operations is possible by dividing each element by 2.\n    for i in range(n):\n        if a[i] % 2 == 0:\n            max_operations = i\n            break\n            \n    return str(max_operations)"
    },
    {
        "number": 4224,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    n, *a = map(int, stdin.split())\n    \n    # initialize variables\n    max_num_ops = 0\n    max_a = a\n    \n    # perform operations\n    for i in range(1, n):\n        # divide a_i by 2\n        a[i] //= 2\n        max_num_ops += 1\n        \n        # check if the sequence is still valid\n        if any(a[j] % 3!= 0 for j in range(i+1, n)):\n            continue\n        \n        # check if the current sequence has more operations than the previous max\n        current_num_ops = sum(a[j] % 2 == 0 for j in range(i+1, n)) + 1\n        if current_num_ops > max_num_ops:\n            max_num_ops = current_num_ops\n            max_a = a.copy()\n        \n        # multiply a_i by 3\n        a[i] *= 3\n        max_num_ops += 1\n    \n    # print output\n    print(max_num_ops)\n    print(*max_a)"
    },
    {
        "number": 4225,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, K = map(int, stdin.split())\n    cards = [1] * A + [0] * B + [-1] * C\n    cards.sort(reverse=True)\n    return str(sum(cards[:K]))"
    },
    {
        "number": 4225,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, K = map(int, stdin.split())\n    if K > A + B + C:\n        return \"Invalid Input\"\n    elif K == A + B + C:\n        return \"Infinity\"\n    else:\n        return (K * (K - 1)) // 2 + min(K - A, K - B, K - C)\n"
    },
    {
        "number": 4225,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, K = list(map(int, stdin.split()))\n\n    # create a list of cards with values from 1 to A\n    card_list = list(range(1, A+1))\n\n    # if we need to pick up more cards than are available, just add the remaining cards to the list\n    if K > A:\n        card_list.extend(list(range(C+1)))\n    else:\n        # if we need to pick up more cards than are available with a 0 or -1, add these cards to the list\n        if K > A + B:\n            card_list.extend(list(range(B+1)))\n        # if we need to pick up more cards than are available with a 0 or -1 but less than all cards, add the remaining cards to the list\n        elif K > A + B + C:\n            card_list.extend(list(range(C+1)))\n\n    # if we need to pick up more cards than are available, just return the maximum value possible\n    if K > len(card_list):\n        return str(A*(A+1)//2)\n\n    # sort the list in descending order\n    card_list.sort(reverse=True)\n\n    # sum up the values of the cards picked up\n    max_sum = sum(card_list[:K])\n\n    return str(max_sum)"
    },
    {
        "number": 4225,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, K = map(int, stdin.split())\n    return max(0, K - B)"
    },
    {
        "number": 4225,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, K = map(int, stdin.split())\n    # create a list of the cards\n    cards = [1] * A + [0] * B + [-1] * C\n    # sort the cards in descending order\n    cards = sorted(cards, reverse=True)\n    # calculate the maximum possible sum of the chosen cards\n    total = sum(cards[:K])\n    return str(total)"
    },
    {
        "number": 4225,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Splitting input by space to get A, B, C, K\n    A, B, C, K = map(int, stdin.split())\n\n    # Calculating the maximum sum\n    max_sum = (A * 2) + (B * 0) + (C * -2)\n\n    # Returning the maximum sum\n    return str(max_sum)"
    },
    {
        "number": 4225,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, K = map(int, stdin.split())\n    dp = [[[0] * (K + 1) for _ in range(C + 1)] for _ in range(B + 1)]\n\n    for i in range(K + 1):\n        dp[0][0][i] = 0\n\n    for i in range(A + 1):\n        dp[0][i % 2][1] = i\n\n    for i in range(B + 1):\n        dp[i][0][1] = i\n\n    for i in range(1, B + 1):\n        for j in range(1, C + 1):\n            for k in range(1, K + 1):\n                dp[i][j][k] = dp[i - 1][j][k]\n                if i > 0:\n                    dp[i][j][k] = max(dp[i][j][k], dp[i - 1][j][k - 1])\n                if j > 0:\n                    dp[i][j][k] = max(dp[i][j][k], dp[i][j - 1][k - 1])\n\n    return str(dp[B][C][K])"
    },
    {
        "number": 4225,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, K = map(int, stdin.split())\n    cards = [1] * A + [0] * B + [-1] * C\n    cards.sort(reverse=True)\n    total_sum = sum(cards[:K])\n    return str(total_sum)"
    },
    {
        "number": 4225,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, K = map(int, stdin.strip().split())\n    max_sum = (K + A - 1) // A  # max possible sum using all A cards\n    if K % A == 0:\n        max_sum -= A  # use one less card if possible\n    if B == 0:\n        return str(max_sum)\n    if K - max_sum * A < B:\n        return str(max_sum)\n    max_sum += K // A - max_sum - B  # use remaining B cards\n    return str(max_sum)\n\nstdin = input()\nprint(solution(stdin))"
    },
    {
        "number": 4225,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, K = map(int, stdin.split())\n    max_sum = (A + B + C) * (A + B + C + 1) // 2\n    if K > A + B + C:\n        return str(max_sum)\n    if K == A + B + C:\n        return str(A * 1 + B * 0 + C * -1)\n    if K <= A:\n        return str(K * (K + 1) // 2 + B * 0 + C * -1)\n    K -= A\n    if K <= B:\n        return str(A * 1 + B * 0 + C * -1 + (K * (K + 1) // 2))\n    K -= B\n    return str(A * 1 + B * 0 + C * -1 + B * 0 + (K * (K + 1) // 2))"
    },
    {
        "number": 4226,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y = list(map(int, stdin.strip().split()))\n    if x > 0 and y > 0:\n        if x == 1 and y > 2:\n            return \"No\"\n        if x > 2 and y > 2*x:\n            return \"No\"\n        if x*2 == y:\n            return \"Yes\"\n    return \"No\"\n\nstdin = \"3 8\"\nprint(solution(stdin)) # Output: Yes\n"
    },
    {
        "number": 4226,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    X, Y = map(int, stdin.split())\n    if X % 2 == 0 and Y % 4 == 0:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4226,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.strip().split())\n    if y % 4 == 0 and x == (y // 4):\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4226,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n\n    # check if there is a combination of numbers of cranes and turtles in which the statement is correct\n    if x == 0 and y == 0:\n        return \"Yes\"\n    if y == 0:\n        return \"No\"\n    if x == 1 and y == 1:\n        return \"No\"\n    if x == 1 and y == 2:\n        return \"Yes\"\n    if x == 2 and y == 3:\n        return \"Yes\"\n    if x == 3 and y == 4:\n        return \"Yes\"\n\n    return \"No\"\n"
    },
    {
        "number": 4226,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    \n    if y % 2 == 0:\n        if x == 2 and y == 8:\n            return \"Yes\"\n        else:\n            return \"No\"\n    else:\n        return \"No\""
    },
    {
        "number": 4226,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.strip().split())\n    if y % 2 == 1 or y % 4 == 0:\n        return \"No\"\n    crane_count = y // 2\n    turtle_count = y // 4\n    if x == crane_count + turtle_count:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4226,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    if x == 0 and y == 0:\n        return \"No\"\n    if x == 1 and y == 2:\n        return \"Yes\"\n    if x == 1 and y == 4:\n        return \"Yes\"\n    if x == 2 and y == 6:\n        return \"Yes\"\n    if x == 2 and y == 8:\n        return \"Yes\"\n    if x == 3 and y == 12:\n        return \"Yes\"\n    if x == 3 and y == 10:\n        return \"Yes\"\n    if x == 4 and y == 16:\n        return \"Yes\"\n    if x == 4 and y == 12:\n        return \"Yes\"\n    if x == 5 and y == 20:\n        return \"Yes\"\n    if x == 5 and y == 16:\n        return \"Yes\"\n    if x == 6 and y == 24:\n        return \"Yes\"\n    if x == 6 and y == 20:\n        return \"Yes\"\n    if x == 7 and y == 28:\n        return \"Yes\"\n    if x == 7 and y == 24:\n        return \"Yes\"\n    if x == 8 and y == 32:\n        return \"Yes\"\n    if x == 8 and y == 28:\n        return \"Yes\"\n    if x == 9 and y == 36:\n        return \"Yes\"\n    if x == 9 and y == 32:\n        return \"Yes\"\n    if x == 10 and y == 40:\n        return \"Yes\"\n    if x == 10 and y == 36:\n        return \"Yes\"\n    if x == 11 and y == 44:\n        return \"Yes\"\n    if x == 11 and y == 40:\n        return \"Yes\"\n    if x == 12 and y == 48:\n        return \"Yes\"\n    if x == 12 and y == 44:\n        return \"Yes\"\n    if x == 13 and y == 52:\n        return \"Yes\"\n    if x == 13 and y == 48:\n        return \"Yes\"\n    if x == 14 and y == 56:\n        return \"Yes\"\n    if x == 14 and y == 52:\n        return \"Yes\"\n    if x == 15 and y == 60:\n        return \"Yes\"\n    if x == 15 and y == 56:\n        return \"Yes\"\n    if x == 16 and y == 64:\n        return \"Yes\"\n    if x == 16 and y == 60:\n        return \"Yes\"\n    if x == 17 and y == 68:\n        return \"Yes\"\n    if x == 17 and y == 64:\n        return \"Yes\"\n    if x == 18 and y == 72:\n        return \"Yes\"\n    if x == 18 and y == 68:\n        return \"Yes\"\n    if x == 19 and y == 76:\n        return \"Yes\"\n    if x == 19 and y == 72:\n        return \"Yes\"\n    if x == 20 and y == 80:\n        return \"Yes\"\n    if x == 20 and y == 76:\n        return \"Yes\"\n    if x == 21 and y == 84:\n        return \"Yes\"\n    if x == 21 and y == 80:\n        return \"Yes\"\n    if x == 22 and y == 88:\n        return \"Yes\"\n    if x == 22 and y == 84:\n        return \"Yes\"\n    if x == 23 and y == 92:\n        return \"Yes\"\n    if x == 23 and y == 88:\n        return \"Yes\"\n    if x == 24 and y == 96:\n        return \"Yes\"\n    if x == 24 and y == 92:\n        return \"Yes\"\n    if x == 25 and y == 100:\n        return \"Yes\"\n    if x == 25 and y == 96:\n        return \"Yes\"\n    if x == 26 and y == 104:\n        return \"Yes\"\n    if x == 26 and y == 100:\n        return \"Yes\"\n    if x == 27 and y == 108:\n        return \"Yes\"\n    if x == "
    },
    {
        "number": 4226,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    if y % 2 == 0:\n        if x % 2 == 0:\n            return \"No\"\n        else:\n            return \"Yes\"\n    else:\n        if x % 2 == 0:\n            return \"Yes\"\n        else:\n            return \"No\""
    },
    {
        "number": 4226,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    \n    # check if the total number of animals is equal to the total number of legs\n    if x + y == 2 * x + 4 * y or x + y == 4 * x + 2 * y:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4226,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    x, y = map(int, stdin.strip().split())\n\n    # check if there is a combination of numbers of cranes and turtles in which the statement is correct\n    if x % 2 == 0 and y % 2 == 0 and y >= 2 * x and x > 0 and y > 0:\n        return 'Yes'\n    else:\n        return 'No'"
    },
    {
        "number": 4227,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.strip().split())\n    adj_list = [[] for _ in range(N+1)]\n    for _ in range(M):\n        a, b = map(int, stdin.strip().split())\n        adj_list[a].append(b)\n        adj_list[b].append(a)\n\n    def dfs(curr, visited, path):\n        visited[curr] = True\n        path.append(curr)\n        if curr == 1:\n            global count\n            count += 1\n        else:\n            for neighbor in adj_list[curr]:\n                if not visited[neighbor]:\n                    dfs(neighbor, visited, path)\n        path.pop()\n        visited[curr] = False\n\n    count = 0\n    for i in range(2, N+1):\n        visited = [False] * (N+1)\n        dfs(i, visited, [])\n    return count"
    },
    {
        "number": 4227,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    graph = [[] for _ in range(n+1)]\n    for _ in range(m):\n        a, b = map(int, stdin.split())\n        graph[a].append(b)\n        graph[b].append(a)\n    count = [0] * (n+1)\n    count[1] = 1\n    def dfs(node, visited):\n        for i in graph[node]:\n            if i not in visited:\n                visited.add(i)\n                count[i] += count[node]\n                dfs(i, visited)\n    dfs(1, set())\n    return count[1]"
    },
    {
        "number": 4227,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    edges = []\n    for i in range(M):\n        a, b = map(int, stdin.split())\n        edges.append((a, b))\n    paths = []\n    for i in range(1, N+1):\n        paths.append([(i,)])\n    for edge in edges:\n        for path in paths[:]:\n            if edge[0] in path[-1] and edge[1] not in path[-1]:\n                new_path = path + [(edge[1],)]\n                paths.append(new_path)\n            elif edge[1] in path[-1] and edge[0] not in path[-1]:\n                new_path = path + [(edge[0],)]\n                paths.append(new_path)\n    count = 0\n    for path in paths:\n        if len(path) == N:\n            count += 1\n    return str(count)\n\ndef"
    },
    {
        "number": 4227,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    n, m = map(int, stdin.readline().strip().split())\n    edges = []\n    for _ in range(m):\n        a, b = map(int, stdin.readline().strip().split())\n        edges.append((a, b))\n\n    # count the number of different paths that start from vertex 1 and visit all the vertices exactly once\n    paths = [0] * n\n    paths[0] = 1\n    for a, b in edges:\n        paths[b-1] += paths[a-1]\n    return str(paths[n-1])"
    },
    {
        "number": 4227,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    edges = []\n    for _ in range(m):\n        a, b = map(int, stdin.readline().split())\n        edges.append((a, b))\n\n    counts = [0] * n\n    counts[0] = 1\n    for a, b in edges:\n        counts[b-1] += counts[a-1]\n\n    return counts[n-1]"
    },
    {
        "number": 4227,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.readline().split())\n    edges = [tuple(map(int, stdin.readline().split())) for _ in range(M)]\n\n    # count the number of paths that start from vertex 1 and visit all the vertices exactly once\n    count = 0\n    for i in range(N):\n        visited = [False] * N\n        visited[i] = True\n        count += dfs(visited, i, edges)\n\n    return str(count // 2)  # there are two paths that start from vertex 1\n\ndef"
    },
    {
        "number": 4227,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n, m = map(int, lines[0].split())\n    edges = []\n    for line in lines[1:]:\n        a, b = map(int, line.split())\n        edges.append((a, b))\n\n    dp = [[0] * n for _ in range(1 << n)]\n    dp[1][0] = 1\n    for i in range(n):\n        if not dp[1][i]:\n            continue\n        for j in range(n):\n            if i == j:\n                continue\n            if not dp[1][j]:\n                continue\n            dp[1 << j][j] = 1\n\n    for i in range(1, 1 << n):\n        for j in range(n):\n            if not dp[i][j]:\n                continue\n            for k in range(n):\n                if i & (1 << k) or not dp[i ^ (1 << j)][k]:\n                    continue\n                if j == k:\n                    continue\n                if (j, k) in edges or (k, j) in edges:\n                    continue\n                dp[i][k] = 1\n\n    ans = 0\n    for i in range(n):\n        if dp[1 << i][i]:\n            ans += 1\n    return str(ans)\n"
    },
    {
        "number": 4227,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N, M = map(int, stdin.readline().split())\n    edges = [list(map(int, stdin.readline().split())) for _ in range(M)]\n\n    # Create adjacency list\n    adj = [[] for _ in range(N)]\n    for a, b in edges:\n        adj[a-1].append(b-1)\n        adj[b-1].append(a-1)\n\n    # DFS to count paths\n    def dfs(start, end, visited, path):\n        visited.add(start)\n        path.append(start)\n        if start == end:\n            return 1\n        count = 0\n        for i in adj[start]:\n            if i not in visited:\n                count += dfs(i, end, visited, path)\n        visited.remove(start)\n        path.pop()\n        return count\n\n    # Count paths\n    count = 0\n    for i in range(N):\n        count += dfs(0, i, set(), [])\n\n    return str(count)\n\nprint(solution('''3 3\n1 2\n1 3\n2 3''')) # Output: 2"
    },
    {
        "number": 4227,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    lines = stdin.strip().split('\\n')\n    N, M = map(int, lines[0].split())\n    edges = [(int(line.split()[0]), int(line.split()[1])) for line in lines[1:]]\n    \n    # Create adjacency list\n    adj_list = [[] for _ in range(N+1)]\n    for a, b in edges:\n        adj_list[a].append(b)\n        adj_list[b].append(a)\n        \n    # DFS to count paths starting from vertex 1\n    def dfs(u, visited, path):\n        visited.add(u)\n        path.append(u)\n        if u == N:\n            nonlocal count\n            count += 1\n        else:\n            for v in adj_list[u]:\n                if v not in visited:\n                    dfs(v, visited, path)\n        visited.remove(u)\n        path.pop()\n        \n    count = 0\n    visited = set()\n    dfs(1, visited, [])\n    return str(count)"
    },
    {
        "number": 4227,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # get input\n    N, M = map(int, stdin.readline().strip().split())\n    edges = [tuple(map(int, stdin.readline().strip().split())) for _ in range(M)]\n\n    # initialize adjacency list\n    adj_list = [[] for _ in range(N)]\n    for a, b in edges:\n        adj_list[a-1].append(b-1)\n        adj_list[b-1].append(a-1)\n\n    # DFS to count paths\n    def dfs(v, visited, count):\n        visited[v] = True\n        count += 1\n        for u in adj_list[v]:\n            if not visited[u]:\n                count = dfs(u, visited, count)\n        return count\n\n    count = 0\n    visited = [False] * N\n    count = dfs(0, visited, count)\n    return str(count)\n"
    },
    {
        "number": 4228,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, l = map(int, stdin.split())\n    apples = [l+i-1 for i in range(1, n+1)]\n    total = sum(apples)\n    min_diff = float('inf')\n    min_diff_apple = None\n    for i in range(n):\n        remaining_apples = apples[:i] + apples[i+1:]\n        remaining_total = sum(remaining_apples)\n        diff = abs(remaining_total - total)\n        if diff < min_diff:\n            min_diff = diff\n            min_diff_apple = apples[i]\n    return str(min_diff_apple)\n\nprint(solution(\"5 2\")) # Output: 18<|im_sep|>"
    },
    {
        "number": 4228,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    n, l = map(int, stdin.strip().split())\n    # Initialize apples and calculate the sum of all apples\n    apples = [l+i-1 for i in range(1, n+1)]\n    sum_apples = sum(apples)\n    # Initialize the sum of remaining apples and the max difference\n    remaining_sum = sum_apples\n    max_diff = 0\n    # Iterate through each apple and calculate the sum of remaining apples\n    for i in range(n):\n        remaining_apples = apples[:i] + apples[i+1:]\n        remaining_sum = sum(remaining_apples)\n        # Calculate the difference between the sum of remaining apples and the sum of all apples\n        diff = abs(remaining_sum - sum_apples)\n        # Update the max difference\n        if diff > max_diff:\n            max_diff = diff\n    # Return the max difference\n    return str(max_diff)"
    },
    {
        "number": 4228,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, l = map(int, stdin.strip().split())\n    apples = [l + i for i in range(1, n+1)]\n    apples.sort()\n    return sum(apples[:-1])"
    },
    {
        "number": 4228,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N, L = map(int, stdin.split())\n    \n    # Compute flavors of all apples\n    flavors = [L+i-1 for i in range(1, N+1)]\n    \n    # Compute flavors of apple pies using each apple\n    apple_pies = [sum(flavors[:i] + flavors[i+1:]) for i in range(N)]\n    \n    # Compute flavors of apple pie using remaining apples\n    remaining_apple_pies = [sum(apple_pies[:i] + apple_pies[i+1:]) for i in range(N-1)]\n    \n    # Find apple with smallest absolute difference from optimal apple pie\n    best_apple = min(remaining_apple_pies, key=lambda i: abs(i-sum(apple_pies)))\n    \n    return str(best_apple)"
    },
    {
        "number": 4228,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, l = map(int, stdin.split())\n    apples = [l+i-1 for i in range(1, n+1)]\n    min_diff = float('inf')\n    for i in range(n):\n        diff = sum(apples[:i] + apples[i+1:])\n        min_diff = min(min_diff, abs(diff))\n    return str(min_diff)"
    },
    {
        "number": 4228,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, l = map(int, stdin.strip().split())\n    a = list(map(lambda x: l+x-1, range(1, n+1)))\n    pie1 = sum(a)\n    a.remove(a[0])\n    pie2 = sum(a)\n    return str(abs(pie1-pie2))"
    },
    {
        "number": 4228,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    n, l = map(int, stdin.split())\n    \n    # Compute flavors of remaining apples\n    flavors = [l+i-1 for i in range(1, n+1)]\n    \n    # Compute optimal choice\n    min_diff = float('inf')\n    min_choice = -1\n    for i in range(n):\n        # Compute flavor of apple pie when apple i is eaten\n        pie_with_i = sum(flavors[j] for j in range(n) if j!= i)\n        # Compute difference between actual and optimal pie\n        diff = abs(pie_with_i - sum(flavors))\n        # Update min diff and choice if necessary\n        if diff < min_diff:\n            min_diff = diff\n            min_choice = i\n    \n    # Output optimal choice\n    return str(sum(flavors[j] for j in range(n) if j!= min_choice))"
    },
    {
        "number": 4228,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N, L = map(int, stdin.strip().split())\n\n    # Create array of apples\n    apples = [L+i-1 for i in range(1, N+1)]\n\n    # Calculate optimal choice\n    min_diff = float('inf')\n    for i in range(N):\n        # Calculate sum of remaining apples\n        remaining_sum = sum(apples[:i] + apples[i+1:])\n\n        # Calculate absolute difference between remaining and all apples\n        diff = abs(remaining_sum - sum(apples))\n\n        # Update minimum difference\n        if diff < min_diff:\n            min_diff = diff\n            best_apple = i\n\n    # Output optimal apple\n    return str(sum(apples[:best_apple] + apples[best_apple+1:]))"
    },
    {
        "number": 4228,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, l = map(int, stdin.split())\n    apples = [l+i-1 for i in range(1, n+1)]\n    remaining_apples = apples[1:]\n    remaining_apples_sum = sum(remaining_apples)\n    apple_to_eat = min(remaining_apples, key=lambda a: abs(sum(remaining_apples)-sum(apples)))\n    remaining_apples.remove(apple_to_eat)\n    return sum(remaining_apples) + remaining_apples_sum - sum(apple_to_eat)"
    },
    {
        "number": 4228,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    N, L = map(int, stdin.split())\n\n    # calculate the flavors of the apples\n    flavors = [i+L-1 for i in range(1, N+1)]\n\n    # calculate the total flavor of the pie made of all the apples\n    total_flavor = sum(flavors)\n\n    # calculate the flavors of the pie made of the remaining apples\n    remaining_flavors = [total_flavor - f for f in flavors]\n\n    # find the apple with the smallest absolute difference in flavor\n    min_diff = abs(remaining_flavors[0])\n    min_idx = 0\n    for i in range(1, N):\n        diff = abs(remaining_flavors[i])\n        if diff < min_diff:\n            min_diff = diff\n            min_idx = i\n\n    # return the flavor of the apple pie made of the remaining apples\n    return flavors[min_idx]\n"
    },
    {
        "number": 4229,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    # Initialize the sequence with 1 and the sum with it\n    sequence = [1]\n    sum_sequence = 1\n    for i in range(2, n+1):\n        if i % 3 == 0 and i % 5 == 0:\n            sequence.append(\"FizzBuzz\")\n            sum_sequence += i\n        elif i % 3 == 0:\n            sequence.append(\"Fizz\")\n            sum_sequence += i\n        elif i % 5 == 0:\n            sequence.append(\"Buzz\")\n            sum_sequence += i\n        else:\n            sequence.append(i)\n            sum_sequence += i\n    # Print the sequence and its sum\n    print(\"The first\", n, \"terms of the FizzBuzz sequence are:\")\n    print(\", \".join(str(x) for x in sequence))\n    print(\"Among them, numbers are\", \", \".join(str(x) for x in sequence if type(x) == int),\n          \"and the sum of them is\", sum_sequence)\n    return str(sum_sequence)"
    },
    {
        "number": 4229,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N = int(stdin.readline().strip())\n\n    # Initialize variables\n    count = 0\n    fizz_buzz_sum = 0\n    i = 1\n\n    # Loop through FizzBuzz sequence\n    while count < N:\n        if i % 3 == 0 and i % 5 == 0:\n            fizz_buzz_sum += i\n            count += 1\n        elif i % 3 == 0:\n            fizz_buzz_sum += i\n            count += 1\n        elif i % 5 == 0:\n            fizz_buzz_sum += i\n            count += 1\n        i += 1\n\n    # Print sum\n    print(fizz_buzz_sum)\n\n    return \"\""
    },
    {
        "number": 4229,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    # initialize the sequence with 1\n    seq = [1]\n    # loop through the sequence up to n\n    for i in range(1, n):\n        # if both 3 and 5 divide i, add \"FizzBuzz\" to the sequence\n        if i % 3 == 0 and i % 5 == 0:\n            seq.append(\"FizzBuzz\")\n        # if only 3 divides i, add \"Fizz\" to the sequence\n        elif i % 3 == 0:\n            seq.append(\"Fizz\")\n        # if only 5 divides i, add \"Buzz\" to the sequence\n        elif i % 5 == 0:\n            seq.append(\"Buzz\")\n        # if none of the above conditions are met, add i to the sequence\n        else:\n            seq.append(i)\n    # sum the sequence up to n\n    sum_seq = sum(seq)\n    return str(sum_seq)"
    },
    {
        "number": 4229,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    fizzbuzz = []\n    for i in range(1, n+1):\n        if i % 3 == 0 and i % 5 == 0:\n            fizzbuzz.append('FizzBuzz')\n        elif i % 3 == 0:\n            fizzbuzz.append('Fizz')\n        elif i % 5 == 0:\n            fizzbuzz.append('Buzz')\n        else:\n            fizzbuzz.append(str(i))\n    return str(sum(int(num) for num in fizzbuzz))"
    },
    {
        "number": 4229,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    sum = 0\n    for i in range(1, N+1):\n        if i % 3 == 0 and i % 5 == 0:\n            sum += 'FizzBuzz'\n        elif i % 3 == 0:\n            sum += 'Fizz'\n        elif i % 5 == 0:\n            sum += 'Buzz'\n        else:\n            sum += str(i)\n    print(sum)\n    return str(sum)"
    },
    {
        "number": 4229,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    fizz = 0\n    buzz = 0\n    fizzbuzz = 0\n    sum = 0\n    for i in range(1, n+1):\n        if i % 3 == 0 and i % 5 == 0:\n            fizzbuzz += 1\n            sum += i\n        elif i % 3 == 0:\n            fizz += 1\n            sum += i\n        elif i % 5 == 0:\n            buzz += 1\n            sum += i\n    print(f\"The sum of all numbers among the first {n} terms of the FizzBuzz sequence is {sum}.\")\n    return str(sum)"
    },
    {
        "number": 4229,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    sum = 0\n    fizz_count = 0\n    buzz_count = 0\n    for i in range(1, n+1):\n        if i % 3 == 0 and i % 5 == 0:\n            sum += i\n            print(\"FizzBuzz\")\n        elif i % 3 == 0:\n            sum += i\n            print(\"Fizz\")\n            fizz_count += 1\n        elif i % 5 == 0:\n            sum += i\n            print(\"Buzz\")\n            buzz_count += 1\n        else:\n            sum += i\n            print(i)\n    print(\"Sum of numbers in FizzBuzz sequence:\", sum)\n    print(\"Total Fizz:\", fizz_count)\n    print(\"Total Buzz:\", buzz_count)"
    },
    {
        "number": 4229,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    sum = 0\n    for i in range(1, N+1):\n        if i % 3 == 0 and i % 5 == 0:\n            sum += 'FizzBuzz'\n        elif i % 3 == 0:\n            sum += 'Fizz'\n        elif i % 5 == 0:\n            sum += 'Buzz'\n        else:\n            sum += str(i)\n        sum +=''\n    return str(sum)"
    },
    {
        "number": 4229,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    s = 0\n    for i in range(1, n+1):\n        if i % 3 == 0 and i % 5 == 0:\n            s += 15\n        elif i % 3 == 0:\n            s += 3\n        elif i % 5 == 0:\n            s += 5\n        else:\n            s += i\n    return str(s)"
    },
    {
        "number": 4229,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    n = int(stdin.strip())\n\n    # Initialize variables\n    fizz = 0\n    buzz = 0\n    fizzbuzz = 0\n    sum = 0\n\n    # Loop through FizzBuzz sequence\n    for i in range(1, n+1):\n        if i % 3 == 0 and i % 5 == 0:\n            fizzbuzz += 1\n            sum += i\n        elif i % 3 == 0:\n            fizz += 1\n            sum += i\n        elif i % 5 == 0:\n            buzz += 1\n            sum += i\n\n    # Print output\n    print(sum)\n\n    # Return solution\n    return str(sum)"
    },
    {
        "number": 4230,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Reading input values\n    X, N = map(int, stdin.readline().strip().split())\n    nums = list(map(int, stdin.readline().strip().split()))\n\n    # Checking if X is present in the list\n    if X in nums:\n        return str(X)\n\n    # Calculating the absolute difference between X and each number in the list\n    differences = [abs(X - num) for num in nums]\n\n    # Finding the minimum difference\n    min_diff = min(differences)\n\n    # Finding the index of the minimum difference\n    min_diff_index = differences.index(min_diff)\n\n    # Returning the minimum difference number\n    return str(nums[min_diff_index])"
    },
    {
        "number": 4230,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    X, N = map(int, stdin.readline().strip().split())\n    p = list(map(int, stdin.readline().strip().split()))\n    \n    # Create set of all possible values\n    s = set(range(1, 101)) - set(p)\n    \n    # Find minimum difference\n    min_diff = min(abs(x - X) for x in s)\n    \n    # Find values with minimum difference\n    values = [x for x in s if abs(x - X) == min_diff]\n    \n    # Return smallest value\n    return str(min(values))"
    },
    {
        "number": 4230,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Parsing the input\n    X, N = map(int, stdin.readline().strip().split())\n    seq = list(map(int, stdin.readline().strip().split()))\n    # Calculating the minimum absolute difference\n    min_diff = float('inf')\n    for i in range(1, 101):\n        if i not in seq:\n            diff = abs(X - i)\n            if diff < min_diff:\n                min_diff = diff\n                nearest = i\n    # Returning the answer\n    return str(nearest)"
    },
    {
        "number": 4230,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x, n = map(int, stdin.readline().split())\n    p = list(map(int, stdin.readline().split()))\n    not_in_p = set(range(1, 101)) - set(p)\n    ans = min(not_in_p, key=lambda y: abs(y-x))\n    return str(ans)\n\nprint(solution(input()))"
    },
    {
        "number": 4230,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    X, N = map(int, stdin.readline().strip().split())\n    p = list(map(int, stdin.readline().strip().split()))\n    m = float('inf')\n    res = None\n    for i in range(1, 101):\n        if i not in p:\n            if abs(i-X) < m:\n                m = abs(i-X)\n                res = i\n    return str(res)"
    },
    {
        "number": 4230,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    X, N = map(int, stdin.readline().strip().split())\n    seq = list(map(int, stdin.readline().strip().split()))\n    \n    # find the missing numbers\n    missing = set(range(1, 101)) - set(seq)\n    \n    # find the minimum difference\n    min_diff = float('inf')\n    for m in missing:\n        diff = abs(X - m)\n        if diff < min_diff:\n            min_diff = diff\n            res = m\n    \n    return str(res)"
    },
    {
        "number": 4230,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    X, N = map(int, stdin.split())\n    p = list(map(int, stdin.split()))\n    p_set = set(p)\n    min_dist = float('inf')\n    ans = -1\n    for i in range(1, 101):\n        if i not in p_set:\n            dist = abs(X - i)\n            if dist < min_dist:\n                min_dist = dist\n                ans = i\n    return str(ans)"
    },
    {
        "number": 4230,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    x, n = map(int, stdin.readline().split())\n    p = list(map(int, stdin.readline().split()))\n\n    # Find the nearest integer\n    nearest = min(filter(lambda x: x!= max(p) and x!= min(p), set(range(1, 101)) - set(p)), key=lambda x: abs(x - x))\n\n    # Print result\n    return str(nearest)"
    },
    {
        "number": 4230,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x, n = map(int, stdin.readline().split())\n    p = list(map(int, stdin.readline().split()))\n    result = float('inf')\n    for i in range(1, 101):\n        if i not in p:\n            diff = abs(i - x)\n            if diff < result:\n                result = diff\n                nearest = i\n    return str(nearest)\n\ndef"
    },
    {
        "number": 4230,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    x, n = map(int, stdin.readline().strip().split())\n    arr = list(map(int, stdin.readline().strip().split()))\n\n    # find nearest integer to x\n    nearest = min(set(range(1, 101)) - set(arr), key=lambda y: abs(y-x))\n\n    return str(nearest)"
    },
    {
        "number": 4231,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    h, w = map(int, stdin.readline().strip().split())\n    num_rows = sum(map(int, stdin.readline().strip().split()))\n    num_cols = sum(map(int, stdin.readline().strip().split()))\n    \n    if h > num_rows or w > num_cols:\n        return \"0\"\n    \n    if h == num_rows and w == num_cols:\n        return \"0\"\n    \n    return \"1\"\n\nprint(solution(input()))"
    },
    {
        "number": 4231,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    H, W = map(int, stdin.readline().split())\n    h, w = map(int, stdin.readline().split())\n\n    # calculate remaining white cells\n    remaining_cells = (H - h) * W - (W - w)\n    return str(remaining_cells)\n"
    },
    {
        "number": 4231,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    H, W = map(int, stdin.readline().strip().split())\n    h, w = map(int, stdin.readline().strip().split())\n    count = (H + W) * (h + w) - (h * w)\n    return str(count)"
    },
    {
        "number": 4231,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    H, W = map(int, stdin.readline().split())\n    h, w = map(int, stdin.readline().split())\n\n    # calculate count of white cells that will remain\n    white_cells = (H - h) * W + (W - w) * h\n\n    # print count\n    print(white_cells)\n\n    # return count as string for testing\n    return str(white_cells)\n"
    },
    {
        "number": 4231,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    H, W = map(int, stdin.split())\n    h, w = map(int, stdin.readline().split())\n    white_cells = H * W - (H - h + 1) * (W - w + 1)\n    return str(white_cells)"
    },
    {
        "number": 4231,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    H, W = map(int, stdin.readline().split())\n    h, w = map(int, stdin.readline().split())\n\n    # Calculate the number of white cells\n    white_cells = (H - h + 1) * W - (W - w) * (H - h)\n\n    # Print the number of white cells\n    print(white_cells)\n\n    return \"\""
    },
    {
        "number": 4231,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    h, w = map(int, stdin.strip().split())\n    count = (h+w)//2\n    return str(count)"
    },
    {
        "number": 4231,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    H, W = map(int, stdin.readline().split())\n    h, w = map(int, stdin.readline().split())\n    white_cells = (H - h) * W + (W - w)\n    print(white_cells)"
    },
    {
        "number": 4231,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    H, W = map(int, stdin.readline().split())\n    h, w = map(int, stdin.readline().split())\n    return str(H * W - h * W - H * w + h * w)"
    },
    {
        "number": 4231,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    H, W = map(int, lines[0].split())\n    h, w = map(int, lines[1].split())\n    white_cells = (H - h) * W + (W - w)\n    return str(white_cells)\n"
    },
    {
        "number": 4232,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    a.sort()\n    left, right = 1, 10**9\n\n    while left < right:\n        mid = (left + right) // 2\n        count = 0\n        for i in range(n):\n            if a[i] <= mid:\n                count += 1\n                if count == k:\n                    return str(mid)\n            else:\n                break\n        if count < k:\n            left = mid + 1\n        else:\n            right = mid\n\n    return \"-1\""
    },
    {
        "number": 4232,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:]))\n    a.sort()\n    i = 0\n    j = n-1\n    ans = -1\n    while i < j:\n        if a[i]+a[j] <= 10**9:\n            ans = a[i]+a[j]\n            break\n        if a[i] <= a[j]:\n            i += 1\n        else:\n            j -= 1\n    if k == 0:\n        return ans\n    if ans == -1:\n        return \"-1\"\n    count = 0\n    for i in range(n):\n        if a[i] <= ans:\n            count += 1\n            if count == k:\n                return ans\n    return \"-1\""
    },
    {
        "number": 4232,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    seq = list(map(int, stdin.split()))\n    seq.sort()\n    for i in range(n-k+1):\n        if i == 0 or seq[i] > seq[i-1]:\n            if seq[i] + seq[n-k+1-i] > 10**9:\n                return str(seq[i])\n    return \"-1\""
    },
    {
        "number": 4232,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    \n    # Sort the list in ascending order\n    a.sort()\n    \n    # Initialize the left and right pointers\n    left = 1\n    right = 1000000000\n    \n    # Loop until the left pointer is less than the right pointer\n    while left < right:\n        # Calculate the middle index\n        mid = (left + right) // 2\n        \n        # Count the number of elements that are less than or equal to the middle index\n        count = 0\n        for i in range(n):\n            if a[i] <= mid:\n                count += 1\n        \n        # If the count is less than k, update the left pointer\n        if count < k:\n            left = mid + 1\n        # If the count is equal to k, update the right pointer\n        elif count == k:\n            right = mid\n        # If the count is greater than k, update the right pointer\n        else:\n            right = mid - 1\n    \n    # If the left pointer is greater than or equal to 1, return the left pointer\n    if left >= 1:\n        return str(left)\n    # Otherwise, return -1\n    else:\n        return \"-1\""
    },
    {
        "number": 4232,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.strip().split())\n    a = list(map(int, stdin.strip().split()))\n    count = 0\n    x = 0\n    for i in range(n):\n        if count == k:\n            break\n        if a[i] <= x:\n            continue\n        count += 1\n        x = a[i]\n    if count == k:\n        return str(x)\n    else:\n        return \"-1\""
    },
    {
        "number": 4232,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    \n    left, right = 1, 10**9\n    \n    while left <= right:\n        mid = (left + right) // 2\n        count = 0\n        for i in a:\n            if i <= mid:\n                count += 1\n        if count >= k:\n            right = mid - 1\n        else:\n            left = mid + 1\n            \n    if left == 10**9 + 1:\n        return \"-1\"\n    else:\n        return str(left)"
    },
    {
        "number": 4232,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    seq = list(map(int, stdin.readline().split()))\n    seq.sort()\n    left, right = 1, seq[-1]\n    while left <= right:\n        mid = (left + right) // 2\n        cnt = 0\n        for num in seq:\n            if num <= mid:\n                cnt += 1\n            if cnt == k:\n                return str(mid)\n        if cnt < k:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return \"-1\""
    },
    {
        "number": 4232,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    seq = list(map(int, stdin.split()[2:]))\n    seq.sort()\n\n    left = 1\n    right = 10**9 + 1\n    while left < right:\n        mid = (left + right) // 2\n        count = sum(1 for x in seq if x <= mid)\n        if count == k:\n            return str(mid)\n        elif count < k:\n            left = mid + 1\n        else:\n            right = mid\n\n    return \"-1\""
    },
    {
        "number": 4232,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    count = 0\n    i = 0\n    j = n - 1\n    while i < j:\n        if a[i] + a[j] <= 10**9:\n            count += j - i\n            i += 1\n        else:\n            j -= 1\n    return str(count) if count >= k else \"-1\"\n"
    },
    {
        "number": 4232,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n\n    if k > n:\n        return \"-1\"\n\n    # binary search for the first number\n    left = 1\n    right = a[-1]\n    while left < right:\n        mid = (left + right) // 2\n        count = 0\n        for num in a:\n            if num <= mid:\n                count += 1\n        if count >= k:\n            right = mid\n        else:\n            left = mid + 1\n    x = left\n\n    # binary search for the last number\n    left = 1\n    right = 10 ** 9\n    while left < right:\n        mid = (left + right) // 2\n        count = 0\n        for num in a:\n            if num <= mid:\n                count += 1\n        if count == k:\n            left = mid + 1\n        else:\n            right = mid\n    y = right - 1\n\n    # check if there is any integer between x and y\n    for i in range(x, y + 1):\n        count = 0\n        for num in a:\n            if num <= i:\n                count += 1\n        if count == k:\n            return str(i)\n\n    return \"-1\""
    },
    {
        "number": 4233,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    grid = [list(line) for line in stdin.split('\\n')[1:]]\n    stars = []\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                size = 1\n                for k in range(max(0, i-1), min(n, i+2)):\n                    for l in range(max(0, j-1), min(m, j+2)):\n                        if grid[k][l] == '*' and k!= i and l!= j:\n                            size += 1\n                if size == 1:\n                    continue\n                else:\n                    stars.append((i, j, size))\n\n    if len(stars) > n*m:\n        return '-1'\n    else:\n        print(len(stars))\n        for star in stars:\n            print(' '.join(map(str, star)))\n        return ''"
    },
    {
        "number": 4233,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    grid = [list(line.strip()) for line in stdin.splitlines()[1:]]\n\n    def is_inside(x, y):\n        return 1 <= x <= n and 1 <= y <= m and grid[x-1][y-1] == '.'\n\n    def is_valid(x, y, s):\n        for i in range(s):\n            for j in range(s):\n                if grid[x-1+i][y-1+j]!= '.':\n                    return False\n        return True\n\n    def place_star(x, y, s):\n        for i in range(s):\n            for j in range(s):\n                grid[x-1+i][y-1+j] = '*'\n\n    def dfs(x, y, s, k):\n        if not is_inside(x, y):\n            return False\n        if s == 1 and is_valid(x, y, s):\n            place_star(x, y, s)\n            k += 1\n            return k\n        for i in range(s-1, 0, -1):\n            if is_valid(x, y, i):\n                if dfs(x, y, i, k):\n                    place_star(x, y, s)\n                    k += 1\n                    return k\n        return False\n\n    k = 0\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                continue\n            for s in range(1, n*m+1):\n                if dfs(i+1, j+1, s, k):\n                    k += 1\n                    break\n            if k > n*m:\n                return \"-1\"\n    return k"
    },
    {
        "number": 4233,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    n, m = map(int, stdin.readline().split())\n    grid = [list(stdin.readline().strip()) for _ in range(n)]\n    \n    # Check if possible to draw using stars only\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                if i == 0 or grid[i-1][j]!= '*':\n                    if j == 0 or grid[i][j-1]!= '*':\n                        if i == n-1 or grid[i+1][j]!= '*':\n                            if j == m-1 or grid[i][j+1]!= '*':\n                                return '-1'\n    \n    # Find all center positions of stars\n    centers = []\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                centers.append((i,j))\n    \n    # Find sizes of stars\n    sizes = set()\n    for center in centers:\n        size = 1\n        for i,j in [(center[0]-1,center[1]), (center[0]+1,center[1]), (center[0],center[1]-1), (center[0],center[1]+1)]:\n            if i >= 0 and i < n and j >= 0 and j < m and grid[i][j] == '*':\n                size += 1\n        sizes.add(size)\n    \n    # Check if possible to draw with at most n*m stars\n    if len(sizes) > n*m:\n        return '-1'\n    \n    # Draw stars\n    k = len(centers)\n    output = f'{k}\\n'\n    for center, size in zip(centers, sizes):\n        output += f'{center[0]} {center[1]} {size}\\n'\n    return output"
    },
    {
        "number": 4233,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    grid = []\n    for i in range(n):\n        row = list(stdin.readline().strip())\n        grid.append(row)\n    \n    # check if possible\n    for row in grid:\n        if row.count('*')!= 1:\n            return \"-1\"\n    for i in range(n):\n        if grid[i].count('*')!= 1:\n            return \"-1\"\n    if grid[0][0] == '.' or grid[n-1][m-1] == '.':\n        return \"-1\"\n    \n    # start with one star in the middle\n    stars = [(n//2, m//2, 1)]\n    k = 1\n    while k < n*m:\n        # find the closest star to the new star\n        closest_dist = float('inf')\n        closest_star = None\n        for i, j, s in stars:\n            for dx, dy in [(0, -1), (0, 1), (-1, 0), (1, 0)]:\n                x, y = i+dx, j+dy\n                if x < 0 or x >= n or y < 0 or y >= m:\n                    continue\n                if grid[x][y] == '.':\n                    continue\n                dist = abs(dx) + abs(dy)\n                if dist < closest_dist:\n                    closest_dist = dist\n                    closest_star = (x, y, s)\n        if closest_star is None:\n            return \"-1\"\n        # add the new star\n        x, y, s = closest_star\n        grid[x][y] = '*'\n        stars.append((x, y, s))\n        k += 1\n    \n    # output the stars\n    print(len(stars))\n    for i, j, s in stars:\n        print(i+1, j+1, s)\n    \n    return \"\"\n\ndef"
    },
    {
        "number": 4233,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    grid = []\n    for i in range(n):\n        grid.append(list(stdin.strip().split()[i]))\n\n    # create a set of empty cells\n    empty = set([(i, j) for i in range(n) for j in range(m) if grid[i][j] == \".\"])\n\n    # create a dictionary of stars and their sizes\n    stars = {}\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == \"*\":\n                for ni, nj in [(i+1, j), (i-1, j), (i, j+1), (i, j-1)]:\n                    if 0 <= ni < n and 0 <= nj < m and grid[ni][nj] == \".\" and (ni, nj) in empty:\n                        if (i, j) not in stars:\n                            stars[(i, j)] = set()\n                        stars[(i, j)].add((ni, nj))\n                        empty.remove((ni, nj))\n\n    if len(stars) > n*m:\n        return \"-1\"\n\n    # place the stars on the grid\n    k = 0\n    for i, j in stars:\n        for ni, nj in stars[(i, j)]:\n            grid[ni][nj] = \"*\"\n            k += 1\n\n    # print the stars\n    for i, j in stars:\n        for ni, nj in stars[(i, j)]:\n            print(f\"{ni+1} {nj+1} {len(stars[(i, j)])}\")\n\n    return k\n"
    },
    {
        "number": 4233,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.strip().split())\n    grid = [list(line.strip()) for line in stdin.strip().split(\"\\n\")[1:]]\n    \n    # check if grid can be drawn using stars only\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                if i == 0 or i == n-1 or j == 0 or j == m-1:\n                    return \"-1\"\n                if i > 1 and grid[i-2][j] == '*':\n                    return \"-1\"\n                if i < n-2 and grid[i+2][j] == '*':\n                    return \"-1\"\n                if j > 1 and grid[i][j-2] == '*':\n                    return \"-1\"\n                if j < m-2 and grid[i][j+2] == '*':\n                    return \"-1\"\n                \n    # find central stars\n    stars = []\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                stars.append((i,j,1))\n                \n    # check for intersections and overlaps\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                for k in range(len(stars)):\n                    if stars[k][0] == i and stars[k][1] == j:\n                        continue\n                    if (abs(i-stars[k][0]) <= stars[k][2]+1 and abs(j-stars[k][1]) <= stars[k][2]+1):\n                        return \"-1\"\n                    if i-j == stars[k][0]-stars[k][1] and abs(i-j) <= stars[k][2]+1:\n                        return \"-1\"\n                    if i+j == stars[k][0]+stars[k][1] and abs(i+j) <= stars[k][2]+1:\n                        return \"-1\"\n                        \n    return str(len(stars)) + \"\\n\" + \"\\n\".join(str(s[0])+\" \"+str(s[1])+\" \"+str(s[2]) for s in stars)"
    },
    {
        "number": 4233,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    grid = stdin.split('\\n')[1:]\n    grid = [list(line) for line in grid]\n    stars = []\n\n    def is_valid(x, y, s):\n        for dx in range(-s+1, s):\n            for dy in range(-s+1, s):\n                if dx == dy == 0:\n                    continue\n                if x+dx < 1 or x+dx > n or y+dy < 1 or y+dy > m:\n                    return False\n                if grid[x+dx-1][y+dy-1] == '*':\n                    return False\n        return True\n\n    def add_star(x, y, s):\n        if s == 1:\n            stars.append((x, y, s))\n            return\n        for dx in range(-s+1, s):\n            for dy in range(-s+1, s):\n                if dx == dy == 0:\n                    continue\n                nx, ny = x+dx, y+dy\n                if nx < 1 or nx > n or ny < 1 or ny > m:\n                    continue\n                if grid[nx-1][ny-1] == '.':\n                    if is_valid(nx, ny, s-1):\n                        add_star(nx, ny, s-1)\n\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                add_star(i+1, j+1, 1)\n\n    if len(stars) > n*m:\n        return '-1'\n\n    res = ''\n    res += str(len(stars)) + '\\n'\n    for star in stars:\n        res +=''.join(map(str, star)) + '\\n'\n    return res"
    },
    {
        "number": 4233,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    grid = [list(line.strip()) for line in stdin.split('\\n')[1:]]\n\n    # Check if it is possible to draw the grid using stars only\n    if not all(any('*' in row for row in grid) for j in range(m)):\n        return '-1'\n\n    # Find all possible centers of stars\n    centers = []\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                centers.append((i, j))\n\n    # Check if it is possible to draw the grid using stars only\n    if len(centers) > n * m:\n        return '-1'\n\n    # Assign sizes to stars\n    sizes = [1] * len(centers)\n\n    # Count the number of stars needed\n    stars_needed = len(centers)\n\n    # Draw stars\n    result = []\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                continue\n            for center, size in zip(centers, sizes):\n                if (i - center[0]) ** 2 + (j - center[1]) ** 2 <= size ** 2:\n                    result.append((i, j, size))\n\n    # Check if there are enough stars\n    if len(result)!= stars_needed:\n        return '-1'\n\n    return str(stars_needed) + '\\n' + '\\n'.join(map(' '.join, result))"
    },
    {
        "number": 4233,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    grid = [list(line.strip()) for line in stdin.split('\\n')[1:]]\n\n    # Check if it is impossible to draw the given grid using stars only\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*' and (i == 0 or grid[i-1][j] == '.') and (i == n-1 or grid[i+1][j] == '.') and (j == 0 or grid[i][j-1] == '.') and (j == m-1 or grid[i][j+1] == '.'):\n                return '-1'\n\n    # Find the stars\n    stars = []\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                size = 1\n                for k in range(-1, 2):\n                    for l in range(-1, 2):\n                        if k!= 0 or l!= 0:\n                            size += 1 if grid[i+k][j+l] == '*' else 0\n                stars.append((i, j, size))\n\n    # Print the output\n    print(len(stars))\n    for x, y, size in stars:\n        print(x, y, size)\n\n    return '0'"
    },
    {
        "number": 4233,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.strip().split())\n    grid = stdin.strip().split('\\n')[1:]\n    for i in range(n):\n        grid[i] = list(grid[i])\n    \n    # check if any possible solution exists\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*' and (i == 0 or grid[i-1][j] == '.' or grid[i-1][j] == '*') and (i == n-1 or grid[i+1][j] == '.' or grid[i+1][j] == '*') and (j == 0 or grid[i][j-1] == '.' or grid[i][j-1] == '*') and (j == m-1 or grid[i][j+1] == '.' or grid[i][j+1] == '*'):\n                break\n        else:\n            return '-1'\n    \n    # create stars\n    stars = []\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                for x in range(i-1, i+2):\n                    for y in range(j-1, j+2):\n                        if grid[x][y] == '.' and (x, y) not in stars:\n                            stars.append((x, y))\n    \n    # add one star at a time\n    k = 0\n    while stars:\n        x, y = stars.pop()\n        size = 2\n        for dx, dy in [(0, -1), (0, 1), (-1, 0), (1, 0)]:\n            if 0 <= x+dx < n and 0 <= y+dy < m and grid[x+dx][y+dy] == '*' and (x+dx, y+dy) not in stars:\n                stars.remove((x+dx, y+dy))\n                size += 1\n        if size > 1:\n            k += 1\n            grid[x][y] = '*'\n            print(k, x+1, y+1, size)\n    \n    # check if all stars are inside grid\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                return '-1'\n    \n    # print grid\n    for row in grid:\n        print(''.join(row))\n    \n    return str(k)\n"
    },
    {
        "number": 4234,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    s = stdin.strip()\n    if n % 2 == 1:\n        print(\"1\")\n        return s\n    count = 0\n    for i in range(0, n, 2):\n        if s[i] == s[i+1]:\n            count += 1\n    if count == n // 2:\n        print(0)\n        return s\n    else:\n        count = 0\n        for i in range(0, n, 2):\n            if s[i] == s[i+1]:\n                count += 1\n        if count == n // 2:\n            print(0)\n            return s\n        else:\n            for i in range(1, n, 2):\n                if s[i] == s[i-1]:\n                    print(n % 2)\n                    return s[:i-1] + s[i+1:]\n                elif s[i]!= s[i-1]:\n                    print(n % 2)\n                    return s[:i] + s[i+1:]"
    },
    {
        "number": 4234,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    \n    if n == 0 or s == '':\n        return '0\\n'\n    \n    good = True\n    for i in range(n-1):\n        if s[i] == s[i+1]:\n            good = False\n            break\n    \n    if good:\n        return '0\\n' + s\n    \n    k = 0\n    for i in range(n):\n        if i % 2 == 0 and s[i] == s[i+1]:\n            k += 1\n        elif i % 2 == 1 and s[i] == s[i-1]:\n            k += 1\n    \n    return f'{k}\\n{s[:-k]}'"
    },
    {
        "number": 4234,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    good = True\n    for i in range(n):\n        if i % 2 == 0:\n            if s[i] == s[i+1]:\n                good = False\n                break\n        else:\n            if i > 0 and s[i] == s[i-1]:\n                good = False\n                break\n    if good:\n        return \"0\\n\" + s\n    else:\n        k = 0\n        for i in range(n-1):\n            if s[i] == s[i+1]:\n                s = s[:i] + s[i+1:]\n                k += 1\n                break\n        if k == 0:\n            return \"1\\n\" + s\n        else:\n            return str(k) + \"\\n\" + s"
    },
    {
        "number": 4234,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, s = stdin.strip().split()\n    n = int(n)\n    s = list(s)\n    \n    if n % 2 == 1:\n        k = 1\n        for i in range(1, n, 2):\n            if s[i] == s[i-1]:\n                k += 1\n        s = s[:k] + s[k+1:]\n        n -= k\n        \n    for i in range(0, n, 2):\n        if s[i] == s[i+1]:\n            s.pop(i)\n            s.pop(i)\n            n -= 2\n            break\n    \n    k = n % 2\n    if k!= 0:\n        s = s[:-k]\n        \n    return k, ''.join(s) if s else ''\n"
    },
    {
        "number": 4234,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    good = True\n    for i in range(1, n, 2):\n        if s[i] == s[i-1]:\n            good = False\n            break\n    if good and n > 0:\n        k = n // 2\n        if k == 0:\n            s = \"\"\n        else:\n            s = s[k:n-k]\n    else:\n        k = 0\n    return str(k) + '\\n' + s"
    },
    {
        "number": 4234,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n\n    k = 0\n    for i in range(1, n, 2):\n        if s[i] == s[i-1]:\n            k += 1\n\n    result = s[k:] if k > 0 else \"\"\n\n    return f\"{k}\\n{result}\" if result else f\"{k}\""
    },
    {
        "number": 4234,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    s = list(s)\n    i = 0\n    while i < n:\n        if s[i] == s[(i+1)%n]:\n            s.pop(i)\n            n -= 1\n        else:\n            i += 1\n    k = n - len(s)\n    if k == 0:\n        s = ''.join(s)\n    else:\n        s = ''\n    return f\"{k}\\n{s}\""
    },
    {
        "number": 4234,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    \n    k = 0\n    for i in range(n):\n        if i % 2 == 0 and s[i] == s[i+1]:\n            k += 1\n        elif i % 2 == 1 and s[i] == s[i-1]:\n            k += 1\n    \n    if k == 0:\n        return \"0\\n\" + s\n    else:\n        s = s[k:]\n        return str(k) + \"\\n\" + s"
    },
    {
        "number": 4234,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    is_good = True\n    for i in range(n-1):\n        if s[i] == s[i+1]:\n            is_good = False\n            break\n    if is_good:\n        print(0)\n        print(s)\n    else:\n        count = 0\n        for i in range(n-1):\n            if s[i] == s[i+1]:\n                count += 1\n                s = s[:i] + s[i+1:]\n        print(count)\n        if not s:\n            print()\n        else:\n            print(s)"
    },
    {
        "number": 4234,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    \n    # Check if string is good\n    good = True\n    for i in range(1, n, 2):\n        if s[i] == s[i-1]:\n            good = False\n            break\n    \n    # Delete minimum number of characters\n    if good:\n        print(0)\n        print(s)\n    else:\n        k = 0\n        for i in range(0, n-1, 2):\n            if s[i] == s[i+1]:\n                s = s[:i] + s[i+2:]\n                k += 1\n        \n        print(k)\n        print(s)"
    },
    {
        "number": 4235,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\ndef"
    },
    {
        "number": 4235,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    graph = [[] for _ in range(n+1)]\n    for _ in range(m):\n        u, v = map(int, stdin.readline().split())\n        graph[u].append(v)\n        graph[v].append(u)\n    used = [False] * (n+1)\n    def dfs(start, current_path):\n        if len(current_path) >= 3:\n            return False\n        used[start] = True\n        for neighbor in graph[start]:\n            if not used[neighbor]:\n                if not dfs(neighbor, current_path + [start]):\n                    return False\n        used[start] = False\n        return True\n    for i in range(1, n+1):\n        if not used[i]:\n            if not dfs(i, [i]):\n                return \"NO\"\n    return \"YES\""
    },
    {
        "number": 4235,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    edges = []\n    for i in range(m):\n        u, v = map(int, stdin.split())\n        edges.append((u, v))\n\n    # check if it is impossible to direct edges\n    if any(len(set(bfs(n, e))) > 2 for e in edges):\n        return \"NO\"\n\n    # find suitable orientation of edges\n    ans = []\n    for e in edges:\n        if len(set(bfs(n, e))) == 2:\n            ans.append('0')\n        else:\n            ans.append('1')\n\n    return \"YES\\n\" + \"\".join(ans)\n\ndef"
    },
    {
        "number": 4235,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    edges = []\n    for i in range(m):\n        u, v = map(int, stdin.readline().split())\n        edges.append((u, v))\n\n    # Check if it is possible to direct edges\n    for i in range(m):\n        for j in range(i+1, m):\n            if edges[i][0] == edges[j][0] and edges[i][1] == edges[j][1]:\n                return \"NO\"\n            if edges[i][0] == edges[j][1] and edges[i][1] == edges[j][0]:\n                return \"NO\"\n\n    # Find suitable orientation of edges\n    for i in range(m):\n        for j in range(i+1, m):\n            if edges[i][0] == edges[j][0] and edges[i][1] == edges[j][1]:\n                return \"YES\" + \"0\" * (m-1)\n            if edges[i][0] == edges[j][1] and edges[i][1] == edges[j][0]:\n                return \"YES\" + \"1\" + \"0\" * (m-2)\n\n    return \"NO\"\n\nprint(solution(\"6 5\\n1 5\\n2 1\\n1 4\\n3 1\\n6 1\")) # YES 10100"
    },
    {
        "number": 4235,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Reading input\n    n, m = map(int, stdin.split())\n    edges = []\n    for _ in range(m):\n        u, v = map(int, stdin.split())\n        edges.append((u-1, v-1))\n    # Check for no-length-2 paths\n    g = [[] for _ in range(n)]\n    for u, v in edges:\n        g[u].append(v)\n        g[v].append(u)\n    for u in range(n):\n        visited = set([u])\n        stack = [(u, 0)]\n        while stack:\n            v, d = stack.pop()\n            if d == 0:\n                visited.add(v)\n            for w in g[v]:\n                if w == u:\n                    continue\n                if w in visited:\n                    return \"NO\"\n                stack.append((w, d+1))\n    # Find orientation\n    vis = [False] * n\n    for u, v in edges:\n        if not vis[u] and not vis[v]:\n            vis[u] = vis[v] = True\n            continue\n        if vis[u] and vis[v]:\n            return \"NO\"\n        vis[v] = True\n    # Output\n    if sum(vis)!= n:\n        return \"NO\"\n    ans = ''.join([str(int(vis[u]!= vis[v])) for u, v in edges])\n    return \"YES\\n\" + ans\n"
    },
    {
        "number": 4235,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().strip().split())\n    edges = [list(map(int, stdin.readline().strip().split())) for _ in range(m)]\n    g = [[] for _ in range(n+1)]\n    for u, v in edges:\n        g[u].append(v)\n        g[v].append(u)\n    ans = \"\"\n    def dfs(u, p, vis):\n        vis[u] = True\n        if u == p:\n            return True\n        for v in g[u]:\n            if not vis[v] and not dfs(v, u, vis):\n                return False\n        return True\n    for i in range(m):\n        if not ans:\n            vis = [False] * (n+1)\n            vis[edges[i][0]] = True\n            vis[edges[i][1]] = True\n            if not dfs(edges[i][0], edges[i][1], vis):\n                ans = \"NO\"\n                break\n            ans += str(not bool(i & 1))\n        else:\n            ans += str(not bool(i & 1))\n    return ans if ans else \"YES\""
    },
    {
        "number": 4235,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    edges = [list(map(int, stdin.split())) for _ in range(m)]\n    \n    # Create adjacency list\n    adj_list = [[] for _ in range(n+1)]\n    for u, v in edges:\n        adj_list[u].append(v)\n        adj_list[v].append(u)\n        \n    # Check if graph has any cycles of length 2\n    def dfs(u, parent, visited, current_length):\n        visited[u] = True\n        current_length[0] += 1\n        if current_length[0] == 2:\n            return True\n        for v in adj_list[u]:\n            if not visited[v]:\n                if dfs(v, u, visited, current_length):\n                    return True\n        current_length[0] -= 1\n        return False\n    \n    for i in range(1, n+1):\n        if not dfs(i, -1, [False]*(n+1), [0]):\n            print(\"NO\")\n            return \"\"\n    \n    # Find orientation of edges\n    def find_orientation(u, parent, visited, visited_twice):\n        visited[u] = True\n        visited_twice[u] = True\n        for v in adj_list[u]:\n            if not visited[v]:\n                if find_orientation(v, u, visited, visited_twice):\n                    return True\n            elif not visited_twice[v]:\n                return True\n        return False\n    \n    orientation = \"\"\n    for i in range(m):\n        u, v = edges[i]\n        visited = [False]*(n+1)\n        visited_twice = [False]*(n+1)\n        if not visited[u] and not visited[v]:\n            if find_orientation(u, -1, visited, visited_twice):\n                orientation += \"1\"\n            else:\n                orientation += \"0\"\n        else:\n            orientation += \"1\"\n    \n    print(\"YES\")\n    print(orientation)\n    return \"\"\n\ndef"
    },
    {
        "number": 4235,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    graph = [[] for _ in range(n + 1)]\n    for i in range(m):\n        u, v = map(int, stdin.split())\n        graph[u].append(v)\n        graph[v].append(u)\n\n    # check if it is impossible to direct edges of the given graph in such a way that the obtained directed graph does not contain paths of length at least two\n    for i in range(1, n + 1):\n        if not graph[i]:\n            continue\n        visited = [False] * (n + 1)\n        queue = [(i, 0)]\n        while queue:\n            u, dist = queue.pop(0)\n            visited[u] = True\n            if dist >= 2:\n                return \"NO\"\n            for v in graph[u]:\n                if not visited[v]:\n                    queue.append((v, dist + 1))\n\n    # directed graph does not contain paths of length two or greater\n    # try all possible orientations of edges\n    for i in range(1 << m):\n        # check if current orientation is suitable\n        suitable = True\n        for j in range(m):\n            if (i >> j) & 1 == 0 and graph[j + 1]:\n                suitable = False\n                break\n        if suitable:\n            return \"YES\\n\" + bin(i)[2:].zfill(m)\n    return \"NO\"\n\nprint(solution(\"6 5\\n1 5\\n2 1\\n1 4\\n3 1\\n6 1\")) # YES\\n10100"
    },
    {
        "number": 4235,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    edges = [tuple(map(int, stdin.readline().split())) for _ in range(m)]\n\n    def find_parent(node):\n        if parent[node] == node:\n            return node\n        else:\n            parent[node] = find_parent(parent[node])\n            return parent[node]\n\n    def union_set(node1, node2):\n        parent[find_parent(node1)] = find_parent(node2)\n\n    parent = [i for i in range(n+1)]\n    for u, v in edges:\n        if find_parent(u) == find_parent(v):\n            return \"NO\"\n        union_set(u, v)\n\n    answer = \"\"\n    for u, v in edges:\n        if find_parent(u) == find_parent(v):\n            answer += \"1\"\n        else:\n            answer += \"0\"\n\n    return \"YES\\n\" + answer\n"
    },
    {
        "number": 4235,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().strip().split())\n    adj = [[] for _ in range(n+1)]\n    visited = [0] * (n+1)\n    for i in range(m):\n        u, v = map(int, stdin.readline().strip().split())\n        adj[u].append(v)\n        adj[v].append(u)\n    def dfs(u, parent):\n        visited[u] = 1\n        for v in adj[u]:\n            if v == parent:\n                continue\n            if visited[v]:\n                return True\n            if dfs(v, u):\n                return True\n        return False\n    for u in range(1, n+1):\n        if not visited[u]:\n            if dfs(u, -1):\n                return \"NO\"\n    res = \"\"\n    for i in range(m):\n        u, v = map(int, stdin.readline().strip().split())\n        if u > v:\n            u, v = v, u\n        res += \"1\" if adj[u][adj[u].index(v)+1] == v else \"0\"\n    return \"YES\\n\" + res"
    },
    {
        "number": 4236,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().strip().split())\n    segments = []\n    for i in range(n):\n        l, r = map(int, stdin.readline().strip().split())\n        segments.append((l, r))\n\n    points = set(range(1, m+1))\n    for l, r in segments:\n        points -= set(range(l, r+1))\n\n    k = len(points)\n    if k == 0:\n        print(0)\n    else:\n        print(k)\n        print(*points)\n    return \"\""
    },
    {
        "number": 4236,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    segments = []\n    for _ in range(n):\n        l, r = list(map(int, stdin.split()))\n        segments.append((l, r))\n\n    points = set()\n    for i in range(1, m+1):\n        points.add(i)\n\n    for l, r in segments:\n        points -= set(range(l, r+1))\n\n    k = len(points)\n    if k == 0:\n        return \"0\\n\"\n    else:\n        points = sorted(list(points))\n        return f\"{k}\\n\" + \" \".join(map(str, points)) + \"\\n\"\n"
    },
    {
        "number": 4236,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    segments = []\n    for i in range(n):\n        l, r = map(int, stdin.split())\n        segments.append((l, r))\n    points = set(range(1, m+1))\n    for l, r in segments:\n        points -= set(range(l, r+1))\n    if not points:\n        return \"0\"\n    else:\n        return f\"{len(points)}\\n\" + \"\\n\".join(map(str, points))"
    },
    {
        "number": 4236,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().strip().split())\n    segments = []\n    for i in range(n):\n        l, r = map(int, stdin.readline().strip().split())\n        segments.append((l, r))\n    points = set(range(1, m+1))\n    for l, r in segments:\n        points.difference_update(range(l, r+1))\n    k = len(points)\n    if k == 0:\n        return \"0\\n\"\n    else:\n        return f\"{k}\\n{' '.join(map(str, points))}\\n\"\n\nstdin = \"\"\"\n3 5\n2 2\n1 2\n5 5\n\"\"\"\n\nprint(solution(stdin))"
    },
    {
        "number": 4236,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    segments = []\n    for i in range(n):\n        l, r = map(int, stdin.readline().split())\n        segments.append((l, r))\n\n    points = set(range(1, m+1))\n    for segment in segments:\n        points.difference_update(set(range(segment[0], segment[1]+1)))\n\n    if len(points) == 0:\n        return \"0\"\n    else:\n        return str(len(points)) + \"\\n\" + \"\\n\".join(map(str, points))\n"
    },
    {
        "number": 4236,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    segments = []\n    for i in range(n):\n        l, r = map(int, stdin.split())\n        segments.append((l, r))\n    points = set(range(1, m+1))\n    for l, r in segments:\n        points -= set(range(l, r+1))\n    return str(len(points)) + \"\\n\" + \" \".join(map(str, points)) if points else \"0\""
    },
    {
        "number": 4236,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    segments = []\n    for i in range(n):\n        l, r = map(int, stdin.split())\n        segments.append((l, r))\n    points = set(range(1, m+1))\n    for l, r in segments:\n        points -= set(range(l, r+1))\n    return str(len(points)) + '\\n' + '\\n'.join(map(str, sorted(points))) if points else '0\\n'\n\ndef"
    },
    {
        "number": 4236,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    segments = []\n    for _ in range(n):\n        l, r = map(int, stdin.split())\n        segments.append((l, r))\n    \n    points = set(range(1, m+1))\n    for l, r in segments:\n        points -= set(range(l, r+1))\n    \n    k = len(points)\n    if k == 0:\n        return \"0\"\n    else:\n        return f\"{k}\\n{' '.join(map(str, points))}\""
    },
    {
        "number": 4236,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    segments = []\n    for i in range(n):\n        l, r = map(int, stdin.split())\n        segments.append((l, r))\n    points = set(range(1, m+1))\n    for l, r in segments:\n        points -= set(range(l, r+1))\n    k = len(points)\n    if k == 0:\n        return \"0\"\n    return f\"{k}\\n{' '.join(map(str, points))}\"\n\n\ndef"
    },
    {
        "number": 4236,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    segments = []\n    for _ in range(n):\n        l, r = map(int, stdin.split())\n        segments.append((l, r))\n    \n    points = set(range(1, m+1))\n    for l, r in segments:\n        points -= set(range(l, r+1))\n    \n    k = len(points)\n    if k == 0:\n        return '0\\n'\n    else:\n        return f'{k}\\n{\" \".join(map(str, points))}\\n'\n    "
    },
    {
        "number": 4237,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n\n    count = 0\n\n    for num in range(A, B+1):\n        if num % C == 0 and num % D == 0:\n            continue\n        else:\n            count += 1\n\n    return str(count)"
    },
    {
        "number": 4237,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    count = 0\n    for num in range(A, B+1):\n        if num%C!= 0 and num%D!= 0:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4237,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    count = 0\n    for i in range(A, B+1):\n        if i % C!= 0 and i % D!= 0:\n            count += 1\n    return str(count)\n\nwith open('input.txt', 'r') as file:\n    stdin = file.read()\n\nstdout = solution(stdin)\n\nwith open('output.txt', 'w') as file:\n    file.write(stdout)"
    },
    {
        "number": 4237,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    count = 0\n    for i in range(a, b+1):\n        if i % c == 0 and i % d == 0:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4237,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    count = 0\n    for i in range(a, b+1):\n        if i % c!= 0 and i % d!= 0:\n            count += 1\n    return count"
    },
    {
        "number": 4237,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    A, B, C, D = map(int, stdin.split())\n\n    # Initialize counters\n    count = 0\n    for num in range(A, B+1):\n        if num % C!= 0 and num % D!= 0:\n            count += 1\n\n    # Print result\n    print(count)\n\n    # Return result as string\n    return str(count)"
    },
    {
        "number": 4237,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    count = 0\n    for i in range(A, B+1):\n        if i % C!= 0 and i % D!= 0:\n            count += 1\n    return count\n\nstdin = \"4 9 2 3\"\nprint(solution(stdin)) # Output: 2"
    },
    {
        "number": 4237,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = list(map(int, stdin.strip().split()))\n    \n    count = 0\n    \n    for i in range(A, B+1):\n        if i % C == 0 and i % D == 0:\n            continue\n        else:\n            count += 1\n            \n    return str(count)"
    },
    {
        "number": 4237,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n\n    count = 0\n    for num in range(A, B+1):\n        if num % C!= 0 and num % D!= 0:\n            count += 1\n\n    return str(count)\n"
    },
    {
        "number": 4237,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    count = 0\n    for i in range(A, B+1):\n        if i % C == 0 and i % D == 0:\n            continue\n        else:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4238,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    digits_sum = sum(int(digit) for digit in str(n))\n    if digits_sum % 9 == 0:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4238,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if sum(int(digit) for digit in str(n)) % 9 == 0:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4238,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if sum(int(digit) for digit in str(n)) % 9 == 0:\n        return 'Yes'\n    else:\n        return 'No'"
    },
    {
        "number": 4238,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    num_sum = sum(int(digit) for digit in str(N))\n    if num_sum % 9 == 0:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4238,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    digits_sum = sum(int(digit) for digit in str(N))\n    if digits_sum % 9 == 0:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4238,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if sum(int(digit) for digit in str(N)) % 9 == 0:\n        return \"Yes\"\n    else:\n        return \"No\"\n\nprint(solution(input()))"
    },
    {
        "number": 4238,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    digits_sum = sum(int(digit) for digit in str(n))\n    if digits_sum % 9 == 0:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4238,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # read input from stdin\n    n = int(stdin.strip())\n\n    # convert integer to string and calculate the sum of its digits\n    n_str = str(n)\n    n_sum = sum(int(d) for d in n_str)\n\n    # check if the sum is a multiple of 9 and print the result\n    if n_sum % 9 == 0:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4238,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = sum(int(d) for d in str(n))\n    return 'Yes' if s % 9 == 0 else 'No'"
    },
    {
        "number": 4238,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if sum(int(digit) for digit in str(n)) % 9 == 0:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4239,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    i = 1\n    while True:\n        if i * i * i <= N:\n            N -= i * i * i\n            i += 1\n        else:\n            break\n    return str(i - 1)"
    },
    {
        "number": 4239,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n <= 0:\n        return '0'\n    if n <= 6:\n        return str(n)\n    if n == 7:\n        return '2'\n    if n <= 18:\n        return str(n-6)\n    if n == 19:\n        return '2'\n    if n <= 30:\n        return str(n-12)\n    if n == 31:\n        return '2'\n    if n <= 42:\n        return str(n-18)\n    if n == 43:\n        return '2'\n    if n <= 54:\n        return str(n-24)\n    if n == 55:\n        return '2'\n    if n <= 66:\n        return str(n-30)\n    if n == 67:\n        return '2'\n    if n <= 78:\n        return str(n-36)\n    if n == 79:\n        return '2'\n    if n <= 90:\n        return str(n-42)\n    if n == 91:\n        return '2'\n    if n <= 102:\n        return str(n-48)\n    if n == 103:\n        return '2'\n    if n <= 114:\n        return str(n-54)\n    if n == 115:\n        return '2'\n    if n <= 126:\n        return str(n-60)\n    return 'More than 126 operations are required'\n\nprint(solution('127'))"
    },
    {
        "number": 4239,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    count = 0\n    for i in range(1, N+1):\n        count += N // i\n        N %= i\n    return str(count)"
    },
    {
        "number": 4239,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Read input from stdin\n    n = int(stdin.strip())\n    \n    # Initialize variables\n    count = 0\n    denomination = 1\n    \n    # Loop through denominations and increment count as long as we can\n    while n >= denomination:\n        n -= denomination\n        count += 1\n        denomination *= 10\n        \n    return str(count)"
    },
    {
        "number": 4239,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    count = 0\n    while n > 0:\n        if n >= 1000000000:\n            n -= 1000000000\n            count += 1\n        elif n >= 100000000:\n            n -= 100000000\n            count += 1\n        elif n >= 10000000:\n            n -= 10000000\n            count += 1\n        elif n >= 1000000:\n            n -= 1000000\n            count += 1\n        elif n >= 100000:\n            n -= 100000\n            count += 1\n        elif n >= 10000:\n            n -= 10000\n            count += 1\n        elif n >= 1000:\n            n -= 1000\n            count += 1\n        elif n >= 100:\n            n -= 100\n            count += 1\n        elif n >= 10:\n            n -= 10\n            count += 1\n        else:\n            count += 1\n            break\n    return str(count)\n\nstdin = \"127\"\nprint(solution(stdin)) # Output: 4"
    },
    {
        "number": 4239,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    operations = 0\n    for i in range(1, 10):\n        while n >= i**3:\n            n -= i**3\n            operations += 1\n    return str(operations)\n\nprint(solution(\"127\")) # Output: 4"
    },
    {
        "number": 4239,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N = int(stdin)\n    \n    # Initialize variables\n    operations = 0\n    remaining = N\n    \n    # Loop through all possible withdrawal amounts\n    for amount in range(1, 10):\n        # Loop through all possible combinations of withdrawal amounts\n        for i in range(1, N+1):\n            if remaining - amount*i >= 0:\n                remaining -= amount*i\n                operations += i\n            else:\n                break\n    \n    # Print the number of operations required\n    print(operations)\n    \n    # Return a string representation of the output\n    return str(operations)"
    },
    {
        "number": 4239,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    \n    # We can withdraw only 1 yen, 6^x yen, 9^x yen\n    # To withdraw N yen in total, we can use the following inequality:\n    # 6^x yen + 9^x yen <= N\n    # We can solve this equation using binary search\n    # First, we find x such that 6^x <= N\n    x = 1\n    while 6**x > N:\n        x += 1\n    \n    # Now we can withdraw N yen using the following formula:\n    # N = 1 yen + 6^x yen + 9^x yen\n    # Since N is odd, we can withdraw N//2 yen from each of the two accounts\n    # and then withdraw the remaining N//2 yen from the first account\n    # We can then subtract the amount of withdrawn money from the remaining amount N\n    N = N - (1 + 6**x + 9**x) // 2\n    \n    return str(N)"
    },
    {
        "number": 4239,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    while n > 0:\n        if n >= 9:\n            count += n // 9\n            n = n % 9\n        elif n >= 36:\n            count += n // 36\n            n = n % 36\n        elif n >= 81:\n            count += n // 81\n            n = n % 81\n        else:\n            count += 1\n            n = 0\n    return str(count)"
    },
    {
        "number": 4239,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    if N == 0:\n        return 0\n    count = 0\n    for i in range(1, 10):\n        while N >= i:\n            N -= i\n            count += 1\n    return count"
    },
    {
        "number": 4240,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s, t = map(str, stdin.strip().split())\n    n = len(s)\n    if s == t:\n        return \"Yes\"\n    for i in range(n):\n        if s[i:] + s[:i] == t:\n            return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4240,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.strip().split('\\n')\n\n    if s == t:\n        return 'Yes'\n\n    s_rotated = s[len(s)-1] + s[:len(s)-1]\n    if s_rotated == t:\n        return 'Yes'\n\n    return 'No'"
    },
    {
        "number": 4240,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.strip().split()\n    if s == t:\n        return \"Yes\"\n    s = s + s\n    if s.find(t)!= -1:\n        return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4240,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.split()[0]\n    T = stdin.split()[1]\n    \n    # if the strings are equal, return \"Yes\"\n    if S == T:\n        return \"Yes\"\n    \n    # if the strings have different lengths, return \"No\"\n    if len(S)!= len(T):\n        return \"No\"\n    \n    # perform rotation operations until the strings are equal\n    i = 1\n    while S!= T:\n        # rotate the string S to the right\n        S_right = S[len(S)-i:] + S[:len(S)-i]\n        # rotate the string T to the right\n        T_right = T[len(T)-i:] + T[:len(T)-i]\n        # check if the rotated strings are equal\n        if S_right == T_right:\n            return \"No\"\n        i += 1\n    \n    # if the strings are equal after rotation, return \"Yes\"\n    return \"Yes\""
    },
    {
        "number": 4240,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Get input from stdin\n    s = stdin.strip().split()[0]\n    t = stdin.strip().split()[1]\n\n    # Check if s equals t\n    if s == t:\n        return \"Yes\"\n\n    # Check if s equals t after rotation\n    # Iterate over all possible rotations\n    for i in range(len(s)):\n        if s[i:] + s[:i] == t:\n            return \"Yes\"\n\n    return \"No\""
    },
    {
        "number": 4240,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip().split()[0]\n    T = stdin.strip().split()[1]\n    if S == T:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4240,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.strip().split()\n    if s == t:\n        return 'Yes'\n    if s in t + t:\n        return 'Yes'\n    return 'No'"
    },
    {
        "number": 4240,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.strip().split()\n    s_len = len(s)\n    s_rotated = s[s_len:] + s[:s_len]\n    if s == s_rotated:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4240,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split('\\n')\n    if s[0] == s[1]:\n        return 'Yes'\n    else:\n        return 'No'"
    },
    {
        "number": 4240,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.split()[0]\n    T = stdin.split()[1]\n\n    if S == T:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4241,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split()\n    n = len(S)\n    m = len(T)\n    count = 0\n    for i in range(n - m + 1):\n        if S[i:i+m] == T:\n            count += 1\n    return count"
    },
    {
        "number": 4241,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()[0]\n    t = stdin.split()[1]\n    n = len(s)\n    m = len(t)\n    dp = [[False for _ in range(n+1)] for _ in range(m+1)]\n    for i in range(n+1):\n        dp[0][i] = False\n    for i in range(m+1):\n        dp[i][0] = True\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            if s[j-1] == t[i-1]:\n                dp[i][j] = dp[i-1][j-1]\n            else:\n                dp[i][j] = dp[i-1][j] or dp[i][j-1]\n    return dp[m][n]"
    },
    {
        "number": 4241,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.strip().split()\n    count = 0\n    for i in range(len(s)):\n        if s[i:].startswith(t):\n            count += 1\n            s = s[:i] + t + s[i+len(t):]\n    return count"
    },
    {
        "number": 4241,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split()\n    s_set = set(S)\n    t_set = set(T)\n    diff = s_set - t_set\n    return str(len(diff))"
    },
    {
        "number": 4241,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    S, T = stdin.strip().split()\n    n = len(S)\n    m = len(T)\n\n    # create a table to store the indices of T in S\n    # initialize the first row and column with -1\n    table = [[-1 for _ in range(n+1)] for _ in range(m+1)]\n    for i in range(n+1):\n        table[0][i] = 0\n    for j in range(m+1):\n        table[j][0] = 0\n\n    # fill the table using dynamic programming\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            if S[j-1] == T[i-1]:\n                table[i][j] = table[i-1][j-1]\n            else:\n                table[i][j] = min(table[i-1][j], table[i][j-1], table[i-1][j-1]) + 1\n\n    # return the minimum number of changes needed\n    return table[m][n]"
    },
    {
        "number": 4241,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split()\n    n = len(S)\n    m = len(T)\n    if m > n:\n        return str(0)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for i in range(m + 1):\n        dp[i][0] = m - i\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if S[i - 1] == T[j - 1]:\n                dp[j][i] = dp[j - 1][i - 1]\n            else:\n                dp[j][i] = min(dp[j - 1][i - 1] + 1, dp[j][i - 1] + 1, dp[j - 1][i] + 1)\n    return str(dp[m][n])\n\nprint(solution(input())) # To run the script, replace input() with your input string"
    },
    {
        "number": 4241,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s, t = map(str, stdin.strip().split())\n    if t in s:\n        return '0'\n    n, m = len(s), len(t)\n    dp = [[False] * (n+1) for _ in range(m+1)]\n    dp[0][0] = True\n    for i in range(1, m+1):\n        dp[i][0] = True\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            if s[j-1] == t[i-1]:\n                dp[i][j] = dp[i-1][j-1]\n            else:\n                dp[i][j] = dp[i][j-1] or dp[i-1][j]\n    return str(dp[m][n])"
    },
    {
        "number": 4241,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.splitlines()\n    n, m = len(s), len(t)\n    # create a boolean array to store whether a character is present in s or not\n    present = [False] * 26\n    for i in s:\n        present[ord(i) - 97] = True\n    # create a boolean array to store whether a character is present in t or not\n    present_t = [False] * 26\n    for i in t:\n        present_t[ord(i) - 97] = True\n    # create a boolean array to store whether a character needs to be changed or not\n    change = [False] * 26\n    # traverse through s and t simultaneously and check for matches\n    count = 0\n    for i in range(n):\n        if s[i] == t[i]:\n            continue\n        # if the characters are not equal, check if they need to be changed or not\n        if s[i] == t[i]:\n            change[ord(s[i]) - 97] = True\n            continue\n        if present[ord(s[i]) - 97] and present_t[ord(t[i]) - 97]:\n            continue\n        if change[ord(s[i]) - 97] or change[ord(t[i]) - 97]:\n            continue\n        # if both characters need to be changed, increment the count\n        count += 1\n    # return the minimum number of changes required\n    return count\n"
    },
    {
        "number": 4241,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.strip().split()\n    m = len(s)\n    n = len(t)\n    count = 0\n    for i in range(n):\n        if s[i]!= t[i]:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4241,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    n = len(s)\n    count = 0\n    for i in range(n):\n        if s[i:i+len(t)] == t:\n            return str(count)\n        if s[i]!= t[0]:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4242,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.split())\n    count = 0\n    result = 0\n    for num in range(1, B+1):\n        if A % num == 0 and B % num == 0:\n            count += 1\n            if count == K:\n                result = num\n    return str(result)\n\nprint(solution(input()))"
    },
    {
        "number": 4242,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.strip().split())\n    i = max(A, B)\n    count = 0\n    while i > 1:\n        if A % i == 0 and B % i == 0:\n            count += 1\n            if count == K:\n                return str(i)\n        i -= 1\n    return \"0\""
    },
    {
        "number": 4242,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k = map(int, stdin.split())\n    i = 1\n    count = 0\n    while count < k:\n        if a % i == 0 and b % i == 0:\n            count += 1\n        i += 1\n    return str(i - 1)"
    },
    {
        "number": 4242,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.split())\n    factors = []\n    for i in range(2, max(A, B) + 1):\n        if A % i == 0 and B % i == 0:\n            factors.append(i)\n    factors.sort(reverse=True)\n    return str(factors[K - 1])\n\nprint(solution(\"8 12 2\")) # Output: 2"
    },
    {
        "number": 4242,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k = map(int, stdin.split())\n    result = 1\n    count = 0\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            count += 1\n            if count == k:\n                result = i\n    return str(result)"
    },
    {
        "number": 4242,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    a, b, k = map(int, stdin.split())\n\n    # calculate all possible divisors of A and B\n    divisors = set()\n    for i in range(1, int(b**0.5)+1):\n        if b % i == 0:\n            divisors.add(i)\n            if i!= b // i:\n                divisors.add(b//i)\n\n    # find K-th largest positive integer that divides both A and B\n    count = 0\n    largest = 0\n    for divisor in sorted(divisors, reverse=True):\n        if a % divisor == 0:\n            count += 1\n            largest = divisor\n            if count == k:\n                break\n\n    return str(largest)"
    },
    {
        "number": 4242,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.split())\n    # find the maximum number that divides both A and B\n    max_divisor = max(A, B)\n    count = 0\n    for i in range(max_divisor, 0, -1):\n        if A % i == 0 and B % i == 0:\n            count += 1\n            if count == K:\n                return str(i)\n    return \"None\"\n"
    },
    {
        "number": 4242,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.strip().split())\n    count = 0\n    max_divisor = 0\n    for i in range(1, min(A, B) + 1):\n        if A % i == 0 and B % i == 0:\n            count += 1\n            if count == K:\n                return str(i)\n            if i > max_divisor:\n                max_divisor = i\n    return str(max_divisor)"
    },
    {
        "number": 4242,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k = map(int, stdin.split())\n    result = 0\n    count = 0\n    for i in range(1, a*b+1):\n        if a % i == 0 and b % i == 0:\n            count += 1\n            if count == k:\n                result = i\n    return str(result)"
    },
    {
        "number": 4242,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.split())\n    factors_A = set()\n    factors_B = set()\n\n    # Find all factors of A and B\n    for i in range(1, A+1):\n        if A % i == 0:\n            factors_A.add(i)\n    for i in range(1, B+1):\n        if B % i == 0:\n            factors_B.add(i)\n\n    # Find the K-th largest positive integer that divides both A and B\n    count = 0\n    for i in sorted(list(factors_A.intersection(factors_B))):\n        if i <= 1:\n            continue\n        count += 1\n        if count == K:\n            return str(i)\n    return \"Error: K is larger than the number of factors common to A and B.\""
    },
    {
        "number": 4243,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    coins = [1, 5, 10, 50, 100, 500]\n    max_happiness = 0\n    for coin in coins:\n        if coin <= X:\n            num_coins = X // coin\n            max_happiness += num_coins * coin\n            X -= num_coins * coin\n    return max_happiness"
    },
    {
        "number": 4243,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    max_points = 0\n    for i in range(1, x//500 + 1):\n        max_points += i * 500\n    max_points += (x % 500) // 100 * 500\n    max_points += (x % 100) // 50 * 100\n    max_points += (x % 50) // 10 * 50\n    max_points += (x % 10) // 5 * 10\n    max_points += x % 5\n    print(max_points)\n    return str(max_points)"
    },
    {
        "number": 4243,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin.strip())\n    coins = [1, 5, 10, 50, 100, 500]\n    max_points = 0\n    for i in range(len(coins)):\n        if X >= coins[i]:\n            max_points += X // coins[i] * (coins[i] // 5 + 5)\n            X %= coins[i]\n    return str(max_points)"
    },
    {
        "number": 4243,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    x = int(stdin)\n    # calculate max number of happiness points\n    max_happiness = (x // 500) * 1000 + ((x % 500) // 100) * 500 + ((x % 100) // 50) * 100 + ((x % 50) // 10) * 50 + ((x % 10) // 5) * 10 + (x % 5) * 5\n    # print output\n    print(max_happiness)\n    # return output for testing\n    return str(max_happiness)"
    },
    {
        "number": 4243,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    max_points = 0\n    for i in range(1, 7):\n        for j in range(X // i + 1):\n            points = (i * 1000) + (5 * (i // 5)) * j\n            if points > max_points:\n                max_points = points\n    return str(max_points)"
    },
    {
        "number": 4243,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin.strip())\n    money = [500, 100, 50, 10, 5, 1]\n    count = [0] * len(money)\n    max_count = 0\n    for i in range(len(money)):\n        count[i] = X // money[i]\n        max_count += count[i]\n        X %= money[i]\n    return max_count"
    },
    {
        "number": 4243,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    coins = [500, 100, 50, 10, 5, 1]\n    count = [0] * len(coins)\n    for coin in coins:\n        count[coins.index(coin)] = X // coin\n        X %= coin\n    return sum(c * (c+1) // 2 for c in count) * 1000 + sum(count[i] * coins[i] for i in range(len(coins)) if coins[i]!= 1) * 5\n\nprint(solution(input()))"
    },
    {
        "number": 4243,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Get input from stdin\n    X = int(stdin)\n\n    # Calculate the maximum number of happiness points that can be earned\n    max_happiness_points = 0\n    for coin_type in [500, 100, 50, 10, 5, 1]:\n        num_coins = X // coin_type\n        max_happiness_points += num_coins * coin_type\n        X %= coin_type\n\n    return str(max_happiness_points)"
    },
    {
        "number": 4243,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    coins = [500, 100, 50, 10, 5, 1]\n    happiness_points = 0\n    for coin in coins:\n        while x >= coin:\n            happiness_points += coin // 500 * 1000 + (coin // 500) * 5\n            x -= coin\n    print(happiness_points)\n    return str(happiness_points)"
    },
    {
        "number": 4243,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    X = int(stdin.strip())\n\n    # calculate maximum number of happiness points\n    num_500_yen = X // 500\n    num_100_yen = (X - num_500_yen * 500) // 100\n    num_50_yen = (X - num_500_yen * 500 - num_100_yen * 100) // 50\n    num_10_yen = (X - num_500_yen * 500 - num_100_yen * 100 - num_50_yen * 50) // 10\n    num_5_yen = (X - num_500_yen * 500 - num_100_yen * 100 - num_50_yen * 50 - num_10_yen * 10) // 5\n    num_1_yen = X - num_500_yen * 500 - num_100_yen * 100 - num_50_yen * 50 - num_10_yen * 10 - num_5_yen * 5\n\n    max_happiness = num_500_yen * 1000 + num_100_yen * 500 + num_50_yen * 100 + num_10_yen * 50 + num_5_yen * 10 + num_1_yen * 5\n\n    # print output\n    return str(max_happiness)"
    },
    {
        "number": 4244,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split(\"\\n\")\n    n = int(lines[0])\n    coordinates = list(map(int, lines[1].split()))\n\n    # sort the coordinates in ascending order\n    coordinates.sort()\n\n    # initialize the variables\n    min_total_stamina = float('inf')\n    current_total_stamina = 0\n\n    # calculate the total stamina for each possible meeting point\n    for i in range(len(coordinates)):\n        current_total_stamina += (coordinates[i] - i)**2\n        min_total_stamina = min(min_total_stamina, current_total_stamina)\n\n    return str(min_total_stamina)"
    },
    {
        "number": 4244,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N = int(stdin.readline().strip())\n    X = list(map(int, stdin.readline().strip().split()))\n\n    # Calculate the minimum stamina required\n    min_stamina = float('inf')\n    for x in X:\n        stamina = sum((x - p)**2 for p in X)\n        min_stamina = min(min_stamina, stamina)\n\n    # Print the minimum stamina\n    return str(min_stamina)"
    },
    {
        "number": 4244,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n = int(lines[0])\n    x = list(map(int, lines[1].split()))\n    min_stamina = float('inf')\n    for p in range(max(x)):\n        stamina = sum((xi - p) ** 2 for xi in x)\n        min_stamina = min(min_stamina, stamina)\n    return str(min_stamina)"
    },
    {
        "number": 4244,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Get input from stdin\n    n = int(stdin.readline().strip())\n    x = list(map(int, stdin.readline().strip().split()))\n\n    # Initialize variables\n    min_sum = float('inf')\n    for p in range(min(x), max(x) + 1):\n        stamina_sum = 0\n        for i in range(n):\n            stamina_sum += (x[i] - p) ** 2\n        if stamina_sum < min_sum:\n            min_sum = stamina_sum\n\n    # Return result\n    return str(min_sum)\n"
    },
    {
        "number": 4244,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    N = int(stdin.readline().strip())\n    X = list(map(int, stdin.readline().strip().split()))\n\n    # sort X in ascending order\n    X.sort()\n\n    # initialize variables\n    p = X[0] + 1\n    max_points = 0\n    min_points = float('inf')\n\n    # loop through each possible meeting point\n    for i in range(X[0], X[-1] + 1):\n        # calculate points for each person\n        points = sum((x - i) ** 2 for x in X)\n\n        # update min_points and max_points\n        min_points = min(min_points, points)\n        max_points = max(max_points, points)\n\n        # update p\n        if points > max_points:\n            p = i\n\n    return str(min_points)"
    },
    {
        "number": 4244,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    x = list(map(int, stdin.readline().strip().split()))\n    stamina = [0] * n\n    for i in range(n):\n        for j in range(i+1, n):\n            stamina[i] += (x[j] - x[i])**2\n    return str(min(stamina))"
    },
    {
        "number": 4244,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    X = list(map(int, stdin.split()[1:]))\n    # print(N, X)\n    min_cost = float('inf')\n    for i in range(N):\n        for j in range(i+1, N):\n            cost = sum([(x-X[i])**2 for x in X[i+1:j]+X[j+1:]])\n            # print(i, j, X[i], X[j], cost)\n            if cost < min_cost:\n                min_cost = cost\n    return str(min_cost)\n\ndef"
    },
    {
        "number": 4244,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    N = int(stdin.readline().strip())\n    X = list(map(int, stdin.readline().strip().split()))\n\n    # find minimum\n    min_stamina = float('inf')\n    for x in X:\n        dist = [abs(x - xi) for xi in X]\n        min_stamina = min(min_stamina, sum(d*d for d in dist))\n\n    return str(min_stamina)"
    },
    {
        "number": 4244,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    N = int(stdin.readline())\n    X = list(map(int, stdin.readline().split()))\n    \n    # find minimum total stamina\n    min_stamina = float('inf')\n    for i in range(N):\n        for j in range(N):\n            if i!= j:\n                stamina = sum((X[i] - X[j]) ** 2 for j in range(N))\n                min_stamina = min(min_stamina, stamina)\n    \n    return str(min_stamina)"
    },
    {
        "number": 4244,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    X = list(map(int, stdin.readline().strip().split()))\n    min_stamina = float('inf')\n    for i in range(N):\n        for j in range(i + 1, N):\n            diff = abs(X[i] - X[j])\n            stamina = (diff ** 2) * (X[i] + X[j]) // 2\n            min_stamina = min(min_stamina, stamina)\n    return str(min_stamina)"
    },
    {
        "number": 4245,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    power_strips = B // A\n    empty_sockets = B % A\n    return str(power_strips) + \" power strips, each with \" + str(A) + \" sockets, extend the socket into \" + str(empty_sockets) + \" empty sockets.\"\n\nprint(solution(input())) # Example usage"
    },
    {
        "number": 4245,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    power_strips = 0\n    while A <= B:\n        A *= 2\n        power_strips += 1\n    return power_strips"
    },
    {
        "number": 4245,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n\n    # check if A is greater than B or if B is 0\n    if A <= B or B == 0:\n        return 0\n\n    # calculate the minimum number of strips required\n    num_strips = 1\n    while (num_strips * A) <= B:\n        num_strips += 1\n\n    return num_strips"
    },
    {
        "number": 4245,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if B == 0:\n        return \"0\"\n    if B == 1:\n        return \"1\"\n    if B >= A:\n        return str(B // A)\n    else:\n        return str(B)\n\nprint(solution(input()))"
    },
    {
        "number": 4245,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    strips = 0\n    while B > 0:\n        if B >= A:\n            strips += 1\n            B -= A\n        else:\n            strips += 1\n            B = 0\n    return str(strips)"
    },
    {
        "number": 4245,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    num_strips = B // A\n    empty_sockets = B % A\n    if empty_sockets > 0:\n        num_strips += 1\n    return str(num_strips)"
    },
    {
        "number": 4245,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    min_strips = 0\n    while B > 0:\n        if B >= A:\n            B -= A\n            min_strips += 1\n        else:\n            min_strips += B\n            B = 0\n    return str(min_strips)"
    },
    {
        "number": 4245,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B = list(map(int, stdin.split()))\n    power_strips = A // 2 + 1\n    if A % 2 == 1:\n        if B == 0:\n            return \"0\"\n        elif B == 1:\n            return \"1\"\n        else:\n            power_strips += B - 1\n    else:\n        power_strips += B\n    return str(power_strips)"
    },
    {
        "number": 4245,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a == b:\n        return str(1)\n    if a < b:\n        a, b = b, a\n    if a % b == 0:\n        return str(a // b)\n    strips = a // b\n    extra = a % b\n    for i in range(2, extra + 1):\n        if extra % i == 0:\n            strips += extra // i\n            extra = 0\n            break\n    if extra > 0:\n        strips += 1\n    return str(strips)"
    },
    {
        "number": 4245,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A == 1:\n        return str(B)\n    elif B == 1:\n        return str(A)\n    else:\n        return str(min(A, B))"
    },
    {
        "number": 4246,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split()\n    count = 0\n    for i in range(3):\n        if S[i] == T[i]:\n            count += 1\n    return count"
    },
    {
        "number": 4246,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Split input strings\n    forecast, actual = stdin.split()\n\n    # Initialize counters\n    count = 0\n    for i in range(3):\n        # Check if forecast was correct\n        if forecast[i] == actual[i]:\n            count += 1\n    \n    # Return number of correct days\n    return str(count)"
    },
    {
        "number": 4246,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    S, T = map(str, stdin.split())\n    count = 0\n    for i in range(len(S)):\n        if S[i] == T[i]:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4246,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.strip().split()\n    count = 0\n    for i in range(3):\n        if S[i] == T[i]:\n            count += 1\n    return str(count)\n\nprint(solution(input()))"
    },
    {
        "number": 4246,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.strip().split()\n    count = 0\n    for i in range(3):\n        if S[i] == T[i]:\n            count += 1\n    return str(count)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4246,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    S, T = map(str, stdin.strip().split())\n    count = 0\n    for i in range(3):\n        if S[i] == T[i]:\n            count += 1\n    return count"
    },
    {
        "number": 4246,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # split input into two strings\n    S, T = stdin.split()\n\n    # initialize counter for correct forecasts\n    count = 0\n\n    # loop through each day\n    for i in range(len(S)):\n        # check if forecast and actual weather match\n        if S[i] == T[i]:\n            count += 1\n\n    # return the number of correct forecasts\n    return str(count)\n"
    },
    {
        "number": 4246,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.strip().split('\\n')\n    correct_days = 0\n    for i in range(3):\n        if S[i] == T[i]:\n            correct_days += 1\n    return str(correct_days)"
    },
    {
        "number": 4246,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split('\\n')\n    count = 0\n    for i in range(3):\n        if S[i] == T[i]:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4246,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.strip().split()\n    count = 0\n    for i in range(3):\n        if S[i] == T[i]:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4247,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    n = int(stdin.readline().strip())\n    p = list(map(int, stdin.readline().strip().split()))\n\n    count = 0\n    for i in range(1, n - 1):\n        if p[i] < p[i - 1] and p[i] < p[i + 1]:\n            count += 1\n\n    return str(count)"
    },
    {
        "number": 4247,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    p = list(map(int, stdin.split('\\n')[1].split()))\n    \n    count = 0\n    for i in range(1, n - 1):\n        if p[i] < p[i-1] and p[i] < p[i+1]:\n            count += 1\n    \n    return str(count)"
    },
    {
        "number": 4247,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    n = int(stdin.readline().strip())\n    p = list(map(int, stdin.readline().strip().split()))\n\n    # initialize variables\n    second_smallest = None\n    count = 0\n\n    # loop through all numbers in p\n    for i in range(1, n - 1):\n        # check if p[i] is the second smallest number\n        if p[i] < p[i - 1] and p[i] < p[i + 1]:\n            if second_smallest is None:\n                second_smallest = p[i]\n                count += 1\n            elif second_smallest == p[i]:\n                pass\n            else:\n                second_smallest = p[i]\n                count += 1\n\n    # print output\n    print(count)\n\n    return \"\"\n"
    },
    {
        "number": 4247,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Reading input from standard input\n    n = int(stdin.readline().strip())\n    p = list(map(int, stdin.readline().strip().split()))\n\n    # Counting the number of elements that satisfy the condition\n    count = 0\n    for i in range(1, n - 1):\n        if p[i] < p[i - 1] and p[i] < p[i + 1]:\n            count += 1\n\n    return str(count)"
    },
    {
        "number": 4247,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    p = list(map(int, stdin.split()[1:]))\n    \n    count = 0\n    \n    for i in range(1, n - 1):\n        if p[i] < p[i - 1] and p[i] < p[i + 1]:\n            count += 1\n    \n    return str(count)\n\nprint(solution(input()))"
    },
    {
        "number": 4247,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    p = list(map(int, stdin.readline().strip().split()))\n\n    count = 0\n    for i in range(1, n - 1):\n        if p[i-1] < p[i] < p[i+1]:\n            count += 1\n\n    return str(count)"
    },
    {
        "number": 4247,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    p = list(map(int, stdin.split('\\n')[1].split()))\n    \n    count = 0\n    for i in range(1, n - 1):\n        if p[i - 1] > p[i] and p[i] < p[i + 1]:\n            count += 1\n            \n    return str(count)"
    },
    {
        "number": 4247,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    p = list(map(int, stdin.readline().strip().split()))\n    count = 0\n    for i in range(1, n - 1):\n        if p[i] < p[i - 1] and p[i] < p[i + 1] and p[i] < p[i - 2] and p[i] < p[i + 2]:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4247,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    nums = list(map(int, stdin.readline().split()))\n    \n    count = 0\n    for i in range(1, n - 1):\n        if nums[i] > nums[i - 1] and nums[i] < nums[i + 1]:\n            count += 1\n            \n    return str(count)"
    },
    {
        "number": 4247,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    p = list(map(int, stdin.readline().strip().split()))\n    count = 0\n    for i in range(1, n - 1):\n        if p[i] > p[i-1] and p[i] > p[i+1]:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4248,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    points = []\n    for i in range(n):\n        x, y = map(float, stdin.readline().strip().split())\n        points.append((x, y))\n    angle = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            x1, y1 = points[i]\n            x2, y2 = points[j]\n            theta = math.atan2(y2-y1, x2-x1)\n            angle += theta\n    return \"{:.2f}\".format(abs(angle) % (2*math.pi))\n\ndef"
    },
    {
        "number": 4248,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    points = []\n    for i in range(n):\n        x, y = list(map(float, stdin.readline().split()))\n        points.append((x, y))\n    theta = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            x1, y1 = points[i]\n            x2, y2 = points[j]\n            theta += math.atan2(y2-y1, x2-x1)\n    theta /= (2*n)\n    theta = math.degrees(theta)\n    return str(round(theta, 3))"
    },
    {
        "number": 4248,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split(\"\\n\")\n    n = int(lines[0])\n    points = [(float(line.split()[0]), float(line.split()[1])) for line in lines[1:]]\n    points.sort(key=lambda x: (x[0]**2 + x[1]**2))\n    centroid = ((points[0][0] + points[-1][0])/2, (points[0][1] + points[-1][1])/2)\n    distance = 0\n    for point in points:\n        distance += ((point[0]-centroid[0])**2 + (point[1]-centroid[1])**2)**0.5\n    return f\"{distance:.3f}\""
    },
    {
        "number": 4248,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    x, y = [], []\n    for i in range(n):\n        x_, y_ = map(float, stdin.readline().split())\n        x.append(x_)\n        y.append(y_)\n    \n    def slope(x1, y1, x2, y2):\n        return (y2 - y1) / (x2 - x1)\n    \n    def angle(x1, y1, x2, y2):\n        return math.atan2(y2 - y1, x2 - x1)\n    \n    slopes = []\n    for i in range(n):\n        for j in range(i + 1, n):\n            slopes.append(slope(x[i], y[i], x[j], y[j]))\n    median_slope = sorted(slopes)[len(slopes) // 2]\n    \n    angles = []\n    for i in range(n):\n        for j in range(i + 1, n):\n            angles.append(angle(x[i], y[i], x[j], y[j]))\n    median_angle = sorted(angles)[len(angles) // 2]\n    \n    theta = median_angle - math.pi / 2\n    if theta < 0:\n        theta += 2 * math.pi\n    \n    return \"{:.3f}\".format(theta)"
    },
    {
        "number": 4248,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    points = [tuple(map(float, line.split())) for line in stdin.splitlines()[1:]]\n    xs, ys = zip(*points)\n    xs_mean = sum(xs) / n\n    ys_mean = sum(ys) / n\n    x_diff_sq_sum = sum([(x - xs_mean) ** 2 for x in xs])\n    y_diff_sq_sum = sum([(y - ys_mean) ** 2 for y in ys])\n    xy_cov = sum([(x - xs_mean) * (y - ys_mean) for x, y in points])\n    theta = 0.5 * atan2(2 * xy_cov, x_diff_sq_sum - y_diff_sq_sum)\n    return f\"{theta:.3f}\"\n\nwith open(\"input.txt\") as f:\n    input_text = f.read()\n\nprint(solution(input_text))"
    },
    {
        "number": 4248,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    points = []\n    for i in range(n):\n        x, y = map(float, stdin.readline().strip().split())\n        points.append((x, y))\n    if n == 1:\n        theta = 0\n    else:\n        x_sum = sum(x for x, _ in points)\n        y_sum = sum(y for _, y in points)\n        x_mean = x_sum / n\n        y_mean = y_sum / n\n        numerator = sum((x - x_mean) * (y - y_mean) for x, y in points)\n        denominator = sum((x - x_mean) ** 2 for x, _ in points) ** 0.5 * sum((y - y_mean) ** 2 for _, y in points) ** 0.5\n        theta = round(math.degrees(math.atan2(numerator, denominator)), 3)\n    return str(theta)"
    },
    {
        "number": 4248,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n = int(stdin.readline())\n    points = []\n    for i in range(n):\n        x, y = map(float, stdin.readline().split())\n        points.append((x, y))\n    \n    # calculate centroid\n    centroid_x = sum(x for x, y in points) / n\n    centroid_y = sum(y for x, y in points) / n\n    \n    # calculate angle\n    angle = 0\n    for x, y in points:\n        angle += math.atan2(y - centroid_y, x - centroid_x)\n    \n    # convert to degrees and round to two decimal places\n    theta = math.degrees(angle) % 360\n    return f\"{theta:.2f}\""
    },
    {
        "number": 4248,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    points = []\n    for i in range(n):\n        x, y = map(float, stdin.readline().strip().split())\n        points.append((x, y))\n    if n == 2:\n        return str(abs(points[0][0] - points[1][0]) + abs(points[0][1] - points[1][1]))\n    else:\n        x_sum = sum(x for x, y in points)\n        y_sum = sum(y for x, y in points)\n        x_mean = x_sum / n\n        y_mean = y_sum / n\n        distances_squared = [(x - x_mean) ** 2 + (y - y_mean) ** 2 for x, y in points]\n        theta = sum(math.atan2(y - y_mean, x - x_mean) for x, y in points)\n        if theta < 0:\n            theta += 2 * math.pi\n        return str(theta)"
    },
    {
        "number": 4248,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    x = []\n    y = []\n    for i in range(1, n+1):\n        x_i, y_i = map(float, stdin.splitlines()[i].split())\n        x.append(x_i)\n        y.append(y_i)\n    x_avg = sum(x)/n\n    y_avg = sum(y)/n\n    numerator = sum([(x_i - x_avg)*(y_i - y_avg) for x_i, y_i in zip(x, y)])\n    denominator = sum([(x_i - x_avg)**2 for x_i in x]) * sum([(y_i - y_avg)**2 for y_i in y])\n    if denominator == 0:\n        theta = 0\n    else:\n        theta = 0.5 * math.atan2(numerator, denominator)\n    return str(theta)\n\ndef"
    },
    {
        "number": 4248,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    x = []\n    y = []\n    for i in range(n):\n        x_, y_ = map(float, stdin.readline().strip().split())\n        x.append(x_)\n        y.append(y_)\n    x_sum = sum(x)\n    y_sum = sum(y)\n    x_mean = x_sum / n\n    y_mean = y_sum / n\n    x_diff_squared_sum = sum([(xi - x_mean) ** 2 for xi in x])\n    y_diff_squared_sum = sum([(yi - y_mean) ** 2 for yi in y])\n    cov = sum([(x[i] - x_mean) * (y[i] - y_mean) for i in range(n)])\n    var_x = x_diff_squared_sum / (n - 1)\n    var_y = y_diff_squared_sum / (n - 1)\n    cov_div_var_x = cov / var_x\n    theta = math.atan(cov_div_var_x)\n    return \"{:.3f}\".format(math.degrees(theta))"
    },
    {
        "number": 4249,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    max_pages = 0\n    for i in range(n):\n        max_pages += max(0, a[i] - i)\n    if max_pages < m:\n        return -1\n    days = 1\n    while days <= n:\n        if (max_pages // days) * days >= m:\n            return days\n        days += 1\n    return -1"
    },
    {
        "number": 4249,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n, m = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    \n    # sort cups by caffeine dosage\n    a.sort()\n    \n    # initialize variables\n    days = 1\n    page_count = 0\n    page_left = m\n    \n    # iterate over cups\n    for i in range(n):\n        # add remaining pages to current day\n        page_count += min(page_left, a[i])\n        page_left -= a[i]\n        \n        # if there are no more pages left, move to next day\n        if page_left == 0:\n            days += 1\n            page_count = 0\n            page_left = m\n    \n    # check if coursework can be completed\n    if page_count < m:\n        return -1\n    \n    # return minimum number of days to complete coursework\n    return days"
    },
    {
        "number": 4249,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n    \n    # DP table to store the maximum pages that Polycarp can write in the i-th day\n    dp = [0] * (n+1)\n    \n    # For each day, Polycarp can only drink one cup of coffee\n    for i in range(1, n+1):\n        dp[i] = dp[i-1] + a[i-1]\n    \n    # Try to find the minimum number of days required to write the coursework\n    for i in range(n+1, m+1):\n        dp[i] = float('inf')\n        for j in range(1, n+1):\n            if dp[i-j]!= float('inf'):\n                dp[i] = min(dp[i], dp[i-j] + max(0, a[j-1] - j + 1))\n    \n    # If Polycarp cannot write the coursework in any day, print -1\n    if dp[m] == float('inf'):\n        return '-1'\n    \n    # Otherwise, print the minimum number of days required to write the coursework\n    return str(dp[m])\n\nprint(solution('5 8\\n2 3 1 1 2\\n')) # Output: 4\nprint(solution('7 10\\n1 3 4 2 1 4 2\\n')) # Output: 2\nprint(solution('5 15\\n5 5 5 5 5\\n')) # Output: 1\nprint(solution('5 16\\n5 5 5 5 5\\n')) # Output: 2\nprint(solution('5 26\\n5 5 5 5 5\\n')) # Output: -1"
    },
    {
        "number": 4249,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    if sum(a) < m:\n        return -1\n    dp = [[0 for _ in range(m+1)] for _ in range(n+1)]\n    for i in range(1, n+1):\n        for j in range(m+1):\n            if a[i-1] > j:\n                dp[i][j] = dp[i-1][j]\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i-1][j-a[i-1]] + a[i-1])\n    ans = float('inf')\n    for i in range(m//sum(a)):\n        cur = 0\n        for j in range(1, n+1):\n            if dp[j][i*sum(a)] == 0:\n                return -1\n            cur += dp[j][i*sum(a)]\n        ans = min(ans, cur)\n    return ans"
    },
    {
        "number": 4249,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    k = 0\n    for i in range(n):\n        if a[i] >= m:\n            k += m // a[i]\n            if m % a[i]!= 0:\n                k += 1\n    if k == 0:\n        return \"-1\"\n    return str(k)"
    },
    {
        "number": 4249,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort(reverse=True)\n    days = 0\n    while m > 0:\n        k = 0\n        while k < n and m > 0:\n            if a[k] <= m:\n                m -= a[k]\n                k += 1\n            else:\n                break\n        if k == 0:\n            return -1\n        days += 1\n        m -= k\n    return days"
    },
    {
        "number": 4249,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:]))\n    \n    # case when there is no way to write the coursework\n    if sum(a) < m:\n        return -1\n    \n    # binary search for minimum number of days\n    left, right = 0, 10**18\n    while left < right:\n        mid = (left + right) // 2\n        days = 0\n        energy = 0\n        for i in range(n):\n            if a[i] <= mid:\n                energy += a[i]\n                if energy >= m:\n                    days += 1\n                    energy = 0\n        if energy > 0:\n            days += 1\n        if days > mid:\n            right = mid\n        else:\n            left = mid + 1\n    \n    return left"
    },
    {
        "number": 4249,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:]))\n    a.sort(reverse=True)\n    days = 0\n    i = 0\n    while m > 0:\n        if m >= a[i]:\n            days += 1\n            m -= a[i]\n        elif i + 1 < len(a) and m + a[i+1] >= a[i]:\n            days += 1\n            m += a[i+1]\n            i += 1\n        else:\n            return -1\n    return days\n\nstdin = \"5 15\\n5 5 5 5 5\"\nprint(solution(stdin))"
    },
    {
        "number": 4249,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    s = 0\n    for i in range(n):\n        s += a[i]\n    if s < m:\n        return '-1'\n    dp = [float('inf')] * (s + 1)\n    dp[0] = 0\n    for i in range(n):\n        for j in range(s, -1, -1):\n            if a[i] <= j:\n                dp[j] = min(dp[j], dp[j - a[i]] + 1)\n    return dp[s] if dp[s]!= float('inf') else '-1'"
    },
    {
        "number": 4249,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:]))\n    # dp[i][j] is the minimum number of days Polycarp needs to write j pages\n    dp = [[float('inf')] * (m + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(m + 1):\n            if a[i - 1] <= j:\n                dp[i][j] = min(dp[i][j], dp[i - 1][j - a[i - 1]] + 1)\n            dp[i][j] = min(dp[i][j], dp[i - 1][j])\n    if dp[n][m] == float('inf'):\n        return '-1'\n    return str(dp[n][m])"
    },
    {
        "number": 4250,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    s = list(map(int, stdin.split()[2:]))\n\n    t = sorted(s)[-k:]\n    return''.join(map(str, t))\n\nprint(solution('7 3 1 2 3 2 4 3 1')) # 1 2 3"
    },
    {
        "number": 4250,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Find any array t of length k such that you can cut out maximum number of copies of array t from array s.\n    \"\"\"\n    n, k = map(int, stdin.strip().split())\n    s = list(map(int, stdin.strip().split()))\n    t = []\n    for i in range(k):\n        count = 0\n        for j in range(n):\n            if s[j] == t and count == 0:\n                count += 1\n            if s[j] == t:\n                count += 1\n        if count == 0:\n            return \"No such array t exists\"\n        t.append(s.pop(s.index(t[0])))\n    return \" \".join(map(str, t))"
    },
    {
        "number": 4250,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.strip().split())\n    s = list(map(int, stdin.strip().split()))\n\n    # sort the list s to make finding consecutive elements easier\n    s.sort()\n\n    # initialize the list t with the first k elements of s\n    t = s[:k]\n\n    # initialize a counter to keep track of the number of times we have cut out t\n    count = 0\n\n    # loop until we have cut out the copy of t from s maximum number of times\n    while count < k:\n        # initialize a variable to keep track of whether we can find the next element of t in s\n        found = True\n\n        # loop through the elements of t and check if they are consecutive in s\n        for i in range(k - 1):\n            if t[i + 1]!= t[i] + 1:\n                # if we cannot find the next element of t in s, we cannot cut out another copy of t\n                found = False\n                break\n\n        # if we found the next element of t in s, cut out one more copy of t\n        if found:\n            count += 1\n            # update the list t by removing the first k elements of s\n            t = s[k:]\n            # add the first k elements of s to t\n            t += s[:k]\n        else:\n            # if we cannot find the next element of t in s, we cannot cut out another copy of t\n            break\n\n    # print the elements of t that we can cut out maximum number of times\n    print(*t)\n"
    },
    {
        "number": 4250,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = list(map(int, stdin.split()))\n    \n    t = set()\n    for i in range(n-k+1):\n        sub = s[i:i+k]\n        if len(set(sub)) == k:\n            t.add(tuple(sub))\n    \n    if not t:\n        return \"NO SOLUTION\"\n    \n    t = sorted(t, key=lambda x: len(x), reverse=True)\n    return \" \".join(map(str, t[0]))\n\nwith open(\"input.txt\", \"r\") as f:\n    input_str = f.read()\n    output = solution(input_str)\n    print(output)"
    },
    {
        "number": 4250,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = list(map(int, stdin.split()))\n    \n    # sort the array s\n    s.sort()\n    \n    # initialize variables\n    count = 0\n    result = []\n    \n    # loop through the sorted array\n    for i in range(len(s)):\n        # check if the element s[i] is the first element of the array t\n        if count == 0:\n            result.append(s[i])\n            count += 1\n        # check if the element s[i] is equal to the last element of the array t\n        elif s[i] == result[-1]:\n            count += 1\n        # if the element s[i] is not the first or last element of the array t, break\n        else:\n            break\n    \n    # print the array t that can be cut out maximum number of times\n    print(*result)"
    },
    {
        "number": 4250,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.strip().split())\n    s = list(map(int, stdin.strip().split()))\n    s = sorted(set(s))\n    t = []\n    for i in range(k):\n        t.append(s[i])\n    return''.join(map(str, t))\n\nwith open('input.txt', 'r') as f:\n    stdin = f.read()\n    print(solution(stdin))"
    },
    {
        "number": 4250,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = list(map(int, stdin.split()))\n    ans = []\n\n    for i in range(k):\n        max_count = 0\n        curr_count = 0\n        curr_num = s[i]\n        for j in range(i, n):\n            if s[j] == curr_num:\n                curr_count += 1\n            else:\n                max_count = max(max_count, curr_count)\n                curr_count = 1\n                curr_num = s[j]\n        max_count = max(max_count, curr_count)\n        ans.append(max_count)\n\n    for i in range(k, n):\n        curr_count = 1\n        curr_num = s[i]\n        for j in range(i, n):\n            if s[j] == curr_num:\n                curr_count += 1\n            else:\n                ans[j-k] = max(ans[j-k], curr_count)\n                curr_count = 1\n                curr_num = s[j]\n        ans[j-k] = max(ans[j-k], curr_count)\n\n    result = []\n    for i in range(k):\n        for j in range(ans[i]):\n            result.append(s[i])\n    print(\" \".join(map(str, result)))\n"
    },
    {
        "number": 4250,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    n, k = map(int, stdin.readline().split())\n    s = list(map(int, stdin.readline().split()))\n\n    # Sort the array\n    s.sort()\n\n    # Initialize variables\n    ans = []\n    num_copies = 0\n\n    # Loop through all possible combinations of k elements\n    for i in range(n - k + 1):\n        # Check if the current combination is greater than the previous one\n        if i > 0 and s[i] == s[i-1]:\n            continue\n\n        # Add the current combination to the answer\n        curr_ans = s[i:i+k]\n        ans.append(curr_ans)\n        num_copies += 1\n\n        # Check if there are enough elements in the array to cut out another copy\n        if i + k >= n:\n            break\n\n    # Print the answer with the maximum number of copies\n    max_copies = 0\n    max_ans = None\n    for i in range(num_copies):\n        curr_ans = ans[i]\n        num_curr_copies = 0\n        j = n - k\n        while j >= 0:\n            if s[j:j+k] == curr_ans:\n                num_curr_copies += 1\n                j -= k\n            else:\n                j -= 1\n\n        if num_curr_copies > max_copies:\n            max_copies = num_curr_copies\n            max_ans = curr_ans\n\n    return''.join(map(str, max_ans))\n"
    },
    {
        "number": 4250,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n, k = map(int, stdin.strip().split())\n    s = list(map(int, stdin.strip().split()))\n    \n    # sort the array s\n    s = sorted(s)\n    \n    # initialize the answer array\n    t = []\n    \n    # loop through all possible subarrays of length k\n    for i in range(n-k+1):\n        subarray = s[i:i+k]\n        if subarray not in t:\n            t.append(subarray)\n    \n    # find the array t with maximum number of copies\n    max_copies = 0\n    max_t = None\n    for candidate in t:\n        count = s.count(candidate[0])\n        for elem in candidate:\n            count = min(count, s.count(elem))\n        if count > max_copies:\n            max_copies = count\n            max_t = candidate\n    \n    # print the answer\n    return''.join(map(str, max_t))"
    },
    {
        "number": 4250,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    s = list(map(int, stdin.split()[2:]))\n    \n    t = []\n    count = 0\n    \n    for i in range(k):\n        max_count = 0\n        max_idx = -1\n        \n        for j in range(n):\n            if s[j] == s[i] and s[j] not in t:\n                count += 1\n                max_count += 1\n                max_idx = j\n        \n        if max_count > 0:\n            t.append(s[i])\n            for j in range(max_count):\n                s.remove(s[max_idx])\n    \n    return''.join(map(str, t))"
    }
]